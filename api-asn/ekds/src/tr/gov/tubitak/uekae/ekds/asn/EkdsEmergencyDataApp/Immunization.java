/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp.Immunization_immunizationIndicator;
import tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp.Immunization_immunizationStatus;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CodedData;

public class Immunization extends Asn1Type {
   public Asn1Integer immunizationEmergencyCategory;
   public Immunization_immunizationIndicator immunizationIndicator = null;
   public Immunization_immunizationStatus immunizationStatus = null;
   public Asn1UTCTime lastDateImmunized;  // optional
   public CodedData immunizationCode;

   public Immunization () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Immunization (
      Asn1Integer immunizationEmergencyCategory_,
      Immunization_immunizationIndicator immunizationIndicator_,
      Immunization_immunizationStatus immunizationStatus_,
      Asn1UTCTime lastDateImmunized_,
      CodedData immunizationCode_
   ) {
      super();
      immunizationEmergencyCategory = immunizationEmergencyCategory_;
      immunizationIndicator = immunizationIndicator_;
      immunizationStatus = immunizationStatus_;
      lastDateImmunized = lastDateImmunized_;
      immunizationCode = immunizationCode_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Immunization (
      Asn1Integer immunizationEmergencyCategory_,
      Immunization_immunizationIndicator immunizationIndicator_,
      Immunization_immunizationStatus immunizationStatus_,
      CodedData immunizationCode_
   ) {
      super();
      immunizationEmergencyCategory = immunizationEmergencyCategory_;
      immunizationIndicator = immunizationIndicator_;
      immunizationStatus = immunizationStatus_;
      immunizationCode = immunizationCode_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Immunization (long immunizationEmergencyCategory_,
      Immunization_immunizationIndicator immunizationIndicator_,
      Immunization_immunizationStatus immunizationStatus_,
      String lastDateImmunized_,
      CodedData immunizationCode_
   ) {
      super();
      immunizationEmergencyCategory = new Asn1Integer (immunizationEmergencyCategory_);
      immunizationIndicator = immunizationIndicator_;
      immunizationStatus = immunizationStatus_;
      lastDateImmunized = new Asn1UTCTime (lastDateImmunized_);
      immunizationCode = immunizationCode_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Immunization (
      long immunizationEmergencyCategory_,
      Immunization_immunizationIndicator immunizationIndicator_,
      Immunization_immunizationStatus immunizationStatus_,
      CodedData immunizationCode_
   ) {
      super();
      immunizationEmergencyCategory = new Asn1Integer (immunizationEmergencyCategory_);
      immunizationIndicator = immunizationIndicator_;
      immunizationStatus = immunizationStatus_;
      immunizationCode = immunizationCode_;
   }

   public void init () {
      immunizationEmergencyCategory = null;
      immunizationIndicator = null;
      immunizationStatus = null;
      lastDateImmunized = null;
      immunizationCode = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode immunizationEmergencyCategory

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         immunizationEmergencyCategory = new Asn1Integer();
         immunizationEmergencyCategory.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode immunizationIndicator

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, false)) {
         int tval = buffer.decodeEnumValue (Immunization_immunizationIndicator.TAG, true, elemLen.value);
         immunizationIndicator = Immunization_immunizationIndicator.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode immunizationStatus

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, false)) {
         int tval = buffer.decodeEnumValue (Immunization_immunizationStatus.TAG, true, elemLen.value);
         immunizationStatus = Immunization_immunizationStatus.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode lastDateImmunized

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         lastDateImmunized = new Asn1UTCTime (true);
         lastDateImmunized.decode (buffer, false, elemLen.value);
      }

      // decode immunizationCode

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         immunizationCode = new CodedData();
         immunizationCode.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode immunizationCode

      len = immunizationCode.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
      _aal += len;

      // encode lastDateImmunized

      if (lastDateImmunized != null) {
         len = lastDateImmunized.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
         _aal += len;
      }

      // encode immunizationStatus

      len = immunizationStatus.encode (buffer, true);
      _aal += len;

      // encode immunizationIndicator

      len = immunizationIndicator.encode (buffer, true);
      _aal += len;

      // encode immunizationEmergencyCategory

      len = immunizationEmergencyCategory.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (immunizationEmergencyCategory != null) immunizationEmergencyCategory.print (_out, "immunizationEmergencyCategory", _level+1);
      if (immunizationIndicator != null) immunizationIndicator.print (_out, "immunizationIndicator", _level+1);
      if (immunizationStatus != null) immunizationStatus.print (_out, "immunizationStatus", _level+1);
      if (lastDateImmunized != null) lastDateImmunized.print (_out, "lastDateImmunized", _level+1);
      if (immunizationCode != null) immunizationCode.print (_out, "immunizationCode", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
