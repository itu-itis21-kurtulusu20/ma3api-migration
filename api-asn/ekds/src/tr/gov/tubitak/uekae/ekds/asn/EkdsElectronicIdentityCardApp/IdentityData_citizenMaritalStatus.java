/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class IdentityData_citizenMaritalStatus extends Asn1Enumerated {
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.CTXT, Asn1Tag.PRIM, 10);

   // Integer constants for switch-case
   public static final int _SINGLE = 0;
   public static final int _MARRIED = 1;
   public static final int _WIDOWED = 2;
   public static final int _DIVORCED = 3;
   public static final int _CANCELLED = 4;
   public static final int _ANNULMENT = 5;
   public static final int _NOTINITIALIZED = 6;

   // Singleton instances of IdentityData_citizenMaritalStatus
   protected static IdentityData_citizenMaritalStatus _single = null;
   protected static IdentityData_citizenMaritalStatus _married = null;
   protected static IdentityData_citizenMaritalStatus _widowed = null;
   protected static IdentityData_citizenMaritalStatus _divorced = null;
   protected static IdentityData_citizenMaritalStatus _cancelled = null;
   protected static IdentityData_citizenMaritalStatus _annulment = null;
   protected static IdentityData_citizenMaritalStatus _notInitialized = null;

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    *   6
    */
   protected IdentityData_citizenMaritalStatus (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for single.
    */
   public static IdentityData_citizenMaritalStatus single() {
      if (_single == null) _single = new IdentityData_citizenMaritalStatus (0);

      return _single;
   }

   /**
    * Singleton accessor method for married.
    */
   public static IdentityData_citizenMaritalStatus married() {
      if (_married == null) _married = new IdentityData_citizenMaritalStatus (1);

      return _married;
   }

   /**
    * Singleton accessor method for widowed.
    */
   public static IdentityData_citizenMaritalStatus widowed() {
      if (_widowed == null) _widowed = new IdentityData_citizenMaritalStatus (2);

      return _widowed;
   }

   /**
    * Singleton accessor method for divorced.
    */
   public static IdentityData_citizenMaritalStatus divorced() {
      if (_divorced == null) _divorced = new IdentityData_citizenMaritalStatus (3);

      return _divorced;
   }

   /**
    * Singleton accessor method for cancelled.
    */
   public static IdentityData_citizenMaritalStatus cancelled() {
      if (_cancelled == null) _cancelled = new IdentityData_citizenMaritalStatus (4);

      return _cancelled;
   }

   /**
    * Singleton accessor method for annulment.
    */
   public static IdentityData_citizenMaritalStatus annulment() {
      if (_annulment == null) _annulment = new IdentityData_citizenMaritalStatus (5);

      return _annulment;
   }

   /**
    * Singleton accessor method for notInitialized.
    */
   public static IdentityData_citizenMaritalStatus notInitialized() {
      if (_notInitialized == null) _notInitialized = new IdentityData_citizenMaritalStatus (6);

      return _notInitialized;
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static IdentityData_citizenMaritalStatus valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return single();
         case 1: return married();
         case 2: return widowed();
         case 3: return divorced();
         case 4: return cancelled();
         case 5: return annulment();
         case 6: return notInitialized();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = matchTag (buffer, Asn1Tag.CTXT, Asn1Tag.PRIM, 10);

      super.decode (buffer, false, llen);

      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3 ||
            value == 4 ||
            value == 5 ||
            value == 6))
      {
         throw new Asn1InvalidEnumException (value);
      }

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3 ||
            value == 4 ||
            value == 5 ||
            value == 6))
      {
         throw new Asn1InvalidEnumException (value);
      }

      int len;
      len = super.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 10, len);
      return (len);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("single");
         case 1: return ("married");
         case 2: return ("widowed");
         case 3: return ("divorced");
         case 4: return ("cancelled");
         case 5: return ("annulment");
         case 6: return ("notInitialized");
         default: return ("UNDEFINED");
      }
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " = " + toString());
   }
}
