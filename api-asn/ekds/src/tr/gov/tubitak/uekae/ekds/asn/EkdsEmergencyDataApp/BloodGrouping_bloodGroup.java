/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class BloodGrouping_bloodGroup extends Asn1Enumerated {
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0);

   // Integer constants for switch-case
   public static final int _GROUP_O = 0;
   public static final int _GROUP_A = 1;
   public static final int _GROUP_B = 2;
   public static final int _GROUP_AB = 3;
   public static final int _NOTINITIALIZED = 4;

   // Singleton instances of BloodGrouping_bloodGroup
   protected static BloodGrouping_bloodGroup _group_O = null;
   protected static BloodGrouping_bloodGroup _group_A = null;
   protected static BloodGrouping_bloodGroup _group_B = null;
   protected static BloodGrouping_bloodGroup _group_AB = null;
   protected static BloodGrouping_bloodGroup _notInitialized = null;

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    */
   protected BloodGrouping_bloodGroup (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for group_O.
    */
   public static BloodGrouping_bloodGroup group_O() {
      if (_group_O == null) _group_O = new BloodGrouping_bloodGroup (0);

      return _group_O;
   }

   /**
    * Singleton accessor method for group_A.
    */
   public static BloodGrouping_bloodGroup group_A() {
      if (_group_A == null) _group_A = new BloodGrouping_bloodGroup (1);

      return _group_A;
   }

   /**
    * Singleton accessor method for group_B.
    */
   public static BloodGrouping_bloodGroup group_B() {
      if (_group_B == null) _group_B = new BloodGrouping_bloodGroup (2);

      return _group_B;
   }

   /**
    * Singleton accessor method for group_AB.
    */
   public static BloodGrouping_bloodGroup group_AB() {
      if (_group_AB == null) _group_AB = new BloodGrouping_bloodGroup (3);

      return _group_AB;
   }

   /**
    * Singleton accessor method for notInitialized.
    */
   public static BloodGrouping_bloodGroup notInitialized() {
      if (_notInitialized == null) _notInitialized = new BloodGrouping_bloodGroup (4);

      return _notInitialized;
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static BloodGrouping_bloodGroup valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return group_O();
         case 1: return group_A();
         case 2: return group_B();
         case 3: return group_AB();
         case 4: return notInitialized();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = matchTag (buffer, Asn1Tag.CTXT, Asn1Tag.PRIM, 0);

      super.decode (buffer, false, llen);

      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3 ||
            value == 4))
      {
         throw new Asn1InvalidEnumException (value);
      }

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3 ||
            value == 4))
      {
         throw new Asn1InvalidEnumException (value);
      }

      int len;
      len = super.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      return (len);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("group_O");
         case 1: return ("group_A");
         case 2: return ("group_B");
         case 3: return ("group_AB");
         case 4: return ("notInitialized");
         default: return ("UNDEFINED");
      }
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " = " + toString());
   }
}
