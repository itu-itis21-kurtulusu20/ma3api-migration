/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Certificate;

public class DataObjectDigitalSignature_signVerifyData extends Asn1Choice {
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.CTXT, Asn1Tag.CONS, 3);

   // Choice element identifier constants
   public final static byte _SIGNCERTDATA = 1;
   public final static byte _SIGNCERTID = 2;

   public DataObjectDigitalSignature_signVerifyData () {
      super();
   }

   public DataObjectDigitalSignature_signVerifyData (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _SIGNCERTDATA: return "signCertData";
      case _SIGNCERTID: return "signCertID";
      default: return "UNDEFINED";
      }
   }

   public void set_signCertData (Certificate value) {
      setElement (_SIGNCERTDATA, value);
   }

   public void set_signCertID (Asn1Integer value) {
      setElement (_SIGNCERTID, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);

      if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
      {
         Certificate signCertData = new Certificate();
         setElement (_SIGNCERTDATA, signCertData);
         element.decode (buffer, false, len);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1)) {
         Asn1Integer signCertID = new Asn1Integer();
         setElement (_SIGNCERTID, signCertID);
         element.decode (buffer, false, len);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode signCertData
      case _SIGNCERTDATA:
         Certificate signCertData = (Certificate) getElement();
         len = signCertData.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
         break;

      // encode signCertID
      case _SIGNCERTID:
         Asn1Integer signCertID = (Asn1Integer) getElement();
         len = signCertID.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      if (explicit)
         _aal += buffer.encodeTagAndLength (TAG, _aal);

      return _aal;
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
