/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsRemoteAuthenticationApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class IVAData extends Asn1Type {
   public Asn1IA5String version;
   public IdentityVerificationAssertionCreationData creationData;
   public IdentityVerificationAssertionStaticData staticData;
   public CredentialsCheckStatus credentialCheck;

   public IVAData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IVAData (
      Asn1IA5String version_,
      IdentityVerificationAssertionCreationData creationData_,
      IdentityVerificationAssertionStaticData staticData_,
      CredentialsCheckStatus credentialCheck_
   ) {
      super();
      version = version_;
      creationData = creationData_;
      staticData = staticData_;
      credentialCheck = credentialCheck_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public IVAData (String version_,
      IdentityVerificationAssertionCreationData creationData_,
      IdentityVerificationAssertionStaticData staticData_,
      CredentialsCheckStatus credentialCheck_
   ) {
      super();
      version = new Asn1IA5String (version_);
      creationData = creationData_;
      staticData = staticData_;
      credentialCheck = credentialCheck_;
   }

   public void init () {
      version = null;
      creationData = null;
      staticData = null;
      credentialCheck = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         version = new Asn1IA5String();
         version.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode creationData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         creationData = new IdentityVerificationAssertionCreationData();
         creationData.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode staticData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         staticData = new IdentityVerificationAssertionStaticData();
         staticData.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode credentialCheck

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         credentialCheck = new CredentialsCheckStatus();
         credentialCheck.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode credentialCheck

      len = credentialCheck.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode staticData

      len = staticData.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
      _aal += len;

      // encode creationData

      len = creationData.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
      _aal += len;

      // encode version

      len = version.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (creationData != null) creationData.print (_out, "creationData", _level+1);
      if (staticData != null) staticData.print (_out, "staticData", _level+1);
      if (credentialCheck != null) credentialCheck.print (_out, "credentialCheck", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
