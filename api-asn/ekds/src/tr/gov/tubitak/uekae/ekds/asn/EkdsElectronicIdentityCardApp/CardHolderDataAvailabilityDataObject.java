/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class CardHolderDataAvailabilityDataObject extends Asn1Type {
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 11);

   public Asn1Boolean fingerPrintAvailable;
   public Asn1Boolean veinPrintAvailable;
   public Asn1Boolean facialImageAvailable;
   public Asn1Boolean identityDataAvailable;

   public CardHolderDataAvailabilityDataObject () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CardHolderDataAvailabilityDataObject (
      Asn1Boolean fingerPrintAvailable_,
      Asn1Boolean veinPrintAvailable_,
      Asn1Boolean facialImageAvailable_,
      Asn1Boolean identityDataAvailable_
   ) {
      super();
      fingerPrintAvailable = fingerPrintAvailable_;
      veinPrintAvailable = veinPrintAvailable_;
      facialImageAvailable = facialImageAvailable_;
      identityDataAvailable = identityDataAvailable_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CardHolderDataAvailabilityDataObject (boolean fingerPrintAvailable_,
      boolean veinPrintAvailable_,
      boolean facialImageAvailable_,
      boolean identityDataAvailable_
   ) {
      super();
      fingerPrintAvailable = new Asn1Boolean (fingerPrintAvailable_);
      veinPrintAvailable = new Asn1Boolean (veinPrintAvailable_);
      facialImageAvailable = new Asn1Boolean (facialImageAvailable_);
      identityDataAvailable = new Asn1Boolean (identityDataAvailable_);
   }

   public void init () {
      fingerPrintAvailable = null;
      veinPrintAvailable = null;
      facialImageAvailable = null;
      identityDataAvailable = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode fingerPrintAvailable

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         fingerPrintAvailable = new Asn1Boolean();
         fingerPrintAvailable.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode veinPrintAvailable

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         veinPrintAvailable = new Asn1Boolean();
         veinPrintAvailable.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode facialImageAvailable

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         facialImageAvailable = new Asn1Boolean();
         facialImageAvailable.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode identityDataAvailable

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         identityDataAvailable = new Asn1Boolean();
         identityDataAvailable.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode identityDataAvailable

      len = identityDataAvailable.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode facialImageAvailable

      len = facialImageAvailable.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode veinPrintAvailable

      len = veinPrintAvailable.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode fingerPrintAvailable

      len = fingerPrintAvailable.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (fingerPrintAvailable != null) fingerPrintAvailable.print (_out, "fingerPrintAvailable", _level+1);
      if (veinPrintAvailable != null) veinPrintAvailable.print (_out, "veinPrintAvailable", _level+1);
      if (facialImageAvailable != null) facialImageAvailable.print (_out, "facialImageAvailable", _level+1);
      if (identityDataAvailable != null) identityDataAvailable.print (_out, "identityDataAvailable", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
