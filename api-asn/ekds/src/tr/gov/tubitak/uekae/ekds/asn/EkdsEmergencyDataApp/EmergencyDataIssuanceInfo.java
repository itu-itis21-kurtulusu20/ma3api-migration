/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CardAccessDeviceSerialNumber;
import tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs.DataObjectAuthorInfo;
import tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs.DataObjectIssuerInfo;

public class EmergencyDataIssuanceInfo extends Asn1Type {
   public Asn1UTCTime issuanceDate;
   public Asn1UTCTime validFrom;
   public Asn1UTCTime validThru;
   public Asn1UTF8String issuerInstitution;
   public CardAccessDeviceSerialNumber cardAccessDevice;
   public DataObjectAuthorInfo authorInfo;
   public DataObjectIssuerInfo issuerInfo;

   public EmergencyDataIssuanceInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EmergencyDataIssuanceInfo (
      Asn1UTCTime issuanceDate_,
      Asn1UTCTime validFrom_,
      Asn1UTCTime validThru_,
      Asn1UTF8String issuerInstitution_,
      CardAccessDeviceSerialNumber cardAccessDevice_,
      DataObjectAuthorInfo authorInfo_,
      DataObjectIssuerInfo issuerInfo_
   ) {
      super();
      issuanceDate = issuanceDate_;
      validFrom = validFrom_;
      validThru = validThru_;
      issuerInstitution = issuerInstitution_;
      cardAccessDevice = cardAccessDevice_;
      authorInfo = authorInfo_;
      issuerInfo = issuerInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EmergencyDataIssuanceInfo (String issuanceDate_,
      String validFrom_,
      String validThru_,
      String issuerInstitution_,
      CardAccessDeviceSerialNumber cardAccessDevice_,
      DataObjectAuthorInfo authorInfo_,
      DataObjectIssuerInfo issuerInfo_
   ) {
      super();
      issuanceDate = new Asn1UTCTime (issuanceDate_);
      validFrom = new Asn1UTCTime (validFrom_);
      validThru = new Asn1UTCTime (validThru_);
      issuerInstitution = new Asn1UTF8String (issuerInstitution_);
      cardAccessDevice = cardAccessDevice_;
      authorInfo = authorInfo_;
      issuerInfo = issuerInfo_;
   }

   public void init () {
      issuanceDate = null;
      validFrom = null;
      validThru = null;
      issuerInstitution = null;
      cardAccessDevice = null;
      authorInfo = null;
      issuerInfo = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode issuanceDate

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         issuanceDate = new Asn1UTCTime (true);
         issuanceDate.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode validFrom

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         validFrom = new Asn1UTCTime (true);
         validFrom.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode validThru

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         validThru = new Asn1UTCTime (true);
         validThru.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode issuerInstitution

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         issuerInstitution = new Asn1UTF8String();
         issuerInstitution.decode (buffer, false, elemLen.value);
         if (!((issuerInstitution.getLength() >= 0 && issuerInstitution.getLength()
             <= 64))) {
            throw new Asn1ConsVioException ("issuerInstitution.getLength()", issuerInstitution.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode cardAccessDevice

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         cardAccessDevice = new CardAccessDeviceSerialNumber();
         cardAccessDevice.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode authorInfo

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 5, elemLen, true)) {
         authorInfo = new DataObjectAuthorInfo();
         authorInfo.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode issuerInfo

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 6, elemLen, true)) {
         issuerInfo = new DataObjectIssuerInfo();
         issuerInfo.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 6))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode issuerInfo

      len = issuerInfo.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
      _aal += len;

      // encode authorInfo

      len = authorInfo.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
      _aal += len;

      // encode cardAccessDevice

      len = cardAccessDevice.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
      _aal += len;

      // encode issuerInstitution

      if (!((issuerInstitution.getLength() >= 0 && issuerInstitution.getLength() <= 64
         ))) {
         throw new Asn1ConsVioException ("issuerInstitution.getLength()", issuerInstitution.getLength());
      }

      len = issuerInstitution.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode validThru

      len = validThru.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode validFrom

      len = validFrom.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode issuanceDate

      len = issuanceDate.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (issuanceDate != null) issuanceDate.print (_out, "issuanceDate", _level+1);
      if (validFrom != null) validFrom.print (_out, "validFrom", _level+1);
      if (validThru != null) validThru.print (_out, "validThru", _level+1);
      if (issuerInstitution != null) issuerInstitution.print (_out, "issuerInstitution", _level+1);
      if (cardAccessDevice != null) cardAccessDevice.print (_out, "cardAccessDevice", _level+1);
      if (authorInfo != null) authorInfo.print (_out, "authorInfo", _level+1);
      if (issuerInfo != null) issuerInfo.print (_out, "issuerInfo", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
