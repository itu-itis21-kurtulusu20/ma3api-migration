/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CardType;

public class CardTemplateInfoDataObject extends Asn1Type {
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.PRIV, Asn1Tag.CONS, 0);

   public CardType cardType = null;
   public Asn1UTF8String cardSerialNumber;
   public Asn1UTF8String templateName;
   public Asn1UTF8String templateMajorVer;
   public Asn1UTF8String templateMinorVer;
   public Asn1UTF8String keyGroupNumber;

   public CardTemplateInfoDataObject () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CardTemplateInfoDataObject (
      CardType cardType_,
      Asn1UTF8String cardSerialNumber_,
      Asn1UTF8String templateName_,
      Asn1UTF8String templateMajorVer_,
      Asn1UTF8String templateMinorVer_,
      Asn1UTF8String keyGroupNumber_
   ) {
      super();
      cardType = cardType_;
      cardSerialNumber = cardSerialNumber_;
      templateName = templateName_;
      templateMajorVer = templateMajorVer_;
      templateMinorVer = templateMinorVer_;
      keyGroupNumber = keyGroupNumber_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CardTemplateInfoDataObject (CardType cardType_,
      String cardSerialNumber_,
      String templateName_,
      String templateMajorVer_,
      String templateMinorVer_,
      String keyGroupNumber_
   ) {
      super();
      cardType = cardType_;
      cardSerialNumber = new Asn1UTF8String (cardSerialNumber_);
      templateName = new Asn1UTF8String (templateName_);
      templateMajorVer = new Asn1UTF8String (templateMajorVer_);
      templateMinorVer = new Asn1UTF8String (templateMinorVer_);
      keyGroupNumber = new Asn1UTF8String (keyGroupNumber_);
   }

   public void init () {
      cardType = null;
      cardSerialNumber = null;
      templateName = null;
      templateMajorVer = null;
      templateMinorVer = null;
      keyGroupNumber = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode cardType

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int tval = buffer.decodeEnumValue (CardType.TAG, false, elemLen.value);
         cardType = CardType.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode cardSerialNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         cardSerialNumber = new Asn1UTF8String();
         cardSerialNumber.decode (buffer, false, elemLen.value);
         if (!((cardSerialNumber.getLength() >= 0 && cardSerialNumber.getLength()
             <= 24))) {
            throw new Asn1ConsVioException ("cardSerialNumber.getLength()", cardSerialNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode templateName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         templateName = new Asn1UTF8String();
         templateName.decode (buffer, false, elemLen.value);
         if (!((templateName.getLength() >= 0 && templateName.getLength() <= 16))) {
            throw new Asn1ConsVioException ("templateName.getLength()", templateName.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode templateMajorVer

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
         templateMajorVer = new Asn1UTF8String();
         templateMajorVer.decode (buffer, false, elemLen.value);
         if (!(templateMajorVer.getLength() == 2)) {
            throw new Asn1ConsVioException ("templateMajorVer.getLength()", templateMajorVer.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode templateMinorVer

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, elemLen, true)) {
         templateMinorVer = new Asn1UTF8String();
         templateMinorVer.decode (buffer, false, elemLen.value);
         if (!(templateMinorVer.getLength() == 2)) {
            throw new Asn1ConsVioException ("templateMinorVer.getLength()", templateMinorVer.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode keyGroupNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, elemLen, true)) {
         keyGroupNumber = new Asn1UTF8String();
         keyGroupNumber.decode (buffer, false, elemLen.value);
         if (!(keyGroupNumber.getLength() == 2)) {
            throw new Asn1ConsVioException ("keyGroupNumber.getLength()", keyGroupNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode keyGroupNumber

      if (!(keyGroupNumber.getLength() == 2)) {
         throw new Asn1ConsVioException ("keyGroupNumber.getLength()", keyGroupNumber.getLength());
      }

      len = keyGroupNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, len);
      _aal += len;

      // encode templateMinorVer

      if (!(templateMinorVer.getLength() == 2)) {
         throw new Asn1ConsVioException ("templateMinorVer.getLength()", templateMinorVer.getLength());
      }

      len = templateMinorVer.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, len);
      _aal += len;

      // encode templateMajorVer

      if (!(templateMajorVer.getLength() == 2)) {
         throw new Asn1ConsVioException ("templateMajorVer.getLength()", templateMajorVer.getLength());
      }

      len = templateMajorVer.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
      _aal += len;

      // encode templateName

      if (!((templateName.getLength() >= 0 && templateName.getLength() <= 16))) {
         throw new Asn1ConsVioException ("templateName.getLength()", templateName.getLength());
      }

      len = templateName.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode cardSerialNumber

      if (!((cardSerialNumber.getLength() >= 0 && cardSerialNumber.getLength() <= 24))) {
         throw new Asn1ConsVioException ("cardSerialNumber.getLength()", cardSerialNumber.getLength());
      }

      len = cardSerialNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode cardType

      len = cardType.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (cardType != null) cardType.print (_out, "cardType", _level+1);
      if (cardSerialNumber != null) cardSerialNumber.print (_out, "cardSerialNumber", _level+1);
      if (templateName != null) templateName.print (_out, "templateName", _level+1);
      if (templateMajorVer != null) templateMajorVer.print (_out, "templateMajorVer", _level+1);
      if (templateMinorVer != null) templateMinorVer.print (_out, "templateMinorVer", _level+1);
      if (keyGroupNumber != null) keyGroupNumber.print (_out, "keyGroupNumber", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
