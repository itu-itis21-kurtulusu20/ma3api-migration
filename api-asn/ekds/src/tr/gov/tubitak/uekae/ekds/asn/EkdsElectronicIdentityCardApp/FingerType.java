/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class FingerType extends Asn1Enumerated {
   // Integer constants for switch-case
   public static final int _THUMB = 0;
   public static final int _POINTERFINGER = 1;
   public static final int _MIDDLEFINGER = 2;
   public static final int _RINGFINGER = 3;
   public static final int _LITTLEFINGER = 4;
   public static final int _NOTINITIALIZED = 5;

   // Singleton instances of FingerType
   protected static FingerType _thumb = null;
   protected static FingerType _pointerFinger = null;
   protected static FingerType _middleFinger = null;
   protected static FingerType _ringFinger = null;
   protected static FingerType _littleFinger = null;
   protected static FingerType _notInitialized = null;

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected FingerType (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for thumb.
    */
   public static FingerType thumb() {
      if (_thumb == null) _thumb = new FingerType (0);

      return _thumb;
   }

   /**
    * Singleton accessor method for pointerFinger.
    */
   public static FingerType pointerFinger() {
      if (_pointerFinger == null) _pointerFinger = new FingerType (1);

      return _pointerFinger;
   }

   /**
    * Singleton accessor method for middleFinger.
    */
   public static FingerType middleFinger() {
      if (_middleFinger == null) _middleFinger = new FingerType (2);

      return _middleFinger;
   }

   /**
    * Singleton accessor method for ringFinger.
    */
   public static FingerType ringFinger() {
      if (_ringFinger == null) _ringFinger = new FingerType (3);

      return _ringFinger;
   }

   /**
    * Singleton accessor method for littleFinger.
    */
   public static FingerType littleFinger() {
      if (_littleFinger == null) _littleFinger = new FingerType (4);

      return _littleFinger;
   }

   /**
    * Singleton accessor method for notInitialized.
    */
   public static FingerType notInitialized() {
      if (_notInitialized == null) _notInitialized = new FingerType (5);

      return _notInitialized;
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static FingerType valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return thumb();
         case 1: return pointerFinger();
         case 2: return middleFinger();
         case 3: return ringFinger();
         case 4: return littleFinger();
         case 5: return notInitialized();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3 ||
            value == 4 ||
            value == 5))
      {
         throw new Asn1InvalidEnumException (value);
      }

      int len;
      len = super.encode (buffer, explicit);
      return (len);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("thumb");
         case 1: return ("pointerFinger");
         case 2: return ("middleFinger");
         case 3: return ("ringFinger");
         case 4: return ("littleFinger");
         case 5: return ("notInitialized");
         default: return ("UNDEFINED");
      }
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " = " + toString());
   }
}
