/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class CardAccessDeviceUsage extends Asn1Enumerated {
   // Integer constants for switch-case
   public static final int _DEVELOPER = 0;
   public static final int _INTEGRATOR = 1;
   public static final int _CERTIFICATION = 2;
   public static final int _DEMONSTRATION = 3;
   public static final int _OPERATION = 4;
   public static final int _PILOT = 5;

   // Singleton instances of CardAccessDeviceUsage
   protected static CardAccessDeviceUsage _developer = null;
   protected static CardAccessDeviceUsage _integrator = null;
   protected static CardAccessDeviceUsage _certification = null;
   protected static CardAccessDeviceUsage _demonstration = null;
   protected static CardAccessDeviceUsage _operation = null;
   protected static CardAccessDeviceUsage _pilot = null;

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected CardAccessDeviceUsage (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for developer.
    */
   public static CardAccessDeviceUsage developer() {
      if (_developer == null) _developer = new CardAccessDeviceUsage (0);

      return _developer;
   }

   /**
    * Singleton accessor method for integrator.
    */
   public static CardAccessDeviceUsage integrator() {
      if (_integrator == null) _integrator = new CardAccessDeviceUsage (1);

      return _integrator;
   }

   /**
    * Singleton accessor method for certification.
    */
   public static CardAccessDeviceUsage certification() {
      if (_certification == null) _certification = new CardAccessDeviceUsage (2);

      return _certification;
   }

   /**
    * Singleton accessor method for demonstration.
    */
   public static CardAccessDeviceUsage demonstration() {
      if (_demonstration == null) _demonstration = new CardAccessDeviceUsage (3);

      return _demonstration;
   }

   /**
    * Singleton accessor method for operation.
    */
   public static CardAccessDeviceUsage operation() {
      if (_operation == null) _operation = new CardAccessDeviceUsage (4);

      return _operation;
   }

   /**
    * Singleton accessor method for pilot.
    */
   public static CardAccessDeviceUsage pilot() {
      if (_pilot == null) _pilot = new CardAccessDeviceUsage (5);

      return _pilot;
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static CardAccessDeviceUsage valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return developer();
         case 1: return integrator();
         case 2: return certification();
         case 3: return demonstration();
         case 4: return operation();
         case 5: return pilot();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3 ||
            value == 4 ||
            value == 5))
      {
         throw new Asn1InvalidEnumException (value);
      }

      int len;
      len = super.encode (buffer, explicit);
      return (len);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("developer");
         case 1: return ("integrator");
         case 2: return ("certification");
         case 3: return ("demonstration");
         case 4: return ("operation");
         case 5: return ("pilot");
         default: return ("UNDEFINED");
      }
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " = " + toString());
   }
}
