/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp.HandType;
import tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp.FingerType;

public class VeinPrintData extends Asn1Type {
   public Asn1Boolean veinPrintExcused;
   public HandType hand = null;
   public FingerType finger = null;
   public Asn1OctetString imageData;

   public VeinPrintData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public VeinPrintData (
      Asn1Boolean veinPrintExcused_,
      HandType hand_,
      FingerType finger_,
      Asn1OctetString imageData_
   ) {
      super();
      veinPrintExcused = veinPrintExcused_;
      hand = hand_;
      finger = finger_;
      imageData = imageData_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public VeinPrintData (boolean veinPrintExcused_,
      HandType hand_,
      FingerType finger_,
      byte[] imageData_
   ) {
      super();
      veinPrintExcused = new Asn1Boolean (veinPrintExcused_);
      hand = hand_;
      finger = finger_;
      imageData = new Asn1OctetString (imageData_);
   }

   public void init () {
      veinPrintExcused = null;
      hand = null;
      finger = null;
      imageData = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode veinPrintExcused

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         veinPrintExcused = new Asn1Boolean();
         veinPrintExcused.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode hand

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int tval = buffer.decodeEnumValue (HandType.TAG, false, elemLen.value);
         hand = HandType.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode finger

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         int tval = buffer.decodeEnumValue (FingerType.TAG, false, elemLen.value);
         finger = FingerType.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode imageData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         imageData = new Asn1OctetString();
         imageData.decode (buffer, false, elemLen.value);
         if (!((imageData.getLength() >= 0 && imageData.getLength() <= 512))) {
            throw new Asn1ConsVioException ("imageData.getLength()", imageData.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode imageData

      if (!((imageData.getLength() >= 0 && imageData.getLength() <= 512))) {
         throw new Asn1ConsVioException ("imageData.getLength()", imageData.getLength());
      }

      len = imageData.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode finger

      len = finger.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode hand

      len = hand.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode veinPrintExcused

      len = veinPrintExcused.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (veinPrintExcused != null) veinPrintExcused.print (_out, "veinPrintExcused", _level+1);
      if (hand != null) hand.print (_out, "hand", _level+1);
      if (finger != null) finger.print (_out, "finger", _level+1);
      if (imageData != null) imageData.print (_out, "imageData", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
