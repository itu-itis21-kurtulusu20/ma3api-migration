/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp.BloodGrouping_bloodGroup;
import tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp.BloodGrouping_rhesusFactor;

public class BloodGrouping extends Asn1Type {
   public BloodGrouping_bloodGroup bloodGroup = null;
   public BloodGrouping_rhesusFactor rhesusFactor = null;
   public Asn1UTCTime dateLastBloodGrouping;
   public Asn1OctetString bloodGroupingFreeText;

   public BloodGrouping () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BloodGrouping (
      BloodGrouping_bloodGroup bloodGroup_,
      BloodGrouping_rhesusFactor rhesusFactor_,
      Asn1UTCTime dateLastBloodGrouping_,
      Asn1OctetString bloodGroupingFreeText_
   ) {
      super();
      bloodGroup = bloodGroup_;
      rhesusFactor = rhesusFactor_;
      dateLastBloodGrouping = dateLastBloodGrouping_;
      bloodGroupingFreeText = bloodGroupingFreeText_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BloodGrouping (BloodGrouping_bloodGroup bloodGroup_,
      BloodGrouping_rhesusFactor rhesusFactor_,
      String dateLastBloodGrouping_,
      byte[] bloodGroupingFreeText_
   ) {
      super();
      bloodGroup = bloodGroup_;
      rhesusFactor = rhesusFactor_;
      dateLastBloodGrouping = new Asn1UTCTime (dateLastBloodGrouping_);
      bloodGroupingFreeText = new Asn1OctetString (bloodGroupingFreeText_);
   }

   public void init () {
      bloodGroup = null;
      rhesusFactor = null;
      dateLastBloodGrouping = null;
      bloodGroupingFreeText = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode bloodGroup

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, false)) {
         int tval = buffer.decodeEnumValue (BloodGrouping_bloodGroup.TAG, true, elemLen.value);
         bloodGroup = BloodGrouping_bloodGroup.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode rhesusFactor

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, false)) {
         int tval = buffer.decodeEnumValue (BloodGrouping_rhesusFactor.TAG, true, elemLen.value);
         rhesusFactor = BloodGrouping_rhesusFactor.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode dateLastBloodGrouping

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         dateLastBloodGrouping = new Asn1UTCTime (true);
         dateLastBloodGrouping.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode bloodGroupingFreeText

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         bloodGroupingFreeText = new Asn1OctetString();
         bloodGroupingFreeText.decode (buffer, false, elemLen.value);
         if (!((bloodGroupingFreeText.getLength() >= 0 && bloodGroupingFreeText.
            getLength() <= 30))) {
            throw new Asn1ConsVioException ("bloodGroupingFreeText.getLength()", bloodGroupingFreeText.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode bloodGroupingFreeText

      if (!((bloodGroupingFreeText.getLength() >= 0 && bloodGroupingFreeText.
         getLength() <= 30))) {
         throw new Asn1ConsVioException ("bloodGroupingFreeText.getLength()", bloodGroupingFreeText.getLength());
      }

      len = bloodGroupingFreeText.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode dateLastBloodGrouping

      len = dateLastBloodGrouping.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode rhesusFactor

      len = rhesusFactor.encode (buffer, true);
      _aal += len;

      // encode bloodGroup

      len = bloodGroup.encode (buffer, true);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (bloodGroup != null) bloodGroup.print (_out, "bloodGroup", _level+1);
      if (rhesusFactor != null) rhesusFactor.print (_out, "rhesusFactor", _level+1);
      if (dateLastBloodGrouping != null) dateLastBloodGrouping.print (_out, "dateLastBloodGrouping", _level+1);
      if (bloodGroupingFreeText != null) bloodGroupingFreeText.print (_out, "bloodGroupingFreeText", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
