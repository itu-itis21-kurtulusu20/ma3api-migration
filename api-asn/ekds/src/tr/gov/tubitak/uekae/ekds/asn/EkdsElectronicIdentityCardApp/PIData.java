/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CardDescriptor;

public class PIData extends Asn1Type {
   public CardDescriptor cardDescriptor;
   public IdentityData identityData;
   public IdentityRegistryData registryData;

   public PIData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PIData (
      CardDescriptor cardDescriptor_,
      IdentityData identityData_,
      IdentityRegistryData registryData_
   ) {
      super();
      cardDescriptor = cardDescriptor_;
      identityData = identityData_;
      registryData = registryData_;
   }

   public void init () {
      cardDescriptor = null;
      identityData = null;
      registryData = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode cardDescriptor

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         cardDescriptor = new CardDescriptor();
         cardDescriptor.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode identityData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         identityData = new IdentityData();
         identityData.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode registryData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         registryData = new IdentityRegistryData();
         registryData.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode registryData

      len = registryData.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
      _aal += len;

      // encode identityData

      len = identityData.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
      _aal += len;

      // encode cardDescriptor

      len = cardDescriptor.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (cardDescriptor != null) cardDescriptor.print (_out, "cardDescriptor", _level+1);
      if (identityData != null) identityData.print (_out, "identityData", _level+1);
      if (registryData != null) registryData.print (_out, "registryData", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
