/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class DataObjectAuthorInfo extends Asn1Type {
   public Asn1NumericString authorID;
   public Asn1UTF8String authorFirstName;
   public Asn1UTF8String authorSurname;
   public Asn1UTF8String authorSpecialty;

   public DataObjectAuthorInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DataObjectAuthorInfo (
      Asn1NumericString authorID_,
      Asn1UTF8String authorFirstName_,
      Asn1UTF8String authorSurname_,
      Asn1UTF8String authorSpecialty_
   ) {
      super();
      authorID = authorID_;
      authorFirstName = authorFirstName_;
      authorSurname = authorSurname_;
      authorSpecialty = authorSpecialty_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DataObjectAuthorInfo (String authorID_,
      String authorFirstName_,
      String authorSurname_,
      String authorSpecialty_
   ) {
      super();
      authorID = new Asn1NumericString (authorID_);
      authorFirstName = new Asn1UTF8String (authorFirstName_);
      authorSurname = new Asn1UTF8String (authorSurname_);
      authorSpecialty = new Asn1UTF8String (authorSpecialty_);
   }

   public void init () {
      authorID = null;
      authorFirstName = null;
      authorSurname = null;
      authorSpecialty = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode authorID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         authorID = new Asn1NumericString();
         authorID.decode (buffer, false, elemLen.value);
         if (!((authorID.getLength() >= 1 && authorID.getLength() <= 12))) {
            throw new Asn1ConsVioException ("authorID.getLength()", authorID.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode authorFirstName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         authorFirstName = new Asn1UTF8String();
         authorFirstName.decode (buffer, false, elemLen.value);
         if (!((authorFirstName.getLength() >= 2 && authorFirstName.getLength() <= 64))) {
            throw new Asn1ConsVioException ("authorFirstName.getLength()", authorFirstName.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode authorSurname

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         authorSurname = new Asn1UTF8String();
         authorSurname.decode (buffer, false, elemLen.value);
         if (!((authorSurname.getLength() >= 2 && authorSurname.getLength() <= 64))) {
            throw new Asn1ConsVioException ("authorSurname.getLength()", authorSurname.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode authorSpecialty

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         authorSpecialty = new Asn1UTF8String();
         authorSpecialty.decode (buffer, false, elemLen.value);
         if (!((authorSpecialty.getLength() >= 2 && authorSpecialty.getLength() <= 24))) {
            throw new Asn1ConsVioException ("authorSpecialty.getLength()", authorSpecialty.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode authorSpecialty

      if (!((authorSpecialty.getLength() >= 2 && authorSpecialty.getLength() <= 24))) {
         throw new Asn1ConsVioException ("authorSpecialty.getLength()", authorSpecialty.getLength());
      }

      len = authorSpecialty.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode authorSurname

      if (!((authorSurname.getLength() >= 2 && authorSurname.getLength() <= 64))) {
         throw new Asn1ConsVioException ("authorSurname.getLength()", authorSurname.getLength());
      }

      len = authorSurname.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode authorFirstName

      if (!((authorFirstName.getLength() >= 2 && authorFirstName.getLength() <= 64))) {
         throw new Asn1ConsVioException ("authorFirstName.getLength()", authorFirstName.getLength());
      }

      len = authorFirstName.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode authorID

      if (!((authorID.getLength() >= 1 && authorID.getLength() <= 12))) {
         throw new Asn1ConsVioException ("authorID.getLength()", authorID.getLength());
      }

      len = authorID.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (authorID != null) authorID.print (_out, "authorID", _level+1);
      if (authorFirstName != null) authorFirstName.print (_out, "authorFirstName", _level+1);
      if (authorSurname != null) authorSurname.print (_out, "authorSurname", _level+1);
      if (authorSpecialty != null) authorSpecialty.print (_out, "authorSpecialty", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
