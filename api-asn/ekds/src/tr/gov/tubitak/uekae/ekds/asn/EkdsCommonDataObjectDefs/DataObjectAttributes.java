/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs.DataObjectCompressionMethod;

public class DataObjectAttributes extends Asn1Type {
   public OperationsOverDataObject operOverDataObject;
   public DataObjectSecAttributes securityAttributes;
   public DataObjectCompressionMethod compressionMethod = null;
   public DataObjectAccessRules accessRules;
   public Asn1IA5String templateVersion;

   public DataObjectAttributes () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DataObjectAttributes (
      OperationsOverDataObject operOverDataObject_,
      DataObjectSecAttributes securityAttributes_,
      DataObjectCompressionMethod compressionMethod_,
      DataObjectAccessRules accessRules_,
      Asn1IA5String templateVersion_
   ) {
      super();
      operOverDataObject = operOverDataObject_;
      securityAttributes = securityAttributes_;
      compressionMethod = compressionMethod_;
      accessRules = accessRules_;
      templateVersion = templateVersion_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DataObjectAttributes (OperationsOverDataObject operOverDataObject_,
      DataObjectSecAttributes securityAttributes_,
      DataObjectCompressionMethod compressionMethod_,
      DataObjectAccessRules accessRules_,
      String templateVersion_
   ) {
      super();
      operOverDataObject = operOverDataObject_;
      securityAttributes = securityAttributes_;
      compressionMethod = compressionMethod_;
      accessRules = accessRules_;
      templateVersion = new Asn1IA5String (templateVersion_);
   }

   public void init () {
      operOverDataObject = null;
      securityAttributes = null;
      compressionMethod = null;
      accessRules = null;
      templateVersion = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode operOverDataObject

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         operOverDataObject = new OperationsOverDataObject();
         operOverDataObject.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode securityAttributes

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         securityAttributes = new DataObjectSecAttributes();
         securityAttributes.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode compressionMethod

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         int tval = buffer.decodeEnumValue (DataObjectCompressionMethod.TAG, false, elemLen.value);
         compressionMethod = DataObjectCompressionMethod.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode accessRules

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         accessRules = new DataObjectAccessRules();
         accessRules.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode templateVersion

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
         templateVersion = new Asn1IA5String();
         templateVersion.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 4))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode templateVersion

      len = templateVersion.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
      _aal += len;

      // encode accessRules

      len = accessRules.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
      _aal += len;

      // encode compressionMethod

      len = compressionMethod.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode securityAttributes

      len = securityAttributes.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
      _aal += len;

      // encode operOverDataObject

      len = operOverDataObject.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (operOverDataObject != null) operOverDataObject.print (_out, "operOverDataObject", _level+1);
      if (securityAttributes != null) securityAttributes.print (_out, "securityAttributes", _level+1);
      if (compressionMethod != null) compressionMethod.print (_out, "compressionMethod", _level+1);
      if (accessRules != null) accessRules.print (_out, "accessRules", _level+1);
      if (templateVersion != null) templateVersion.print (_out, "templateVersion", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
