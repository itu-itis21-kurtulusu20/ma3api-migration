/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsRemoteAuthenticationApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.BiometricVerificationStatus;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.ServiceProviderApplicationLabel;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.IdentityVerificationAssurance;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CardAccessDeviceSerialNumber;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.ServiceRequestorRole;

public class IdentityVerificationAssertionStaticData extends Asn1Type {
   public VerifiedCardHolder cardDesc;
   public Asn1Boolean proxyClient;
   public VerifiedCardHolder proxyCardDesc;
   public Asn1Boolean participantVerified;
   public VerifiedCardHolder participantCardDesc;
   public BiometricVerificationStatus bioVerificationStatus = null;
   public ServiceProviderApplicationLabel appLabel;
   public IdentityVerificationAssurance identityAssurance;
   public Asn1OctetString serviceProviderMark;
   public CardAccessDeviceSerialNumber deviceSerialNumber;
   public Asn1UTF8String samSerialNumber;
   public ServiceRequestorRole serviceRequestorRole = null;
   public Asn1IA5String deviceSoftwareVersion;
   public Asn1NumericString serviceInstitutionID;

   public IdentityVerificationAssertionStaticData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IdentityVerificationAssertionStaticData (
      VerifiedCardHolder cardDesc_,
      Asn1Boolean proxyClient_,
      VerifiedCardHolder proxyCardDesc_,
      Asn1Boolean participantVerified_,
      VerifiedCardHolder participantCardDesc_,
      BiometricVerificationStatus bioVerificationStatus_,
      ServiceProviderApplicationLabel appLabel_,
      IdentityVerificationAssurance identityAssurance_,
      Asn1OctetString serviceProviderMark_,
      CardAccessDeviceSerialNumber deviceSerialNumber_,
      Asn1UTF8String samSerialNumber_,
      ServiceRequestorRole serviceRequestorRole_,
      Asn1IA5String deviceSoftwareVersion_,
      Asn1NumericString serviceInstitutionID_
   ) {
      super();
      cardDesc = cardDesc_;
      proxyClient = proxyClient_;
      proxyCardDesc = proxyCardDesc_;
      participantVerified = participantVerified_;
      participantCardDesc = participantCardDesc_;
      bioVerificationStatus = bioVerificationStatus_;
      appLabel = appLabel_;
      identityAssurance = identityAssurance_;
      serviceProviderMark = serviceProviderMark_;
      deviceSerialNumber = deviceSerialNumber_;
      samSerialNumber = samSerialNumber_;
      serviceRequestorRole = serviceRequestorRole_;
      deviceSoftwareVersion = deviceSoftwareVersion_;
      serviceInstitutionID = serviceInstitutionID_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public IdentityVerificationAssertionStaticData (VerifiedCardHolder cardDesc_,
      boolean proxyClient_,
      VerifiedCardHolder proxyCardDesc_,
      boolean participantVerified_,
      VerifiedCardHolder participantCardDesc_,
      BiometricVerificationStatus bioVerificationStatus_,
      ServiceProviderApplicationLabel appLabel_,
      IdentityVerificationAssurance identityAssurance_,
      byte[] serviceProviderMark_,
      CardAccessDeviceSerialNumber deviceSerialNumber_,
      String samSerialNumber_,
      ServiceRequestorRole serviceRequestorRole_,
      String deviceSoftwareVersion_,
      String serviceInstitutionID_
   ) {
      super();
      cardDesc = cardDesc_;
      proxyClient = new Asn1Boolean (proxyClient_);
      proxyCardDesc = proxyCardDesc_;
      participantVerified = new Asn1Boolean (participantVerified_);
      participantCardDesc = participantCardDesc_;
      bioVerificationStatus = bioVerificationStatus_;
      appLabel = appLabel_;
      identityAssurance = identityAssurance_;
      serviceProviderMark = new Asn1OctetString (serviceProviderMark_);
      deviceSerialNumber = deviceSerialNumber_;
      samSerialNumber = new Asn1UTF8String (samSerialNumber_);
      serviceRequestorRole = serviceRequestorRole_;
      deviceSoftwareVersion = new Asn1IA5String (deviceSoftwareVersion_);
      serviceInstitutionID = new Asn1NumericString (serviceInstitutionID_);
   }

   public void init () {
      cardDesc = null;
      proxyClient = null;
      proxyCardDesc = null;
      participantVerified = null;
      participantCardDesc = null;
      bioVerificationStatus = null;
      appLabel = null;
      identityAssurance = null;
      serviceProviderMark = null;
      deviceSerialNumber = null;
      samSerialNumber = null;
      serviceRequestorRole = null;
      deviceSoftwareVersion = null;
      serviceInstitutionID = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode cardDesc

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         cardDesc = new VerifiedCardHolder();
         cardDesc.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode proxyClient

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         proxyClient = new Asn1Boolean();
         proxyClient.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode proxyCardDesc

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         proxyCardDesc = new VerifiedCardHolder();
         proxyCardDesc.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode participantVerified

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         participantVerified = new Asn1Boolean();
         participantVerified.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode participantCardDesc

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         participantCardDesc = new VerifiedCardHolder();
         participantCardDesc.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode bioVerificationStatus

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, elemLen, true)) {
         int tval = buffer.decodeEnumValue (BiometricVerificationStatus.TAG, false, elemLen.value);
         bioVerificationStatus = BiometricVerificationStatus.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode appLabel

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 6, elemLen, true)) {
         appLabel = new ServiceProviderApplicationLabel();
         appLabel.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode identityAssurance

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 7, elemLen, true)) {
         identityAssurance = new IdentityVerificationAssurance();
         identityAssurance.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode serviceProviderMark

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, elemLen, true)) {
         serviceProviderMark = new Asn1OctetString();
         serviceProviderMark.decode (buffer, false, elemLen.value);
         if (!(serviceProviderMark.getLength() == 8)) {
            throw new Asn1ConsVioException ("serviceProviderMark.getLength()", serviceProviderMark.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode deviceSerialNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 9, elemLen, true)) {
         deviceSerialNumber = new CardAccessDeviceSerialNumber();
         deviceSerialNumber.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode samSerialNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 10, elemLen, true)) {
         samSerialNumber = new Asn1UTF8String();
         samSerialNumber.decode (buffer, false, elemLen.value);
         if (!((samSerialNumber.getLength() >= 0 && samSerialNumber.getLength() <= 24))) {
            throw new Asn1ConsVioException ("samSerialNumber.getLength()", samSerialNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode serviceRequestorRole

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 11, elemLen, true)) {
         int tval = buffer.decodeEnumValue (ServiceRequestorRole.TAG, false, elemLen.value);
         serviceRequestorRole = ServiceRequestorRole.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode deviceSoftwareVersion

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 12, elemLen, true)) {
         deviceSoftwareVersion = new Asn1IA5String();
         deviceSoftwareVersion.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode serviceInstitutionID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 13, elemLen, true)) {
         serviceInstitutionID = new Asn1NumericString();
         serviceInstitutionID.decode (buffer, false, elemLen.value);
         if (!((serviceInstitutionID.getLength() >= 1 && serviceInstitutionID.
            getLength() <= 12))) {
            throw new Asn1ConsVioException ("serviceInstitutionID.getLength()", serviceInstitutionID.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 7) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 9) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 10) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 11) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 12) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 13))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode serviceInstitutionID

      if (!((serviceInstitutionID.getLength() >= 1 && serviceInstitutionID.getLength()
          <= 12))) {
         throw new Asn1ConsVioException ("serviceInstitutionID.getLength()", serviceInstitutionID.getLength());
      }

      len = serviceInstitutionID.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 13, len);
      _aal += len;

      // encode deviceSoftwareVersion

      len = deviceSoftwareVersion.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 12, len);
      _aal += len;

      // encode serviceRequestorRole

      len = serviceRequestorRole.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 11, len);
      _aal += len;

      // encode samSerialNumber

      if (!((samSerialNumber.getLength() >= 0 && samSerialNumber.getLength() <= 24))) {
         throw new Asn1ConsVioException ("samSerialNumber.getLength()", samSerialNumber.getLength());
      }

      len = samSerialNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 10, len);
      _aal += len;

      // encode deviceSerialNumber

      len = deviceSerialNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 9, len);
      _aal += len;

      // encode serviceProviderMark

      if (!(serviceProviderMark.getLength() == 8)) {
         throw new Asn1ConsVioException ("serviceProviderMark.getLength()", serviceProviderMark.getLength());
      }

      len = serviceProviderMark.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, len);
      _aal += len;

      // encode identityAssurance

      len = identityAssurance.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 7, len);
      _aal += len;

      // encode appLabel

      len = appLabel.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
      _aal += len;

      // encode bioVerificationStatus

      len = bioVerificationStatus.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, len);
      _aal += len;

      // encode participantCardDesc

      len = participantCardDesc.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
      _aal += len;

      // encode participantVerified

      len = participantVerified.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode proxyCardDesc

      len = proxyCardDesc.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
      _aal += len;

      // encode proxyClient

      len = proxyClient.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode cardDesc

      len = cardDesc.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (cardDesc != null) cardDesc.print (_out, "cardDesc", _level+1);
      if (proxyClient != null) proxyClient.print (_out, "proxyClient", _level+1);
      if (proxyCardDesc != null) proxyCardDesc.print (_out, "proxyCardDesc", _level+1);
      if (participantVerified != null) participantVerified.print (_out, "participantVerified", _level+1);
      if (participantCardDesc != null) participantCardDesc.print (_out, "participantCardDesc", _level+1);
      if (bioVerificationStatus != null) bioVerificationStatus.print (_out, "bioVerificationStatus", _level+1);
      if (appLabel != null) appLabel.print (_out, "appLabel", _level+1);
      if (identityAssurance != null) identityAssurance.print (_out, "identityAssurance", _level+1);
      if (serviceProviderMark != null) serviceProviderMark.print (_out, "serviceProviderMark", _level+1);
      if (deviceSerialNumber != null) deviceSerialNumber.print (_out, "deviceSerialNumber", _level+1);
      if (samSerialNumber != null) samSerialNumber.print (_out, "samSerialNumber", _level+1);
      if (serviceRequestorRole != null) serviceRequestorRole.print (_out, "serviceRequestorRole", _level+1);
      if (deviceSoftwareVersion != null) deviceSoftwareVersion.print (_out, "deviceSoftwareVersion", _level+1);
      if (serviceInstitutionID != null) serviceInstitutionID.print (_out, "serviceInstitutionID", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
