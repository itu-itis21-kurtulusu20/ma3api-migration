/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs.DataObjectDigitalSignature_signAlgID;
import tr.gov.tubitak.uekae.ekds.asn.EkdsCommonDataObjectDefs.DataObjectDigitalSignature_signHashAlgID;

public class DataObjectDigitalSignature extends Asn1Type {
   public DataObjectDigitalSignature_signAlgID signAlgID = null;
   public DataObjectDigitalSignature_signHashAlgID signHashAlgID = null;
   public Asn1OctetString signData;
   public DataObjectDigitalSignature_signVerifyData signVerifyData;

   public DataObjectDigitalSignature () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DataObjectDigitalSignature (
      DataObjectDigitalSignature_signAlgID signAlgID_,
      DataObjectDigitalSignature_signHashAlgID signHashAlgID_,
      Asn1OctetString signData_,
      DataObjectDigitalSignature_signVerifyData signVerifyData_
   ) {
      super();
      signAlgID = signAlgID_;
      signHashAlgID = signHashAlgID_;
      signData = signData_;
      signVerifyData = signVerifyData_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DataObjectDigitalSignature (DataObjectDigitalSignature_signAlgID signAlgID_,
      DataObjectDigitalSignature_signHashAlgID signHashAlgID_,
      byte[] signData_,
      DataObjectDigitalSignature_signVerifyData signVerifyData_
   ) {
      super();
      signAlgID = signAlgID_;
      signHashAlgID = signHashAlgID_;
      signData = new Asn1OctetString (signData_);
      signVerifyData = signVerifyData_;
   }

   public void init () {
      signAlgID = null;
      signHashAlgID = null;
      signData = null;
      signVerifyData = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode signAlgID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, false)) {
         int tval = buffer.decodeEnumValue (DataObjectDigitalSignature_signAlgID.TAG, true, elemLen.value);
         signAlgID = DataObjectDigitalSignature_signAlgID.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode signHashAlgID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, false)) {
         int tval = buffer.decodeEnumValue (DataObjectDigitalSignature_signHashAlgID.TAG, true, elemLen.value);
         signHashAlgID = DataObjectDigitalSignature_signHashAlgID.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode signData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         signData = new Asn1OctetString();
         signData.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode signVerifyData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, false)) {
         signVerifyData = new DataObjectDigitalSignature_signVerifyData();
         signVerifyData.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signVerifyData

      len = signVerifyData.encode (buffer, true);
      _aal += len;

      // encode signData

      len = signData.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode signHashAlgID

      len = signHashAlgID.encode (buffer, true);
      _aal += len;

      // encode signAlgID

      len = signAlgID.encode (buffer, true);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (signAlgID != null) signAlgID.print (_out, "signAlgID", _level+1);
      if (signHashAlgID != null) signHashAlgID.print (_out, "signHashAlgID", _level+1);
      if (signData != null) signData.print (_out, "signData", _level+1);
      if (signVerifyData != null) signVerifyData.print (_out, "signVerifyData", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
