/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsRemoteAuthenticationApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class IdentityVerificationPolicy extends Asn1Type {
   public Asn1IA5String version;
   public Asn1UTCTime dateAndTime;
   public Asn1OctetString serviceProviderMark;
   public IdentityVerificationPolicyDescriptor policyDesc;
   public IdentityVerificationPolicyData policyData;

   public IdentityVerificationPolicy () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IdentityVerificationPolicy (
      Asn1IA5String version_,
      Asn1UTCTime dateAndTime_,
      Asn1OctetString serviceProviderMark_,
      IdentityVerificationPolicyDescriptor policyDesc_,
      IdentityVerificationPolicyData policyData_
   ) {
      super();
      version = version_;
      dateAndTime = dateAndTime_;
      serviceProviderMark = serviceProviderMark_;
      policyDesc = policyDesc_;
      policyData = policyData_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public IdentityVerificationPolicy (String version_,
      String dateAndTime_,
      byte[] serviceProviderMark_,
      IdentityVerificationPolicyDescriptor policyDesc_,
      IdentityVerificationPolicyData policyData_
   ) {
      super();
      version = new Asn1IA5String (version_);
      dateAndTime = new Asn1UTCTime (dateAndTime_);
      serviceProviderMark = new Asn1OctetString (serviceProviderMark_);
      policyDesc = policyDesc_;
      policyData = policyData_;
   }

   public void init () {
      version = null;
      dateAndTime = null;
      serviceProviderMark = null;
      policyDesc = null;
      policyData = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         version = new Asn1IA5String();
         version.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode dateAndTime

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         dateAndTime = new Asn1UTCTime (true);
         dateAndTime.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode serviceProviderMark

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         serviceProviderMark = new Asn1OctetString();
         serviceProviderMark.decode (buffer, false, elemLen.value);
         if (!(serviceProviderMark.getLength() == 8)) {
            throw new Asn1ConsVioException ("serviceProviderMark.getLength()", serviceProviderMark.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode policyDesc

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         policyDesc = new IdentityVerificationPolicyDescriptor();
         policyDesc.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode policyData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         policyData = new IdentityVerificationPolicyData();
         policyData.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode policyData

      len = policyData.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
      _aal += len;

      // encode policyDesc

      len = policyDesc.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
      _aal += len;

      // encode serviceProviderMark

      if (!(serviceProviderMark.getLength() == 8)) {
         throw new Asn1ConsVioException ("serviceProviderMark.getLength()", serviceProviderMark.getLength());
      }

      len = serviceProviderMark.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode dateAndTime

      len = dateAndTime.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode version

      len = version.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (dateAndTime != null) dateAndTime.print (_out, "dateAndTime", _level+1);
      if (serviceProviderMark != null) serviceProviderMark.print (_out, "serviceProviderMark", _level+1);
      if (policyDesc != null) policyDesc.print (_out, "policyDesc", _level+1);
      if (policyData != null) policyData.print (_out, "policyData", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
