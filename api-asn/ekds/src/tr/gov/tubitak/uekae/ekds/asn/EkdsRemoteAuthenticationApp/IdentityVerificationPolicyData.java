/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsRemoteAuthenticationApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.IdentityVerificationAssurance;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.IdentityVerificationFailureResponse;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.IdentityVerificationConstraint;
import tr.gov.tubitak.uekae.ekds.asn.EkdsRemoteAuthenticationApp.FingerPrintQualityLevel;

public class IdentityVerificationPolicyData extends Asn1Type {
   public IdentityVerificationAssurance authAssurance;
   public IdentityVerificationFailureResponse failureResponse = null;
   public IdentityVerificationConstraint authConstraint = null;
   public Asn1Boolean proxyAllowed;
   public Asn1Boolean participantConfAllowed;
   public FingerPrintQualityLevel fingerprintQualityLevel = null;
   public Asn1Integer policyTimeout;
   public Asn1Integer assertionTimeout;

   public IdentityVerificationPolicyData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IdentityVerificationPolicyData (
      IdentityVerificationAssurance authAssurance_,
      IdentityVerificationFailureResponse failureResponse_,
      IdentityVerificationConstraint authConstraint_,
      Asn1Boolean proxyAllowed_,
      Asn1Boolean participantConfAllowed_,
      FingerPrintQualityLevel fingerprintQualityLevel_,
      Asn1Integer policyTimeout_,
      Asn1Integer assertionTimeout_
   ) {
      super();
      authAssurance = authAssurance_;
      failureResponse = failureResponse_;
      authConstraint = authConstraint_;
      proxyAllowed = proxyAllowed_;
      participantConfAllowed = participantConfAllowed_;
      fingerprintQualityLevel = fingerprintQualityLevel_;
      policyTimeout = policyTimeout_;
      assertionTimeout = assertionTimeout_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public IdentityVerificationPolicyData (IdentityVerificationAssurance authAssurance_,
      IdentityVerificationFailureResponse failureResponse_,
      IdentityVerificationConstraint authConstraint_,
      boolean proxyAllowed_,
      boolean participantConfAllowed_,
      FingerPrintQualityLevel fingerprintQualityLevel_,
      long policyTimeout_,
      long assertionTimeout_
   ) {
      super();
      authAssurance = authAssurance_;
      failureResponse = failureResponse_;
      authConstraint = authConstraint_;
      proxyAllowed = new Asn1Boolean (proxyAllowed_);
      participantConfAllowed = new Asn1Boolean (participantConfAllowed_);
      fingerprintQualityLevel = fingerprintQualityLevel_;
      policyTimeout = new Asn1Integer (policyTimeout_);
      assertionTimeout = new Asn1Integer (assertionTimeout_);
   }

   public void init () {
      authAssurance = null;
      failureResponse = null;
      authConstraint = null;
      proxyAllowed = null;
      participantConfAllowed = null;
      fingerprintQualityLevel = null;
      policyTimeout = null;
      assertionTimeout = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode authAssurance

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         authAssurance = new IdentityVerificationAssurance();
         authAssurance.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode failureResponse

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int tval = buffer.decodeEnumValue (IdentityVerificationFailureResponse.TAG, false, elemLen.value);
         failureResponse = IdentityVerificationFailureResponse.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode authConstraint

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         int tval = buffer.decodeEnumValue (IdentityVerificationConstraint.TAG, false, elemLen.value);
         authConstraint = IdentityVerificationConstraint.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode proxyAllowed

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         proxyAllowed = new Asn1Boolean();
         proxyAllowed.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode participantConfAllowed

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
         participantConfAllowed = new Asn1Boolean();
         participantConfAllowed.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode fingerprintQualityLevel

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, elemLen, true)) {
         int tval = buffer.decodeEnumValue (FingerPrintQualityLevel.TAG, false, elemLen.value);
         fingerprintQualityLevel = FingerPrintQualityLevel.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode policyTimeout

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, elemLen, true)) {
         policyTimeout = new Asn1Integer();
         policyTimeout.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode assertionTimeout

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, elemLen, true)) {
         assertionTimeout = new Asn1Integer();
         assertionTimeout.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode assertionTimeout

      len = assertionTimeout.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
      _aal += len;

      // encode policyTimeout

      len = policyTimeout.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, len);
      _aal += len;

      // encode fingerprintQualityLevel

      len = fingerprintQualityLevel.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, len);
      _aal += len;

      // encode participantConfAllowed

      len = participantConfAllowed.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
      _aal += len;

      // encode proxyAllowed

      len = proxyAllowed.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode authConstraint

      len = authConstraint.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode failureResponse

      len = failureResponse.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode authAssurance

      len = authAssurance.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (authAssurance != null) authAssurance.print (_out, "authAssurance", _level+1);
      if (failureResponse != null) failureResponse.print (_out, "failureResponse", _level+1);
      if (authConstraint != null) authConstraint.print (_out, "authConstraint", _level+1);
      if (proxyAllowed != null) proxyAllowed.print (_out, "proxyAllowed", _level+1);
      if (participantConfAllowed != null) participantConfAllowed.print (_out, "participantConfAllowed", _level+1);
      if (fingerprintQualityLevel != null) fingerprintQualityLevel.print (_out, "fingerprintQualityLevel", _level+1);
      if (policyTimeout != null) policyTimeout.print (_out, "policyTimeout", _level+1);
      if (assertionTimeout != null) assertionTimeout.print (_out, "assertionTimeout", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
