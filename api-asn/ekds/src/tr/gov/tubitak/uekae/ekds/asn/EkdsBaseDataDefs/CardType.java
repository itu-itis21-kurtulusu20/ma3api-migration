/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class CardType extends Asn1Enumerated {
   // Integer constants for switch-case
   public static final int _EKK = 1;
   public static final int _GEM = 2;
   public static final int _SK = 3;

   // Singleton instances of CardType
   protected static CardType _ekk = null;
   protected static CardType _gem = null;
   protected static CardType _sk = null;

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   1
    *   2
    *   3
    */
   protected CardType (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for ekk.
    */
   public static CardType ekk() {
      if (_ekk == null) _ekk = new CardType (1);

      return _ekk;
   }

   /**
    * Singleton accessor method for gem.
    */
   public static CardType gem() {
      if (_gem == null) _gem = new CardType (2);

      return _gem;
   }

   /**
    * Singleton accessor method for sk.
    */
   public static CardType sk() {
      if (_sk == null) _sk = new CardType (3);

      return _sk;
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static CardType valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 1: return ekk();
         case 2: return gem();
         case 3: return sk();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      if (!(value == 1 ||
            value == 2 ||
            value == 3))
      {
         throw new Asn1InvalidEnumException (value);
      }

      int len;
      len = super.encode (buffer, explicit);
      return (len);
   }

   public String toString () {
      switch ((int)value) {
         case 1: return ("ekk");
         case 2: return ("gem");
         case 3: return ("sk");
         default: return ("UNDEFINED");
      }
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " = " + toString());
   }
}
