/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class BloodTransfusionData_bloodTransfusionIndicator extends Asn1Enumerated {
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0);

   // Integer constants for switch-case
   public static final int _NEVER = 0;
   public static final int _ONCE = 1;
   public static final int _MORETHANONCE = 2;
   public static final int _NOTINITIALIZED = 3;

   // Singleton instances of BloodTransfusionData_bloodTransfusionIndicator
   protected static BloodTransfusionData_bloodTransfusionIndicator _never = null;
   protected static BloodTransfusionData_bloodTransfusionIndicator _once = null;
   protected static BloodTransfusionData_bloodTransfusionIndicator _moreThanOnce = null;
   protected static BloodTransfusionData_bloodTransfusionIndicator _notInitialized = null;

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    */
   protected BloodTransfusionData_bloodTransfusionIndicator (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for never.
    */
   public static BloodTransfusionData_bloodTransfusionIndicator never() {
      if (_never == null) _never = new BloodTransfusionData_bloodTransfusionIndicator (0);

      return _never;
   }

   /**
    * Singleton accessor method for once.
    */
   public static BloodTransfusionData_bloodTransfusionIndicator once() {
      if (_once == null) _once = new BloodTransfusionData_bloodTransfusionIndicator (1);

      return _once;
   }

   /**
    * Singleton accessor method for moreThanOnce.
    */
   public static BloodTransfusionData_bloodTransfusionIndicator moreThanOnce() {
      if (_moreThanOnce == null) _moreThanOnce = new BloodTransfusionData_bloodTransfusionIndicator (2);

      return _moreThanOnce;
   }

   /**
    * Singleton accessor method for notInitialized.
    */
   public static BloodTransfusionData_bloodTransfusionIndicator notInitialized() {
      if (_notInitialized == null) _notInitialized = new BloodTransfusionData_bloodTransfusionIndicator (3);

      return _notInitialized;
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static BloodTransfusionData_bloodTransfusionIndicator valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return never();
         case 1: return once();
         case 2: return moreThanOnce();
         case 3: return notInitialized();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = matchTag (buffer, Asn1Tag.CTXT, Asn1Tag.PRIM, 0);

      super.decode (buffer, false, llen);

      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3))
      {
         throw new Asn1InvalidEnumException (value);
      }

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3))
      {
         throw new Asn1InvalidEnumException (value);
      }

      int len;
      len = super.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      return (len);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("never");
         case 1: return ("once");
         case 2: return ("moreThanOnce");
         case 3: return ("notInitialized");
         default: return ("UNDEFINED");
      }
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " = " + toString());
   }
}
