/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp.IdentityData_citizenSexuality;
import tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp.IdentityData_citizenMaritalStatus;
import tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp.IdentityData_citizenBloodGroup;
import tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp.IdentityData_citizenBloodRhesusFactor;

public class IdentityData extends Asn1Type {
   public Asn1NumericString citizenNumber;
   public Asn1UTF8String citizenName;
   public Asn1UTF8String citizenSurname;
   public Asn1UTF8String citizenFatherName;
   public Asn1UTF8String citizenFatherSurname;
   public Asn1UTF8String citizenMotherName;
   public Asn1UTF8String citizenMotherSurname;
   public Asn1UTF8String citizenBirthplace;
   public BirthDateData citizenBirthDate;
   public IdentityData_citizenSexuality citizenSexuality = null;
   public IdentityData_citizenMaritalStatus citizenMaritalStatus = null;
   public Asn1UTF8String citizenStatus;
   public Asn1UTF8String citizenFormerSurname;
   public Asn1UTF8String citizenReligion;
   public Asn1Integer citizenHandicap;
   public IdentityData_citizenBloodGroup citizenBloodGroup = null;
   public IdentityData_citizenBloodRhesusFactor citizenBloodRhesusFactor = null;

   public IdentityData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IdentityData (
      Asn1NumericString citizenNumber_,
      Asn1UTF8String citizenName_,
      Asn1UTF8String citizenSurname_,
      Asn1UTF8String citizenFatherName_,
      Asn1UTF8String citizenFatherSurname_,
      Asn1UTF8String citizenMotherName_,
      Asn1UTF8String citizenMotherSurname_,
      Asn1UTF8String citizenBirthplace_,
      BirthDateData citizenBirthDate_,
      IdentityData_citizenSexuality citizenSexuality_,
      IdentityData_citizenMaritalStatus citizenMaritalStatus_,
      Asn1UTF8String citizenStatus_,
      Asn1UTF8String citizenFormerSurname_,
      Asn1UTF8String citizenReligion_,
      Asn1Integer citizenHandicap_,
      IdentityData_citizenBloodGroup citizenBloodGroup_,
      IdentityData_citizenBloodRhesusFactor citizenBloodRhesusFactor_
   ) {
      super();
      citizenNumber = citizenNumber_;
      citizenName = citizenName_;
      citizenSurname = citizenSurname_;
      citizenFatherName = citizenFatherName_;
      citizenFatherSurname = citizenFatherSurname_;
      citizenMotherName = citizenMotherName_;
      citizenMotherSurname = citizenMotherSurname_;
      citizenBirthplace = citizenBirthplace_;
      citizenBirthDate = citizenBirthDate_;
      citizenSexuality = citizenSexuality_;
      citizenMaritalStatus = citizenMaritalStatus_;
      citizenStatus = citizenStatus_;
      citizenFormerSurname = citizenFormerSurname_;
      citizenReligion = citizenReligion_;
      citizenHandicap = citizenHandicap_;
      citizenBloodGroup = citizenBloodGroup_;
      citizenBloodRhesusFactor = citizenBloodRhesusFactor_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public IdentityData (String citizenNumber_,
      String citizenName_,
      String citizenSurname_,
      String citizenFatherName_,
      String citizenFatherSurname_,
      String citizenMotherName_,
      String citizenMotherSurname_,
      String citizenBirthplace_,
      BirthDateData citizenBirthDate_,
      IdentityData_citizenSexuality citizenSexuality_,
      IdentityData_citizenMaritalStatus citizenMaritalStatus_,
      String citizenStatus_,
      String citizenFormerSurname_,
      String citizenReligion_,
      long citizenHandicap_,
      IdentityData_citizenBloodGroup citizenBloodGroup_,
      IdentityData_citizenBloodRhesusFactor citizenBloodRhesusFactor_
   ) {
      super();
      citizenNumber = new Asn1NumericString (citizenNumber_);
      citizenName = new Asn1UTF8String (citizenName_);
      citizenSurname = new Asn1UTF8String (citizenSurname_);
      citizenFatherName = new Asn1UTF8String (citizenFatherName_);
      citizenFatherSurname = new Asn1UTF8String (citizenFatherSurname_);
      citizenMotherName = new Asn1UTF8String (citizenMotherName_);
      citizenMotherSurname = new Asn1UTF8String (citizenMotherSurname_);
      citizenBirthplace = new Asn1UTF8String (citizenBirthplace_);
      citizenBirthDate = citizenBirthDate_;
      citizenSexuality = citizenSexuality_;
      citizenMaritalStatus = citizenMaritalStatus_;
      citizenStatus = new Asn1UTF8String (citizenStatus_);
      citizenFormerSurname = new Asn1UTF8String (citizenFormerSurname_);
      citizenReligion = new Asn1UTF8String (citizenReligion_);
      citizenHandicap = new Asn1Integer (citizenHandicap_);
      citizenBloodGroup = citizenBloodGroup_;
      citizenBloodRhesusFactor = citizenBloodRhesusFactor_;
   }

   public void init () {
      citizenNumber = null;
      citizenName = null;
      citizenSurname = null;
      citizenFatherName = null;
      citizenFatherSurname = null;
      citizenMotherName = null;
      citizenMotherSurname = null;
      citizenBirthplace = null;
      citizenBirthDate = null;
      citizenSexuality = null;
      citizenMaritalStatus = null;
      citizenStatus = null;
      citizenFormerSurname = null;
      citizenReligion = null;
      citizenHandicap = null;
      citizenBloodGroup = null;
      citizenBloodRhesusFactor = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode citizenNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         citizenNumber = new Asn1NumericString();
         citizenNumber.decode (buffer, false, elemLen.value);
         if (!((citizenNumber.getLength() >= 1 && citizenNumber.getLength() <= 12))) {
            throw new Asn1ConsVioException ("citizenNumber.getLength()", citizenNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         citizenName = new Asn1UTF8String();
         citizenName.decode (buffer, false, elemLen.value);
         if (!((citizenName.getLength() >= 2 && citizenName.getLength() <= 64))) {
            throw new Asn1ConsVioException ("citizenName.getLength()", citizenName.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenSurname

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         citizenSurname = new Asn1UTF8String();
         citizenSurname.decode (buffer, false, elemLen.value);
         if (!((citizenSurname.getLength() >= 2 && citizenSurname.getLength() <= 64))) {
            throw new Asn1ConsVioException ("citizenSurname.getLength()", citizenSurname.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenFatherName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         citizenFatherName = new Asn1UTF8String();
         citizenFatherName.decode (buffer, false, elemLen.value);
         if (!((citizenFatherName.getLength() >= 0 && citizenFatherName.getLength()
             <= 64))) {
            throw new Asn1ConsVioException ("citizenFatherName.getLength()", citizenFatherName.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenFatherSurname

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
         citizenFatherSurname = new Asn1UTF8String();
         citizenFatherSurname.decode (buffer, false, elemLen.value);
         if (!((citizenFatherSurname.getLength() >= 0 && citizenFatherSurname.
            getLength() <= 64))) {
            throw new Asn1ConsVioException ("citizenFatherSurname.getLength()", citizenFatherSurname.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenMotherName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, elemLen, true)) {
         citizenMotherName = new Asn1UTF8String();
         citizenMotherName.decode (buffer, false, elemLen.value);
         if (!((citizenMotherName.getLength() >= 0 && citizenMotherName.getLength()
             <= 64))) {
            throw new Asn1ConsVioException ("citizenMotherName.getLength()", citizenMotherName.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenMotherSurname

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, elemLen, true)) {
         citizenMotherSurname = new Asn1UTF8String();
         citizenMotherSurname.decode (buffer, false, elemLen.value);
         if (!((citizenMotherSurname.getLength() >= 0 && citizenMotherSurname.
            getLength() <= 64))) {
            throw new Asn1ConsVioException ("citizenMotherSurname.getLength()", citizenMotherSurname.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenBirthplace

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, elemLen, true)) {
         citizenBirthplace = new Asn1UTF8String();
         citizenBirthplace.decode (buffer, false, elemLen.value);
         if (!((citizenBirthplace.getLength() >= 2 && citizenBirthplace.getLength()
             <= 64))) {
            throw new Asn1ConsVioException ("citizenBirthplace.getLength()", citizenBirthplace.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenBirthDate

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 8, elemLen, true)) {
         citizenBirthDate = new BirthDateData();
         citizenBirthDate.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenSexuality

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 9, elemLen, false)) {
         int tval = buffer.decodeEnumValue (IdentityData_citizenSexuality.TAG, true, elemLen.value);
         citizenSexuality = IdentityData_citizenSexuality.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenMaritalStatus

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 10, elemLen, false)) {
         int tval = buffer.decodeEnumValue (IdentityData_citizenMaritalStatus.TAG, true, elemLen.value);
         citizenMaritalStatus = IdentityData_citizenMaritalStatus.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenStatus

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 11, elemLen, true)) {
         citizenStatus = new Asn1UTF8String();
         citizenStatus.decode (buffer, false, elemLen.value);
         if (!((citizenStatus.getLength() >= 0 && citizenStatus.getLength() <= 24))) {
            throw new Asn1ConsVioException ("citizenStatus.getLength()", citizenStatus.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenFormerSurname

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 12, elemLen, true)) {
         citizenFormerSurname = new Asn1UTF8String();
         citizenFormerSurname.decode (buffer, false, elemLen.value);
         if (!((citizenFormerSurname.getLength() >= 0 && citizenFormerSurname.
            getLength() <= 64))) {
            throw new Asn1ConsVioException ("citizenFormerSurname.getLength()", citizenFormerSurname.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenReligion

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 13, elemLen, true)) {
         citizenReligion = new Asn1UTF8String();
         citizenReligion.decode (buffer, false, elemLen.value);
         if (!((citizenReligion.getLength() >= 0 && citizenReligion.getLength() <= 32))) {
            throw new Asn1ConsVioException ("citizenReligion.getLength()", citizenReligion.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenHandicap

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 14, elemLen, true)) {
         citizenHandicap = new Asn1Integer();
         citizenHandicap.decode (buffer, false, elemLen.value);
         if (!((citizenHandicap.value >= 0 && citizenHandicap.value <= 100))) {
            throw new Asn1ConsVioException ("citizenHandicap.value", citizenHandicap.value);
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenBloodGroup

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 15, elemLen, false)) {
         int tval = buffer.decodeEnumValue (IdentityData_citizenBloodGroup.TAG, true, elemLen.value);
         citizenBloodGroup = IdentityData_citizenBloodGroup.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode citizenBloodRhesusFactor

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 16, elemLen, false)) {
         int tval = buffer.decodeEnumValue (IdentityData_citizenBloodRhesusFactor.TAG, true, elemLen.value);
         citizenBloodRhesusFactor = IdentityData_citizenBloodRhesusFactor.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 8) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 9) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 10) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 11) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 12) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 13) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 14) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 15) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode citizenBloodRhesusFactor

      len = citizenBloodRhesusFactor.encode (buffer, true);
      _aal += len;

      // encode citizenBloodGroup

      len = citizenBloodGroup.encode (buffer, true);
      _aal += len;

      // encode citizenHandicap

      if (!((citizenHandicap.value >= 0 && citizenHandicap.value <= 100))) {
         throw new Asn1ConsVioException ("citizenHandicap.value", citizenHandicap.value);
      }

      len = citizenHandicap.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 14, len);
      _aal += len;

      // encode citizenReligion

      if (!((citizenReligion.getLength() >= 0 && citizenReligion.getLength() <= 32))) {
         throw new Asn1ConsVioException ("citizenReligion.getLength()", citizenReligion.getLength());
      }

      len = citizenReligion.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 13, len);
      _aal += len;

      // encode citizenFormerSurname

      if (!((citizenFormerSurname.getLength() >= 0 && citizenFormerSurname.getLength()
          <= 64))) {
         throw new Asn1ConsVioException ("citizenFormerSurname.getLength()", citizenFormerSurname.getLength());
      }

      len = citizenFormerSurname.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 12, len);
      _aal += len;

      // encode citizenStatus

      if (!((citizenStatus.getLength() >= 0 && citizenStatus.getLength() <= 24))) {
         throw new Asn1ConsVioException ("citizenStatus.getLength()", citizenStatus.getLength());
      }

      len = citizenStatus.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 11, len);
      _aal += len;

      // encode citizenMaritalStatus

      len = citizenMaritalStatus.encode (buffer, true);
      _aal += len;

      // encode citizenSexuality

      len = citizenSexuality.encode (buffer, true);
      _aal += len;

      // encode citizenBirthDate

      len = citizenBirthDate.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 8, len);
      _aal += len;

      // encode citizenBirthplace

      if (!((citizenBirthplace.getLength() >= 2 && citizenBirthplace.getLength() <= 64
         ))) {
         throw new Asn1ConsVioException ("citizenBirthplace.getLength()", citizenBirthplace.getLength());
      }

      len = citizenBirthplace.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
      _aal += len;

      // encode citizenMotherSurname

      if (!((citizenMotherSurname.getLength() >= 0 && citizenMotherSurname.getLength()
          <= 64))) {
         throw new Asn1ConsVioException ("citizenMotherSurname.getLength()", citizenMotherSurname.getLength());
      }

      len = citizenMotherSurname.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, len);
      _aal += len;

      // encode citizenMotherName

      if (!((citizenMotherName.getLength() >= 0 && citizenMotherName.getLength() <= 64
         ))) {
         throw new Asn1ConsVioException ("citizenMotherName.getLength()", citizenMotherName.getLength());
      }

      len = citizenMotherName.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, len);
      _aal += len;

      // encode citizenFatherSurname

      if (!((citizenFatherSurname.getLength() >= 0 && citizenFatherSurname.getLength()
          <= 64))) {
         throw new Asn1ConsVioException ("citizenFatherSurname.getLength()", citizenFatherSurname.getLength());
      }

      len = citizenFatherSurname.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
      _aal += len;

      // encode citizenFatherName

      if (!((citizenFatherName.getLength() >= 0 && citizenFatherName.getLength() <= 64
         ))) {
         throw new Asn1ConsVioException ("citizenFatherName.getLength()", citizenFatherName.getLength());
      }

      len = citizenFatherName.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode citizenSurname

      if (!((citizenSurname.getLength() >= 2 && citizenSurname.getLength() <= 64))) {
         throw new Asn1ConsVioException ("citizenSurname.getLength()", citizenSurname.getLength());
      }

      len = citizenSurname.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode citizenName

      if (!((citizenName.getLength() >= 2 && citizenName.getLength() <= 64))) {
         throw new Asn1ConsVioException ("citizenName.getLength()", citizenName.getLength());
      }

      len = citizenName.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode citizenNumber

      if (!((citizenNumber.getLength() >= 1 && citizenNumber.getLength() <= 12))) {
         throw new Asn1ConsVioException ("citizenNumber.getLength()", citizenNumber.getLength());
      }

      len = citizenNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (citizenNumber != null) citizenNumber.print (_out, "citizenNumber", _level+1);
      if (citizenName != null) citizenName.print (_out, "citizenName", _level+1);
      if (citizenSurname != null) citizenSurname.print (_out, "citizenSurname", _level+1);
      if (citizenFatherName != null) citizenFatherName.print (_out, "citizenFatherName", _level+1);
      if (citizenFatherSurname != null) citizenFatherSurname.print (_out, "citizenFatherSurname", _level+1);
      if (citizenMotherName != null) citizenMotherName.print (_out, "citizenMotherName", _level+1);
      if (citizenMotherSurname != null) citizenMotherSurname.print (_out, "citizenMotherSurname", _level+1);
      if (citizenBirthplace != null) citizenBirthplace.print (_out, "citizenBirthplace", _level+1);
      if (citizenBirthDate != null) citizenBirthDate.print (_out, "citizenBirthDate", _level+1);
      if (citizenSexuality != null) citizenSexuality.print (_out, "citizenSexuality", _level+1);
      if (citizenMaritalStatus != null) citizenMaritalStatus.print (_out, "citizenMaritalStatus", _level+1);
      if (citizenStatus != null) citizenStatus.print (_out, "citizenStatus", _level+1);
      if (citizenFormerSurname != null) citizenFormerSurname.print (_out, "citizenFormerSurname", _level+1);
      if (citizenReligion != null) citizenReligion.print (_out, "citizenReligion", _level+1);
      if (citizenHandicap != null) citizenHandicap.print (_out, "citizenHandicap", _level+1);
      if (citizenBloodGroup != null) citizenBloodGroup.print (_out, "citizenBloodGroup", _level+1);
      if (citizenBloodRhesusFactor != null) citizenBloodRhesusFactor.print (_out, "citizenBloodRhesusFactor", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
