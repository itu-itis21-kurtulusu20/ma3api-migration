/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CardAccessDeviceType;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CardAccessDeviceUsage;

public class CardAccessDeviceSerialNumber extends Asn1Type {
   public CardAccessDeviceType deviceType = null;
   public CardAccessDeviceUsage deviceUsage = null;
   public Asn1OctetString deviceUniqueID;

   public CardAccessDeviceSerialNumber () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CardAccessDeviceSerialNumber (
      CardAccessDeviceType deviceType_,
      CardAccessDeviceUsage deviceUsage_,
      Asn1OctetString deviceUniqueID_
   ) {
      super();
      deviceType = deviceType_;
      deviceUsage = deviceUsage_;
      deviceUniqueID = deviceUniqueID_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CardAccessDeviceSerialNumber (CardAccessDeviceType deviceType_,
      CardAccessDeviceUsage deviceUsage_,
      byte[] deviceUniqueID_
   ) {
      super();
      deviceType = deviceType_;
      deviceUsage = deviceUsage_;
      deviceUniqueID = new Asn1OctetString (deviceUniqueID_);
   }

   public void init () {
      deviceType = null;
      deviceUsage = null;
      deviceUniqueID = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode deviceType

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         int tval = buffer.decodeEnumValue (CardAccessDeviceType.TAG, false, elemLen.value);
         deviceType = CardAccessDeviceType.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode deviceUsage

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int tval = buffer.decodeEnumValue (CardAccessDeviceUsage.TAG, false, elemLen.value);
         deviceUsage = CardAccessDeviceUsage.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode deviceUniqueID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         deviceUniqueID = new Asn1OctetString();
         deviceUniqueID.decode (buffer, false, elemLen.value);
         if (!(deviceUniqueID.getLength() == 4)) {
            throw new Asn1ConsVioException ("deviceUniqueID.getLength()", deviceUniqueID.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode deviceUniqueID

      if (!(deviceUniqueID.getLength() == 4)) {
         throw new Asn1ConsVioException ("deviceUniqueID.getLength()", deviceUniqueID.getLength());
      }

      len = deviceUniqueID.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode deviceUsage

      len = deviceUsage.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode deviceType

      len = deviceType.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (deviceType != null) deviceType.print (_out, "deviceType", _level+1);
      if (deviceUsage != null) deviceUsage.print (_out, "deviceUsage", _level+1);
      if (deviceUniqueID != null) deviceUniqueID.print (_out, "deviceUniqueID", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
