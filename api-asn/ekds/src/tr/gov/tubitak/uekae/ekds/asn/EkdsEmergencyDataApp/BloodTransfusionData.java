/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsEmergencyDataApp.BloodTransfusionData_bloodTransfusionIndicator;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CodedData;

public class BloodTransfusionData extends Asn1Type {
   public BloodTransfusionData_bloodTransfusionIndicator bloodTransfusionIndicator = null;
   public Asn1UTCTime lastBloodTransfusionDate;
   public CodedData bloodProductGiven;

   public BloodTransfusionData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BloodTransfusionData (
      BloodTransfusionData_bloodTransfusionIndicator bloodTransfusionIndicator_,
      Asn1UTCTime lastBloodTransfusionDate_,
      CodedData bloodProductGiven_
   ) {
      super();
      bloodTransfusionIndicator = bloodTransfusionIndicator_;
      lastBloodTransfusionDate = lastBloodTransfusionDate_;
      bloodProductGiven = bloodProductGiven_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BloodTransfusionData (BloodTransfusionData_bloodTransfusionIndicator bloodTransfusionIndicator_,
      String lastBloodTransfusionDate_,
      CodedData bloodProductGiven_
   ) {
      super();
      bloodTransfusionIndicator = bloodTransfusionIndicator_;
      lastBloodTransfusionDate = new Asn1UTCTime (lastBloodTransfusionDate_);
      bloodProductGiven = bloodProductGiven_;
   }

   public void init () {
      bloodTransfusionIndicator = null;
      lastBloodTransfusionDate = null;
      bloodProductGiven = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode bloodTransfusionIndicator

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, false)) {
         int tval = buffer.decodeEnumValue (BloodTransfusionData_bloodTransfusionIndicator.TAG, true, elemLen.value);
         bloodTransfusionIndicator = BloodTransfusionData_bloodTransfusionIndicator.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode lastBloodTransfusionDate

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         lastBloodTransfusionDate = new Asn1UTCTime (true);
         lastBloodTransfusionDate.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode bloodProductGiven

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         bloodProductGiven = new CodedData();
         bloodProductGiven.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode bloodProductGiven

      len = bloodProductGiven.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
      _aal += len;

      // encode lastBloodTransfusionDate

      len = lastBloodTransfusionDate.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode bloodTransfusionIndicator

      len = bloodTransfusionIndicator.encode (buffer, true);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (bloodTransfusionIndicator != null) bloodTransfusionIndicator.print (_out, "bloodTransfusionIndicator", _level+1);
      if (lastBloodTransfusionDate != null) lastBloodTransfusionDate.print (_out, "lastBloodTransfusionDate", _level+1);
      if (bloodProductGiven != null) bloodProductGiven.print (_out, "bloodProductGiven", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
