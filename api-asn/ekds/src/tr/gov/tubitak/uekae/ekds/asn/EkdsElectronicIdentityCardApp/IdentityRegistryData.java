/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsElectronicIdentityCardApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class IdentityRegistryData extends Asn1Type {
   public Asn1UTF8String bookletSerialNumber;
   public Asn1UTF8String bookletNumber;
   public Asn1NumericString registryNumber;
   public Asn1UTF8String city;
   public Asn1NumericString cityCode;
   public Asn1UTF8String cityWard;
   public Asn1NumericString cityWardCode;
   public Asn1UTF8String district;
   public Asn1NumericString volumeNumber;
   public Asn1NumericString familyRowNumber;
   public Asn1NumericString personRowNumber;
   public Asn1UTF8String registeredIn;
   public Asn1UTF8String registryReason;
   public Asn1GeneralizedTime registryDate;

   public IdentityRegistryData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IdentityRegistryData (
      Asn1UTF8String bookletSerialNumber_,
      Asn1UTF8String bookletNumber_,
      Asn1NumericString registryNumber_,
      Asn1UTF8String city_,
      Asn1NumericString cityCode_,
      Asn1UTF8String cityWard_,
      Asn1NumericString cityWardCode_,
      Asn1UTF8String district_,
      Asn1NumericString volumeNumber_,
      Asn1NumericString familyRowNumber_,
      Asn1NumericString personRowNumber_,
      Asn1UTF8String registeredIn_,
      Asn1UTF8String registryReason_,
      Asn1GeneralizedTime registryDate_
   ) {
      super();
      bookletSerialNumber = bookletSerialNumber_;
      bookletNumber = bookletNumber_;
      registryNumber = registryNumber_;
      city = city_;
      cityCode = cityCode_;
      cityWard = cityWard_;
      cityWardCode = cityWardCode_;
      district = district_;
      volumeNumber = volumeNumber_;
      familyRowNumber = familyRowNumber_;
      personRowNumber = personRowNumber_;
      registeredIn = registeredIn_;
      registryReason = registryReason_;
      registryDate = registryDate_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public IdentityRegistryData (String bookletSerialNumber_,
      String bookletNumber_,
      String registryNumber_,
      String city_,
      String cityCode_,
      String cityWard_,
      String cityWardCode_,
      String district_,
      String volumeNumber_,
      String familyRowNumber_,
      String personRowNumber_,
      String registeredIn_,
      String registryReason_,
      String registryDate_
   ) {
      super();
      bookletSerialNumber = new Asn1UTF8String (bookletSerialNumber_);
      bookletNumber = new Asn1UTF8String (bookletNumber_);
      registryNumber = new Asn1NumericString (registryNumber_);
      city = new Asn1UTF8String (city_);
      cityCode = new Asn1NumericString (cityCode_);
      cityWard = new Asn1UTF8String (cityWard_);
      cityWardCode = new Asn1NumericString (cityWardCode_);
      district = new Asn1UTF8String (district_);
      volumeNumber = new Asn1NumericString (volumeNumber_);
      familyRowNumber = new Asn1NumericString (familyRowNumber_);
      personRowNumber = new Asn1NumericString (personRowNumber_);
      registeredIn = new Asn1UTF8String (registeredIn_);
      registryReason = new Asn1UTF8String (registryReason_);
      registryDate = new Asn1GeneralizedTime (registryDate_);
   }

   public void init () {
      bookletSerialNumber = null;
      bookletNumber = null;
      registryNumber = null;
      city = null;
      cityCode = null;
      cityWard = null;
      cityWardCode = null;
      district = null;
      volumeNumber = null;
      familyRowNumber = null;
      personRowNumber = null;
      registeredIn = null;
      registryReason = null;
      registryDate = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode bookletSerialNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         bookletSerialNumber = new Asn1UTF8String();
         bookletSerialNumber.decode (buffer, false, elemLen.value);
         if (!((bookletSerialNumber.getLength() >= 1 && bookletSerialNumber.
            getLength() <= 3))) {
            throw new Asn1ConsVioException ("bookletSerialNumber.getLength()", bookletSerialNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode bookletNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         bookletNumber = new Asn1UTF8String();
         bookletNumber.decode (buffer, false, elemLen.value);
         if (!((bookletNumber.getLength() >= 1 && bookletNumber.getLength() <= 6))) {
            throw new Asn1ConsVioException ("bookletNumber.getLength()", bookletNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode registryNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         registryNumber = new Asn1NumericString();
         registryNumber.decode (buffer, false, elemLen.value);
         if (!((registryNumber.getLength() >= 1 && registryNumber.getLength() <= 7))) {
            throw new Asn1ConsVioException ("registryNumber.getLength()", registryNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode city

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         city = new Asn1UTF8String();
         city.decode (buffer, false, elemLen.value);
         if (!((city.getLength() >= 2 && city.getLength() <= 32))) {
            throw new Asn1ConsVioException ("city.getLength()", city.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode cityCode

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
         cityCode = new Asn1NumericString();
         cityCode.decode (buffer, false, elemLen.value);
         if (!((cityCode.getLength() >= 1 && cityCode.getLength() <= 3))) {
            throw new Asn1ConsVioException ("cityCode.getLength()", cityCode.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode cityWard

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, elemLen, true)) {
         cityWard = new Asn1UTF8String();
         cityWard.decode (buffer, false, elemLen.value);
         if (!((cityWard.getLength() >= 2 && cityWard.getLength() <= 64))) {
            throw new Asn1ConsVioException ("cityWard.getLength()", cityWard.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode cityWardCode

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, elemLen, true)) {
         cityWardCode = new Asn1NumericString();
         cityWardCode.decode (buffer, false, elemLen.value);
         if (!((cityWardCode.getLength() >= 1 && cityWardCode.getLength() <= 6))) {
            throw new Asn1ConsVioException ("cityWardCode.getLength()", cityWardCode.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode district

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, elemLen, true)) {
         district = new Asn1UTF8String();
         district.decode (buffer, false, elemLen.value);
         if (!((district.getLength() >= 2 && district.getLength() <= 32))) {
            throw new Asn1ConsVioException ("district.getLength()", district.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode volumeNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, elemLen, true)) {
         volumeNumber = new Asn1NumericString();
         volumeNumber.decode (buffer, false, elemLen.value);
         if (!((volumeNumber.getLength() >= 1 && volumeNumber.getLength() <= 6))) {
            throw new Asn1ConsVioException ("volumeNumber.getLength()", volumeNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode familyRowNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 9, elemLen, true)) {
         familyRowNumber = new Asn1NumericString();
         familyRowNumber.decode (buffer, false, elemLen.value);
         if (!((familyRowNumber.getLength() >= 1 && familyRowNumber.getLength() <= 6))) {
            throw new Asn1ConsVioException ("familyRowNumber.getLength()", familyRowNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode personRowNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 10, elemLen, true)) {
         personRowNumber = new Asn1NumericString();
         personRowNumber.decode (buffer, false, elemLen.value);
         if (!((personRowNumber.getLength() >= 1 && personRowNumber.getLength() <= 6))) {
            throw new Asn1ConsVioException ("personRowNumber.getLength()", personRowNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode registeredIn

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 11, elemLen, true)) {
         registeredIn = new Asn1UTF8String();
         registeredIn.decode (buffer, false, elemLen.value);
         if (!((registeredIn.getLength() >= 2 && registeredIn.getLength() <= 32))) {
            throw new Asn1ConsVioException ("registeredIn.getLength()", registeredIn.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode registryReason

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 12, elemLen, true)) {
         registryReason = new Asn1UTF8String();
         registryReason.decode (buffer, false, elemLen.value);
         if (!((registryReason.getLength() >= 2 && registryReason.getLength() <= 24))) {
            throw new Asn1ConsVioException ("registryReason.getLength()", registryReason.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode registryDate

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 13, elemLen, true)) {
         registryDate = new Asn1GeneralizedTime (true);
         registryDate.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 9) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 10) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 11) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 12) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 13))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode registryDate

      len = registryDate.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 13, len);
      _aal += len;

      // encode registryReason

      if (!((registryReason.getLength() >= 2 && registryReason.getLength() <= 24))) {
         throw new Asn1ConsVioException ("registryReason.getLength()", registryReason.getLength());
      }

      len = registryReason.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 12, len);
      _aal += len;

      // encode registeredIn

      if (!((registeredIn.getLength() >= 2 && registeredIn.getLength() <= 32))) {
         throw new Asn1ConsVioException ("registeredIn.getLength()", registeredIn.getLength());
      }

      len = registeredIn.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 11, len);
      _aal += len;

      // encode personRowNumber

      if (!((personRowNumber.getLength() >= 1 && personRowNumber.getLength() <= 6))) {
         throw new Asn1ConsVioException ("personRowNumber.getLength()", personRowNumber.getLength());
      }

      len = personRowNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 10, len);
      _aal += len;

      // encode familyRowNumber

      if (!((familyRowNumber.getLength() >= 1 && familyRowNumber.getLength() <= 6))) {
         throw new Asn1ConsVioException ("familyRowNumber.getLength()", familyRowNumber.getLength());
      }

      len = familyRowNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 9, len);
      _aal += len;

      // encode volumeNumber

      if (!((volumeNumber.getLength() >= 1 && volumeNumber.getLength() <= 6))) {
         throw new Asn1ConsVioException ("volumeNumber.getLength()", volumeNumber.getLength());
      }

      len = volumeNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, len);
      _aal += len;

      // encode district

      if (!((district.getLength() >= 2 && district.getLength() <= 32))) {
         throw new Asn1ConsVioException ("district.getLength()", district.getLength());
      }

      len = district.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
      _aal += len;

      // encode cityWardCode

      if (!((cityWardCode.getLength() >= 1 && cityWardCode.getLength() <= 6))) {
         throw new Asn1ConsVioException ("cityWardCode.getLength()", cityWardCode.getLength());
      }

      len = cityWardCode.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, len);
      _aal += len;

      // encode cityWard

      if (!((cityWard.getLength() >= 2 && cityWard.getLength() <= 64))) {
         throw new Asn1ConsVioException ("cityWard.getLength()", cityWard.getLength());
      }

      len = cityWard.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, len);
      _aal += len;

      // encode cityCode

      if (!((cityCode.getLength() >= 1 && cityCode.getLength() <= 3))) {
         throw new Asn1ConsVioException ("cityCode.getLength()", cityCode.getLength());
      }

      len = cityCode.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
      _aal += len;

      // encode city

      if (!((city.getLength() >= 2 && city.getLength() <= 32))) {
         throw new Asn1ConsVioException ("city.getLength()", city.getLength());
      }

      len = city.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
      _aal += len;

      // encode registryNumber

      if (!((registryNumber.getLength() >= 1 && registryNumber.getLength() <= 7))) {
         throw new Asn1ConsVioException ("registryNumber.getLength()", registryNumber.getLength());
      }

      len = registryNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode bookletNumber

      if (!((bookletNumber.getLength() >= 1 && bookletNumber.getLength() <= 6))) {
         throw new Asn1ConsVioException ("bookletNumber.getLength()", bookletNumber.getLength());
      }

      len = bookletNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode bookletSerialNumber

      if (!((bookletSerialNumber.getLength() >= 1 && bookletSerialNumber.getLength()
          <= 3))) {
         throw new Asn1ConsVioException ("bookletSerialNumber.getLength()", bookletSerialNumber.getLength());
      }

      len = bookletSerialNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (bookletSerialNumber != null) bookletSerialNumber.print (_out, "bookletSerialNumber", _level+1);
      if (bookletNumber != null) bookletNumber.print (_out, "bookletNumber", _level+1);
      if (registryNumber != null) registryNumber.print (_out, "registryNumber", _level+1);
      if (city != null) city.print (_out, "city", _level+1);
      if (cityCode != null) cityCode.print (_out, "cityCode", _level+1);
      if (cityWard != null) cityWard.print (_out, "cityWard", _level+1);
      if (cityWardCode != null) cityWardCode.print (_out, "cityWardCode", _level+1);
      if (district != null) district.print (_out, "district", _level+1);
      if (volumeNumber != null) volumeNumber.print (_out, "volumeNumber", _level+1);
      if (familyRowNumber != null) familyRowNumber.print (_out, "familyRowNumber", _level+1);
      if (personRowNumber != null) personRowNumber.print (_out, "personRowNumber", _level+1);
      if (registeredIn != null) registeredIn.print (_out, "registeredIn", _level+1);
      if (registryReason != null) registryReason.print (_out, "registryReason", _level+1);
      if (registryDate != null) registryDate.print (_out, "registryDate", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
