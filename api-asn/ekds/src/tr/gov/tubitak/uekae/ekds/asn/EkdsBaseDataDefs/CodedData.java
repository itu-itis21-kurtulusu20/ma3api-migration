/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import tr.gov.tubitak.uekae.ekds.asn.EkdsBaseDataDefs.CodedData_codeSchemeIdentifier;

public class CodedData extends Asn1Type {
   public CodedData_codeSchemeIdentifier codeSchemeIdentifier = null;
   public Asn1Integer codeLength;
   public Asn1OctetString codeDataValue;
   public Asn1UTF8String codeDataFreeText;  // optional

   public CodedData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CodedData (
      CodedData_codeSchemeIdentifier codeSchemeIdentifier_,
      Asn1Integer codeLength_,
      Asn1OctetString codeDataValue_,
      Asn1UTF8String codeDataFreeText_
   ) {
      super();
      codeSchemeIdentifier = codeSchemeIdentifier_;
      codeLength = codeLength_;
      codeDataValue = codeDataValue_;
      codeDataFreeText = codeDataFreeText_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CodedData (
      CodedData_codeSchemeIdentifier codeSchemeIdentifier_,
      Asn1Integer codeLength_,
      Asn1OctetString codeDataValue_
   ) {
      super();
      codeSchemeIdentifier = codeSchemeIdentifier_;
      codeLength = codeLength_;
      codeDataValue = codeDataValue_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CodedData (CodedData_codeSchemeIdentifier codeSchemeIdentifier_,
      long codeLength_,
      byte[] codeDataValue_,
      String codeDataFreeText_
   ) {
      super();
      codeSchemeIdentifier = codeSchemeIdentifier_;
      codeLength = new Asn1Integer (codeLength_);
      codeDataValue = new Asn1OctetString (codeDataValue_);
      codeDataFreeText = new Asn1UTF8String (codeDataFreeText_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CodedData (
      CodedData_codeSchemeIdentifier codeSchemeIdentifier_,
      long codeLength_,
      byte[] codeDataValue_
   ) {
      super();
      codeSchemeIdentifier = codeSchemeIdentifier_;
      codeLength = new Asn1Integer (codeLength_);
      codeDataValue = new Asn1OctetString (codeDataValue_);
   }

   public void init () {
      codeSchemeIdentifier = null;
      codeLength = null;
      codeDataValue = null;
      codeDataFreeText = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SET) : implicitLength;

      init ();

      // decode SET

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      Asn1Tag tag = new Asn1Tag ();

      while (!_context.expired()) {
         buffer.mark (8);

         int len = buffer.decodeTagAndLength (tag);

         // decode codeSchemeIdentifier

         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
         {
            if (null == codeSchemeIdentifier) {
               buffer.reset();
               int tval = buffer.decodeEnumValue (CodedData_codeSchemeIdentifier.TAG, true, len);
               codeSchemeIdentifier = CodedData_codeSchemeIdentifier.valueOf (tval);
            }
            else throw new Asn1SetDuplicateException (buffer, tag);
         }
         // decode codeLength

         else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
         {
            if (null == codeLength) {
               codeLength = new Asn1Integer();
               codeLength.decode (buffer, false, len);
            }
            else throw new Asn1SetDuplicateException (buffer, tag);
         }
         // decode codeDataValue

         else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
         {
            if (null == codeDataValue) {
               codeDataValue = new Asn1OctetString();
               codeDataValue.decode (buffer, false, len);
            }
            else throw new Asn1SetDuplicateException (buffer, tag);
         }
         // decode codeDataFreeText

         else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
         {
            if (null == codeDataFreeText) {
               codeDataFreeText = new Asn1UTF8String();
               codeDataFreeText.decode (buffer, false, len);
               if (!((codeDataFreeText.getLength() >= 0 && codeDataFreeText.
                  getLength() <= 80))) {
                  throw new Asn1ConsVioException ("codeDataFreeText.getLength()", codeDataFreeText.getLength());
               }

            }
            else throw new Asn1SetDuplicateException (buffer, tag);
         }
         else throw new Asn1NotInSetException (buffer, tag);
      }

      if (null == codeSchemeIdentifier ||
          null == codeLength ||
          null == codeDataValue)
         throw new Asn1MissingRequiredException (buffer);

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode codeDataFreeText

      if (codeDataFreeText != null) {
         if (!((codeDataFreeText.getLength() >= 0 && codeDataFreeText.getLength()
             <= 80))) {
            throw new Asn1ConsVioException ("codeDataFreeText.getLength()", codeDataFreeText.getLength());
         }

         len = codeDataFreeText.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
         _aal += len;
      }

      // encode codeDataValue

      len = codeDataValue.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode codeLength

      len = codeLength.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode codeSchemeIdentifier

      len = codeSchemeIdentifier.encode (buffer, true);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SET, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (codeSchemeIdentifier != null) codeSchemeIdentifier.print (_out, "codeSchemeIdentifier", _level+1);
      if (codeLength != null) codeLength.print (_out, "codeLength", _level+1);
      if (codeDataValue != null) codeDataValue.print (_out, "codeDataValue", _level+1);
      if (codeDataFreeText != null) codeDataFreeText.print (_out, "codeDataFreeText", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
