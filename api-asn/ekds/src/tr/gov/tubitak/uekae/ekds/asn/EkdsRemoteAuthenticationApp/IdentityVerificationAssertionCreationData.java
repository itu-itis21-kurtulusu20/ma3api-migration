/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.2.5-pre5, Date: 24-Mar-2011.
 */
package tr.gov.tubitak.uekae.ekds.asn.EkdsRemoteAuthenticationApp;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class IdentityVerificationAssertionCreationData extends Asn1Type {
   public Asn1OctetString assertionNumber;
   public Asn1Integer assertionTimeout;
   public Asn1UTCTime creationTime;

   public IdentityVerificationAssertionCreationData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public IdentityVerificationAssertionCreationData (
      Asn1OctetString assertionNumber_,
      Asn1Integer assertionTimeout_,
      Asn1UTCTime creationTime_
   ) {
      super();
      assertionNumber = assertionNumber_;
      assertionTimeout = assertionTimeout_;
      creationTime = creationTime_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public IdentityVerificationAssertionCreationData (byte[] assertionNumber_,
      long assertionTimeout_,
      String creationTime_
   ) {
      super();
      assertionNumber = new Asn1OctetString (assertionNumber_);
      assertionTimeout = new Asn1Integer (assertionTimeout_);
      creationTime = new Asn1UTCTime (creationTime_);
   }

   public void init () {
      assertionNumber = null;
      assertionTimeout = null;
      creationTime = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode assertionNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         assertionNumber = new Asn1OctetString();
         assertionNumber.decode (buffer, false, elemLen.value);
         if (!(assertionNumber.getLength() == 2)) {
            throw new Asn1ConsVioException ("assertionNumber.getLength()", assertionNumber.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode assertionTimeout

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         assertionTimeout = new Asn1Integer();
         assertionTimeout.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode creationTime

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         creationTime = new Asn1UTCTime (true);
         creationTime.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode creationTime

      len = creationTime.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
      _aal += len;

      // encode assertionTimeout

      len = assertionTimeout.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
      _aal += len;

      // encode assertionNumber

      if (!(assertionNumber.getLength() == 2)) {
         throw new Asn1ConsVioException ("assertionNumber.getLength()", assertionNumber.getLength());
      }

      len = assertionNumber.encode (buffer, false);
      len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
      _aal += len;

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (assertionNumber != null) assertionNumber.print (_out, "assertionNumber", _level+1);
      if (assertionTimeout != null) assertionTimeout.print (_out, "assertionTimeout", _level+1);
      if (creationTime != null) creationTime.print (_out, "creationTime", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
