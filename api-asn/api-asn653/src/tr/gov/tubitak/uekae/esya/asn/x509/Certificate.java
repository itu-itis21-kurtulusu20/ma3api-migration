/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class Certificate extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Certificate";
   }

   public TBSCertificate tbsCertificate;
   public AlgorithmIdentifier signatureAlgorithm;
   public Asn1BitString signature;

   public Certificate () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Certificate (
      TBSCertificate tbsCertificate_,
      AlgorithmIdentifier signatureAlgorithm_,
      Asn1BitString signature_
   ) {
      super();
      tbsCertificate = tbsCertificate_;
      signatureAlgorithm = signatureAlgorithm_;
      signature = signature_;
   }

   public void init () {
      tbsCertificate = null;
      signatureAlgorithm = null;
      signature = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Certificate) ) return false;

      Certificate rhs = (Certificate) obj;

      if (tbsCertificate == null) {
         if (rhs.tbsCertificate != null) return false;
      }
      else {
         if (!tbsCertificate.equals(rhs.tbsCertificate)) {
            return false;
         }
      }

      if (signatureAlgorithm == null) {
         if (rhs.signatureAlgorithm != null) return false;
      }
      else {
         if (!signatureAlgorithm.equals(rhs.signatureAlgorithm)) {
            return false;
         }
      }

      if (signature == null) {
         if (rhs.signature != null) return false;
      }
      else {
         if (!signature.equals(rhs.signature)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (tbsCertificate != null) __code = 31*__code + tbsCertificate.hashCode();
      if (signatureAlgorithm != null) __code = 31*__code + signatureAlgorithm.hashCode();
      if (signature != null) __code = 31*__code + signature.hashCode();

      return __code;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return tbsCertificate;
         case 1: return signatureAlgorithm;
         case 2: return signature;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "tbsCertificate";
         case 1: return "signatureAlgorithm";
         case 2: return "signature";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode tbsCertificate

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         tbsCertificate = new TBSCertificate();
         tbsCertificate.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "tbsCertificate");

      // decode signatureAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signatureAlgorithm = new AlgorithmIdentifier();
         signatureAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signatureAlgorithm");

      // decode signature

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         signature = new Asn1BitString();
         signature.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public synchronized int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signature

      if (signature != null) {
         len = signature.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signature");

      // encode signatureAlgorithm

      if (signatureAlgorithm != null) {
         len = signatureAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signatureAlgorithm");

      // encode tbsCertificate

      if (tbsCertificate != null) {
         len = tbsCertificate.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("tbsCertificate");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (tbsCertificate != null) tbsCertificate.print (_out, "tbsCertificate", _level+1);
      if (signatureAlgorithm != null) signatureAlgorithm.print (_out, "signatureAlgorithm", _level+1);
      if (signature != null) signature.print (_out, "signature", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
