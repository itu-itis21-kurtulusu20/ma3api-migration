/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class RevocationValues extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RevocationValues";
   }

   public _SeqOfCertificateList crlVals;  // optional
   public _SeqOfBasicOCSPResponse ocspVals;  // optional
   public OtherRevVals otherRevVals;  // optional

   public RevocationValues () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RevocationValues (
      _SeqOfCertificateList crlVals_,
      _SeqOfBasicOCSPResponse ocspVals_,
      OtherRevVals otherRevVals_
   ) {
      super();
      crlVals = crlVals_;
      ocspVals = ocspVals_;
      otherRevVals = otherRevVals_;
   }

   public void init () {
      crlVals = null;
      ocspVals = null;
      otherRevVals = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return crlVals;
         case 1: return ocspVals;
         case 2: return otherRevVals;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "crlVals";
         case 1: return "ocspVals";
         case 2: return "otherRevVals";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode crlVals

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         crlVals = new _SeqOfCertificateList();
         crlVals.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode ocspVals

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         ocspVals = new _SeqOfBasicOCSPResponse();
         ocspVals.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode otherRevVals

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         otherRevVals = new OtherRevVals();
         otherRevVals.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode otherRevVals

      if (otherRevVals != null) {
         len = otherRevVals.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode ocspVals

      if (ocspVals != null) {
         len = ocspVals.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode crlVals

      if (crlVals != null) {
         len = crlVals.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (crlVals != null) crlVals.print (_out, "crlVals", _level+1);
      if (ocspVals != null) ocspVals.print (_out, "ocspVals", _level+1);
      if (otherRevVals != null) otherRevVals.print (_out, "otherRevVals", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
