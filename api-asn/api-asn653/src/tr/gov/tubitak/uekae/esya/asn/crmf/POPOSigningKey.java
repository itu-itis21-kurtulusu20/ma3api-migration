/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.crmf;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class POPOSigningKey extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_crmfRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "POPOSigningKey";
   }

   public POPOSigningKeyInput poposkInput;  // optional
   public AlgorithmIdentifier algorithmIdentifier;
   public Asn1BitString signature;

   public POPOSigningKey () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public POPOSigningKey (
      POPOSigningKeyInput poposkInput_,
      AlgorithmIdentifier algorithmIdentifier_,
      Asn1BitString signature_
   ) {
      super();
      poposkInput = poposkInput_;
      algorithmIdentifier = algorithmIdentifier_;
      signature = signature_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public POPOSigningKey (
      AlgorithmIdentifier algorithmIdentifier_,
      Asn1BitString signature_
   ) {
      super();
      algorithmIdentifier = algorithmIdentifier_;
      signature = signature_;
   }

   public void init () {
      poposkInput = null;
      algorithmIdentifier = null;
      signature = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return poposkInput;
         case 1: return algorithmIdentifier;
         case 2: return signature;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "poposkInput";
         case 1: return "algorithmIdentifier";
         case 2: return "signature";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode poposkInput

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         poposkInput = new POPOSigningKeyInput();
         poposkInput.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode algorithmIdentifier

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         algorithmIdentifier = new AlgorithmIdentifier();
         algorithmIdentifier.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "algorithmIdentifier");

      // decode signature

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         signature = new Asn1BitString();
         signature.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signature

      if (signature != null) {
         len = signature.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signature");

      // encode algorithmIdentifier

      if (algorithmIdentifier != null) {
         len = algorithmIdentifier.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("algorithmIdentifier");

      // encode poposkInput

      if (poposkInput != null) {
         len = poposkInput.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (poposkInput != null) poposkInput.print (_out, "poposkInput", _level+1);
      if (algorithmIdentifier != null) algorithmIdentifier.print (_out, "algorithmIdentifier", _level+1);
      if (signature != null) signature.print (_out, "signature", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
