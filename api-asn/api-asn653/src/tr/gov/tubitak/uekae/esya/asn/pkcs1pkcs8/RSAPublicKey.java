/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.pkcs1pkcs8;

import com.objsys.asn1j.runtime.*;

public class RSAPublicKey extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkcs1pkcs8Rtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RSAPublicKey";
   }

   public Asn1BigInteger modulus;
   public Asn1BigInteger publicExponent;

   public RSAPublicKey () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RSAPublicKey (
      Asn1BigInteger modulus_,
      Asn1BigInteger publicExponent_
   ) {
      super();
      modulus = modulus_;
      publicExponent = publicExponent_;
   }

   public void init () {
      modulus = null;
      publicExponent = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return modulus;
         case 1: return publicExponent;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "modulus";
         case 1: return "publicExponent";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode modulus

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         modulus = new Asn1BigInteger();
         modulus.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "modulus");

      // decode publicExponent

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         publicExponent = new Asn1BigInteger();
         publicExponent.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "publicExponent");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode publicExponent

      if (publicExponent != null) {
         len = publicExponent.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("publicExponent");

      // encode modulus

      if (modulus != null) {
         len = modulus.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("modulus");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (modulus != null) modulus.print (_out, "modulus", _level+1);
      if (publicExponent != null) publicExponent.print (_out, "publicExponent", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
