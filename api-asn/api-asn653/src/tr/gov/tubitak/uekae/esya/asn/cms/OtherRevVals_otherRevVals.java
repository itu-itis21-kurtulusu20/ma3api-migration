/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class OtherRevVals_otherRevVals extends Asn1SeqOf {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SEQUENCE OF";
   }

   public Asn1OpenType[] elements;

   public OtherRevVals_otherRevVals () {
      elements = null;
   }

   /**
    * This constructor initializes the internal array to hold the 
    * given number of elements.  The element values must be manually 
    * populated.
    */
   public OtherRevVals_otherRevVals (int numRecords) {
      elements = new Asn1OpenType [numRecords];
   }

   /**
    * This constructor initializes the internal array to hold the 
    * given the array.  
    */
   public OtherRevVals_otherRevVals (Asn1OpenType[] elements_) {
      elements = elements_;
   }

   /** Returns the number of elements in the SEQUENCE OF. */
   public int getLength() {
      return elements.length;
   }

   public Asn1Type[] getElementValues() { return elements; }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      // decode SEQUENCE OF or SET OF

      java.util.LinkedList<Asn1OpenType> llist =
         new java.util.LinkedList<Asn1OpenType>();
      Asn1BerDecodeContext _context =
          new Asn1BerDecodeContext (buffer, llen);
      Asn1OpenType element;
      int elemLen = 0;

      while (!_context.expired()) {
         element = new Asn1OpenType();
         element.decode (buffer, true, elemLen);
         llist.add (element);
      }

      elements = new Asn1OpenType [llist.size()];
      llist.toArray (elements);

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode SEQUENCE OF or SET OF

      for (int i = elements.length - 1; i >= 0; i--) {
         len = elements[i].encode (buffer, true);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      if (elements != null) {
         for (int i = 0; i < elements.length; i++) {
            String name = _varName + " [" + i + "]";
            elements[i].print (_out, name, _level);
         }
      }
   }

}
