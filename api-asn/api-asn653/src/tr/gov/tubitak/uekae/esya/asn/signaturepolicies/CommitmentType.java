/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.DirectoryString;

public class CommitmentType extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CommitmentType";
   }

   public Asn1ObjectIdentifier identifier;
   public DirectoryString fieldOfApplication;  // optional
   public DirectoryString semantics;  // optional

   public CommitmentType () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CommitmentType (
      Asn1ObjectIdentifier identifier_,
      DirectoryString fieldOfApplication_,
      DirectoryString semantics_
   ) {
      super();
      identifier = identifier_;
      fieldOfApplication = fieldOfApplication_;
      semantics = semantics_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CommitmentType (
      Asn1ObjectIdentifier identifier_
   ) {
      super();
      identifier = identifier_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CommitmentType (int[] identifier_,
      DirectoryString fieldOfApplication_,
      DirectoryString semantics_
   ) {
      super();
      identifier = new Asn1ObjectIdentifier (identifier_);
      fieldOfApplication = fieldOfApplication_;
      semantics = semantics_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CommitmentType (
      int[] identifier_
   ) {
      super();
      identifier = new Asn1ObjectIdentifier (identifier_);
   }

   public void init () {
      identifier = null;
      fieldOfApplication = null;
      semantics = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return identifier;
         case 1: return fieldOfApplication;
         case 2: return semantics;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "identifier";
         case 1: return "fieldOfApplication";
         case 2: return "semantics";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode identifier

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         identifier = new Asn1ObjectIdentifier();
         identifier.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "identifier");

      // decode fieldOfApplication

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         fieldOfApplication = new DirectoryString();
         fieldOfApplication.decode (buffer, true, elemLen.value);
      }

      // decode semantics

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         semantics = new DirectoryString();
         semantics.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode semantics

      if (semantics != null) {
         len = semantics.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode fieldOfApplication

      if (fieldOfApplication != null) {
         len = fieldOfApplication.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode identifier

      if (identifier != null) {
         len = identifier.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("identifier");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (identifier != null) identifier.print (_out, "identifier", _level+1);
      if (fieldOfApplication != null) fieldOfApplication.print (_out, "fieldOfApplication", _level+1);
      if (semantics != null) semantics.print (_out, "semantics", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
