/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cvc;

import com.objsys.asn1j.runtime.*;

public class NonSelfDescCVC extends Asn1Seq {
   private static final long serialVersionUID = 55;
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 33);

   static {
      setKey (_cvcRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "NonSelfDescCVC";
   }

   public Asn1OctetString signature;
   public Asn1OctetString puKRemainder;  // optional
   public Asn1OctetString car;

   public NonSelfDescCVC () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NonSelfDescCVC (
      Asn1OctetString signature_,
      Asn1OctetString puKRemainder_,
      Asn1OctetString car_
   ) {
      super();
      signature = signature_;
      puKRemainder = puKRemainder_;
      car = car_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public NonSelfDescCVC (
      Asn1OctetString signature_,
      Asn1OctetString car_
   ) {
      super();
      signature = signature_;
      car = car_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NonSelfDescCVC (byte[] signature_,
      byte[] puKRemainder_,
      byte[] car_
   ) {
      super();
      signature = new Asn1OctetString (signature_);
      puKRemainder = new Asn1OctetString (puKRemainder_);
      car = new Asn1OctetString (car_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public NonSelfDescCVC (
      byte[] signature_,
      byte[] car_
   ) {
      super();
      signature = new Asn1OctetString (signature_);
      car = new Asn1OctetString (car_);
   }

   public void init () {
      signature = null;
      puKRemainder = null;
      car = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return signature;
         case 1: return puKRemainder;
         case 2: return car;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "signature";
         case 1: return "puKRemainder";
         case 2: return "car";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode signature

      if (_context.matchElemTag (Asn1Tag.APPL, Asn1Tag.PRIM, 55, elemLen, true)) {
         int offset = buffer.getByteCount();
         signature = new Asn1OctetString();
         signature.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      // decode puKRemainder

      if (_context.matchElemTag (Asn1Tag.APPL, Asn1Tag.PRIM, 56, elemLen, true)) {
         int offset = buffer.getByteCount();
         puKRemainder = new Asn1OctetString();
         puKRemainder.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode car

      if (_context.matchElemTag (Asn1Tag.APPL, Asn1Tag.PRIM, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         car = new Asn1OctetString();
         car.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "car");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.APPL, Asn1Tag.PRIM, 55) ||
             _tag.equals (Asn1Tag.APPL, Asn1Tag.PRIM, 56) ||
             _tag.equals (Asn1Tag.APPL, Asn1Tag.PRIM, 2))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode car

      if (car != null) {
         len = car.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.APPL, Asn1Tag.PRIM, 2, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("car");

      // encode puKRemainder

      if (puKRemainder != null) {
         len = puKRemainder.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.APPL, Asn1Tag.PRIM, 56, len);
         _aal += len;
      }

      // encode signature

      if (signature != null) {
         len = signature.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.APPL, Asn1Tag.PRIM, 55, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signature");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (signature != null) signature.print (_out, "signature", _level+1);
      if (puKRemainder != null) puKRemainder.print (_out, "puKRemainder", _level+1);
      if (car != null) car.print (_out, "car", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
