/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralNames;
import tr.gov.tubitak.uekae.esya.asn.x509.DirectoryString;

public class SignPolicyInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SignPolicyInfo";
   }

   public Asn1ObjectIdentifier signPolicyIdentifier;
   public Asn1GeneralizedTime dateOfIssue;
   public GeneralNames policyIssuerName;
   public DirectoryString fieldOfApplication;
   public SignatureValidationPolicy signatureValidationPolicy;
   public SignPolExtensions signPolExtensions;  // optional

   public SignPolicyInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SignPolicyInfo (
      Asn1ObjectIdentifier signPolicyIdentifier_,
      Asn1GeneralizedTime dateOfIssue_,
      GeneralNames policyIssuerName_,
      DirectoryString fieldOfApplication_,
      SignatureValidationPolicy signatureValidationPolicy_,
      SignPolExtensions signPolExtensions_
   ) {
      super();
      signPolicyIdentifier = signPolicyIdentifier_;
      dateOfIssue = dateOfIssue_;
      policyIssuerName = policyIssuerName_;
      fieldOfApplication = fieldOfApplication_;
      signatureValidationPolicy = signatureValidationPolicy_;
      signPolExtensions = signPolExtensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SignPolicyInfo (
      Asn1ObjectIdentifier signPolicyIdentifier_,
      Asn1GeneralizedTime dateOfIssue_,
      GeneralNames policyIssuerName_,
      DirectoryString fieldOfApplication_,
      SignatureValidationPolicy signatureValidationPolicy_
   ) {
      super();
      signPolicyIdentifier = signPolicyIdentifier_;
      dateOfIssue = dateOfIssue_;
      policyIssuerName = policyIssuerName_;
      fieldOfApplication = fieldOfApplication_;
      signatureValidationPolicy = signatureValidationPolicy_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SignPolicyInfo (int[] signPolicyIdentifier_,
      String dateOfIssue_,
      GeneralNames policyIssuerName_,
      DirectoryString fieldOfApplication_,
      SignatureValidationPolicy signatureValidationPolicy_,
      SignPolExtensions signPolExtensions_
   ) {
      super();
      signPolicyIdentifier = new Asn1ObjectIdentifier (signPolicyIdentifier_);
      dateOfIssue = new Asn1GeneralizedTime (dateOfIssue_);
      policyIssuerName = policyIssuerName_;
      fieldOfApplication = fieldOfApplication_;
      signatureValidationPolicy = signatureValidationPolicy_;
      signPolExtensions = signPolExtensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SignPolicyInfo (
      int[] signPolicyIdentifier_,
      String dateOfIssue_,
      GeneralNames policyIssuerName_,
      DirectoryString fieldOfApplication_,
      SignatureValidationPolicy signatureValidationPolicy_
   ) {
      super();
      signPolicyIdentifier = new Asn1ObjectIdentifier (signPolicyIdentifier_);
      dateOfIssue = new Asn1GeneralizedTime (dateOfIssue_);
      policyIssuerName = policyIssuerName_;
      fieldOfApplication = fieldOfApplication_;
      signatureValidationPolicy = signatureValidationPolicy_;
   }

   public void init () {
      signPolicyIdentifier = null;
      dateOfIssue = null;
      policyIssuerName = null;
      fieldOfApplication = null;
      signatureValidationPolicy = null;
      signPolExtensions = null;
   }

   public int getElementCount() { return 6; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return signPolicyIdentifier;
         case 1: return dateOfIssue;
         case 2: return policyIssuerName;
         case 3: return fieldOfApplication;
         case 4: return signatureValidationPolicy;
         case 5: return signPolExtensions;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "signPolicyIdentifier";
         case 1: return "dateOfIssue";
         case 2: return "policyIssuerName";
         case 3: return "fieldOfApplication";
         case 4: return "signatureValidationPolicy";
         case 5: return "signPolExtensions";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode signPolicyIdentifier

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         signPolicyIdentifier = new Asn1ObjectIdentifier();
         signPolicyIdentifier.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signPolicyIdentifier");

      // decode dateOfIssue

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         dateOfIssue = new Asn1GeneralizedTime (true);
         dateOfIssue.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "dateOfIssue");

      // decode policyIssuerName

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         policyIssuerName = new GeneralNames();
         policyIssuerName.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "policyIssuerName");

      // decode fieldOfApplication

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 20) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 28) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 30))
         {
            fieldOfApplication = new DirectoryString();
            fieldOfApplication.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "fieldOfApplication");
      }
      else throw new Asn1MissingRequiredException (buffer, "fieldOfApplication");

      // decode signatureValidationPolicy

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signatureValidationPolicy = new SignatureValidationPolicy();
         signatureValidationPolicy.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signatureValidationPolicy");

      // decode signPolExtensions

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signPolExtensions = new SignPolExtensions();
         signPolExtensions.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signPolExtensions

      if (signPolExtensions != null) {
         len = signPolExtensions.encode (buffer, true);
         _aal += len;
      }

      // encode signatureValidationPolicy

      if (signatureValidationPolicy != null) {
         len = signatureValidationPolicy.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signatureValidationPolicy");

      // encode fieldOfApplication

      if (fieldOfApplication != null) {
         len = fieldOfApplication.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("fieldOfApplication");

      // encode policyIssuerName

      if (policyIssuerName != null) {
         len = policyIssuerName.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("policyIssuerName");

      // encode dateOfIssue

      if (dateOfIssue != null) {
         len = dateOfIssue.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("dateOfIssue");

      // encode signPolicyIdentifier

      if (signPolicyIdentifier != null) {
         len = signPolicyIdentifier.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signPolicyIdentifier");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (signPolicyIdentifier != null) signPolicyIdentifier.print (_out, "signPolicyIdentifier", _level+1);
      if (dateOfIssue != null) dateOfIssue.print (_out, "dateOfIssue", _level+1);
      if (policyIssuerName != null) policyIssuerName.print (_out, "policyIssuerName", _level+1);
      if (fieldOfApplication != null) fieldOfApplication.print (_out, "fieldOfApplication", _level+1);
      if (signatureValidationPolicy != null) signatureValidationPolicy.print (_out, "signatureValidationPolicy", _level+1);
      if (signPolExtensions != null) signPolExtensions.print (_out, "signPolExtensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
