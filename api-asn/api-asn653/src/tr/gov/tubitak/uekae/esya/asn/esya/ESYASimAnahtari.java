/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.esya;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class ESYASimAnahtari extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_esyaRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ESYASimAnahtari";
   }

   public Asn1Integer anahNo;
   public AlgorithmIdentifier hashAlg;
   public AlgorithmIdentifier simetrikAlg;
   public Asn1OctetString anahtarBytes;

   public ESYASimAnahtari () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ESYASimAnahtari (
      Asn1Integer anahNo_,
      AlgorithmIdentifier hashAlg_,
      AlgorithmIdentifier simetrikAlg_,
      Asn1OctetString anahtarBytes_
   ) {
      super();
      anahNo = anahNo_;
      hashAlg = hashAlg_;
      simetrikAlg = simetrikAlg_;
      anahtarBytes = anahtarBytes_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ESYASimAnahtari (long anahNo_,
      AlgorithmIdentifier hashAlg_,
      AlgorithmIdentifier simetrikAlg_,
      byte[] anahtarBytes_
   ) {
      super();
      anahNo = new Asn1Integer (anahNo_);
      hashAlg = hashAlg_;
      simetrikAlg = simetrikAlg_;
      anahtarBytes = new Asn1OctetString (anahtarBytes_);
   }

   public void init () {
      anahNo = null;
      hashAlg = null;
      simetrikAlg = null;
      anahtarBytes = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return anahNo;
         case 1: return hashAlg;
         case 2: return simetrikAlg;
         case 3: return anahtarBytes;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "anahNo";
         case 1: return "hashAlg";
         case 2: return "simetrikAlg";
         case 3: return "anahtarBytes";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode anahNo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         anahNo = new Asn1Integer();
         anahNo.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "anahNo");

      // decode hashAlg

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         hashAlg = new AlgorithmIdentifier();
         hashAlg.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "hashAlg");

      // decode simetrikAlg

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         simetrikAlg = new AlgorithmIdentifier();
         simetrikAlg.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "simetrikAlg");

      // decode anahtarBytes

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         anahtarBytes = new Asn1OctetString();
         anahtarBytes.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "anahtarBytes");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode anahtarBytes

      if (anahtarBytes != null) {
         len = anahtarBytes.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("anahtarBytes");

      // encode simetrikAlg

      if (simetrikAlg != null) {
         len = simetrikAlg.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("simetrikAlg");

      // encode hashAlg

      if (hashAlg != null) {
         len = hashAlg.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("hashAlg");

      // encode anahNo

      if (anahNo != null) {
         len = anahNo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("anahNo");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (anahNo != null) anahNo.print (_out, "anahNo", _level+1);
      if (hashAlg != null) hashAlg.print (_out, "hashAlg", _level+1);
      if (simetrikAlg != null) simetrikAlg.print (_out, "simetrikAlg", _level+1);
      if (anahtarBytes != null) anahtarBytes.print (_out, "anahtarBytes", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
