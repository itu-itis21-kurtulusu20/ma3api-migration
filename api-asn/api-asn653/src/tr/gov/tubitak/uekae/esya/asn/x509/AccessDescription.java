/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class AccessDescription extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AccessDescription";
   }

   public Asn1ObjectIdentifier accessMethod;
   public GeneralName accessLocation;

   public AccessDescription () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AccessDescription (
      Asn1ObjectIdentifier accessMethod_,
      GeneralName accessLocation_
   ) {
      super();
      accessMethod = accessMethod_;
      accessLocation = accessLocation_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AccessDescription (int[] accessMethod_,
      GeneralName accessLocation_
   ) {
      super();
      accessMethod = new Asn1ObjectIdentifier (accessMethod_);
      accessLocation = accessLocation_;
   }

   public void init () {
      accessMethod = null;
      accessLocation = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AccessDescription) ) return false;

      AccessDescription rhs = (AccessDescription) obj;

      if (accessMethod == null) {
         if (rhs.accessMethod != null) return false;
      }
      else {
         if (!accessMethod.equals(rhs.accessMethod)) {
            return false;
         }
      }

      if (accessLocation == null) {
         if (rhs.accessLocation != null) return false;
      }
      else {
         if (!accessLocation.equals(rhs.accessLocation)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (accessMethod != null) __code = 31*__code + accessMethod.hashCode();
      if (accessLocation != null) __code = 31*__code + accessLocation.hashCode();

      return __code;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return accessMethod;
         case 1: return accessLocation;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "accessMethod";
         case 1: return "accessLocation";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode accessMethod

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         accessMethod = new Asn1ObjectIdentifier();
         accessMethod.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "accessMethod");

      // decode accessLocation

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
         {
            accessLocation = new GeneralName();
            accessLocation.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "accessLocation");
      }
      else throw new Asn1MissingRequiredException (buffer, "accessLocation");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode accessLocation

      if (accessLocation != null) {
         len = accessLocation.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("accessLocation");

      // encode accessMethod

      if (accessMethod != null) {
         len = accessMethod.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("accessMethod");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (accessMethod != null) accessMethod.print (_out, "accessMethod", _level+1);
      if (accessLocation != null) accessLocation.print (_out, "accessLocation", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
