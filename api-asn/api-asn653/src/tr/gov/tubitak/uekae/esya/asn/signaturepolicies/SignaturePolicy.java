/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class SignaturePolicy extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SignaturePolicy";
   }

   public AlgorithmIdentifier signPolicyHashAlg;
   public SignPolicyInfo signPolicyInfo;
   public Asn1OctetString signPolicyHash;  // optional

   public SignaturePolicy () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SignaturePolicy (
      AlgorithmIdentifier signPolicyHashAlg_,
      SignPolicyInfo signPolicyInfo_,
      Asn1OctetString signPolicyHash_
   ) {
      super();
      signPolicyHashAlg = signPolicyHashAlg_;
      signPolicyInfo = signPolicyInfo_;
      signPolicyHash = signPolicyHash_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SignaturePolicy (
      AlgorithmIdentifier signPolicyHashAlg_,
      SignPolicyInfo signPolicyInfo_
   ) {
      super();
      signPolicyHashAlg = signPolicyHashAlg_;
      signPolicyInfo = signPolicyInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SignaturePolicy (AlgorithmIdentifier signPolicyHashAlg_,
      SignPolicyInfo signPolicyInfo_,
      byte[] signPolicyHash_
   ) {
      super();
      signPolicyHashAlg = signPolicyHashAlg_;
      signPolicyInfo = signPolicyInfo_;
      signPolicyHash = new Asn1OctetString (signPolicyHash_);
   }

   public void init () {
      signPolicyHashAlg = null;
      signPolicyInfo = null;
      signPolicyHash = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return signPolicyHashAlg;
         case 1: return signPolicyInfo;
         case 2: return signPolicyHash;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "signPolicyHashAlg";
         case 1: return "signPolicyInfo";
         case 2: return "signPolicyHash";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode signPolicyHashAlg

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signPolicyHashAlg = new AlgorithmIdentifier();
         signPolicyHashAlg.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signPolicyHashAlg");

      // decode signPolicyInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signPolicyInfo = new SignPolicyInfo();
         signPolicyInfo.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signPolicyInfo");

      // decode signPolicyHash

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         signPolicyHash = new Asn1OctetString();
         signPolicyHash.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signPolicyHash

      if (signPolicyHash != null) {
         len = signPolicyHash.encode (buffer, true);
         _aal += len;
      }

      // encode signPolicyInfo

      if (signPolicyInfo != null) {
         len = signPolicyInfo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signPolicyInfo");

      // encode signPolicyHashAlg

      if (signPolicyHashAlg != null) {
         len = signPolicyHashAlg.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signPolicyHashAlg");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (signPolicyHashAlg != null) signPolicyHashAlg.print (_out, "signPolicyHashAlg", _level+1);
      if (signPolicyInfo != null) signPolicyInfo.print (_out, "signPolicyInfo", _level+1);
      if (signPolicyHash != null) signPolicyHash.print (_out, "signPolicyHash", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
