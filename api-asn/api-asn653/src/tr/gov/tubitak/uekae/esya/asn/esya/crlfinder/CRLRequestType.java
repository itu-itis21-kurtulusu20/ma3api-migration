/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.esya.crlfinder;

import com.objsys.asn1j.runtime.*;

public class CRLRequestType extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_crlfinderRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CRLRequestType";
   }

   // Choice element identifier constants
   public final static byte _CRLNO = 1;
   public final static byte _CRLHASH = 2;
   public final static byte _ISSUEDNOTBEFORE = 3;
   public final static byte _ISSUEDNOTAFTER = 4;

   public CRLRequestType () {
      super();
   }

   public CRLRequestType (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _CRLNO: return "crlNo";
      case _CRLHASH: return "crlHash";
      case _ISSUEDNOTBEFORE: return "issuedNotBefore";
      case _ISSUEDNOTAFTER: return "issuedNotAfter";
      default: return "UNDEFINED";
      }
   }

   public void set_crlNo (Asn1BigInteger value) {
      setElement (_CRLNO, value);
   }

   public void set_crlHash (CRLHash value) {
      setElement (_CRLHASH, value);
   }

   public void set_issuedNotBefore (Asn1GeneralizedTime value) {
      setElement (_ISSUEDNOTBEFORE, value);
   }

   public void set_issuedNotAfter (Asn1GeneralizedTime value) {
      setElement (_ISSUEDNOTAFTER, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0)) {
         Asn1BigInteger crlNo;
         crlNo = new Asn1BigInteger();
         crlNo.decode (buffer, false, len);
         setElement (_CRLNO, crlNo);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
      {
         CRLHash crlHash;
         crlHash = new CRLHash();
         crlHash.decode (buffer, false, len);
         setElement (_CRLHASH, crlHash);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
      {
         Asn1GeneralizedTime issuedNotBefore;
         issuedNotBefore = new Asn1GeneralizedTime (true);
         issuedNotBefore.decode (buffer, false, len);
         setElement (_ISSUEDNOTBEFORE, issuedNotBefore);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
      {
         Asn1GeneralizedTime issuedNotAfter;
         issuedNotAfter = new Asn1GeneralizedTime (true);
         issuedNotAfter.decode (buffer, false, len);
         setElement (_ISSUEDNOTAFTER, issuedNotAfter);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode crlNo
      case _CRLNO:
         Asn1BigInteger crlNo = (Asn1BigInteger) getElement();
         len = crlNo.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
         break;

      // encode crlHash
      case _CRLHASH:
         CRLHash crlHash = (CRLHash) getElement();
         len = crlHash.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
         break;

      // encode issuedNotBefore
      case _ISSUEDNOTBEFORE:
         Asn1GeneralizedTime issuedNotBefore = (Asn1GeneralizedTime) getElement();
         len = issuedNotBefore.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
         break;

      // encode issuedNotAfter
      case _ISSUEDNOTAFTER:
         Asn1GeneralizedTime issuedNotAfter = (Asn1GeneralizedTime) getElement();
         len = issuedNotAfter.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
