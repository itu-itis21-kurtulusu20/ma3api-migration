/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
import tr.gov.tubitak.uekae.esya.asn.cms.SignedAttributes;

public class SignerInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SignerInfo";
   }

   public CMSVersion version;
   public SignerIdentifier sid;
   public AlgorithmIdentifier digestAlgorithm;
   public SignedAttributes signedAttrs;  // optional
   public AlgorithmIdentifier signatureAlgorithm;
   public Asn1OctetString signature;
   public UnsignedAttributes unsignedAttrs;  // optional

   public SignerInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SignerInfo (
      CMSVersion version_,
      SignerIdentifier sid_,
      AlgorithmIdentifier digestAlgorithm_,
      SignedAttributes signedAttrs_,
      AlgorithmIdentifier signatureAlgorithm_,
      Asn1OctetString signature_,
      UnsignedAttributes unsignedAttrs_
   ) {
      super();
      version = version_;
      sid = sid_;
      digestAlgorithm = digestAlgorithm_;
      signedAttrs = signedAttrs_;
      signatureAlgorithm = signatureAlgorithm_;
      signature = signature_;
      unsignedAttrs = unsignedAttrs_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SignerInfo (
      CMSVersion version_,
      SignerIdentifier sid_,
      AlgorithmIdentifier digestAlgorithm_,
      AlgorithmIdentifier signatureAlgorithm_,
      Asn1OctetString signature_
   ) {
      super();
      version = version_;
      sid = sid_;
      digestAlgorithm = digestAlgorithm_;
      signatureAlgorithm = signatureAlgorithm_;
      signature = signature_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SignerInfo (long version_,
      SignerIdentifier sid_,
      AlgorithmIdentifier digestAlgorithm_,
      SignedAttributes signedAttrs_,
      AlgorithmIdentifier signatureAlgorithm_,
      byte[] signature_,
      UnsignedAttributes unsignedAttrs_
   ) {
      super();
      version = new CMSVersion (version_);
      sid = sid_;
      digestAlgorithm = digestAlgorithm_;
      signedAttrs = signedAttrs_;
      signatureAlgorithm = signatureAlgorithm_;
      signature = new Asn1OctetString (signature_);
      unsignedAttrs = unsignedAttrs_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SignerInfo (
      long version_,
      SignerIdentifier sid_,
      AlgorithmIdentifier digestAlgorithm_,
      AlgorithmIdentifier signatureAlgorithm_,
      byte[] signature_
   ) {
      super();
      version = new CMSVersion (version_);
      sid = sid_;
      digestAlgorithm = digestAlgorithm_;
      signatureAlgorithm = signatureAlgorithm_;
      signature = new Asn1OctetString (signature_);
   }

   public void init () {
      version = null;
      sid = null;
      digestAlgorithm = null;
      signedAttrs = null;
      signatureAlgorithm = null;
      signature = null;
      unsignedAttrs = null;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return version;
         case 1: return sid;
         case 2: return digestAlgorithm;
         case 3: return signedAttrs;
         case 4: return signatureAlgorithm;
         case 5: return signature;
         case 6: return unsignedAttrs;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "version";
         case 1: return "sid";
         case 2: return "digestAlgorithm";
         case 3: return "signedAttrs";
         case 4: return "signatureAlgorithm";
         case 5: return "signature";
         case 6: return "unsignedAttrs";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new CMSVersion();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode sid

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
         {
            sid = new SignerIdentifier();
            sid.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "sid");
      }
      else throw new Asn1MissingRequiredException (buffer, "sid");

      // decode digestAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         digestAlgorithm = new AlgorithmIdentifier();
         digestAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "digestAlgorithm");

      // decode signedAttrs

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         signedAttrs = new SignedAttributes();
         signedAttrs.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

         if (elemLen.value == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }

      // decode signatureAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signatureAlgorithm = new AlgorithmIdentifier();
         signatureAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signatureAlgorithm");

      // decode signature

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         signature = new Asn1OctetString();
         signature.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      // decode unsignedAttrs

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         unsignedAttrs = new UnsignedAttributes();
         unsignedAttrs.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

         if (elemLen.value == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode unsignedAttrs

      if (unsignedAttrs != null) {
         len = unsignedAttrs.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode signature

      if (signature != null) {
         len = signature.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signature");

      // encode signatureAlgorithm

      if (signatureAlgorithm != null) {
         len = signatureAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signatureAlgorithm");

      // encode signedAttrs

      if (signedAttrs != null) {
         len = signedAttrs.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode digestAlgorithm

      if (digestAlgorithm != null) {
         len = digestAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("digestAlgorithm");

      // encode sid

      if (sid != null) {
         len = sid.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("sid");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (sid != null) sid.print (_out, "sid", _level+1);
      if (digestAlgorithm != null) digestAlgorithm.print (_out, "digestAlgorithm", _level+1);
      if (signedAttrs != null) signedAttrs.print (_out, "signedAttrs", _level+1);
      if (signatureAlgorithm != null) signatureAlgorithm.print (_out, "signatureAlgorithm", _level+1);
      if (signature != null) signature.print (_out, "signature", _level+1);
      if (unsignedAttrs != null) unsignedAttrs.print (_out, "unsignedAttrs", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
