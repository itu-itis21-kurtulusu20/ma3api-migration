/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class DistributionPoint extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DistributionPoint";
   }

   public DistributionPointName distributionPoint;  // optional
   public ReasonFlags reasons;  // optional
   public GeneralNames cRLIssuer;  // optional

   public DistributionPoint () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DistributionPoint (
      DistributionPointName distributionPoint_,
      ReasonFlags reasons_,
      GeneralNames cRLIssuer_
   ) {
      super();
      distributionPoint = distributionPoint_;
      reasons = reasons_;
      cRLIssuer = cRLIssuer_;
   }

   public void init () {
      distributionPoint = null;
      reasons = null;
      cRLIssuer = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof DistributionPoint) ) return false;

      DistributionPoint rhs = (DistributionPoint) obj;

      if (distributionPoint == null) {
         if (rhs.distributionPoint != null) return false;
      }
      else {
         if (!distributionPoint.equals(rhs.distributionPoint)) {
            return false;
         }
      }

      if (reasons == null) {
         if (rhs.reasons != null) return false;
      }
      else {
         if (!reasons.equals(rhs.reasons)) {
            return false;
         }
      }

      if (cRLIssuer == null) {
         if (rhs.cRLIssuer != null) return false;
      }
      else {
         if (!cRLIssuer.equals(rhs.cRLIssuer)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (distributionPoint != null) __code = 31*__code + distributionPoint.hashCode();
      if (reasons != null) __code = 31*__code + reasons.hashCode();
      if (cRLIssuer != null) __code = 31*__code + cRLIssuer.hashCode();

      return __code;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return distributionPoint;
         case 1: return reasons;
         case 2: return cRLIssuer;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "distributionPoint";
         case 1: return "reasons";
         case 2: return "cRLIssuer";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode distributionPoint

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         distributionPoint = new DistributionPointName();
         distributionPoint.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode reasons

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         reasons = new ReasonFlags();
         reasons.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode cRLIssuer

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         cRLIssuer = new GeneralNames();
         cRLIssuer.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode cRLIssuer

      if (cRLIssuer != null) {
         len = cRLIssuer.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode reasons

      if (reasons != null) {
         len = reasons.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode distributionPoint

      if (distributionPoint != null) {
         len = distributionPoint.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (distributionPoint != null) distributionPoint.print (_out, "distributionPoint", _level+1);
      if (reasons != null) reasons.print (_out, "reasons", _level+1);
      if (cRLIssuer != null) cRLIssuer.print (_out, "cRLIssuer", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
