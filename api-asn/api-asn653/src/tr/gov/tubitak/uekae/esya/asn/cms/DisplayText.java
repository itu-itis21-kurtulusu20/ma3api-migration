/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class DisplayText extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DisplayText";
   }

   // Choice element identifier constants
   public final static byte _UTF8STRING = 1;
   public final static byte _VISIBLESTRING = 2;
   public final static byte _BMPSTRING = 3;

   public DisplayText () {
      super();
   }

   public DisplayText (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _UTF8STRING: return "utf8String";
      case _VISIBLESTRING: return "visibleString";
      case _BMPSTRING: return "bmpString";
      default: return "UNDEFINED";
      }
   }

   public void set_utf8String (Asn1UTF8String value) {
      setElement (_UTF8STRING, value);
   }

   public void set_visibleString (Asn1VisibleString value) {
      setElement (_VISIBLESTRING, value);
   }

   public void set_bmpString (Asn1BMPString value) {
      setElement (_BMPSTRING, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12))
      {
         buffer.reset();
         Asn1UTF8String utf8String;
         utf8String = new Asn1UTF8String();
         utf8String.decode (buffer, true, len);
         if (!((utf8String.getLength() >= 1 && utf8String.getLength() <= 200))) {
            throw new Asn1ConsVioException ("utf8String.getLength()", utf8String.getLength());
         }

         setElement (_UTF8STRING, utf8String);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 26))
      {
         buffer.reset();
         Asn1VisibleString visibleString;
         visibleString = new Asn1VisibleString();
         visibleString.decode (buffer, true, len);
         if (!((visibleString.getLength() >= 1 && visibleString.getLength() <= 200))) {
            throw new Asn1ConsVioException ("visibleString.getLength()", visibleString.getLength());
         }

         setElement (_VISIBLESTRING, visibleString);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 30))
      {
         buffer.reset();
         Asn1BMPString bmpString;
         bmpString = new Asn1BMPString();
         bmpString.decode (buffer, true, len);
         if (!((bmpString.getLength() >= 1 && bmpString.getLength() <= 200))) {
            throw new Asn1ConsVioException ("bmpString.getLength()", bmpString.getLength());
         }

         setElement (_BMPSTRING, bmpString);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode utf8String
      case _UTF8STRING:
         Asn1UTF8String utf8String = (Asn1UTF8String) getElement();
         if (!((utf8String.getLength() >= 1 && utf8String.getLength() <= 200))) {
            throw new Asn1ConsVioException ("utf8String.getLength()", utf8String.getLength());
         }

         len = utf8String.encode (buffer, true);
         _aal += len;
         break;

      // encode visibleString
      case _VISIBLESTRING:
         Asn1VisibleString visibleString = (Asn1VisibleString) getElement();
         if (!((visibleString.getLength() >= 1 && visibleString.getLength() <= 200))) {
            throw new Asn1ConsVioException ("visibleString.getLength()", visibleString.getLength());
         }

         len = visibleString.encode (buffer, true);
         _aal += len;
         break;

      // encode bmpString
      case _BMPSTRING:
         Asn1BMPString bmpString = (Asn1BMPString) getElement();
         if (!((bmpString.getLength() >= 1 && bmpString.getLength() <= 200))) {
            throw new Asn1ConsVioException ("bmpString.getLength()", bmpString.getLength());
         }

         len = bmpString.encode (buffer, true);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
