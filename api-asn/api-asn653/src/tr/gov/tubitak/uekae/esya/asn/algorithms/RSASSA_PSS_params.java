/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.algorithms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;


public class RSASSA_PSS_params extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_algorithmsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RSASSA-PSS-params";
   }

   public AlgorithmIdentifier hashAlgorithm;  // optional
   public AlgorithmIdentifier maskGenAlgorithm;  // optional
   public Asn1Integer saltLength;  // default = 20()
   public Asn1Integer trailerField;  // default = 1()

   public RSASSA_PSS_params () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RSASSA_PSS_params (
      AlgorithmIdentifier hashAlgorithm_,
      AlgorithmIdentifier maskGenAlgorithm_,
      Asn1Integer saltLength_,
      Asn1Integer trailerField_
   ) {
      super();
      hashAlgorithm = hashAlgorithm_;
      maskGenAlgorithm = maskGenAlgorithm_;
      saltLength = saltLength_;
      trailerField = trailerField_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RSASSA_PSS_params (AlgorithmIdentifier hashAlgorithm_,
      AlgorithmIdentifier maskGenAlgorithm_,
      long saltLength_,
      long trailerField_
   ) {
      super();
      hashAlgorithm = hashAlgorithm_;
      maskGenAlgorithm = maskGenAlgorithm_;
      saltLength = new Asn1Integer (saltLength_);
      trailerField = new Asn1Integer (trailerField_);
   }

   public void init () {
      hashAlgorithm = null;
      maskGenAlgorithm = null;
      saltLength = new Asn1Integer (20);
      trailerField = new Asn1Integer (1);
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return hashAlgorithm;
         case 1: return maskGenAlgorithm;
         case 2: return saltLength;
         case 3: return trailerField;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "hashAlgorithm";
         case 1: return "maskGenAlgorithm";
         case 2: return "saltLength";
         case 3: return "trailerField";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode hashAlgorithm

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         hashAlgorithm = new AlgorithmIdentifier();
         hashAlgorithm.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode maskGenAlgorithm

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         maskGenAlgorithm = new AlgorithmIdentifier();
         maskGenAlgorithm.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode saltLength

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         saltLength = new Asn1Integer();
         saltLength.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode trailerField

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         trailerField = new Asn1Integer();
         trailerField.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode trailerField

      if (trailerField != null) {
         if (!trailerField.equals (1)) {
            len = trailerField.encode (buffer, true);
            len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }
      }

      // encode saltLength

      if (saltLength != null) {
         if (!saltLength.equals (20)) {
            len = saltLength.encode (buffer, true);
            len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }
      }

      // encode maskGenAlgorithm

      if (maskGenAlgorithm != null) {
         len = maskGenAlgorithm.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode hashAlgorithm

      if (hashAlgorithm != null) {
         len = hashAlgorithm.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (hashAlgorithm != null) hashAlgorithm.print (_out, "hashAlgorithm", _level+1);
      if (maskGenAlgorithm != null) maskGenAlgorithm.print (_out, "maskGenAlgorithm", _level+1);
      if (saltLength != null) saltLength.print (_out, "saltLength", _level+1);
      if (trailerField != null) trailerField.print (_out, "trailerField", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
