/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class TBSCertList extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TBSCertList";
   }

   public Version version;  // optional
   public AlgorithmIdentifier signature;
   public Name issuer;
   public Time thisUpdate;
   public Time nextUpdate;  // optional
   public _SeqOfTBSCertList_revokedCertificates_element revokedCertificates;  // optional
   public Extensions crlExtensions;  // optional

   public TBSCertList () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TBSCertList (
      Version version_,
      AlgorithmIdentifier signature_,
      Name issuer_,
      Time thisUpdate_,
      Time nextUpdate_,
      _SeqOfTBSCertList_revokedCertificates_element revokedCertificates_,
      Extensions crlExtensions_
   ) {
      super();
      version = version_;
      signature = signature_;
      issuer = issuer_;
      thisUpdate = thisUpdate_;
      nextUpdate = nextUpdate_;
      revokedCertificates = revokedCertificates_;
      crlExtensions = crlExtensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TBSCertList (
      AlgorithmIdentifier signature_,
      Name issuer_,
      Time thisUpdate_
   ) {
      super();
      signature = signature_;
      issuer = issuer_;
      thisUpdate = thisUpdate_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TBSCertList (long version_,
      AlgorithmIdentifier signature_,
      Name issuer_,
      Time thisUpdate_,
      Time nextUpdate_,
      _SeqOfTBSCertList_revokedCertificates_element revokedCertificates_,
      Extensions crlExtensions_
   ) {
      super();
      version = new Version (version_);
      signature = signature_;
      issuer = issuer_;
      thisUpdate = thisUpdate_;
      nextUpdate = nextUpdate_;
      revokedCertificates = revokedCertificates_;
      crlExtensions = crlExtensions_;
   }

   public void init () {
      version = null;
      signature = null;
      issuer = null;
      thisUpdate = null;
      nextUpdate = null;
      revokedCertificates = null;
      crlExtensions = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof TBSCertList) ) return false;

      TBSCertList rhs = (TBSCertList) obj;

      if (version == null) {
         if (rhs.version != null) return false;
      }
      else {
         if (!version.equals(rhs.version)) {
            return false;
         }
      }

      if (signature == null) {
         if (rhs.signature != null) return false;
      }
      else {
         if (!signature.equals(rhs.signature)) {
            return false;
         }
      }

      if (issuer == null) {
         if (rhs.issuer != null) return false;
      }
      else {
         if (!issuer.equals(rhs.issuer)) {
            return false;
         }
      }

      if (thisUpdate == null) {
         if (rhs.thisUpdate != null) return false;
      }
      else {
         if (!thisUpdate.equals(rhs.thisUpdate)) {
            return false;
         }
      }

      if (nextUpdate == null) {
         if (rhs.nextUpdate != null) return false;
      }
      else {
         if (!nextUpdate.equals(rhs.nextUpdate)) {
            return false;
         }
      }

      if (revokedCertificates == null) {
         if (rhs.revokedCertificates != null) return false;
      }
      else {
         if (!revokedCertificates.equals(rhs.revokedCertificates)) {
            return false;
         }
      }

      if (crlExtensions == null) {
         if (rhs.crlExtensions != null) return false;
      }
      else {
         if (!crlExtensions.equals(rhs.crlExtensions)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (version != null) __code = 31*__code + version.hashCode();
      if (signature != null) __code = 31*__code + signature.hashCode();
      if (issuer != null) __code = 31*__code + issuer.hashCode();
      if (thisUpdate != null) __code = 31*__code + thisUpdate.hashCode();
      if (nextUpdate != null) __code = 31*__code + nextUpdate.hashCode();
      if (revokedCertificates != null) __code = 31*__code + revokedCertificates.hashCode();
      if (crlExtensions != null) __code = 31*__code + crlExtensions.hashCode();

      return __code;
   }

   public int getElementCount() { return 7; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return version;
         case 1: return signature;
         case 2: return issuer;
         case 3: return thisUpdate;
         case 4: return nextUpdate;
         case 5: return revokedCertificates;
         case 6: return crlExtensions;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "version";
         case 1: return "signature";
         case 2: return "issuer";
         case 3: return "thisUpdate";
         case 4: return "nextUpdate";
         case 5: return "revokedCertificates";
         case 6: return "crlExtensions";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new Version();
         version.decode (buffer, true, elemLen.value);
      }

      // decode signature

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signature = new AlgorithmIdentifier();
         signature.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      // decode issuer

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         issuer = new Name();
         issuer.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "issuer");

      // decode thisUpdate

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
         {
            thisUpdate = new Time();
            thisUpdate.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "thisUpdate");
      }
      else throw new Asn1MissingRequiredException (buffer, "thisUpdate");

      // decode nextUpdate

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
         {
            nextUpdate = new Time();
            nextUpdate.decode (buffer, true, elemLen.value);
         }
      }

      // decode revokedCertificates

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         revokedCertificates = new _SeqOfTBSCertList_revokedCertificates_element();
         revokedCertificates.decode (buffer, true, elemLen.value);
      }

      // decode crlExtensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         crlExtensions = new Extensions();
         crlExtensions.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode crlExtensions

      if (crlExtensions != null) {
         len = crlExtensions.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode revokedCertificates

      if (revokedCertificates != null) {
         len = revokedCertificates.encode (buffer, true);
         _aal += len;
      }

      // encode nextUpdate

      if (nextUpdate != null) {
         len = nextUpdate.encode (buffer, true);
         _aal += len;
      }

      // encode thisUpdate

      if (thisUpdate != null) {
         len = thisUpdate.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("thisUpdate");

      // encode issuer

      if (issuer != null) {
         len = issuer.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("issuer");

      // encode signature

      if (signature != null) {
         len = signature.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signature");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (signature != null) signature.print (_out, "signature", _level+1);
      if (issuer != null) issuer.print (_out, "issuer", _level+1);
      if (thisUpdate != null) thisUpdate.print (_out, "thisUpdate", _level+1);
      if (nextUpdate != null) nextUpdate.print (_out, "nextUpdate", _level+1);
      if (revokedCertificates != null) revokedCertificates.print (_out, "revokedCertificates", _level+1);
      if (crlExtensions != null) crlExtensions.print (_out, "crlExtensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
