/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.api.smartcard.apdu.asn.pkcs5;

import com.objsys.asn1j.runtime.*;

public class RC5_CBC_Parameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkcs5Rtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RC5-CBC-Parameters";
   }

   public RC5_CBC_Parameters_version version;
   public Asn1Integer rounds;
   public Asn1Integer blockSizeInBits;
   public Asn1OctetString iv;  // optional

   public RC5_CBC_Parameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RC5_CBC_Parameters (
      RC5_CBC_Parameters_version version_,
      Asn1Integer rounds_,
      Asn1Integer blockSizeInBits_,
      Asn1OctetString iv_
   ) {
      super();
      version = version_;
      rounds = rounds_;
      blockSizeInBits = blockSizeInBits_;
      iv = iv_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RC5_CBC_Parameters (
      RC5_CBC_Parameters_version version_,
      Asn1Integer rounds_,
      Asn1Integer blockSizeInBits_
   ) {
      super();
      version = version_;
      rounds = rounds_;
      blockSizeInBits = blockSizeInBits_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RC5_CBC_Parameters (long version_,
      long rounds_,
      long blockSizeInBits_,
      byte[] iv_
   ) {
      super();
      version = new RC5_CBC_Parameters_version (version_);
      rounds = new Asn1Integer (rounds_);
      blockSizeInBits = new Asn1Integer (blockSizeInBits_);
      iv = new Asn1OctetString (iv_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RC5_CBC_Parameters (
      long version_,
      long rounds_,
      long blockSizeInBits_
   ) {
      super();
      version = new RC5_CBC_Parameters_version (version_);
      rounds = new Asn1Integer (rounds_);
      blockSizeInBits = new Asn1Integer (blockSizeInBits_);
   }

   public void init () {
      version = null;
      rounds = null;
      blockSizeInBits = null;
      iv = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return version;
         case 1: return rounds;
         case 2: return blockSizeInBits;
         case 3: return iv;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "version";
         case 1: return "rounds";
         case 2: return "blockSizeInBits";
         case 3: return "iv";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new RC5_CBC_Parameters_version();
         version.decode (buffer, true, elemLen.value);
         if (!(version.value == 16)) {
            throw new Asn1ConsVioException ("version.value", version.value);
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode rounds

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         rounds = new Asn1Integer();
         rounds.decode (buffer, true, elemLen.value);
         if (!((rounds.value >= 8 && rounds.value <= 127))) {
            throw new Asn1ConsVioException ("rounds.value", rounds.value);
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "rounds");

      // decode blockSizeInBits

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         blockSizeInBits = new Asn1Integer();
         blockSizeInBits.decode (buffer, true, elemLen.value);
         if (!((blockSizeInBits.value == 64 || blockSizeInBits.value == 128))) {
            throw new Asn1ConsVioException ("blockSizeInBits.value", blockSizeInBits.value);
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "blockSizeInBits");

      // decode iv

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         iv = new Asn1OctetString();
         iv.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode iv

      if (iv != null) {
         len = iv.encode (buffer, true);
         _aal += len;
      }

      // encode blockSizeInBits

      if (blockSizeInBits != null) {
         if (!((blockSizeInBits.value == 64 || blockSizeInBits.value == 128))) {
            throw new Asn1ConsVioException ("blockSizeInBits.value", blockSizeInBits.value);
         }

         len = blockSizeInBits.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("blockSizeInBits");

      // encode rounds

      if (rounds != null) {
         if (!((rounds.value >= 8 && rounds.value <= 127))) {
            throw new Asn1ConsVioException ("rounds.value", rounds.value);
         }

         len = rounds.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("rounds");

      // encode version

      if (version != null) {
         if (!(version.value == 16)) {
            throw new Asn1ConsVioException ("version.value", version.value);
         }

         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (rounds != null) rounds.print (_out, "rounds", _level+1);
      if (blockSizeInBits != null) blockSizeInBits.print (_out, "blockSizeInBits", _level+1);
      if (iv != null) iv.print (_out, "iv", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
