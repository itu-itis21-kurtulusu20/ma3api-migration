/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;

public class ResponseBytes extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ocspRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ResponseBytes";
   }

   public Asn1ObjectIdentifier responseType;
   public Asn1OctetString response;

   public ResponseBytes () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ResponseBytes (
      Asn1ObjectIdentifier responseType_,
      Asn1OctetString response_
   ) {
      super();
      responseType = responseType_;
      response = response_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ResponseBytes (int[] responseType_,
      byte[] response_
   ) {
      super();
      responseType = new Asn1ObjectIdentifier (responseType_);
      response = new Asn1OctetString (response_);
   }

   public void init () {
      responseType = null;
      response = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return responseType;
         case 1: return response;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "responseType";
         case 1: return "response";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode responseType

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         responseType = new Asn1ObjectIdentifier();
         responseType.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "responseType");

      // decode response

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         response = new Asn1OctetString();
         response.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "response");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode response

      if (response != null) {
         len = response.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("response");

      // encode responseType

      if (responseType != null) {
         len = responseType.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("responseType");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (responseType != null) responseType.print (_out, "responseType", _level+1);
      if (response != null) response.print (_out, "response", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
