/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class ExtendedCertificate extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ExtendedCertificate";
   }

   public ExtendedCertificateInfo extendedCertificateInfo;
   public AlgorithmIdentifier signatureAlgorithm;
   public Asn1BitString signature;

   public ExtendedCertificate () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ExtendedCertificate (
      ExtendedCertificateInfo extendedCertificateInfo_,
      AlgorithmIdentifier signatureAlgorithm_,
      Asn1BitString signature_
   ) {
      super();
      extendedCertificateInfo = extendedCertificateInfo_;
      signatureAlgorithm = signatureAlgorithm_;
      signature = signature_;
   }

   public void init () {
      extendedCertificateInfo = null;
      signatureAlgorithm = null;
      signature = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return extendedCertificateInfo;
         case 1: return signatureAlgorithm;
         case 2: return signature;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "extendedCertificateInfo";
         case 1: return "signatureAlgorithm";
         case 2: return "signature";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode extendedCertificateInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         extendedCertificateInfo = new ExtendedCertificateInfo();
         extendedCertificateInfo.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "extendedCertificateInfo");

      // decode signatureAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signatureAlgorithm = new AlgorithmIdentifier();
         signatureAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signatureAlgorithm");

      // decode signature

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         signature = new Asn1BitString();
         signature.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3))  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signature

      if (signature != null) {
         len = signature.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signature");

      // encode signatureAlgorithm

      if (signatureAlgorithm != null) {
         len = signatureAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signatureAlgorithm");

      // encode extendedCertificateInfo

      if (extendedCertificateInfo != null) {
         len = extendedCertificateInfo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("extendedCertificateInfo");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (extendedCertificateInfo != null) extendedCertificateInfo.print (_out, "extendedCertificateInfo", _level+1);
      if (signatureAlgorithm != null) signatureAlgorithm.print (_out, "signatureAlgorithm", _level+1);
      if (signature != null) signature.print (_out, "signature", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
