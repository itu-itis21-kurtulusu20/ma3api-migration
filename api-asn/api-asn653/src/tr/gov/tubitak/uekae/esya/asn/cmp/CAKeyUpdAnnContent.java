/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;

public class CAKeyUpdAnnContent extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmpRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CAKeyUpdAnnContent";
   }

   public CMPCertificate oldWithNew;
   public CMPCertificate newWithOld;
   public CMPCertificate newWithNew;

   public CAKeyUpdAnnContent () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CAKeyUpdAnnContent (
      CMPCertificate oldWithNew_,
      CMPCertificate newWithOld_,
      CMPCertificate newWithNew_
   ) {
      super();
      oldWithNew = oldWithNew_;
      newWithOld = newWithOld_;
      newWithNew = newWithNew_;
   }

   public void init () {
      oldWithNew = null;
      newWithOld = null;
      newWithNew = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return oldWithNew;
         case 1: return newWithOld;
         case 2: return newWithNew;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "oldWithNew";
         case 1: return "newWithOld";
         case 2: return "newWithNew";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode oldWithNew

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 33) ||
             tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 34))
         {
            oldWithNew = new CMPCertificate();
            oldWithNew.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "oldWithNew");
      }
      else throw new Asn1MissingRequiredException (buffer, "oldWithNew");

      // decode newWithOld

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 33) ||
             tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 34))
         {
            newWithOld = new CMPCertificate();
            newWithOld.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "newWithOld");
      }
      else throw new Asn1MissingRequiredException (buffer, "newWithOld");

      // decode newWithNew

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 33) ||
             tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 34))
         {
            newWithNew = new CMPCertificate();
            newWithNew.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "newWithNew");
      }
      else throw new Asn1MissingRequiredException (buffer, "newWithNew");

      if (!_context.expired()) {

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode newWithNew

      if (newWithNew != null) {
         len = newWithNew.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("newWithNew");

      // encode newWithOld

      if (newWithOld != null) {
         len = newWithOld.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("newWithOld");

      // encode oldWithNew

      if (oldWithNew != null) {
         len = oldWithNew.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("oldWithNew");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (oldWithNew != null) oldWithNew.print (_out, "oldWithNew", _level+1);
      if (newWithOld != null) newWithOld.print (_out, "newWithOld", _level+1);
      if (newWithNew != null) newWithNew.print (_out, "newWithNew", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
