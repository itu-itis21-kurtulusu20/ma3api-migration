/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.DirectoryString;

public class EDIPartyName extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EDIPartyName";
   }

   public DirectoryString nameAssigner;  // optional
   public DirectoryString partyName;

   public EDIPartyName () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EDIPartyName (
      DirectoryString nameAssigner_,
      DirectoryString partyName_
   ) {
      super();
      nameAssigner = nameAssigner_;
      partyName = partyName_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EDIPartyName (
      DirectoryString partyName_
   ) {
      super();
      partyName = partyName_;
   }

   public void init () {
      nameAssigner = null;
      partyName = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof EDIPartyName) ) return false;

      EDIPartyName rhs = (EDIPartyName) obj;

      if (nameAssigner == null) {
         if (rhs.nameAssigner != null) return false;
      }
      else {
         if (!nameAssigner.equals(rhs.nameAssigner)) {
            return false;
         }
      }

      if (partyName == null) {
         if (rhs.partyName != null) return false;
      }
      else {
         if (!partyName.equals(rhs.partyName)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (nameAssigner != null) __code = 31*__code + nameAssigner.hashCode();
      if (partyName != null) __code = 31*__code + partyName.hashCode();

      return __code;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return nameAssigner;
         case 1: return partyName;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "nameAssigner";
         case 1: return "partyName";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode nameAssigner

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         nameAssigner = new DirectoryString();
         nameAssigner.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode partyName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         partyName = new DirectoryString();
         partyName.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "partyName");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode partyName

      if (partyName != null) {
         len = partyName.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("partyName");

      // encode nameAssigner

      if (nameAssigner != null) {
         len = nameAssigner.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (nameAssigner != null) nameAssigner.print (_out, "nameAssigner", _level+1);
      if (partyName != null) partyName.print (_out, "partyName", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
