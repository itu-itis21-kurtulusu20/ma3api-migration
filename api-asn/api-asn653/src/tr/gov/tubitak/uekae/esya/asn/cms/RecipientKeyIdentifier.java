/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class RecipientKeyIdentifier extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RecipientKeyIdentifier";
   }

   public Asn1OctetString subjectKeyIdentifier;
   public Asn1GeneralizedTime date;  // optional
   public OtherKeyAttribute other;  // optional

   public RecipientKeyIdentifier () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RecipientKeyIdentifier (
      Asn1OctetString subjectKeyIdentifier_,
      Asn1GeneralizedTime date_,
      OtherKeyAttribute other_
   ) {
      super();
      subjectKeyIdentifier = subjectKeyIdentifier_;
      date = date_;
      other = other_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RecipientKeyIdentifier (
      Asn1OctetString subjectKeyIdentifier_
   ) {
      super();
      subjectKeyIdentifier = subjectKeyIdentifier_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RecipientKeyIdentifier (byte[] subjectKeyIdentifier_,
      String date_,
      OtherKeyAttribute other_
   ) {
      super();
      subjectKeyIdentifier = new Asn1OctetString (subjectKeyIdentifier_);
      date = new Asn1GeneralizedTime (date_);
      other = other_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RecipientKeyIdentifier (
      byte[] subjectKeyIdentifier_
   ) {
      super();
      subjectKeyIdentifier = new Asn1OctetString (subjectKeyIdentifier_);
   }

   public void init () {
      subjectKeyIdentifier = null;
      date = null;
      other = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return subjectKeyIdentifier;
         case 1: return date;
         case 2: return other;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "subjectKeyIdentifier";
         case 1: return "date";
         case 2: return "other";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode subjectKeyIdentifier

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         subjectKeyIdentifier = new Asn1OctetString();
         subjectKeyIdentifier.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "subjectKeyIdentifier");

      // decode date

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         date = new Asn1GeneralizedTime (false);
         date.decode (buffer, true, elemLen.value);
      }

      // decode other

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         other = new OtherKeyAttribute();
         other.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode other

      if (other != null) {
         len = other.encode (buffer, true);
         _aal += len;
      }

      // encode date

      if (date != null) {
         len = date.encode (buffer, true);
         _aal += len;
      }

      // encode subjectKeyIdentifier

      if (subjectKeyIdentifier != null) {
         len = subjectKeyIdentifier.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("subjectKeyIdentifier");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (subjectKeyIdentifier != null) subjectKeyIdentifier.print (_out, "subjectKeyIdentifier", _level+1);
      if (date != null) date.print (_out, "date", _level+1);
      if (other != null) other.print (_out, "other", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
