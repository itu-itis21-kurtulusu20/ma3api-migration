/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.pkcs10;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Name;
import tr.gov.tubitak.uekae.esya.asn.x509.SubjectPublicKeyInfo;

public class CertificationRequestInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkcs10Rtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CertificationRequestInfo";
   }

   public Asn1Integer version;
   public Name subject;
   public SubjectPublicKeyInfo subjectPKInfo;
   public Attributes attributes;

   public CertificationRequestInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CertificationRequestInfo (
      Asn1Integer version_,
      Name subject_,
      SubjectPublicKeyInfo subjectPKInfo_,
      Attributes attributes_
   ) {
      super();
      version = version_;
      subject = subject_;
      subjectPKInfo = subjectPKInfo_;
      attributes = attributes_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CertificationRequestInfo (long version_,
      Name subject_,
      SubjectPublicKeyInfo subjectPKInfo_,
      Attributes attributes_
   ) {
      super();
      version = new Asn1Integer (version_);
      subject = subject_;
      subjectPKInfo = subjectPKInfo_;
      attributes = attributes_;
   }

   public void init () {
      version = null;
      subject = null;
      subjectPKInfo = null;
      attributes = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return version;
         case 1: return subject;
         case 2: return subjectPKInfo;
         case 3: return attributes;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "version";
         case 1: return "subject";
         case 2: return "subjectPKInfo";
         case 3: return "attributes";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new Asn1Integer();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode subject

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         subject = new Name();
         subject.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "subject");

      // decode subjectPKInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         subjectPKInfo = new SubjectPublicKeyInfo();
         subjectPKInfo.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "subjectPKInfo");

      // decode attributes

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         attributes = new Attributes();
         attributes.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "attributes");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode attributes

      if (attributes != null) {
         len = attributes.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("attributes");

      // encode subjectPKInfo

      if (subjectPKInfo != null) {
         len = subjectPKInfo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("subjectPKInfo");

      // encode subject

      if (subject != null) {
         len = subject.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("subject");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (subject != null) subject.print (_out, "subject", _level+1);
      if (subjectPKInfo != null) subjectPKInfo.print (_out, "subjectPKInfo", _level+1);
      if (attributes != null) attributes.print (_out, "attributes", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
