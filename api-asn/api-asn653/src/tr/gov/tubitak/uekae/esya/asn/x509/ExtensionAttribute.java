/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class ExtensionAttribute extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ExtensionAttribute";
   }

   public Asn1Integer extension_attribute_type;
   public Asn1OpenType extension_attribute_value;

   public ExtensionAttribute () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ExtensionAttribute (
      Asn1Integer extension_attribute_type_,
      Asn1OpenType extension_attribute_value_
   ) {
      super();
      extension_attribute_type = extension_attribute_type_;
      extension_attribute_value = extension_attribute_value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ExtensionAttribute (long extension_attribute_type_,
      Asn1OpenType extension_attribute_value_
   ) {
      super();
      extension_attribute_type = new Asn1Integer (extension_attribute_type_);
      extension_attribute_value = extension_attribute_value_;
   }

   public void init () {
      extension_attribute_type = null;
      extension_attribute_value = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ExtensionAttribute) ) return false;

      ExtensionAttribute rhs = (ExtensionAttribute) obj;

      if (extension_attribute_type == null) {
         if (rhs.extension_attribute_type != null) return false;
      }
      else {
         if (!extension_attribute_type.equals(rhs.extension_attribute_type)) {
            return false;
         }
      }

      if (extension_attribute_value == null) {
         if (rhs.extension_attribute_value != null) return false;
      }
      else {
         if (!extension_attribute_value.equals(rhs.extension_attribute_value)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (extension_attribute_type != null) __code = 31*__code + extension_attribute_type.hashCode();
      if (extension_attribute_value != null) __code = 31*__code + extension_attribute_value.hashCode();

      return __code;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return extension_attribute_type;
         case 1: return extension_attribute_value;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "extension-attribute-type";
         case 1: return "extension-attribute-value";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode extension_attribute_type

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         extension_attribute_type = new Asn1Integer();
         extension_attribute_type.decode (buffer, false, elemLen.value);
         if (!((extension_attribute_type.value >= 0 && extension_attribute_type.value
             <= 256))) {
            throw new Asn1ConsVioException ("extension_attribute_type.value", extension_attribute_type.value);
         }

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "extension_attribute_type");

      // decode extension_attribute_value

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         extension_attribute_value = new Asn1OpenType();
         extension_attribute_value.decode (buffer, true, 0);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extension_attribute_value

      if (extension_attribute_value != null) {
         len = extension_attribute_value.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("extension_attribute_value");

      // encode extension_attribute_type

      if (extension_attribute_type != null) {
         if (!((extension_attribute_type.value >= 0 && extension_attribute_type.value
             <= 256))) {
            throw new Asn1ConsVioException ("extension_attribute_type.value", extension_attribute_type.value);
         }

         len = extension_attribute_type.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("extension_attribute_type");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (extension_attribute_type != null) extension_attribute_type.print (_out, "extension_attribute_type", _level+1);
      if (extension_attribute_value != null) extension_attribute_value.print (_out, "extension_attribute_value", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
