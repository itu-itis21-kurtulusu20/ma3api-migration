/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class PolicyInformation extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PolicyInformation";
   }

   public Asn1ObjectIdentifier policyIdentifier;
   public PolicyInformation_policyQualifiers policyQualifiers;  // optional

   public PolicyInformation () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PolicyInformation (
      Asn1ObjectIdentifier policyIdentifier_,
      PolicyInformation_policyQualifiers policyQualifiers_
   ) {
      super();
      policyIdentifier = policyIdentifier_;
      policyQualifiers = policyQualifiers_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PolicyInformation (
      Asn1ObjectIdentifier policyIdentifier_
   ) {
      super();
      policyIdentifier = policyIdentifier_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PolicyInformation (int[] policyIdentifier_,
      PolicyInformation_policyQualifiers policyQualifiers_
   ) {
      super();
      policyIdentifier = new Asn1ObjectIdentifier (policyIdentifier_);
      policyQualifiers = policyQualifiers_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PolicyInformation (
      int[] policyIdentifier_
   ) {
      super();
      policyIdentifier = new Asn1ObjectIdentifier (policyIdentifier_);
   }

   public void init () {
      policyIdentifier = null;
      policyQualifiers = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PolicyInformation) ) return false;

      PolicyInformation rhs = (PolicyInformation) obj;

      if (policyIdentifier == null) {
         if (rhs.policyIdentifier != null) return false;
      }
      else {
         if (!policyIdentifier.equals(rhs.policyIdentifier)) {
            return false;
         }
      }

      if (policyQualifiers == null) {
         if (rhs.policyQualifiers != null) return false;
      }
      else {
         if (!policyQualifiers.equals(rhs.policyQualifiers)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (policyIdentifier != null) __code = 31*__code + policyIdentifier.hashCode();
      if (policyQualifiers != null) __code = 31*__code + policyQualifiers.hashCode();

      return __code;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return policyIdentifier;
         case 1: return policyQualifiers;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "policyIdentifier";
         case 1: return "policyQualifiers";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode policyIdentifier

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         policyIdentifier = new Asn1ObjectIdentifier();
         policyIdentifier.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "policyIdentifier");

      // decode policyQualifiers

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         policyQualifiers = new PolicyInformation_policyQualifiers();
         policyQualifiers.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode policyQualifiers

      if (policyQualifiers != null) {
         len = policyQualifiers.encode (buffer, true);
         _aal += len;
      }

      // encode policyIdentifier

      if (policyIdentifier != null) {
         len = policyIdentifier.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("policyIdentifier");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (policyIdentifier != null) policyIdentifier.print (_out, "policyIdentifier", _level+1);
      if (policyQualifiers != null) policyQualifiers.print (_out, "policyQualifiers", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
