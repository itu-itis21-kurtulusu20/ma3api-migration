/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class PKIHeader extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmpRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PKIHeader";
   }

   public PKIHeader_pvno pvno;
   public GeneralName sender;
   public GeneralName recipient;
   public Asn1GeneralizedTime messageTime;  // optional
   public AlgorithmIdentifier protectionAlg;  // optional
   public Asn1OctetString senderKID;  // optional
   public Asn1OctetString recipKID;  // optional
   public Asn1OctetString transactionID;  // optional
   public Asn1OctetString senderNonce;  // optional
   public Asn1OctetString recipNonce;  // optional
   public PKIFreeText freeText;  // optional
   public PKIHeader_generalInfo generalInfo;  // optional

   public PKIHeader () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PKIHeader (
      PKIHeader_pvno pvno_,
      GeneralName sender_,
      GeneralName recipient_,
      Asn1GeneralizedTime messageTime_,
      AlgorithmIdentifier protectionAlg_,
      Asn1OctetString senderKID_,
      Asn1OctetString recipKID_,
      Asn1OctetString transactionID_,
      Asn1OctetString senderNonce_,
      Asn1OctetString recipNonce_,
      PKIFreeText freeText_,
      PKIHeader_generalInfo generalInfo_
   ) {
      super();
      pvno = pvno_;
      sender = sender_;
      recipient = recipient_;
      messageTime = messageTime_;
      protectionAlg = protectionAlg_;
      senderKID = senderKID_;
      recipKID = recipKID_;
      transactionID = transactionID_;
      senderNonce = senderNonce_;
      recipNonce = recipNonce_;
      freeText = freeText_;
      generalInfo = generalInfo_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PKIHeader (
      PKIHeader_pvno pvno_,
      GeneralName sender_,
      GeneralName recipient_
   ) {
      super();
      pvno = pvno_;
      sender = sender_;
      recipient = recipient_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PKIHeader (long pvno_,
      GeneralName sender_,
      GeneralName recipient_,
      String messageTime_,
      AlgorithmIdentifier protectionAlg_,
      byte[] senderKID_,
      byte[] recipKID_,
      byte[] transactionID_,
      byte[] senderNonce_,
      byte[] recipNonce_,
      PKIFreeText freeText_,
      PKIHeader_generalInfo generalInfo_
   ) {
      super();
      pvno = new PKIHeader_pvno (pvno_);
      sender = sender_;
      recipient = recipient_;
      messageTime = new Asn1GeneralizedTime (messageTime_);
      protectionAlg = protectionAlg_;
      senderKID = new Asn1OctetString (senderKID_);
      recipKID = new Asn1OctetString (recipKID_);
      transactionID = new Asn1OctetString (transactionID_);
      senderNonce = new Asn1OctetString (senderNonce_);
      recipNonce = new Asn1OctetString (recipNonce_);
      freeText = freeText_;
      generalInfo = generalInfo_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PKIHeader (
      long pvno_,
      GeneralName sender_,
      GeneralName recipient_
   ) {
      super();
      pvno = new PKIHeader_pvno (pvno_);
      sender = sender_;
      recipient = recipient_;
   }

   public void init () {
      pvno = null;
      sender = null;
      recipient = null;
      messageTime = null;
      protectionAlg = null;
      senderKID = null;
      recipKID = null;
      transactionID = null;
      senderNonce = null;
      recipNonce = null;
      freeText = null;
      generalInfo = null;
   }

   public int getElementCount() { return 12; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pvno;
         case 1: return sender;
         case 2: return recipient;
         case 3: return messageTime;
         case 4: return protectionAlg;
         case 5: return senderKID;
         case 6: return recipKID;
         case 7: return transactionID;
         case 8: return senderNonce;
         case 9: return recipNonce;
         case 10: return freeText;
         case 11: return generalInfo;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pvno";
         case 1: return "sender";
         case 2: return "recipient";
         case 3: return "messageTime";
         case 4: return "protectionAlg";
         case 5: return "senderKID";
         case 6: return "recipKID";
         case 7: return "transactionID";
         case 8: return "senderNonce";
         case 9: return "recipNonce";
         case 10: return "freeText";
         case 11: return "generalInfo";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode pvno

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         pvno = new PKIHeader_pvno();
         pvno.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "pvno");

      // decode sender

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
         {
            sender = new GeneralName();
            sender.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "sender");
      }
      else throw new Asn1MissingRequiredException (buffer, "sender");

      // decode recipient

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
         {
            recipient = new GeneralName();
            recipient.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "recipient");
      }
      else throw new Asn1MissingRequiredException (buffer, "recipient");

      // decode messageTime

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         messageTime = new Asn1GeneralizedTime (true);
         messageTime.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode protectionAlg

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         protectionAlg = new AlgorithmIdentifier();
         protectionAlg.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode senderKID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         senderKID = new Asn1OctetString();
         senderKID.decode (buffer, true, elemLen.value);
      }

      // decode recipKID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         recipKID = new Asn1OctetString();
         recipKID.decode (buffer, true, elemLen.value);
      }

      // decode transactionID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         int offset = buffer.getByteCount();
         transactionID = new Asn1OctetString();
         transactionID.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode senderNonce

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 5, elemLen, true)) {
         int offset = buffer.getByteCount();
         senderNonce = new Asn1OctetString();
         senderNonce.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode recipNonce

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 6, elemLen, true)) {
         int offset = buffer.getByteCount();
         recipNonce = new Asn1OctetString();
         recipNonce.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode freeText

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 7, elemLen, true)) {
         int offset = buffer.getByteCount();
         freeText = new PKIFreeText();
         freeText.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode generalInfo

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 8, elemLen, false)) {
         generalInfo = new PKIHeader_generalInfo();
         generalInfo.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 7) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 8))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode generalInfo

      if (generalInfo != null) {
         len = generalInfo.encode (buffer, true);
         _aal += len;
      }

      // encode freeText

      if (freeText != null) {
         len = freeText.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 7, len);
         _aal += len;
      }

      // encode recipNonce

      if (recipNonce != null) {
         len = recipNonce.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
         _aal += len;
      }

      // encode senderNonce

      if (senderNonce != null) {
         len = senderNonce.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
         _aal += len;
      }

      // encode transactionID

      if (transactionID != null) {
         len = transactionID.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;
      }

      // encode recipKID

      if (recipKID != null) {
         len = recipKID.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }

      // encode senderKID

      if (senderKID != null) {
         len = senderKID.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode protectionAlg

      if (protectionAlg != null) {
         len = protectionAlg.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode messageTime

      if (messageTime != null) {
         len = messageTime.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode recipient

      if (recipient != null) {
         len = recipient.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("recipient");

      // encode sender

      if (sender != null) {
         len = sender.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("sender");

      // encode pvno

      if (pvno != null) {
         len = pvno.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("pvno");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (pvno != null) pvno.print (_out, "pvno", _level+1);
      if (sender != null) sender.print (_out, "sender", _level+1);
      if (recipient != null) recipient.print (_out, "recipient", _level+1);
      if (messageTime != null) messageTime.print (_out, "messageTime", _level+1);
      if (protectionAlg != null) protectionAlg.print (_out, "protectionAlg", _level+1);
      if (senderKID != null) senderKID.print (_out, "senderKID", _level+1);
      if (recipKID != null) recipKID.print (_out, "recipKID", _level+1);
      if (transactionID != null) transactionID.print (_out, "transactionID", _level+1);
      if (senderNonce != null) senderNonce.print (_out, "senderNonce", _level+1);
      if (recipNonce != null) recipNonce.print (_out, "recipNonce", _level+1);
      if (freeText != null) freeText.print (_out, "freeText", _level+1);
      if (generalInfo != null) generalInfo.print (_out, "generalInfo", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
