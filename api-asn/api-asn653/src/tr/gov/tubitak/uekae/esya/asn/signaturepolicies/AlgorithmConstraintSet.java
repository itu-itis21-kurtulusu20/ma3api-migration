/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class AlgorithmConstraintSet extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AlgorithmConstraintSet";
   }

   public AlgorithmConstraints signerAlgorithmConstraints;  // optional
   public AlgorithmConstraints eeCertAlgorithmConstraints;  // optional
   public AlgorithmConstraints caCertAlgorithmConstraints;  // optional
   public AlgorithmConstraints aaCertAlgorithmConstraints;  // optional
   public AlgorithmConstraints tsaCertAlgorithmConstraints;  // optional

   public AlgorithmConstraintSet () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlgorithmConstraintSet (
      AlgorithmConstraints signerAlgorithmConstraints_,
      AlgorithmConstraints eeCertAlgorithmConstraints_,
      AlgorithmConstraints caCertAlgorithmConstraints_,
      AlgorithmConstraints aaCertAlgorithmConstraints_,
      AlgorithmConstraints tsaCertAlgorithmConstraints_
   ) {
      super();
      signerAlgorithmConstraints = signerAlgorithmConstraints_;
      eeCertAlgorithmConstraints = eeCertAlgorithmConstraints_;
      caCertAlgorithmConstraints = caCertAlgorithmConstraints_;
      aaCertAlgorithmConstraints = aaCertAlgorithmConstraints_;
      tsaCertAlgorithmConstraints = tsaCertAlgorithmConstraints_;
   }

   public void init () {
      signerAlgorithmConstraints = null;
      eeCertAlgorithmConstraints = null;
      caCertAlgorithmConstraints = null;
      aaCertAlgorithmConstraints = null;
      tsaCertAlgorithmConstraints = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return signerAlgorithmConstraints;
         case 1: return eeCertAlgorithmConstraints;
         case 2: return caCertAlgorithmConstraints;
         case 3: return aaCertAlgorithmConstraints;
         case 4: return tsaCertAlgorithmConstraints;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "signerAlgorithmConstraints";
         case 1: return "eeCertAlgorithmConstraints";
         case 2: return "caCertAlgorithmConstraints";
         case 3: return "aaCertAlgorithmConstraints";
         case 4: return "tsaCertAlgorithmConstraints";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode signerAlgorithmConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         signerAlgorithmConstraints = new AlgorithmConstraints();
         signerAlgorithmConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode eeCertAlgorithmConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         eeCertAlgorithmConstraints = new AlgorithmConstraints();
         eeCertAlgorithmConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode caCertAlgorithmConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         caCertAlgorithmConstraints = new AlgorithmConstraints();
         caCertAlgorithmConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode aaCertAlgorithmConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         aaCertAlgorithmConstraints = new AlgorithmConstraints();
         aaCertAlgorithmConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode tsaCertAlgorithmConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         int offset = buffer.getByteCount();
         tsaCertAlgorithmConstraints = new AlgorithmConstraints();
         tsaCertAlgorithmConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode tsaCertAlgorithmConstraints

      if (tsaCertAlgorithmConstraints != null) {
         len = tsaCertAlgorithmConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;
      }

      // encode aaCertAlgorithmConstraints

      if (aaCertAlgorithmConstraints != null) {
         len = aaCertAlgorithmConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }

      // encode caCertAlgorithmConstraints

      if (caCertAlgorithmConstraints != null) {
         len = caCertAlgorithmConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode eeCertAlgorithmConstraints

      if (eeCertAlgorithmConstraints != null) {
         len = eeCertAlgorithmConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode signerAlgorithmConstraints

      if (signerAlgorithmConstraints != null) {
         len = signerAlgorithmConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (signerAlgorithmConstraints != null) signerAlgorithmConstraints.print (_out, "signerAlgorithmConstraints", _level+1);
      if (eeCertAlgorithmConstraints != null) eeCertAlgorithmConstraints.print (_out, "eeCertAlgorithmConstraints", _level+1);
      if (caCertAlgorithmConstraints != null) caCertAlgorithmConstraints.print (_out, "caCertAlgorithmConstraints", _level+1);
      if (aaCertAlgorithmConstraints != null) aaCertAlgorithmConstraints.print (_out, "aaCertAlgorithmConstraints", _level+1);
      if (tsaCertAlgorithmConstraints != null) tsaCertAlgorithmConstraints.print (_out, "tsaCertAlgorithmConstraints", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
