/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.attrcert;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;

public class SvceAuthInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_attrcertRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SvceAuthInfo";
   }

   public GeneralName service;
   public GeneralName ident;
   public Asn1OctetString authInfo;  // optional

   public SvceAuthInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SvceAuthInfo (
      GeneralName service_,
      GeneralName ident_,
      Asn1OctetString authInfo_
   ) {
      super();
      service = service_;
      ident = ident_;
      authInfo = authInfo_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SvceAuthInfo (
      GeneralName service_,
      GeneralName ident_
   ) {
      super();
      service = service_;
      ident = ident_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SvceAuthInfo (GeneralName service_,
      GeneralName ident_,
      byte[] authInfo_
   ) {
      super();
      service = service_;
      ident = ident_;
      authInfo = new Asn1OctetString (authInfo_);
   }

   public void init () {
      service = null;
      ident = null;
      authInfo = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return service;
         case 1: return ident;
         case 2: return authInfo;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "service";
         case 1: return "ident";
         case 2: return "authInfo";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode service

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
         {
            service = new GeneralName();
            service.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "service");
      }
      else throw new Asn1MissingRequiredException (buffer, "service");

      // decode ident

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
         {
            ident = new GeneralName();
            ident.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "ident");
      }
      else throw new Asn1MissingRequiredException (buffer, "ident");

      // decode authInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         authInfo = new Asn1OctetString();
         authInfo.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode authInfo

      if (authInfo != null) {
         len = authInfo.encode (buffer, true);
         _aal += len;
      }

      // encode ident

      if (ident != null) {
         len = ident.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("ident");

      // encode service

      if (service != null) {
         len = service.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("service");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (service != null) service.print (_out, "service", _level+1);
      if (ident != null) ident.print (_out, "ident", _level+1);
      if (authInfo != null) authInfo.print (_out, "authInfo", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
