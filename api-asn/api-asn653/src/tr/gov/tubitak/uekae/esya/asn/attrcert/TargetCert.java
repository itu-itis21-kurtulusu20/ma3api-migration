/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.attrcert;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;

public class TargetCert extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_attrcertRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TargetCert";
   }

   public IssuerSerial targetCertificate;
   public GeneralName targetName;  // optional
   public ObjectDigestInfo certDigestInfo;  // optional

   public TargetCert () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TargetCert (
      IssuerSerial targetCertificate_,
      GeneralName targetName_,
      ObjectDigestInfo certDigestInfo_
   ) {
      super();
      targetCertificate = targetCertificate_;
      targetName = targetName_;
      certDigestInfo = certDigestInfo_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TargetCert (
      IssuerSerial targetCertificate_
   ) {
      super();
      targetCertificate = targetCertificate_;
   }

   public void init () {
      targetCertificate = null;
      targetName = null;
      certDigestInfo = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return targetCertificate;
         case 1: return targetName;
         case 2: return certDigestInfo;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "targetCertificate";
         case 1: return "targetName";
         case 2: return "certDigestInfo";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode targetCertificate

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         targetCertificate = new IssuerSerial();
         targetCertificate.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "targetCertificate");

      // decode targetName

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
         {
            targetName = new GeneralName();
            targetName.decode (buffer, true, elemLen.value);
         }
      }

      // decode certDigestInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         certDigestInfo = new ObjectDigestInfo();
         certDigestInfo.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode certDigestInfo

      if (certDigestInfo != null) {
         len = certDigestInfo.encode (buffer, true);
         _aal += len;
      }

      // encode targetName

      if (targetName != null) {
         len = targetName.encode (buffer, true);
         _aal += len;
      }

      // encode targetCertificate

      if (targetCertificate != null) {
         len = targetCertificate.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("targetCertificate");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (targetCertificate != null) targetCertificate.print (_out, "targetCertificate", _level+1);
      if (targetName != null) targetName.print (_out, "targetName", _level+1);
      if (certDigestInfo != null) certDigestInfo.print (_out, "certDigestInfo", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
