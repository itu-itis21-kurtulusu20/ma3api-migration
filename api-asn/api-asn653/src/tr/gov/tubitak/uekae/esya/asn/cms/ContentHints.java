/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class ContentHints extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ContentHints";
   }

   public Asn1UTF8String contentDescription;  // optional
   public Asn1ObjectIdentifier contentType;

   public ContentHints () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ContentHints (
      Asn1UTF8String contentDescription_,
      Asn1ObjectIdentifier contentType_
   ) {
      super();
      contentDescription = contentDescription_;
      contentType = contentType_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ContentHints (
      Asn1ObjectIdentifier contentType_
   ) {
      super();
      contentType = contentType_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ContentHints (String contentDescription_,
      int[] contentType_
   ) {
      super();
      contentDescription = new Asn1UTF8String (contentDescription_);
      contentType = new Asn1ObjectIdentifier (contentType_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ContentHints (
      int[] contentType_
   ) {
      super();
      contentType = new Asn1ObjectIdentifier (contentType_);
   }

   public void init () {
      contentDescription = null;
      contentType = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return contentDescription;
         case 1: return contentType;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "contentDescription";
         case 1: return "contentType";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode contentDescription

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 12, elemLen, false)) {
         contentDescription = new Asn1UTF8String();
         contentDescription.decode (buffer, true, elemLen.value);
         if (!(contentDescription.getLength() >= 1)) {
            throw new Asn1ConsVioException ("contentDescription.getLength()", contentDescription.getLength());
         }

      }

      // decode contentType

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         contentType = new Asn1ObjectIdentifier();
         contentType.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "contentType");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode contentType

      if (contentType != null) {
         len = contentType.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("contentType");

      // encode contentDescription

      if (contentDescription != null) {
         if (!(contentDescription.getLength() >= 1)) {
            throw new Asn1ConsVioException ("contentDescription.getLength()", contentDescription.getLength());
         }

         len = contentDescription.encode (buffer, true);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (contentDescription != null) contentDescription.print (_out, "contentDescription", _level+1);
      if (contentType != null) contentType.print (_out, "contentType", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
