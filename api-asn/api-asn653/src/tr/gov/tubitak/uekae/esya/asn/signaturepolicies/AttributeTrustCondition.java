/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class AttributeTrustCondition extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AttributeTrustCondition";
   }

   public Asn1Boolean attributeMandated;
   public HowCertAttribute howCertAttribute = null;
   public CertificateTrustTrees attrCertificateTrustTrees;  // optional
   public CertRevReq attrRevReq;  // optional
   public AttributeConstraints attributeConstraints;  // optional

   public AttributeTrustCondition () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AttributeTrustCondition (
      Asn1Boolean attributeMandated_,
      HowCertAttribute howCertAttribute_,
      CertificateTrustTrees attrCertificateTrustTrees_,
      CertRevReq attrRevReq_,
      AttributeConstraints attributeConstraints_
   ) {
      super();
      attributeMandated = attributeMandated_;
      howCertAttribute = howCertAttribute_;
      attrCertificateTrustTrees = attrCertificateTrustTrees_;
      attrRevReq = attrRevReq_;
      attributeConstraints = attributeConstraints_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AttributeTrustCondition (
      Asn1Boolean attributeMandated_,
      HowCertAttribute howCertAttribute_
   ) {
      super();
      attributeMandated = attributeMandated_;
      howCertAttribute = howCertAttribute_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AttributeTrustCondition (boolean attributeMandated_,
      HowCertAttribute howCertAttribute_,
      CertificateTrustTrees attrCertificateTrustTrees_,
      CertRevReq attrRevReq_,
      AttributeConstraints attributeConstraints_
   ) {
      super();
      attributeMandated = new Asn1Boolean (attributeMandated_);
      howCertAttribute = howCertAttribute_;
      attrCertificateTrustTrees = attrCertificateTrustTrees_;
      attrRevReq = attrRevReq_;
      attributeConstraints = attributeConstraints_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AttributeTrustCondition (
      boolean attributeMandated_,
      HowCertAttribute howCertAttribute_
   ) {
      super();
      attributeMandated = new Asn1Boolean (attributeMandated_);
      howCertAttribute = howCertAttribute_;
   }

   public void init () {
      attributeMandated = null;
      howCertAttribute = null;
      attrCertificateTrustTrees = null;
      attrRevReq = null;
      attributeConstraints = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return attributeMandated;
         case 1: return howCertAttribute;
         case 2: return attrCertificateTrustTrees;
         case 3: return attrRevReq;
         case 4: return attributeConstraints;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "attributeMandated";
         case 1: return "howCertAttribute";
         case 2: return "attrCertificateTrustTrees";
         case 3: return "attrRevReq";
         case 4: return "attributeConstraints";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode attributeMandated

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
         attributeMandated = new Asn1Boolean();
         attributeMandated.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "attributeMandated");

      // decode howCertAttribute

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
         int tval = buffer.decodeEnumValue (HowCertAttribute.TAG, true, elemLen.value);
         howCertAttribute = HowCertAttribute.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer, "howCertAttribute");

      // decode attrCertificateTrustTrees

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         attrCertificateTrustTrees = new CertificateTrustTrees();
         attrCertificateTrustTrees.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode attrRevReq

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         attrRevReq = new CertRevReq();
         attrRevReq.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode attributeConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         attributeConstraints = new AttributeConstraints();
         attributeConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 10) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode attributeConstraints

      if (attributeConstraints != null) {
         len = attributeConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode attrRevReq

      if (attrRevReq != null) {
         len = attrRevReq.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode attrCertificateTrustTrees

      if (attrCertificateTrustTrees != null) {
         len = attrCertificateTrustTrees.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode howCertAttribute

      if (howCertAttribute != null) {
         len = howCertAttribute.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("howCertAttribute");

      // encode attributeMandated

      if (attributeMandated != null) {
         len = attributeMandated.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("attributeMandated");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (attributeMandated != null) attributeMandated.print (_out, "attributeMandated", _level+1);
      if (howCertAttribute != null) howCertAttribute.print (_out, "howCertAttribute", _level+1);
      if (attrCertificateTrustTrees != null) attrCertificateTrustTrees.print (_out, "attrCertificateTrustTrees", _level+1);
      if (attrRevReq != null) attrRevReq.print (_out, "attrRevReq", _level+1);
      if (attributeConstraints != null) attributeConstraints.print (_out, "attributeConstraints", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
