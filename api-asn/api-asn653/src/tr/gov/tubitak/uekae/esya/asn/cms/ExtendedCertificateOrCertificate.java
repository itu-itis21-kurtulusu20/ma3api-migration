/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Certificate;

public class ExtendedCertificateOrCertificate extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "ExtendedCertificateOrCertificate";
   }

   // Choice element identifier constants
   public final static byte _CERTIFICATE = 1;
   public final static byte _EXTENDEDCERTIFICATE = 2;

   public ExtendedCertificateOrCertificate () {
      super();
   }

   public ExtendedCertificateOrCertificate (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _CERTIFICATE: return "certificate";
      case _EXTENDEDCERTIFICATE: return "extendedCertificate";
      default: return "UNDEFINED";
      }
   }

   public void set_certificate (Certificate value) {
      setElement (_CERTIFICATE, value);
   }

   public void set_extendedCertificate (ExtendedCertificate value) {
      setElement (_EXTENDEDCERTIFICATE, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
      {
         buffer.reset();
         Certificate certificate;
         certificate = new Certificate();
         certificate.decode (buffer, true, len);
         setElement (_CERTIFICATE, certificate);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
      {
         ExtendedCertificate extendedCertificate;
         extendedCertificate = new ExtendedCertificate();
         extendedCertificate.decode (buffer, false, len);
         setElement (_EXTENDEDCERTIFICATE, extendedCertificate);
         if (len == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode certificate
      case _CERTIFICATE:
         Certificate certificate = (Certificate) getElement();
         len = certificate.encode (buffer, true);
         _aal += len;
         break;

      // encode extendedCertificate
      case _EXTENDEDCERTIFICATE:
         ExtendedCertificate extendedCertificate = (ExtendedCertificate) getElement();
         len = extendedCertificate.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
