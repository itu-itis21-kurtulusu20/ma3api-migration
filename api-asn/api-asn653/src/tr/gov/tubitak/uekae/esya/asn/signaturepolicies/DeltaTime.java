/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class DeltaTime extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "DeltaTime";
   }

   public Asn1Integer deltaSeconds;
   public Asn1Integer deltaMinutes;
   public Asn1Integer deltaHours;
   public Asn1Integer deltaDays;

   public DeltaTime () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DeltaTime (
      Asn1Integer deltaSeconds_,
      Asn1Integer deltaMinutes_,
      Asn1Integer deltaHours_,
      Asn1Integer deltaDays_
   ) {
      super();
      deltaSeconds = deltaSeconds_;
      deltaMinutes = deltaMinutes_;
      deltaHours = deltaHours_;
      deltaDays = deltaDays_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DeltaTime (long deltaSeconds_,
      long deltaMinutes_,
      long deltaHours_,
      long deltaDays_
   ) {
      super();
      deltaSeconds = new Asn1Integer (deltaSeconds_);
      deltaMinutes = new Asn1Integer (deltaMinutes_);
      deltaHours = new Asn1Integer (deltaHours_);
      deltaDays = new Asn1Integer (deltaDays_);
   }

   public void init () {
      deltaSeconds = null;
      deltaMinutes = null;
      deltaHours = null;
      deltaDays = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return deltaSeconds;
         case 1: return deltaMinutes;
         case 2: return deltaHours;
         case 3: return deltaDays;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "deltaSeconds";
         case 1: return "deltaMinutes";
         case 2: return "deltaHours";
         case 3: return "deltaDays";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode deltaSeconds

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         deltaSeconds = new Asn1Integer();
         deltaSeconds.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "deltaSeconds");

      // decode deltaMinutes

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         deltaMinutes = new Asn1Integer();
         deltaMinutes.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "deltaMinutes");

      // decode deltaHours

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         deltaHours = new Asn1Integer();
         deltaHours.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "deltaHours");

      // decode deltaDays

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         deltaDays = new Asn1Integer();
         deltaDays.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "deltaDays");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode deltaDays

      if (deltaDays != null) {
         len = deltaDays.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("deltaDays");

      // encode deltaHours

      if (deltaHours != null) {
         len = deltaHours.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("deltaHours");

      // encode deltaMinutes

      if (deltaMinutes != null) {
         len = deltaMinutes.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("deltaMinutes");

      // encode deltaSeconds

      if (deltaSeconds != null) {
         len = deltaSeconds.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("deltaSeconds");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (deltaSeconds != null) deltaSeconds.print (_out, "deltaSeconds", _level+1);
      if (deltaMinutes != null) deltaMinutes.print (_out, "deltaMinutes", _level+1);
      if (deltaHours != null) deltaHours.print (_out, "deltaHours", _level+1);
      if (deltaDays != null) deltaDays.print (_out, "deltaDays", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
