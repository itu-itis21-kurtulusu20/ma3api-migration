/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;

public class CertStatus extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ocspRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CertStatus";
   }

   // Choice element identifier constants
   public final static byte _GOOD = 1;
   public final static byte _REVOKED = 2;
   public final static byte _UNKNOWN = 3;

   public CertStatus () {
      super();
   }

   public CertStatus (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _GOOD: return "good";
      case _REVOKED: return "revoked";
      case _UNKNOWN: return "unknown";
      default: return "UNDEFINED";
      }
   }

   public void set_good () {
      setElement (_GOOD, Asn1Null.NULL_VALUE);
   }

   public void set_revoked (RevokedInfo value) {
      setElement (_REVOKED, value);
   }

   public void set_unknown () {
      setElement (_UNKNOWN, Asn1Null.NULL_VALUE);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
      {
         Asn1Null good;
         good = new Asn1Null();
         good.decode (buffer, false, len);
         setElement (_GOOD, good);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
      {
         RevokedInfo revoked;
         revoked = new RevokedInfo();
         revoked.decode (buffer, false, len);
         setElement (_REVOKED, revoked);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2)) {
         Asn1Null unknown;
         unknown = new Asn1Null();
         unknown.decode (buffer, false, len);
         setElement (_UNKNOWN, unknown);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode good
      case _GOOD:
         Asn1Null good = (Asn1Null) getElement();
         len = good.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
         break;

      // encode revoked
      case _REVOKED:
         RevokedInfo revoked = (RevokedInfo) getElement();
         len = revoked.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
         break;

      // encode unknown
      case _UNKNOWN:
         Asn1Null unknown = (Asn1Null) getElement();
         len = unknown.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
