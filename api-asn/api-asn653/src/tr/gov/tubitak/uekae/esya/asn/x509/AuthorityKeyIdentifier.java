/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class AuthorityKeyIdentifier extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "AuthorityKeyIdentifier";
   }

   public Asn1OctetString keyIdentifier;  // optional
   public GeneralNames authorityCertIssuer;  // optional
   public Asn1BigInteger authorityCertSerialNumber;  // optional

   public AuthorityKeyIdentifier () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AuthorityKeyIdentifier (
      Asn1OctetString keyIdentifier_,
      GeneralNames authorityCertIssuer_,
      Asn1BigInteger authorityCertSerialNumber_
   ) {
      super();
      keyIdentifier = keyIdentifier_;
      authorityCertIssuer = authorityCertIssuer_;
      authorityCertSerialNumber = authorityCertSerialNumber_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AuthorityKeyIdentifier (byte[] keyIdentifier_,
      GeneralNames authorityCertIssuer_,
      Asn1BigInteger authorityCertSerialNumber_
   ) {
      super();
      keyIdentifier = new Asn1OctetString (keyIdentifier_);
      authorityCertIssuer = authorityCertIssuer_;
      authorityCertSerialNumber = authorityCertSerialNumber_;
   }

   public void init () {
      keyIdentifier = null;
      authorityCertIssuer = null;
      authorityCertSerialNumber = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof AuthorityKeyIdentifier) ) return false;

      AuthorityKeyIdentifier rhs = (AuthorityKeyIdentifier) obj;

      if (keyIdentifier == null) {
         if (rhs.keyIdentifier != null) return false;
      }
      else {
         if (!keyIdentifier.equals(rhs.keyIdentifier)) {
            return false;
         }
      }

      if (authorityCertIssuer == null) {
         if (rhs.authorityCertIssuer != null) return false;
      }
      else {
         if (!authorityCertIssuer.equals(rhs.authorityCertIssuer)) {
            return false;
         }
      }

      if (authorityCertSerialNumber == null) {
         if (rhs.authorityCertSerialNumber != null) return false;
      }
      else {
         if (!authorityCertSerialNumber.equals(rhs.authorityCertSerialNumber)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (keyIdentifier != null) __code = 31*__code + keyIdentifier.hashCode();
      if (authorityCertIssuer != null) __code = 31*__code + authorityCertIssuer.hashCode();
      if (authorityCertSerialNumber != null) __code = 31*__code + authorityCertSerialNumber.hashCode();

      return __code;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return keyIdentifier;
         case 1: return authorityCertIssuer;
         case 2: return authorityCertSerialNumber;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "keyIdentifier";
         case 1: return "authorityCertIssuer";
         case 2: return "authorityCertSerialNumber";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode keyIdentifier

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         keyIdentifier = new Asn1OctetString();
         keyIdentifier.decode (buffer, false, elemLen.value);
      }

      // decode authorityCertIssuer

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         authorityCertIssuer = new GeneralNames();
         authorityCertIssuer.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode authorityCertSerialNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         authorityCertSerialNumber = new Asn1BigInteger();
         authorityCertSerialNumber.decode (buffer, false, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode authorityCertSerialNumber

      if (authorityCertSerialNumber != null) {
         len = authorityCertSerialNumber.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
      }

      // encode authorityCertIssuer

      if (authorityCertIssuer != null) {
         len = authorityCertIssuer.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode keyIdentifier

      if (keyIdentifier != null) {
         len = keyIdentifier.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (keyIdentifier != null) keyIdentifier.print (_out, "keyIdentifier", _level+1);
      if (authorityCertIssuer != null) authorityCertIssuer.print (_out, "authorityCertIssuer", _level+1);
      if (authorityCertSerialNumber != null) authorityCertSerialNumber.print (_out, "authorityCertSerialNumber", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
