/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.api.smartcard.apdu.asn.pkcs5;

import com.objsys.asn1j.runtime.*;

public class PBKDF2_params_salt extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkcs5Rtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _SPECIFIED = 1;
   public final static byte _OTHERSOURCE = 2;

   public PBKDF2_params_salt () {
      super();
   }

   public PBKDF2_params_salt (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _SPECIFIED: return "specified";
      case _OTHERSOURCE: return "otherSource";
      default: return "UNDEFINED";
      }
   }

   public void set_specified (Asn1OctetString value) {
      setElement (_SPECIFIED, value);
   }

   public void set_otherSource (AlgorithmIdentifier value) {
      setElement (_OTHERSOURCE, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))
      {
         buffer.reset();
         Asn1OctetString specified;
         specified = new Asn1OctetString();
         specified.decode (buffer, true, len);
         setElement (_SPECIFIED, specified);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
      {
         buffer.reset();
         AlgorithmIdentifier otherSource;
         otherSource = new AlgorithmIdentifier();
         otherSource.decode (buffer, true, len);
         setElement (_OTHERSOURCE, otherSource);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode specified
      case _SPECIFIED:
         Asn1OctetString specified = (Asn1OctetString) getElement();
         len = specified.encode (buffer, true);
         _aal += len;
         break;

      // encode otherSource
      case _OTHERSOURCE:
         AlgorithmIdentifier otherSource = (AlgorithmIdentifier) getElement();
         len = otherSource.encode (buffer, true);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
