/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class PresentationAddress extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PresentationAddress";
   }

   public Asn1OctetString pSelector;  // optional
   public Asn1OctetString sSelector;  // optional
   public Asn1OctetString tSelector;  // optional
   public PresentationAddress_nAddresses nAddresses;

   public PresentationAddress () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PresentationAddress (
      Asn1OctetString pSelector_,
      Asn1OctetString sSelector_,
      Asn1OctetString tSelector_,
      PresentationAddress_nAddresses nAddresses_
   ) {
      super();
      pSelector = pSelector_;
      sSelector = sSelector_;
      tSelector = tSelector_;
      nAddresses = nAddresses_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PresentationAddress (
      PresentationAddress_nAddresses nAddresses_
   ) {
      super();
      nAddresses = nAddresses_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PresentationAddress (byte[] pSelector_,
      byte[] sSelector_,
      byte[] tSelector_,
      PresentationAddress_nAddresses nAddresses_
   ) {
      super();
      pSelector = new Asn1OctetString (pSelector_);
      sSelector = new Asn1OctetString (sSelector_);
      tSelector = new Asn1OctetString (tSelector_);
      nAddresses = nAddresses_;
   }

   public void init () {
      pSelector = null;
      sSelector = null;
      tSelector = null;
      nAddresses = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PresentationAddress) ) return false;

      PresentationAddress rhs = (PresentationAddress) obj;

      if (pSelector == null) {
         if (rhs.pSelector != null) return false;
      }
      else {
         if (!pSelector.equals(rhs.pSelector)) {
            return false;
         }
      }

      if (sSelector == null) {
         if (rhs.sSelector != null) return false;
      }
      else {
         if (!sSelector.equals(rhs.sSelector)) {
            return false;
         }
      }

      if (tSelector == null) {
         if (rhs.tSelector != null) return false;
      }
      else {
         if (!tSelector.equals(rhs.tSelector)) {
            return false;
         }
      }

      if (nAddresses == null) {
         if (rhs.nAddresses != null) return false;
      }
      else {
         if (!nAddresses.equals(rhs.nAddresses)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (pSelector != null) __code = 31*__code + pSelector.hashCode();
      if (sSelector != null) __code = 31*__code + sSelector.hashCode();
      if (tSelector != null) __code = 31*__code + tSelector.hashCode();
      if (nAddresses != null) __code = 31*__code + nAddresses.hashCode();

      return __code;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return pSelector;
         case 1: return sSelector;
         case 2: return tSelector;
         case 3: return nAddresses;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "pSelector";
         case 1: return "sSelector";
         case 2: return "tSelector";
         case 3: return "nAddresses";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode pSelector

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         pSelector = new Asn1OctetString();
         pSelector.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode sSelector

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         sSelector = new Asn1OctetString();
         sSelector.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode tSelector

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         tSelector = new Asn1OctetString();
         tSelector.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode nAddresses

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, false)) {
         nAddresses = new PresentationAddress_nAddresses();
         nAddresses.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "nAddresses");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode nAddresses

      if (nAddresses != null) {
         len = nAddresses.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("nAddresses");

      // encode tSelector

      if (tSelector != null) {
         len = tSelector.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode sSelector

      if (sSelector != null) {
         len = sSelector.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode pSelector

      if (pSelector != null) {
         len = pSelector.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (pSelector != null) pSelector.print (_out, "pSelector", _level+1);
      if (sSelector != null) sSelector.print (_out, "sSelector", _level+1);
      if (tSelector != null) tSelector.print (_out, "tSelector", _level+1);
      if (nAddresses != null) nAddresses.print (_out, "nAddresses", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
