/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.algorithms;

import com.objsys.asn1j.runtime.*;

public class Pentanomial extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_algorithmsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "Pentanomial";
   }

   public Asn1Integer k1;
   public Asn1Integer k2;
   public Asn1Integer k3;

   public Pentanomial () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Pentanomial (
      Asn1Integer k1_,
      Asn1Integer k2_,
      Asn1Integer k3_
   ) {
      super();
      k1 = k1_;
      k2 = k2_;
      k3 = k3_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Pentanomial (long k1_,
      long k2_,
      long k3_
   ) {
      super();
      k1 = new Asn1Integer (k1_);
      k2 = new Asn1Integer (k2_);
      k3 = new Asn1Integer (k3_);
   }

   public void init () {
      k1 = null;
      k2 = null;
      k3 = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return k1;
         case 1: return k2;
         case 2: return k3;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "k1";
         case 1: return "k2";
         case 2: return "k3";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode k1

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         k1 = new Asn1Integer();
         k1.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "k1");

      // decode k2

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         k2 = new Asn1Integer();
         k2.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "k2");

      // decode k3

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         k3 = new Asn1Integer();
         k3.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "k3");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode k3

      if (k3 != null) {
         len = k3.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("k3");

      // encode k2

      if (k2 != null) {
         len = k2.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("k2");

      // encode k1

      if (k1 != null) {
         len = k1.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("k1");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (k1 != null) k1.print (_out, "k1", _level+1);
      if (k2 != null) k2.print (_out, "k2", _level+1);
      if (k3 != null) k3.print (_out, "k3", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
