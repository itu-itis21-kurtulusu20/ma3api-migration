/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class PolicyConstraints extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "PolicyConstraints";
   }

   public Asn1Integer requireExplicitPolicy;  // optional
   public Asn1Integer inhibitPolicyMapping;  // optional

   public PolicyConstraints () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PolicyConstraints (
      Asn1Integer requireExplicitPolicy_,
      Asn1Integer inhibitPolicyMapping_
   ) {
      super();
      requireExplicitPolicy = requireExplicitPolicy_;
      inhibitPolicyMapping = inhibitPolicyMapping_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PolicyConstraints (long requireExplicitPolicy_,
      long inhibitPolicyMapping_
   ) {
      super();
      requireExplicitPolicy = new Asn1Integer (requireExplicitPolicy_);
      inhibitPolicyMapping = new Asn1Integer (inhibitPolicyMapping_);
   }

   public void init () {
      requireExplicitPolicy = null;
      inhibitPolicyMapping = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return requireExplicitPolicy;
         case 1: return inhibitPolicyMapping;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "requireExplicitPolicy";
         case 1: return "inhibitPolicyMapping";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode requireExplicitPolicy

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         requireExplicitPolicy = new Asn1Integer();
         requireExplicitPolicy.decode (buffer, true, elemLen.value);
         if (!(requireExplicitPolicy.value >= 0)) {
            throw new Asn1ConsVioException ("requireExplicitPolicy.value", requireExplicitPolicy.value);
         }

      }

      // decode inhibitPolicyMapping

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         inhibitPolicyMapping = new Asn1Integer();
         inhibitPolicyMapping.decode (buffer, true, elemLen.value);
         if (!(inhibitPolicyMapping.value >= 0)) {
            throw new Asn1ConsVioException ("inhibitPolicyMapping.value", inhibitPolicyMapping.value);
         }

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode inhibitPolicyMapping

      if (inhibitPolicyMapping != null) {
         if (!(inhibitPolicyMapping.value >= 0)) {
            throw new Asn1ConsVioException ("inhibitPolicyMapping.value", inhibitPolicyMapping.value);
         }

         len = inhibitPolicyMapping.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode requireExplicitPolicy

      if (requireExplicitPolicy != null) {
         if (!(requireExplicitPolicy.value >= 0)) {
            throw new Asn1ConsVioException ("requireExplicitPolicy.value", requireExplicitPolicy.value);
         }

         len = requireExplicitPolicy.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (requireExplicitPolicy != null) requireExplicitPolicy.print (_out, "requireExplicitPolicy", _level+1);
      if (inhibitPolicyMapping != null) inhibitPolicyMapping.print (_out, "inhibitPolicyMapping", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
