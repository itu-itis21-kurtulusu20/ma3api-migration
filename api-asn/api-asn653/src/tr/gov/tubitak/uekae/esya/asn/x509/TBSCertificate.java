/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class TBSCertificate extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TBSCertificate";
   }

   public Version version;  // default = Version.v1()
   public Asn1BigInteger serialNumber;
   public AlgorithmIdentifier signature;
   public Name issuer;
   public Validity validity;
   public Name subject;
   public SubjectPublicKeyInfo subjectPublicKeyInfo;
   public Asn1BitString issuerUniqueID;  // optional
   public Asn1BitString subjectUniqueID;  // optional
   public Extensions extensions;  // optional

   public TBSCertificate () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TBSCertificate (
      Version version_,
      Asn1BigInteger serialNumber_,
      AlgorithmIdentifier signature_,
      Name issuer_,
      Validity validity_,
      Name subject_,
      SubjectPublicKeyInfo subjectPublicKeyInfo_,
      Asn1BitString issuerUniqueID_,
      Asn1BitString subjectUniqueID_,
      Extensions extensions_
   ) {
      super();
      version = version_;
      serialNumber = serialNumber_;
      signature = signature_;
      issuer = issuer_;
      validity = validity_;
      subject = subject_;
      subjectPublicKeyInfo = subjectPublicKeyInfo_;
      issuerUniqueID = issuerUniqueID_;
      subjectUniqueID = subjectUniqueID_;
      extensions = extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TBSCertificate (
      Asn1BigInteger serialNumber_,
      AlgorithmIdentifier signature_,
      Name issuer_,
      Validity validity_,
      Name subject_,
      SubjectPublicKeyInfo subjectPublicKeyInfo_
   ) {
      super();
      version = new Version (Version.v1);
      serialNumber = serialNumber_;
      signature = signature_;
      issuer = issuer_;
      validity = validity_;
      subject = subject_;
      subjectPublicKeyInfo = subjectPublicKeyInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TBSCertificate (long version_,
      Asn1BigInteger serialNumber_,
      AlgorithmIdentifier signature_,
      Name issuer_,
      Validity validity_,
      Name subject_,
      SubjectPublicKeyInfo subjectPublicKeyInfo_,
      Asn1BitString issuerUniqueID_,
      Asn1BitString subjectUniqueID_,
      Extensions extensions_
   ) {
      super();
      version = new Version (version_);
      serialNumber = serialNumber_;
      signature = signature_;
      issuer = issuer_;
      validity = validity_;
      subject = subject_;
      subjectPublicKeyInfo = subjectPublicKeyInfo_;
      issuerUniqueID = issuerUniqueID_;
      subjectUniqueID = subjectUniqueID_;
      extensions = extensions_;
   }

   public void init () {
      version = new Version (Version.v1);
      serialNumber = null;
      signature = null;
      issuer = null;
      validity = null;
      subject = null;
      subjectPublicKeyInfo = null;
      issuerUniqueID = null;
      subjectUniqueID = null;
      extensions = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof TBSCertificate) ) return false;

      TBSCertificate rhs = (TBSCertificate) obj;

      if (version == null) {
         if (rhs.version != null) return false;
      }
      else {
         if (!version.equals(rhs.version)) {
            return false;
         }
      }

      if (serialNumber == null) {
         if (rhs.serialNumber != null) return false;
      }
      else {
         if (!serialNumber.equals(rhs.serialNumber)) {
            return false;
         }
      }

      if (signature == null) {
         if (rhs.signature != null) return false;
      }
      else {
         if (!signature.equals(rhs.signature)) {
            return false;
         }
      }

      if (issuer == null) {
         if (rhs.issuer != null) return false;
      }
      else {
         if (!issuer.equals(rhs.issuer)) {
            return false;
         }
      }

      if (validity == null) {
         if (rhs.validity != null) return false;
      }
      else {
         if (!validity.equals(rhs.validity)) {
            return false;
         }
      }

      if (subject == null) {
         if (rhs.subject != null) return false;
      }
      else {
         if (!subject.equals(rhs.subject)) {
            return false;
         }
      }

      if (subjectPublicKeyInfo == null) {
         if (rhs.subjectPublicKeyInfo != null) return false;
      }
      else {
         if (!subjectPublicKeyInfo.equals(rhs.subjectPublicKeyInfo)) {
            return false;
         }
      }

      if (issuerUniqueID == null) {
         if (rhs.issuerUniqueID != null) return false;
      }
      else {
         if (!issuerUniqueID.equals(rhs.issuerUniqueID)) {
            return false;
         }
      }

      if (subjectUniqueID == null) {
         if (rhs.subjectUniqueID != null) return false;
      }
      else {
         if (!subjectUniqueID.equals(rhs.subjectUniqueID)) {
            return false;
         }
      }

      if (extensions == null) {
         if (rhs.extensions != null) return false;
      }
      else {
         if (!extensions.equals(rhs.extensions)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (version != null) __code = 31*__code + version.hashCode();
      if (serialNumber != null) __code = 31*__code + serialNumber.hashCode();
      if (signature != null) __code = 31*__code + signature.hashCode();
      if (issuer != null) __code = 31*__code + issuer.hashCode();
      if (validity != null) __code = 31*__code + validity.hashCode();
      if (subject != null) __code = 31*__code + subject.hashCode();
      if (subjectPublicKeyInfo != null) __code = 31*__code + subjectPublicKeyInfo.hashCode();
      if (issuerUniqueID != null) __code = 31*__code + issuerUniqueID.hashCode();
      if (subjectUniqueID != null) __code = 31*__code + subjectUniqueID.hashCode();
      if (extensions != null) __code = 31*__code + extensions.hashCode();

      return __code;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return version;
         case 1: return serialNumber;
         case 2: return signature;
         case 3: return issuer;
         case 4: return validity;
         case 5: return subject;
         case 6: return subjectPublicKeyInfo;
         case 7: return issuerUniqueID;
         case 8: return subjectUniqueID;
         case 9: return extensions;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "version";
         case 1: return "serialNumber";
         case 2: return "signature";
         case 3: return "issuer";
         case 4: return "validity";
         case 5: return "subject";
         case 6: return "subjectPublicKeyInfo";
         case 7: return "issuerUniqueID";
         case 8: return "subjectUniqueID";
         case 9: return "extensions";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         version = new Version();
         version.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode serialNumber

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         serialNumber = new Asn1BigInteger();
         serialNumber.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "serialNumber");

      // decode signature

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signature = new AlgorithmIdentifier();
         signature.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      // decode issuer

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         issuer = new Name();
         issuer.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "issuer");

      // decode validity

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         validity = new Validity();
         validity.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "validity");

      // decode subject

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         subject = new Name();
         subject.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "subject");

      // decode subjectPublicKeyInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         subjectPublicKeyInfo = new SubjectPublicKeyInfo();
         subjectPublicKeyInfo.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "subjectPublicKeyInfo");

      // decode issuerUniqueID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         issuerUniqueID = new Asn1BitString();
         issuerUniqueID.decode (buffer, false, elemLen.value);
      }

      // decode subjectUniqueID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         subjectUniqueID = new Asn1BitString();
         subjectUniqueID.decode (buffer, false, elemLen.value);
      }

      // decode extensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         extensions = new Extensions();
         extensions.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extensions

      if (extensions != null) {
         len = extensions.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }

      // encode subjectUniqueID

      if (subjectUniqueID != null) {
         len = subjectUniqueID.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
      }

      // encode issuerUniqueID

      if (issuerUniqueID != null) {
         len = issuerUniqueID.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode subjectPublicKeyInfo

      if (subjectPublicKeyInfo != null) {
         len = subjectPublicKeyInfo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("subjectPublicKeyInfo");

      // encode subject

      if (subject != null) {
         len = subject.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("subject");

      // encode validity

      if (validity != null) {
         len = validity.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("validity");

      // encode issuer

      if (issuer != null) {
         len = issuer.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("issuer");

      // encode signature

      if (signature != null) {
         len = signature.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signature");

      // encode serialNumber

      if (serialNumber != null) {
         len = serialNumber.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("serialNumber");

      // encode version

      if (version != null) {
         if (!version.equals (Version.v1)) {
            len = version.encode (buffer, true);
            len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (serialNumber != null) serialNumber.print (_out, "serialNumber", _level+1);
      if (signature != null) signature.print (_out, "signature", _level+1);
      if (issuer != null) issuer.print (_out, "issuer", _level+1);
      if (validity != null) validity.print (_out, "validity", _level+1);
      if (subject != null) subject.print (_out, "subject", _level+1);
      if (subjectPublicKeyInfo != null) subjectPublicKeyInfo.print (_out, "subjectPublicKeyInfo", _level+1);
      if (issuerUniqueID != null) issuerUniqueID.print (_out, "issuerUniqueID", _level+1);
      if (subjectUniqueID != null) subjectUniqueID.print (_out, "subjectUniqueID", _level+1);
      if (extensions != null) extensions.print (_out, "extensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
