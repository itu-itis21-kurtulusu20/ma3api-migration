/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.crmf;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Version;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
import tr.gov.tubitak.uekae.esya.asn.x509.Name;
import tr.gov.tubitak.uekae.esya.asn.x509.SubjectPublicKeyInfo;
import tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

public class CertTemplate extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_crmfRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CertTemplate";
   }

   public Version version;  // optional
   public Asn1BigInteger serialNumber;  // optional
   public AlgorithmIdentifier signingAlg;  // optional
   public Name issuer;  // optional
   public OptionalValidity validity;  // optional
   public Name subject;  // optional
   public SubjectPublicKeyInfo publicKey;  // optional
   public Asn1BitString issuerUID;  // optional
   public Asn1BitString subjectUID;  // optional
   public Extensions extensions;  // optional

   public CertTemplate () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CertTemplate (
      Version version_,
      Asn1BigInteger serialNumber_,
      AlgorithmIdentifier signingAlg_,
      Name issuer_,
      OptionalValidity validity_,
      Name subject_,
      SubjectPublicKeyInfo publicKey_,
      Asn1BitString issuerUID_,
      Asn1BitString subjectUID_,
      Extensions extensions_
   ) {
      super();
      version = version_;
      serialNumber = serialNumber_;
      signingAlg = signingAlg_;
      issuer = issuer_;
      validity = validity_;
      subject = subject_;
      publicKey = publicKey_;
      issuerUID = issuerUID_;
      subjectUID = subjectUID_;
      extensions = extensions_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CertTemplate (long version_,
      Asn1BigInteger serialNumber_,
      AlgorithmIdentifier signingAlg_,
      Name issuer_,
      OptionalValidity validity_,
      Name subject_,
      SubjectPublicKeyInfo publicKey_,
      Asn1BitString issuerUID_,
      Asn1BitString subjectUID_,
      Extensions extensions_
   ) {
      super();
      version = new Version (version_);
      serialNumber = serialNumber_;
      signingAlg = signingAlg_;
      issuer = issuer_;
      validity = validity_;
      subject = subject_;
      publicKey = publicKey_;
      issuerUID = issuerUID_;
      subjectUID = subjectUID_;
      extensions = extensions_;
   }

   public void init () {
      version = null;
      serialNumber = null;
      signingAlg = null;
      issuer = null;
      validity = null;
      subject = null;
      publicKey = null;
      issuerUID = null;
      subjectUID = null;
      extensions = null;
   }

   public int getElementCount() { return 10; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return version;
         case 1: return serialNumber;
         case 2: return signingAlg;
         case 3: return issuer;
         case 4: return validity;
         case 5: return subject;
         case 6: return publicKey;
         case 7: return issuerUID;
         case 8: return subjectUID;
         case 9: return extensions;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "version";
         case 1: return "serialNumber";
         case 2: return "signingAlg";
         case 3: return "issuer";
         case 4: return "validity";
         case 5: return "subject";
         case 6: return "publicKey";
         case 7: return "issuerUID";
         case 8: return "subjectUID";
         case 9: return "extensions";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         version = new Version();
         version.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode serialNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         serialNumber = new Asn1BigInteger();
         serialNumber.decode (buffer, false, elemLen.value);
      }

      // decode signingAlg

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         signingAlg = new AlgorithmIdentifier();
         signingAlg.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode issuer

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         issuer = new Name();
         issuer.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode validity

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         int offset = buffer.getByteCount();
         validity = new OptionalValidity();
         validity.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode subject

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 5, elemLen, true)) {
         int offset = buffer.getByteCount();
         subject = new Name();
         subject.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode publicKey

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 6, elemLen, true)) {
         int offset = buffer.getByteCount();
         publicKey = new SubjectPublicKeyInfo();
         publicKey.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode issuerUID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, elemLen, true)) {
         issuerUID = new Asn1BitString();
         issuerUID.decode (buffer, false, elemLen.value);
      }

      // decode subjectUID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, elemLen, true)) {
         subjectUID = new Asn1BitString();
         subjectUID.decode (buffer, false, elemLen.value);
      }

      // decode extensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 9, elemLen, true)) {
         int offset = buffer.getByteCount();
         extensions = new Extensions();
         extensions.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 9))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extensions

      if (extensions != null) {
         len = extensions.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 9, len);
         _aal += len;
      }

      // encode subjectUID

      if (subjectUID != null) {
         len = subjectUID.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, len);
         _aal += len;
      }

      // encode issuerUID

      if (issuerUID != null) {
         len = issuerUID.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
         _aal += len;
      }

      // encode publicKey

      if (publicKey != null) {
         len = publicKey.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
         _aal += len;
      }

      // encode subject

      if (subject != null) {
         len = subject.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
         _aal += len;
      }

      // encode validity

      if (validity != null) {
         len = validity.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;
      }

      // encode issuer

      if (issuer != null) {
         len = issuer.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }

      // encode signingAlg

      if (signingAlg != null) {
         len = signingAlg.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode serialNumber

      if (serialNumber != null) {
         len = serialNumber.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode version

      if (version != null) {
         len = version.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (serialNumber != null) serialNumber.print (_out, "serialNumber", _level+1);
      if (signingAlg != null) signingAlg.print (_out, "signingAlg", _level+1);
      if (issuer != null) issuer.print (_out, "issuer", _level+1);
      if (validity != null) validity.print (_out, "validity", _level+1);
      if (subject != null) subject.print (_out, "subject", _level+1);
      if (publicKey != null) publicKey.print (_out, "publicKey", _level+1);
      if (issuerUID != null) issuerUID.print (_out, "issuerUID", _level+1);
      if (subjectUID != null) subjectUID.print (_out, "subjectUID", _level+1);
      if (extensions != null) extensions.print (_out, "extensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
