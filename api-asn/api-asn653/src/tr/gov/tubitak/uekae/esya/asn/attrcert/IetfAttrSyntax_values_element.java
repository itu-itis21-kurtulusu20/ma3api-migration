/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.attrcert;

import com.objsys.asn1j.runtime.*;

public class IetfAttrSyntax_values_element extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_attrcertRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CHOICE";
   }

   // Choice element identifier constants
   public final static byte _OCTETS = 1;
   public final static byte _OID = 2;
   public final static byte _STRING = 3;

   public IetfAttrSyntax_values_element () {
      super();
   }

   public IetfAttrSyntax_values_element (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _OCTETS: return "octets";
      case _OID: return "oid";
      case _STRING: return "string";
      default: return "UNDEFINED";
      }
   }

   public void set_octets (Asn1OctetString value) {
      setElement (_OCTETS, value);
   }

   public void set_oid (Asn1ObjectIdentifier value) {
      setElement (_OID, value);
   }

   public void set_string (Asn1UTF8String value) {
      setElement (_STRING, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))
      {
         buffer.reset();
         Asn1OctetString octets;
         octets = new Asn1OctetString();
         octets.decode (buffer, true, len);
         setElement (_OCTETS, octets);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))
      {
         buffer.reset();
         Asn1ObjectIdentifier oid;
         oid = new Asn1ObjectIdentifier();
         oid.decode (buffer, true, len);
         setElement (_OID, oid);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12))
      {
         buffer.reset();
         Asn1UTF8String string;
         string = new Asn1UTF8String();
         string.decode (buffer, true, len);
         setElement (_STRING, string);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode octets
      case _OCTETS:
         Asn1OctetString octets = (Asn1OctetString) getElement();
         len = octets.encode (buffer, true);
         _aal += len;
         break;

      // encode oid
      case _OID:
         Asn1ObjectIdentifier oid = (Asn1ObjectIdentifier) getElement();
         len = oid.encode (buffer, true);
         _aal += len;
         break;

      // encode string
      case _STRING:
         Asn1UTF8String string = (Asn1UTF8String) getElement();
         len = string.encode (buffer, true);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
