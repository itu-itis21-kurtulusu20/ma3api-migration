/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class CountryName extends Asn1Choice {
   private static final long serialVersionUID = 55;
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 1);

   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CountryName";
   }

   // Choice element identifier constants
   public final static byte _X121_DCC_CODE = 1;
   public final static byte _ISO_3166_ALPHA2_CODE = 2;

   public CountryName () {
      super();
   }

   public CountryName (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _X121_DCC_CODE: return "x121_dcc_code";
      case _ISO_3166_ALPHA2_CODE: return "iso_3166_alpha2_code";
      default: return "UNDEFINED";
      }
   }

   public void set_x121_dcc_code (Asn1NumericString value) {
      setElement (_X121_DCC_CODE, value);
   }

   public void set_iso_3166_alpha2_code (Asn1PrintableString value) {
      setElement (_ISO_3166_ALPHA2_CODE, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 18))
      {
         buffer.reset();
         Asn1NumericString x121_dcc_code;
         x121_dcc_code = new Asn1NumericString();
         x121_dcc_code.decode (buffer, true, len);
         if (!(x121_dcc_code.getLength() == 3)) {
            throw new Asn1ConsVioException ("x121_dcc_code.getLength()", x121_dcc_code.getLength());
         }

         setElement (_X121_DCC_CODE, x121_dcc_code);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19))
      {
         buffer.reset();
         Asn1PrintableString iso_3166_alpha2_code;
         iso_3166_alpha2_code = new Asn1PrintableString();
         iso_3166_alpha2_code.decode (buffer, true, len);
         if (!(iso_3166_alpha2_code.getLength() == 2)) {
            throw new Asn1ConsVioException ("iso_3166_alpha2_code.getLength()", iso_3166_alpha2_code.getLength());
         }

         setElement (_ISO_3166_ALPHA2_CODE, iso_3166_alpha2_code);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode x121_dcc_code
      case _X121_DCC_CODE:
         Asn1NumericString x121_dcc_code = (Asn1NumericString) getElement();
         if (!(x121_dcc_code.getLength() == 3)) {
            throw new Asn1ConsVioException ("x121_dcc_code.getLength()", x121_dcc_code.getLength());
         }

         len = x121_dcc_code.encode (buffer, true);
         _aal += len;
         break;

      // encode iso_3166_alpha2_code
      case _ISO_3166_ALPHA2_CODE:
         Asn1PrintableString iso_3166_alpha2_code = (Asn1PrintableString) getElement();
         if (!(iso_3166_alpha2_code.getLength() == 2)) {
            throw new Asn1ConsVioException ("iso_3166_alpha2_code.getLength()", iso_3166_alpha2_code.getLength());
         }

         len = iso_3166_alpha2_code.encode (buffer, true);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      if (explicit)
         _aal += buffer.encodeTagAndLength (TAG, _aal);

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
