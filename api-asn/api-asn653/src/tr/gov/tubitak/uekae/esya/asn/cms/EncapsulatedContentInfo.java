/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class EncapsulatedContentInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "EncapsulatedContentInfo";
   }

   public Asn1ObjectIdentifier eContentType;
   public Asn1OctetString eContent;  // optional

   public EncapsulatedContentInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EncapsulatedContentInfo (
      Asn1ObjectIdentifier eContentType_,
      Asn1OctetString eContent_
   ) {
      super();
      eContentType = eContentType_;
      eContent = eContent_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EncapsulatedContentInfo (
      Asn1ObjectIdentifier eContentType_
   ) {
      super();
      eContentType = eContentType_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EncapsulatedContentInfo (int[] eContentType_,
      byte[] eContent_
   ) {
      super();
      eContentType = new Asn1ObjectIdentifier (eContentType_);
      eContent = new Asn1OctetString (eContent_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EncapsulatedContentInfo (
      int[] eContentType_
   ) {
      super();
      eContentType = new Asn1ObjectIdentifier (eContentType_);
   }

   public void init () {
      eContentType = null;
      eContent = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return eContentType;
         case 1: return eContent;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "eContentType";
         case 1: return "eContent";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode eContentType

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         eContentType = new Asn1ObjectIdentifier();
         eContentType.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "eContentType");

      // decode eContent

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         eContent = new Asn1OctetString();
         eContent.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

         if (elemLen.value == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode eContent

      if (eContent != null) {
         len = eContent.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode eContentType

      if (eContentType != null) {
         len = eContentType.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("eContentType");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (eContentType != null) eContentType.print (_out, "eContentType", _level+1);
      if (eContent != null) eContent.print (_out, "eContent", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
