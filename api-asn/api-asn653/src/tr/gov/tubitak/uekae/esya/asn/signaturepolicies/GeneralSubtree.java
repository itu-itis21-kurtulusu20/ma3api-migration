/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;

public class GeneralSubtree extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "GeneralSubtree";
   }

   public GeneralName base;
   public Asn1Integer minimum;  // default = 0()
   public Asn1Integer maximum;  // optional

   public GeneralSubtree () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GeneralSubtree (
      GeneralName base_,
      Asn1Integer minimum_,
      Asn1Integer maximum_
   ) {
      super();
      base = base_;
      minimum = minimum_;
      maximum = maximum_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GeneralSubtree (
      GeneralName base_
   ) {
      super();
      base = base_;
      minimum = new Asn1Integer (0);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GeneralSubtree (GeneralName base_,
      long minimum_,
      long maximum_
   ) {
      super();
      base = base_;
      minimum = new Asn1Integer (minimum_);
      maximum = new Asn1Integer (maximum_);
   }

   public void init () {
      base = null;
      minimum = new Asn1Integer (0);
      maximum = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return base;
         case 1: return minimum;
         case 2: return maximum;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "base";
         case 1: return "minimum";
         case 2: return "maximum";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode base

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
         {
            base = new GeneralName();
            base.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "base");
      }
      else throw new Asn1MissingRequiredException (buffer, "base");

      // decode minimum

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         minimum = new Asn1Integer();
         minimum.decode (buffer, true, elemLen.value);
         if (!(minimum.value >= 0)) {
            throw new Asn1ConsVioException ("minimum.value", minimum.value);
         }

      }

      // decode maximum

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         maximum = new Asn1Integer();
         maximum.decode (buffer, true, elemLen.value);
         if (!(maximum.value >= 0)) {
            throw new Asn1ConsVioException ("maximum.value", maximum.value);
         }

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode maximum

      if (maximum != null) {
         if (!(maximum.value >= 0)) {
            throw new Asn1ConsVioException ("maximum.value", maximum.value);
         }

         len = maximum.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode minimum

      if (minimum != null) {
         if (!minimum.equals (0)) {
            if (!(minimum.value >= 0)) {
               throw new Asn1ConsVioException ("minimum.value", minimum.value);
            }

            len = minimum.encode (buffer, true);
            len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }
      }

      // encode base

      if (base != null) {
         len = base.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("base");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (base != null) base.print (_out, "base", _level+1);
      if (minimum != null) minimum.print (_out, "minimum", _level+1);
      if (maximum != null) maximum.print (_out, "maximum", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
