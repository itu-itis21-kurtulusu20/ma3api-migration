/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class TimestampTrustCondition extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "TimestampTrustCondition";
   }

   public CertificateTrustTrees ttsCertificateTrustTrees;  // optional
   public CertRevReq ttsRevReq;  // optional
   public NameConstraints ttsNameConstraints;  // optional
   public DeltaTime cautionPeriod;  // optional
   public DeltaTime signatureTimestampDelay;  // optional

   public TimestampTrustCondition () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TimestampTrustCondition (
      CertificateTrustTrees ttsCertificateTrustTrees_,
      CertRevReq ttsRevReq_,
      NameConstraints ttsNameConstraints_,
      DeltaTime cautionPeriod_,
      DeltaTime signatureTimestampDelay_
   ) {
      super();
      ttsCertificateTrustTrees = ttsCertificateTrustTrees_;
      ttsRevReq = ttsRevReq_;
      ttsNameConstraints = ttsNameConstraints_;
      cautionPeriod = cautionPeriod_;
      signatureTimestampDelay = signatureTimestampDelay_;
   }

   public void init () {
      ttsCertificateTrustTrees = null;
      ttsRevReq = null;
      ttsNameConstraints = null;
      cautionPeriod = null;
      signatureTimestampDelay = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return ttsCertificateTrustTrees;
         case 1: return ttsRevReq;
         case 2: return ttsNameConstraints;
         case 3: return cautionPeriod;
         case 4: return signatureTimestampDelay;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "ttsCertificateTrustTrees";
         case 1: return "ttsRevReq";
         case 2: return "ttsNameConstraints";
         case 3: return "cautionPeriod";
         case 4: return "signatureTimestampDelay";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode ttsCertificateTrustTrees

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         ttsCertificateTrustTrees = new CertificateTrustTrees();
         ttsCertificateTrustTrees.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode ttsRevReq

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         ttsRevReq = new CertRevReq();
         ttsRevReq.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode ttsNameConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         ttsNameConstraints = new NameConstraints();
         ttsNameConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode cautionPeriod

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         cautionPeriod = new DeltaTime();
         cautionPeriod.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode signatureTimestampDelay

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         int offset = buffer.getByteCount();
         signatureTimestampDelay = new DeltaTime();
         signatureTimestampDelay.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signatureTimestampDelay

      if (signatureTimestampDelay != null) {
         len = signatureTimestampDelay.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;
      }

      // encode cautionPeriod

      if (cautionPeriod != null) {
         len = cautionPeriod.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }

      // encode ttsNameConstraints

      if (ttsNameConstraints != null) {
         len = ttsNameConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode ttsRevReq

      if (ttsRevReq != null) {
         len = ttsRevReq.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode ttsCertificateTrustTrees

      if (ttsCertificateTrustTrees != null) {
         len = ttsCertificateTrustTrees.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (ttsCertificateTrustTrees != null) ttsCertificateTrustTrees.print (_out, "ttsCertificateTrustTrees", _level+1);
      if (ttsRevReq != null) ttsRevReq.print (_out, "ttsRevReq", _level+1);
      if (ttsNameConstraints != null) ttsNameConstraints.print (_out, "ttsNameConstraints", _level+1);
      if (cautionPeriod != null) cautionPeriod.print (_out, "cautionPeriod", _level+1);
      if (signatureTimestampDelay != null) signatureTimestampDelay.print (_out, "signatureTimestampDelay", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
