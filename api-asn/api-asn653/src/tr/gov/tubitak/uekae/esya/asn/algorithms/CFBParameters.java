/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.algorithms;

import com.objsys.asn1j.runtime.*;

public class CFBParameters extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_aesRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CFBParameters";
   }

   public Asn1OctetString aes_IV;
   public Asn1Integer numberOfBits;

   public CFBParameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CFBParameters (
      Asn1OctetString aes_IV_,
      Asn1Integer numberOfBits_
   ) {
      super();
      aes_IV = aes_IV_;
      numberOfBits = numberOfBits_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CFBParameters (byte[] aes_IV_,
      long numberOfBits_
   ) {
      super();
      aes_IV = new Asn1OctetString (aes_IV_);
      numberOfBits = new Asn1Integer (numberOfBits_);
   }

   public void init () {
      aes_IV = null;
      numberOfBits = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return aes_IV;
         case 1: return numberOfBits;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "aes-IV";
         case 1: return "numberOfBits";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode aes_IV

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         aes_IV = new Asn1OctetString();
         aes_IV.decode (buffer, true, elemLen.value);
         if (!(aes_IV.getLength() == 16)) {
            throw new Asn1ConsVioException ("aes_IV.getLength()", aes_IV.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "aes_IV");

      // decode numberOfBits

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         numberOfBits = new Asn1Integer();
         numberOfBits.decode (buffer, true, elemLen.value);
         if (!((numberOfBits.value >= 1 && numberOfBits.value <= 128))) {
            throw new Asn1ConsVioException ("numberOfBits.value", numberOfBits.value);
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "numberOfBits");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode numberOfBits

      if (numberOfBits != null) {
         if (!((numberOfBits.value >= 1 && numberOfBits.value <= 128))) {
            throw new Asn1ConsVioException ("numberOfBits.value", numberOfBits.value);
         }

         len = numberOfBits.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("numberOfBits");

      // encode aes_IV

      if (aes_IV != null) {
         if (!(aes_IV.getLength() == 16)) {
            throw new Asn1ConsVioException ("aes_IV.getLength()", aes_IV.getLength());
         }

         len = aes_IV.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("aes_IV");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (aes_IV != null) aes_IV.print (_out, "aes_IV", _level+1);
      if (numberOfBits != null) numberOfBits.print (_out, "numberOfBits", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
