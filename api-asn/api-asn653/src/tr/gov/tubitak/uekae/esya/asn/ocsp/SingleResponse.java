/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

public class SingleResponse extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ocspRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "SingleResponse";
   }

   public CertID certID;
   public CertStatus certStatus;
   public Asn1GeneralizedTime thisUpdate;
   public Asn1GeneralizedTime nextUpdate;  // optional
   public Extensions singleExtensions;  // optional

   public SingleResponse () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SingleResponse (
      CertID certID_,
      CertStatus certStatus_,
      Asn1GeneralizedTime thisUpdate_,
      Asn1GeneralizedTime nextUpdate_,
      Extensions singleExtensions_
   ) {
      super();
      certID = certID_;
      certStatus = certStatus_;
      thisUpdate = thisUpdate_;
      nextUpdate = nextUpdate_;
      singleExtensions = singleExtensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SingleResponse (
      CertID certID_,
      CertStatus certStatus_,
      Asn1GeneralizedTime thisUpdate_
   ) {
      super();
      certID = certID_;
      certStatus = certStatus_;
      thisUpdate = thisUpdate_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SingleResponse (CertID certID_,
      CertStatus certStatus_,
      String thisUpdate_,
      String nextUpdate_,
      Extensions singleExtensions_
   ) {
      super();
      certID = certID_;
      certStatus = certStatus_;
      thisUpdate = new Asn1GeneralizedTime (thisUpdate_);
      nextUpdate = new Asn1GeneralizedTime (nextUpdate_);
      singleExtensions = singleExtensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SingleResponse (
      CertID certID_,
      CertStatus certStatus_,
      String thisUpdate_
   ) {
      super();
      certID = certID_;
      certStatus = certStatus_;
      thisUpdate = new Asn1GeneralizedTime (thisUpdate_);
   }

   public void init () {
      certID = null;
      certStatus = null;
      thisUpdate = null;
      nextUpdate = null;
      singleExtensions = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return certID;
         case 1: return certStatus;
         case 2: return thisUpdate;
         case 3: return nextUpdate;
         case 4: return singleExtensions;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "certID";
         case 1: return "certStatus";
         case 2: return "thisUpdate";
         case 3: return "nextUpdate";
         case 4: return "singleExtensions";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode certID

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         certID = new CertID();
         certID.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "certID");

      // decode certStatus

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
         {
            certStatus = new CertStatus();
            certStatus.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "certStatus");
      }
      else throw new Asn1MissingRequiredException (buffer, "certStatus");

      // decode thisUpdate

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         thisUpdate = new Asn1GeneralizedTime (true);
         thisUpdate.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "thisUpdate");

      // decode nextUpdate

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         nextUpdate = new Asn1GeneralizedTime (true);
         nextUpdate.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode singleExtensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         singleExtensions = new Extensions();
         singleExtensions.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode singleExtensions

      if (singleExtensions != null) {
         len = singleExtensions.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode nextUpdate

      if (nextUpdate != null) {
         len = nextUpdate.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode thisUpdate

      if (thisUpdate != null) {
         len = thisUpdate.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("thisUpdate");

      // encode certStatus

      if (certStatus != null) {
         len = certStatus.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("certStatus");

      // encode certID

      if (certID != null) {
         len = certID.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("certID");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (certID != null) certID.print (_out, "certID", _level+1);
      if (certStatus != null) certStatus.print (_out, "certStatus", _level+1);
      if (thisUpdate != null) thisUpdate.print (_out, "thisUpdate", _level+1);
      if (nextUpdate != null) nextUpdate.print (_out, "nextUpdate", _level+1);
      if (singleExtensions != null) singleExtensions.print (_out, "singleExtensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
