/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;

public class CrlID extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ocspRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "CrlID";
   }

   public Asn1IA5String crlUrl;  // optional
   public Asn1Integer crlNum;  // optional
   public Asn1GeneralizedTime crlTime;  // optional

   public CrlID () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CrlID (
      Asn1IA5String crlUrl_,
      Asn1Integer crlNum_,
      Asn1GeneralizedTime crlTime_
   ) {
      super();
      crlUrl = crlUrl_;
      crlNum = crlNum_;
      crlTime = crlTime_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CrlID (String crlUrl_,
      long crlNum_,
      String crlTime_
   ) {
      super();
      crlUrl = new Asn1IA5String (crlUrl_);
      crlNum = new Asn1Integer (crlNum_);
      crlTime = new Asn1GeneralizedTime (crlTime_);
   }

   public void init () {
      crlUrl = null;
      crlNum = null;
      crlTime = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return crlUrl;
         case 1: return crlNum;
         case 2: return crlTime;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "crlUrl";
         case 1: return "crlNum";
         case 2: return "crlTime";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode crlUrl

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         crlUrl = new Asn1IA5String();
         crlUrl.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode crlNum

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         crlNum = new Asn1Integer();
         crlNum.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode crlTime

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         crlTime = new Asn1GeneralizedTime (true);
         crlTime.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode crlTime

      if (crlTime != null) {
         len = crlTime.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode crlNum

      if (crlNum != null) {
         len = crlNum.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode crlUrl

      if (crlUrl != null) {
         len = crlUrl.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (crlUrl != null) crlUrl.print (_out, "crlUrl", _level+1);
      if (crlNum != null) crlNum.print (_out, "crlNum", _level+1);
      if (crlTime != null) crlTime.print (_out, "crlTime", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
