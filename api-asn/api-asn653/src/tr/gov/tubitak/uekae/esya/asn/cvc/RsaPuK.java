/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.0.0, Date: 18-Mar-2016.
 */
package tr.gov.tubitak.uekae.esya.asn.cvc;

import com.objsys.asn1j.runtime.*;

public class RsaPuK extends Asn1Seq {
   private static final long serialVersionUID = 55;
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 73);

   static {
      setKey (_cvcRtkey._rtkey);
   }

   public String getAsn1TypeName()  {
      return "RsaPuK";
   }

   public Asn1OctetString oid;  // optional
   public Asn1OctetString algRef;  // optional
   public Asn1OctetString modulus;
   public Asn1OctetString exponent;

   public RsaPuK () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RsaPuK (
      Asn1OctetString oid_,
      Asn1OctetString algRef_,
      Asn1OctetString modulus_,
      Asn1OctetString exponent_
   ) {
      super();
      oid = oid_;
      algRef = algRef_;
      modulus = modulus_;
      exponent = exponent_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RsaPuK (
      Asn1OctetString modulus_,
      Asn1OctetString exponent_
   ) {
      super();
      modulus = modulus_;
      exponent = exponent_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RsaPuK (byte[] oid_,
      byte[] algRef_,
      byte[] modulus_,
      byte[] exponent_
   ) {
      super();
      oid = new Asn1OctetString (oid_);
      algRef = new Asn1OctetString (algRef_);
      modulus = new Asn1OctetString (modulus_);
      exponent = new Asn1OctetString (exponent_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RsaPuK (
      byte[] modulus_,
      byte[] exponent_
   ) {
      super();
      modulus = new Asn1OctetString (modulus_);
      exponent = new Asn1OctetString (exponent_);
   }

   public void init () {
      oid = null;
      algRef = null;
      modulus = null;
      exponent = null;
   }

   public int getElementCount() { return 4; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return oid;
         case 1: return algRef;
         case 2: return modulus;
         case 3: return exponent;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "oid";
         case 1: return "algRef";
         case 2: return "modulus";
         case 3: return "exponent";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode oid

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, true)) {
         int offset = buffer.getByteCount();
         oid = new Asn1OctetString();
         oid.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode algRef

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         algRef = new Asn1OctetString();
         algRef.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode modulus

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         modulus = new Asn1OctetString();
         modulus.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "modulus");

      // decode exponent

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         exponent = new Asn1OctetString();
         exponent.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "exponent");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode exponent

      if (exponent != null) {
         len = exponent.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("exponent");

      // encode modulus

      if (modulus != null) {
         len = modulus.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("modulus");

      // encode algRef

      if (algRef != null) {
         len = algRef.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }

      // encode oid

      if (oid != null) {
         len = oid.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (oid != null) oid.print (_out, "oid", _level+1);
      if (algRef != null) algRef.print (_out, "algRef", _level+1);
      if (modulus != null) modulus.print (_out, "modulus", _level+1);
      if (exponent != null) exponent.print (_out, "exponent", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
