/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.attrcert;

import com.objsys.asn1j.runtime.*;

public class Clearance extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_attrcertRtkey._rtkey);
	}

   public Asn1ObjectIdentifier policyId;
   public ClassList classList;  // optional
   public _SetOfSecurityCategory securityCategories;  // optional

   public Clearance () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Clearance (
      Asn1ObjectIdentifier policyId_,
      ClassList classList_,
      _SetOfSecurityCategory securityCategories_
   ) {
      super();
      policyId = policyId_;
      classList = classList_;
      securityCategories = securityCategories_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Clearance (
      Asn1ObjectIdentifier policyId_
   ) {
      super();
      policyId = policyId_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Clearance (int[] policyId_,
      ClassList classList_,
      _SetOfSecurityCategory securityCategories_
   ) {
      super();
      policyId = new Asn1ObjectIdentifier (policyId_);
      classList = classList_;
      securityCategories = securityCategories_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Clearance (
      int[] policyId_
   ) {
      super();
      policyId = new Asn1ObjectIdentifier (policyId_);
   }

   public void init () {
      policyId = null;
      classList = null;
      securityCategories = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode policyId

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         policyId = new Asn1ObjectIdentifier();
         policyId.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "policyId");

      // decode classList

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         classList = new ClassList();
         classList.decode (buffer, true, elemLen.value);
      }

      // decode securityCategories

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
         securityCategories = new _SetOfSecurityCategory();
         securityCategories.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 17))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode securityCategories

      if (securityCategories != null) {
         len = securityCategories.encode (buffer, true);
         _aal += len;
      }

      // encode classList

      if (classList != null) {
         len = classList.encode (buffer, true);
         _aal += len;
      }

      // encode policyId

      if (policyId != null) {
         len = policyId.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("policyId");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (policyId != null) policyId.print (_out, "policyId", _level+1);
      if (classList != null) classList.print (_out, "classList", _level+1);
      if (securityCategories != null) securityCategories.print (_out, "securityCategories", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}