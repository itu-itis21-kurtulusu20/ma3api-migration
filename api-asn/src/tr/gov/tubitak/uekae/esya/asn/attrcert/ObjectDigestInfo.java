/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.attrcert;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class ObjectDigestInfo extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_attrcertRtkey._rtkey);
	}

   public ObjectDigestInfo_digestedObjectType digestedObjectType = null;
   public Asn1ObjectIdentifier otherObjectTypeID;  // optional
   public AlgorithmIdentifier digestAlgorithm;
   public Asn1BitString objectDigest;

   public ObjectDigestInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ObjectDigestInfo (
      ObjectDigestInfo_digestedObjectType digestedObjectType_,
      Asn1ObjectIdentifier otherObjectTypeID_,
      AlgorithmIdentifier digestAlgorithm_,
      Asn1BitString objectDigest_
   ) {
      super();
      digestedObjectType = digestedObjectType_;
      otherObjectTypeID = otherObjectTypeID_;
      digestAlgorithm = digestAlgorithm_;
      objectDigest = objectDigest_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ObjectDigestInfo (
      ObjectDigestInfo_digestedObjectType digestedObjectType_,
      AlgorithmIdentifier digestAlgorithm_,
      Asn1BitString objectDigest_
   ) {
      super();
      digestedObjectType = digestedObjectType_;
      digestAlgorithm = digestAlgorithm_;
      objectDigest = objectDigest_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ObjectDigestInfo (ObjectDigestInfo_digestedObjectType digestedObjectType_,
      int[] otherObjectTypeID_,
      AlgorithmIdentifier digestAlgorithm_,
      Asn1BitString objectDigest_
   ) {
      super();
      digestedObjectType = digestedObjectType_;
      otherObjectTypeID = new Asn1ObjectIdentifier (otherObjectTypeID_);
      digestAlgorithm = digestAlgorithm_;
      objectDigest = objectDigest_;
   }

   public void init () {
      digestedObjectType = null;
      otherObjectTypeID = null;
      digestAlgorithm = null;
      objectDigest = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode digestedObjectType

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
         int tval = buffer.decodeEnumValue (ObjectDigestInfo_digestedObjectType.TAG, true, elemLen.value);
         digestedObjectType = ObjectDigestInfo_digestedObjectType.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer, "digestedObjectType");

      // decode otherObjectTypeID

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         otherObjectTypeID = new Asn1ObjectIdentifier();
         otherObjectTypeID.decode (buffer, true, elemLen.value);
      }

      // decode digestAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         digestAlgorithm = new AlgorithmIdentifier();
         digestAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "digestAlgorithm");

      // decode objectDigest

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         objectDigest = new Asn1BitString();
         objectDigest.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "objectDigest");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 10) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode objectDigest

      if (objectDigest != null) {
         len = objectDigest.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("objectDigest");

      // encode digestAlgorithm

      if (digestAlgorithm != null) {
         len = digestAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("digestAlgorithm");

      // encode otherObjectTypeID

      if (otherObjectTypeID != null) {
         len = otherObjectTypeID.encode (buffer, true);
         _aal += len;
      }

      // encode digestedObjectType

      if (digestedObjectType != null) {
         len = digestedObjectType.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("digestedObjectType");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (digestedObjectType != null) digestedObjectType.print (_out, "digestedObjectType", _level+1);
      if (otherObjectTypeID != null) otherObjectTypeID.print (_out, "otherObjectTypeID", _level+1);
      if (digestAlgorithm != null) digestAlgorithm.print (_out, "digestAlgorithm", _level+1);
      if (objectDigest != null) objectDigest.print (_out, "objectDigest", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}