/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.algorithms;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class Characteristic_two extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_algorithmsRtkey._rtkey);
	}

   public Asn1Integer m;
   public Asn1ObjectIdentifier basis;
   public Asn1OpenType parameters;

   public Characteristic_two () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Characteristic_two (
      Asn1Integer m_,
      Asn1ObjectIdentifier basis_,
      Asn1OpenType parameters_
   ) {
      super();
      m = m_;
      basis = basis_;
      parameters = parameters_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Characteristic_two (long m_,
      int[] basis_,
      Asn1OpenType parameters_
   ) {
      super();
      m = new Asn1Integer (m_);
      basis = new Asn1ObjectIdentifier (basis_);
      parameters = parameters_;
   }

   public void init () {
      m = null;
      basis = null;
      parameters = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode m

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         m = new Asn1Integer();
         m.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "m");

      // decode basis

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         basis = new Asn1ObjectIdentifier();
         basis.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "basis");

      // decode parameters

      if (!_context.expired ()) {
         parameters = new Asn1OpenType();
         parameters.decode (buffer, true, 0);
      }
      else throw new Asn1MissingRequiredException (buffer);

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode parameters

      if (parameters != null) {
         len = parameters.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("parameters");

      // encode basis

      if (basis != null) {
         len = basis.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("basis");

      // encode m

      if (m != null) {
         len = m.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("m");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (m != null) m.print (_out, "m", _level+1);
      if (basis != null) basis.print (_out, "basis", _level+1);
      if (parameters != null) parameters.print (_out, "parameters", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}