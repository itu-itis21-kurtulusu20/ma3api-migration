/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 07-Aug-2018.
 */
package tr.gov.tubitak.uekae.esya.asn.algorithms;

import com.objsys.asn1j.runtime.*;

public class GCMParameters extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_algorithmsRtkey._rtkey);
   }

   public Asn1OctetString aes_nonce;
   public Asn1Integer aes_ICVlen;  // default = 12()

   public GCMParameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public GCMParameters (
      Asn1OctetString aes_nonce_,
      Asn1Integer aes_ICVlen_
   ) {
      super();
      aes_nonce = aes_nonce_;
      aes_ICVlen = aes_ICVlen_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public GCMParameters (
      Asn1OctetString aes_nonce_
   ) {
      super();
      aes_nonce = aes_nonce_;
      aes_ICVlen = new Asn1Integer (12);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public GCMParameters (byte[] aes_nonce_,
      long aes_ICVlen_
   ) {
      super();
      aes_nonce = new Asn1OctetString (aes_nonce_);
      aes_ICVlen = new Asn1Integer (aes_ICVlen_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public GCMParameters (
      byte[] aes_nonce_
   ) {
      super();
      aes_nonce = new Asn1OctetString (aes_nonce_);
      aes_ICVlen = new Asn1Integer (12);
   }

   public void init () {
      aes_nonce = null;
      aes_ICVlen = new Asn1Integer (12);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode aes_nonce

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         aes_nonce = new Asn1OctetString();
         aes_nonce.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "aes_nonce");

      // decode aes_ICVlen

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         aes_ICVlen = new Asn1Integer();
         aes_ICVlen.decode (buffer, true, elemLen.value);
         if (!((aes_ICVlen.value == 12 || aes_ICVlen.value == 13 || aes_ICVlen.value == 14 || aes_ICVlen.value == 15 || aes_ICVlen.value == 16))) {
            throw new Asn1ConsVioException ("aes_ICVlen.value", aes_ICVlen.value);
         }

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode aes_ICVlen

      if (aes_ICVlen != null) {
         if (!aes_ICVlen.equals (12)) {
            if (!((aes_ICVlen.value == 12 || aes_ICVlen.value == 13 || aes_ICVlen.value == 14 || aes_ICVlen.value == 15 || aes_ICVlen.value == 16))) {
               throw new Asn1ConsVioException ("aes_ICVlen.value", aes_ICVlen.value);
            }

            len = aes_ICVlen.encode (buffer, true);
            _aal += len;
         }
      }

      // encode aes_nonce

      if (aes_nonce != null) {
         len = aes_nonce.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("aes_nonce");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (aes_nonce != null) aes_nonce.print (_out, "aes_nonce", _level+1);
      if (aes_ICVlen != null) aes_ICVlen.print (_out, "aes_ICVlen", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
