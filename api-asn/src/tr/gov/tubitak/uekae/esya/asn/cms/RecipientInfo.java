/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class RecipientInfo extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   // Choice element identifier constants
   public final static byte _KTRI = 1;
   public final static byte _KARI = 2;
   public final static byte _KEKRI = 3;
   public final static byte _PWRI = 4;
   public final static byte _ORI = 5;

   public RecipientInfo () {
      super();
   }

   public RecipientInfo (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _KTRI: return "ktri";
      case _KARI: return "kari";
      case _KEKRI: return "kekri";
      case _PWRI: return "pwri";
      case _ORI: return "ori";
      default: return "UNDEFINED";
      }
   }

   public void set_ktri (KeyTransRecipientInfo value) {
      setElement (_KTRI, value);
   }

   public void set_kari (KeyAgreeRecipientInfo value) {
      setElement (_KARI, value);
   }

   public void set_kekri (KEKRecipientInfo value) {
      setElement (_KEKRI, value);
   }

   public void set_pwri (PasswordRecipientInfo value) {
      setElement (_PWRI, value);
   }

   public void set_ori (OtherRecipientInfo value) {
      setElement (_ORI, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
      {
         buffer.reset();
         KeyTransRecipientInfo ktri;
         ktri = new KeyTransRecipientInfo();
         ktri.decode (buffer, true, len);
         setElement (_KTRI, ktri);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
      {
         KeyAgreeRecipientInfo kari;
         kari = new KeyAgreeRecipientInfo();
         kari.decode (buffer, false, len);
         setElement (_KARI, kari);
         if (len == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
      {
         KEKRecipientInfo kekri;
         kekri = new KEKRecipientInfo();
         kekri.decode (buffer, false, len);
         setElement (_KEKRI, kekri);
         if (len == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
      {
         PasswordRecipientInfo pwri;
         pwri = new PasswordRecipientInfo();
         pwri.decode (buffer, false, len);
         setElement (_PWRI, pwri);
         if (len == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))
      {
         OtherRecipientInfo ori;
         ori = new OtherRecipientInfo();
         ori.decode (buffer, false, len);
         setElement (_ORI, ori);
         if (len == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode ktri
      case _KTRI:
         KeyTransRecipientInfo ktri = (KeyTransRecipientInfo) getElement();
         len = ktri.encode (buffer, true);
         _aal += len;
         break;

      // encode kari
      case _KARI:
         KeyAgreeRecipientInfo kari = (KeyAgreeRecipientInfo) getElement();
         len = kari.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
         break;

      // encode kekri
      case _KEKRI:
         KEKRecipientInfo kekri = (KEKRecipientInfo) getElement();
         len = kekri.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
         break;

      // encode pwri
      case _PWRI:
         PasswordRecipientInfo pwri = (PasswordRecipientInfo) getElement();
         len = pwri.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
         break;

      // encode ori
      case _ORI:
         OtherRecipientInfo ori = (OtherRecipientInfo) getElement();
         len = ori.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
