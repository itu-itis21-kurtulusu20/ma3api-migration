/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-May-2024.
 */
package tr.gov.tubitak.uekae.esya.asn.scencryptedpackage;

import com.objsys.asn1j.runtime.*;

public class EncryptedDataPackage extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
   }

   public Asn1Integer version;
   public Asn1OctetString wrappedKey;
   public Asn1OctetString iv;
   public Asn1OctetString aad;  // optional
   public Asn1OctetString encryptedData;

   public EncryptedDataPackage () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EncryptedDataPackage (
      Asn1Integer version_,
      Asn1OctetString wrappedKey_,
      Asn1OctetString iv_,
      Asn1OctetString aad_,
      Asn1OctetString encryptedData_
   ) {
      super();
      version = version_;
      wrappedKey = wrappedKey_;
      iv = iv_;
      aad = aad_;
      encryptedData = encryptedData_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EncryptedDataPackage (
      Asn1Integer version_,
      Asn1OctetString wrappedKey_,
      Asn1OctetString iv_,
      Asn1OctetString encryptedData_
   ) {
      super();
      version = version_;
      wrappedKey = wrappedKey_;
      iv = iv_;
      encryptedData = encryptedData_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EncryptedDataPackage (long version_,
      byte[] wrappedKey_,
      byte[] iv_,
      byte[] aad_,
      byte[] encryptedData_
   ) {
      super();
      version = new Asn1Integer (version_);
      wrappedKey = new Asn1OctetString (wrappedKey_);
      iv = new Asn1OctetString (iv_);
      aad = new Asn1OctetString (aad_);
      encryptedData = new Asn1OctetString (encryptedData_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EncryptedDataPackage (
      long version_,
      byte[] wrappedKey_,
      byte[] iv_,
      byte[] encryptedData_
   ) {
      super();
      version = new Asn1Integer (version_);
      wrappedKey = new Asn1OctetString (wrappedKey_);
      iv = new Asn1OctetString (iv_);
      encryptedData = new Asn1OctetString (encryptedData_);
   }

   public void init () {
      version = null;
      wrappedKey = null;
      iv = null;
      aad = null;
      encryptedData = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         version = new Asn1Integer();
         version.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode wrappedKey

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         wrappedKey = new Asn1OctetString();
         wrappedKey.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "wrappedKey");

      // decode iv

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         iv = new Asn1OctetString();
         iv.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "iv");

      // decode aad

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         aad = new Asn1OctetString();
         aad.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode encryptedData

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
         int offset = buffer.getByteCount();
         encryptedData = new Asn1OctetString();
         encryptedData.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "encryptedData");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 4))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode encryptedData

      if (encryptedData != null) {
         len = encryptedData.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("encryptedData");

      // encode aad

      if (aad != null) {
         len = aad.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
         _aal += len;
      }

      // encode iv

      if (iv != null) {
         len = iv.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("iv");

      // encode wrappedKey

      if (wrappedKey != null) {
         len = wrappedKey.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("wrappedKey");

      // encode version

      if (version != null) {
         len = version.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (wrappedKey != null) wrappedKey.print (_out, "wrappedKey", _level+1);
      if (iv != null) iv.print (_out, "iv", _level+1);
      if (aad != null) aad.print (_out, "aad", _level+1);
      if (encryptedData != null) encryptedData.print (_out, "encryptedData", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
