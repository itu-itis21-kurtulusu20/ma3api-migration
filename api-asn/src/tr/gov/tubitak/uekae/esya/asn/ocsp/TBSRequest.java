/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;
import tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

public class TBSRequest extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_ocspRtkey._rtkey);
	}

   public Version version;  // default = Version.v1()
   public GeneralName requestorName;  // optional
   public _SeqOfRequest requestList;
   public Extensions requestExtensions;  // optional

   public TBSRequest () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TBSRequest (
      Version version_,
      GeneralName requestorName_,
      _SeqOfRequest requestList_,
      Extensions requestExtensions_
   ) {
      super();
      version = version_;
      requestorName = requestorName_;
      requestList = requestList_;
      requestExtensions = requestExtensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TBSRequest (
      _SeqOfRequest requestList_
   ) {
      super();
      version = new Version (Version.v1);
      requestList = requestList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TBSRequest (long version_,
      GeneralName requestorName_,
      _SeqOfRequest requestList_,
      Extensions requestExtensions_
   ) {
      super();
      version = new Version (version_);
      requestorName = requestorName_;
      requestList = requestList_;
      requestExtensions = requestExtensions_;
   }

   public void init () {
      version = new Version (Version.v1);
      requestorName = null;
      requestList = null;
      requestExtensions = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         version = new Version();
         version.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode requestorName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         requestorName = new GeneralName();
         requestorName.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode requestList

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         requestList = new _SeqOfRequest();
         requestList.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "requestList");

      // decode requestExtensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         requestExtensions = new Extensions();
         requestExtensions.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode requestExtensions

      if (requestExtensions != null) {
         len = requestExtensions.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode requestList

      if (requestList != null) {
         len = requestList.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("requestList");

      // encode requestorName

      if (requestorName != null) {
         len = requestorName.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode version

      if (version != null) {
         if (!version.equals (Version.v1)) {
            len = version.encode (buffer, true);
            len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (requestorName != null) requestorName.print (_out, "requestorName", _level+1);
      if (requestList != null) requestList.print (_out, "requestList", _level+1);
      if (requestExtensions != null) requestExtensions.print (_out, "requestExtensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
