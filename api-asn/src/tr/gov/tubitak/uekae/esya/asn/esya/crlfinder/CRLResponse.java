/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.esya.crlfinder;

import com.objsys.asn1j.runtime.*;

public class CRLResponse extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_crlfinderRtkey._rtkey);
	}

   public CRLResponseStatus responseStatus = null;
   public CRLResponse_responseBytes responseBytes;  // optional

   public CRLResponse () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CRLResponse (
      CRLResponseStatus responseStatus_,
      CRLResponse_responseBytes responseBytes_
   ) {
      super();
      responseStatus = responseStatus_;
      responseBytes = responseBytes_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CRLResponse (
      CRLResponseStatus responseStatus_
   ) {
      super();
      responseStatus = responseStatus_;
   }

   public void init () {
      responseStatus = null;
      responseBytes = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode responseStatus

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
         int tval = buffer.decodeEnumValue (CRLResponseStatus.TAG, true, elemLen.value);
         responseStatus = CRLResponseStatus.valueOf (tval);
      }
      else throw new Asn1MissingRequiredException (buffer, "responseStatus");

      // decode responseBytes

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         responseBytes = new CRLResponse_responseBytes();
         responseBytes.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 10) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode responseBytes

      if (responseBytes != null) {
         len = responseBytes.encode (buffer, true);
         _aal += len;
      }

      // encode responseStatus

      if (responseStatus != null) {
         len = responseStatus.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("responseStatus");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (responseStatus != null) responseStatus.print (_out, "responseStatus", _level+1);
      if (responseBytes != null) responseBytes.print (_out, "responseBytes", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
