/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class PolicyConstraints extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public Asn1Integer requireExplicitPolicy;  // optional
   public Asn1Integer inhibitPolicyMapping;  // optional

   public PolicyConstraints () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PolicyConstraints (
      Asn1Integer requireExplicitPolicy_,
      Asn1Integer inhibitPolicyMapping_
   ) {
      super();
      requireExplicitPolicy = requireExplicitPolicy_;
      inhibitPolicyMapping = inhibitPolicyMapping_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PolicyConstraints (long requireExplicitPolicy_,
      long inhibitPolicyMapping_
   ) {
      super();
      requireExplicitPolicy = new Asn1Integer (requireExplicitPolicy_);
      inhibitPolicyMapping = new Asn1Integer (inhibitPolicyMapping_);
   }

   public void init () {
      requireExplicitPolicy = null;
      inhibitPolicyMapping = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PolicyConstraints) ) return false;

      PolicyConstraints rhs = (PolicyConstraints) obj;

      if (requireExplicitPolicy == null) {
         if (rhs.requireExplicitPolicy != null) return false;
      }
      else {
         if (!requireExplicitPolicy.equals(rhs.requireExplicitPolicy)) {
            return false;
         }
      }

      if (inhibitPolicyMapping == null) {
         if (rhs.inhibitPolicyMapping != null) return false;
      }
      else {
         if (!inhibitPolicyMapping.equals(rhs.inhibitPolicyMapping)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (requireExplicitPolicy != null) __code = 31*__code + requireExplicitPolicy.hashCode();
      if (inhibitPolicyMapping != null) __code = 31*__code + inhibitPolicyMapping.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode requireExplicitPolicy

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         requireExplicitPolicy = new Asn1Integer();
         requireExplicitPolicy.decode (buffer, false, elemLen.value);
         if (!(requireExplicitPolicy.value >= 0)) {
            throw new Asn1ConsVioException ("requireExplicitPolicy.value", requireExplicitPolicy.value);
         }

      }

      // decode inhibitPolicyMapping

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         inhibitPolicyMapping = new Asn1Integer();
         inhibitPolicyMapping.decode (buffer, false, elemLen.value);
         if (!(inhibitPolicyMapping.value >= 0)) {
            throw new Asn1ConsVioException ("inhibitPolicyMapping.value", inhibitPolicyMapping.value);
         }

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode inhibitPolicyMapping

      if (inhibitPolicyMapping != null) {
         if (!(inhibitPolicyMapping.value >= 0)) {
            throw new Asn1ConsVioException ("inhibitPolicyMapping.value", inhibitPolicyMapping.value);
         }

         len = inhibitPolicyMapping.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode requireExplicitPolicy

      if (requireExplicitPolicy != null) {
         if (!(requireExplicitPolicy.value >= 0)) {
            throw new Asn1ConsVioException ("requireExplicitPolicy.value", requireExplicitPolicy.value);
         }

         len = requireExplicitPolicy.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (requireExplicitPolicy != null) requireExplicitPolicy.print (_out, "requireExplicitPolicy", _level+1);
      if (inhibitPolicyMapping != null) inhibitPolicyMapping.print (_out, "inhibitPolicyMapping", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
