/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkixtsp;

import com.objsys.asn1j.runtime.*;

public class Accuracy extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkixtspRtkey._rtkey);
   }

   public Asn1Integer seconds;  // optional
   public Asn1Integer millis;  // optional
   public Asn1Integer micros;  // optional

   public Accuracy () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Accuracy (
      Asn1Integer seconds_,
      Asn1Integer millis_,
      Asn1Integer micros_
   ) {
      super();
      seconds = seconds_;
      millis = millis_;
      micros = micros_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Accuracy (long seconds_,
      long millis_,
      long micros_
   ) {
      super();
      seconds = new Asn1Integer (seconds_);
      millis = new Asn1Integer (millis_);
      micros = new Asn1Integer (micros_);
   }

   public void init () {
      seconds = null;
      millis = null;
      micros = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode seconds

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         seconds = new Asn1Integer();
         seconds.decode (buffer, true, elemLen.value);
      }

      // decode millis

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         millis = new Asn1Integer();
         millis.decode (buffer, false, elemLen.value);
         if (!((millis.value >= 1 && millis.value <= 999))) {
            throw new Asn1ConsVioException ("millis.value", millis.value);
         }

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode micros

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         micros = new Asn1Integer();
         micros.decode (buffer, false, elemLen.value);
         if (!((micros.value >= 1 && micros.value <= 999))) {
            throw new Asn1ConsVioException ("micros.value", micros.value);
         }

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode micros

      if (micros != null) {
         if (!((micros.value >= 1 && micros.value <= 999))) {
            throw new Asn1ConsVioException ("micros.value", micros.value);
         }

         len = micros.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode millis

      if (millis != null) {
         if (!((millis.value >= 1 && millis.value <= 999))) {
            throw new Asn1ConsVioException ("millis.value", millis.value);
         }

         len = millis.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }

      // encode seconds

      if (seconds != null) {
         len = seconds.encode (buffer, true);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (seconds != null) seconds.print (_out, "seconds", _level+1);
      if (millis != null) millis.print (_out, "millis", _level+1);
      if (micros != null) micros.print (_out, "micros", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
