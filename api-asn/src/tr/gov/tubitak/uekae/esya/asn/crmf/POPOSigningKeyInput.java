/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.crmf;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.SubjectPublicKeyInfo;

public class POPOSigningKeyInput extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_crmfRtkey._rtkey);
	}

   public POPOSigningKeyInput_authInfo authInfo;
   public SubjectPublicKeyInfo publicKey;

   public POPOSigningKeyInput () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public POPOSigningKeyInput (
      POPOSigningKeyInput_authInfo authInfo_,
      SubjectPublicKeyInfo publicKey_
   ) {
      super();
      authInfo = authInfo_;
      publicKey = publicKey_;
   }

   public void init () {
      authInfo = null;
      publicKey = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode authInfo

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            authInfo = new POPOSigningKeyInput_authInfo();
            authInfo.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "authInfo");
      }
      else throw new Asn1MissingRequiredException (buffer, "authInfo");

      // decode publicKey

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         publicKey = new SubjectPublicKeyInfo();
         publicKey.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "publicKey");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode publicKey

      if (publicKey != null) {
         len = publicKey.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("publicKey");

      // encode authInfo

      if (authInfo != null) {
         len = authInfo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("authInfo");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (authInfo != null) authInfo.print (_out, "authInfo", _level+1);
      if (publicKey != null) publicKey.print (_out, "publicKey", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
