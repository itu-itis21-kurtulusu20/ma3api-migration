/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class PersonalName extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public Asn1PrintableString surname;
   public Asn1PrintableString given_name;  // optional
   public Asn1PrintableString initials;  // optional
   public Asn1PrintableString generation_qualifier;  // optional

   public PersonalName () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PersonalName (
      Asn1PrintableString surname_,
      Asn1PrintableString given_name_,
      Asn1PrintableString initials_,
      Asn1PrintableString generation_qualifier_
   ) {
      super();
      surname = surname_;
      given_name = given_name_;
      initials = initials_;
      generation_qualifier = generation_qualifier_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PersonalName (
      Asn1PrintableString surname_
   ) {
      super();
      surname = surname_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PersonalName (String surname_,
      String given_name_,
      String initials_,
      String generation_qualifier_
   ) {
      super();
      surname = new Asn1PrintableString (surname_);
      given_name = new Asn1PrintableString (given_name_);
      initials = new Asn1PrintableString (initials_);
      generation_qualifier = new Asn1PrintableString (generation_qualifier_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PersonalName (
      String surname_
   ) {
      super();
      surname = new Asn1PrintableString (surname_);
   }

   public void init () {
      surname = null;
      given_name = null;
      initials = null;
      generation_qualifier = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PersonalName) ) return false;

      PersonalName rhs = (PersonalName) obj;

      if (surname == null) {
         if (rhs.surname != null) return false;
      }
      else {
         if (!surname.equals(rhs.surname)) {
            return false;
         }
      }

      if (given_name == null) {
         if (rhs.given_name != null) return false;
      }
      else {
         if (!given_name.equals(rhs.given_name)) {
            return false;
         }
      }

      if (initials == null) {
         if (rhs.initials != null) return false;
      }
      else {
         if (!initials.equals(rhs.initials)) {
            return false;
         }
      }

      if (generation_qualifier == null) {
         if (rhs.generation_qualifier != null) return false;
      }
      else {
         if (!generation_qualifier.equals(rhs.generation_qualifier)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (surname != null) __code = 31*__code + surname.hashCode();
      if (given_name != null) __code = 31*__code + given_name.hashCode();
      if (initials != null) __code = 31*__code + initials.hashCode();
      if (generation_qualifier != null) __code = 31*__code + generation_qualifier.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SET) : implicitLength;

      init ();

      // decode SET

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      Asn1Tag tag = new Asn1Tag ();

      while (!_context.expired()) {
         buffer.mark (8);

         int len = buffer.decodeTagAndLength (tag);

         // decode surname

         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
         {
            if (! _context.hasDecoded (tag)) {
               _context.addTag (tag);
               surname = new Asn1PrintableString();
               surname.decode (buffer, false, len);
               if (!((surname.getLength() >= 1 && surname.getLength() <= 40))) {
                  throw new Asn1ConsVioException ("surname.getLength()", surname.getLength());
               }

            }
            else throw new Asn1SetDuplicateException (buffer, tag);
         }
         // decode given_name

         else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
         {
            if (! _context.hasDecoded (tag)) {
               _context.addTag (tag);
               given_name = new Asn1PrintableString();
               given_name.decode (buffer, false, len);
               if (!((given_name.getLength() >= 1 && given_name.getLength() <= 16))) {
                  throw new Asn1ConsVioException ("given_name.getLength()", given_name.getLength());
               }

            }
            else throw new Asn1SetDuplicateException (buffer, tag);
         }
         // decode initials

         else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
         {
            if (! _context.hasDecoded (tag)) {
               _context.addTag (tag);
               initials = new Asn1PrintableString();
               initials.decode (buffer, false, len);
               if (!((initials.getLength() >= 1 && initials.getLength() <= 5))) {
                  throw new Asn1ConsVioException ("initials.getLength()", initials.getLength());
               }

            }
            else throw new Asn1SetDuplicateException (buffer, tag);
         }
         // decode generation_qualifier

         else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
         {
            if (! _context.hasDecoded (tag)) {
               _context.addTag (tag);
               generation_qualifier = new Asn1PrintableString();
               generation_qualifier.decode (buffer, false, len);
               if (!((generation_qualifier.getLength() >= 1 && generation_qualifier.
                  getLength() <= 3))) {
                  throw new Asn1ConsVioException ("generation_qualifier.getLength()", generation_qualifier.getLength());
               }

            }
            else throw new Asn1SetDuplicateException (buffer, tag);
         }
         else throw new Asn1NotInSetException (buffer, tag);
      }

      if (null == surname)
         throw new Asn1MissingRequiredException (buffer);

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode generation_qualifier

      if (generation_qualifier != null) {
         if (!((generation_qualifier.getLength() >= 1 && generation_qualifier.
            getLength() <= 3))) {
            throw new Asn1ConsVioException ("generation_qualifier.getLength()", generation_qualifier.getLength());
         }

         len = generation_qualifier.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
         _aal += len;
      }

      // encode initials

      if (initials != null) {
         if (!((initials.getLength() >= 1 && initials.getLength() <= 5))) {
            throw new Asn1ConsVioException ("initials.getLength()", initials.getLength());
         }

         len = initials.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
      }

      // encode given_name

      if (given_name != null) {
         if (!((given_name.getLength() >= 1 && given_name.getLength() <= 16))) {
            throw new Asn1ConsVioException ("given_name.getLength()", given_name.getLength());
         }

         len = given_name.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode surname

      if (surname != null) {
         if (!((surname.getLength() >= 1 && surname.getLength() <= 40))) {
            throw new Asn1ConsVioException ("surname.getLength()", surname.getLength());
         }

         len = surname.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("surname");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SET, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (surname != null) surname.print (_out, "surname", _level+1);
      if (given_name != null) given_name.print (_out, "given_name", _level+1);
      if (initials != null) initials.print (_out, "initials", _level+1);
      if (generation_qualifier != null) generation_qualifier.print (_out, "generation_qualifier", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
