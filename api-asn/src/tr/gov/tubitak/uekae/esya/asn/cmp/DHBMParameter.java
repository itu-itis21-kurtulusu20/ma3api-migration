/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class DHBMParameter extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public AlgorithmIdentifier owf;
   public AlgorithmIdentifier mac;

   public DHBMParameter () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DHBMParameter (
      AlgorithmIdentifier owf_,
      AlgorithmIdentifier mac_
   ) {
      super();
      owf = owf_;
      mac = mac_;
   }

   public void init () {
      owf = null;
      mac = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode owf

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         owf = new AlgorithmIdentifier();
         owf.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "owf");

      // decode mac

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         mac = new AlgorithmIdentifier();
         mac.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "mac");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode mac

      if (mac != null) {
         len = mac.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("mac");

      // encode owf

      if (owf != null) {
         len = owf.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("owf");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (owf != null) owf.print (_out, "owf", _level+1);
      if (mac != null) mac.print (_out, "mac", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
