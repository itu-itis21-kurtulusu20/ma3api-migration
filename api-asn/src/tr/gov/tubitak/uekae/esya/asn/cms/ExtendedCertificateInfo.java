/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Certificate;

public class ExtendedCertificateInfo extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public CMSVersion version;
   public Certificate certificate;
   public UnauthAttributes attributes;

   public ExtendedCertificateInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ExtendedCertificateInfo (
      CMSVersion version_,
      Certificate certificate_,
      UnauthAttributes attributes_
   ) {
      super();
      version = version_;
      certificate = certificate_;
      attributes = attributes_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ExtendedCertificateInfo (long version_,
      Certificate certificate_,
      UnauthAttributes attributes_
   ) {
      super();
      version = new CMSVersion (version_);
      certificate = certificate_;
      attributes = attributes_;
   }

   public void init () {
      version = null;
      certificate = null;
      attributes = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new CMSVersion();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode certificate

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         certificate = new Certificate();
         certificate.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "certificate");

      // decode attributes

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
         attributes = new UnauthAttributes();
         attributes.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "attributes");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 17))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode attributes

      if (attributes != null) {
         len = attributes.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("attributes");

      // encode certificate

      if (certificate != null) {
         len = certificate.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("certificate");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (certificate != null) certificate.print (_out, "certificate", _level+1);
      if (attributes != null) attributes.print (_out, "attributes", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
