/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class EnuRevReq extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   // Integer constants for switch-case
   public static final int _CLRCHECK = 0;
   public static final int _OCSPCHECK = 1;
   public static final int _BOTHCHECK = 2;
   public static final int _EITHERCHECK = 3;
   public static final int _NOCHECK = 4;
   public static final int _OTHER = 5;

   // Singleton instances of EnuRevReq
   protected static final EnuRevReq _clrCheck = new EnuRevReq(0);
   protected static final EnuRevReq _ocspCheck = new EnuRevReq(1);
   protected static final EnuRevReq _bothCheck = new EnuRevReq(2);
   protected static final EnuRevReq _eitherCheck = new EnuRevReq(3);
   protected static final EnuRevReq _noCheck = new EnuRevReq(4);
   protected static final EnuRevReq _other = new EnuRevReq(5);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    *   4
    *   5
    */
   protected EnuRevReq (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for clrCheck.
    */
   public static EnuRevReq clrCheck() {
      return _clrCheck;
   }

   /**
    * Singleton accessor method for ocspCheck.
    */
   public static EnuRevReq ocspCheck() {
      return _ocspCheck;
   }

   /**
    * Singleton accessor method for bothCheck.
    */
   public static EnuRevReq bothCheck() {
      return _bothCheck;
   }

   /**
    * Singleton accessor method for eitherCheck.
    */
   public static EnuRevReq eitherCheck() {
      return _eitherCheck;
   }

   /**
    * Singleton accessor method for noCheck.
    */
   public static EnuRevReq noCheck() {
      return _noCheck;
   }

   /**
    * Singleton accessor method for other.
    */
   public static EnuRevReq other() {
      return _other;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1BerDecoder{

      public Asn1Type decode(Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength) throws Asn1Exception, java.io.IOException
      {
         return EnuRevReq.valueOf( buffer.decodeEnumValue(explicit, implicitLength) );
      }
   }
   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static EnuRevReq valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return clrCheck();
         case 1: return ocspCheck();
         case 2: return bothCheck();
         case 3: return eitherCheck();
         case 4: return noCheck();
         case 5: return other();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      if (!(value == 0 ||
            value == 1 ||
            value == 2 ||
            value == 3 ||
            value == 4 ||
            value == 5))
      {
         throw new Asn1InvalidEnumException (value);
      }

      int len;
      len = super.encode (buffer, explicit);
      return (len);
   }

   public String toString () {
      switch ((int)value) {
         case 0: return ("clrCheck");
         case 1: return ("ocspCheck");
         case 2: return ("bothCheck");
         case 3: return ("eitherCheck");
         case 4: return ("noCheck");
         case 5: return ("other");
         default: return ("UNDEFINED");
      }
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " = " + toString());
   }
}
