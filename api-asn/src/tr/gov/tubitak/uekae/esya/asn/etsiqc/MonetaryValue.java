/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.etsiqc;

import com.objsys.asn1j.runtime.*;

public class MonetaryValue extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_etsiqcRtkey._rtkey);
	}

   public Iso4217CurrencyCode currency;
   public Asn1Integer amount;
   public Asn1Integer exponent;

   public MonetaryValue () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MonetaryValue (
      Iso4217CurrencyCode currency_,
      Asn1Integer amount_,
      Asn1Integer exponent_
   ) {
      super();
      currency = currency_;
      amount = amount_;
      exponent = exponent_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MonetaryValue (Iso4217CurrencyCode currency_,
      long amount_,
      long exponent_
   ) {
      super();
      currency = currency_;
      amount = new Asn1Integer (amount_);
      exponent = new Asn1Integer (exponent_);
   }

   public void init () {
      currency = null;
      amount = null;
      exponent = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode currency

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19))
         {
            currency = new Iso4217CurrencyCode();
            currency.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "currency");
      }
      else throw new Asn1MissingRequiredException (buffer, "currency");

      // decode amount

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         amount = new Asn1Integer();
         amount.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "amount");

      // decode exponent

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         exponent = new Asn1Integer();
         exponent.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "exponent");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode exponent

      if (exponent != null) {
         len = exponent.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("exponent");

      // encode amount

      if (amount != null) {
         len = amount.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("amount");

      // encode currency

      if (currency != null) {
         len = currency.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("currency");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (currency != null) currency.print (_out, "currency", _level+1);
      if (amount != null) amount.print (_out, "amount", _level+1);
      if (exponent != null) exponent.print (_out, "exponent", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
