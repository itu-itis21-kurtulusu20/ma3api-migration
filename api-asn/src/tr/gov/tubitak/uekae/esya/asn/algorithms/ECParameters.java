/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.algorithms;

import com.objsys.asn1j.runtime.*;
import java.io.*;
import java.math.BigInteger;

public class ECParameters extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_algorithmsRtkey._rtkey);
	}

   public ECPVer version;
   public FieldID fieldID;
   public Curve curve;
   public Asn1OctetString base;
   public Asn1BigInteger order;
   public Asn1BigInteger cofactor;  // optional

   public ECParameters () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ECParameters (
      ECPVer version_,
      FieldID fieldID_,
      Curve curve_,
      Asn1OctetString base_,
      Asn1BigInteger order_,
      Asn1BigInteger cofactor_
   ) {
      super();
      version = version_;
      fieldID = fieldID_;
      curve = curve_;
      base = base_;
      order = order_;
      cofactor = cofactor_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ECParameters (
      ECPVer version_,
      FieldID fieldID_,
      Curve curve_,
      Asn1OctetString base_,
      Asn1BigInteger order_
   ) {
      super();
      version = version_;
      fieldID = fieldID_;
      curve = curve_;
      base = base_;
      order = order_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ECParameters (long version_,
      FieldID fieldID_,
      Curve curve_,
      byte[] base_,
      Asn1BigInteger order_,
      Asn1BigInteger cofactor_
   ) {
      super();
      version = new ECPVer (version_);
      fieldID = fieldID_;
      curve = curve_;
      base = new Asn1OctetString (base_);
      order = order_;
      cofactor = cofactor_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ECParameters (
      long version_,
      FieldID fieldID_,
      Curve curve_,
      byte[] base_,
      Asn1BigInteger order_
   ) {
      super();
      version = new ECPVer (version_);
      fieldID = fieldID_;
      curve = curve_;
      base = new Asn1OctetString (base_);
      order = order_;
   }

   public void init () {
      version = null;
      fieldID = null;
      curve = null;
      base = null;
      order = null;
      cofactor = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new ECPVer();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode fieldID

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         fieldID = new FieldID();
         fieldID.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "fieldID");

      // decode curve

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         curve = new Curve();
         curve.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "curve");

      // decode base

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         base = new Asn1OctetString();
         base.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "base");

      // decode order

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         order = new Asn1BigInteger();
         order.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "order");

      // decode cofactor

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         cofactor = new Asn1BigInteger();
         cofactor.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode cofactor

      if (cofactor != null) {
         len = cofactor.encode (buffer, true);
         _aal += len;
      }

      // encode order

      if (order != null) {
         len = order.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("order");

      // encode base

      if (base != null) {
         len = base.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("base");

      // encode curve

      if (curve != null) {
         len = curve.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("curve");

      // encode fieldID

      if (fieldID != null) {
         len = fieldID.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("fieldID");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (fieldID != null) fieldID.print (_out, "fieldID", _level+1);
      if (curve != null) curve.print (_out, "curve", _level+1);
      if (base != null) base.print (_out, "base", _level+1);
      if (order != null) order.print (_out, "order", _level+1);
      if (cofactor != null) cofactor.print (_out, "cofactor", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}