/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.PKIXqualified;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class BiometricData extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_PKIXqualifiedRtkey._rtkey);
   }

   public TypeOfBiometricData typeOfBiometricData;
   public AlgorithmIdentifier hashAlgorithm;
   public Asn1OctetString biometricDataHash;
   public Asn1IA5String sourceDataUri;  // optional

   public BiometricData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BiometricData (
      TypeOfBiometricData typeOfBiometricData_,
      AlgorithmIdentifier hashAlgorithm_,
      Asn1OctetString biometricDataHash_,
      Asn1IA5String sourceDataUri_
   ) {
      super();
      typeOfBiometricData = typeOfBiometricData_;
      hashAlgorithm = hashAlgorithm_;
      biometricDataHash = biometricDataHash_;
      sourceDataUri = sourceDataUri_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public BiometricData (
      TypeOfBiometricData typeOfBiometricData_,
      AlgorithmIdentifier hashAlgorithm_,
      Asn1OctetString biometricDataHash_
   ) {
      super();
      typeOfBiometricData = typeOfBiometricData_;
      hashAlgorithm = hashAlgorithm_;
      biometricDataHash = biometricDataHash_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BiometricData (TypeOfBiometricData typeOfBiometricData_,
      AlgorithmIdentifier hashAlgorithm_,
      byte[] biometricDataHash_,
      String sourceDataUri_
   ) {
      super();
      typeOfBiometricData = typeOfBiometricData_;
      hashAlgorithm = hashAlgorithm_;
      biometricDataHash = new Asn1OctetString (biometricDataHash_);
      sourceDataUri = new Asn1IA5String (sourceDataUri_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public BiometricData (
      TypeOfBiometricData typeOfBiometricData_,
      AlgorithmIdentifier hashAlgorithm_,
      byte[] biometricDataHash_
   ) {
      super();
      typeOfBiometricData = typeOfBiometricData_;
      hashAlgorithm = hashAlgorithm_;
      biometricDataHash = new Asn1OctetString (biometricDataHash_);
   }

   public void init () {
      typeOfBiometricData = null;
      hashAlgorithm = null;
      biometricDataHash = null;
      sourceDataUri = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode typeOfBiometricData

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))
         {
            typeOfBiometricData = new TypeOfBiometricData();
            typeOfBiometricData.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "typeOfBiometricData");
      }
      else throw new Asn1MissingRequiredException (buffer, "typeOfBiometricData");

      // decode hashAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         hashAlgorithm = new AlgorithmIdentifier();
         hashAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "hashAlgorithm");

      // decode biometricDataHash

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         biometricDataHash = new Asn1OctetString();
         biometricDataHash.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "biometricDataHash");

      // decode sourceDataUri

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 22, elemLen, false)) {
         sourceDataUri = new Asn1IA5String();
         sourceDataUri.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 22))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode sourceDataUri

      if (sourceDataUri != null) {
         len = sourceDataUri.encode (buffer, true);
         _aal += len;
      }

      // encode biometricDataHash

      if (biometricDataHash != null) {
         len = biometricDataHash.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("biometricDataHash");

      // encode hashAlgorithm

      if (hashAlgorithm != null) {
         len = hashAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("hashAlgorithm");

      // encode typeOfBiometricData

      if (typeOfBiometricData != null) {
         len = typeOfBiometricData.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("typeOfBiometricData");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (typeOfBiometricData != null) typeOfBiometricData.print (_out, "typeOfBiometricData", _level+1);
      if (hashAlgorithm != null) hashAlgorithm.print (_out, "hashAlgorithm", _level+1);
      if (biometricDataHash != null) biometricDataHash.print (_out, "biometricDataHash", _level+1);
      if (sourceDataUri != null) sourceDataUri.print (_out, "sourceDataUri", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
