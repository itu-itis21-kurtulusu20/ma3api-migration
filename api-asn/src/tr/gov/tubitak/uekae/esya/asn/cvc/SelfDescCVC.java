/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cvc;

import com.objsys.asn1j.runtime.*;

public class SelfDescCVC extends Asn1Type {
   private static final long serialVersionUID = 55;
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 33);

   static {
      setKey (_cvcRtkey._rtkey);
   }

   public CertContentTemplate certContentTemplate;
   public Asn1OctetString signature;

   public SelfDescCVC () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SelfDescCVC (
      CertContentTemplate certContentTemplate_,
      Asn1OctetString signature_
   ) {
      super();
      certContentTemplate = certContentTemplate_;
      signature = signature_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SelfDescCVC (CertContentTemplate certContentTemplate_,
      byte[] signature_
   ) {
      super();
      certContentTemplate = certContentTemplate_;
      signature = new Asn1OctetString (signature_);
   }

   public void init () {
      certContentTemplate = null;
      signature = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode certContentTemplate

      if (_context.matchElemTag (Asn1Tag.APPL, Asn1Tag.CONS, 78, elemLen, false)) {
         certContentTemplate = new CertContentTemplate();
         certContentTemplate.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "certContentTemplate");

      // decode signature

      if (_context.matchElemTag (Asn1Tag.APPL, Asn1Tag.PRIM, 55, elemLen, true)) {
         int offset = buffer.getByteCount();
         signature = new Asn1OctetString();
         signature.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 78) ||
             _tag.equals (Asn1Tag.APPL, Asn1Tag.PRIM, 55))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signature

      if (signature != null) {
         len = signature.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.APPL, Asn1Tag.PRIM, 55, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signature");

      // encode certContentTemplate

      if (certContentTemplate != null) {
         len = certContentTemplate.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("certContentTemplate");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (certContentTemplate != null) certContentTemplate.print (_out, "certContentTemplate", _level+1);
      if (signature != null) signature.print (_out, "signature", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
