/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class Challenge extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public AlgorithmIdentifier owf;  // optional
   public Asn1OctetString witness;
   public Asn1OctetString challenge;

   public Challenge () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Challenge (
      AlgorithmIdentifier owf_,
      Asn1OctetString witness_,
      Asn1OctetString challenge_
   ) {
      super();
      owf = owf_;
      witness = witness_;
      challenge = challenge_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Challenge (
      Asn1OctetString witness_,
      Asn1OctetString challenge_
   ) {
      super();
      witness = witness_;
      challenge = challenge_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Challenge (AlgorithmIdentifier owf_,
      byte[] witness_,
      byte[] challenge_
   ) {
      super();
      owf = owf_;
      witness = new Asn1OctetString (witness_);
      challenge = new Asn1OctetString (challenge_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Challenge (
      byte[] witness_,
      byte[] challenge_
   ) {
      super();
      witness = new Asn1OctetString (witness_);
      challenge = new Asn1OctetString (challenge_);
   }

   public void init () {
      owf = null;
      witness = null;
      challenge = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode owf

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         owf = new AlgorithmIdentifier();
         owf.decode (buffer, true, elemLen.value);
      }

      // decode witness

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         witness = new Asn1OctetString();
         witness.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "witness");

      // decode challenge

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         challenge = new Asn1OctetString();
         challenge.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "challenge");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode challenge

      if (challenge != null) {
         len = challenge.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("challenge");

      // encode witness

      if (witness != null) {
         len = witness.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("witness");

      // encode owf

      if (owf != null) {
         len = owf.encode (buffer, true);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (owf != null) owf.print (_out, "owf", _level+1);
      if (witness != null) witness.print (_out, "witness", _level+1);
      if (challenge != null) challenge.print (_out, "challenge", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
