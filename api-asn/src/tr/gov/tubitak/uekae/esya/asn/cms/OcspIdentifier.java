/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.ocsp.ResponderID;

public class OcspIdentifier extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public ResponderID ocspResponderID;
   public Asn1GeneralizedTime producedAt;

   public OcspIdentifier () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OcspIdentifier (
      ResponderID ocspResponderID_,
      Asn1GeneralizedTime producedAt_
   ) {
      super();
      ocspResponderID = ocspResponderID_;
      producedAt = producedAt_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public OcspIdentifier (ResponderID ocspResponderID_,
      String producedAt_
   ) {
      super();
      ocspResponderID = ocspResponderID_;
      producedAt = new Asn1GeneralizedTime (producedAt_);
   }

   public void init () {
      ocspResponderID = null;
      producedAt = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode ocspResponderID

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
         {
            ocspResponderID = new ResponderID();
            ocspResponderID.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "ocspResponderID");
      }
      else throw new Asn1MissingRequiredException (buffer, "ocspResponderID");

      // decode producedAt

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         producedAt = new Asn1GeneralizedTime (true);
         producedAt.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "producedAt");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode producedAt

      if (producedAt != null) {
         len = producedAt.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("producedAt");

      // encode ocspResponderID

      if (ocspResponderID != null) {
         len = ocspResponderID.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("ocspResponderID");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (ocspResponderID != null) ocspResponderID.print (_out, "ocspResponderID", _level+1);
      if (producedAt != null) producedAt.print (_out, "producedAt", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
