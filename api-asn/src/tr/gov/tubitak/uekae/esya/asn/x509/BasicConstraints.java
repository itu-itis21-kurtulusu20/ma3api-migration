/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class BasicConstraints extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public Asn1Boolean cA;  // default = false()
   public Asn1Integer pathLenConstraint;  // optional

   public BasicConstraints () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public BasicConstraints (
      Asn1Boolean cA_,
      Asn1Integer pathLenConstraint_
   ) {
      super();
      cA = cA_;
      pathLenConstraint = pathLenConstraint_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public BasicConstraints (boolean cA_,
      long pathLenConstraint_
   ) {
      super();
      cA = new Asn1Boolean (cA_);
      pathLenConstraint = new Asn1Integer (pathLenConstraint_);
   }

   public void init () {
      cA = new Asn1Boolean (false);
      pathLenConstraint = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof BasicConstraints) ) return false;

      BasicConstraints rhs = (BasicConstraints) obj;

      if (cA == null) {
         if (rhs.cA != null) return false;
      }
      else {
         if (!cA.equals(rhs.cA)) {
            return false;
         }
      }

      if (pathLenConstraint == null) {
         if (rhs.pathLenConstraint != null) return false;
      }
      else {
         if (!pathLenConstraint.equals(rhs.pathLenConstraint)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (cA != null) __code = 31*__code + cA.hashCode();
      if (pathLenConstraint != null) __code = 31*__code + pathLenConstraint.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode cA

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
         cA = new Asn1Boolean();
         cA.decode (buffer, true, elemLen.value);
      }

      // decode pathLenConstraint

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         pathLenConstraint = new Asn1Integer();
         pathLenConstraint.decode (buffer, true, elemLen.value);
         if (!(pathLenConstraint.value >= 0)) {
            throw new Asn1ConsVioException ("pathLenConstraint.value", pathLenConstraint.value);
         }

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode pathLenConstraint

      if (pathLenConstraint != null) {
         if (!(pathLenConstraint.value >= 0)) {
            throw new Asn1ConsVioException ("pathLenConstraint.value", pathLenConstraint.value);
         }

         len = pathLenConstraint.encode (buffer, true);
         _aal += len;
      }

      // encode cA

      if (cA != null) {
         if (!cA.equals (false)) {
            len = cA.encode (buffer, true);
            _aal += len;
         }
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (cA != null) cA.print (_out, "cA", _level+1);
      if (pathLenConstraint != null) pathLenConstraint.print (_out, "pathLenConstraint", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
