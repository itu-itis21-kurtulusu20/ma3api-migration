/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class Validity extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public Time notBefore;
   public Time notAfter;

   public Validity () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Validity (
      Time notBefore_,
      Time notAfter_
   ) {
      super();
      notBefore = notBefore_;
      notAfter = notAfter_;
   }

   public void init () {
      notBefore = null;
      notAfter = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof Validity) ) return false;

      Validity rhs = (Validity) obj;

      if (notBefore == null) {
         if (rhs.notBefore != null) return false;
      }
      else {
         if (!notBefore.equals(rhs.notBefore)) {
            return false;
         }
      }

      if (notAfter == null) {
         if (rhs.notAfter != null) return false;
      }
      else {
         if (!notAfter.equals(rhs.notAfter)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (notBefore != null) __code = 31*__code + notBefore.hashCode();
      if (notAfter != null) __code = 31*__code + notAfter.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode notBefore

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
         {
            notBefore = new Time();
            notBefore.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "notBefore");
      }
      else throw new Asn1MissingRequiredException (buffer, "notBefore");

      // decode notAfter

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
         {
            notAfter = new Time();
            notAfter.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "notAfter");
      }
      else throw new Asn1MissingRequiredException (buffer, "notAfter");

      if (!_context.expired()) {

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode notAfter

      if (notAfter != null) {
         len = notAfter.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("notAfter");

      // encode notBefore

      if (notBefore != null) {
         len = notBefore.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("notBefore");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (notBefore != null) notBefore.print (_out, "notBefore", _level+1);
      if (notAfter != null) notAfter.print (_out, "notAfter", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
