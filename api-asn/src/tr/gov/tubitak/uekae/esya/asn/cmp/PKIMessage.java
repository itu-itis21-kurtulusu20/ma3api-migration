/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;

public class PKIMessage extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public PKIHeader header;
   public PKIBody body;
   public Asn1BitString protection;  // optional
   public PKIMessage_extraCerts extraCerts;  // optional

   public PKIMessage () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PKIMessage (
      PKIHeader header_,
      PKIBody body_,
      Asn1BitString protection_,
      PKIMessage_extraCerts extraCerts_
   ) {
      super();
      header = header_;
      body = body_;
      protection = protection_;
      extraCerts = extraCerts_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PKIMessage (
      PKIHeader header_,
      PKIBody body_
   ) {
      super();
      header = header_;
      body = body_;
   }

   public void init () {
      header = null;
      body = null;
      protection = null;
      extraCerts = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode header

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         header = new PKIHeader();
         header.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "header");

      // decode body

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 8) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 9) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 10) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 11) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 12) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 13) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 14) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 15) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 16) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 17) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 18) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 19) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 20) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 21) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 22) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 23) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 24) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 25) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 26) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 27))
         {
            body = new PKIBody();
            body.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "body");
      }
      else throw new Asn1MissingRequiredException (buffer, "body");

      // decode protection

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         protection = new Asn1BitString();
         protection.decode (buffer, true, elemLen.value);
      }

      // decode extraCerts

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, false)) {
         extraCerts = new PKIMessage_extraCerts();
         extraCerts.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extraCerts

      if (extraCerts != null) {
         len = extraCerts.encode (buffer, true);
         _aal += len;
      }

      // encode protection

      if (protection != null) {
         len = protection.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode body

      if (body != null) {
         len = body.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("body");

      // encode header

      if (header != null) {
         len = header.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("header");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (header != null) header.print (_out, "header", _level+1);
      if (body != null) body.print (_out, "body", _level+1);
      if (protection != null) protection.print (_out, "protection", _level+1);
      if (extraCerts != null) extraCerts.print (_out, "extraCerts", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
