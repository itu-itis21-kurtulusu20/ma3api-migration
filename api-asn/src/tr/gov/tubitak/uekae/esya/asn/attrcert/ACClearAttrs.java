/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.attrcert;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;

public class ACClearAttrs extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_attrcertRtkey._rtkey);
	}

   public GeneralName acIssuer;
   public Asn1Integer acSerial;
   public _SeqOfAttribute attrs;

   public ACClearAttrs () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ACClearAttrs (
      GeneralName acIssuer_,
      Asn1Integer acSerial_,
      _SeqOfAttribute attrs_
   ) {
      super();
      acIssuer = acIssuer_;
      acSerial = acSerial_;
      attrs = attrs_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ACClearAttrs (GeneralName acIssuer_,
      long acSerial_,
      _SeqOfAttribute attrs_
   ) {
      super();
      acIssuer = acIssuer_;
      acSerial = new Asn1Integer (acSerial_);
      attrs = attrs_;
   }

   public void init () {
      acIssuer = null;
      acSerial = null;
      attrs = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode acIssuer

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
         {
            acIssuer = new GeneralName();
            acIssuer.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "acIssuer");
      }
      else throw new Asn1MissingRequiredException (buffer, "acIssuer");

      // decode acSerial

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         acSerial = new Asn1Integer();
         acSerial.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "acSerial");

      // decode attrs

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         attrs = new _SeqOfAttribute();
         attrs.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "attrs");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode attrs

      if (attrs != null) {
         len = attrs.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("attrs");

      // encode acSerial

      if (acSerial != null) {
         len = acSerial.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("acSerial");

      // encode acIssuer

      if (acIssuer != null) {
         len = acIssuer.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("acIssuer");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (acIssuer != null) acIssuer.print (_out, "acIssuer", _level+1);
      if (acSerial != null) acSerial.print (_out, "acSerial", _level+1);
      if (attrs != null) attrs.print (_out, "attrs", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}