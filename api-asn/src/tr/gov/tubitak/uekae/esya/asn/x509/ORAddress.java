/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class ORAddress extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public BuiltInStandardAttributes built_in_standard_attributes;
   public BuiltInDomainDefinedAttributes built_in_domain_defined_attributes;  // optional
   public ExtensionAttributes extension_attributes;  // optional

   public ORAddress () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ORAddress (
      BuiltInStandardAttributes built_in_standard_attributes_,
      BuiltInDomainDefinedAttributes built_in_domain_defined_attributes_,
      ExtensionAttributes extension_attributes_
   ) {
      super();
      built_in_standard_attributes = built_in_standard_attributes_;
      built_in_domain_defined_attributes = built_in_domain_defined_attributes_;
      extension_attributes = extension_attributes_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ORAddress (
      BuiltInStandardAttributes built_in_standard_attributes_
   ) {
      super();
      built_in_standard_attributes = built_in_standard_attributes_;
   }

   public void init () {
      built_in_standard_attributes = null;
      built_in_domain_defined_attributes = null;
      extension_attributes = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ORAddress) ) return false;

      ORAddress rhs = (ORAddress) obj;

      if (built_in_standard_attributes == null) {
         if (rhs.built_in_standard_attributes != null) return false;
      }
      else {
         if (!built_in_standard_attributes.equals(rhs.built_in_standard_attributes)) {
            return false;
         }
      }

      if (built_in_domain_defined_attributes == null) {
         if (rhs.built_in_domain_defined_attributes != null) return false;
      }
      else {
         if (!built_in_domain_defined_attributes.equals(rhs.built_in_domain_defined_attributes)) {
            return false;
         }
      }

      if (extension_attributes == null) {
         if (rhs.extension_attributes != null) return false;
      }
      else {
         if (!extension_attributes.equals(rhs.extension_attributes)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (built_in_standard_attributes != null) __code = 31*__code + built_in_standard_attributes.hashCode();
      if (built_in_domain_defined_attributes != null) __code = 31*__code + built_in_domain_defined_attributes.hashCode();
      if (extension_attributes != null) __code = 31*__code + extension_attributes.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode built_in_standard_attributes

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         built_in_standard_attributes = new BuiltInStandardAttributes();
         built_in_standard_attributes.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "built_in_standard_attributes");

      // decode built_in_domain_defined_attributes

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         built_in_domain_defined_attributes = new BuiltInDomainDefinedAttributes();
         built_in_domain_defined_attributes.decode (buffer, true, elemLen.value);
      }

      // decode extension_attributes

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
         extension_attributes = new ExtensionAttributes();
         extension_attributes.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 17))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extension_attributes

      if (extension_attributes != null) {
         len = extension_attributes.encode (buffer, true);
         _aal += len;
      }

      // encode built_in_domain_defined_attributes

      if (built_in_domain_defined_attributes != null) {
         len = built_in_domain_defined_attributes.encode (buffer, true);
         _aal += len;
      }

      // encode built_in_standard_attributes

      if (built_in_standard_attributes != null) {
         len = built_in_standard_attributes.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("built_in_standard_attributes");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (built_in_standard_attributes != null) built_in_standard_attributes.print (_out, "built_in_standard_attributes", _level+1);
      if (built_in_domain_defined_attributes != null) built_in_domain_defined_attributes.print (_out, "built_in_domain_defined_attributes", _level+1);
      if (extension_attributes != null) extension_attributes.print (_out, "extension_attributes", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
