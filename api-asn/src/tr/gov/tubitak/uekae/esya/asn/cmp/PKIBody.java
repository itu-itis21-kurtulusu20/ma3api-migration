/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.crmf.CertReqMessages;
import tr.gov.tubitak.uekae.esya.asn.pkcs10.CertificationRequest;

public class PKIBody extends Asn1Choice {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   // Choice element identifier constants
   public final static byte _IR = 1;
   public final static byte _IP = 2;
   public final static byte _CR = 3;
   public final static byte _CP = 4;
   public final static byte _P10CR = 5;
   public final static byte _POPDECC = 6;
   public final static byte _POPDECR = 7;
   public final static byte _KUR = 8;
   public final static byte _KUP = 9;
   public final static byte _KRR = 10;
   public final static byte _KRP = 11;
   public final static byte _RR = 12;
   public final static byte _RP = 13;
   public final static byte _CCR = 14;
   public final static byte _CCP = 15;
   public final static byte _CKUANN = 16;
   public final static byte _CANN = 17;
   public final static byte _RANN = 18;
   public final static byte _CRLANN = 19;
   public final static byte _PKICONF = 20;
   public final static byte _NESTED = 21;
   public final static byte _GENM = 22;
   public final static byte _GENP = 23;
   public final static byte _ERROR = 24;
   public final static byte _CERTCONF = 25;
   public final static byte _POLLREQ = 26;
   public final static byte _POLLREP = 27;
   public final static byte _CVCREQ = 28;

   public PKIBody () {
      super();
   }

   public PKIBody (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _IR: return "ir";
      case _IP: return "ip";
      case _CR: return "cr";
      case _CP: return "cp";
      case _P10CR: return "p10cr";
      case _POPDECC: return "popdecc";
      case _POPDECR: return "popdecr";
      case _KUR: return "kur";
      case _KUP: return "kup";
      case _KRR: return "krr";
      case _KRP: return "krp";
      case _RR: return "rr";
      case _RP: return "rp";
      case _CCR: return "ccr";
      case _CCP: return "ccp";
      case _CKUANN: return "ckuann";
      case _CANN: return "cann";
      case _RANN: return "rann";
      case _CRLANN: return "crlann";
      case _PKICONF: return "pkiconf";
      case _NESTED: return "nested";
      case _GENM: return "genm";
      case _GENP: return "genp";
      case _ERROR: return "error";
      case _CERTCONF: return "certConf";
      case _POLLREQ: return "pollReq";
      case _POLLREP: return "pollRep";
      case _CVCREQ: return "cvcReq";
      default: return "UNDEFINED";
      }
   }

   public void set_ir (CertReqMessages value) {
      setElement (_IR, value);
   }

   public void set_ip (CertRepMessage value) {
      setElement (_IP, value);
   }

   public void set_cr (CertReqMessages value) {
      setElement (_CR, value);
   }

   public void set_cp (CertRepMessage value) {
      setElement (_CP, value);
   }

   public void set_p10cr (CertificationRequest value) {
      setElement (_P10CR, value);
   }

   public void set_popdecc (POPODecKeyChallContent value) {
      setElement (_POPDECC, value);
   }

   public void set_popdecr (POPODecKeyRespContent value) {
      setElement (_POPDECR, value);
   }

   public void set_kur (CertReqMessages value) {
      setElement (_KUR, value);
   }

   public void set_kup (CertRepMessage value) {
      setElement (_KUP, value);
   }

   public void set_krr (CertReqMessages value) {
      setElement (_KRR, value);
   }

   public void set_krp (KeyRecRepContent value) {
      setElement (_KRP, value);
   }

   public void set_rr (RevReqContent value) {
      setElement (_RR, value);
   }

   public void set_rp (RevRepContent value) {
      setElement (_RP, value);
   }

   public void set_ccr (CertReqMessages value) {
      setElement (_CCR, value);
   }

   public void set_ccp (CertRepMessage value) {
      setElement (_CCP, value);
   }

   public void set_ckuann (CAKeyUpdAnnContent value) {
      setElement (_CKUANN, value);
   }

   public void set_cann (CMPCertificate value) {
      setElement (_CANN, value);
   }

   public void set_rann (RevAnnContent value) {
      setElement (_RANN, value);
   }

   public void set_crlann (CRLAnnContent value) {
      setElement (_CRLANN, value);
   }

   public void set_pkiconf () {
      setElement (_PKICONF, Asn1Null.NULL_VALUE);
   }

   public void set_nested (PKIMessages value) {
      setElement (_NESTED, value);
   }

   public void set_genm (GenMsgContent value) {
      setElement (_GENM, value);
   }

   public void set_genp (GenRepContent value) {
      setElement (_GENP, value);
   }

   public void set_error (ErrorMsgContent value) {
      setElement (_ERROR, value);
   }

   public void set_certConf (CertConfirmContent value) {
      setElement (_CERTCONF, value);
   }

   public void set_pollReq (PollReqContent value) {
      setElement (_POLLREQ, value);
   }

   public void set_pollRep (PollRepContent value) {
      setElement (_POLLREP, value);
   }

   public void set_cvcReq (CertReqMessages value) {
      setElement (_CVCREQ, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
      {
         CertReqMessages ir;
         ir = new CertReqMessages();
         ir.decode (buffer, true, len);
         setElement (_IR, ir);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
      {
         CertRepMessage ip;
         ip = new CertRepMessage();
         ip.decode (buffer, true, len);
         setElement (_IP, ip);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
      {
         CertReqMessages cr;
         cr = new CertReqMessages();
         cr.decode (buffer, true, len);
         setElement (_CR, cr);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
      {
         CertRepMessage cp;
         cp = new CertRepMessage();
         cp.decode (buffer, true, len);
         setElement (_CP, cp);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))
      {
         CertificationRequest p10cr;
         p10cr = new CertificationRequest();
         p10cr.decode (buffer, true, len);
         setElement (_P10CR, p10cr);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5))
      {
         POPODecKeyChallContent popdecc;
         popdecc = new POPODecKeyChallContent();
         popdecc.decode (buffer, true, len);
         setElement (_POPDECC, popdecc);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 6))
      {
         POPODecKeyRespContent popdecr;
         popdecr = new POPODecKeyRespContent();
         popdecr.decode (buffer, true, len);
         setElement (_POPDECR, popdecr);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 7))
      {
         CertReqMessages kur;
         kur = new CertReqMessages();
         kur.decode (buffer, true, len);
         setElement (_KUR, kur);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 8))
      {
         CertRepMessage kup;
         kup = new CertRepMessage();
         kup.decode (buffer, true, len);
         setElement (_KUP, kup);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 9))
      {
         CertReqMessages krr;
         krr = new CertReqMessages();
         krr.decode (buffer, true, len);
         setElement (_KRR, krr);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 10))
      {
         KeyRecRepContent krp;
         krp = new KeyRecRepContent();
         krp.decode (buffer, true, len);
         setElement (_KRP, krp);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 11))
      {
         RevReqContent rr;
         rr = new RevReqContent();
         rr.decode (buffer, true, len);
         setElement (_RR, rr);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 12))
      {
         RevRepContent rp;
         rp = new RevRepContent();
         rp.decode (buffer, true, len);
         setElement (_RP, rp);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 13))
      {
         CertReqMessages ccr;
         ccr = new CertReqMessages();
         ccr.decode (buffer, true, len);
         setElement (_CCR, ccr);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 14))
      {
         CertRepMessage ccp;
         ccp = new CertRepMessage();
         ccp.decode (buffer, true, len);
         setElement (_CCP, ccp);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 15))
      {
         CAKeyUpdAnnContent ckuann;
         ckuann = new CAKeyUpdAnnContent();
         ckuann.decode (buffer, true, len);
         setElement (_CKUANN, ckuann);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 16)) {
         CMPCertificate cann;
         cann = new CMPCertificate();
         cann.decode (buffer, true, len);
         setElement (_CANN, cann);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 17))
      {
         RevAnnContent rann;
         rann = new RevAnnContent();
         rann.decode (buffer, true, len);
         setElement (_RANN, rann);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 18))
      {
         CRLAnnContent crlann;
         crlann = new CRLAnnContent();
         crlann.decode (buffer, true, len);
         setElement (_CRLANN, crlann);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 19)) {
         Asn1Null pkiconf;
         pkiconf = new Asn1Null();
         pkiconf.decode (buffer, true, len);
         setElement (_PKICONF, pkiconf);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 20)) {
         PKIMessages nested;
         nested = new PKIMessages();
         nested.decode (buffer, true, len);
         setElement (_NESTED, nested);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 21))
      {
         GenMsgContent genm;
         genm = new GenMsgContent();
         genm.decode (buffer, true, len);
         setElement (_GENM, genm);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 22))
      {
         GenRepContent genp;
         genp = new GenRepContent();
         genp.decode (buffer, true, len);
         setElement (_GENP, genp);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 23))
      {
         ErrorMsgContent error;
         error = new ErrorMsgContent();
         error.decode (buffer, true, len);
         setElement (_ERROR, error);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 24))
      {
         CertConfirmContent certConf;
         certConf = new CertConfirmContent();
         certConf.decode (buffer, true, len);
         setElement (_CERTCONF, certConf);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 25))
      {
         PollReqContent pollReq;
         pollReq = new PollReqContent();
         pollReq.decode (buffer, true, len);
         setElement (_POLLREQ, pollReq);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 26))
      {
         PollRepContent pollRep;
         pollRep = new PollRepContent();
         pollRep.decode (buffer, true, len);
         setElement (_POLLREP, pollRep);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 27))
      {
         CertReqMessages cvcReq;
         cvcReq = new CertReqMessages();
         cvcReq.decode (buffer, true, len);
         setElement (_CVCREQ, cvcReq);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode ir
      case _IR:
         CertReqMessages ir = (CertReqMessages) getElement();
         len = ir.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
         break;

      // encode ip
      case _IP:
         CertRepMessage ip = (CertRepMessage) getElement();
         len = ip.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
         break;

      // encode cr
      case _CR:
         CertReqMessages cr = (CertReqMessages) getElement();
         len = cr.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
         break;

      // encode cp
      case _CP:
         CertRepMessage cp = (CertRepMessage) getElement();
         len = cp.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
         break;

      // encode p10cr
      case _P10CR:
         CertificationRequest p10cr = (CertificationRequest) getElement();
         len = p10cr.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;
         break;

      // encode popdecc
      case _POPDECC:
         POPODecKeyChallContent popdecc = (POPODecKeyChallContent) getElement();
         len = popdecc.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
         _aal += len;
         break;

      // encode popdecr
      case _POPDECR:
         POPODecKeyRespContent popdecr = (POPODecKeyRespContent) getElement();
         len = popdecr.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
         _aal += len;
         break;

      // encode kur
      case _KUR:
         CertReqMessages kur = (CertReqMessages) getElement();
         len = kur.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 7, len);
         _aal += len;
         break;

      // encode kup
      case _KUP:
         CertRepMessage kup = (CertRepMessage) getElement();
         len = kup.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 8, len);
         _aal += len;
         break;

      // encode krr
      case _KRR:
         CertReqMessages krr = (CertReqMessages) getElement();
         len = krr.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 9, len);
         _aal += len;
         break;

      // encode krp
      case _KRP:
         KeyRecRepContent krp = (KeyRecRepContent) getElement();
         len = krp.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 10, len);
         _aal += len;
         break;

      // encode rr
      case _RR:
         RevReqContent rr = (RevReqContent) getElement();
         len = rr.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 11, len);
         _aal += len;
         break;

      // encode rp
      case _RP:
         RevRepContent rp = (RevRepContent) getElement();
         len = rp.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 12, len);
         _aal += len;
         break;

      // encode ccr
      case _CCR:
         CertReqMessages ccr = (CertReqMessages) getElement();
         len = ccr.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 13, len);
         _aal += len;
         break;

      // encode ccp
      case _CCP:
         CertRepMessage ccp = (CertRepMessage) getElement();
         len = ccp.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 14, len);
         _aal += len;
         break;

      // encode ckuann
      case _CKUANN:
         CAKeyUpdAnnContent ckuann = (CAKeyUpdAnnContent) getElement();
         len = ckuann.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 15, len);
         _aal += len;
         break;

      // encode cann
      case _CANN:
         CMPCertificate cann = (CMPCertificate) getElement();
         len = cann.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 16, len);
         _aal += len;
         break;

      // encode rann
      case _RANN:
         RevAnnContent rann = (RevAnnContent) getElement();
         len = rann.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 17, len);
         _aal += len;
         break;

      // encode crlann
      case _CRLANN:
         CRLAnnContent crlann = (CRLAnnContent) getElement();
         len = crlann.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 18, len);
         _aal += len;
         break;

      // encode pkiconf
      case _PKICONF:
         Asn1Null pkiconf = (Asn1Null) getElement();
         len = pkiconf.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 19, len);
         _aal += len;
         break;

      // encode nested
      case _NESTED:
         PKIMessages nested = (PKIMessages) getElement();
         len = nested.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 20, len);
         _aal += len;
         break;

      // encode genm
      case _GENM:
         GenMsgContent genm = (GenMsgContent) getElement();
         len = genm.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 21, len);
         _aal += len;
         break;

      // encode genp
      case _GENP:
         GenRepContent genp = (GenRepContent) getElement();
         len = genp.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 22, len);
         _aal += len;
         break;

      // encode error
      case _ERROR:
         ErrorMsgContent error = (ErrorMsgContent) getElement();
         len = error.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 23, len);
         _aal += len;
         break;

      // encode certConf
      case _CERTCONF:
         CertConfirmContent certConf = (CertConfirmContent) getElement();
         len = certConf.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 24, len);
         _aal += len;
         break;

      // encode pollReq
      case _POLLREQ:
         PollReqContent pollReq = (PollReqContent) getElement();
         len = pollReq.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 25, len);
         _aal += len;
         break;

      // encode pollRep
      case _POLLREP:
         PollRepContent pollRep = (PollRepContent) getElement();
         len = pollRep.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 26, len);
         _aal += len;
         break;

      // encode cvcReq
      case _CVCREQ:
         CertReqMessages cvcReq = (CertReqMessages) getElement();
         len = cvcReq.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 27, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
