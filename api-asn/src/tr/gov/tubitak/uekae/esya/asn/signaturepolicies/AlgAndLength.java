/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class AlgAndLength extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public Asn1ObjectIdentifier algID;
   public Asn1Integer minKeyLength;  // optional
   public SignPolExtensions signPolExtensions;  // optional

   public AlgAndLength () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlgAndLength (
      Asn1ObjectIdentifier algID_,
      Asn1Integer minKeyLength_,
      SignPolExtensions signPolExtensions_
   ) {
      super();
      algID = algID_;
      minKeyLength = minKeyLength_;
      signPolExtensions = signPolExtensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AlgAndLength (
      Asn1ObjectIdentifier algID_
   ) {
      super();
      algID = algID_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlgAndLength (int[] algID_,
      long minKeyLength_,
      SignPolExtensions signPolExtensions_
   ) {
      super();
      algID = new Asn1ObjectIdentifier (algID_);
      minKeyLength = new Asn1Integer (minKeyLength_);
      signPolExtensions = signPolExtensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AlgAndLength (
      int[] algID_
   ) {
      super();
      algID = new Asn1ObjectIdentifier (algID_);
   }

   public void init () {
      algID = null;
      minKeyLength = null;
      signPolExtensions = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode algID

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         algID = new Asn1ObjectIdentifier();
         algID.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "algID");

      // decode minKeyLength

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         minKeyLength = new Asn1Integer();
         minKeyLength.decode (buffer, true, elemLen.value);
      }

      // decode signPolExtensions

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signPolExtensions = new SignPolExtensions();
         signPolExtensions.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signPolExtensions

      if (signPolExtensions != null) {
         len = signPolExtensions.encode (buffer, true);
         _aal += len;
      }

      // encode minKeyLength

      if (minKeyLength != null) {
         len = minKeyLength.encode (buffer, true);
         _aal += len;
      }

      // encode algID

      if (algID != null) {
         len = algID.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("algID");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (algID != null) algID.print (_out, "algID", _level+1);
      if (minKeyLength != null) minKeyLength.print (_out, "minKeyLength", _level+1);
      if (signPolExtensions != null) signPolExtensions.print (_out, "signPolExtensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
