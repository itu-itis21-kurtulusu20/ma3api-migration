/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.algorithms;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class Dss_Parms extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_algorithmsRtkey._rtkey);
	}

   public Asn1Integer p;
   public Asn1Integer q;
   public Asn1Integer g;

   public Dss_Parms () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Dss_Parms (
      Asn1Integer p_,
      Asn1Integer q_,
      Asn1Integer g_
   ) {
      super();
      p = p_;
      q = q_;
      g = g_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Dss_Parms (long p_,
      long q_,
      long g_
   ) {
      super();
      p = new Asn1Integer (p_);
      q = new Asn1Integer (q_);
      g = new Asn1Integer (g_);
   }

   public void init () {
      p = null;
      q = null;
      g = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode p

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         p = new Asn1Integer();
         p.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "p");

      // decode q

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         q = new Asn1Integer();
         q.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "q");

      // decode g

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         g = new Asn1Integer();
         g.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "g");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode g

      if (g != null) {
         len = g.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("g");

      // encode q

      if (q != null) {
         len = q.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("q");

      // encode p

      if (p != null) {
         len = p.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("p");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (p != null) p.print (_out, "p", _level+1);
      if (q != null) q.print (_out, "q", _level+1);
      if (g != null) g.print (_out, "g", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}