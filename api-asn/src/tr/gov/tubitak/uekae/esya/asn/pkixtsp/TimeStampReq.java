/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkixtsp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

public class TimeStampReq extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkixtspRtkey._rtkey);
   }

   public TimeStampReq_version version;
   public MessageImprint messageImprint;
   public Asn1ObjectIdentifier reqPolicy;  // optional
   public Asn1BigInteger nonce;  // optional
   public Asn1Boolean certReq;  // default = false()
   public Extensions extensions;  // optional

   public TimeStampReq () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TimeStampReq (
      TimeStampReq_version version_,
      MessageImprint messageImprint_,
      Asn1ObjectIdentifier reqPolicy_,
      Asn1BigInteger nonce_,
      Asn1Boolean certReq_,
      Extensions extensions_
   ) {
      super();
      version = version_;
      messageImprint = messageImprint_;
      reqPolicy = reqPolicy_;
      nonce = nonce_;
      certReq = certReq_;
      extensions = extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TimeStampReq (
      TimeStampReq_version version_,
      MessageImprint messageImprint_
   ) {
      super();
      version = version_;
      messageImprint = messageImprint_;
      certReq = new Asn1Boolean (false);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TimeStampReq (long version_,
      MessageImprint messageImprint_,
      int[] reqPolicy_,
      Asn1BigInteger nonce_,
      boolean certReq_,
      Extensions extensions_
   ) {
      super();
      version = new TimeStampReq_version (version_);
      messageImprint = messageImprint_;
      reqPolicy = new Asn1ObjectIdentifier (reqPolicy_);
      nonce = nonce_;
      certReq = new Asn1Boolean (certReq_);
      extensions = extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public TimeStampReq (
      long version_,
      MessageImprint messageImprint_
   ) {
      super();
      version = new TimeStampReq_version (version_);
      messageImprint = messageImprint_;
      certReq = new Asn1Boolean (false);
   }

   public void init () {
      version = null;
      messageImprint = null;
      reqPolicy = null;
      nonce = null;
      certReq = new Asn1Boolean (false);
      extensions = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new TimeStampReq_version();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode messageImprint

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         messageImprint = new MessageImprint();
         messageImprint.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "messageImprint");

      // decode reqPolicy

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         reqPolicy = new Asn1ObjectIdentifier();
         reqPolicy.decode (buffer, true, elemLen.value);
      }

      // decode nonce

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         nonce = new Asn1BigInteger();
         nonce.decode (buffer, true, elemLen.value);
      }

      // decode certReq

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
         certReq = new Asn1Boolean();
         certReq.decode (buffer, true, elemLen.value);
      }

      // decode extensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         extensions = new Extensions();
         extensions.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extensions

      if (extensions != null) {
         len = extensions.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode certReq

      if (certReq != null) {
         if (!certReq.equals (false)) {
            len = certReq.encode (buffer, true);
            _aal += len;
         }
      }

      // encode nonce

      if (nonce != null) {
         len = nonce.encode (buffer, true);
         _aal += len;
      }

      // encode reqPolicy

      if (reqPolicy != null) {
         len = reqPolicy.encode (buffer, true);
         _aal += len;
      }

      // encode messageImprint

      if (messageImprint != null) {
         len = messageImprint.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("messageImprint");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (messageImprint != null) messageImprint.print (_out, "messageImprint", _level+1);
      if (reqPolicy != null) reqPolicy.print (_out, "reqPolicy", _level+1);
      if (nonce != null) nonce.print (_out, "nonce", _level+1);
      if (certReq != null) certReq.print (_out, "certReq", _level+1);
      if (extensions != null) extensions.print (_out, "extensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
