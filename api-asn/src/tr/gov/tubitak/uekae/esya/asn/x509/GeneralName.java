/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.ORAddress;
import tr.gov.tubitak.uekae.esya.asn.x509.Name;

public class GeneralName extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   // Choice element identifier constants
   public final static byte _OTHERNAME = 1;
   public final static byte _RFC822NAME = 2;
   public final static byte _DNSNAME = 3;
   public final static byte _X400ADDRESS = 4;
   public final static byte _DIRECTORYNAME = 5;
   public final static byte _EDIPARTYNAME = 6;
   public final static byte _UNIFORMRESOURCEIDENTIFIER = 7;
   public final static byte _IPADDRESS = 8;
   public final static byte _REGISTEREDID = 9;

   public GeneralName () {
      super();
   }

   public GeneralName (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _OTHERNAME: return "otherName";
      case _RFC822NAME: return "rfc822Name";
      case _DNSNAME: return "dNSName";
      case _X400ADDRESS: return "x400Address";
      case _DIRECTORYNAME: return "directoryName";
      case _EDIPARTYNAME: return "ediPartyName";
      case _UNIFORMRESOURCEIDENTIFIER: return "uniformResourceIdentifier";
      case _IPADDRESS: return "iPAddress";
      case _REGISTEREDID: return "registeredID";
      default: return "UNDEFINED";
      }
   }

   public void set_otherName (AnotherName value) {
      setElement (_OTHERNAME, value);
   }

   public void set_rfc822Name (Asn1IA5String value) {
      setElement (_RFC822NAME, value);
   }

   public void set_dNSName (Asn1IA5String value) {
      setElement (_DNSNAME, value);
   }

   public void set_x400Address (ORAddress value) {
      setElement (_X400ADDRESS, value);
   }

   public void set_directoryName (Name value) {
      setElement (_DIRECTORYNAME, value);
   }

   public void set_ediPartyName (EDIPartyName value) {
      setElement (_EDIPARTYNAME, value);
   }

   public void set_uniformResourceIdentifier (Asn1IA5String value) {
      setElement (_UNIFORMRESOURCEIDENTIFIER, value);
   }

   public void set_iPAddress (Asn1OctetString value) {
      setElement (_IPADDRESS, value);
   }

   public void set_registeredID (Asn1ObjectIdentifier value) {
      setElement (_REGISTEREDID, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
      {
         AnotherName otherName;
         otherName = new AnotherName();
         otherName.decode (buffer, false, len);
         setElement (_OTHERNAME, otherName);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
      {
         Asn1IA5String rfc822Name;
         rfc822Name = new Asn1IA5String();
         rfc822Name.decode (buffer, false, len);
         setElement (_RFC822NAME, rfc822Name);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
      {
         Asn1IA5String dNSName;
         dNSName = new Asn1IA5String();
         dNSName.decode (buffer, false, len);
         setElement (_DNSNAME, dNSName);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
      {
         ORAddress x400Address;
         x400Address = new ORAddress();
         x400Address.decode (buffer, false, len);
         setElement (_X400ADDRESS, x400Address);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))
      {
         Name directoryName;
         directoryName = new Name();
         directoryName.decode (buffer, false, len);
         setElement (_DIRECTORYNAME, directoryName);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5))
      {
         EDIPartyName ediPartyName;
         ediPartyName = new EDIPartyName();
         ediPartyName.decode (buffer, false, len);
         setElement (_EDIPARTYNAME, ediPartyName);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6))
      {
         Asn1IA5String uniformResourceIdentifier;
         uniformResourceIdentifier = new Asn1IA5String();
         uniformResourceIdentifier.decode (buffer, false, len);
         setElement (_UNIFORMRESOURCEIDENTIFIER, uniformResourceIdentifier);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7))
      {
         Asn1OctetString iPAddress;
         iPAddress = new Asn1OctetString();
         iPAddress.decode (buffer, false, len);
         setElement (_IPADDRESS, iPAddress);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
      {
         Asn1ObjectIdentifier registeredID;
         registeredID = new Asn1ObjectIdentifier();
         registeredID.decode (buffer, false, len);
         setElement (_REGISTEREDID, registeredID);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode otherName
      case _OTHERNAME:
         AnotherName otherName = (AnotherName) getElement();
         len = otherName.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
         break;

      // encode rfc822Name
      case _RFC822NAME:
         Asn1IA5String rfc822Name = (Asn1IA5String) getElement();
         len = rfc822Name.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
         break;

      // encode dNSName
      case _DNSNAME:
         Asn1IA5String dNSName = (Asn1IA5String) getElement();
         len = dNSName.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
         break;

      // encode x400Address
      case _X400ADDRESS:
         ORAddress x400Address = (ORAddress) getElement();
         len = x400Address.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
         break;

      // encode directoryName
      case _DIRECTORYNAME:
         Name directoryName = (Name) getElement();
         len = directoryName.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;
         break;

      // encode ediPartyName
      case _EDIPARTYNAME:
         EDIPartyName ediPartyName = (EDIPartyName) getElement();
         len = ediPartyName.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
         _aal += len;
         break;

      // encode uniformResourceIdentifier
      case _UNIFORMRESOURCEIDENTIFIER:
         Asn1IA5String uniformResourceIdentifier = (Asn1IA5String) getElement();
         len = uniformResourceIdentifier.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, len);
         _aal += len;
         break;

      // encode iPAddress
      case _IPADDRESS:
         Asn1OctetString iPAddress = (Asn1OctetString) getElement();
         len = iPAddress.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
         _aal += len;
         break;

      // encode registeredID
      case _REGISTEREDID:
         Asn1ObjectIdentifier registeredID = (Asn1ObjectIdentifier) getElement();
         len = registeredID.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
