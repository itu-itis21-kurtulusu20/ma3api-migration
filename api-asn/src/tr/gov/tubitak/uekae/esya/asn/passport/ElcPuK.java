/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 14-Sep-2017.
 */
package tr.gov.tubitak.uekae.esya.asn.passport;

import com.objsys.asn1j.runtime.*;

public class ElcPuK extends Asn1Type {
   private static final long serialVersionUID = 55;
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 73);

   static {
      setKey (_SelfCvcRtkey._rtkey);
   }

   public Asn1ObjectIdentifier oid;
   public Asn1OctetString p;  // optional
   public Asn1OctetString a;  // optional
   public Asn1OctetString b;  // optional
   public Asn1OctetString g;  // optional
   public Asn1OctetString r;  // optional
   public Asn1OctetString y;
   public Asn1Integer f;  // optional

   public ElcPuK () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ElcPuK (
      Asn1ObjectIdentifier oid_,
      Asn1OctetString p_,
      Asn1OctetString a_,
      Asn1OctetString b_,
      Asn1OctetString g_,
      Asn1OctetString r_,
      Asn1OctetString y_,
      Asn1Integer f_
   ) {
      super();
      oid = oid_;
      p = p_;
      a = a_;
      b = b_;
      g = g_;
      r = r_;
      y = y_;
      f = f_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ElcPuK (
      Asn1ObjectIdentifier oid_,
      Asn1OctetString y_
   ) {
      super();
      oid = oid_;
      y = y_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ElcPuK (int[] oid_,
      byte[] p_,
      byte[] a_,
      byte[] b_,
      byte[] g_,
      byte[] r_,
      byte[] y_,
      long f_
   ) {
      super();
      oid = new Asn1ObjectIdentifier (oid_);
      p = new Asn1OctetString (p_);
      a = new Asn1OctetString (a_);
      b = new Asn1OctetString (b_);
      g = new Asn1OctetString (g_);
      r = new Asn1OctetString (r_);
      y = new Asn1OctetString (y_);
      f = new Asn1Integer (f_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ElcPuK (
      int[] oid_,
      byte[] y_
   ) {
      super();
      oid = new Asn1ObjectIdentifier (oid_);
      y = new Asn1OctetString (y_);
   }

   public void init () {
      oid = null;
      p = null;
      a = null;
      b = null;
      g = null;
      r = null;
      y = null;
      f = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode oid

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         oid = new Asn1ObjectIdentifier();
         oid.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "oid");

      // decode p

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         p = new Asn1OctetString();
         p.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode a

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         a = new Asn1OctetString();
         a.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode b

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         b = new Asn1OctetString();
         b.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode g

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
         int offset = buffer.getByteCount();
         g = new Asn1OctetString();
         g.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode r

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, elemLen, true)) {
         int offset = buffer.getByteCount();
         r = new Asn1OctetString();
         r.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode y

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, elemLen, true)) {
         int offset = buffer.getByteCount();
         y = new Asn1OctetString();
         y.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "y");

      // decode f

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, elemLen, true)) {
         int offset = buffer.getByteCount();
         f = new Asn1Integer();
         f.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 5) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode f

      if (f != null) {
         len = f.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
         _aal += len;
      }

      // encode y

      if (y != null) {
         len = y.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("y");

      // encode r

      if (r != null) {
         len = r.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, len);
         _aal += len;
      }

      // encode g

      if (g != null) {
         len = g.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
         _aal += len;
      }

      // encode b

      if (b != null) {
         len = b.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
         _aal += len;
      }

      // encode a

      if (a != null) {
         len = a.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
      }

      // encode p

      if (p != null) {
         len = p.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode oid

      if (oid != null) {
         len = oid.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("oid");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (oid != null) oid.print (_out, "oid", _level+1);
      if (p != null) p.print (_out, "p", _level+1);
      if (a != null) a.print (_out, "a", _level+1);
      if (b != null) b.print (_out, "b", _level+1);
      if (g != null) g.print (_out, "g", _level+1);
      if (r != null) r.print (_out, "r", _level+1);
      if (y != null) y.print (_out, "y", _level+1);
      if (f != null) f.print (_out, "f", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
