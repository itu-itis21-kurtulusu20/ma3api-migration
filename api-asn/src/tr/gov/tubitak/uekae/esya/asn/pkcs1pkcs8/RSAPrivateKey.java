/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkcs1pkcs8;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Version;

public class RSAPrivateKey extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkcs1pkcs8Rtkey._rtkey);
   }

   public Version version;
   public Asn1BigInteger modulus;
   public Asn1BigInteger publicExponent;
   public Asn1BigInteger privateExponent;
   public Asn1BigInteger prime1;
   public Asn1BigInteger prime2;
   public Asn1BigInteger exponent1;
   public Asn1BigInteger exponent2;
   public Asn1BigInteger coefficient;

   public RSAPrivateKey () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RSAPrivateKey (
      Version version_,
      Asn1BigInteger modulus_,
      Asn1BigInteger publicExponent_,
      Asn1BigInteger privateExponent_,
      Asn1BigInteger prime1_,
      Asn1BigInteger prime2_,
      Asn1BigInteger exponent1_,
      Asn1BigInteger exponent2_,
      Asn1BigInteger coefficient_
   ) {
      super();
      version = version_;
      modulus = modulus_;
      publicExponent = publicExponent_;
      privateExponent = privateExponent_;
      prime1 = prime1_;
      prime2 = prime2_;
      exponent1 = exponent1_;
      exponent2 = exponent2_;
      coefficient = coefficient_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RSAPrivateKey (long version_,
      Asn1BigInteger modulus_,
      Asn1BigInteger publicExponent_,
      Asn1BigInteger privateExponent_,
      Asn1BigInteger prime1_,
      Asn1BigInteger prime2_,
      Asn1BigInteger exponent1_,
      Asn1BigInteger exponent2_,
      Asn1BigInteger coefficient_
   ) {
      super();
      version = new Version (version_);
      modulus = modulus_;
      publicExponent = publicExponent_;
      privateExponent = privateExponent_;
      prime1 = prime1_;
      prime2 = prime2_;
      exponent1 = exponent1_;
      exponent2 = exponent2_;
      coefficient = coefficient_;
   }

   public void init () {
      version = null;
      modulus = null;
      publicExponent = null;
      privateExponent = null;
      prime1 = null;
      prime2 = null;
      exponent1 = null;
      exponent2 = null;
      coefficient = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new Version();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode modulus

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         modulus = new Asn1BigInteger();
         modulus.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "modulus");

      // decode publicExponent

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         publicExponent = new Asn1BigInteger();
         publicExponent.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "publicExponent");

      // decode privateExponent

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         privateExponent = new Asn1BigInteger();
         privateExponent.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "privateExponent");

      // decode prime1

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         prime1 = new Asn1BigInteger();
         prime1.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "prime1");

      // decode prime2

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         prime2 = new Asn1BigInteger();
         prime2.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "prime2");

      // decode exponent1

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         exponent1 = new Asn1BigInteger();
         exponent1.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "exponent1");

      // decode exponent2

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         exponent2 = new Asn1BigInteger();
         exponent2.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "exponent2");

      // decode coefficient

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         coefficient = new Asn1BigInteger();
         coefficient.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "coefficient");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode coefficient

      if (coefficient != null) {
         len = coefficient.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("coefficient");

      // encode exponent2

      if (exponent2 != null) {
         len = exponent2.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("exponent2");

      // encode exponent1

      if (exponent1 != null) {
         len = exponent1.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("exponent1");

      // encode prime2

      if (prime2 != null) {
         len = prime2.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("prime2");

      // encode prime1

      if (prime1 != null) {
         len = prime1.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("prime1");

      // encode privateExponent

      if (privateExponent != null) {
         len = privateExponent.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("privateExponent");

      // encode publicExponent

      if (publicExponent != null) {
         len = publicExponent.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("publicExponent");

      // encode modulus

      if (modulus != null) {
         len = modulus.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("modulus");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (modulus != null) modulus.print (_out, "modulus", _level+1);
      if (publicExponent != null) publicExponent.print (_out, "publicExponent", _level+1);
      if (privateExponent != null) privateExponent.print (_out, "privateExponent", _level+1);
      if (prime1 != null) prime1.print (_out, "prime1", _level+1);
      if (prime2 != null) prime2.print (_out, "prime2", _level+1);
      if (exponent1 != null) exponent1.print (_out, "exponent1", _level+1);
      if (exponent2 != null) exponent2.print (_out, "exponent2", _level+1);
      if (coefficient != null) coefficient.print (_out, "coefficient", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
