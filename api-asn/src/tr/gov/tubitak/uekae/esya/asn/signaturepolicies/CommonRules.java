/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class CommonRules extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public SignerAndVerifierRules signerAndVeriferRules;  // optional
   public SigningCertTrustCondition signingCertTrustCondition;  // optional
   public TimestampTrustCondition timeStampTrustCondition;  // optional
   public AttributeTrustCondition attributeTrustCondition;  // optional
   public AlgorithmConstraintSet algorithmConstraintSet;  // optional
   public SignPolExtensions signPolExtensions;  // optional

   public CommonRules () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CommonRules (
      SignerAndVerifierRules signerAndVeriferRules_,
      SigningCertTrustCondition signingCertTrustCondition_,
      TimestampTrustCondition timeStampTrustCondition_,
      AttributeTrustCondition attributeTrustCondition_,
      AlgorithmConstraintSet algorithmConstraintSet_,
      SignPolExtensions signPolExtensions_
   ) {
      super();
      signerAndVeriferRules = signerAndVeriferRules_;
      signingCertTrustCondition = signingCertTrustCondition_;
      timeStampTrustCondition = timeStampTrustCondition_;
      attributeTrustCondition = attributeTrustCondition_;
      algorithmConstraintSet = algorithmConstraintSet_;
      signPolExtensions = signPolExtensions_;
   }

   public void init () {
      signerAndVeriferRules = null;
      signingCertTrustCondition = null;
      timeStampTrustCondition = null;
      attributeTrustCondition = null;
      algorithmConstraintSet = null;
      signPolExtensions = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode signerAndVeriferRules

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         signerAndVeriferRules = new SignerAndVerifierRules();
         signerAndVeriferRules.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode signingCertTrustCondition

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         signingCertTrustCondition = new SigningCertTrustCondition();
         signingCertTrustCondition.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode timeStampTrustCondition

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         timeStampTrustCondition = new TimestampTrustCondition();
         timeStampTrustCondition.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode attributeTrustCondition

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         attributeTrustCondition = new AttributeTrustCondition();
         attributeTrustCondition.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode algorithmConstraintSet

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
         int offset = buffer.getByteCount();
         algorithmConstraintSet = new AlgorithmConstraintSet();
         algorithmConstraintSet.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode signPolExtensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 5, elemLen, true)) {
         int offset = buffer.getByteCount();
         signPolExtensions = new SignPolExtensions();
         signPolExtensions.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signPolExtensions

      if (signPolExtensions != null) {
         len = signPolExtensions.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
         _aal += len;
      }

      // encode algorithmConstraintSet

      if (algorithmConstraintSet != null) {
         len = algorithmConstraintSet.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;
      }

      // encode attributeTrustCondition

      if (attributeTrustCondition != null) {
         len = attributeTrustCondition.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }

      // encode timeStampTrustCondition

      if (timeStampTrustCondition != null) {
         len = timeStampTrustCondition.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode signingCertTrustCondition

      if (signingCertTrustCondition != null) {
         len = signingCertTrustCondition.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode signerAndVeriferRules

      if (signerAndVeriferRules != null) {
         len = signerAndVeriferRules.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (signerAndVeriferRules != null) signerAndVeriferRules.print (_out, "signerAndVeriferRules", _level+1);
      if (signingCertTrustCondition != null) signingCertTrustCondition.print (_out, "signingCertTrustCondition", _level+1);
      if (timeStampTrustCondition != null) timeStampTrustCondition.print (_out, "timeStampTrustCondition", _level+1);
      if (attributeTrustCondition != null) attributeTrustCondition.print (_out, "attributeTrustCondition", _level+1);
      if (algorithmConstraintSet != null) algorithmConstraintSet.print (_out, "algorithmConstraintSet", _level+1);
      if (signPolExtensions != null) signPolExtensions.print (_out, "signPolExtensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
