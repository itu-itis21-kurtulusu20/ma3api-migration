/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class KeyTransRecipientInfo extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public CMSVersion version;
   public RecipientIdentifier rid;
   public AlgorithmIdentifier keyEncryptionAlgorithm;
   public Asn1OctetString encryptedKey;

   public KeyTransRecipientInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public KeyTransRecipientInfo (
      CMSVersion version_,
      RecipientIdentifier rid_,
      AlgorithmIdentifier keyEncryptionAlgorithm_,
      Asn1OctetString encryptedKey_
   ) {
      super();
      version = version_;
      rid = rid_;
      keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
      encryptedKey = encryptedKey_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public KeyTransRecipientInfo (long version_,
      RecipientIdentifier rid_,
      AlgorithmIdentifier keyEncryptionAlgorithm_,
      byte[] encryptedKey_
   ) {
      super();
      version = new CMSVersion (version_);
      rid = rid_;
      keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
      encryptedKey = new Asn1OctetString (encryptedKey_);
   }

   public void init () {
      version = null;
      rid = null;
      keyEncryptionAlgorithm = null;
      encryptedKey = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new CMSVersion();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode rid

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
         {
            rid = new RecipientIdentifier();
            rid.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "rid");
      }
      else throw new Asn1MissingRequiredException (buffer, "rid");

      // decode keyEncryptionAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         keyEncryptionAlgorithm = new AlgorithmIdentifier();
         keyEncryptionAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "keyEncryptionAlgorithm");

      // decode encryptedKey

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         encryptedKey = new Asn1OctetString();
         encryptedKey.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "encryptedKey");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode encryptedKey

      if (encryptedKey != null) {
         len = encryptedKey.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("encryptedKey");

      // encode keyEncryptionAlgorithm

      if (keyEncryptionAlgorithm != null) {
         len = keyEncryptionAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("keyEncryptionAlgorithm");

      // encode rid

      if (rid != null) {
         len = rid.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("rid");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (rid != null) rid.print (_out, "rid", _level+1);
      if (keyEncryptionAlgorithm != null) keyEncryptionAlgorithm.print (_out, "keyEncryptionAlgorithm", _level+1);
      if (encryptedKey != null) encryptedKey.print (_out, "encryptedKey", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
