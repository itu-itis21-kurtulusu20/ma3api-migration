/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkcs12;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.cms.DigestInfo;

public class MacData extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_pkcs12Rtkey._rtkey);
	}

   public DigestInfo mac;
   public Asn1OctetString macSalt;
   public Asn1Integer iterations;  // default = 1()

   public MacData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public MacData (
      DigestInfo mac_,
      Asn1OctetString macSalt_,
      Asn1Integer iterations_
   ) {
      super();
      mac = mac_;
      macSalt = macSalt_;
      iterations = iterations_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public MacData (
      DigestInfo mac_,
      Asn1OctetString macSalt_
   ) {
      super();
      mac = mac_;
      macSalt = macSalt_;
      iterations = new Asn1Integer (1);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public MacData (DigestInfo mac_,
      byte[] macSalt_,
      long iterations_
   ) {
      super();
      mac = mac_;
      macSalt = new Asn1OctetString (macSalt_);
      iterations = new Asn1Integer (iterations_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public MacData (
      DigestInfo mac_,
      byte[] macSalt_
   ) {
      super();
      mac = mac_;
      macSalt = new Asn1OctetString (macSalt_);
      iterations = new Asn1Integer (1);
   }

   public void init () {
      mac = null;
      macSalt = null;
      iterations = new Asn1Integer (1);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode mac

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         mac = new DigestInfo();
         mac.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "mac");

      // decode macSalt

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         macSalt = new Asn1OctetString();
         macSalt.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "macSalt");

      // decode iterations

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         iterations = new Asn1Integer();
         iterations.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode iterations

      if (iterations != null) {
         len = iterations.encode (buffer, true);
         _aal += len;
      }

      // encode macSalt

      if (macSalt != null) {
         len = macSalt.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("macSalt");

      // encode mac

      if (mac != null) {
         len = mac.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("mac");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (mac != null) mac.print (_out, "mac", _level+1);
      if (macSalt != null) macSalt.print (_out, "macSalt", _level+1);
      if (iterations != null) iterations.print (_out, "iterations", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
