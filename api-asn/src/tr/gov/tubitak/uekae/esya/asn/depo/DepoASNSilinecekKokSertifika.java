/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.depo;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Name;

public class DepoASNSilinecekKokSertifika extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_depoRtkey._rtkey);
	}

   public Asn1OctetString kokSertifikaValue;
   public Asn1BigInteger kokSerialNumber;
   public Name kokIssuerName;
   public Name kokSubjectName;

   public DepoASNSilinecekKokSertifika () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DepoASNSilinecekKokSertifika (
      Asn1OctetString kokSertifikaValue_,
      Asn1BigInteger kokSerialNumber_,
      Name kokIssuerName_,
      Name kokSubjectName_
   ) {
      super();
      kokSertifikaValue = kokSertifikaValue_;
      kokSerialNumber = kokSerialNumber_;
      kokIssuerName = kokIssuerName_;
      kokSubjectName = kokSubjectName_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DepoASNSilinecekKokSertifika (byte[] kokSertifikaValue_,
      Asn1BigInteger kokSerialNumber_,
      Name kokIssuerName_,
      Name kokSubjectName_
   ) {
      super();
      kokSertifikaValue = new Asn1OctetString (kokSertifikaValue_);
      kokSerialNumber = kokSerialNumber_;
      kokIssuerName = kokIssuerName_;
      kokSubjectName = kokSubjectName_;
   }

   public void init () {
      kokSertifikaValue = null;
      kokSerialNumber = null;
      kokIssuerName = null;
      kokSubjectName = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode kokSertifikaValue

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         kokSertifikaValue = new Asn1OctetString();
         kokSertifikaValue.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "kokSertifikaValue");

      // decode kokSerialNumber

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         kokSerialNumber = new Asn1BigInteger();
         kokSerialNumber.decode (buffer, false, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "kokSerialNumber");

      // decode kokIssuerName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         kokIssuerName = new Name();
         kokIssuerName.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "kokIssuerName");

      // decode kokSubjectName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         kokSubjectName = new Name();
         kokSubjectName.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "kokSubjectName");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode kokSubjectName

      if (kokSubjectName != null) {
         len = kokSubjectName.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("kokSubjectName");

      // encode kokIssuerName

      if (kokIssuerName != null) {
         len = kokIssuerName.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("kokIssuerName");

      // encode kokSerialNumber

      if (kokSerialNumber != null) {
         len = kokSerialNumber.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("kokSerialNumber");

      // encode kokSertifikaValue

      if (kokSertifikaValue != null) {
         len = kokSertifikaValue.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("kokSertifikaValue");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (kokSertifikaValue != null) kokSertifikaValue.print (_out, "kokSertifikaValue", _level+1);
      if (kokSerialNumber != null) kokSerialNumber.print (_out, "kokSerialNumber", _level+1);
      if (kokIssuerName != null) kokIssuerName.print (_out, "kokIssuerName", _level+1);
      if (kokSubjectName != null) kokSubjectName.print (_out, "kokSubjectName", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
