/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class PBMParameter extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public Asn1OctetString salt;
   public AlgorithmIdentifier owf;
   public Asn1Integer iterationCount;
   public AlgorithmIdentifier mac;

   public PBMParameter () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PBMParameter (
      Asn1OctetString salt_,
      AlgorithmIdentifier owf_,
      Asn1Integer iterationCount_,
      AlgorithmIdentifier mac_
   ) {
      super();
      salt = salt_;
      owf = owf_;
      iterationCount = iterationCount_;
      mac = mac_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PBMParameter (byte[] salt_,
      AlgorithmIdentifier owf_,
      long iterationCount_,
      AlgorithmIdentifier mac_
   ) {
      super();
      salt = new Asn1OctetString (salt_);
      owf = owf_;
      iterationCount = new Asn1Integer (iterationCount_);
      mac = mac_;
   }

   public void init () {
      salt = null;
      owf = null;
      iterationCount = null;
      mac = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode salt

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         salt = new Asn1OctetString();
         salt.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "salt");

      // decode owf

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         owf = new AlgorithmIdentifier();
         owf.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "owf");

      // decode iterationCount

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         iterationCount = new Asn1Integer();
         iterationCount.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "iterationCount");

      // decode mac

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         mac = new AlgorithmIdentifier();
         mac.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "mac");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode mac

      if (mac != null) {
         len = mac.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("mac");

      // encode iterationCount

      if (iterationCount != null) {
         len = iterationCount.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("iterationCount");

      // encode owf

      if (owf != null) {
         len = owf.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("owf");

      // encode salt

      if (salt != null) {
         len = salt.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("salt");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (salt != null) salt.print (_out, "salt", _level+1);
      if (owf != null) owf.print (_out, "owf", _level+1);
      if (iterationCount != null) iterationCount.print (_out, "iterationCount", _level+1);
      if (mac != null) mac.print (_out, "mac", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
