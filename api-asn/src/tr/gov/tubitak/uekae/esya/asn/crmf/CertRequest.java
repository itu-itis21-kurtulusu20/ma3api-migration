/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.crmf;

import com.objsys.asn1j.runtime.*;

public class CertRequest extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_crmfRtkey._rtkey);
	}

   public Asn1Integer certReqId;
   public CertTemplate certTemplate;
   public Controls controls;  // optional

   public CertRequest () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CertRequest (
      Asn1Integer certReqId_,
      CertTemplate certTemplate_,
      Controls controls_
   ) {
      super();
      certReqId = certReqId_;
      certTemplate = certTemplate_;
      controls = controls_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CertRequest (
      Asn1Integer certReqId_,
      CertTemplate certTemplate_
   ) {
      super();
      certReqId = certReqId_;
      certTemplate = certTemplate_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CertRequest (long certReqId_,
      CertTemplate certTemplate_,
      Controls controls_
   ) {
      super();
      certReqId = new Asn1Integer (certReqId_);
      certTemplate = certTemplate_;
      controls = controls_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CertRequest (
      long certReqId_,
      CertTemplate certTemplate_
   ) {
      super();
      certReqId = new Asn1Integer (certReqId_);
      certTemplate = certTemplate_;
   }

   public void init () {
      certReqId = null;
      certTemplate = null;
      controls = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode certReqId

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         certReqId = new Asn1Integer();
         certReqId.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "certReqId");

      // decode certTemplate

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         certTemplate = new CertTemplate();
         certTemplate.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "certTemplate");

      // decode controls

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         controls = new Controls();
         controls.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode controls

      if (controls != null) {
         len = controls.encode (buffer, true);
         _aal += len;
      }

      // encode certTemplate

      if (certTemplate != null) {
         len = certTemplate.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("certTemplate");

      // encode certReqId

      if (certReqId != null) {
         len = certReqId.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("certReqId");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (certReqId != null) certReqId.print (_out, "certReqId", _level+1);
      if (certTemplate != null) certTemplate.print (_out, "certTemplate", _level+1);
      if (controls != null) controls.print (_out, "controls", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
