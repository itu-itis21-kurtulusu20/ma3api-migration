/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 06-Jan-2017.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class DocumentTypeListSyntax extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public DocumentTypeListVersion version;
   public _SetOfDocumentType docTypeList;

   public DocumentTypeListSyntax () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public DocumentTypeListSyntax (
      DocumentTypeListVersion version_,
      _SetOfDocumentType docTypeList_
   ) {
      super();
      version = version_;
      docTypeList = docTypeList_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public DocumentTypeListSyntax (long version_,
      _SetOfDocumentType docTypeList_
   ) {
      super();
      version = new DocumentTypeListVersion (version_);
      docTypeList = docTypeList_;
   }

   public void init () {
      version = null;
      docTypeList = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof DocumentTypeListSyntax) ) return false;

      DocumentTypeListSyntax rhs = (DocumentTypeListSyntax) obj;

      if (version == null) {
         if (rhs.version != null) return false;
      }
      else {
         if (!version.equals(rhs.version)) {
            return false;
         }
      }

      if (docTypeList == null) {
         if (rhs.docTypeList != null) return false;
      }
      else {
         if (!docTypeList.equals(rhs.docTypeList)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (version != null) __code = 31*__code + version.hashCode();
      if (docTypeList != null) __code = 31*__code + docTypeList.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new DocumentTypeListVersion();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode docTypeList

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
         docTypeList = new _SetOfDocumentType();
         docTypeList.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "docTypeList");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 17))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode docTypeList

      if (docTypeList != null) {
         len = docTypeList.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("docTypeList");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (docTypeList != null) docTypeList.print (_out, "docTypeList", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
