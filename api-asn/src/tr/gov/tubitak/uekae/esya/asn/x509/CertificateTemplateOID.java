/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 08-Jun-2020.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class CertificateTemplateOID extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ImplicitRtkey._rtkey);
   }

   public Asn1ObjectIdentifier templateID;
   public Asn1Integer templateMajorVersion;
   public Asn1Integer templateMinorVersion;  // optional

   public CertificateTemplateOID () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CertificateTemplateOID (
      Asn1ObjectIdentifier templateID_,
      Asn1Integer templateMajorVersion_,
      Asn1Integer templateMinorVersion_
   ) {
      super();
      templateID = templateID_;
      templateMajorVersion = templateMajorVersion_;
      templateMinorVersion = templateMinorVersion_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CertificateTemplateOID (
      Asn1ObjectIdentifier templateID_,
      Asn1Integer templateMajorVersion_
   ) {
      super();
      templateID = templateID_;
      templateMajorVersion = templateMajorVersion_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CertificateTemplateOID (int[] templateID_,
      long templateMajorVersion_,
      long templateMinorVersion_
   ) {
      super();
      templateID = new Asn1ObjectIdentifier (templateID_);
      templateMajorVersion = new Asn1Integer (templateMajorVersion_);
      templateMinorVersion = new Asn1Integer (templateMinorVersion_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public CertificateTemplateOID (
      int[] templateID_,
      long templateMajorVersion_
   ) {
      super();
      templateID = new Asn1ObjectIdentifier (templateID_);
      templateMajorVersion = new Asn1Integer (templateMajorVersion_);
   }

   public void init () {
      templateID = null;
      templateMajorVersion = null;
      templateMinorVersion = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof CertificateTemplateOID) ) return false;

      CertificateTemplateOID rhs = (CertificateTemplateOID) obj;

      if (templateID == null) {
         if (rhs.templateID != null) return false;
      }
      else {
         if (!templateID.equals(rhs.templateID)) {
            return false;
         }
      }

      if (templateMajorVersion == null) {
         if (rhs.templateMajorVersion != null) return false;
      }
      else {
         if (!templateMajorVersion.equals(rhs.templateMajorVersion)) {
            return false;
         }
      }

      if (templateMinorVersion == null) {
         if (rhs.templateMinorVersion != null) return false;
      }
      else {
         if (!templateMinorVersion.equals(rhs.templateMinorVersion)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (templateID != null) __code = 31*__code + templateID.hashCode();
      if (templateMajorVersion != null) __code = 31*__code + templateMajorVersion.hashCode();
      if (templateMinorVersion != null) __code = 31*__code + templateMinorVersion.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode templateID

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         templateID = new Asn1ObjectIdentifier();
         templateID.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "templateID");

      // decode templateMajorVersion

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         templateMajorVersion = new Asn1Integer();
         templateMajorVersion.decode (buffer, true, elemLen.value);
         if (!(templateMajorVersion.value >= 0)) {
            throw new Asn1ConsVioException ("templateMajorVersion.value", templateMajorVersion.value);
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "templateMajorVersion");

      // decode templateMinorVersion

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         templateMinorVersion = new Asn1Integer();
         templateMinorVersion.decode (buffer, true, elemLen.value);
         if (!(templateMinorVersion.value >= 0)) {
            throw new Asn1ConsVioException ("templateMinorVersion.value", templateMinorVersion.value);
         }

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode templateMinorVersion

      if (templateMinorVersion != null) {
         if (!(templateMinorVersion.value >= 0)) {
            throw new Asn1ConsVioException ("templateMinorVersion.value", templateMinorVersion.value);
         }

         len = templateMinorVersion.encode (buffer, true);
         _aal += len;
      }

      // encode templateMajorVersion

      if (templateMajorVersion != null) {
         if (!(templateMajorVersion.value >= 0)) {
            throw new Asn1ConsVioException ("templateMajorVersion.value", templateMajorVersion.value);
         }

         len = templateMajorVersion.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("templateMajorVersion");

      // encode templateID

      if (templateID != null) {
         len = templateID.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("templateID");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (templateID != null) templateID.print (_out, "templateID", _level+1);
      if (templateMajorVersion != null) templateMajorVersion.print (_out, "templateMajorVersion", _level+1);
      if (templateMinorVersion != null) templateMinorVersion.print (_out, "templateMinorVersion", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
