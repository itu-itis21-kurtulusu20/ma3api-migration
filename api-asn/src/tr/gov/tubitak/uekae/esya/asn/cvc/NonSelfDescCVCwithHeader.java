/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cvc;

import com.objsys.asn1j.runtime.*;

public class NonSelfDescCVCwithHeader extends Asn1Type {
   private static final long serialVersionUID = 55;
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 34);

   static {
      setKey (_cvcRtkey._rtkey);
   }

   public NonSelfDescCVC cvc;
   public Asn1OctetString header;

   public NonSelfDescCVCwithHeader () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public NonSelfDescCVCwithHeader (
      NonSelfDescCVC cvc_,
      Asn1OctetString header_
   ) {
      super();
      cvc = cvc_;
      header = header_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public NonSelfDescCVCwithHeader (NonSelfDescCVC cvc_,
      byte[] header_
   ) {
      super();
      cvc = cvc_;
      header = new Asn1OctetString (header_);
   }

   public void init () {
      cvc = null;
      header = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode cvc

      if (_context.matchElemTag (Asn1Tag.APPL, Asn1Tag.CONS, 33, elemLen, false)) {
         cvc = new NonSelfDescCVC();
         cvc.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "cvc");

      // decode header

      if (_context.matchElemTag (Asn1Tag.APPL, Asn1Tag.PRIM, 13, elemLen, true)) {
         int offset = buffer.getByteCount();
         header = new Asn1OctetString();
         header.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "header");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 33) ||
             _tag.equals (Asn1Tag.APPL, Asn1Tag.PRIM, 13))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode header

      if (header != null) {
         len = header.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.APPL, Asn1Tag.PRIM, 13, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("header");

      // encode cvc

      if (cvc != null) {
         len = cvc.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("cvc");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (cvc != null) cvc.print (_out, "cvc", _level+1);
      if (header != null) header.print (_out, "header", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
