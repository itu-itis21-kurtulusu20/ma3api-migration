/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.crmf.CertId;
import tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

public class RevAnnContent extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public PKIStatus status;
   public CertId certId;
   public Asn1GeneralizedTime willBeRevokedAt;
   public Asn1GeneralizedTime badSinceDate;
   public Extensions crlDetails;  // optional

   public RevAnnContent () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RevAnnContent (
      PKIStatus status_,
      CertId certId_,
      Asn1GeneralizedTime willBeRevokedAt_,
      Asn1GeneralizedTime badSinceDate_,
      Extensions crlDetails_
   ) {
      super();
      status = status_;
      certId = certId_;
      willBeRevokedAt = willBeRevokedAt_;
      badSinceDate = badSinceDate_;
      crlDetails = crlDetails_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RevAnnContent (
      PKIStatus status_,
      CertId certId_,
      Asn1GeneralizedTime willBeRevokedAt_,
      Asn1GeneralizedTime badSinceDate_
   ) {
      super();
      status = status_;
      certId = certId_;
      willBeRevokedAt = willBeRevokedAt_;
      badSinceDate = badSinceDate_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RevAnnContent (long status_,
      CertId certId_,
      String willBeRevokedAt_,
      String badSinceDate_,
      Extensions crlDetails_
   ) {
      super();
      status = new PKIStatus (status_);
      certId = certId_;
      willBeRevokedAt = new Asn1GeneralizedTime (willBeRevokedAt_);
      badSinceDate = new Asn1GeneralizedTime (badSinceDate_);
      crlDetails = crlDetails_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RevAnnContent (
      long status_,
      CertId certId_,
      String willBeRevokedAt_,
      String badSinceDate_
   ) {
      super();
      status = new PKIStatus (status_);
      certId = certId_;
      willBeRevokedAt = new Asn1GeneralizedTime (willBeRevokedAt_);
      badSinceDate = new Asn1GeneralizedTime (badSinceDate_);
   }

   public void init () {
      status = null;
      certId = null;
      willBeRevokedAt = null;
      badSinceDate = null;
      crlDetails = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode status

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         status = new PKIStatus();
         status.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "status");

      // decode certId

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         certId = new CertId();
         certId.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "certId");

      // decode willBeRevokedAt

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         willBeRevokedAt = new Asn1GeneralizedTime (true);
         willBeRevokedAt.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "willBeRevokedAt");

      // decode badSinceDate

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         badSinceDate = new Asn1GeneralizedTime (true);
         badSinceDate.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "badSinceDate");

      // decode crlDetails

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         crlDetails = new Extensions();
         crlDetails.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode crlDetails

      if (crlDetails != null) {
         len = crlDetails.encode (buffer, true);
         _aal += len;
      }

      // encode badSinceDate

      if (badSinceDate != null) {
         len = badSinceDate.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("badSinceDate");

      // encode willBeRevokedAt

      if (willBeRevokedAt != null) {
         len = willBeRevokedAt.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("willBeRevokedAt");

      // encode certId

      if (certId != null) {
         len = certId.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("certId");

      // encode status

      if (status != null) {
         len = status.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("status");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (status != null) status.print (_out, "status", _level+1);
      if (certId != null) certId.print (_out, "certId", _level+1);
      if (willBeRevokedAt != null) willBeRevokedAt.print (_out, "willBeRevokedAt", _level+1);
      if (badSinceDate != null) badSinceDate.print (_out, "badSinceDate", _level+1);
      if (crlDetails != null) crlDetails.print (_out, "crlDetails", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
