/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class SignerAndVerifierRules extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public SignerRules signerRules;
   public VerifierRules verifierRules;

   public SignerAndVerifierRules () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SignerAndVerifierRules (
      SignerRules signerRules_,
      VerifierRules verifierRules_
   ) {
      super();
      signerRules = signerRules_;
      verifierRules = verifierRules_;
   }

   public void init () {
      signerRules = null;
      verifierRules = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode signerRules

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         signerRules = new SignerRules();
         signerRules.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "signerRules");

      // decode verifierRules

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         verifierRules = new VerifierRules();
         verifierRules.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "verifierRules");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode verifierRules

      if (verifierRules != null) {
         len = verifierRules.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("verifierRules");

      // encode signerRules

      if (signerRules != null) {
         len = signerRules.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("signerRules");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (signerRules != null) signerRules.print (_out, "signerRules", _level+1);
      if (verifierRules != null) verifierRules.print (_out, "verifierRules", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
