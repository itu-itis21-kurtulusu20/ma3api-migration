/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class KRB5PrincipalName extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_KerberosRtkey._rtkey);
   }

   public Asn1GeneralString realm;
   public PrincipalName principalName;

   public KRB5PrincipalName () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public KRB5PrincipalName (
      Asn1GeneralString realm_,
      PrincipalName principalName_
   ) {
      super();
      realm = realm_;
      principalName = principalName_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public KRB5PrincipalName (String realm_,
      PrincipalName principalName_
   ) {
      super();
      realm = new Asn1GeneralString (realm_);
      principalName = principalName_;
   }

   public void init () {
      realm = null;
      principalName = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof KRB5PrincipalName) ) return false;

      KRB5PrincipalName rhs = (KRB5PrincipalName) obj;

      if (realm == null) {
         if (rhs.realm != null) return false;
      }
      else {
         if (!realm.equals(rhs.realm)) {
            return false;
         }
      }

      if (principalName == null) {
         if (rhs.principalName != null) return false;
      }
      else {
         if (!principalName.equals(rhs.principalName)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (realm != null) __code = 31*__code + realm.hashCode();
      if (principalName != null) __code = 31*__code + principalName.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode realm

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         realm = new Asn1GeneralString();
         realm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "realm");

      // decode principalName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         principalName = new PrincipalName();
         principalName.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "principalName");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode principalName

      if (principalName != null) {
         len = principalName.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("principalName");

      // encode realm

      if (realm != null) {
         len = realm.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("realm");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (realm != null) realm.print (_out, "realm", _level+1);
      if (principalName != null) principalName.print (_out, "principalName", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
