/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.passport.PassportCVCerticate;
import tr.gov.tubitak.uekae.esya.asn.x509.Certificate;
import tr.gov.tubitak.uekae.esya.asn.cvc.SelfDescCVC;
import tr.gov.tubitak.uekae.esya.asn.cvc.NonSelfDescCVCwithHeader;

public class CMPCertificate extends Asn1Choice {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   // Choice element identifier constants
   public final static byte _X509V3PKCERT = 1;
   public final static byte _SELFDESCCVC = 2;
   public final static byte _NONSELFDESCCVCWITHHEADER = 3;

   public CMPCertificate () {
      super();
   }

   public CMPCertificate (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _X509V3PKCERT: return "x509v3PKCert";
      case _SELFDESCCVC: return "selfDescCVC";
      case _NONSELFDESCCVCWITHHEADER: return "nonSelfDescCVCwithHeader";
      default: return "UNDEFINED";
      }
   }

   public void set_x509v3PKCert (Certificate value) {
      setElement (_X509V3PKCERT, value);
   }

   public void set_selfDescCVC (SelfDescCVC value) {
      setElement (_SELFDESCCVC, value);
   }

   public void set_nonSelfDescCVCwithHeader (NonSelfDescCVCwithHeader value) {
      setElement (_NONSELFDESCCVCWITHHEADER, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
      {
         buffer.reset();
         Certificate x509v3PKCert;
         x509v3PKCert = new Certificate();
         x509v3PKCert.decode (buffer, true, len);
         setElement (_X509V3PKCERT, x509v3PKCert);
      }
      else if (tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 33))
      {
         buffer.reset();
         PassportCVCerticate selfDescCVC;
         selfDescCVC = new PassportCVCerticate();
         selfDescCVC.decode (buffer, true, len);

         setElement (_SELFDESCCVC, selfDescCVC);
      }
      else if (tag.equals (Asn1Tag.APPL, Asn1Tag.CONS, 34))
      {
         buffer.reset();
         NonSelfDescCVCwithHeader nonSelfDescCVCwithHeader;
         nonSelfDescCVCwithHeader = new NonSelfDescCVCwithHeader();
         nonSelfDescCVCwithHeader.decode (buffer, true, len);
         setElement (_NONSELFDESCCVCWITHHEADER, nonSelfDescCVCwithHeader);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode x509v3PKCert
      case _X509V3PKCERT:
         Certificate x509v3PKCert = (Certificate) getElement();
         len = x509v3PKCert.encode (buffer, true);
         _aal += len;
         break;

      // encode selfDescCVC
      case _SELFDESCCVC:
         PassportCVCerticate selfDescCVC = (PassportCVCerticate) getElement();
         len = selfDescCVC.encode (buffer, true);
         _aal += len;
         break;

      // encode nonSelfDescCVCwithHeader
      case _NONSELFDESCCVCWITHHEADER:
         NonSelfDescCVCwithHeader nonSelfDescCVCwithHeader = (NonSelfDescCVCwithHeader) getElement();
         len = nonSelfDescCVCwithHeader.encode (buffer, true);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
