/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.etsiqc;

import com.objsys.asn1j.runtime.*;

public class Iso4217CurrencyCode extends Asn1Choice {

	private static final long serialVersionUID = 55;
	static {
		setKey(_etsiqcRtkey._rtkey);
	}

   // Choice element identifier constants
   public final static byte _NUMERIC = 1;
   public final static byte _ALPHABETIC = 2;

   public Iso4217CurrencyCode () {
      super();
   }

   public Iso4217CurrencyCode (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _NUMERIC: return "numeric";
      case _ALPHABETIC: return "alphabetic";
      default: return "UNDEFINED";
      }
   }

   public void set_numeric (Asn1Integer value) {
      setElement (_NUMERIC, value);
   }

   public void set_alphabetic (Asn1PrintableString value) {
      setElement (_ALPHABETIC, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
      {
         buffer.reset();
         Asn1Integer numeric;
         numeric = new Asn1Integer();
         numeric.decode (buffer, true, len);
         if (!((numeric.value >= 1 && numeric.value <= 999))) {
            throw new Asn1ConsVioException ("numeric.value", numeric.value);
         }

         setElement (_NUMERIC, numeric);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19))
      {
         buffer.reset();
         Asn1PrintableString alphabetic;
         alphabetic = new Asn1PrintableString();
         alphabetic.decode (buffer, true, len);
         if (!(alphabetic.getLength() == 3)) {
            throw new Asn1ConsVioException ("alphabetic.getLength()", alphabetic.getLength());
         }

         setElement (_ALPHABETIC, alphabetic);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode numeric
      case _NUMERIC:
         Asn1Integer numeric = (Asn1Integer) getElement();
         if (!((numeric.value >= 1 && numeric.value <= 999))) {
            throw new Asn1ConsVioException ("numeric.value", numeric.value);
         }

         len = numeric.encode (buffer, true);
         _aal += len;
         break;

      // encode alphabetic
      case _ALPHABETIC:
         Asn1PrintableString alphabetic = (Asn1PrintableString) getElement();
         if (!(alphabetic.getLength() == 3)) {
            throw new Asn1ConsVioException ("alphabetic.getLength()", alphabetic.getLength());
         }

         len = alphabetic.encode (buffer, true);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
