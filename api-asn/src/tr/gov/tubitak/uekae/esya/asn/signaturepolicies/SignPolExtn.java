/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class SignPolExtn extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public Asn1ObjectIdentifier extnID;
   public Asn1OctetString extnValue;

   public SignPolExtn () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SignPolExtn (
      Asn1ObjectIdentifier extnID_,
      Asn1OctetString extnValue_
   ) {
      super();
      extnID = extnID_;
      extnValue = extnValue_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SignPolExtn (int[] extnID_,
      byte[] extnValue_
   ) {
      super();
      extnID = new Asn1ObjectIdentifier (extnID_);
      extnValue = new Asn1OctetString (extnValue_);
   }

   public void init () {
      extnID = null;
      extnValue = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode extnID

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         extnID = new Asn1ObjectIdentifier();
         extnID.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "extnID");

      // decode extnValue

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         extnValue = new Asn1OctetString();
         extnValue.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "extnValue");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extnValue

      if (extnValue != null) {
         len = extnValue.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("extnValue");

      // encode extnID

      if (extnID != null) {
         len = extnID.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("extnID");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (extnID != null) extnID.print (_out, "extnID", _level+1);
      if (extnValue != null) extnValue.print (_out, "extnValue", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
