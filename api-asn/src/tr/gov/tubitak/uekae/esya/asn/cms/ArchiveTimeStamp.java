/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
import tr.gov.tubitak.uekae.esya.asn.cms.ContentInfo;

public class ArchiveTimeStamp extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public AlgorithmIdentifier digestAlgorithm;  // optional
   public Attributes attributes;  // optional
   public _SeqOfPartialHashtree reducedHashtree;  // optional
   public ContentInfo timeStamp;

   public ArchiveTimeStamp () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ArchiveTimeStamp (
      AlgorithmIdentifier digestAlgorithm_,
      Attributes attributes_,
      _SeqOfPartialHashtree reducedHashtree_,
      ContentInfo timeStamp_
   ) {
      super();
      digestAlgorithm = digestAlgorithm_;
      attributes = attributes_;
      reducedHashtree = reducedHashtree_;
      timeStamp = timeStamp_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ArchiveTimeStamp (
      ContentInfo timeStamp_
   ) {
      super();
      timeStamp = timeStamp_;
   }

   public void init () {
      digestAlgorithm = null;
      attributes = null;
      reducedHashtree = null;
      timeStamp = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode digestAlgorithm

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         digestAlgorithm = new AlgorithmIdentifier();
         digestAlgorithm.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode attributes

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         attributes = new Attributes();
         attributes.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode reducedHashtree

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         reducedHashtree = new _SeqOfPartialHashtree();
         reducedHashtree.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode timeStamp

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         timeStamp = new ContentInfo();
         timeStamp.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "timeStamp");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode timeStamp

      if (timeStamp != null) {
         len = timeStamp.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("timeStamp");

      // encode reducedHashtree

      if (reducedHashtree != null) {
         len = reducedHashtree.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode attributes

      if (attributes != null) {
         len = attributes.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode digestAlgorithm

      if (digestAlgorithm != null) {
         len = digestAlgorithm.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (digestAlgorithm != null) digestAlgorithm.print (_out, "digestAlgorithm", _level+1);
      if (attributes != null) attributes.print (_out, "attributes", _level+1);
      if (reducedHashtree != null) reducedHashtree.print (_out, "reducedHashtree", _level+1);
      if (timeStamp != null) timeStamp.print (_out, "timeStamp", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
