/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class OcspResponsesID extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public OcspIdentifier ocspIdentifier;
   public OtherHash ocspRepHash;  // optional

   public OcspResponsesID () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OcspResponsesID (
      OcspIdentifier ocspIdentifier_,
      OtherHash ocspRepHash_
   ) {
      super();
      ocspIdentifier = ocspIdentifier_;
      ocspRepHash = ocspRepHash_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public OcspResponsesID (
      OcspIdentifier ocspIdentifier_
   ) {
      super();
      ocspIdentifier = ocspIdentifier_;
   }

   public void init () {
      ocspIdentifier = null;
      ocspRepHash = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode ocspIdentifier

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         ocspIdentifier = new OcspIdentifier();
         ocspIdentifier.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "ocspIdentifier");

      // decode ocspRepHash

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
         {
            ocspRepHash = new OtherHash();
            ocspRepHash.decode (buffer, true, elemLen.value);
         }
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode ocspRepHash

      if (ocspRepHash != null) {
         len = ocspRepHash.encode (buffer, true);
         _aal += len;
      }

      // encode ocspIdentifier

      if (ocspIdentifier != null) {
         len = ocspIdentifier.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("ocspIdentifier");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (ocspIdentifier != null) ocspIdentifier.print (_out, "ocspIdentifier", _level+1);
      if (ocspRepHash != null) ocspRepHash.print (_out, "ocspRepHash", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
