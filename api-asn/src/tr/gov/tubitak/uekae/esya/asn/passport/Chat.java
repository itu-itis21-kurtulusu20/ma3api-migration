/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 18-Sep-2017.
 */
package tr.gov.tubitak.uekae.esya.asn.passport;

import com.objsys.asn1j.runtime.*;

public class Chat extends Asn1Type {
   private static final long serialVersionUID = 55;
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 76);

   static {
      setKey (_SelfCvcRtkey._rtkey);
   }

   public Asn1ObjectIdentifier oid;
   public Asn1OctetString value;

   public Chat () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Chat (
      Asn1ObjectIdentifier oid_,
      Asn1OctetString value_
   ) {
      super();
      oid = oid_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Chat (int[] oid_,
      byte[] value_
   ) {
      super();
      oid = new Asn1ObjectIdentifier (oid_);
      value = new Asn1OctetString (value_);
   }

   public void init () {
      oid = null;
      value = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode oid

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         oid = new Asn1ObjectIdentifier();
         oid.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "oid");

      // decode value

      if (_context.matchElemTag (Asn1Tag.APPL, Asn1Tag.PRIM, 19, elemLen, true)) {
         int offset = buffer.getByteCount();
         value = new Asn1OctetString();
         value.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "value");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.APPL, Asn1Tag.PRIM, 19))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode value

      if (value != null) {
         len = value.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.APPL, Asn1Tag.PRIM, 19, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("value");

      // encode oid

      if (oid != null) {
         len = oid.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("oid");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (oid != null) oid.print (_out, "oid", _level+1);
      if (value != null) value.print (_out, "value", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
