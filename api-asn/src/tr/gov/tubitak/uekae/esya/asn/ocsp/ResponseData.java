/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

public class ResponseData extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_ocspRtkey._rtkey);
	}

   public Version version;  // default = Version.v1()
   public ResponderID responderID;
   public Asn1GeneralizedTime producedAt;
   public _SeqOfSingleResponse responses;
   public Extensions responseExtensions;  // optional

   public ResponseData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ResponseData (
      Version version_,
      ResponderID responderID_,
      Asn1GeneralizedTime producedAt_,
      _SeqOfSingleResponse responses_,
      Extensions responseExtensions_
   ) {
      super();
      version = version_;
      responderID = responderID_;
      producedAt = producedAt_;
      responses = responses_;
      responseExtensions = responseExtensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ResponseData (
      ResponderID responderID_,
      Asn1GeneralizedTime producedAt_,
      _SeqOfSingleResponse responses_
   ) {
      super();
      version = new Version (Version.v1);
      responderID = responderID_;
      producedAt = producedAt_;
      responses = responses_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ResponseData (long version_,
      ResponderID responderID_,
      String producedAt_,
      _SeqOfSingleResponse responses_,
      Extensions responseExtensions_
   ) {
      super();
      version = new Version (version_);
      responderID = responderID_;
      producedAt = new Asn1GeneralizedTime (producedAt_);
      responses = responses_;
      responseExtensions = responseExtensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ResponseData (
      ResponderID responderID_,
      String producedAt_,
      _SeqOfSingleResponse responses_
   ) {
      super();
      version = new Version (Version.v1);
      responderID = responderID_;
      producedAt = new Asn1GeneralizedTime (producedAt_);
      responses = responses_;
   }

   public void init () {
      version = new Version (Version.v1);
      responderID = null;
      producedAt = null;
      responses = null;
      responseExtensions = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         version = new Version();
         version.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode responderID

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
         {
            responderID = new ResponderID();
            responderID.decode (buffer, true, elemLen.value);
         }
         else throw new Asn1MissingRequiredException (buffer, "responderID");
      }
      else throw new Asn1MissingRequiredException (buffer, "responderID");

      // decode producedAt

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         producedAt = new Asn1GeneralizedTime (true);
         producedAt.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "producedAt");

      // decode responses

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         responses = new _SeqOfSingleResponse();
         responses.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "responses");

      // decode responseExtensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         responseExtensions = new Extensions();
         responseExtensions.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode responseExtensions

      if (responseExtensions != null) {
         len = responseExtensions.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode responses

      if (responses != null) {
         len = responses.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("responses");

      // encode producedAt

      if (producedAt != null) {
         len = producedAt.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("producedAt");

      // encode responderID

      if (responderID != null) {
         len = responderID.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("responderID");

      // encode version

      if (version != null) {
         if (!version.equals (Version.v1)) {
            len = version.encode (buffer, true);
            len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (responderID != null) responderID.print (_out, "responderID", _level+1);
      if (producedAt != null) producedAt.print (_out, "producedAt", _level+1);
      if (responses != null) responses.print (_out, "responses", _level+1);
      if (responseExtensions != null) responseExtensions.print (_out, "responseExtensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
