/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkcs1pkcs8;

import com.objsys.asn1j.runtime.*;

public class ECPrivateKey extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkcs1pkcs8Rtkey._rtkey);
   }

   public ECPrivateKey_version version;
   public Asn1OctetString privateKey;
   public Asn1OpenType parameters;  // optional
   public Asn1BitString publicKey;  // optional

   public ECPrivateKey () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ECPrivateKey (
      ECPrivateKey_version version_,
      Asn1OctetString privateKey_,
      Asn1OpenType parameters_,
      Asn1BitString publicKey_
   ) {
      super();
      version = version_;
      privateKey = privateKey_;
      parameters = parameters_;
      publicKey = publicKey_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ECPrivateKey (
      ECPrivateKey_version version_,
      Asn1OctetString privateKey_
   ) {
      super();
      version = version_;
      privateKey = privateKey_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ECPrivateKey (long version_,
      byte[] privateKey_,
      Asn1OpenType parameters_,
      Asn1BitString publicKey_
   ) {
      super();
      version = new ECPrivateKey_version (version_);
      privateKey = new Asn1OctetString (privateKey_);
      parameters = parameters_;
      publicKey = publicKey_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ECPrivateKey (
      long version_,
      byte[] privateKey_
   ) {
      super();
      version = new ECPrivateKey_version (version_);
      privateKey = new Asn1OctetString (privateKey_);
   }

   public void init () {
      version = null;
      privateKey = null;
      parameters = null;
      publicKey = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new ECPrivateKey_version();
         version.decode (buffer, true, elemLen.value);
         if (!(version.value == 1)) {
            throw new Asn1ConsVioException ("version.value", version.value);
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode privateKey

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         privateKey = new Asn1OctetString();
         privateKey.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "privateKey");

      // decode parameters

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         parameters = new Asn1OpenType();
         parameters.decode (buffer, true, 0);
      }

      // decode publicKey

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         publicKey = new Asn1BitString();
         publicKey.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode publicKey

      if (publicKey != null) {
         len = publicKey.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode parameters

      if (parameters != null) {
         len = parameters.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode privateKey

      if (privateKey != null) {
         len = privateKey.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("privateKey");

      // encode version

      if (version != null) {
         if (!(version.value == 1)) {
            throw new Asn1ConsVioException ("version.value", version.value);
         }

         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (privateKey != null) privateKey.print (_out, "privateKey", _level+1);
      if (parameters != null) parameters.print (_out, "parameters", _level+1);
      if (publicKey != null) publicKey.print (_out, "publicKey", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
