/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkcs12;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.cms.ContentInfo;

public class PFX extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_pkcs12Rtkey._rtkey);
	}

   public PFX_version version;
   public ContentInfo authSafe;
   public MacData macData;  // optional

   public PFX () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public PFX (
      PFX_version version_,
      ContentInfo authSafe_,
      MacData macData_
   ) {
      super();
      version = version_;
      authSafe = authSafe_;
      macData = macData_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public PFX (
      PFX_version version_,
      ContentInfo authSafe_
   ) {
      super();
      version = version_;
      authSafe = authSafe_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public PFX (long version_,
      ContentInfo authSafe_,
      MacData macData_
   ) {
      super();
      version = new PFX_version (version_);
      authSafe = authSafe_;
      macData = macData_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public PFX (
      long version_,
      ContentInfo authSafe_
   ) {
      super();
      version = new PFX_version (version_);
      authSafe = authSafe_;
   }

   public void init () {
      version = null;
      authSafe = null;
      macData = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new PFX_version();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode authSafe

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         authSafe = new ContentInfo();
         authSafe.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "authSafe");

      // decode macData

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         macData = new MacData();
         macData.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode macData

      if (macData != null) {
         len = macData.encode (buffer, true);
         _aal += len;
      }

      // encode authSafe

      if (authSafe != null) {
         len = authSafe.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("authSafe");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (authSafe != null) authSafe.print (_out, "authSafe", _level+1);
      if (macData != null) macData.print (_out, "macData", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
