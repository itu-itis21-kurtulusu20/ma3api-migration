/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkcs12;

import com.objsys.asn1j.runtime.*;

public class SafeBag extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_pkcs12Rtkey._rtkey);
	}

   public Asn1ObjectIdentifier bagId;
   public Asn1OpenType bagValue;
   public _SetOfPKCS12Attribute bagAttributes;  // optional

   public SafeBag () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SafeBag (
      Asn1ObjectIdentifier bagId_,
      Asn1OpenType bagValue_,
      _SetOfPKCS12Attribute bagAttributes_
   ) {
      super();
      bagId = bagId_;
      bagValue = bagValue_;
      bagAttributes = bagAttributes_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SafeBag (
      Asn1ObjectIdentifier bagId_,
      Asn1OpenType bagValue_
   ) {
      super();
      bagId = bagId_;
      bagValue = bagValue_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SafeBag (int[] bagId_,
      Asn1OpenType bagValue_,
      _SetOfPKCS12Attribute bagAttributes_
   ) {
      super();
      bagId = new Asn1ObjectIdentifier (bagId_);
      bagValue = bagValue_;
      bagAttributes = bagAttributes_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public SafeBag (
      int[] bagId_,
      Asn1OpenType bagValue_
   ) {
      super();
      bagId = new Asn1ObjectIdentifier (bagId_);
      bagValue = bagValue_;
   }

   public void init () {
      bagId = null;
      bagValue = null;
      bagAttributes = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode bagId

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         bagId = new Asn1ObjectIdentifier();
         bagId.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "bagId");

      // decode bagValue

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         bagValue = new Asn1OpenType();
         bagValue.decode (buffer, true, 0);
         if (elemLen.value == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }
      else throw new Asn1MissingRequiredException (buffer);

      // decode bagAttributes

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
         bagAttributes = new _SetOfPKCS12Attribute();
         bagAttributes.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 17))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode bagAttributes

      if (bagAttributes != null) {
         len = bagAttributes.encode (buffer, true);
         _aal += len;
      }

      // encode bagValue

      if (bagValue != null) {
         len = bagValue.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("bagValue");

      // encode bagId

      if (bagId != null) {
         len = bagId.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("bagId");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (bagId != null) bagId.print (_out, "bagId", _level+1);
      if (bagValue != null) bagValue.print (_out, "bagValue", _level+1);
      if (bagAttributes != null) bagAttributes.print (_out, "bagAttributes", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
