/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class ExtendedNetworkAddress_e163_4_address extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public Asn1NumericString number;
   public Asn1NumericString sub_address;  // optional

   public ExtendedNetworkAddress_e163_4_address () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ExtendedNetworkAddress_e163_4_address (
      Asn1NumericString number_,
      Asn1NumericString sub_address_
   ) {
      super();
      number = number_;
      sub_address = sub_address_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ExtendedNetworkAddress_e163_4_address (
      Asn1NumericString number_
   ) {
      super();
      number = number_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ExtendedNetworkAddress_e163_4_address (String number_,
      String sub_address_
   ) {
      super();
      number = new Asn1NumericString (number_);
      sub_address = new Asn1NumericString (sub_address_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ExtendedNetworkAddress_e163_4_address (
      String number_
   ) {
      super();
      number = new Asn1NumericString (number_);
   }

   public void init () {
      number = null;
      sub_address = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof ExtendedNetworkAddress_e163_4_address) ) return false;

      ExtendedNetworkAddress_e163_4_address rhs = (ExtendedNetworkAddress_e163_4_address) obj;

      if (number == null) {
         if (rhs.number != null) return false;
      }
      else {
         if (!number.equals(rhs.number)) {
            return false;
         }
      }

      if (sub_address == null) {
         if (rhs.sub_address != null) return false;
      }
      else {
         if (!sub_address.equals(rhs.sub_address)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (number != null) __code = 31*__code + number.hashCode();
      if (sub_address != null) __code = 31*__code + sub_address.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode number

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         number = new Asn1NumericString();
         number.decode (buffer, false, elemLen.value);
         if (!((number.getLength() >= 1 && number.getLength() <= 15))) {
            throw new Asn1ConsVioException ("number.getLength()", number.getLength());
         }

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "number");

      // decode sub_address

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         sub_address = new Asn1NumericString();
         sub_address.decode (buffer, false, elemLen.value);
         if (!((sub_address.getLength() >= 1 && sub_address.getLength() <= 40))) {
            throw new Asn1ConsVioException ("sub_address.getLength()", sub_address.getLength());
         }

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode sub_address

      if (sub_address != null) {
         if (!((sub_address.getLength() >= 1 && sub_address.getLength() <= 40))) {
            throw new Asn1ConsVioException ("sub_address.getLength()", sub_address.getLength());
         }

         len = sub_address.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
      }

      // encode number

      if (number != null) {
         if (!((number.getLength() >= 1 && number.getLength() <= 15))) {
            throw new Asn1ConsVioException ("number.getLength()", number.getLength());
         }

         len = number.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("number");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (number != null) number.print (_out, "number", _level+1);
      if (sub_address != null) sub_address.print (_out, "sub_address", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
