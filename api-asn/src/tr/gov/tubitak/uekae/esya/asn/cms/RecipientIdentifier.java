/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class RecipientIdentifier extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   // Choice element identifier constants
   public final static byte _ISSUERANDSERIALNUMBER = 1;
   public final static byte _SUBJECTKEYIDENTIFIER = 2;

   public RecipientIdentifier () {
      super();
   }

   public RecipientIdentifier (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _ISSUERANDSERIALNUMBER: return "issuerAndSerialNumber";
      case _SUBJECTKEYIDENTIFIER: return "subjectKeyIdentifier";
      default: return "UNDEFINED";
      }
   }

   public void set_issuerAndSerialNumber (IssuerAndSerialNumber value) {
      setElement (_ISSUERANDSERIALNUMBER, value);
   }

   public void set_subjectKeyIdentifier (Asn1OctetString value) {
      setElement (_SUBJECTKEYIDENTIFIER, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
      {
         buffer.reset();
         IssuerAndSerialNumber issuerAndSerialNumber;
         issuerAndSerialNumber = new IssuerAndSerialNumber();
         issuerAndSerialNumber.decode (buffer, true, len);
         setElement (_ISSUERANDSERIALNUMBER, issuerAndSerialNumber);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0)) {
         Asn1OctetString subjectKeyIdentifier;
         subjectKeyIdentifier = new Asn1OctetString();
         subjectKeyIdentifier.decode (buffer, false, len);
         setElement (_SUBJECTKEYIDENTIFIER, subjectKeyIdentifier);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode issuerAndSerialNumber
      case _ISSUERANDSERIALNUMBER:
         IssuerAndSerialNumber issuerAndSerialNumber = (IssuerAndSerialNumber) getElement();
         len = issuerAndSerialNumber.encode (buffer, true);
         _aal += len;
         break;

      // encode subjectKeyIdentifier
      case _SUBJECTKEYIDENTIFIER:
         Asn1OctetString subjectKeyIdentifier = (Asn1OctetString) getElement();
         len = subjectKeyIdentifier.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
