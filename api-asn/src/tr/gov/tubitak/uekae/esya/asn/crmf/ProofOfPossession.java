/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.crmf;

import com.objsys.asn1j.runtime.*;

public class ProofOfPossession extends Asn1Choice {

	private static final long serialVersionUID = 55;
	static {
		setKey(_crmfRtkey._rtkey);
	}

   // Choice element identifier constants
   public final static byte _RAVERIFIED = 1;
   public final static byte _SIGNATURE = 2;
   public final static byte _KEYENCIPHERMENT = 3;
   public final static byte _KEYAGREEMENT = 4;

   public ProofOfPossession () {
      super();
   }

   public ProofOfPossession (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _RAVERIFIED: return "raVerified";
      case _SIGNATURE: return "signature";
      case _KEYENCIPHERMENT: return "keyEncipherment";
      case _KEYAGREEMENT: return "keyAgreement";
      default: return "UNDEFINED";
      }
   }

   public void set_raVerified () {
      setElement (_RAVERIFIED, Asn1Null.NULL_VALUE);
   }

   public void set_signature (POPOSigningKey value) {
      setElement (_SIGNATURE, value);
   }

   public void set_keyEncipherment (POPOPrivKey value) {
      setElement (_KEYENCIPHERMENT, value);
   }

   public void set_keyAgreement (POPOPrivKey value) {
      setElement (_KEYAGREEMENT, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
      {
         Asn1Null raVerified;
         raVerified = new Asn1Null();
         raVerified.decode (buffer, true, len);
         setElement (_RAVERIFIED, raVerified);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
      {
         POPOSigningKey signature;
         signature = new POPOSigningKey();
         signature.decode (buffer, false, len);
         setElement (_SIGNATURE, signature);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
      {
         POPOPrivKey keyEncipherment;
         keyEncipherment = new POPOPrivKey();
         keyEncipherment.decode (buffer, false, len);
         setElement (_KEYENCIPHERMENT, keyEncipherment);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
      {
         POPOPrivKey keyAgreement;
         keyAgreement = new POPOPrivKey();
         keyAgreement.decode (buffer, false, len);
         setElement (_KEYAGREEMENT, keyAgreement);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode raVerified
      case _RAVERIFIED:
         Asn1Null raVerified = (Asn1Null) getElement();
         len = raVerified.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
         break;

      // encode signature
      case _SIGNATURE:
         POPOSigningKey signature = (POPOSigningKey) getElement();
         len = signature.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
         break;

      // encode keyEncipherment
      case _KEYENCIPHERMENT:
         POPOPrivKey keyEncipherment = (POPOPrivKey) getElement();
         len = keyEncipherment.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
         break;

      // encode keyAgreement
      case _KEYAGREEMENT:
         POPOPrivKey keyAgreement = (POPOPrivKey) getElement();
         len = keyAgreement.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
