/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 07-Nov-2018.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class CompressedData extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public CMSVersion version;
   public AlgorithmIdentifier compressionAlgorithm;
   public EncapsulatedContentInfo encapContentInfo;

   public CompressedData () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CompressedData (
      CMSVersion version_,
      AlgorithmIdentifier compressionAlgorithm_,
      EncapsulatedContentInfo encapContentInfo_
   ) {
      super();
      version = version_;
      compressionAlgorithm = compressionAlgorithm_;
      encapContentInfo = encapContentInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CompressedData (long version_,
      AlgorithmIdentifier compressionAlgorithm_,
      EncapsulatedContentInfo encapContentInfo_
   ) {
      super();
      version = new CMSVersion (version_);
      compressionAlgorithm = compressionAlgorithm_;
      encapContentInfo = encapContentInfo_;
   }

   public void init () {
      version = null;
      compressionAlgorithm = null;
      encapContentInfo = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new CMSVersion();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode compressionAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         compressionAlgorithm = new AlgorithmIdentifier();
         compressionAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "compressionAlgorithm");

      // decode encapContentInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         encapContentInfo = new EncapsulatedContentInfo();
         encapContentInfo.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "encapContentInfo");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode encapContentInfo

      if (encapContentInfo != null) {
         len = encapContentInfo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("encapContentInfo");

      // encode compressionAlgorithm

      if (compressionAlgorithm != null) {
         len = compressionAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("compressionAlgorithm");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (compressionAlgorithm != null) compressionAlgorithm.print (_out, "compressionAlgorithm", _level+1);
      if (encapContentInfo != null) encapContentInfo.print (_out, "encapContentInfo", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
