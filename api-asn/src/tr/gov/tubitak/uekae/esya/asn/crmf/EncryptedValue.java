/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.crmf;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class EncryptedValue extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_crmfRtkey._rtkey);
	}

   public AlgorithmIdentifier intendedAlg;  // optional
   public AlgorithmIdentifier symmAlg;  // optional
   public Asn1BitString encSymmKey;  // optional
   public AlgorithmIdentifier keyAlg;  // optional
   public Asn1OctetString valueHint;  // optional
   public Asn1BitString encValue;

   public EncryptedValue () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EncryptedValue (
      AlgorithmIdentifier intendedAlg_,
      AlgorithmIdentifier symmAlg_,
      Asn1BitString encSymmKey_,
      AlgorithmIdentifier keyAlg_,
      Asn1OctetString valueHint_,
      Asn1BitString encValue_
   ) {
      super();
      intendedAlg = intendedAlg_;
      symmAlg = symmAlg_;
      encSymmKey = encSymmKey_;
      keyAlg = keyAlg_;
      valueHint = valueHint_;
      encValue = encValue_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EncryptedValue (
      Asn1BitString encValue_
   ) {
      super();
      encValue = encValue_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EncryptedValue (AlgorithmIdentifier intendedAlg_,
      AlgorithmIdentifier symmAlg_,
      Asn1BitString encSymmKey_,
      AlgorithmIdentifier keyAlg_,
      byte[] valueHint_,
      Asn1BitString encValue_
   ) {
      super();
      intendedAlg = intendedAlg_;
      symmAlg = symmAlg_;
      encSymmKey = encSymmKey_;
      keyAlg = keyAlg_;
      valueHint = new Asn1OctetString (valueHint_);
      encValue = encValue_;
   }

   public void init () {
      intendedAlg = null;
      symmAlg = null;
      encSymmKey = null;
      keyAlg = null;
      valueHint = null;
      encValue = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode intendedAlg

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         intendedAlg = new AlgorithmIdentifier();
         intendedAlg.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode symmAlg

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         symmAlg = new AlgorithmIdentifier();
         symmAlg.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode encSymmKey

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         encSymmKey = new Asn1BitString();
         encSymmKey.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode keyAlg

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         keyAlg = new AlgorithmIdentifier();
         keyAlg.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode valueHint

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
         int offset = buffer.getByteCount();
         valueHint = new Asn1OctetString();
         valueHint.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode encValue

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         encValue = new Asn1BitString();
         encValue.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "encValue");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode encValue

      if (encValue != null) {
         len = encValue.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("encValue");

      // encode valueHint

      if (valueHint != null) {
         len = valueHint.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
         _aal += len;
      }

      // encode keyAlg

      if (keyAlg != null) {
         len = keyAlg.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }

      // encode encSymmKey

      if (encSymmKey != null) {
         len = encSymmKey.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
      }

      // encode symmAlg

      if (symmAlg != null) {
         len = symmAlg.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode intendedAlg

      if (intendedAlg != null) {
         len = intendedAlg.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (intendedAlg != null) intendedAlg.print (_out, "intendedAlg", _level+1);
      if (symmAlg != null) symmAlg.print (_out, "symmAlg", _level+1);
      if (encSymmKey != null) encSymmKey.print (_out, "encSymmKey", _level+1);
      if (keyAlg != null) keyAlg.print (_out, "keyAlg", _level+1);
      if (valueHint != null) valueHint.print (_out, "valueHint", _level+1);
      if (encValue != null) encValue.print (_out, "encValue", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
