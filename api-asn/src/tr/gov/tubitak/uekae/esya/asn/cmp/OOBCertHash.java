/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
import tr.gov.tubitak.uekae.esya.asn.crmf.CertId;

public class OOBCertHash extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public AlgorithmIdentifier hashAlg;  // optional
   public CertId certId;  // optional
   public Asn1BitString hashVal;

   public OOBCertHash () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public OOBCertHash (
      AlgorithmIdentifier hashAlg_,
      CertId certId_,
      Asn1BitString hashVal_
   ) {
      super();
      hashAlg = hashAlg_;
      certId = certId_;
      hashVal = hashVal_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public OOBCertHash (
      Asn1BitString hashVal_
   ) {
      super();
      hashVal = hashVal_;
   }

   public void init () {
      hashAlg = null;
      certId = null;
      hashVal = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode hashAlg

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         hashAlg = new AlgorithmIdentifier();
         hashAlg.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode certId

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         certId = new CertId();
         certId.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode hashVal

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         hashVal = new Asn1BitString();
         hashVal.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "hashVal");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode hashVal

      if (hashVal != null) {
         len = hashVal.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("hashVal");

      // encode certId

      if (certId != null) {
         len = certId.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode hashAlg

      if (hashAlg != null) {
         len = hashAlg.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (hashAlg != null) hashAlg.print (_out, "hashAlg", _level+1);
      if (certId != null) certId.print (_out, "certId", _level+1);
      if (hashVal != null) hashVal.print (_out, "hashVal", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
