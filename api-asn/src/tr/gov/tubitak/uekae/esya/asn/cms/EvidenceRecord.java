/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class EvidenceRecord extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public EvidenceRecord_version version;
   public _SeqOfAlgorithmIdentifier digestAlgorithms;
   public CryptoInfos cryptoInfos;  // optional
   public EncryptionInfo encryptionInfo;  // optional
   public ArchiveTimeStampSequence archiveTimeStampSequence;

   public EvidenceRecord () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EvidenceRecord (
      EvidenceRecord_version version_,
      _SeqOfAlgorithmIdentifier digestAlgorithms_,
      CryptoInfos cryptoInfos_,
      EncryptionInfo encryptionInfo_,
      ArchiveTimeStampSequence archiveTimeStampSequence_
   ) {
      super();
      version = version_;
      digestAlgorithms = digestAlgorithms_;
      cryptoInfos = cryptoInfos_;
      encryptionInfo = encryptionInfo_;
      archiveTimeStampSequence = archiveTimeStampSequence_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EvidenceRecord (
      EvidenceRecord_version version_,
      _SeqOfAlgorithmIdentifier digestAlgorithms_,
      ArchiveTimeStampSequence archiveTimeStampSequence_
   ) {
      super();
      version = version_;
      digestAlgorithms = digestAlgorithms_;
      archiveTimeStampSequence = archiveTimeStampSequence_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EvidenceRecord (long version_,
      _SeqOfAlgorithmIdentifier digestAlgorithms_,
      CryptoInfos cryptoInfos_,
      EncryptionInfo encryptionInfo_,
      ArchiveTimeStampSequence archiveTimeStampSequence_
   ) {
      super();
      version = new EvidenceRecord_version (version_);
      digestAlgorithms = digestAlgorithms_;
      cryptoInfos = cryptoInfos_;
      encryptionInfo = encryptionInfo_;
      archiveTimeStampSequence = archiveTimeStampSequence_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EvidenceRecord (
      long version_,
      _SeqOfAlgorithmIdentifier digestAlgorithms_,
      ArchiveTimeStampSequence archiveTimeStampSequence_
   ) {
      super();
      version = new EvidenceRecord_version (version_);
      digestAlgorithms = digestAlgorithms_;
      archiveTimeStampSequence = archiveTimeStampSequence_;
   }

   public void init () {
      version = null;
      digestAlgorithms = null;
      cryptoInfos = null;
      encryptionInfo = null;
      archiveTimeStampSequence = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new EvidenceRecord_version();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode digestAlgorithms

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         digestAlgorithms = new _SeqOfAlgorithmIdentifier();
         digestAlgorithms.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "digestAlgorithms");

      // decode cryptoInfos

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         cryptoInfos = new CryptoInfos();
         cryptoInfos.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode encryptionInfo

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         encryptionInfo = new EncryptionInfo();
         encryptionInfo.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode archiveTimeStampSequence

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         archiveTimeStampSequence = new ArchiveTimeStampSequence();
         archiveTimeStampSequence.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "archiveTimeStampSequence");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode archiveTimeStampSequence

      if (archiveTimeStampSequence != null) {
         len = archiveTimeStampSequence.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("archiveTimeStampSequence");

      // encode encryptionInfo

      if (encryptionInfo != null) {
         len = encryptionInfo.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode cryptoInfos

      if (cryptoInfos != null) {
         len = cryptoInfos.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode digestAlgorithms

      if (digestAlgorithms != null) {
         len = digestAlgorithms.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("digestAlgorithms");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (digestAlgorithms != null) digestAlgorithms.print (_out, "digestAlgorithms", _level+1);
      if (cryptoInfos != null) cryptoInfos.print (_out, "cryptoInfos", _level+1);
      if (encryptionInfo != null) encryptionInfo.print (_out, "encryptionInfo", _level+1);
      if (archiveTimeStampSequence != null) archiveTimeStampSequence.print (_out, "archiveTimeStampSequence", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
