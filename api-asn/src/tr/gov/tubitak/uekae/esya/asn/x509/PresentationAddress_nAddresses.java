/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class PresentationAddress_nAddresses extends Asn1Type {
   private static final long serialVersionUID = 55;
   public final static Asn1Tag TAG =
      new Asn1Tag (Asn1Tag.CTXT, Asn1Tag.CONS, 3);

   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public Asn1OctetString[] elements;

   public PresentationAddress_nAddresses () {
      elements = null;
   }

   /**
    * This constructor initializes the internal array to hold the 
    * given number of elements.  The element values must be manually 
    * populated.
    */
   public PresentationAddress_nAddresses (int numRecords) {
      elements = new Asn1OctetString [numRecords];
   }

   /**
    * This constructor initializes the internal array to hold the 
    * given the array.  
    */
   public PresentationAddress_nAddresses (Asn1OctetString[] elements_) {
      elements = elements_;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof PresentationAddress_nAddresses) ) return false;
      PresentationAddress_nAddresses rhs = (PresentationAddress_nAddresses) obj;
      Asn1OctetString[] rhsElements = rhs.elements;

      if (elements == null && rhsElements != null) return false;

      if(elements != null && rhsElements == null) return false;

      if(elements == null && rhsElements == null) return true;

      if(elements.length != rhsElements.length) return false;

      for(int i = 0; i< elements.length; i++) {
         if (elements[i] == null && rhsElements[i] != null) return false;
         if (rhsElements[i] == null && elements[i] != null) return false;
         if (rhsElements[i] == null && elements[i] == null) continue;

         if(!elements[i].equals(rhsElements[i])) return false;
      }
      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (elements != null) {
         for (int i = 0; i < elements.length; i ++) {
            if (elements[i] != null)__code = 31*__code + elements[i].hashCode();
         }
      }

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, TAG) : implicitLength;

      int llen2 = llen;
      llen = matchTag (buffer, Asn1Tag.SET);

      // decode SEQUENCE OF or SET OF

      java.util.LinkedList<Asn1OctetString> llist =
         new java.util.LinkedList<Asn1OctetString>();
      Asn1BerDecodeContext _context =
          new Asn1BerDecodeContext (buffer, llen);
      Asn1OctetString element;
      int elemLen = 0;

      while (!_context.expired()) {
         element = new Asn1OctetString();
         element.decode (buffer, true, elemLen);
         llist.add (element);
      }

      elements = new Asn1OctetString [llist.size()];
      llist.toArray (elements);

      if (!(elements.length >= 1)) {
         throw new Asn1ConsVioException ("elements.length", elements.length);
      }

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode SEQUENCE OF or SET OF

      if (!(elements.length >= 1)) {
         throw new Asn1ConsVioException ("elements.length", elements.length);
      }

      Asn1BerEncodeBuffer savedBuffer = buffer;
      buffer = new Asn1DerEncodeBuffer();
      Asn1OctetString[] elems = new Asn1OctetString [elements.length];

      for (int i = elements.length - 1; i >= 0; i--) {
         len = elements[i].encode (buffer, true);
         _aal += len;
         elems[i] = new Asn1OctetString (buffer.getMsgCopy());
         buffer.reset();
      }

      buffer = savedBuffer;
      java.util.Arrays.sort (elems);

      for (int i = elements.length - 1; i >= 0; i--) {
         elems[i].encode (buffer, false);
      }

      _aal += buffer.encodeTagAndLength (Asn1Tag.SET, _aal);

      if (explicit) {
         _aal += buffer.encodeTagAndLength (TAG, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      if (elements != null) {
         for (int i = 0; i < elements.length; i++) {
            String name = _varName + "[" + i + "]";
            elements[i].print (_out, name, _level);
         }
      }
   }
}
