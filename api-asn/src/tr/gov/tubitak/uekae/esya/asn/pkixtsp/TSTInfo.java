/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkixtsp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;
import tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

public class TSTInfo extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkixtspRtkey._rtkey);
   }

   public TSTInfo_version version;
   public Asn1ObjectIdentifier policy;
   public MessageImprint messageImprint;
   public Asn1BigInteger serialNumber;
   public Asn1GeneralizedTime genTime;
   public Accuracy accuracy;  // optional
   public Asn1Boolean ordering;  // default = false()
   public Asn1BigInteger nonce;  // optional
   public GeneralName tsa;  // optional
   public Extensions extensions;  // optional

   public TSTInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TSTInfo (
      TSTInfo_version version_,
      Asn1ObjectIdentifier policy_,
      MessageImprint messageImprint_,
      Asn1BigInteger serialNumber_,
      Asn1GeneralizedTime genTime_,
      Accuracy accuracy_,
      Asn1Boolean ordering_,
      Asn1BigInteger nonce_,
      GeneralName tsa_,
      Extensions extensions_
   ) {
      super();
      version = version_;
      policy = policy_;
      messageImprint = messageImprint_;
      serialNumber = serialNumber_;
      genTime = genTime_;
      accuracy = accuracy_;
      ordering = ordering_;
      nonce = nonce_;
      tsa = tsa_;
      extensions = extensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public TSTInfo (
      TSTInfo_version version_,
      Asn1ObjectIdentifier policy_,
      MessageImprint messageImprint_,
      Asn1BigInteger serialNumber_,
      Asn1GeneralizedTime genTime_
   ) {
      super();
      version = version_;
      policy = policy_;
      messageImprint = messageImprint_;
      serialNumber = serialNumber_;
      genTime = genTime_;
      ordering = new Asn1Boolean (false);
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TSTInfo (long version_,
      int[] policy_,
      MessageImprint messageImprint_,
      Asn1BigInteger serialNumber_,
      String genTime_,
      Accuracy accuracy_,
      boolean ordering_,
      Asn1BigInteger nonce_,
      GeneralName tsa_,
      Extensions extensions_
   ) {
      super();
      version = new TSTInfo_version (version_);
      policy = new Asn1ObjectIdentifier (policy_);
      messageImprint = messageImprint_;
      serialNumber = serialNumber_;
      genTime = new Asn1GeneralizedTime (genTime_);
      accuracy = accuracy_;
      ordering = new Asn1Boolean (ordering_);
      nonce = nonce_;
      tsa = tsa_;
      extensions = extensions_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public TSTInfo (
      long version_,
      int[] policy_,
      MessageImprint messageImprint_,
      Asn1BigInteger serialNumber_,
      String genTime_
   ) {
      super();
      version = new TSTInfo_version (version_);
      policy = new Asn1ObjectIdentifier (policy_);
      messageImprint = messageImprint_;
      serialNumber = serialNumber_;
      genTime = new Asn1GeneralizedTime (genTime_);
      ordering = new Asn1Boolean (false);
   }

   public void init () {
      version = null;
      policy = null;
      messageImprint = null;
      serialNumber = null;
      genTime = null;
      accuracy = null;
      ordering = new Asn1Boolean (false);
      nonce = null;
      tsa = null;
      extensions = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         version = new TSTInfo_version();
         version.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode policy

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         policy = new Asn1ObjectIdentifier();
         policy.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "policy");

      // decode messageImprint

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         messageImprint = new MessageImprint();
         messageImprint.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "messageImprint");

      // decode serialNumber

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         serialNumber = new Asn1BigInteger();
         serialNumber.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "serialNumber");

      // decode genTime

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         genTime = new Asn1GeneralizedTime (true);
         genTime.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "genTime");

      // decode accuracy

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         accuracy = new Accuracy();
         accuracy.decode (buffer, true, elemLen.value);
      }

      // decode ordering

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
         ordering = new Asn1Boolean();
         ordering.decode (buffer, true, elemLen.value);
      }

      // decode nonce

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         nonce = new Asn1BigInteger();
         nonce.decode (buffer, true, elemLen.value);
      }

      // decode tsa

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         tsa = new GeneralName();
         tsa.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode extensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         extensions = new Extensions();
         extensions.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extensions

      if (extensions != null) {
         len = extensions.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode tsa

      if (tsa != null) {
         len = tsa.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode nonce

      if (nonce != null) {
         len = nonce.encode (buffer, true);
         _aal += len;
      }

      // encode ordering

      if (ordering != null) {
         if (!ordering.equals (false)) {
            len = ordering.encode (buffer, true);
            _aal += len;
         }
      }

      // encode accuracy

      if (accuracy != null) {
         len = accuracy.encode (buffer, true);
         _aal += len;
      }

      // encode genTime

      if (genTime != null) {
         len = genTime.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("genTime");

      // encode serialNumber

      if (serialNumber != null) {
         len = serialNumber.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("serialNumber");

      // encode messageImprint

      if (messageImprint != null) {
         len = messageImprint.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("messageImprint");

      // encode policy

      if (policy != null) {
         len = policy.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("policy");

      // encode version

      if (version != null) {
         len = version.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (version != null) version.print (_out, "version", _level+1);
      if (policy != null) policy.print (_out, "policy", _level+1);
      if (messageImprint != null) messageImprint.print (_out, "messageImprint", _level+1);
      if (serialNumber != null) serialNumber.print (_out, "serialNumber", _level+1);
      if (genTime != null) genTime.print (_out, "genTime", _level+1);
      if (accuracy != null) accuracy.print (_out, "accuracy", _level+1);
      if (ordering != null) ordering.print (_out, "ordering", _level+1);
      if (nonce != null) nonce.print (_out, "nonce", _level+1);
      if (tsa != null) tsa.print (_out, "tsa", _level+1);
      if (extensions != null) extensions.print (_out, "extensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
