/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Certificate;

public class CertificateTrustPoint extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public Certificate trustpoint;
   public Asn1Integer pathLenConstraint;  // optional
   public AcceptablePolicySet acceptablePolicySet;  // optional
   public NameConstraints nameConstraints;  // optional
   public PolicyConstraints policyConstraints;  // optional

   public CertificateTrustPoint () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CertificateTrustPoint (
      Certificate trustpoint_,
      Asn1Integer pathLenConstraint_,
      AcceptablePolicySet acceptablePolicySet_,
      NameConstraints nameConstraints_,
      PolicyConstraints policyConstraints_
   ) {
      super();
      trustpoint = trustpoint_;
      pathLenConstraint = pathLenConstraint_;
      acceptablePolicySet = acceptablePolicySet_;
      nameConstraints = nameConstraints_;
      policyConstraints = policyConstraints_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public CertificateTrustPoint (
      Certificate trustpoint_
   ) {
      super();
      trustpoint = trustpoint_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public CertificateTrustPoint (Certificate trustpoint_,
      long pathLenConstraint_,
      AcceptablePolicySet acceptablePolicySet_,
      NameConstraints nameConstraints_,
      PolicyConstraints policyConstraints_
   ) {
      super();
      trustpoint = trustpoint_;
      pathLenConstraint = new Asn1Integer (pathLenConstraint_);
      acceptablePolicySet = acceptablePolicySet_;
      nameConstraints = nameConstraints_;
      policyConstraints = policyConstraints_;
   }

   public void init () {
      trustpoint = null;
      pathLenConstraint = null;
      acceptablePolicySet = null;
      nameConstraints = null;
      policyConstraints = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode trustpoint

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         trustpoint = new Certificate();
         trustpoint.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "trustpoint");

      // decode pathLenConstraint

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         pathLenConstraint = new Asn1Integer();
         pathLenConstraint.decode (buffer, true, elemLen.value);
         if (!(pathLenConstraint.value >= 0)) {
            throw new Asn1ConsVioException ("pathLenConstraint.value", pathLenConstraint.value);
         }

      }

      // decode acceptablePolicySet

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         acceptablePolicySet = new AcceptablePolicySet();
         acceptablePolicySet.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode nameConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         nameConstraints = new NameConstraints();
         nameConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode policyConstraints

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
         int offset = buffer.getByteCount();
         policyConstraints = new PolicyConstraints();
         policyConstraints.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode policyConstraints

      if (policyConstraints != null) {
         len = policyConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;
      }

      // encode nameConstraints

      if (nameConstraints != null) {
         len = nameConstraints.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode acceptablePolicySet

      if (acceptablePolicySet != null) {
         len = acceptablePolicySet.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode pathLenConstraint

      if (pathLenConstraint != null) {
         if (!(pathLenConstraint.value >= 0)) {
            throw new Asn1ConsVioException ("pathLenConstraint.value", pathLenConstraint.value);
         }

         len = pathLenConstraint.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode trustpoint

      if (trustpoint != null) {
         len = trustpoint.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("trustpoint");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (trustpoint != null) trustpoint.print (_out, "trustpoint", _level+1);
      if (pathLenConstraint != null) pathLenConstraint.print (_out, "pathLenConstraint", _level+1);
      if (acceptablePolicySet != null) acceptablePolicySet.print (_out, "acceptablePolicySet", _level+1);
      if (nameConstraints != null) nameConstraints.print (_out, "nameConstraints", _level+1);
      if (policyConstraints != null) policyConstraints.print (_out, "policyConstraints", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
