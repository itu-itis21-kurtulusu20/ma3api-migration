/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.attrcert;

import com.objsys.asn1j.runtime.*;

public class AAControls extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_attrcertRtkey._rtkey);
	}

   public Asn1Integer pathLenConstraint;  // optional
   public AttrSpec permittedAttrs;  // optional
   public AttrSpec excludedAttrs;  // optional
   public Asn1Boolean permitUnSpecified;  // default = true()

   public AAControls () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AAControls (
      Asn1Integer pathLenConstraint_,
      AttrSpec permittedAttrs_,
      AttrSpec excludedAttrs_,
      Asn1Boolean permitUnSpecified_
   ) {
      super();
      pathLenConstraint = pathLenConstraint_;
      permittedAttrs = permittedAttrs_;
      excludedAttrs = excludedAttrs_;
      permitUnSpecified = permitUnSpecified_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AAControls (long pathLenConstraint_,
      AttrSpec permittedAttrs_,
      AttrSpec excludedAttrs_,
      boolean permitUnSpecified_
   ) {
      super();
      pathLenConstraint = new Asn1Integer (pathLenConstraint_);
      permittedAttrs = permittedAttrs_;
      excludedAttrs = excludedAttrs_;
      permitUnSpecified = new Asn1Boolean (permitUnSpecified_);
   }

   public void init () {
      pathLenConstraint = null;
      permittedAttrs = null;
      excludedAttrs = null;
      permitUnSpecified = new Asn1Boolean (true);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode pathLenConstraint

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         pathLenConstraint = new Asn1Integer();
         pathLenConstraint.decode (buffer, true, elemLen.value);
         if (!(pathLenConstraint.value >= 0)) {
            throw new Asn1ConsVioException ("pathLenConstraint.value", pathLenConstraint.value);
         }

      }

      // decode permittedAttrs

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         permittedAttrs = new AttrSpec();
         permittedAttrs.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode excludedAttrs

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         excludedAttrs = new AttrSpec();
         excludedAttrs.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode permitUnSpecified

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
         permitUnSpecified = new Asn1Boolean();
         permitUnSpecified.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 1))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode permitUnSpecified

      if (permitUnSpecified != null) {
         if (!permitUnSpecified.equals (true)) {
            len = permitUnSpecified.encode (buffer, true);
            _aal += len;
         }
      }

      // encode excludedAttrs

      if (excludedAttrs != null) {
         len = excludedAttrs.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode permittedAttrs

      if (permittedAttrs != null) {
         len = permittedAttrs.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode pathLenConstraint

      if (pathLenConstraint != null) {
         if (!(pathLenConstraint.value >= 0)) {
            throw new Asn1ConsVioException ("pathLenConstraint.value", pathLenConstraint.value);
         }

         len = pathLenConstraint.encode (buffer, true);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (pathLenConstraint != null) pathLenConstraint.print (_out, "pathLenConstraint", _level+1);
      if (permittedAttrs != null) permittedAttrs.print (_out, "permittedAttrs", _level+1);
      if (excludedAttrs != null) excludedAttrs.print (_out, "excludedAttrs", _level+1);
      if (permitUnSpecified != null) permitUnSpecified.print (_out, "permitUnSpecified", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}