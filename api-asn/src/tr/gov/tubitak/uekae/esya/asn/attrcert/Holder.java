/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.attrcert;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.GeneralNames;

public class Holder extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_attrcertRtkey._rtkey);
	}

   public IssuerSerial baseCertificateID;  // optional
   public GeneralNames entityName;  // optional
   public ObjectDigestInfo objectDigestInfo;  // optional

   public Holder () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Holder (
      IssuerSerial baseCertificateID_,
      GeneralNames entityName_,
      ObjectDigestInfo objectDigestInfo_
   ) {
      super();
      baseCertificateID = baseCertificateID_;
      entityName = entityName_;
      objectDigestInfo = objectDigestInfo_;
   }

   public void init () {
      baseCertificateID = null;
      entityName = null;
      objectDigestInfo = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode baseCertificateID

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         baseCertificateID = new IssuerSerial();
         baseCertificateID.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode entityName

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         entityName = new GeneralNames();
         entityName.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode objectDigestInfo

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         objectDigestInfo = new ObjectDigestInfo();
         objectDigestInfo.decode (buffer, false, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode objectDigestInfo

      if (objectDigestInfo != null) {
         len = objectDigestInfo.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode entityName

      if (entityName != null) {
         len = entityName.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode baseCertificateID

      if (baseCertificateID != null) {
         len = baseCertificateID.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (baseCertificateID != null) baseCertificateID.print (_out, "baseCertificateID", _level+1);
      if (entityName != null) entityName.print (_out, "entityName", _level+1);
      if (objectDigestInfo != null) objectDigestInfo.print (_out, "objectDigestInfo", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}