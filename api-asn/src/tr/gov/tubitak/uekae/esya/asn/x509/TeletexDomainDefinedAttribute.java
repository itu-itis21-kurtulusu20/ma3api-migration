/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.x509;

import com.objsys.asn1j.runtime.*;

public class TeletexDomainDefinedAttribute extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_ExplicitRtkey._rtkey);
   }

   public Asn1T61String type;
   public Asn1T61String value;

   public TeletexDomainDefinedAttribute () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TeletexDomainDefinedAttribute (
      Asn1T61String type_,
      Asn1T61String value_
   ) {
      super();
      type = type_;
      value = value_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TeletexDomainDefinedAttribute (String type_,
      String value_
   ) {
      super();
      type = new Asn1T61String (type_);
      value = new Asn1T61String (value_);
   }

   public void init () {
      type = null;
      value = null;
   }

   public boolean equals( Object obj ) {
      if ( this == obj ) return true;
      if ( !(obj instanceof TeletexDomainDefinedAttribute) ) return false;

      TeletexDomainDefinedAttribute rhs = (TeletexDomainDefinedAttribute) obj;

      if (type == null) {
         if (rhs.type != null) return false;
      }
      else {
         if (!type.equals(rhs.type)) {
            return false;
         }
      }

      if (value == null) {
         if (rhs.value != null) return false;
      }
      else {
         if (!value.equals(rhs.value)) {
            return false;
         }
      }

      return true;
   }

   public int hashCode() {
      int __code = 1;

      if (type != null) __code = 31*__code + type.hashCode();
      if (value != null) __code = 31*__code + value.hashCode();

      return __code;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode type

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 20, elemLen, false)) {
         type = new Asn1T61String();
         type.decode (buffer, true, elemLen.value);
         if (!((type.getLength() >= 1 && type.getLength() <= 8))) {
            throw new Asn1ConsVioException ("type.getLength()", type.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "type");

      // decode value

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 20, elemLen, false)) {
         value = new Asn1T61String();
         value.decode (buffer, true, elemLen.value);
         if (!((value.getLength() >= 1 && value.getLength() <= 128))) {
            throw new Asn1ConsVioException ("value.getLength()", value.getLength());
         }

      }
      else throw new Asn1MissingRequiredException (buffer, "value");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 20))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode value

      if (value != null) {
         if (!((value.getLength() >= 1 && value.getLength() <= 128))) {
            throw new Asn1ConsVioException ("value.getLength()", value.getLength());
         }

         len = value.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("value");

      // encode type

      if (type != null) {
         if (!((type.getLength() >= 1 && type.getLength() <= 8))) {
            throw new Asn1ConsVioException ("type.getLength()", type.getLength());
         }

         len = type.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("type");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (type != null) type.print (_out, "type", _level+1);
      if (value != null) value.print (_out, "value", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
