/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;

public class ErrorMsgContent extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public PKIStatusInfo pKIStatusInfo;
   public Asn1Integer errorCode;  // optional
   public PKIFreeText errorDetails;  // optional

   public ErrorMsgContent () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ErrorMsgContent (
      PKIStatusInfo pKIStatusInfo_,
      Asn1Integer errorCode_,
      PKIFreeText errorDetails_
   ) {
      super();
      pKIStatusInfo = pKIStatusInfo_;
      errorCode = errorCode_;
      errorDetails = errorDetails_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ErrorMsgContent (
      PKIStatusInfo pKIStatusInfo_
   ) {
      super();
      pKIStatusInfo = pKIStatusInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ErrorMsgContent (PKIStatusInfo pKIStatusInfo_,
      long errorCode_,
      PKIFreeText errorDetails_
   ) {
      super();
      pKIStatusInfo = pKIStatusInfo_;
      errorCode = new Asn1Integer (errorCode_);
      errorDetails = errorDetails_;
   }

   public void init () {
      pKIStatusInfo = null;
      errorCode = null;
      errorDetails = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode pKIStatusInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         pKIStatusInfo = new PKIStatusInfo();
         pKIStatusInfo.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "pKIStatusInfo");

      // decode errorCode

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         errorCode = new Asn1Integer();
         errorCode.decode (buffer, true, elemLen.value);
      }

      // decode errorDetails

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         errorDetails = new PKIFreeText();
         errorDetails.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode errorDetails

      if (errorDetails != null) {
         len = errorDetails.encode (buffer, true);
         _aal += len;
      }

      // encode errorCode

      if (errorCode != null) {
         len = errorCode.encode (buffer, true);
         _aal += len;
      }

      // encode pKIStatusInfo

      if (pKIStatusInfo != null) {
         len = pKIStatusInfo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("pKIStatusInfo");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (pKIStatusInfo != null) pKIStatusInfo.print (_out, "pKIStatusInfo", _level+1);
      if (errorCode != null) errorCode.print (_out, "errorCode", _level+1);
      if (errorDetails != null) errorDetails.print (_out, "errorDetails", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
