/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class ECC_CMS_SharedInfo extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_dercmsRtkey._rtkey);
   }

   public AlgorithmIdentifier keyInfo;
   public Asn1OctetString entityUInfo;  // optional
   public Asn1OctetString suppPubInfo;

   public ECC_CMS_SharedInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ECC_CMS_SharedInfo (
      AlgorithmIdentifier keyInfo_,
      Asn1OctetString entityUInfo_,
      Asn1OctetString suppPubInfo_
   ) {
      super();
      keyInfo = keyInfo_;
      entityUInfo = entityUInfo_;
      suppPubInfo = suppPubInfo_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public ECC_CMS_SharedInfo (
      AlgorithmIdentifier keyInfo_,
      Asn1OctetString suppPubInfo_
   ) {
      super();
      keyInfo = keyInfo_;
      suppPubInfo = suppPubInfo_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ECC_CMS_SharedInfo (AlgorithmIdentifier keyInfo_,
      byte[] entityUInfo_,
      byte[] suppPubInfo_
   ) {
      super();
      keyInfo = keyInfo_;
      entityUInfo = new Asn1OctetString (entityUInfo_);
      suppPubInfo = new Asn1OctetString (suppPubInfo_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public ECC_CMS_SharedInfo (
      AlgorithmIdentifier keyInfo_,
      byte[] suppPubInfo_
   ) {
      super();
      keyInfo = keyInfo_;
      suppPubInfo = new Asn1OctetString (suppPubInfo_);
   }

   public void init () {
      keyInfo = null;
      entityUInfo = null;
      suppPubInfo = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode keyInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         keyInfo = new AlgorithmIdentifier();
         keyInfo.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "keyInfo");

      // decode entityUInfo

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         entityUInfo = new Asn1OctetString();
         entityUInfo.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode suppPubInfo

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         suppPubInfo = new Asn1OctetString();
         suppPubInfo.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }
      else throw new Asn1MissingRequiredException (buffer, "suppPubInfo");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode suppPubInfo

      if (suppPubInfo != null) {
         len = suppPubInfo.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("suppPubInfo");

      // encode entityUInfo

      if (entityUInfo != null) {
         len = entityUInfo.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode keyInfo

      if (keyInfo != null) {
         len = keyInfo.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("keyInfo");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (keyInfo != null) keyInfo.print (_out, "keyInfo", _level+1);
      if (entityUInfo != null) entityUInfo.print (_out, "entityUInfo", _level+1);
      if (suppPubInfo != null) suppPubInfo.print (_out, "suppPubInfo", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
