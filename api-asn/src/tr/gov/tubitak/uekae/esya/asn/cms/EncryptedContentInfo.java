/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

public class EncryptedContentInfo extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_cmsRtkey._rtkey);
   }

   public Asn1ObjectIdentifier contentType;
   public AlgorithmIdentifier contentEncryptionAlgorithm;
   public Asn1OctetString encryptedContent;  // optional

   public EncryptedContentInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public EncryptedContentInfo (
      Asn1ObjectIdentifier contentType_,
      AlgorithmIdentifier contentEncryptionAlgorithm_,
      Asn1OctetString encryptedContent_
   ) {
      super();
      contentType = contentType_;
      contentEncryptionAlgorithm = contentEncryptionAlgorithm_;
      encryptedContent = encryptedContent_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public EncryptedContentInfo (
      Asn1ObjectIdentifier contentType_,
      AlgorithmIdentifier contentEncryptionAlgorithm_
   ) {
      super();
      contentType = contentType_;
      contentEncryptionAlgorithm = contentEncryptionAlgorithm_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public EncryptedContentInfo (int[] contentType_,
      AlgorithmIdentifier contentEncryptionAlgorithm_,
      byte[] encryptedContent_
   ) {
      super();
      contentType = new Asn1ObjectIdentifier (contentType_);
      contentEncryptionAlgorithm = contentEncryptionAlgorithm_;
      encryptedContent = new Asn1OctetString (encryptedContent_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public EncryptedContentInfo (
      int[] contentType_,
      AlgorithmIdentifier contentEncryptionAlgorithm_
   ) {
      super();
      contentType = new Asn1ObjectIdentifier (contentType_);
      contentEncryptionAlgorithm = contentEncryptionAlgorithm_;
   }

   public void init () {
      contentType = null;
      contentEncryptionAlgorithm = null;
      encryptedContent = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode contentType

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         contentType = new Asn1ObjectIdentifier();
         contentType.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "contentType");

      // decode contentEncryptionAlgorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         contentEncryptionAlgorithm = new AlgorithmIdentifier();
         contentEncryptionAlgorithm.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "contentEncryptionAlgorithm");

      // decode encryptedContent

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
         encryptedContent = new Asn1OctetString();
         encryptedContent.decode (buffer, false, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
            throw new Asn1SeqOrderException ();

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode encryptedContent

      if (encryptedContent != null) {
         len = encryptedContent.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
      }

      // encode contentEncryptionAlgorithm

      if (contentEncryptionAlgorithm != null) {
         len = contentEncryptionAlgorithm.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("contentEncryptionAlgorithm");

      // encode contentType

      if (contentType != null) {
         len = contentType.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("contentType");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (contentType != null) contentType.print (_out, "contentType", _level+1);
      if (contentEncryptionAlgorithm != null) contentEncryptionAlgorithm.print (_out, "contentEncryptionAlgorithm", _level+1);
      if (encryptedContent != null) encryptedContent.print (_out, "encryptedContent", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
