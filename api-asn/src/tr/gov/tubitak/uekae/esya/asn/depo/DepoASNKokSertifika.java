/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.depo;

import com.objsys.asn1j.runtime.*;

public class DepoASNKokSertifika extends Asn1Choice {

	private static final long serialVersionUID = 55;
	static {
		setKey(_depoRtkey._rtkey);
	}

   // Choice element identifier constants
   public final static byte _EKLENECEKSERTIFIKA = 1;
   public final static byte _SILINECEKSERTIFIKA = 2;

   public DepoASNKokSertifika () {
      super();
   }

   public DepoASNKokSertifika (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _EKLENECEKSERTIFIKA: return "eklenecekSertifika";
      case _SILINECEKSERTIFIKA: return "silinecekSertifika";
      default: return "UNDEFINED";
      }
   }

   public void set_eklenecekSertifika (DepoASNEklenecekKokSertifika value) {
      setElement (_EKLENECEKSERTIFIKA, value);
   }

   public void set_silinecekSertifika (DepoASNSilinecekKokSertifika value) {
      setElement (_SILINECEKSERTIFIKA, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
      {
         DepoASNEklenecekKokSertifika eklenecekSertifika;
         eklenecekSertifika = new DepoASNEklenecekKokSertifika();
         eklenecekSertifika.decode (buffer, false, len);
         setElement (_EKLENECEKSERTIFIKA, eklenecekSertifika);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
      {
         DepoASNSilinecekKokSertifika silinecekSertifika;
         silinecekSertifika = new DepoASNSilinecekKokSertifika();
         silinecekSertifika.decode (buffer, false, len);
         setElement (_SILINECEKSERTIFIKA, silinecekSertifika);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode eklenecekSertifika
      case _EKLENECEKSERTIFIKA:
         DepoASNEklenecekKokSertifika eklenecekSertifika = (DepoASNEklenecekKokSertifika) getElement();
         len = eklenecekSertifika.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
         break;

      // encode silinecekSertifika
      case _SILINECEKSERTIFIKA:
         DepoASNSilinecekKokSertifika silinecekSertifika = (DepoASNSilinecekKokSertifika) getElement();
         len = silinecekSertifika.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
