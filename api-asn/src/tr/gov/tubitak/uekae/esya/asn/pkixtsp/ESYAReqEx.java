/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.pkixtsp;

import com.objsys.asn1j.runtime.*;

public class ESYAReqEx extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_pkixtspRtkey._rtkey);
   }

   public Asn1Integer userid;
   public Asn1OctetString salt;
   public Asn1Integer iterationCount;
   public Asn1OctetString iv;
   public Asn1OctetString encryptedMessageImprint;

   public ESYAReqEx () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ESYAReqEx (
      Asn1Integer userid_,
      Asn1OctetString salt_,
      Asn1Integer iterationCount_,
      Asn1OctetString iv_,
      Asn1OctetString encryptedMessageImprint_
   ) {
      super();
      userid = userid_;
      salt = salt_;
      iterationCount = iterationCount_;
      iv = iv_;
      encryptedMessageImprint = encryptedMessageImprint_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public ESYAReqEx (long userid_,
      byte[] salt_,
      long iterationCount_,
      byte[] iv_,
      byte[] encryptedMessageImprint_
   ) {
      super();
      userid = new Asn1Integer (userid_);
      salt = new Asn1OctetString (salt_);
      iterationCount = new Asn1Integer (iterationCount_);
      iv = new Asn1OctetString (iv_);
      encryptedMessageImprint = new Asn1OctetString (encryptedMessageImprint_);
   }

   public void init () {
      userid = null;
      salt = null;
      iterationCount = null;
      iv = null;
      encryptedMessageImprint = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode userid

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         userid = new Asn1Integer();
         userid.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "userid");

      // decode salt

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         salt = new Asn1OctetString();
         salt.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "salt");

      // decode iterationCount

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         iterationCount = new Asn1Integer();
         iterationCount.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "iterationCount");

      // decode iv

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         iv = new Asn1OctetString();
         iv.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "iv");

      // decode encryptedMessageImprint

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         encryptedMessageImprint = new Asn1OctetString();
         encryptedMessageImprint.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "encryptedMessageImprint");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode encryptedMessageImprint

      if (encryptedMessageImprint != null) {
         len = encryptedMessageImprint.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("encryptedMessageImprint");

      // encode iv

      if (iv != null) {
         len = iv.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("iv");

      // encode iterationCount

      if (iterationCount != null) {
         len = iterationCount.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("iterationCount");

      // encode salt

      if (salt != null) {
         len = salt.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("salt");

      // encode userid

      if (userid != null) {
         len = userid.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("userid");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (userid != null) userid.print (_out, "userid", _level+1);
      if (salt != null) salt.print (_out, "salt", _level+1);
      if (iterationCount != null) iterationCount.print (_out, "iterationCount", _level+1);
      if (iv != null) iv.print (_out, "iv", _level+1);
      if (encryptedMessageImprint != null) encryptedMessageImprint.print (_out, "encryptedMessageImprint", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
