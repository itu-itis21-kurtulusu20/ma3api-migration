/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;

public class _SeqOfRequest extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_ocspRtkey._rtkey);
	}

   public Request[] elements;

   public _SeqOfRequest () {
      elements = null;
   }

   /**
    * This constructor initializes the internal array to hold the 
    * given number of elements.  The element values must be manually 
    * populated.
    */
   public _SeqOfRequest (int numRecords) {
      elements = new Request [numRecords];
   }

   /**
    * This constructor initializes the internal array to hold the 
    * given the array.  
    */
   public _SeqOfRequest (Request[] elements_) {
      elements = elements_;
   }

   /** Returns the number of elements in the SEQUENCE OF. */
   public int getLength() {
      return elements.length;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      // decode SEQUENCE OF or SET OF

      java.util.LinkedList<Request> llist =
         new java.util.LinkedList<Request>();
      Asn1BerDecodeContext _context =
          new Asn1BerDecodeContext (buffer, llen);
      Request element;
      int elemLen = 0;

      while (!_context.expired()) {
         element = new Request();
         element.decode (buffer, true, elemLen);
         llist.add (element);
      }

      elements = new Request [llist.size()];
      llist.toArray (elements);

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode SEQUENCE OF or SET OF

      for (int i = elements.length - 1; i >= 0; i--) {
         len = elements[i].encode (buffer, true);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      if (elements != null) {
         for (int i = 0; i < elements.length; i++) {
            String name = _varName + "[" + i + "]";
            elements[i].print (_out, name, _level);
         }
      }
   }
}
