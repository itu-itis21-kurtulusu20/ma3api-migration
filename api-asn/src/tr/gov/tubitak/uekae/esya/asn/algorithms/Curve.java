/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.algorithms;

import com.objsys.asn1j.runtime.*;
import java.io.*;

public class Curve extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_algorithmsRtkey._rtkey);
	}

   public Asn1OctetString a;
   public Asn1OctetString b;
   public Asn1BitString seed;  // optional

   public Curve () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Curve (
      Asn1OctetString a_,
      Asn1OctetString b_,
      Asn1BitString seed_
   ) {
      super();
      a = a_;
      b = b_;
      seed = seed_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Curve (
      Asn1OctetString a_,
      Asn1OctetString b_
   ) {
      super();
      a = a_;
      b = b_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Curve (byte[] a_,
      byte[] b_,
      Asn1BitString seed_
   ) {
      super();
      a = new Asn1OctetString (a_);
      b = new Asn1OctetString (b_);
      seed = seed_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Curve (
      byte[] a_,
      byte[] b_
   ) {
      super();
      a = new Asn1OctetString (a_);
      b = new Asn1OctetString (b_);
   }

   public void init () {
      a = null;
      b = null;
      seed = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode a

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         a = new Asn1OctetString();
         a.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "a");

      // decode b

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         b = new Asn1OctetString();
         b.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "b");

      // decode seed

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         seed = new Asn1BitString();
         seed.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode seed

      if (seed != null) {
         len = seed.encode (buffer, true);
         _aal += len;
      }

      // encode b

      if (b != null) {
         len = b.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("b");

      // encode a

      if (a != null) {
         len = a.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("a");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (a != null) a.print (_out, "a", _level+1);
      if (b != null) b.print (_out, "b", _level+1);
      if (seed != null) seed.print (_out, "seed", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}