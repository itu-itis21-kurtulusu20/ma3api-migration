/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;

public class KeyRecRepContent extends Asn1Type {
	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public PKIStatusInfo status;
   public CMPCertificate newSigCert;  // optional
   public KeyRecRepContent_caCerts caCerts;  // optional
   public KeyRecRepContent_keyPairHist keyPairHist;  // optional

   public KeyRecRepContent () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public KeyRecRepContent (
      PKIStatusInfo status_,
      CMPCertificate newSigCert_,
      KeyRecRepContent_caCerts caCerts_,
      KeyRecRepContent_keyPairHist keyPairHist_
   ) {
      super();
      status = status_;
      newSigCert = newSigCert_;
      caCerts = caCerts_;
      keyPairHist = keyPairHist_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public KeyRecRepContent (
      PKIStatusInfo status_
   ) {
      super();
      status = status_;
   }

   public void init () {
      status = null;
      newSigCert = null;
      caCerts = null;
      keyPairHist = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode status

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         status = new PKIStatusInfo();
         status.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "status");

      // decode newSigCert

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         newSigCert = new CMPCertificate();
         newSigCert.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode caCerts

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, false)) {
         caCerts = new KeyRecRepContent_caCerts();
         caCerts.decode (buffer, true, elemLen.value);
      }

      // decode keyPairHist

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, false)) {
         keyPairHist = new KeyRecRepContent_keyPairHist();
         keyPairHist.decode (buffer, true, elemLen.value);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode keyPairHist

      if (keyPairHist != null) {
         len = keyPairHist.encode (buffer, true);
         _aal += len;
      }

      // encode caCerts

      if (caCerts != null) {
         len = caCerts.encode (buffer, true);
         _aal += len;
      }

      // encode newSigCert

      if (newSigCert != null) {
         len = newSigCert.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode status

      if (status != null) {
         len = status.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("status");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (status != null) status.print (_out, "status", _level+1);
      if (newSigCert != null) newSigCert.print (_out, "newSigCert", _level+1);
      if (caCerts != null) caCerts.print (_out, "caCerts", _level+1);
      if (keyPairHist != null) keyPairHist.print (_out, "keyPairHist", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
