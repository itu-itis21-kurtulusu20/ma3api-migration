/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.CRLReason;

public class RevokedInfo extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_ocspRtkey._rtkey);
	}

   public Asn1GeneralizedTime revocationTime;
   public CRLReason revocationReason = null;  // optional

   public RevokedInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public RevokedInfo (
      Asn1GeneralizedTime revocationTime_,
      CRLReason revocationReason_
   ) {
      super();
      revocationTime = revocationTime_;
      revocationReason = revocationReason_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public RevokedInfo (
      Asn1GeneralizedTime revocationTime_
   ) {
      super();
      revocationTime = revocationTime_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public RevokedInfo (String revocationTime_,
      CRLReason revocationReason_
   ) {
      super();
      revocationTime = new Asn1GeneralizedTime (revocationTime_);
      revocationReason = revocationReason_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public RevokedInfo (
      String revocationTime_
   ) {
      super();
      revocationTime = new Asn1GeneralizedTime (revocationTime_);
   }

   public void init () {
      revocationTime = null;
      revocationReason = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode revocationTime

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
         revocationTime = new Asn1GeneralizedTime (true);
         revocationTime.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "revocationTime");

      // decode revocationReason

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         int tval = buffer.decodeEnumValue (CRLReason.TAG, true, elemLen.value);
         revocationReason = CRLReason.valueOf (tval);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode revocationReason

      if (revocationReason != null) {
         len = revocationReason.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      // encode revocationTime

      if (revocationTime != null) {
         len = revocationTime.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("revocationTime");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (revocationTime != null) revocationTime.print (_out, "revocationTime", _level+1);
      if (revocationReason != null) revocationReason.print (_out, "revocationReason", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
