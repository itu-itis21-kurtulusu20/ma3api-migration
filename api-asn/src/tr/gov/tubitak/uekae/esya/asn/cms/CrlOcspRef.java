/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cms;

import com.objsys.asn1j.runtime.*;

public class CrlOcspRef extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_etsi101733Rtkey._rtkey);
   }

   public CRLListID crlids;  // optional
   public OcspListID ocspids;  // optional
   public OtherRevRefs otherRev;  // optional

   public CrlOcspRef () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public CrlOcspRef (
      CRLListID crlids_,
      OcspListID ocspids_,
      OtherRevRefs otherRev_
   ) {
      super();
      crlids = crlids_;
      ocspids = ocspids_;
      otherRev = otherRev_;
   }

   public void init () {
      crlids = null;
      ocspids = null;
      otherRev = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode crlids

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         crlids = new CRLListID();
         crlids.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode ocspids

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         ocspids = new OcspListID();
         ocspids.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode otherRev

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         otherRev = new OtherRevRefs();
         otherRev.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode otherRev

      if (otherRev != null) {
         len = otherRev.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode ocspids

      if (ocspids != null) {
         len = ocspids.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;
      }

      // encode crlids

      if (crlids != null) {
         len = crlids.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (crlids != null) crlids.print (_out, "crlids", _level+1);
      if (ocspids != null) ocspids.print (_out, "ocspids", _level+1);
      if (otherRev != null) otherRev.print (_out, "otherRev", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
