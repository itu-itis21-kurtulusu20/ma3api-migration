/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.signaturepolicies;

import com.objsys.asn1j.runtime.*;

public class SignerRules extends Asn1Type {
   private static final long serialVersionUID = 55;
   static {
      setKey (_signaturepoliciesRtkey._rtkey);
   }

   public Asn1Boolean externalSignedData;  // optional
   public CMSAttrs mandatedSignedAttr;
   public CMSAttrs mandatedUnsignedAttr;
   public CertRefReq mandatedCertificateRef = null;  // default = CertRefReq.signerOnly()
   public CertInfoReq mandatedCertificateInfo = null;  // default = CertInfoReq.none()
   public SignPolExtensions signPolExtensions;  // optional

   public SignerRules () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SignerRules (
      Asn1Boolean externalSignedData_,
      CMSAttrs mandatedSignedAttr_,
      CMSAttrs mandatedUnsignedAttr_,
      CertRefReq mandatedCertificateRef_,
      CertInfoReq mandatedCertificateInfo_,
      SignPolExtensions signPolExtensions_
   ) {
      super();
      externalSignedData = externalSignedData_;
      mandatedSignedAttr = mandatedSignedAttr_;
      mandatedUnsignedAttr = mandatedUnsignedAttr_;
      mandatedCertificateRef = mandatedCertificateRef_;
      mandatedCertificateInfo = mandatedCertificateInfo_;
      signPolExtensions = signPolExtensions_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public SignerRules (
      CMSAttrs mandatedSignedAttr_,
      CMSAttrs mandatedUnsignedAttr_
   ) {
      super();
      mandatedSignedAttr = mandatedSignedAttr_;
      mandatedUnsignedAttr = mandatedUnsignedAttr_;
      mandatedCertificateRef = CertRefReq.signerOnly();
      mandatedCertificateInfo = CertInfoReq.none();
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SignerRules (boolean externalSignedData_,
      CMSAttrs mandatedSignedAttr_,
      CMSAttrs mandatedUnsignedAttr_,
      CertRefReq mandatedCertificateRef_,
      CertInfoReq mandatedCertificateInfo_,
      SignPolExtensions signPolExtensions_
   ) {
      super();
      externalSignedData = new Asn1Boolean (externalSignedData_);
      mandatedSignedAttr = mandatedSignedAttr_;
      mandatedUnsignedAttr = mandatedUnsignedAttr_;
      mandatedCertificateRef = mandatedCertificateRef_;
      mandatedCertificateInfo = mandatedCertificateInfo_;
      signPolExtensions = signPolExtensions_;
   }

   public void init () {
      externalSignedData = null;
      mandatedSignedAttr = null;
      mandatedUnsignedAttr = null;
      mandatedCertificateRef = CertRefReq.signerOnly();
      mandatedCertificateInfo = CertInfoReq.none();
      signPolExtensions = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode externalSignedData

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
         externalSignedData = new Asn1Boolean();
         externalSignedData.decode (buffer, true, elemLen.value);
      }

      // decode mandatedSignedAttr

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         mandatedSignedAttr = new CMSAttrs();
         mandatedSignedAttr.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "mandatedSignedAttr");

      // decode mandatedUnsignedAttr

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         mandatedUnsignedAttr = new CMSAttrs();
         mandatedUnsignedAttr.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "mandatedUnsignedAttr");

      // decode mandatedCertificateRef

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         int tval = buffer.decodeEnumValue (CertRefReq.TAG, true, elemLen.value);
         mandatedCertificateRef = CertRefReq.valueOf (tval);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode mandatedCertificateInfo

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
         int offset = buffer.getByteCount();
         int tval = buffer.decodeEnumValue (CertInfoReq.TAG, true, elemLen.value);
         mandatedCertificateInfo = CertInfoReq.valueOf (tval);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      // decode signPolExtensions

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
         int offset = buffer.getByteCount();
         signPolExtensions = new SignPolExtensions();
         signPolExtensions.decode (buffer, true, elemLen.value);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
             _tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode signPolExtensions

      if (signPolExtensions != null) {
         len = signPolExtensions.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;
      }

      // encode mandatedCertificateInfo

      if (mandatedCertificateInfo != null) {
         if (!mandatedCertificateInfo.equals (CertInfoReq.none())) {
            len = mandatedCertificateInfo.encode (buffer, true);
            len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }
      }

      // encode mandatedCertificateRef

      if (mandatedCertificateRef != null) {
         if (!mandatedCertificateRef.equals (CertRefReq.signerOnly())) {
            len = mandatedCertificateRef.encode (buffer, true);
            len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }
      }

      // encode mandatedUnsignedAttr

      if (mandatedUnsignedAttr != null) {
         len = mandatedUnsignedAttr.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("mandatedUnsignedAttr");

      // encode mandatedSignedAttr

      if (mandatedSignedAttr != null) {
         len = mandatedSignedAttr.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("mandatedSignedAttr");

      // encode externalSignedData

      if (externalSignedData != null) {
         len = externalSignedData.encode (buffer, true);
         _aal += len;
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (externalSignedData != null) externalSignedData.print (_out, "externalSignedData", _level+1);
      if (mandatedSignedAttr != null) mandatedSignedAttr.print (_out, "mandatedSignedAttr", _level+1);
      if (mandatedUnsignedAttr != null) mandatedUnsignedAttr.print (_out, "mandatedUnsignedAttr", _level+1);
      if (mandatedCertificateRef != null) mandatedCertificateRef.print (_out, "mandatedCertificateRef", _level+1);
      if (mandatedCertificateInfo != null) mandatedCertificateInfo.print (_out, "mandatedCertificateInfo", _level+1);
      if (signPolExtensions != null) signPolExtensions.print (_out, "signPolExtensions", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
