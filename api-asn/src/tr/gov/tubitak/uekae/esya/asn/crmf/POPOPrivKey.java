/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.crmf;

import com.objsys.asn1j.runtime.*;

public class POPOPrivKey extends Asn1Choice {

	private static final long serialVersionUID = 55;
	static {
		setKey(_crmfRtkey._rtkey);
	}

   // Choice element identifier constants
   public final static byte _THISMESSAGE = 1;
   public final static byte _SUBSEQUENTMESSAGE = 2;
   public final static byte _DHMAC = 3;

   public POPOPrivKey () {
      super();
   }

   public POPOPrivKey (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _THISMESSAGE: return "thisMessage";
      case _SUBSEQUENTMESSAGE: return "subsequentMessage";
      case _DHMAC: return "dhMAC";
      default: return "UNDEFINED";
      }
   }

   public void set_thisMessage (Asn1BitString value) {
      setElement (_THISMESSAGE, value);
   }

   public void set_subsequentMessage (SubsequentMessage value) {
      setElement (_SUBSEQUENTMESSAGE, value);
   }

   public void set_dhMAC (Asn1BitString value) {
      setElement (_DHMAC, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
      {
         Asn1BitString thisMessage;
         thisMessage = new Asn1BitString();
         thisMessage.decode (buffer, false, len);
         setElement (_THISMESSAGE, thisMessage);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
      {
         SubsequentMessage subsequentMessage;
         subsequentMessage = new SubsequentMessage();
         subsequentMessage.decode (buffer, false, len);
         setElement (_SUBSEQUENTMESSAGE, subsequentMessage);
      }
      else if (tag.equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
      {
         Asn1BitString dhMAC;
         dhMAC = new Asn1BitString();
         dhMAC.decode (buffer, false, len);
         setElement (_DHMAC, dhMAC);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode thisMessage
      case _THISMESSAGE:
         Asn1BitString thisMessage = (Asn1BitString) getElement();
         len = thisMessage.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;
         break;

      // encode subsequentMessage
      case _SUBSEQUENTMESSAGE:
         SubsequentMessage subsequentMessage = (SubsequentMessage) getElement();
         len = subsequentMessage.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;
         break;

      // encode dhMAC
      case _DHMAC:
         Asn1BitString dhMAC = (Asn1BitString) getElement();
         len = dhMAC.encode (buffer, false);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }
}
