/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.cmp;

import com.objsys.asn1j.runtime.*;

public class InfoTypeAndValue extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_cmpRtkey._rtkey);
	}

   public Asn1ObjectIdentifier infoType;
   public Asn1OpenType infoValue;  // optional

   public InfoTypeAndValue () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public InfoTypeAndValue (
      Asn1ObjectIdentifier infoType_,
      Asn1OpenType infoValue_
   ) {
      super();
      infoType = infoType_;
      infoValue = infoValue_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public InfoTypeAndValue (
      Asn1ObjectIdentifier infoType_
   ) {
      super();
      infoType = infoType_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public InfoTypeAndValue (int[] infoType_,
      Asn1OpenType infoValue_
   ) {
      super();
      infoType = new Asn1ObjectIdentifier (infoType_);
      infoValue = infoValue_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public InfoTypeAndValue (
      int[] infoType_
   ) {
      super();
      infoType = new Asn1ObjectIdentifier (infoType_);
   }

   public void init () {
      infoType = null;
      infoValue = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode infoType

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         infoType = new Asn1ObjectIdentifier();
         infoType.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "infoType");

      // decode infoValue

      if (!_context.expired ()) {
         infoValue = new Asn1OpenType();
         infoValue.decode (buffer, true, 0);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode infoValue

      if (infoValue != null) {
         len = infoValue.encode (buffer, true);
         _aal += len;
      }

      // encode infoType

      if (infoType != null) {
         len = infoType.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("infoType");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (infoType != null) infoType.print (_out, "infoType", _level+1);
      if (infoValue != null) infoValue.print (_out, "infoValue", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
