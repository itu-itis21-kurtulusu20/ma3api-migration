// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class VerifierRules : Asn1Type {
      public CMSAttrs mandatedUnsignedAttr;
      public SignPolExtensions signPolExtensions;  // optional

      static VerifierRules ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public VerifierRules () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public VerifierRules (
         CMSAttrs mandatedUnsignedAttr_,
         SignPolExtensions signPolExtensions_
      )
         : base ()
      {
         mandatedUnsignedAttr = mandatedUnsignedAttr_;
         signPolExtensions = signPolExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public VerifierRules (
         CMSAttrs mandatedUnsignedAttr_
      )
         : base ()
      {
         mandatedUnsignedAttr = mandatedUnsignedAttr_;
      }

      public void Init () {
         mandatedUnsignedAttr = null;
         signPolExtensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode mandatedUnsignedAttr

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            mandatedUnsignedAttr = new CMSAttrs();
            mandatedUnsignedAttr.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode signPolExtensions

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            signPolExtensions = new SignPolExtensions();
            signPolExtensions.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode signPolExtensions

         if (signPolExtensions != null) {
            len = signPolExtensions.Encode (buffer, true);
            _aal += len;
         }

         // encode mandatedUnsignedAttr

         len = mandatedUnsignedAttr.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (mandatedUnsignedAttr != null) mandatedUnsignedAttr.Print (_out, "mandatedUnsignedAttr", _level+1);
         if (signPolExtensions != null) signPolExtensions.Print (_out, "signPolExtensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
