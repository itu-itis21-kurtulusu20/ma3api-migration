// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class SignerRules : Asn1Type {
      public Asn1Boolean externalSignedData;  // optional
      public CMSAttrs mandatedSignedAttr;
      public CMSAttrs mandatedUnsignedAttr;
      public CertRefReq mandatedCertificateRef;  // default = CertRefReq.signerOnly()
      public CertInfoReq mandatedCertificateInfo;  // default = CertInfoReq.none()
      public SignPolExtensions signPolExtensions;  // optional

      static SignerRules ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public SignerRules () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public SignerRules (
         Asn1Boolean externalSignedData_,
         CMSAttrs mandatedSignedAttr_,
         CMSAttrs mandatedUnsignedAttr_,
         CertRefReq mandatedCertificateRef_,
         CertInfoReq mandatedCertificateInfo_,
         SignPolExtensions signPolExtensions_
      )
         : base ()
      {
         externalSignedData = externalSignedData_;
         mandatedSignedAttr = mandatedSignedAttr_;
         mandatedUnsignedAttr = mandatedUnsignedAttr_;
         mandatedCertificateRef = mandatedCertificateRef_;
         mandatedCertificateInfo = mandatedCertificateInfo_;
         signPolExtensions = signPolExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public SignerRules (
         CMSAttrs mandatedSignedAttr_,
         CMSAttrs mandatedUnsignedAttr_
      )
         : base ()
      {
         mandatedSignedAttr = mandatedSignedAttr_;
         mandatedUnsignedAttr = mandatedUnsignedAttr_;
         mandatedCertificateRef = CertRefReq.signerOnly();
         mandatedCertificateInfo = CertInfoReq.none();
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public SignerRules (bool externalSignedData_,
         CMSAttrs mandatedSignedAttr_,
         CMSAttrs mandatedUnsignedAttr_,
         CertRefReq mandatedCertificateRef_,
         CertInfoReq mandatedCertificateInfo_,
         SignPolExtensions signPolExtensions_
      )
         : base ()
      {
         externalSignedData = new Asn1Boolean (externalSignedData_);
         mandatedSignedAttr = mandatedSignedAttr_;
         mandatedUnsignedAttr = mandatedUnsignedAttr_;
         mandatedCertificateRef = mandatedCertificateRef_;
         mandatedCertificateInfo = mandatedCertificateInfo_;
         signPolExtensions = signPolExtensions_;
      }

      public void Init () {
         externalSignedData = null;
         mandatedSignedAttr = null;
         mandatedUnsignedAttr = null;
         mandatedCertificateRef = CertRefReq.signerOnly();
         mandatedCertificateInfo = CertInfoReq.none();
         signPolExtensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode externalSignedData

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
            externalSignedData = new Asn1Boolean();
            externalSignedData.Decode (buffer, true, elemLen.mValue);
         }

         // decode mandatedSignedAttr

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            mandatedSignedAttr = new CMSAttrs();
            mandatedSignedAttr.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode mandatedUnsignedAttr

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            mandatedUnsignedAttr = new CMSAttrs();
            mandatedUnsignedAttr.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode mandatedCertificateRef

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            int tval = buffer.DecodeEnumValue (CertRefReq._TAG, true, elemLen.mValue);
            mandatedCertificateRef = CertRefReq.ValueOf (tval);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode mandatedCertificateInfo

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            int tval = buffer.DecodeEnumValue (CertInfoReq._TAG, true, elemLen.mValue);
            mandatedCertificateInfo = CertInfoReq.ValueOf (tval);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode signPolExtensions

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            signPolExtensions = new SignPolExtensions();
            signPolExtensions.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode signPolExtensions

         if (signPolExtensions != null) {
            len = signPolExtensions.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode mandatedCertificateInfo

         if (!mandatedCertificateInfo.Equals (CertInfoReq.none())) {
            len = mandatedCertificateInfo.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode mandatedCertificateRef

         if (!mandatedCertificateRef.Equals (CertRefReq.signerOnly())) {
            len = mandatedCertificateRef.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode mandatedUnsignedAttr

         len = mandatedUnsignedAttr.Encode (buffer, true);
         _aal += len;

         // encode mandatedSignedAttr

         len = mandatedSignedAttr.Encode (buffer, true);
         _aal += len;

         // encode externalSignedData

         if (externalSignedData != null) {
            len = externalSignedData.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (externalSignedData != null) externalSignedData.Print (_out, "externalSignedData", _level+1);
         if (mandatedSignedAttr != null) mandatedSignedAttr.Print (_out, "mandatedSignedAttr", _level+1);
         if (mandatedUnsignedAttr != null) mandatedUnsignedAttr.Print (_out, "mandatedUnsignedAttr", _level+1);
         if (mandatedCertificateRef != null) mandatedCertificateRef.Print (_out, "mandatedCertificateRef", _level+1);
         if (mandatedCertificateInfo != null) mandatedCertificateInfo.Print (_out, "mandatedCertificateInfo", _level+1);
         if (signPolExtensions != null) signPolExtensions.Print (_out, "signPolExtensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
