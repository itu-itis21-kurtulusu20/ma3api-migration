// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class DeltaTime : Asn1Type {
      public Asn1Integer deltaSeconds;
      public Asn1Integer deltaMinutes;
      public Asn1Integer deltaHours;
      public Asn1Integer deltaDays;

      static DeltaTime ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public DeltaTime () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public DeltaTime (
         Asn1Integer deltaSeconds_,
         Asn1Integer deltaMinutes_,
         Asn1Integer deltaHours_,
         Asn1Integer deltaDays_
      )
         : base ()
      {
         deltaSeconds = deltaSeconds_;
         deltaMinutes = deltaMinutes_;
         deltaHours = deltaHours_;
         deltaDays = deltaDays_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public DeltaTime (long deltaSeconds_,
         long deltaMinutes_,
         long deltaHours_,
         long deltaDays_
      )
         : base ()
      {
         deltaSeconds = new Asn1Integer (deltaSeconds_);
         deltaMinutes = new Asn1Integer (deltaMinutes_);
         deltaHours = new Asn1Integer (deltaHours_);
         deltaDays = new Asn1Integer (deltaDays_);
      }

      public void Init () {
         deltaSeconds = null;
         deltaMinutes = null;
         deltaHours = null;
         deltaDays = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode deltaSeconds

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            deltaSeconds = new Asn1Integer();
            deltaSeconds.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode deltaMinutes

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            deltaMinutes = new Asn1Integer();
            deltaMinutes.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode deltaHours

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            deltaHours = new Asn1Integer();
            deltaHours.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode deltaDays

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            deltaDays = new Asn1Integer();
            deltaDays.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode deltaDays

         len = deltaDays.Encode (buffer, true);
         _aal += len;

         // encode deltaHours

         len = deltaHours.Encode (buffer, true);
         _aal += len;

         // encode deltaMinutes

         len = deltaMinutes.Encode (buffer, true);
         _aal += len;

         // encode deltaSeconds

         len = deltaSeconds.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (deltaSeconds != null) deltaSeconds.Print (_out, "deltaSeconds", _level+1);
         if (deltaMinutes != null) deltaMinutes.Print (_out, "deltaMinutes", _level+1);
         if (deltaHours != null) deltaHours.Print (_out, "deltaHours", _level+1);
         if (deltaDays != null) deltaDays.Print (_out, "deltaDays", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
