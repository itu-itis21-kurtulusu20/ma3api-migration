// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class EnuRevReq : Asn1Enumerated {
      private static EnuRevReq _clrCheck = null;
      private static EnuRevReq _ocspCheck = null;
      private static EnuRevReq _bothCheck = null;
      private static EnuRevReq _eitherCheck = null;
      private static EnuRevReq _noCheck = null;
      private static EnuRevReq _other = null;

      static EnuRevReq ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      /// <summary>
      /// Enumerated constructor: this object must be initialized with one 
      /// of the following values:
      ///   0
      ///   1
      ///   2
      ///   3
      ///   4
      ///   5
      /// </summary>
      protected EnuRevReq (int value_) : base (value_)
      {
      }

      ///
      /// Singleton accessor method for clrCheck.
      ///
      public static EnuRevReq clrCheck() {
         if (_clrCheck == null) _clrCheck = new EnuRevReq (0);

         return _clrCheck;
      }

      ///
      /// Singleton accessor method for ocspCheck.
      ///
      public static EnuRevReq ocspCheck() {
         if (_ocspCheck == null) _ocspCheck = new EnuRevReq (1);

         return _ocspCheck;
      }

      ///
      /// Singleton accessor method for bothCheck.
      ///
      public static EnuRevReq bothCheck() {
         if (_bothCheck == null) _bothCheck = new EnuRevReq (2);

         return _bothCheck;
      }

      ///
      /// Singleton accessor method for eitherCheck.
      ///
      public static EnuRevReq eitherCheck() {
         if (_eitherCheck == null) _eitherCheck = new EnuRevReq (3);

         return _eitherCheck;
      }

      ///
      /// Singleton accessor method for noCheck.
      ///
      public static EnuRevReq noCheck() {
         if (_noCheck == null) _noCheck = new EnuRevReq (4);

         return _noCheck;
      }

      ///
      /// Singleton accessor method for other.
      ///
      public static EnuRevReq other() {
         if (_other == null) _other = new EnuRevReq (5);

         return _other;
      }

      ///
      /// Returns the instance associated with the value passed.
      /// If the value passed is invalid, an exception is thrown.
      ///
      public static EnuRevReq ValueOf (int _value)
      {
         switch (_value) {
            case 0: return clrCheck();
            case 1: return ocspCheck();
            case 2: return bothCheck();
            case 3: return eitherCheck();
            case 4: return noCheck();
            case 5: return other();
            default: throw new Asn1InvalidEnumException (_value);
         }
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         base.Decode (buffer, explicitTagging, implicitLength);
         if (!(mValue == 0 ||
         mValue == 1 ||
         mValue == 2 ||
         mValue == 3 ||
         mValue == 4 ||
         mValue == 5)) {
            throw new Asn1InvalidEnumException (mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         if (!(mValue == 0 ||
         mValue == 1 ||
         mValue == 2 ||
         mValue == 3 ||
         mValue == 4 ||
         mValue == 5)) {
            throw new Asn1InvalidEnumException (mValue);
         }

         int _aal = base.Encode (buffer, explicitTagging);

         return (_aal);
      }

      public override string ToString () {
         switch (mValue) {
            case 0: return ("clrCheck");
            case 1: return ("ocspCheck");
            case 2: return ("bothCheck");
            case 3: return ("eitherCheck");
            case 4: return ("noCheck");
            case 5: return ("other");
            default: return ("UNDEFINED");
         }
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " = " + ToString());
      }
   }
}
