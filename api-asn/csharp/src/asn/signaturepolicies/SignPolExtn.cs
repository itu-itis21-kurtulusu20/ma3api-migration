// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class SignPolExtn : Asn1Type {
      public Asn1ObjectIdentifier extnID;
      public Asn1OctetString extnValue;

      static SignPolExtn ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public SignPolExtn () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public SignPolExtn (
         Asn1ObjectIdentifier extnID_,
         Asn1OctetString extnValue_
      )
         : base ()
      {
         extnID = extnID_;
         extnValue = extnValue_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public SignPolExtn (int[] extnID_,
         byte[] extnValue_
      )
         : base ()
      {
         extnID = new Asn1ObjectIdentifier (extnID_);
         extnValue = new Asn1OctetString (extnValue_);
      }

      public void Init () {
         extnID = null;
         extnValue = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode extnID

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            extnID = new Asn1ObjectIdentifier();
            extnID.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode extnValue

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            extnValue = new Asn1OctetString();
            extnValue.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode extnValue

         len = extnValue.Encode (buffer, true);
         _aal += len;

         // encode extnID

         len = extnID.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (extnID != null) extnID.Print (_out, "extnID", _level+1);
         if (extnValue != null) extnValue.Print (_out, "extnValue", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
