// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class AttributeConstraints : Asn1Type {
      public AttributeTypeConstraints attributeTypeConstarints;  // optional
      public AttributeValueConstraints attributeValueConstarints;  // optional

      static AttributeConstraints ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public AttributeConstraints () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AttributeConstraints (
         AttributeTypeConstraints attributeTypeConstarints_,
         AttributeValueConstraints attributeValueConstarints_
      )
         : base ()
      {
         attributeTypeConstarints = attributeTypeConstarints_;
         attributeValueConstarints = attributeValueConstarints_;
      }

      public void Init () {
         attributeTypeConstarints = null;
         attributeValueConstarints = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode attributeTypeConstarints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            attributeTypeConstarints = new AttributeTypeConstraints();
            attributeTypeConstarints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode attributeValueConstarints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            attributeValueConstarints = new AttributeValueConstraints();
            attributeValueConstarints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode attributeValueConstarints

         if (attributeValueConstarints != null) {
            len = attributeValueConstarints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode attributeTypeConstarints

         if (attributeTypeConstarints != null) {
            len = attributeTypeConstarints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (attributeTypeConstarints != null) attributeTypeConstarints.Print (_out, "attributeTypeConstarints", _level+1);
         if (attributeValueConstarints != null) attributeValueConstarints.Print (_out, "attributeValueConstarints", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
