// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   using GeneralNames = tr.gov.tubitak.uekae.esya.asn.x509.GeneralNames;
   using DirectoryString = tr.gov.tubitak.uekae.esya.asn.x509.DirectoryString;

   public class SignPolicyInfo : Asn1Type {
      public Asn1ObjectIdentifier signPolicyIdentifier;
      public Asn1GeneralizedTime dateOfIssue;
      public GeneralNames policyIssuerName;
      public DirectoryString fieldOfApplication;
      public SignatureValidationPolicy signatureValidationPolicy;
      public SignPolExtensions signPolExtensions;  // optional

      static SignPolicyInfo ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public SignPolicyInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public SignPolicyInfo (
         Asn1ObjectIdentifier signPolicyIdentifier_,
         Asn1GeneralizedTime dateOfIssue_,
         GeneralNames policyIssuerName_,
         DirectoryString fieldOfApplication_,
         SignatureValidationPolicy signatureValidationPolicy_,
         SignPolExtensions signPolExtensions_
      )
         : base ()
      {
         signPolicyIdentifier = signPolicyIdentifier_;
         dateOfIssue = dateOfIssue_;
         policyIssuerName = policyIssuerName_;
         fieldOfApplication = fieldOfApplication_;
         signatureValidationPolicy = signatureValidationPolicy_;
         signPolExtensions = signPolExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public SignPolicyInfo (
         Asn1ObjectIdentifier signPolicyIdentifier_,
         Asn1GeneralizedTime dateOfIssue_,
         GeneralNames policyIssuerName_,
         DirectoryString fieldOfApplication_,
         SignatureValidationPolicy signatureValidationPolicy_
      )
         : base ()
      {
         signPolicyIdentifier = signPolicyIdentifier_;
         dateOfIssue = dateOfIssue_;
         policyIssuerName = policyIssuerName_;
         fieldOfApplication = fieldOfApplication_;
         signatureValidationPolicy = signatureValidationPolicy_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public SignPolicyInfo (int[] signPolicyIdentifier_,
         string dateOfIssue_,
         GeneralNames policyIssuerName_,
         DirectoryString fieldOfApplication_,
         SignatureValidationPolicy signatureValidationPolicy_,
         SignPolExtensions signPolExtensions_
      )
         : base ()
      {
         signPolicyIdentifier = new Asn1ObjectIdentifier (signPolicyIdentifier_);
         dateOfIssue = new Asn1GeneralizedTime (dateOfIssue_);
         policyIssuerName = policyIssuerName_;
         fieldOfApplication = fieldOfApplication_;
         signatureValidationPolicy = signatureValidationPolicy_;
         signPolExtensions = signPolExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public SignPolicyInfo (
         int[] signPolicyIdentifier_,
         string dateOfIssue_,
         GeneralNames policyIssuerName_,
         DirectoryString fieldOfApplication_,
         SignatureValidationPolicy signatureValidationPolicy_
      )
         : base ()
      {
         signPolicyIdentifier = new Asn1ObjectIdentifier (signPolicyIdentifier_);
         dateOfIssue = new Asn1GeneralizedTime (dateOfIssue_);
         policyIssuerName = policyIssuerName_;
         fieldOfApplication = fieldOfApplication_;
         signatureValidationPolicy = signatureValidationPolicy_;
      }

      public void Init () {
         signPolicyIdentifier = null;
         dateOfIssue = null;
         policyIssuerName = null;
         fieldOfApplication = null;
         signatureValidationPolicy = null;
         signPolExtensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode signPolicyIdentifier

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            signPolicyIdentifier = new Asn1ObjectIdentifier();
            signPolicyIdentifier.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode dateOfIssue

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
            dateOfIssue = new Asn1GeneralizedTime (true);
            dateOfIssue.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode policyIssuerName

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            policyIssuerName = new GeneralNames();
            policyIssuerName.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode fieldOfApplication

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 20) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 28) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 30))
            {
               fieldOfApplication = new DirectoryString();
               fieldOfApplication.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode signatureValidationPolicy

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            signatureValidationPolicy = new SignatureValidationPolicy();
            signatureValidationPolicy.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode signPolExtensions

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            signPolExtensions = new SignPolExtensions();
            signPolExtensions.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode signPolExtensions

         if (signPolExtensions != null) {
            len = signPolExtensions.Encode (buffer, true);
            _aal += len;
         }

         // encode signatureValidationPolicy

         len = signatureValidationPolicy.Encode (buffer, true);
         _aal += len;

         // encode fieldOfApplication

         len = fieldOfApplication.Encode (buffer, true);
         _aal += len;

         // encode policyIssuerName

         len = policyIssuerName.Encode (buffer, true);
         _aal += len;

         // encode dateOfIssue

         len = dateOfIssue.Encode (buffer, true);
         _aal += len;

         // encode signPolicyIdentifier

         len = signPolicyIdentifier.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (signPolicyIdentifier != null) signPolicyIdentifier.Print (_out, "signPolicyIdentifier", _level+1);
         if (dateOfIssue != null) dateOfIssue.Print (_out, "dateOfIssue", _level+1);
         if (policyIssuerName != null) policyIssuerName.Print (_out, "policyIssuerName", _level+1);
         if (fieldOfApplication != null) fieldOfApplication.Print (_out, "fieldOfApplication", _level+1);
         if (signatureValidationPolicy != null) signatureValidationPolicy.Print (_out, "signatureValidationPolicy", _level+1);
         if (signPolExtensions != null) signPolExtensions.Print (_out, "signPolExtensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
