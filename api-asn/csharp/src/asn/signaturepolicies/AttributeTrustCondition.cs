// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class AttributeTrustCondition : Asn1Type {
      public Asn1Boolean attributeMandated;
      public HowCertAttribute howCertAttribute;
      public CertificateTrustTrees attrCertificateTrustTrees;  // optional
      public CertRevReq attrRevReq;  // optional
      public AttributeConstraints attributeConstraints;  // optional

      static AttributeTrustCondition ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public AttributeTrustCondition () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AttributeTrustCondition (
         Asn1Boolean attributeMandated_,
         HowCertAttribute howCertAttribute_,
         CertificateTrustTrees attrCertificateTrustTrees_,
         CertRevReq attrRevReq_,
         AttributeConstraints attributeConstraints_
      )
         : base ()
      {
         attributeMandated = attributeMandated_;
         howCertAttribute = howCertAttribute_;
         attrCertificateTrustTrees = attrCertificateTrustTrees_;
         attrRevReq = attrRevReq_;
         attributeConstraints = attributeConstraints_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public AttributeTrustCondition (
         Asn1Boolean attributeMandated_,
         HowCertAttribute howCertAttribute_
      )
         : base ()
      {
         attributeMandated = attributeMandated_;
         howCertAttribute = howCertAttribute_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public AttributeTrustCondition (bool attributeMandated_,
         HowCertAttribute howCertAttribute_,
         CertificateTrustTrees attrCertificateTrustTrees_,
         CertRevReq attrRevReq_,
         AttributeConstraints attributeConstraints_
      )
         : base ()
      {
         attributeMandated = new Asn1Boolean (attributeMandated_);
         howCertAttribute = howCertAttribute_;
         attrCertificateTrustTrees = attrCertificateTrustTrees_;
         attrRevReq = attrRevReq_;
         attributeConstraints = attributeConstraints_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public AttributeTrustCondition (
         bool attributeMandated_,
         HowCertAttribute howCertAttribute_
      )
         : base ()
      {
         attributeMandated = new Asn1Boolean (attributeMandated_);
         howCertAttribute = howCertAttribute_;
      }

      public void Init () {
         attributeMandated = null;
         howCertAttribute = null;
         attrCertificateTrustTrees = null;
         attrRevReq = null;
         attributeConstraints = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode attributeMandated

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
            attributeMandated = new Asn1Boolean();
            attributeMandated.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode howCertAttribute

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
            int tval = buffer.DecodeEnumValue (HowCertAttribute._TAG, true, elemLen.mValue);
            howCertAttribute = HowCertAttribute.ValueOf (tval);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode attrCertificateTrustTrees

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            attrCertificateTrustTrees = new CertificateTrustTrees();
            attrCertificateTrustTrees.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode attrRevReq

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            attrRevReq = new CertRevReq();
            attrRevReq.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode attributeConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            attributeConstraints = new AttributeConstraints();
            attributeConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode attributeConstraints

         if (attributeConstraints != null) {
            len = attributeConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode attrRevReq

         if (attrRevReq != null) {
            len = attrRevReq.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode attrCertificateTrustTrees

         if (attrCertificateTrustTrees != null) {
            len = attrCertificateTrustTrees.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode howCertAttribute

         len = howCertAttribute.Encode (buffer, true);
         _aal += len;

         // encode attributeMandated

         len = attributeMandated.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (attributeMandated != null) attributeMandated.Print (_out, "attributeMandated", _level+1);
         if (howCertAttribute != null) howCertAttribute.Print (_out, "howCertAttribute", _level+1);
         if (attrCertificateTrustTrees != null) attrCertificateTrustTrees.Print (_out, "attrCertificateTrustTrees", _level+1);
         if (attrRevReq != null) attrRevReq.Print (_out, "attrRevReq", _level+1);
         if (attributeConstraints != null) attributeConstraints.Print (_out, "attributeConstraints", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
