// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   using GeneralName = tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;

   public class GeneralSubtree : Asn1Type {
      public GeneralName base_;
      public Asn1Integer minimum;  // default = 0
      public Asn1Integer maximum;  // optional

      static GeneralSubtree ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public GeneralSubtree () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public GeneralSubtree (
         GeneralName base__,
         Asn1Integer minimum_,
         Asn1Integer maximum_
      )
         : base ()
      {
         base_ = base__;
         minimum = minimum_;
         maximum = maximum_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public GeneralSubtree (
         GeneralName base__
      )
         : base ()
      {
         base_ = base__;
         minimum = new Asn1Integer (0);
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public GeneralSubtree (GeneralName base__,
         long minimum_,
         long maximum_
      )
         : base ()
      {
         base_ = base__;
         minimum = new Asn1Integer (minimum_);
         maximum = new Asn1Integer (maximum_);
      }

      public void Init () {
         base_ = null;
         minimum = new Asn1Integer (0);
         maximum = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode base_

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
            {
               base_ = new GeneralName();
               base_.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode minimum

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            minimum = new Asn1Integer();
            minimum.Decode (buffer, true, elemLen.mValue);
            if (!(minimum.mValue >= 0)) {
               throw new Asn1ConsVioException ("minimum.mValue", minimum.mValue);
            }

         }

         // decode maximum

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            maximum = new Asn1Integer();
            maximum.Decode (buffer, true, elemLen.mValue);
            if (!(maximum.mValue >= 0)) {
               throw new Asn1ConsVioException ("maximum.mValue", maximum.mValue);
            }

         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode maximum

         if (maximum != null) {
            if (!(maximum.mValue >= 0)) {
               throw new Asn1ConsVioException ("maximum.mValue", maximum.mValue);
            }

            len = maximum.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode minimum

         if (!minimum.Equals (0)) {
            if (!(minimum.mValue >= 0)) {
               throw new Asn1ConsVioException ("minimum.mValue", minimum.mValue);
            }

            len = minimum.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode base_

         len = base_.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (base_ != null) base_.Print (_out, "base_", _level+1);
         if (minimum != null) minimum.Print (_out, "minimum", _level+1);
         if (maximum != null) maximum.Print (_out, "maximum", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
