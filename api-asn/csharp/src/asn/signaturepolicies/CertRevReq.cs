// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class CertRevReq : Asn1Type {
      public RevReq endCertRevReq;
      public RevReq caCerts;

      static CertRevReq ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public CertRevReq () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CertRevReq (
         RevReq endCertRevReq_,
         RevReq caCerts_
      )
         : base ()
      {
         endCertRevReq = endCertRevReq_;
         caCerts = caCerts_;
      }

      public void Init () {
         endCertRevReq = null;
         caCerts = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode endCertRevReq

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            endCertRevReq = new RevReq();
            endCertRevReq.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode caCerts

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            caCerts = new RevReq();
            caCerts.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode caCerts

         len = caCerts.Encode (buffer, true);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;

         // encode endCertRevReq

         len = endCertRevReq.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (endCertRevReq != null) endCertRevReq.Print (_out, "endCertRevReq", _level+1);
         if (caCerts != null) caCerts.Print (_out, "caCerts", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
