// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class TimestampTrustCondition : Asn1Type {
      public CertificateTrustTrees ttsCertificateTrustTrees;  // optional
      public CertRevReq ttsRevReq;  // optional
      public tr.gov.tubitak.uekae.esya.asn.signaturepolicies.NameConstraints ttsNameConstraints;  // optional
      public DeltaTime cautionPeriod;  // optional
      public DeltaTime signatureTimestampDelay;  // optional

      static TimestampTrustCondition ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public TimestampTrustCondition () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public TimestampTrustCondition (
         CertificateTrustTrees ttsCertificateTrustTrees_,
         CertRevReq ttsRevReq_,
         tr.gov.tubitak.uekae.esya.asn.signaturepolicies.NameConstraints ttsNameConstraints_,
         DeltaTime cautionPeriod_,
         DeltaTime signatureTimestampDelay_
      )
         : base ()
      {
         ttsCertificateTrustTrees = ttsCertificateTrustTrees_;
         ttsRevReq = ttsRevReq_;
         ttsNameConstraints = ttsNameConstraints_;
         cautionPeriod = cautionPeriod_;
         signatureTimestampDelay = signatureTimestampDelay_;
      }

      public void Init () {
         ttsCertificateTrustTrees = null;
         ttsRevReq = null;
         ttsNameConstraints = null;
         cautionPeriod = null;
         signatureTimestampDelay = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode ttsCertificateTrustTrees

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            ttsCertificateTrustTrees = new CertificateTrustTrees();
            ttsCertificateTrustTrees.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode ttsRevReq

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            ttsRevReq = new CertRevReq();
            ttsRevReq.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode ttsNameConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            ttsNameConstraints = new NameConstraints();
            ttsNameConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode cautionPeriod

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            cautionPeriod = new DeltaTime();
            cautionPeriod.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode signatureTimestampDelay

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
            int offset = buffer.ByteCount;
            signatureTimestampDelay = new DeltaTime();
            signatureTimestampDelay.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode signatureTimestampDelay

         if (signatureTimestampDelay != null) {
            len = signatureTimestampDelay.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
            _aal += len;
         }

         // encode cautionPeriod

         if (cautionPeriod != null) {
            len = cautionPeriod.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }

         // encode ttsNameConstraints

         if (ttsNameConstraints != null) {
            len = ttsNameConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode ttsRevReq

         if (ttsRevReq != null) {
            len = ttsRevReq.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode ttsCertificateTrustTrees

         if (ttsCertificateTrustTrees != null) {
            len = ttsCertificateTrustTrees.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (ttsCertificateTrustTrees != null) ttsCertificateTrustTrees.Print (_out, "ttsCertificateTrustTrees", _level+1);
         if (ttsRevReq != null) ttsRevReq.Print (_out, "ttsRevReq", _level+1);
         if (ttsNameConstraints != null) ttsNameConstraints.Print (_out, "ttsNameConstraints", _level+1);
         if (cautionPeriod != null) cautionPeriod.Print (_out, "cautionPeriod", _level+1);
         if (signatureTimestampDelay != null) signatureTimestampDelay.Print (_out, "signatureTimestampDelay", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
