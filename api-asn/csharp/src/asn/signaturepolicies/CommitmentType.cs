// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   using DirectoryString = tr.gov.tubitak.uekae.esya.asn.x509.DirectoryString;

   public class CommitmentType : Asn1Type {
      public Asn1ObjectIdentifier identifier;
      public DirectoryString fieldOfApplication;  // optional
      public DirectoryString semantics;  // optional

      static CommitmentType ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public CommitmentType () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CommitmentType (
         Asn1ObjectIdentifier identifier_,
         DirectoryString fieldOfApplication_,
         DirectoryString semantics_
      )
         : base ()
      {
         identifier = identifier_;
         fieldOfApplication = fieldOfApplication_;
         semantics = semantics_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public CommitmentType (
         Asn1ObjectIdentifier identifier_
      )
         : base ()
      {
         identifier = identifier_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public CommitmentType (int[] identifier_,
         DirectoryString fieldOfApplication_,
         DirectoryString semantics_
      )
         : base ()
      {
         identifier = new Asn1ObjectIdentifier (identifier_);
         fieldOfApplication = fieldOfApplication_;
         semantics = semantics_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public CommitmentType (
         int[] identifier_
      )
         : base ()
      {
         identifier = new Asn1ObjectIdentifier (identifier_);
      }

      public void Init () {
         identifier = null;
         fieldOfApplication = null;
         semantics = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode identifier

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            identifier = new Asn1ObjectIdentifier();
            identifier.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode fieldOfApplication

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            fieldOfApplication = new DirectoryString();
            fieldOfApplication.Decode (buffer, true, elemLen.mValue);
         }

         // decode semantics

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            semantics = new DirectoryString();
            semantics.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode semantics

         if (semantics != null) {
            len = semantics.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode fieldOfApplication

         if (fieldOfApplication != null) {
            len = fieldOfApplication.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode identifier

         len = identifier.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (identifier != null) identifier.Print (_out, "identifier", _level+1);
         if (fieldOfApplication != null) fieldOfApplication.Print (_out, "fieldOfApplication", _level+1);
         if (semantics != null) semantics.Print (_out, "semantics", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
