// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   using Certificate = tr.gov.tubitak.uekae.esya.asn.x509.Certificate;

   public class CertificateTrustPoint : Asn1Type {
      public Certificate trustpoint;
      public Asn1Integer pathLenConstraint;  // optional
      public AcceptablePolicySet acceptablePolicySet;  // optional
      public tr.gov.tubitak.uekae.esya.asn.signaturepolicies.NameConstraints nameConstraints;  // optional
      public tr.gov.tubitak.uekae.esya.asn.signaturepolicies.PolicyConstraints policyConstraints;  // optional

      static CertificateTrustPoint ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public CertificateTrustPoint () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CertificateTrustPoint (
         Certificate trustpoint_,
         Asn1Integer pathLenConstraint_,
         AcceptablePolicySet acceptablePolicySet_,
         tr.gov.tubitak.uekae.esya.asn.signaturepolicies.NameConstraints nameConstraints_,
         tr.gov.tubitak.uekae.esya.asn.signaturepolicies.PolicyConstraints policyConstraints_
      )
         : base ()
      {
         trustpoint = trustpoint_;
         pathLenConstraint = pathLenConstraint_;
         acceptablePolicySet = acceptablePolicySet_;
         nameConstraints = nameConstraints_;
         policyConstraints = policyConstraints_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public CertificateTrustPoint (
         Certificate trustpoint_
      )
         : base ()
      {
         trustpoint = trustpoint_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public CertificateTrustPoint (Certificate trustpoint_,
         long pathLenConstraint_,
         AcceptablePolicySet acceptablePolicySet_,
         tr.gov.tubitak.uekae.esya.asn.signaturepolicies.NameConstraints nameConstraints_,
         tr.gov.tubitak.uekae.esya.asn.signaturepolicies.PolicyConstraints policyConstraints_
      )
         : base ()
      {
         trustpoint = trustpoint_;
         pathLenConstraint = new Asn1Integer (pathLenConstraint_);
         acceptablePolicySet = acceptablePolicySet_;
         nameConstraints = nameConstraints_;
         policyConstraints = policyConstraints_;
      }

      public void Init () {
         trustpoint = null;
         pathLenConstraint = null;
         acceptablePolicySet = null;
         nameConstraints = null;
         policyConstraints = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode trustpoint

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            trustpoint = new Certificate();
            trustpoint.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode pathLenConstraint

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            pathLenConstraint = new Asn1Integer();
            pathLenConstraint.Decode (buffer, true, elemLen.mValue);
            if (!(pathLenConstraint.mValue >= 0)) {
               throw new Asn1ConsVioException ("pathLenConstraint.mValue", pathLenConstraint.mValue);
            }

         }

         // decode acceptablePolicySet

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            acceptablePolicySet = new AcceptablePolicySet();
            acceptablePolicySet.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode nameConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            nameConstraints = new NameConstraints();
            nameConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode policyConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            policyConstraints = new PolicyConstraints();
            policyConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode policyConstraints

         if (policyConstraints != null) {
            len = policyConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }

         // encode nameConstraints

         if (nameConstraints != null) {
            len = nameConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode acceptablePolicySet

         if (acceptablePolicySet != null) {
            len = acceptablePolicySet.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode pathLenConstraint

         if (pathLenConstraint != null) {
            if (!(pathLenConstraint.mValue >= 0)) {
               throw new Asn1ConsVioException ("pathLenConstraint.mValue", pathLenConstraint.mValue);
            }

            len = pathLenConstraint.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode trustpoint

         len = trustpoint.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (trustpoint != null) trustpoint.Print (_out, "trustpoint", _level+1);
         if (pathLenConstraint != null) pathLenConstraint.Print (_out, "pathLenConstraint", _level+1);
         if (acceptablePolicySet != null) acceptablePolicySet.Print (_out, "acceptablePolicySet", _level+1);
         if (nameConstraints != null) nameConstraints.Print (_out, "nameConstraints", _level+1);
         if (policyConstraints != null) policyConstraints.Print (_out, "policyConstraints", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
