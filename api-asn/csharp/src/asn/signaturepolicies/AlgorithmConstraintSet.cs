// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.signaturepolicies {

   public class AlgorithmConstraintSet : Asn1Type {
      public AlgorithmConstraints signerAlgorithmConstraints;  // optional
      public AlgorithmConstraints eeCertAlgorithmConstraints;  // optional
      public AlgorithmConstraints caCertAlgorithmConstraints;  // optional
      public AlgorithmConstraints aaCertAlgorithmConstraints;  // optional
      public AlgorithmConstraints tsaCertAlgorithmConstraints;  // optional

      static AlgorithmConstraintSet ()
      {
         Asn1Type.SetKey2 (_signaturepoliciesValues._rtkey);
      }

      public AlgorithmConstraintSet () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AlgorithmConstraintSet (
         AlgorithmConstraints signerAlgorithmConstraints_,
         AlgorithmConstraints eeCertAlgorithmConstraints_,
         AlgorithmConstraints caCertAlgorithmConstraints_,
         AlgorithmConstraints aaCertAlgorithmConstraints_,
         AlgorithmConstraints tsaCertAlgorithmConstraints_
      )
         : base ()
      {
         signerAlgorithmConstraints = signerAlgorithmConstraints_;
         eeCertAlgorithmConstraints = eeCertAlgorithmConstraints_;
         caCertAlgorithmConstraints = caCertAlgorithmConstraints_;
         aaCertAlgorithmConstraints = aaCertAlgorithmConstraints_;
         tsaCertAlgorithmConstraints = tsaCertAlgorithmConstraints_;
      }

      public void Init () {
         signerAlgorithmConstraints = null;
         eeCertAlgorithmConstraints = null;
         caCertAlgorithmConstraints = null;
         aaCertAlgorithmConstraints = null;
         tsaCertAlgorithmConstraints = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode signerAlgorithmConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            signerAlgorithmConstraints = new AlgorithmConstraints();
            signerAlgorithmConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode eeCertAlgorithmConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            eeCertAlgorithmConstraints = new AlgorithmConstraints();
            eeCertAlgorithmConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode caCertAlgorithmConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            caCertAlgorithmConstraints = new AlgorithmConstraints();
            caCertAlgorithmConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode aaCertAlgorithmConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            aaCertAlgorithmConstraints = new AlgorithmConstraints();
            aaCertAlgorithmConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode tsaCertAlgorithmConstraints

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
            int offset = buffer.ByteCount;
            tsaCertAlgorithmConstraints = new AlgorithmConstraints();
            tsaCertAlgorithmConstraints.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode tsaCertAlgorithmConstraints

         if (tsaCertAlgorithmConstraints != null) {
            len = tsaCertAlgorithmConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
            _aal += len;
         }

         // encode aaCertAlgorithmConstraints

         if (aaCertAlgorithmConstraints != null) {
            len = aaCertAlgorithmConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }

         // encode caCertAlgorithmConstraints

         if (caCertAlgorithmConstraints != null) {
            len = caCertAlgorithmConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode eeCertAlgorithmConstraints

         if (eeCertAlgorithmConstraints != null) {
            len = eeCertAlgorithmConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode signerAlgorithmConstraints

         if (signerAlgorithmConstraints != null) {
            len = signerAlgorithmConstraints.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (signerAlgorithmConstraints != null) signerAlgorithmConstraints.Print (_out, "signerAlgorithmConstraints", _level+1);
         if (eeCertAlgorithmConstraints != null) eeCertAlgorithmConstraints.Print (_out, "eeCertAlgorithmConstraints", _level+1);
         if (caCertAlgorithmConstraints != null) caCertAlgorithmConstraints.Print (_out, "caCertAlgorithmConstraints", _level+1);
         if (aaCertAlgorithmConstraints != null) aaCertAlgorithmConstraints.Print (_out, "aaCertAlgorithmConstraints", _level+1);
         if (tsaCertAlgorithmConstraints != null) tsaCertAlgorithmConstraints.Print (_out, "tsaCertAlgorithmConstraints", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
