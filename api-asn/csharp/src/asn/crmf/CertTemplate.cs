// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.crmf {

   using Version = tr.gov.tubitak.uekae.esya.asn.x509.Version;
   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
   using Name = tr.gov.tubitak.uekae.esya.asn.x509.Name;
   using SubjectPublicKeyInfo = tr.gov.tubitak.uekae.esya.asn.x509.SubjectPublicKeyInfo;
   using Extensions = tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

   public class CertTemplate : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.x509.Version version;  // optional
      public Asn1BigInteger serialNumber;  // optional
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier signingAlg;  // optional
      public Name issuer;  // optional
      public OptionalValidity validity;  // optional
      public Name subject;  // optional
      public SubjectPublicKeyInfo publicKey;  // optional
      public Asn1BitString issuerUID;  // optional
      public Asn1BitString subjectUID;  // optional
      public Extensions extensions;  // optional

      static CertTemplate ()
      {
         Asn1Type.SetKey2 (_crmfValues._rtkey);
      }

      public CertTemplate () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CertTemplate (
         tr.gov.tubitak.uekae.esya.asn.x509.Version version_,
         Asn1BigInteger serialNumber_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier signingAlg_,
         Name issuer_,
         OptionalValidity validity_,
         Name subject_,
         SubjectPublicKeyInfo publicKey_,
         Asn1BitString issuerUID_,
         Asn1BitString subjectUID_,
         Extensions extensions_
      )
         : base ()
      {
         version = version_;
         serialNumber = serialNumber_;
         signingAlg = signingAlg_;
         issuer = issuer_;
         validity = validity_;
         subject = subject_;
         publicKey = publicKey_;
         issuerUID = issuerUID_;
         subjectUID = subjectUID_;
         extensions = extensions_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public CertTemplate (long version_,
         Asn1BigInteger serialNumber_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier signingAlg_,
         Name issuer_,
         OptionalValidity validity_,
         Name subject_,
         SubjectPublicKeyInfo publicKey_,
         Asn1BitString issuerUID_,
         Asn1BitString subjectUID_,
         Extensions extensions_
      )
         : base ()
      {
         version = new tr.gov.tubitak.uekae.esya.asn.x509.Version (version_);
         serialNumber = serialNumber_;
         signingAlg = signingAlg_;
         issuer = issuer_;
         validity = validity_;
         subject = subject_;
         publicKey = publicKey_;
         issuerUID = issuerUID_;
         subjectUID = subjectUID_;
         extensions = extensions_;
      }

      public void Init () {
         version = null;
         serialNumber = null;
         signingAlg = null;
         issuer = null;
         validity = null;
         subject = null;
         publicKey = null;
         issuerUID = null;
         subjectUID = null;
         extensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            version = new Version();
            version.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode serialNumber

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            serialNumber = new Asn1BigInteger();
            serialNumber.Decode (buffer, false, elemLen.mValue);
         }

         // decode signingAlg

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            signingAlg = new AlgorithmIdentifier();
            signingAlg.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode issuer

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            issuer = new Name();
            issuer.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode validity

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
            int offset = buffer.ByteCount;
            validity = new OptionalValidity();
            validity.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode subject

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 5, elemLen, true)) {
            int offset = buffer.ByteCount;
            subject = new Name();
            subject.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode publicKey

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 6, elemLen, true)) {
            int offset = buffer.ByteCount;
            publicKey = new SubjectPublicKeyInfo();
            publicKey.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode issuerUID

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, elemLen, true)) {
            issuerUID = new Asn1BitString();
            issuerUID.Decode (buffer, false, elemLen.mValue);
         }

         // decode subjectUID

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, elemLen, true)) {
            subjectUID = new Asn1BitString();
            subjectUID.Decode (buffer, false, elemLen.mValue);
         }

         // decode extensions

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 9, elemLen, true)) {
            int offset = buffer.ByteCount;
            extensions = new Extensions();
            extensions.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode extensions

         if (extensions != null) {
            len = extensions.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 9, len);
            _aal += len;
         }

         // encode subjectUID

         if (subjectUID != null) {
            len = subjectUID.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, len);
            _aal += len;
         }

         // encode issuerUID

         if (issuerUID != null) {
            len = issuerUID.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
            _aal += len;
         }

         // encode publicKey

         if (publicKey != null) {
            len = publicKey.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
            _aal += len;
         }

         // encode subject

         if (subject != null) {
            len = subject.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
            _aal += len;
         }

         // encode validity

         if (validity != null) {
            len = validity.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
            _aal += len;
         }

         // encode issuer

         if (issuer != null) {
            len = issuer.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }

         // encode signingAlg

         if (signingAlg != null) {
            len = signingAlg.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode serialNumber

         if (serialNumber != null) {
            len = serialNumber.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode version

         if (version != null) {
            len = version.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (serialNumber != null) serialNumber.Print (_out, "serialNumber", _level+1);
         if (signingAlg != null) signingAlg.Print (_out, "signingAlg", _level+1);
         if (issuer != null) issuer.Print (_out, "issuer", _level+1);
         if (validity != null) validity.Print (_out, "validity", _level+1);
         if (subject != null) subject.Print (_out, "subject", _level+1);
         if (publicKey != null) publicKey.Print (_out, "publicKey", _level+1);
         if (issuerUID != null) issuerUID.Print (_out, "issuerUID", _level+1);
         if (subjectUID != null) subjectUID.Print (_out, "subjectUID", _level+1);
         if (extensions != null) extensions.Print (_out, "extensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
