// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.crmf {

   public class CertRequest : Asn1Type {
      public Asn1Integer certReqId;
      public CertTemplate certTemplate;
      public Controls controls;  // optional

      static CertRequest ()
      {
         Asn1Type.SetKey2 (_crmfValues._rtkey);
      }

      public CertRequest () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CertRequest (
         Asn1Integer certReqId_,
         CertTemplate certTemplate_,
         Controls controls_
      )
         : base ()
      {
         certReqId = certReqId_;
         certTemplate = certTemplate_;
         controls = controls_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public CertRequest (
         Asn1Integer certReqId_,
         CertTemplate certTemplate_
      )
         : base ()
      {
         certReqId = certReqId_;
         certTemplate = certTemplate_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public CertRequest (long certReqId_,
         CertTemplate certTemplate_,
         Controls controls_
      )
         : base ()
      {
         certReqId = new Asn1Integer (certReqId_);
         certTemplate = certTemplate_;
         controls = controls_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public CertRequest (
         long certReqId_,
         CertTemplate certTemplate_
      )
         : base ()
      {
         certReqId = new Asn1Integer (certReqId_);
         certTemplate = certTemplate_;
      }

      public void Init () {
         certReqId = null;
         certTemplate = null;
         controls = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode certReqId

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            certReqId = new Asn1Integer();
            certReqId.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode certTemplate

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            certTemplate = new CertTemplate();
            certTemplate.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode controls

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            controls = new Controls();
            controls.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode controls

         if (controls != null) {
            len = controls.Encode (buffer, true);
            _aal += len;
         }

         // encode certTemplate

         len = certTemplate.Encode (buffer, true);
         _aal += len;

         // encode certReqId

         len = certReqId.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (certReqId != null) certReqId.Print (_out, "certReqId", _level+1);
         if (certTemplate != null) certTemplate.Print (_out, "certTemplate", _level+1);
         if (controls != null) controls.Print (_out, "controls", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
