// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.crmf {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class EncryptedValue : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier intendedAlg;  // optional
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier symmAlg;  // optional
      public Asn1BitString encSymmKey;  // optional
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyAlg;  // optional
      public Asn1OctetString valueHint;  // optional
      public Asn1BitString encValue;

      static EncryptedValue ()
      {
         Asn1Type.SetKey2 (_crmfValues._rtkey);
      }

      public EncryptedValue () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public EncryptedValue (
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier intendedAlg_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier symmAlg_,
         Asn1BitString encSymmKey_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyAlg_,
         Asn1OctetString valueHint_,
         Asn1BitString encValue_
      )
         : base ()
      {
         intendedAlg = intendedAlg_;
         symmAlg = symmAlg_;
         encSymmKey = encSymmKey_;
         keyAlg = keyAlg_;
         valueHint = valueHint_;
         encValue = encValue_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public EncryptedValue (
         Asn1BitString encValue_
      )
         : base ()
      {
         encValue = encValue_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public EncryptedValue (tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier intendedAlg_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier symmAlg_,
         Asn1BitString encSymmKey_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyAlg_,
         byte[] valueHint_,
         Asn1BitString encValue_
      )
         : base ()
      {
         intendedAlg = intendedAlg_;
         symmAlg = symmAlg_;
         encSymmKey = encSymmKey_;
         keyAlg = keyAlg_;
         valueHint = new Asn1OctetString (valueHint_);
         encValue = encValue_;
      }

      public void Init () {
         intendedAlg = null;
         symmAlg = null;
         encSymmKey = null;
         keyAlg = null;
         valueHint = null;
         encValue = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode intendedAlg

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            intendedAlg = new AlgorithmIdentifier();
            intendedAlg.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode symmAlg

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            symmAlg = new AlgorithmIdentifier();
            symmAlg.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode encSymmKey

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            encSymmKey = new Asn1BitString();
            encSymmKey.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode keyAlg

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            keyAlg = new AlgorithmIdentifier();
            keyAlg.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode valueHint

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
            int offset = buffer.ByteCount;
            valueHint = new Asn1OctetString();
            valueHint.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode encValue

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
            encValue = new Asn1BitString();
            encValue.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode encValue

         len = encValue.Encode (buffer, true);
         _aal += len;

         // encode valueHint

         if (valueHint != null) {
            len = valueHint.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
            _aal += len;
         }

         // encode keyAlg

         if (keyAlg != null) {
            len = keyAlg.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }

         // encode encSymmKey

         if (encSymmKey != null) {
            len = encSymmKey.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
            _aal += len;
         }

         // encode symmAlg

         if (symmAlg != null) {
            len = symmAlg.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode intendedAlg

         if (intendedAlg != null) {
            len = intendedAlg.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (intendedAlg != null) intendedAlg.Print (_out, "intendedAlg", _level+1);
         if (symmAlg != null) symmAlg.Print (_out, "symmAlg", _level+1);
         if (encSymmKey != null) encSymmKey.Print (_out, "encSymmKey", _level+1);
         if (keyAlg != null) keyAlg.Print (_out, "keyAlg", _level+1);
         if (valueHint != null) valueHint.Print (_out, "valueHint", _level+1);
         if (encValue != null) encValue.Print (_out, "encValue", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
