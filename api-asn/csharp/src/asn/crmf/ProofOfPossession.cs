// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.crmf {

   public class ProofOfPossession : Asn1Choice {
      // Choice element identifier constants
      public const byte _RAVERIFIED = 1;
      public const byte _SIGNATURE = 2;
      public const byte _KEYENCIPHERMENT = 3;
      public const byte _KEYAGREEMENT = 4;

      static ProofOfPossession ()
      {
         Asn1Type.SetKey2 (_crmfValues._rtkey);
      }

      public ProofOfPossession () : base()
      {
      }

      public ProofOfPossession (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _RAVERIFIED: return "raVerified";
            case _SIGNATURE: return "signature";
            case _KEYENCIPHERMENT: return "keyEncipherment";
            case _KEYAGREEMENT: return "keyAgreement";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_raVerified () {
         SetElement (_RAVERIFIED, Asn1Null.NULL_VALUE);
      }

      public void Set_signature (POPOSigningKey value) {
         SetElement (_SIGNATURE, value);
      }

      public void Set_keyEncipherment (POPOPrivKey value) {
         SetElement (_KEYENCIPHERMENT, value);
      }

      public void Set_keyAgreement (POPOPrivKey value) {
         SetElement (_KEYAGREEMENT, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            Asn1Null raVerified;
            raVerified = new Asn1Null();
            raVerified.Decode (buffer, true, len);
            SetElement (_RAVERIFIED, raVerified);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
         {
            POPOSigningKey signature;
            signature = new POPOSigningKey();
            signature.Decode (buffer, false, len);
            SetElement (_SIGNATURE, signature);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
         {
            POPOPrivKey keyEncipherment;
            keyEncipherment = new POPOPrivKey();
            keyEncipherment.Decode (buffer, false, len);
            SetElement (_KEYENCIPHERMENT, keyEncipherment);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
         {
            POPOPrivKey keyAgreement;
            keyAgreement = new POPOPrivKey();
            keyAgreement.Decode (buffer, false, len);
            SetElement (_KEYAGREEMENT, keyAgreement);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode raVerified
         case _RAVERIFIED:
            Asn1Null raVerified = (Asn1Null) GetElement();
            len = raVerified.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
            break;

         // encode signature
         case _SIGNATURE:
            POPOSigningKey signature = (POPOSigningKey) GetElement();
            len = signature.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         // encode keyEncipherment
         case _KEYENCIPHERMENT:
            POPOPrivKey keyEncipherment = (POPOPrivKey) GetElement();
            len = keyEncipherment.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
            break;

         // encode keyAgreement
         case _KEYAGREEMENT:
            POPOPrivKey keyAgreement = (POPOPrivKey) GetElement();
            len = keyAgreement.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
