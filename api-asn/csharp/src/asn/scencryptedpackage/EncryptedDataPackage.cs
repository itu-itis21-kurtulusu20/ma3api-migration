// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-May-2024.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.scencryptedpackage {

   public class EncryptedDataPackage : Asn1Type {
      public Asn1Integer version;
      public Asn1OctetString wrappedKey;
      public Asn1OctetString iv;
      public Asn1OctetString aad;  // optional
      public Asn1OctetString encryptedData;

      static EncryptedDataPackage ()
      {
         Asn1Type.SetKey2 (_encryptedDataPackageValues._rtkey);
      }

      public EncryptedDataPackage () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public EncryptedDataPackage (
         Asn1Integer version_,
         Asn1OctetString wrappedKey_,
         Asn1OctetString iv_,
         Asn1OctetString aad_,
         Asn1OctetString encryptedData_
      )
         : base ()
      {
         version = version_;
         wrappedKey = wrappedKey_;
         iv = iv_;
         aad = aad_;
         encryptedData = encryptedData_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public EncryptedDataPackage (
         Asn1Integer version_,
         Asn1OctetString wrappedKey_,
         Asn1OctetString iv_,
         Asn1OctetString encryptedData_
      )
         : base ()
      {
         version = version_;
         wrappedKey = wrappedKey_;
         iv = iv_;
         encryptedData = encryptedData_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public EncryptedDataPackage (long version_,
         byte[] wrappedKey_,
         byte[] iv_,
         byte[] aad_,
         byte[] encryptedData_
      )
         : base ()
      {
         version = new Asn1Integer (version_);
         wrappedKey = new Asn1OctetString (wrappedKey_);
         iv = new Asn1OctetString (iv_);
         aad = new Asn1OctetString (aad_);
         encryptedData = new Asn1OctetString (encryptedData_);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public EncryptedDataPackage (
         long version_,
         byte[] wrappedKey_,
         byte[] iv_,
         byte[] encryptedData_
      )
         : base ()
      {
         version = new Asn1Integer (version_);
         wrappedKey = new Asn1OctetString (wrappedKey_);
         iv = new Asn1OctetString (iv_);
         encryptedData = new Asn1OctetString (encryptedData_);
      }

      public void Init () {
         version = null;
         wrappedKey = null;
         iv = null;
         aad = null;
         encryptedData = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            version = new Asn1Integer();
            version.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode wrappedKey

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            wrappedKey = new Asn1OctetString();
            wrappedKey.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode iv

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            iv = new Asn1OctetString();
            iv.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode aad

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            aad = new Asn1OctetString();
            aad.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode encryptedData

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
            int offset = buffer.ByteCount;
            encryptedData = new Asn1OctetString();
            encryptedData.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode encryptedData

         len = encryptedData.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
         _aal += len;

         // encode aad

         if (aad != null) {
            len = aad.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
            _aal += len;
         }

         // encode iv

         len = iv.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;

         // encode wrappedKey

         len = wrappedKey.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;

         // encode version

         len = version.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (wrappedKey != null) wrappedKey.Print (_out, "wrappedKey", _level+1);
         if (iv != null) iv.Print (_out, "iv", _level+1);
         if (aad != null) aad.Print (_out, "aad", _level+1);
         if (encryptedData != null) encryptedData.Print (_out, "encryptedData", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
