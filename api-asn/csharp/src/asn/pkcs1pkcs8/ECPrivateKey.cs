// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.pkcs1pkcs8 {

   public class ECPrivateKey : Asn1Type {
      public ECPrivateKey_version version;
      public Asn1OctetString privateKey;
      public Asn1OpenType parameters;  // optional
      public Asn1BitString publicKey;  // optional

      static ECPrivateKey ()
      {
         Asn1Type.SetKey2 (_pkcs1pkcs8Values._rtkey);
      }

      public ECPrivateKey () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ECPrivateKey (
         ECPrivateKey_version version_,
         Asn1OctetString privateKey_,
         Asn1OpenType parameters_,
         Asn1BitString publicKey_
      )
         : base ()
      {
         version = version_;
         privateKey = privateKey_;
         parameters = parameters_;
         publicKey = publicKey_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ECPrivateKey (
         ECPrivateKey_version version_,
         Asn1OctetString privateKey_
      )
         : base ()
      {
         version = version_;
         privateKey = privateKey_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ECPrivateKey (long version_,
         byte[] privateKey_,
         Asn1OpenType parameters_,
         Asn1BitString publicKey_
      )
         : base ()
      {
         version = new ECPrivateKey_version (version_);
         privateKey = new Asn1OctetString (privateKey_);
         parameters = parameters_;
         publicKey = publicKey_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public ECPrivateKey (
         long version_,
         byte[] privateKey_
      )
         : base ()
      {
         version = new ECPrivateKey_version (version_);
         privateKey = new Asn1OctetString (privateKey_);
      }

      public void Init () {
         version = null;
         privateKey = null;
         parameters = null;
         publicKey = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new ECPrivateKey_version();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode privateKey

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            privateKey = new Asn1OctetString();
            privateKey.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode parameters

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            parameters = new Asn1OpenType();
            parameters.Decode (buffer, true, 0);
         }

         // decode publicKey

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            publicKey = new Asn1BitString();
            publicKey.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode publicKey

         if (publicKey != null) {
            len = publicKey.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode parameters

         if (parameters != null) {
            len = parameters.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode privateKey

         len = privateKey.Encode (buffer, true);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (privateKey != null) privateKey.Print (_out, "privateKey", _level+1);
         if (parameters != null) parameters.Print (_out, "parameters", _level+1);
         if (publicKey != null) publicKey.Print (_out, "publicKey", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
