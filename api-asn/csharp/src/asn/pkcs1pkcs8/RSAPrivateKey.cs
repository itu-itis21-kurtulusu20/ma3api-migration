// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.pkcs1pkcs8 {

   using Version = tr.gov.tubitak.uekae.esya.asn.x509.Version;

   public class RSAPrivateKey : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.x509.Version version;
      public Asn1BigInteger modulus;
      public Asn1BigInteger publicExponent;
      public Asn1BigInteger privateExponent;
      public Asn1BigInteger prime1;
      public Asn1BigInteger prime2;
      public Asn1BigInteger exponent1;
      public Asn1BigInteger exponent2;
      public Asn1BigInteger coefficient;

      static RSAPrivateKey ()
      {
         Asn1Type.SetKey2 (_pkcs1pkcs8Values._rtkey);
      }

      public RSAPrivateKey () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public RSAPrivateKey (
         tr.gov.tubitak.uekae.esya.asn.x509.Version version_,
         Asn1BigInteger modulus_,
         Asn1BigInteger publicExponent_,
         Asn1BigInteger privateExponent_,
         Asn1BigInteger prime1_,
         Asn1BigInteger prime2_,
         Asn1BigInteger exponent1_,
         Asn1BigInteger exponent2_,
         Asn1BigInteger coefficient_
      )
         : base ()
      {
         version = version_;
         modulus = modulus_;
         publicExponent = publicExponent_;
         privateExponent = privateExponent_;
         prime1 = prime1_;
         prime2 = prime2_;
         exponent1 = exponent1_;
         exponent2 = exponent2_;
         coefficient = coefficient_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public RSAPrivateKey (long version_,
         Asn1BigInteger modulus_,
         Asn1BigInteger publicExponent_,
         Asn1BigInteger privateExponent_,
         Asn1BigInteger prime1_,
         Asn1BigInteger prime2_,
         Asn1BigInteger exponent1_,
         Asn1BigInteger exponent2_,
         Asn1BigInteger coefficient_
      )
         : base ()
      {
         version = new tr.gov.tubitak.uekae.esya.asn.x509.Version (version_);
         modulus = modulus_;
         publicExponent = publicExponent_;
         privateExponent = privateExponent_;
         prime1 = prime1_;
         prime2 = prime2_;
         exponent1 = exponent1_;
         exponent2 = exponent2_;
         coefficient = coefficient_;
      }

      public void Init () {
         version = null;
         modulus = null;
         publicExponent = null;
         privateExponent = null;
         prime1 = null;
         prime2 = null;
         exponent1 = null;
         exponent2 = null;
         coefficient = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new Version();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode modulus

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            modulus = new Asn1BigInteger();
            modulus.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode publicExponent

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            publicExponent = new Asn1BigInteger();
            publicExponent.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode privateExponent

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            privateExponent = new Asn1BigInteger();
            privateExponent.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode prime1

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            prime1 = new Asn1BigInteger();
            prime1.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode prime2

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            prime2 = new Asn1BigInteger();
            prime2.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode exponent1

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            exponent1 = new Asn1BigInteger();
            exponent1.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode exponent2

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            exponent2 = new Asn1BigInteger();
            exponent2.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode coefficient

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            coefficient = new Asn1BigInteger();
            coefficient.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode coefficient

         len = coefficient.Encode (buffer, true);
         _aal += len;

         // encode exponent2

         len = exponent2.Encode (buffer, true);
         _aal += len;

         // encode exponent1

         len = exponent1.Encode (buffer, true);
         _aal += len;

         // encode prime2

         len = prime2.Encode (buffer, true);
         _aal += len;

         // encode prime1

         len = prime1.Encode (buffer, true);
         _aal += len;

         // encode privateExponent

         len = privateExponent.Encode (buffer, true);
         _aal += len;

         // encode publicExponent

         len = publicExponent.Encode (buffer, true);
         _aal += len;

         // encode modulus

         len = modulus.Encode (buffer, true);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (modulus != null) modulus.Print (_out, "modulus", _level+1);
         if (publicExponent != null) publicExponent.Print (_out, "publicExponent", _level+1);
         if (privateExponent != null) privateExponent.Print (_out, "privateExponent", _level+1);
         if (prime1 != null) prime1.Print (_out, "prime1", _level+1);
         if (prime2 != null) prime2.Print (_out, "prime2", _level+1);
         if (exponent1 != null) exponent1.Print (_out, "exponent1", _level+1);
         if (exponent2 != null) exponent2.Print (_out, "exponent2", _level+1);
         if (coefficient != null) coefficient.Print (_out, "coefficient", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
