// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class NoticeReference : Asn1Type {
      public DisplayText organization;
      public NoticeReference_noticeNumbers noticeNumbers;

      static NoticeReference ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public NoticeReference () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public NoticeReference (
         DisplayText organization_,
         NoticeReference_noticeNumbers noticeNumbers_
      )
         : base ()
      {
         organization = organization_;
         noticeNumbers = noticeNumbers_;
      }

      public void Init () {
         organization = null;
         noticeNumbers = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is NoticeReference) ) return false;

         NoticeReference rhs = (NoticeReference) obj;

         if (organization == null) {
            if (rhs.organization != null) return false;
         }
         else {
            if (!organization.Equals(rhs.organization)) {
               return false;
            }
         }

         if (noticeNumbers == null) {
            if (rhs.noticeNumbers != null) return false;
         }
         else {
            if (!noticeNumbers.Equals(rhs.noticeNumbers)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (organization != null) __code = 31*__code + organization.GetHashCode();
         if (noticeNumbers != null) __code = 31*__code + noticeNumbers.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode organization

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 22) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 26) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 30))
            {
               organization = new DisplayText();
               organization.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode noticeNumbers

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            noticeNumbers = new NoticeReference_noticeNumbers();
            noticeNumbers.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode noticeNumbers

         len = noticeNumbers.Encode (buffer, true);
         _aal += len;

         // encode organization

         len = organization.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (organization != null) organization.Print (_out, "organization", _level+1);
         if (noticeNumbers != null) noticeNumbers.Print (_out, "noticeNumbers", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
