// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509
{

    public class PersonalName : Asn1Type
    {
        public Asn1PrintableString surname;
        public Asn1PrintableString given_name;  // optional
        public Asn1PrintableString initials;  // optional
        public Asn1PrintableString generation_qualifier;  // optional

        static PersonalName()
        {
            Asn1Type.SetKey2(_ExplicitValues._rtkey);
        }

        public PersonalName()
            : base()
        {
            Init();
        }

        /// <summary>
        /// This constructor sets all elements to references to the 
        /// given objects
        /// </summary>
        public PersonalName(
           Asn1PrintableString surname_,
           Asn1PrintableString given_name_,
           Asn1PrintableString initials_,
           Asn1PrintableString generation_qualifier_
        )
            : base()
        {
            surname = surname_;
            given_name = given_name_;
            initials = initials_;
            generation_qualifier = generation_qualifier_;
        }

        /// <summary>
        /// This constructor is for required elements only.  It sets 
        /// all elements to references to the given objects
        /// </summary>
        public PersonalName(
           Asn1PrintableString surname_
        )
            : base()
        {
            surname = surname_;
        }

        /// <summary>
        /// This constructor allows primitive data to be passed for all 
        /// primitive elements.  It will create new object wrappers for 
        /// the primitive data and set other elements to references to 
        /// the given objects 
        /// </summary>
        public PersonalName(string surname_,
           string given_name_,
           string initials_,
           string generation_qualifier_
        )
            : base()
        {
            surname = new Asn1PrintableString(surname_);
            given_name = new Asn1PrintableString(given_name_);
            initials = new Asn1PrintableString(initials_);
            generation_qualifier = new Asn1PrintableString(generation_qualifier_);
        }

        /// <summary>
        /// This constructor is for required elements only.  It allows 
        /// primitive data to be passed for all primitive elements.  
        /// It will create new object wrappers for the primitive data 
        /// and set other elements to references to the given objects. 
        /// </summary>
        public PersonalName(
           string surname_
        )
            : base()
        {
            surname = new Asn1PrintableString(surname_);
        }

        public void Init()
        {
            surname = null;
            given_name = null;
            initials = null;
            generation_qualifier = null;
        }

        public override bool Equals(Object obj)
        {
            if (this == obj) return true;
            if (!(obj is PersonalName)) return false;

            PersonalName rhs = (PersonalName)obj;

            if (surname == null)
            {
                if (rhs.surname != null) return false;
            }
            else
            {
                if (!surname.Equals(rhs.surname))
                {
                    return false;
                }
            }

            if (given_name == null)
            {
                if (rhs.given_name != null) return false;
            }
            else
            {
                if (!given_name.Equals(rhs.given_name))
                {
                    return false;
                }
            }

            if (initials == null)
            {
                if (rhs.initials != null) return false;
            }
            else
            {
                if (!initials.Equals(rhs.initials))
                {
                    return false;
                }
            }

            if (generation_qualifier == null)
            {
                if (rhs.generation_qualifier != null) return false;
            }
            else
            {
                if (!generation_qualifier.Equals(rhs.generation_qualifier))
                {
                    return false;
                }
            }

            return true;
        }

        public override int GetHashCode()
        {
            int __code = 1;

            if (surname != null) __code = 31 * __code + surname.GetHashCode();
            if (given_name != null) __code = 31 * __code + given_name.GetHashCode();
            if (initials != null) __code = 31 * __code + initials.GetHashCode();
            if (generation_qualifier != null) __code = 31 * __code + generation_qualifier.GetHashCode();

            return __code;
        }

        public override void Decode
           (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
        {
            int llen = (explicitTagging) ?
               MatchTag(buffer, Asn1Tag.SET) : implicitLength;

            Init();

            // decode SET

            Asn1BerDecodeContext _context =
               new Asn1BerDecodeContext(buffer, llen);

            Asn1Tag tag = new Asn1Tag();

            while (!_context.Expired())
            {
                buffer.Mark();

                int len = buffer.DecodeTagAndLength(tag);

                // decode surname

                if (tag.Equals(Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
                {
                    if (null == surname)
                    {
                        surname = new Asn1PrintableString();
                        surname.Decode(buffer, false, len);
                        if (!((surname.Length >= 1 && surname.Length <= 40)))
                        {
                            throw new Asn1ConsVioException("surname.Length", surname.Length);
                        }

                    }
                    else throw new Asn1SetDuplicateException(buffer, tag);
                }

                // decode given_name

                else if (tag.Equals(Asn1Tag.CTXT, Asn1Tag.PRIM, 1))
                {
                    if (null == given_name)
                    {
                        given_name = new Asn1PrintableString();
                        given_name.Decode(buffer, false, len);
                        if (!((given_name.Length >= 1 && given_name.Length <= 16)))
                        {
                            throw new Asn1ConsVioException("given_name.Length", given_name.Length);
                        }

                    }
                    else throw new Asn1SetDuplicateException(buffer, tag);
                }

                // decode initials

                else if (tag.Equals(Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
                {
                    if (null == initials)
                    {
                        initials = new Asn1PrintableString();
                        initials.Decode(buffer, false, len);
                        if (!((initials.Length >= 1 && initials.Length <= 5)))
                        {
                            throw new Asn1ConsVioException("initials.Length", initials.Length);
                        }

                    }
                    else throw new Asn1SetDuplicateException(buffer, tag);
                }

                // decode generation_qualifier

                else if (tag.Equals(Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
                {
                    if (null == generation_qualifier)
                    {
                        generation_qualifier = new Asn1PrintableString();
                        generation_qualifier.Decode(buffer, false, len);
                        if (!((generation_qualifier.Length >= 1 && generation_qualifier.Length <= 3)))
                        {
                            throw new Asn1ConsVioException("generation_qualifier.Length", generation_qualifier.Length);
                        }

                    }
                    else throw new Asn1SetDuplicateException(buffer, tag);
                }
                else throw new Asn1NotInSetException(buffer, tag);
            }

            if (null == surname)
                throw new Asn1MissingRequiredException(buffer);

        }

        public override int Encode(Asn1BerEncodeBuffer buffer, bool explicitTagging)
        {
            int _aal = 0, len;

            // encode generation_qualifier

            if (generation_qualifier != null)
            {
                if (!((generation_qualifier.Length >= 1 && generation_qualifier.Length <= 3)))
                {
                    throw new Asn1ConsVioException("generation_qualifier.Length", generation_qualifier.Length);
                }

                len = generation_qualifier.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
                _aal += len;
            }

            // encode initials

            if (initials != null)
            {
                if (!((initials.Length >= 1 && initials.Length <= 5)))
                {
                    throw new Asn1ConsVioException("initials.Length", initials.Length);
                }

                len = initials.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
                _aal += len;
            }

            // encode given_name

            if (given_name != null)
            {
                if (!((given_name.Length >= 1 && given_name.Length <= 16)))
                {
                    throw new Asn1ConsVioException("given_name.Length", given_name.Length);
                }

                len = given_name.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
                _aal += len;
            }

            // encode surname

            if (!((surname.Length >= 1 && surname.Length <= 40)))
            {
                throw new Asn1ConsVioException("surname.Length", surname.Length);
            }

            len = surname.Encode(buffer, false);
            len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;

            if (explicitTagging)
            {
                _aal += buffer.EncodeTagAndLength(Asn1Tag.SET, _aal);
            }

            return (_aal);
        }

        public override void Print(System.IO.TextWriter _out,
                                    string _varName, int _level)
        {
            Indent(_out, _level);
            _out.WriteLine(_varName + " {");
            if (surname != null) surname.Print(_out, "surname", _level + 1);
            if (given_name != null) given_name.Print(_out, "given_name", _level + 1);
            if (initials != null) initials.Print(_out, "initials", _level + 1);
            if (generation_qualifier != null) generation_qualifier.Print(_out, "generation_qualifier", _level + 1);
            Indent(_out, _level);
            _out.WriteLine("}");
        }
    }
}
