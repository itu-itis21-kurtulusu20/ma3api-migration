// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class ExtendedNetworkAddress : Asn1Choice {
      // Choice element identifier constants
      public const byte _E163_4_ADDRESS = 1;
      public const byte _PSAP_ADDRESS = 2;

      static ExtendedNetworkAddress ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public ExtendedNetworkAddress () : base()
      {
      }

      public ExtendedNetworkAddress (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _E163_4_ADDRESS: return "e163_4_address";
            case _PSAP_ADDRESS: return "psap_address";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_e163_4_address (ExtendedNetworkAddress_e163_4_address value) {
         SetElement (_E163_4_ADDRESS, value);
      }

      public void Set_psap_address (PresentationAddress value) {
         SetElement (_PSAP_ADDRESS, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
         {
            buffer.Reset();
            ExtendedNetworkAddress_e163_4_address e163_4_address;
            e163_4_address = new ExtendedNetworkAddress_e163_4_address();
            e163_4_address.Decode (buffer, true, len);
            SetElement (_E163_4_ADDRESS, e163_4_address);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            PresentationAddress psap_address;
            psap_address = new PresentationAddress();
            psap_address.Decode (buffer, false, len);
            SetElement (_PSAP_ADDRESS, psap_address);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode e163_4_address
         case _E163_4_ADDRESS:
            ExtendedNetworkAddress_e163_4_address e163_4_address = (ExtendedNetworkAddress_e163_4_address) GetElement();
            len = e163_4_address.Encode (buffer, true);
            _aal += len;
            break;

         // encode psap_address
         case _PSAP_ADDRESS:
            PresentationAddress psap_address = (PresentationAddress) GetElement();
            len = psap_address.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
