// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   //using DirectoryString = tr.gov.tubitak.uekae.esya.asn.x509.DirectoryString;

   public class EDIPartyName : Asn1Type {
      public DirectoryString nameAssigner;  // optional
      public DirectoryString partyName;

      static EDIPartyName ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public EDIPartyName () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public EDIPartyName (
         DirectoryString nameAssigner_,
         DirectoryString partyName_
      )
         : base ()
      {
         nameAssigner = nameAssigner_;
         partyName = partyName_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public EDIPartyName (
         DirectoryString partyName_
      )
         : base ()
      {
         partyName = partyName_;
      }

      public void Init () {
         nameAssigner = null;
         partyName = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is EDIPartyName) ) return false;

         EDIPartyName rhs = (EDIPartyName) obj;

         if (nameAssigner == null) {
            if (rhs.nameAssigner != null) return false;
         }
         else {
            if (!nameAssigner.Equals(rhs.nameAssigner)) {
               return false;
            }
         }

         if (partyName == null) {
            if (rhs.partyName != null) return false;
         }
         else {
            if (!partyName.Equals(rhs.partyName)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (nameAssigner != null) __code = 31*__code + nameAssigner.GetHashCode();
         if (partyName != null) __code = 31*__code + partyName.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode nameAssigner

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            nameAssigner = new DirectoryString();
            nameAssigner.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode partyName

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            partyName = new DirectoryString();
            partyName.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode partyName

         len = partyName.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;

         // encode nameAssigner

         if (nameAssigner != null) {
            len = nameAssigner.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (nameAssigner != null) nameAssigner.Print (_out, "nameAssigner", _level+1);
         if (partyName != null) partyName.Print (_out, "partyName", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
