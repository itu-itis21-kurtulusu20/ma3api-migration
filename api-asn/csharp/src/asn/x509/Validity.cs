// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class Validity : Asn1Type {
      public Time notBefore;
      public Time notAfter;

      static Validity ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public Validity () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public Validity (
         Time notBefore_,
         Time notAfter_
      )
         : base ()
      {
         notBefore = notBefore_;
         notAfter = notAfter_;
      }

      public void Init () {
         notBefore = null;
         notAfter = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is Validity) ) return false;

         Validity rhs = (Validity) obj;

         if (notBefore == null) {
            if (rhs.notBefore != null) return false;
         }
         else {
            if (!notBefore.Equals(rhs.notBefore)) {
               return false;
            }
         }

         if (notAfter == null) {
            if (rhs.notAfter != null) return false;
         }
         else {
            if (!notAfter.Equals(rhs.notAfter)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (notBefore != null) __code = 31*__code + notBefore.GetHashCode();
         if (notAfter != null) __code = 31*__code + notAfter.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode notBefore

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
            {
               notBefore = new Time();
               notBefore.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode notAfter

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
            {
               notAfter = new Time();
               notAfter.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode notAfter

         len = notAfter.Encode (buffer, true);
         _aal += len;

         // encode notBefore

         len = notBefore.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (notBefore != null) notBefore.Print (_out, "notBefore", _level+1);
         if (notAfter != null) notAfter.Print (_out, "notAfter", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
