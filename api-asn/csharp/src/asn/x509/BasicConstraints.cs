// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class BasicConstraints : Asn1Type {
      public Asn1Boolean cA;  // default = false
      public Asn1Integer pathLenConstraint;  // optional

      static BasicConstraints ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public BasicConstraints () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public BasicConstraints (
         Asn1Boolean cA_,
         Asn1Integer pathLenConstraint_
      )
         : base ()
      {
         cA = cA_;
         pathLenConstraint = pathLenConstraint_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public BasicConstraints (bool cA_,
         long pathLenConstraint_
      )
         : base ()
      {
         cA = new Asn1Boolean (cA_);
         pathLenConstraint = new Asn1Integer (pathLenConstraint_);
      }

      public void Init () {
         cA = new Asn1Boolean (false);
         pathLenConstraint = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is BasicConstraints) ) return false;

         BasicConstraints rhs = (BasicConstraints) obj;

         if (cA == null) {
            if (rhs.cA != null) return false;
         }
         else {
            if (!cA.Equals(rhs.cA)) {
               return false;
            }
         }

         if (pathLenConstraint == null) {
            if (rhs.pathLenConstraint != null) return false;
         }
         else {
            if (!pathLenConstraint.Equals(rhs.pathLenConstraint)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (cA != null) __code = 31*__code + cA.GetHashCode();
         if (pathLenConstraint != null) __code = 31*__code + pathLenConstraint.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode cA

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
            cA = new Asn1Boolean();
            cA.Decode (buffer, true, elemLen.mValue);
         }

         // decode pathLenConstraint

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            pathLenConstraint = new Asn1Integer();
            pathLenConstraint.Decode (buffer, true, elemLen.mValue);
            if (!(pathLenConstraint.mValue >= 0)) {
               throw new Asn1ConsVioException ("pathLenConstraint.mValue", pathLenConstraint.mValue);
            }

         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode pathLenConstraint

         if (pathLenConstraint != null) {
            if (!(pathLenConstraint.mValue >= 0)) {
               throw new Asn1ConsVioException ("pathLenConstraint.mValue", pathLenConstraint.mValue);
            }

            len = pathLenConstraint.Encode (buffer, true);
            _aal += len;
         }

         // encode cA

         if (!cA.Equals (false)) {
            len = cA.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (cA != null) cA.Print (_out, "cA", _level+1);
         if (pathLenConstraint != null) pathLenConstraint.Print (_out, "pathLenConstraint", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
