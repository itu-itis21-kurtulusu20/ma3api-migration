// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509
{

    public class ExtensionAttribute : Asn1Type
    {
        public Asn1Integer extension_attribute_type;
        public Asn1OpenType extension_attribute_value;

        static ExtensionAttribute()
        {
            Asn1Type.SetKey2(_ExplicitValues._rtkey);
        }

        public ExtensionAttribute()
            : base()
        {
            Init();
        }

        /// <summary>
        /// This constructor sets all elements to references to the 
        /// given objects
        /// </summary>
        public ExtensionAttribute(
           Asn1Integer extension_attribute_type_,
           Asn1OpenType extension_attribute_value_
        )
            : base()
        {
            extension_attribute_type = extension_attribute_type_;
            extension_attribute_value = extension_attribute_value_;
        }

        /// <summary>
        /// This constructor allows primitive data to be passed for all 
        /// primitive elements.  It will create new object wrappers for 
        /// the primitive data and set other elements to references to 
        /// the given objects 
        /// </summary>
        public ExtensionAttribute(long extension_attribute_type_,
           Asn1OpenType extension_attribute_value_
        )
            : base()
        {
            extension_attribute_type = new Asn1Integer(extension_attribute_type_);
            extension_attribute_value = extension_attribute_value_;
        }

        public void Init()
        {
            extension_attribute_type = null;
            extension_attribute_value = null;
        }

        public override bool Equals(Object obj)
        {
            if (this == obj) return true;
            if (!(obj is ExtensionAttribute)) return false;

            ExtensionAttribute rhs = (ExtensionAttribute)obj;

            if (extension_attribute_type == null)
            {
                if (rhs.extension_attribute_type != null) return false;
            }
            else
            {
                if (!extension_attribute_type.Equals(rhs.extension_attribute_type))
                {
                    return false;
                }
            }

            if (extension_attribute_value == null)
            {
                if (rhs.extension_attribute_value != null) return false;
            }
            else
            {
                if (!extension_attribute_value.Equals(rhs.extension_attribute_value))
                {
                    return false;
                }
            }

            return true;
        }

        public override int GetHashCode()
        {
            int __code = 1;

            if (extension_attribute_type != null) __code = 31 * __code + extension_attribute_type.GetHashCode();
            if (extension_attribute_value != null) __code = 31 * __code + extension_attribute_value.GetHashCode();

            return __code;
        }

        public override void Decode
           (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
        {
            int llen = (explicitTagging) ?
               MatchTag(buffer, Asn1Tag.SEQUENCE) : implicitLength;

            Init();

            // decode SEQUENCE

            Asn1BerDecodeContext _context =
               new Asn1BerDecodeContext(buffer, llen);

            IntHolder elemLen = new IntHolder();

            // decode extension_attribute_type

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true))
            {
                int offset = buffer.ByteCount;
                extension_attribute_type = new Asn1Integer();
                extension_attribute_type.Decode(buffer, false, elemLen.mValue);
                if (!((extension_attribute_type.mValue >= 0 && extension_attribute_type.mValue <= 256)))
                {
                    throw new Asn1ConsVioException("extension_attribute_type.mValue", extension_attribute_type.mValue);
                }

                int declen = buffer.ByteCount - offset;
                if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
                    throw new Asn1InvalidLengthException();
            }
            else throw new Asn1MissingRequiredException(buffer);

            // decode extension_attribute_value

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true))
            {
                extension_attribute_value = new Asn1OpenType();
                extension_attribute_value.Decode(buffer, true, 0);
            }
            else throw new Asn1MissingRequiredException(buffer);

        }

        public override int Encode(Asn1BerEncodeBuffer buffer, bool explicitTagging)
        {
            int _aal = 0, len;

            // encode extension_attribute_value

            len = extension_attribute_value.Encode(buffer, true);
            len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;

            // encode extension_attribute_type

            if (!((extension_attribute_type.mValue >= 0 && extension_attribute_type.mValue <= 256)))
            {
                throw new Asn1ConsVioException("extension_attribute_type.mValue", extension_attribute_type.mValue);
            }

            len = extension_attribute_type.Encode(buffer, false);
            len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;

            if (explicitTagging)
            {
                _aal += buffer.EncodeTagAndLength(Asn1Tag.SEQUENCE, _aal);
            }

            return (_aal);
        }

        public override void Print(System.IO.TextWriter _out,
                                    string _varName, int _level)
        {
            Indent(_out, _level);
            _out.WriteLine(_varName + " {");
            if (extension_attribute_type != null) extension_attribute_type.Print(_out, "extension_attribute_type", _level + 1);
            if (extension_attribute_value != null) extension_attribute_value.Print(_out, "extension_attribute_value", _level + 1);
            Indent(_out, _level);
            _out.WriteLine("}");
        }
    }
}
