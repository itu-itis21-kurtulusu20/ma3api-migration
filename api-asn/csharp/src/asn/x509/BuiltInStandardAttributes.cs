// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509
{

    public class BuiltInStandardAttributes : Asn1Type
    {
        public CountryName country_name;  // optional
        public AdministrationDomainName administration_domain_name;  // optional
        public Asn1NumericString network_address;  // optional
        public Asn1PrintableString terminal_identifier;  // optional
        public PrivateDomainName private_domain_name;  // optional
        public Asn1PrintableString organization_name;  // optional
        public Asn1NumericString numeric_user_identifier;  // optional
        public PersonalName personal_name;  // optional
        public OrganizationalUnitNames organizational_unit_names;  // optional

        static BuiltInStandardAttributes()
        {
            Asn1Type.SetKey2(_ExplicitValues._rtkey);
        }

        public BuiltInStandardAttributes()
            : base()
        {
            Init();
        }

        /// <summary>
        /// This constructor sets all elements to references to the 
        /// given objects
        /// </summary>
        public BuiltInStandardAttributes(
           CountryName country_name_,
           AdministrationDomainName administration_domain_name_,
           Asn1NumericString network_address_,
           Asn1PrintableString terminal_identifier_,
           PrivateDomainName private_domain_name_,
           Asn1PrintableString organization_name_,
           Asn1NumericString numeric_user_identifier_,
           PersonalName personal_name_,
           OrganizationalUnitNames organizational_unit_names_
        )
            : base()
        {
            country_name = country_name_;
            administration_domain_name = administration_domain_name_;
            network_address = network_address_;
            terminal_identifier = terminal_identifier_;
            private_domain_name = private_domain_name_;
            organization_name = organization_name_;
            numeric_user_identifier = numeric_user_identifier_;
            personal_name = personal_name_;
            organizational_unit_names = organizational_unit_names_;
        }

        /// <summary>
        /// This constructor allows primitive data to be passed for all 
        /// primitive elements.  It will create new object wrappers for 
        /// the primitive data and set other elements to references to 
        /// the given objects 
        /// </summary>
        public BuiltInStandardAttributes(CountryName country_name_,
           AdministrationDomainName administration_domain_name_,
           string network_address_,
           string terminal_identifier_,
           PrivateDomainName private_domain_name_,
           string organization_name_,
           string numeric_user_identifier_,
           PersonalName personal_name_,
           OrganizationalUnitNames organizational_unit_names_
        )
            : base()
        {
            country_name = country_name_;
            administration_domain_name = administration_domain_name_;
            network_address = new Asn1NumericString(network_address_);
            terminal_identifier = new Asn1PrintableString(terminal_identifier_);
            private_domain_name = private_domain_name_;
            organization_name = new Asn1PrintableString(organization_name_);
            numeric_user_identifier = new Asn1NumericString(numeric_user_identifier_);
            personal_name = personal_name_;
            organizational_unit_names = organizational_unit_names_;
        }

        public void Init()
        {
            country_name = null;
            administration_domain_name = null;
            network_address = null;
            terminal_identifier = null;
            private_domain_name = null;
            organization_name = null;
            numeric_user_identifier = null;
            personal_name = null;
            organizational_unit_names = null;
        }

        public override bool Equals(Object obj)
        {
            if (this == obj) return true;
            if (!(obj is BuiltInStandardAttributes)) return false;

            BuiltInStandardAttributes rhs = (BuiltInStandardAttributes)obj;

            if (country_name == null)
            {
                if (rhs.country_name != null) return false;
            }
            else
            {
                if (!country_name.Equals(rhs.country_name))
                {
                    return false;
                }
            }

            if (administration_domain_name == null)
            {
                if (rhs.administration_domain_name != null) return false;
            }
            else
            {
                if (!administration_domain_name.Equals(rhs.administration_domain_name))
                {
                    return false;
                }
            }

            if (network_address == null)
            {
                if (rhs.network_address != null) return false;
            }
            else
            {
                if (!network_address.Equals(rhs.network_address))
                {
                    return false;
                }
            }

            if (terminal_identifier == null)
            {
                if (rhs.terminal_identifier != null) return false;
            }
            else
            {
                if (!terminal_identifier.Equals(rhs.terminal_identifier))
                {
                    return false;
                }
            }

            if (private_domain_name == null)
            {
                if (rhs.private_domain_name != null) return false;
            }
            else
            {
                if (!private_domain_name.Equals(rhs.private_domain_name))
                {
                    return false;
                }
            }

            if (organization_name == null)
            {
                if (rhs.organization_name != null) return false;
            }
            else
            {
                if (!organization_name.Equals(rhs.organization_name))
                {
                    return false;
                }
            }

            if (numeric_user_identifier == null)
            {
                if (rhs.numeric_user_identifier != null) return false;
            }
            else
            {
                if (!numeric_user_identifier.Equals(rhs.numeric_user_identifier))
                {
                    return false;
                }
            }

            if (personal_name == null)
            {
                if (rhs.personal_name != null) return false;
            }
            else
            {
                if (!personal_name.Equals(rhs.personal_name))
                {
                    return false;
                }
            }

            if (organizational_unit_names == null)
            {
                if (rhs.organizational_unit_names != null) return false;
            }
            else
            {
                if (!organizational_unit_names.Equals(rhs.organizational_unit_names))
                {
                    return false;
                }
            }

            return true;
        }

        public override int GetHashCode()
        {
            int __code = 1;

            if (country_name != null) __code = 31 * __code + country_name.GetHashCode();
            if (administration_domain_name != null) __code = 31 * __code + administration_domain_name.GetHashCode();
            if (network_address != null) __code = 31 * __code + network_address.GetHashCode();
            if (terminal_identifier != null) __code = 31 * __code + terminal_identifier.GetHashCode();
            if (private_domain_name != null) __code = 31 * __code + private_domain_name.GetHashCode();
            if (organization_name != null) __code = 31 * __code + organization_name.GetHashCode();
            if (numeric_user_identifier != null) __code = 31 * __code + numeric_user_identifier.GetHashCode();
            if (personal_name != null) __code = 31 * __code + personal_name.GetHashCode();
            if (organizational_unit_names != null) __code = 31 * __code + organizational_unit_names.GetHashCode();

            return __code;
        }

        public override void Decode
           (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
        {
            int llen = (explicitTagging) ?
               MatchTag(buffer, Asn1Tag.SEQUENCE) : implicitLength;

            Init();

            // decode SEQUENCE

            Asn1BerDecodeContext _context =
               new Asn1BerDecodeContext(buffer, llen);

            IntHolder elemLen = new IntHolder();

            // decode country_name

            if (_context.MatchElemTag(Asn1Tag.APPL, Asn1Tag.CONS, 1, elemLen, false))
            {
                country_name = new CountryName();
                country_name.Decode(buffer, true, elemLen.mValue);
            }

            // decode administration_domain_name

            if (_context.MatchElemTag(Asn1Tag.APPL, Asn1Tag.CONS, 2, elemLen, false))
            {
                administration_domain_name = new AdministrationDomainName();
                administration_domain_name.Decode(buffer, true, elemLen.mValue);
            }

            // decode network_address

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true))
            {
                network_address = new Asn1NumericString();
                network_address.Decode(buffer, false, elemLen.mValue);
                if (!((network_address.Length >= 1 && network_address.Length <= 16)))
                {
                    throw new Asn1ConsVioException("network_address.Length", network_address.Length);
                }

            }

            // decode terminal_identifier

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true))
            {
                terminal_identifier = new Asn1PrintableString();
                terminal_identifier.Decode(buffer, false, elemLen.mValue);
                if (!((terminal_identifier.Length >= 1 && terminal_identifier.Length <= 24)))
                {
                    throw new Asn1ConsVioException("terminal_identifier.Length", terminal_identifier.Length);
                }

            }

            // decode private_domain_name

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true))
            {
                int offset = buffer.ByteCount;
                private_domain_name = new PrivateDomainName();
                private_domain_name.Decode(buffer, true, elemLen.mValue);
                int declen = buffer.ByteCount - offset;
                if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
                    throw new Asn1InvalidLengthException();
            }

            // decode organization_name

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true))
            {
                organization_name = new Asn1PrintableString();
                organization_name.Decode(buffer, false, elemLen.mValue);
                if (!((organization_name.Length >= 1 && organization_name.Length <= 256)))
                {
                    throw new Asn1ConsVioException("organization_name.Length", organization_name.Length);
                }

            }

            // decode numeric_user_identifier

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true))
            {
                numeric_user_identifier = new Asn1NumericString();
                numeric_user_identifier.Decode(buffer, false, elemLen.mValue);
                if (!((numeric_user_identifier.Length >= 1 && numeric_user_identifier.Length <= 32)))
                {
                    throw new Asn1ConsVioException("numeric_user_identifier.Length", numeric_user_identifier.Length);
                }

            }

            // decode personal_name

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.CONS, 5, elemLen, true))
            {
                int offset = buffer.ByteCount;
                personal_name = new PersonalName();
                personal_name.Decode(buffer, false, elemLen.mValue);
                int declen = buffer.ByteCount - offset;
                if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
                    throw new Asn1InvalidLengthException();
            }

            // decode organizational_unit_names

            if (_context.MatchElemTag(Asn1Tag.CTXT, Asn1Tag.CONS, 6, elemLen, true))
            {
                int offset = buffer.ByteCount;
                organizational_unit_names = new OrganizationalUnitNames();
                organizational_unit_names.Decode(buffer, false, elemLen.mValue);
                int declen = buffer.ByteCount - offset;
                if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
                    throw new Asn1InvalidLengthException();
            }

        }

        public override int Encode(Asn1BerEncodeBuffer buffer, bool explicitTagging)
        {
            int _aal = 0, len;

            // encode organizational_unit_names

            if (organizational_unit_names != null)
            {
                len = organizational_unit_names.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
                _aal += len;
            }

            // encode personal_name

            if (personal_name != null)
            {
                len = personal_name.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
                _aal += len;
            }

            // encode numeric_user_identifier

            if (numeric_user_identifier != null)
            {
                if (!((numeric_user_identifier.Length >= 1 && numeric_user_identifier.Length <= 32)))
                {
                    throw new Asn1ConsVioException("numeric_user_identifier.Length", numeric_user_identifier.Length);
                }

                len = numeric_user_identifier.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
                _aal += len;
            }

            // encode organization_name

            if (organization_name != null)
            {
                if (!((organization_name.Length >= 1 && organization_name.Length <= 256)))
                {
                    throw new Asn1ConsVioException("organization_name.Length", organization_name.Length);
                }

                len = organization_name.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
                _aal += len;
            }

            // encode private_domain_name

            if (private_domain_name != null)
            {
                len = private_domain_name.Encode(buffer, true);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
                _aal += len;
            }

            // encode terminal_identifier

            if (terminal_identifier != null)
            {
                if (!((terminal_identifier.Length >= 1 && terminal_identifier.Length <= 24)))
                {
                    throw new Asn1ConsVioException("terminal_identifier.Length", terminal_identifier.Length);
                }

                len = terminal_identifier.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
                _aal += len;
            }

            // encode network_address

            if (network_address != null)
            {
                if (!((network_address.Length >= 1 && network_address.Length <= 16)))
                {
                    throw new Asn1ConsVioException("network_address.Length", network_address.Length);
                }

                len = network_address.Encode(buffer, false);
                len += buffer.EncodeTagAndLength(Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
                _aal += len;
            }

            // encode administration_domain_name

            if (administration_domain_name != null)
            {
                len = administration_domain_name.Encode(buffer, true);
                _aal += len;
            }

            // encode country_name

            if (country_name != null)
            {
                len = country_name.Encode(buffer, true);
                _aal += len;
            }

            if (explicitTagging)
            {
                _aal += buffer.EncodeTagAndLength(Asn1Tag.SEQUENCE, _aal);
            }

            return (_aal);
        }

        public override void Print(System.IO.TextWriter _out,
                                    string _varName, int _level)
        {
            Indent(_out, _level);
            _out.WriteLine(_varName + " {");
            if (country_name != null) country_name.Print(_out, "country_name", _level + 1);
            if (administration_domain_name != null) administration_domain_name.Print(_out, "administration_domain_name", _level + 1);
            if (network_address != null) network_address.Print(_out, "network_address", _level + 1);
            if (terminal_identifier != null) terminal_identifier.Print(_out, "terminal_identifier", _level + 1);
            if (private_domain_name != null) private_domain_name.Print(_out, "private_domain_name", _level + 1);
            if (organization_name != null) organization_name.Print(_out, "organization_name", _level + 1);
            if (numeric_user_identifier != null) numeric_user_identifier.Print(_out, "numeric_user_identifier", _level + 1);
            if (personal_name != null) personal_name.Print(_out, "personal_name", _level + 1);
            if (organizational_unit_names != null) organizational_unit_names.Print(_out, "organizational_unit_names", _level + 1);
            Indent(_out, _level);
            _out.WriteLine("}");
        }
    }
}
