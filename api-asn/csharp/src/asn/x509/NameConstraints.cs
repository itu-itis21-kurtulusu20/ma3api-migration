// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class NameConstraints : Asn1Type {
      public GeneralSubtrees permittedSubtrees;  // optional
      public GeneralSubtrees excludedSubtrees;  // optional

      static NameConstraints ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public NameConstraints () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public NameConstraints (
         GeneralSubtrees permittedSubtrees_,
         GeneralSubtrees excludedSubtrees_
      )
         : base ()
      {
         permittedSubtrees = permittedSubtrees_;
         excludedSubtrees = excludedSubtrees_;
      }

      public void Init () {
         permittedSubtrees = null;
         excludedSubtrees = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is NameConstraints) ) return false;

         NameConstraints rhs = (NameConstraints) obj;

         if (permittedSubtrees == null) {
            if (rhs.permittedSubtrees != null) return false;
         }
         else {
            if (!permittedSubtrees.Equals(rhs.permittedSubtrees)) {
               return false;
            }
         }

         if (excludedSubtrees == null) {
            if (rhs.excludedSubtrees != null) return false;
         }
         else {
            if (!excludedSubtrees.Equals(rhs.excludedSubtrees)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (permittedSubtrees != null) __code = 31*__code + permittedSubtrees.GetHashCode();
         if (excludedSubtrees != null) __code = 31*__code + excludedSubtrees.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode permittedSubtrees

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            permittedSubtrees = new GeneralSubtrees();
            permittedSubtrees.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode excludedSubtrees

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            excludedSubtrees = new GeneralSubtrees();
            excludedSubtrees.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode excludedSubtrees

         if (excludedSubtrees != null) {
            len = excludedSubtrees.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode permittedSubtrees

         if (permittedSubtrees != null) {
            len = permittedSubtrees.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (permittedSubtrees != null) permittedSubtrees.Print (_out, "permittedSubtrees", _level+1);
         if (excludedSubtrees != null) excludedSubtrees.Print (_out, "excludedSubtrees", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
