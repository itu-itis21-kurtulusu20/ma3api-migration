// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class KRB5PrincipalName : Asn1Type {
      public Asn1GeneralString realm;
      public PrincipalName principalName;

      static KRB5PrincipalName ()
      {
         Asn1Type.SetKey2 (_KerberosValues._rtkey);
      }

      public KRB5PrincipalName () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public KRB5PrincipalName (
         Asn1GeneralString realm_,
         PrincipalName principalName_
      )
         : base ()
      {
         realm = realm_;
         principalName = principalName_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public KRB5PrincipalName (string realm_,
         PrincipalName principalName_
      )
         : base ()
      {
         realm = new Asn1GeneralString (realm_);
         principalName = principalName_;
      }

      public void Init () {
         realm = null;
         principalName = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is KRB5PrincipalName) ) return false;

         KRB5PrincipalName rhs = (KRB5PrincipalName) obj;

         if (realm == null) {
            if (rhs.realm != null) return false;
         }
         else {
            if (!realm.Equals(rhs.realm)) {
               return false;
            }
         }

         if (principalName == null) {
            if (rhs.principalName != null) return false;
         }
         else {
            if (!principalName.Equals(rhs.principalName)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (realm != null) __code = 31*__code + realm.GetHashCode();
         if (principalName != null) __code = 31*__code + principalName.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode realm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            realm = new Asn1GeneralString();
            realm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode principalName

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            principalName = new PrincipalName();
            principalName.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode principalName

         len = principalName.Encode (buffer, true);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;

         // encode realm

         len = realm.Encode (buffer, true);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (realm != null) realm.Print (_out, "realm", _level+1);
         if (principalName != null) principalName.Print (_out, "principalName", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
