// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class PhysicalDeliveryCountryName : Asn1Choice {
      // Choice element identifier constants
      public const byte _X121_DCC_CODE = 1;
      public const byte _ISO_3166_ALPHA2_CODE = 2;

      static PhysicalDeliveryCountryName ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public PhysicalDeliveryCountryName () : base()
      {
      }

      public PhysicalDeliveryCountryName (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _X121_DCC_CODE: return "x121_dcc_code";
            case _ISO_3166_ALPHA2_CODE: return "iso_3166_alpha2_code";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_x121_dcc_code (Asn1NumericString value) {
         SetElement (_X121_DCC_CODE, value);
      }

      public void Set_iso_3166_alpha2_code (Asn1PrintableString value) {
         SetElement (_ISO_3166_ALPHA2_CODE, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 18))
         {
            buffer.Reset();
            Asn1NumericString x121_dcc_code;
            x121_dcc_code = new Asn1NumericString();
            x121_dcc_code.Decode (buffer, true, len);
            if (!(x121_dcc_code.Length == 3)) {
               throw new Asn1ConsVioException ("x121_dcc_code.Length", x121_dcc_code.Length);
            }

            SetElement (_X121_DCC_CODE, x121_dcc_code);
         }
         else if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19))
         {
            buffer.Reset();
            Asn1PrintableString iso_3166_alpha2_code;
            iso_3166_alpha2_code = new Asn1PrintableString();
            iso_3166_alpha2_code.Decode (buffer, true, len);
            if (!(iso_3166_alpha2_code.Length == 2)) {
               throw new Asn1ConsVioException ("iso_3166_alpha2_code.Length", iso_3166_alpha2_code.Length);
            }

            SetElement (_ISO_3166_ALPHA2_CODE, iso_3166_alpha2_code);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode x121_dcc_code
         case _X121_DCC_CODE:
            Asn1NumericString x121_dcc_code = (Asn1NumericString) GetElement();
            if (!(x121_dcc_code.Length == 3)) {
               throw new Asn1ConsVioException ("x121_dcc_code.Length", x121_dcc_code.Length);
            }

            len = x121_dcc_code.Encode (buffer, true);
            _aal += len;
            break;

         // encode iso_3166_alpha2_code
         case _ISO_3166_ALPHA2_CODE:
            Asn1PrintableString iso_3166_alpha2_code = (Asn1PrintableString) GetElement();
            if (!(iso_3166_alpha2_code.Length == 2)) {
               throw new Asn1ConsVioException ("iso_3166_alpha2_code.Length", iso_3166_alpha2_code.Length);
            }

            len = iso_3166_alpha2_code.Encode (buffer, true);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
