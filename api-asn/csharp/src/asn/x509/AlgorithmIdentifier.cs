// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class AlgorithmIdentifier : Asn1Type {
      public Asn1ObjectIdentifier algorithm;
      public Asn1OpenType parameters;  // optional

      static AlgorithmIdentifier ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public AlgorithmIdentifier () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AlgorithmIdentifier (
         Asn1ObjectIdentifier algorithm_,
         Asn1OpenType parameters_
      )
         : base ()
      {
         algorithm = algorithm_;
         parameters = parameters_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public AlgorithmIdentifier (
         Asn1ObjectIdentifier algorithm_
      )
         : base ()
      {
         algorithm = algorithm_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public AlgorithmIdentifier (int[] algorithm_,
         Asn1OpenType parameters_
      )
         : base ()
      {
         algorithm = new Asn1ObjectIdentifier (algorithm_);
         parameters = parameters_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public AlgorithmIdentifier (
         int[] algorithm_
      )
         : base ()
      {
         algorithm = new Asn1ObjectIdentifier (algorithm_);
      }

      public void Init () {
         algorithm = null;
         parameters = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is AlgorithmIdentifier) ) return false;

         AlgorithmIdentifier rhs = (AlgorithmIdentifier) obj;

         if (algorithm == null) {
            if (rhs.algorithm != null) return false;
         }
         else {
            if (!algorithm.Equals(rhs.algorithm)) {
               return false;
            }
         }

         if (parameters == null) {
            if (rhs.parameters != null) return false;
         }
         else {
            if (!parameters.Equals(rhs.parameters)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (algorithm != null) __code = 31*__code + algorithm.GetHashCode();
         if (parameters != null) __code = 31*__code + parameters.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode algorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            algorithm = new Asn1ObjectIdentifier();
            algorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode parameters

         if (!_context.Expired ()) {
            parameters = new Asn1OpenType();
            parameters.Decode (buffer, true, 0);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode parameters

         if (parameters != null) {
            len = parameters.Encode (buffer, true);
            _aal += len;
         }

         // encode algorithm

         len = algorithm.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (algorithm != null) algorithm.Print (_out, "algorithm", _level+1);
         if (parameters != null) parameters.Print (_out, "parameters", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
