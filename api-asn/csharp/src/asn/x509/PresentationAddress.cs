// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class PresentationAddress : Asn1Type {
      public Asn1OctetString pSelector;  // optional
      public Asn1OctetString sSelector;  // optional
      public Asn1OctetString tSelector;  // optional
      public PresentationAddress_nAddresses nAddresses;

      static PresentationAddress ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public PresentationAddress () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public PresentationAddress (
         Asn1OctetString pSelector_,
         Asn1OctetString sSelector_,
         Asn1OctetString tSelector_,
         PresentationAddress_nAddresses nAddresses_
      )
         : base ()
      {
         pSelector = pSelector_;
         sSelector = sSelector_;
         tSelector = tSelector_;
         nAddresses = nAddresses_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public PresentationAddress (
         PresentationAddress_nAddresses nAddresses_
      )
         : base ()
      {
         nAddresses = nAddresses_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public PresentationAddress (byte[] pSelector_,
         byte[] sSelector_,
         byte[] tSelector_,
         PresentationAddress_nAddresses nAddresses_
      )
         : base ()
      {
         pSelector = new Asn1OctetString (pSelector_);
         sSelector = new Asn1OctetString (sSelector_);
         tSelector = new Asn1OctetString (tSelector_);
         nAddresses = nAddresses_;
      }

      public void Init () {
         pSelector = null;
         sSelector = null;
         tSelector = null;
         nAddresses = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is PresentationAddress) ) return false;

         PresentationAddress rhs = (PresentationAddress) obj;

         if (pSelector == null) {
            if (rhs.pSelector != null) return false;
         }
         else {
            if (!pSelector.Equals(rhs.pSelector)) {
               return false;
            }
         }

         if (sSelector == null) {
            if (rhs.sSelector != null) return false;
         }
         else {
            if (!sSelector.Equals(rhs.sSelector)) {
               return false;
            }
         }

         if (tSelector == null) {
            if (rhs.tSelector != null) return false;
         }
         else {
            if (!tSelector.Equals(rhs.tSelector)) {
               return false;
            }
         }

         if (nAddresses == null) {
            if (rhs.nAddresses != null) return false;
         }
         else {
            if (!nAddresses.Equals(rhs.nAddresses)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (pSelector != null) __code = 31*__code + pSelector.GetHashCode();
         if (sSelector != null) __code = 31*__code + sSelector.GetHashCode();
         if (tSelector != null) __code = 31*__code + tSelector.GetHashCode();
         if (nAddresses != null) __code = 31*__code + nAddresses.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode pSelector

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            pSelector = new Asn1OctetString();
            pSelector.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode sSelector

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            sSelector = new Asn1OctetString();
            sSelector.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode tSelector

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            tSelector = new Asn1OctetString();
            tSelector.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode nAddresses

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, false)) {
            nAddresses = new PresentationAddress_nAddresses();
            nAddresses.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode nAddresses

         len = nAddresses.Encode (buffer, true);
         _aal += len;

         // encode tSelector

         if (tSelector != null) {
            len = tSelector.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode sSelector

         if (sSelector != null) {
            len = sSelector.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode pSelector

         if (pSelector != null) {
            len = pSelector.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (pSelector != null) pSelector.Print (_out, "pSelector", _level+1);
         if (sSelector != null) sSelector.Print (_out, "sSelector", _level+1);
         if (tSelector != null) tSelector.Print (_out, "tSelector", _level+1);
         if (nAddresses != null) nAddresses.Print (_out, "nAddresses", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
