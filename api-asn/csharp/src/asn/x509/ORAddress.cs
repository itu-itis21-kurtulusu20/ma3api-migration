// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class ORAddress : Asn1Type {
      public BuiltInStandardAttributes built_in_standard_attributes;
      public BuiltInDomainDefinedAttributes built_in_domain_defined_attributes;  // optional
      public ExtensionAttributes extension_attributes;  // optional

      static ORAddress ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public ORAddress () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ORAddress (
         BuiltInStandardAttributes built_in_standard_attributes_,
         BuiltInDomainDefinedAttributes built_in_domain_defined_attributes_,
         ExtensionAttributes extension_attributes_
      )
         : base ()
      {
         built_in_standard_attributes = built_in_standard_attributes_;
         built_in_domain_defined_attributes = built_in_domain_defined_attributes_;
         extension_attributes = extension_attributes_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ORAddress (
         BuiltInStandardAttributes built_in_standard_attributes_
      )
         : base ()
      {
         built_in_standard_attributes = built_in_standard_attributes_;
      }

      public void Init () {
         built_in_standard_attributes = null;
         built_in_domain_defined_attributes = null;
         extension_attributes = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is ORAddress) ) return false;

         ORAddress rhs = (ORAddress) obj;

         if (built_in_standard_attributes == null) {
            if (rhs.built_in_standard_attributes != null) return false;
         }
         else {
            if (!built_in_standard_attributes.Equals(rhs.built_in_standard_attributes)) {
               return false;
            }
         }

         if (built_in_domain_defined_attributes == null) {
            if (rhs.built_in_domain_defined_attributes != null) return false;
         }
         else {
            if (!built_in_domain_defined_attributes.Equals(rhs.built_in_domain_defined_attributes)) {
               return false;
            }
         }

         if (extension_attributes == null) {
            if (rhs.extension_attributes != null) return false;
         }
         else {
            if (!extension_attributes.Equals(rhs.extension_attributes)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (built_in_standard_attributes != null) __code = 31*__code + built_in_standard_attributes.GetHashCode();
         if (built_in_domain_defined_attributes != null) __code = 31*__code + built_in_domain_defined_attributes.GetHashCode();
         if (extension_attributes != null) __code = 31*__code + extension_attributes.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode built_in_standard_attributes

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            built_in_standard_attributes = new BuiltInStandardAttributes();
            built_in_standard_attributes.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode built_in_domain_defined_attributes

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            built_in_domain_defined_attributes = new BuiltInDomainDefinedAttributes();
            built_in_domain_defined_attributes.Decode (buffer, true, elemLen.mValue);
         }

         // decode extension_attributes

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
            extension_attributes = new ExtensionAttributes();
            extension_attributes.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode extension_attributes

         if (extension_attributes != null) {
            len = extension_attributes.Encode (buffer, true);
            _aal += len;
         }

         // encode built_in_domain_defined_attributes

         if (built_in_domain_defined_attributes != null) {
            len = built_in_domain_defined_attributes.Encode (buffer, true);
            _aal += len;
         }

         // encode built_in_standard_attributes

         len = built_in_standard_attributes.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (built_in_standard_attributes != null) built_in_standard_attributes.Print (_out, "built_in_standard_attributes", _level+1);
         if (built_in_domain_defined_attributes != null) built_in_domain_defined_attributes.Print (_out, "built_in_domain_defined_attributes", _level+1);
         if (extension_attributes != null) extension_attributes.Print (_out, "extension_attributes", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
