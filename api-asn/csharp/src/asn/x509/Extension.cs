// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class Extension : Asn1Type {
      public Asn1ObjectIdentifier extnID;
      public Asn1Boolean critical;  // default = false
      public Asn1OctetString extnValue;

      static Extension ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public Extension () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public Extension (
         Asn1ObjectIdentifier extnID_,
         Asn1Boolean critical_,
         Asn1OctetString extnValue_
      )
         : base ()
      {
         extnID = extnID_;
         critical = critical_;
         extnValue = extnValue_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public Extension (
         Asn1ObjectIdentifier extnID_,
         Asn1OctetString extnValue_
      )
         : base ()
      {
         extnID = extnID_;
         critical = new Asn1Boolean (false);
         extnValue = extnValue_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public Extension (int[] extnID_,
         bool critical_,
         byte[] extnValue_
      )
         : base ()
      {
         extnID = new Asn1ObjectIdentifier (extnID_);
         critical = new Asn1Boolean (critical_);
         extnValue = new Asn1OctetString (extnValue_);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public Extension (
         int[] extnID_,
         byte[] extnValue_
      )
         : base ()
      {
         extnID = new Asn1ObjectIdentifier (extnID_);
         critical = new Asn1Boolean (false);
         extnValue = new Asn1OctetString (extnValue_);
      }

      public void Init () {
         extnID = null;
         critical = new Asn1Boolean (false);
         extnValue = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is Extension) ) return false;

         Extension rhs = (Extension) obj;

         if (extnID == null) {
            if (rhs.extnID != null) return false;
         }
         else {
            if (!extnID.Equals(rhs.extnID)) {
               return false;
            }
         }

         if (critical == null) {
            if (rhs.critical != null) return false;
         }
         else {
            if (!critical.Equals(rhs.critical)) {
               return false;
            }
         }

         if (extnValue == null) {
            if (rhs.extnValue != null) return false;
         }
         else {
            if (!extnValue.Equals(rhs.extnValue)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (extnID != null) __code = 31*__code + extnID.GetHashCode();
         if (critical != null) __code = 31*__code + critical.GetHashCode();
         if (extnValue != null) __code = 31*__code + extnValue.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode extnID

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            extnID = new Asn1ObjectIdentifier();
            extnID.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode critical

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
            critical = new Asn1Boolean();
            critical.Decode (buffer, true, elemLen.mValue);
         }

         // decode extnValue

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            extnValue = new Asn1OctetString();
            extnValue.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode extnValue

         len = extnValue.Encode (buffer, true);
         _aal += len;

         // encode critical

         if (!critical.Equals (false)) {
            len = critical.Encode (buffer, true);
            _aal += len;
         }

         // encode extnID

         len = extnID.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (extnID != null) extnID.Print (_out, "extnID", _level+1);
         if (critical != null) critical.Print (_out, "critical", _level+1);
         if (extnValue != null) extnValue.Print (_out, "extnValue", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
