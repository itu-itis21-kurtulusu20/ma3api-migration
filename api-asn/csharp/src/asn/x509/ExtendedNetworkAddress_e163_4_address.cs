// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class ExtendedNetworkAddress_e163_4_address : Asn1Type {
      public Asn1NumericString number;
      public Asn1NumericString sub_address;  // optional

      static ExtendedNetworkAddress_e163_4_address ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public ExtendedNetworkAddress_e163_4_address () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ExtendedNetworkAddress_e163_4_address (
         Asn1NumericString number_,
         Asn1NumericString sub_address_
      )
         : base ()
      {
         number = number_;
         sub_address = sub_address_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ExtendedNetworkAddress_e163_4_address (
         Asn1NumericString number_
      )
         : base ()
      {
         number = number_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ExtendedNetworkAddress_e163_4_address (string number_,
         string sub_address_
      )
         : base ()
      {
         number = new Asn1NumericString (number_);
         sub_address = new Asn1NumericString (sub_address_);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public ExtendedNetworkAddress_e163_4_address (
         string number_
      )
         : base ()
      {
         number = new Asn1NumericString (number_);
      }

      public void Init () {
         number = null;
         sub_address = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is ExtendedNetworkAddress_e163_4_address) ) return false;

         ExtendedNetworkAddress_e163_4_address rhs = (ExtendedNetworkAddress_e163_4_address) obj;

         if (number == null) {
            if (rhs.number != null) return false;
         }
         else {
            if (!number.Equals(rhs.number)) {
               return false;
            }
         }

         if (sub_address == null) {
            if (rhs.sub_address != null) return false;
         }
         else {
            if (!sub_address.Equals(rhs.sub_address)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (number != null) __code = 31*__code + number.GetHashCode();
         if (sub_address != null) __code = 31*__code + sub_address.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode number

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            number = new Asn1NumericString();
            number.Decode (buffer, false, elemLen.mValue);
            if (!((number.Length >= 1 && number.Length <= 15))) {
               throw new Asn1ConsVioException ("number.Length", number.Length);
            }

            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode sub_address

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            sub_address = new Asn1NumericString();
            sub_address.Decode (buffer, false, elemLen.mValue);
            if (!((sub_address.Length >= 1 && sub_address.Length <= 40))) {
               throw new Asn1ConsVioException ("sub_address.Length", sub_address.Length);
            }

            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode sub_address

         if (sub_address != null) {
            if (!((sub_address.Length >= 1 && sub_address.Length <= 40))) {
               throw new Asn1ConsVioException ("sub_address.Length", sub_address.Length);
            }

            len = sub_address.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode number

         if (!((number.Length >= 1 && number.Length <= 15))) {
            throw new Asn1ConsVioException ("number.Length", number.Length);
         }

         len = number.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (number != null) number.Print (_out, "number", _level+1);
         if (sub_address != null) sub_address.Print (_out, "sub_address", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
