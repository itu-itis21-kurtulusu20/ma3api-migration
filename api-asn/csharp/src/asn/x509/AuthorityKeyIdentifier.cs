// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class AuthorityKeyIdentifier : Asn1Type {
      public Asn1OctetString keyIdentifier;  // optional
      public GeneralNames authorityCertIssuer;  // optional
      public Asn1BigInteger authorityCertSerialNumber;  // optional

      static AuthorityKeyIdentifier ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public AuthorityKeyIdentifier () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AuthorityKeyIdentifier (
         Asn1OctetString keyIdentifier_,
         GeneralNames authorityCertIssuer_,
         Asn1BigInteger authorityCertSerialNumber_
      )
         : base ()
      {
         keyIdentifier = keyIdentifier_;
         authorityCertIssuer = authorityCertIssuer_;
         authorityCertSerialNumber = authorityCertSerialNumber_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public AuthorityKeyIdentifier (byte[] keyIdentifier_,
         GeneralNames authorityCertIssuer_,
         Asn1BigInteger authorityCertSerialNumber_
      )
         : base ()
      {
         keyIdentifier = new Asn1OctetString (keyIdentifier_);
         authorityCertIssuer = authorityCertIssuer_;
         authorityCertSerialNumber = authorityCertSerialNumber_;
      }

      public void Init () {
         keyIdentifier = null;
         authorityCertIssuer = null;
         authorityCertSerialNumber = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is AuthorityKeyIdentifier) ) return false;

         AuthorityKeyIdentifier rhs = (AuthorityKeyIdentifier) obj;

         if (keyIdentifier == null) {
            if (rhs.keyIdentifier != null) return false;
         }
         else {
            if (!keyIdentifier.Equals(rhs.keyIdentifier)) {
               return false;
            }
         }

         if (authorityCertIssuer == null) {
            if (rhs.authorityCertIssuer != null) return false;
         }
         else {
            if (!authorityCertIssuer.Equals(rhs.authorityCertIssuer)) {
               return false;
            }
         }

         if (authorityCertSerialNumber == null) {
            if (rhs.authorityCertSerialNumber != null) return false;
         }
         else {
            if (!authorityCertSerialNumber.Equals(rhs.authorityCertSerialNumber)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (keyIdentifier != null) __code = 31*__code + keyIdentifier.GetHashCode();
         if (authorityCertIssuer != null) __code = 31*__code + authorityCertIssuer.GetHashCode();
         if (authorityCertSerialNumber != null) __code = 31*__code + authorityCertSerialNumber.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode keyIdentifier

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            keyIdentifier = new Asn1OctetString();
            keyIdentifier.Decode (buffer, false, elemLen.mValue);
         }

         // decode authorityCertIssuer

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            authorityCertIssuer = new GeneralNames();
            authorityCertIssuer.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode authorityCertSerialNumber

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
            authorityCertSerialNumber = new Asn1BigInteger();
            authorityCertSerialNumber.Decode (buffer, false, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode authorityCertSerialNumber

         if (authorityCertSerialNumber != null) {
            len = authorityCertSerialNumber.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
            _aal += len;
         }

         // encode authorityCertIssuer

         if (authorityCertIssuer != null) {
            len = authorityCertIssuer.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode keyIdentifier

         if (keyIdentifier != null) {
            len = keyIdentifier.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (keyIdentifier != null) keyIdentifier.Print (_out, "keyIdentifier", _level+1);
         if (authorityCertIssuer != null) authorityCertIssuer.Print (_out, "authorityCertIssuer", _level+1);
         if (authorityCertSerialNumber != null) authorityCertSerialNumber.Print (_out, "authorityCertSerialNumber", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
