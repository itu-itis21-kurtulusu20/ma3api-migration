// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class DistributionPoint : Asn1Type {
      public DistributionPointName distributionPoint;  // optional
      public ReasonFlags reasons;  // optional
      public GeneralNames cRLIssuer;  // optional

      static DistributionPoint ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public DistributionPoint () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public DistributionPoint (
         DistributionPointName distributionPoint_,
         ReasonFlags reasons_,
         GeneralNames cRLIssuer_
      )
         : base ()
      {
         distributionPoint = distributionPoint_;
         reasons = reasons_;
         cRLIssuer = cRLIssuer_;
      }

      public void Init () {
         distributionPoint = null;
         reasons = null;
         cRLIssuer = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is DistributionPoint) ) return false;

         DistributionPoint rhs = (DistributionPoint) obj;

         if (distributionPoint == null) {
            if (rhs.distributionPoint != null) return false;
         }
         else {
            if (!distributionPoint.Equals(rhs.distributionPoint)) {
               return false;
            }
         }

         if (reasons == null) {
            if (rhs.reasons != null) return false;
         }
         else {
            if (!reasons.Equals(rhs.reasons)) {
               return false;
            }
         }

         if (cRLIssuer == null) {
            if (rhs.cRLIssuer != null) return false;
         }
         else {
            if (!cRLIssuer.Equals(rhs.cRLIssuer)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (distributionPoint != null) __code = 31*__code + distributionPoint.GetHashCode();
         if (reasons != null) __code = 31*__code + reasons.GetHashCode();
         if (cRLIssuer != null) __code = 31*__code + cRLIssuer.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode distributionPoint

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            distributionPoint = new DistributionPointName();
            distributionPoint.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode reasons

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            reasons = new ReasonFlags();
            reasons.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode cRLIssuer

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            cRLIssuer = new GeneralNames();
            cRLIssuer.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode cRLIssuer

         if (cRLIssuer != null) {
            len = cRLIssuer.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode reasons

         if (reasons != null) {
            len = reasons.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode distributionPoint

         if (distributionPoint != null) {
            len = distributionPoint.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (distributionPoint != null) distributionPoint.Print (_out, "distributionPoint", _level+1);
         if (reasons != null) reasons.Print (_out, "reasons", _level+1);
         if (cRLIssuer != null) cRLIssuer.Print (_out, "cRLIssuer", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
