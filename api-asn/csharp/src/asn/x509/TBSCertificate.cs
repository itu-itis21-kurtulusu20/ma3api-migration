// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class TBSCertificate : Asn1Type {
      public Version version;  // default = Version.v1
      public Asn1BigInteger serialNumber;
      public AlgorithmIdentifier signature;
      public Name issuer;
      public Validity validity;
      public Name subject;
      public SubjectPublicKeyInfo subjectPublicKeyInfo;
      public Asn1BitString issuerUniqueID;  // optional
      public Asn1BitString subjectUniqueID;  // optional
      public Extensions extensions;  // optional

      static TBSCertificate ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public TBSCertificate () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public TBSCertificate (
         Version version_,
         Asn1BigInteger serialNumber_,
         AlgorithmIdentifier signature_,
         Name issuer_,
         Validity validity_,
         Name subject_,
         SubjectPublicKeyInfo subjectPublicKeyInfo_,
         Asn1BitString issuerUniqueID_,
         Asn1BitString subjectUniqueID_,
         Extensions extensions_
      )
         : base ()
      {
         version = version_;
         serialNumber = serialNumber_;
         signature = signature_;
         issuer = issuer_;
         validity = validity_;
         subject = subject_;
         subjectPublicKeyInfo = subjectPublicKeyInfo_;
         issuerUniqueID = issuerUniqueID_;
         subjectUniqueID = subjectUniqueID_;
         extensions = extensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public TBSCertificate (
         Asn1BigInteger serialNumber_,
         AlgorithmIdentifier signature_,
         Name issuer_,
         Validity validity_,
         Name subject_,
         SubjectPublicKeyInfo subjectPublicKeyInfo_
      )
         : base ()
      {
         version = new Version (Version.v1);
         serialNumber = serialNumber_;
         signature = signature_;
         issuer = issuer_;
         validity = validity_;
         subject = subject_;
         subjectPublicKeyInfo = subjectPublicKeyInfo_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public TBSCertificate (long version_,
         Asn1BigInteger serialNumber_,
         AlgorithmIdentifier signature_,
         Name issuer_,
         Validity validity_,
         Name subject_,
         SubjectPublicKeyInfo subjectPublicKeyInfo_,
         Asn1BitString issuerUniqueID_,
         Asn1BitString subjectUniqueID_,
         Extensions extensions_
      )
         : base ()
      {
         version = new Version (version_);
         serialNumber = serialNumber_;
         signature = signature_;
         issuer = issuer_;
         validity = validity_;
         subject = subject_;
         subjectPublicKeyInfo = subjectPublicKeyInfo_;
         issuerUniqueID = issuerUniqueID_;
         subjectUniqueID = subjectUniqueID_;
         extensions = extensions_;
      }

      public void Init () {
         version = new Version (Version.v1);
         serialNumber = null;
         signature = null;
         issuer = null;
         validity = null;
         subject = null;
         subjectPublicKeyInfo = null;
         issuerUniqueID = null;
         subjectUniqueID = null;
         extensions = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is TBSCertificate) ) return false;

         TBSCertificate rhs = (TBSCertificate) obj;

         if (version == null) {
            if (rhs.version != null) return false;
         }
         else {
            if (!version.Equals(rhs.version)) {
               return false;
            }
         }

         if (serialNumber == null) {
            if (rhs.serialNumber != null) return false;
         }
         else {
            if (!serialNumber.Equals(rhs.serialNumber)) {
               return false;
            }
         }

         if (signature == null) {
            if (rhs.signature != null) return false;
         }
         else {
            if (!signature.Equals(rhs.signature)) {
               return false;
            }
         }

         if (issuer == null) {
            if (rhs.issuer != null) return false;
         }
         else {
            if (!issuer.Equals(rhs.issuer)) {
               return false;
            }
         }

         if (validity == null) {
            if (rhs.validity != null) return false;
         }
         else {
            if (!validity.Equals(rhs.validity)) {
               return false;
            }
         }

         if (subject == null) {
            if (rhs.subject != null) return false;
         }
         else {
            if (!subject.Equals(rhs.subject)) {
               return false;
            }
         }

         if (subjectPublicKeyInfo == null) {
            if (rhs.subjectPublicKeyInfo != null) return false;
         }
         else {
            if (!subjectPublicKeyInfo.Equals(rhs.subjectPublicKeyInfo)) {
               return false;
            }
         }

         if (issuerUniqueID == null) {
            if (rhs.issuerUniqueID != null) return false;
         }
         else {
            if (!issuerUniqueID.Equals(rhs.issuerUniqueID)) {
               return false;
            }
         }

         if (subjectUniqueID == null) {
            if (rhs.subjectUniqueID != null) return false;
         }
         else {
            if (!subjectUniqueID.Equals(rhs.subjectUniqueID)) {
               return false;
            }
         }

         if (extensions == null) {
            if (rhs.extensions != null) return false;
         }
         else {
            if (!extensions.Equals(rhs.extensions)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (version != null) __code = 31*__code + version.GetHashCode();
         if (serialNumber != null) __code = 31*__code + serialNumber.GetHashCode();
         if (signature != null) __code = 31*__code + signature.GetHashCode();
         if (issuer != null) __code = 31*__code + issuer.GetHashCode();
         if (validity != null) __code = 31*__code + validity.GetHashCode();
         if (subject != null) __code = 31*__code + subject.GetHashCode();
         if (subjectPublicKeyInfo != null) __code = 31*__code + subjectPublicKeyInfo.GetHashCode();
         if (issuerUniqueID != null) __code = 31*__code + issuerUniqueID.GetHashCode();
         if (subjectUniqueID != null) __code = 31*__code + subjectUniqueID.GetHashCode();
         if (extensions != null) __code = 31*__code + extensions.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            version = new Version();
            version.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode serialNumber

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            serialNumber = new Asn1BigInteger();
            serialNumber.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode signature

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            signature = new AlgorithmIdentifier();
            signature.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode issuer

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            issuer = new Name();
            issuer.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode validity

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            validity = new Validity();
            validity.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode subject

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            subject = new Name();
            subject.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode subjectPublicKeyInfo

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            subjectPublicKeyInfo = new SubjectPublicKeyInfo();
            subjectPublicKeyInfo.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode issuerUniqueID

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            issuerUniqueID = new Asn1BitString();
            issuerUniqueID.Decode (buffer, false, elemLen.mValue);
         }

         // decode subjectUniqueID

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
            subjectUniqueID = new Asn1BitString();
            subjectUniqueID.Decode (buffer, false, elemLen.mValue);
         }

         // decode extensions

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            extensions = new Extensions();
            extensions.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode extensions

         if (extensions != null) {
            len = extensions.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }

         // encode subjectUniqueID

         if (subjectUniqueID != null) {
            len = subjectUniqueID.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
            _aal += len;
         }

         // encode issuerUniqueID

         if (issuerUniqueID != null) {
            len = issuerUniqueID.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode subjectPublicKeyInfo

         len = subjectPublicKeyInfo.Encode (buffer, true);
         _aal += len;

         // encode subject

         len = subject.Encode (buffer, true);
         _aal += len;

         // encode validity

         len = validity.Encode (buffer, true);
         _aal += len;

         // encode issuer

         len = issuer.Encode (buffer, true);
         _aal += len;

         // encode signature

         len = signature.Encode (buffer, true);
         _aal += len;

         // encode serialNumber

         len = serialNumber.Encode (buffer, true);
         _aal += len;

         // encode version

         if (!version.Equals (Version.v1)) {
            len = version.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (serialNumber != null) serialNumber.Print (_out, "serialNumber", _level+1);
         if (signature != null) signature.Print (_out, "signature", _level+1);
         if (issuer != null) issuer.Print (_out, "issuer", _level+1);
         if (validity != null) validity.Print (_out, "validity", _level+1);
         if (subject != null) subject.Print (_out, "subject", _level+1);
         if (subjectPublicKeyInfo != null) subjectPublicKeyInfo.Print (_out, "subjectPublicKeyInfo", _level+1);
         if (issuerUniqueID != null) issuerUniqueID.Print (_out, "issuerUniqueID", _level+1);
         if (subjectUniqueID != null) subjectUniqueID.Print (_out, "subjectUniqueID", _level+1);
         if (extensions != null) extensions.Print (_out, "extensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
