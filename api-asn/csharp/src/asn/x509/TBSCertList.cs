// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class TBSCertList : Asn1Type {
      public Version version;  // optional
      public AlgorithmIdentifier signature;
      public Name issuer;
      public Time thisUpdate;
      public Time nextUpdate;  // optional
      public _SeqOfTBSCertList_revokedCertificates_element revokedCertificates;  // optional
      public Extensions crlExtensions;  // optional

      static TBSCertList ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public TBSCertList () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public TBSCertList (
         Version version_,
         AlgorithmIdentifier signature_,
         Name issuer_,
         Time thisUpdate_,
         Time nextUpdate_,
         _SeqOfTBSCertList_revokedCertificates_element revokedCertificates_,
         Extensions crlExtensions_
      )
         : base ()
      {
         version = version_;
         signature = signature_;
         issuer = issuer_;
         thisUpdate = thisUpdate_;
         nextUpdate = nextUpdate_;
         revokedCertificates = revokedCertificates_;
         crlExtensions = crlExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public TBSCertList (
         AlgorithmIdentifier signature_,
         Name issuer_,
         Time thisUpdate_
      )
         : base ()
      {
         signature = signature_;
         issuer = issuer_;
         thisUpdate = thisUpdate_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public TBSCertList (long version_,
         AlgorithmIdentifier signature_,
         Name issuer_,
         Time thisUpdate_,
         Time nextUpdate_,
         _SeqOfTBSCertList_revokedCertificates_element revokedCertificates_,
         Extensions crlExtensions_
      )
         : base ()
      {
         version = new Version (version_);
         signature = signature_;
         issuer = issuer_;
         thisUpdate = thisUpdate_;
         nextUpdate = nextUpdate_;
         revokedCertificates = revokedCertificates_;
         crlExtensions = crlExtensions_;
      }

      public void Init () {
         version = null;
         signature = null;
         issuer = null;
         thisUpdate = null;
         nextUpdate = null;
         revokedCertificates = null;
         crlExtensions = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is TBSCertList) ) return false;

         TBSCertList rhs = (TBSCertList) obj;

         if (version == null) {
            if (rhs.version != null) return false;
         }
         else {
            if (!version.Equals(rhs.version)) {
               return false;
            }
         }

         if (signature == null) {
            if (rhs.signature != null) return false;
         }
         else {
            if (!signature.Equals(rhs.signature)) {
               return false;
            }
         }

         if (issuer == null) {
            if (rhs.issuer != null) return false;
         }
         else {
            if (!issuer.Equals(rhs.issuer)) {
               return false;
            }
         }

         if (thisUpdate == null) {
            if (rhs.thisUpdate != null) return false;
         }
         else {
            if (!thisUpdate.Equals(rhs.thisUpdate)) {
               return false;
            }
         }

         if (nextUpdate == null) {
            if (rhs.nextUpdate != null) return false;
         }
         else {
            if (!nextUpdate.Equals(rhs.nextUpdate)) {
               return false;
            }
         }

         if (revokedCertificates == null) {
            if (rhs.revokedCertificates != null) return false;
         }
         else {
            if (!revokedCertificates.Equals(rhs.revokedCertificates)) {
               return false;
            }
         }

         if (crlExtensions == null) {
            if (rhs.crlExtensions != null) return false;
         }
         else {
            if (!crlExtensions.Equals(rhs.crlExtensions)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (version != null) __code = 31*__code + version.GetHashCode();
         if (signature != null) __code = 31*__code + signature.GetHashCode();
         if (issuer != null) __code = 31*__code + issuer.GetHashCode();
         if (thisUpdate != null) __code = 31*__code + thisUpdate.GetHashCode();
         if (nextUpdate != null) __code = 31*__code + nextUpdate.GetHashCode();
         if (revokedCertificates != null) __code = 31*__code + revokedCertificates.GetHashCode();
         if (crlExtensions != null) __code = 31*__code + crlExtensions.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new Version();
            version.Decode (buffer, true, elemLen.mValue);
         }

         // decode signature

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            signature = new AlgorithmIdentifier();
            signature.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode issuer

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            issuer = new Name();
            issuer.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode thisUpdate

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
            {
               thisUpdate = new Time();
               thisUpdate.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode nextUpdate

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
            {
               nextUpdate = new Time();
               nextUpdate.Decode (buffer, true, elemLen.mValue);
            }
         }

         // decode revokedCertificates

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            revokedCertificates = new _SeqOfTBSCertList_revokedCertificates_element();
            revokedCertificates.Decode (buffer, true, elemLen.mValue);
         }

         // decode crlExtensions

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            crlExtensions = new Extensions();
            crlExtensions.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crlExtensions

         if (crlExtensions != null) {
            len = crlExtensions.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode revokedCertificates

         if (revokedCertificates != null) {
            len = revokedCertificates.Encode (buffer, true);
            _aal += len;
         }

         // encode nextUpdate

         if (nextUpdate != null) {
            len = nextUpdate.Encode (buffer, true);
            _aal += len;
         }

         // encode thisUpdate

         len = thisUpdate.Encode (buffer, true);
         _aal += len;

         // encode issuer

         len = issuer.Encode (buffer, true);
         _aal += len;

         // encode signature

         len = signature.Encode (buffer, true);
         _aal += len;

         // encode version

         if (version != null) {
            len = version.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (signature != null) signature.Print (_out, "signature", _level+1);
         if (issuer != null) issuer.Print (_out, "issuer", _level+1);
         if (thisUpdate != null) thisUpdate.Print (_out, "thisUpdate", _level+1);
         if (nextUpdate != null) nextUpdate.Print (_out, "nextUpdate", _level+1);
         if (revokedCertificates != null) revokedCertificates.Print (_out, "revokedCertificates", _level+1);
         if (crlExtensions != null) crlExtensions.Print (_out, "crlExtensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
