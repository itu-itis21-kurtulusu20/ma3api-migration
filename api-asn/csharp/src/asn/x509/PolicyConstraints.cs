// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class PolicyConstraints : Asn1Type {
      public Asn1Integer requireExplicitPolicy;  // optional
      public Asn1Integer inhibitPolicyMapping;  // optional

      static PolicyConstraints ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public PolicyConstraints () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public PolicyConstraints (
         Asn1Integer requireExplicitPolicy_,
         Asn1Integer inhibitPolicyMapping_
      )
         : base ()
      {
         requireExplicitPolicy = requireExplicitPolicy_;
         inhibitPolicyMapping = inhibitPolicyMapping_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public PolicyConstraints (long requireExplicitPolicy_,
         long inhibitPolicyMapping_
      )
         : base ()
      {
         requireExplicitPolicy = new Asn1Integer (requireExplicitPolicy_);
         inhibitPolicyMapping = new Asn1Integer (inhibitPolicyMapping_);
      }

      public void Init () {
         requireExplicitPolicy = null;
         inhibitPolicyMapping = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is PolicyConstraints) ) return false;

         PolicyConstraints rhs = (PolicyConstraints) obj;

         if (requireExplicitPolicy == null) {
            if (rhs.requireExplicitPolicy != null) return false;
         }
         else {
            if (!requireExplicitPolicy.Equals(rhs.requireExplicitPolicy)) {
               return false;
            }
         }

         if (inhibitPolicyMapping == null) {
            if (rhs.inhibitPolicyMapping != null) return false;
         }
         else {
            if (!inhibitPolicyMapping.Equals(rhs.inhibitPolicyMapping)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (requireExplicitPolicy != null) __code = 31*__code + requireExplicitPolicy.GetHashCode();
         if (inhibitPolicyMapping != null) __code = 31*__code + inhibitPolicyMapping.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode requireExplicitPolicy

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            requireExplicitPolicy = new Asn1Integer();
            requireExplicitPolicy.Decode (buffer, false, elemLen.mValue);
            if (!(requireExplicitPolicy.mValue >= 0)) {
               throw new Asn1ConsVioException ("requireExplicitPolicy.mValue", requireExplicitPolicy.mValue);
            }

         }

         // decode inhibitPolicyMapping

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            inhibitPolicyMapping = new Asn1Integer();
            inhibitPolicyMapping.Decode (buffer, false, elemLen.mValue);
            if (!(inhibitPolicyMapping.mValue >= 0)) {
               throw new Asn1ConsVioException ("inhibitPolicyMapping.mValue", inhibitPolicyMapping.mValue);
            }

         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode inhibitPolicyMapping

         if (inhibitPolicyMapping != null) {
            if (!(inhibitPolicyMapping.mValue >= 0)) {
               throw new Asn1ConsVioException ("inhibitPolicyMapping.mValue", inhibitPolicyMapping.mValue);
            }

            len = inhibitPolicyMapping.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode requireExplicitPolicy

         if (requireExplicitPolicy != null) {
            if (!(requireExplicitPolicy.mValue >= 0)) {
               throw new Asn1ConsVioException ("requireExplicitPolicy.mValue", requireExplicitPolicy.mValue);
            }

            len = requireExplicitPolicy.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (requireExplicitPolicy != null) requireExplicitPolicy.Print (_out, "requireExplicitPolicy", _level+1);
         if (inhibitPolicyMapping != null) inhibitPolicyMapping.Print (_out, "inhibitPolicyMapping", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
