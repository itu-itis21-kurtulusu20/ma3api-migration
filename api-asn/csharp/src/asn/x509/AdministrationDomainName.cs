// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class AdministrationDomainName : Asn1Choice {
      public new static readonly Asn1Tag _TAG = new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 2);

      // Choice element identifier constants
      public const byte _NUMERIC = 1;
      public const byte _PRINTABLE = 2;

      static AdministrationDomainName ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public AdministrationDomainName () : base()
      {
      }

      public AdministrationDomainName (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _NUMERIC: return "numeric";
            case _PRINTABLE: return "printable";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_numeric (Asn1NumericString value) {
         SetElement (_NUMERIC, value);
      }

      public void Set_printable (Asn1PrintableString value) {
         SetElement (_PRINTABLE, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, _TAG) : implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 18))
         {
            buffer.Reset();
            Asn1NumericString numeric;
            numeric = new Asn1NumericString();
            numeric.Decode (buffer, true, len);
            if (!((numeric.Length >= 0 && numeric.Length <= 16))) {
               throw new Asn1ConsVioException ("numeric.Length", numeric.Length);
            }

            SetElement (_NUMERIC, numeric);
         }
         else if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19))
         {
            buffer.Reset();
            Asn1PrintableString printable;
            printable = new Asn1PrintableString();
            printable.Decode (buffer, true, len);
            if (!((printable.Length >= 0 && printable.Length <= 16))) {
               throw new Asn1ConsVioException ("printable.Length", printable.Length);
            }

            SetElement (_PRINTABLE, printable);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode numeric
         case _NUMERIC:
            Asn1NumericString numeric = (Asn1NumericString) GetElement();
            if (!((numeric.Length >= 0 && numeric.Length <= 16))) {
               throw new Asn1ConsVioException ("numeric.Length", numeric.Length);
            }

            len = numeric.Encode (buffer, true);
            _aal += len;
            break;

         // encode printable
         case _PRINTABLE:
            Asn1PrintableString printable = (Asn1PrintableString) GetElement();
            if (!((printable.Length >= 0 && printable.Length <= 16))) {
               throw new Asn1ConsVioException ("printable.Length", printable.Length);
            }

            len = printable.Encode (buffer, true);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         if (explicitTagging)
            _aal += buffer.EncodeTagAndLength (_TAG, _aal);

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
