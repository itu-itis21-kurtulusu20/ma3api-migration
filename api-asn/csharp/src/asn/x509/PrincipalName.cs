// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class PrincipalName : Asn1Type {
      public Asn1Integer name_type;
      public _SeqOfKerberosString name_string;

      static PrincipalName ()
      {
         Asn1Type.SetKey2 (_KerberosValues._rtkey);
      }

      public PrincipalName () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public PrincipalName (
         Asn1Integer name_type_,
         _SeqOfKerberosString name_string_
      )
         : base ()
      {
         name_type = name_type_;
         name_string = name_string_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public PrincipalName (long name_type_,
         _SeqOfKerberosString name_string_
      )
         : base ()
      {
         name_type = new Asn1Integer (name_type_);
         name_string = name_string_;
      }

      public void Init () {
         name_type = null;
         name_string = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is PrincipalName) ) return false;

         PrincipalName rhs = (PrincipalName) obj;

         if (name_type == null) {
            if (rhs.name_type != null) return false;
         }
         else {
            if (!name_type.Equals(rhs.name_type)) {
               return false;
            }
         }

         if (name_string == null) {
            if (rhs.name_string != null) return false;
         }
         else {
            if (!name_string.Equals(rhs.name_string)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (name_type != null) __code = 31*__code + name_type.GetHashCode();
         if (name_string != null) __code = 31*__code + name_string.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode name_type

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            name_type = new Asn1Integer();
            name_type.Decode (buffer, true, elemLen.mValue);
            if (!((name_type.mValue >= -2147483648 && name_type.mValue <= 2147483647))) {
               throw new Asn1ConsVioException ("name_type.mValue", name_type.mValue);
            }

         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode name_string

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            name_string = new _SeqOfKerberosString();
            name_string.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode name_string

         len = name_string.Encode (buffer, true);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;

         // encode name_type

         if (!((name_type.mValue >= -2147483648 && name_type.mValue <= 2147483647))) {
            throw new Asn1ConsVioException ("name_type.mValue", name_type.mValue);
         }

         len = name_type.Encode (buffer, true);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (name_type != null) name_type.Print (_out, "name_type", _level+1);
         if (name_string != null) name_string.Print (_out, "name_string", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
