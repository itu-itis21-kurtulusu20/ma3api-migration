// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class RoleSyntax : Asn1Type {
      public GeneralNames roleAuthority;  // optional
      public GeneralName roleName;

      static RoleSyntax ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public RoleSyntax () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public RoleSyntax (
         GeneralNames roleAuthority_,
         GeneralName roleName_
      )
         : base ()
      {
         roleAuthority = roleAuthority_;
         roleName = roleName_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public RoleSyntax (
         GeneralName roleName_
      )
         : base ()
      {
         roleName = roleName_;
      }

      public void Init () {
         roleAuthority = null;
         roleName = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is RoleSyntax) ) return false;

         RoleSyntax rhs = (RoleSyntax) obj;

         if (roleAuthority == null) {
            if (rhs.roleAuthority != null) return false;
         }
         else {
            if (!roleAuthority.Equals(rhs.roleAuthority)) {
               return false;
            }
         }

         if (roleName == null) {
            if (rhs.roleName != null) return false;
         }
         else {
            if (!roleName.Equals(rhs.roleName)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (roleAuthority != null) __code = 31*__code + roleAuthority.GetHashCode();
         if (roleName != null) __code = 31*__code + roleName.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode roleAuthority

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            roleAuthority = new GeneralNames();
            roleAuthority.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode roleName

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            roleName = new GeneralName();
            roleName.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode roleName

         len = roleName.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;

         // encode roleAuthority

         if (roleAuthority != null) {
            len = roleAuthority.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (roleAuthority != null) roleAuthority.Print (_out, "roleAuthority", _level+1);
         if (roleName != null) roleName.Print (_out, "roleName", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
