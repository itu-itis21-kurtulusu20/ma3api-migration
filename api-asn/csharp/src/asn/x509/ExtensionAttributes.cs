// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class ExtensionAttributes : Asn1Type {
      public ExtensionAttribute[] elements;

      static ExtensionAttributes ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public ExtensionAttributes () : base()
      {
         elements = null;
      }

      /// <summary>
      /// This constructor initializes the internal array to hold the 
      /// given number of elements.  The element values must be manually 
      /// populated.
      /// </summary>
      public ExtensionAttributes (int numRecords) : base()
      {
         elements = new ExtensionAttribute [numRecords];
      }

      /// <summary>
      /// This constructor initializes the internal array to hold the 
      /// given the array.  
      /// </summary>
      public ExtensionAttributes (ExtensionAttribute[] elements_) : base()
      {
         elements = elements_;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is ExtensionAttributes) ) return false;
         ExtensionAttributes rhs = (ExtensionAttributes) obj;
         ExtensionAttribute[] rhsElements = rhs.elements;

         if (elements == null && rhsElements != null) return false;

         if(elements != null && rhsElements == null) return false;

         if(elements == null && rhsElements == null) return true;

         if(elements.Length != rhsElements.Length) return false;

         for(int i = 0; i< elements.Length; i++) {
            if (elements[i] == null && rhsElements[i] != null) return false;
            if (rhsElements[i] == null && elements[i] != null) return false;
            if (rhsElements[i] == null && elements[i] == null) continue;

            if(!elements[i].Equals(rhsElements[i])) return false;
         }
         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (elements != null) {
            for (int i = 0; i < elements.Length; i ++) {
               if (elements[i] != null)__code = 31*__code + elements[i].GetHashCode();
            }
         }

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SET) : implicitLength;

         // decode SEQUENCE OF or SET OF

         System.Collections.ArrayList llist = new System.Collections.ArrayList();
         Asn1BerDecodeContext _context =
             new Asn1BerDecodeContext (buffer, llen);
         ExtensionAttribute element;
         int elemLen = 0;

         while (!_context.Expired()) {
            element = new ExtensionAttribute();
            element.Decode (buffer, true, elemLen);
            llist.Add (element);
         }

         elements = new ExtensionAttribute [llist.Count];
         Asn1Util.ToArray(llist, elements);

         if (!((elements.Length >= 1 && elements.Length <= 256))) {
            throw new Asn1ConsVioException ("elements.Length", elements.Length);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode SEQUENCE OF or SET OF

         if (!((elements.Length >= 1 && elements.Length <= 256))) {
            throw new Asn1ConsVioException ("elements.Length", elements.Length);
         }

         Asn1BerEncodeBuffer savedBuffer = buffer;
         buffer = new Asn1DerEncodeBuffer();
         Asn1OctetString[] elems = new Asn1OctetString [elements.Length];

         for (int i = elements.Length - 1; i >= 0; i--) {
            len = elements[i].Encode (buffer, true);
            _aal += len;
            elems[i] = new Asn1OctetString (buffer.MsgCopy);
            buffer.Reset();
         }

         buffer = savedBuffer;
         Array.Sort (elems);

         for (int i = elements.Length - 1; i >= 0; i--) {
            elems[i].Encode (buffer, false);
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SET, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         if (elements != null) {
            for (int i = 0; i < elements.Length; i++) {
               string name = _varName + "[" + i + "]";
               elements[i].Print (_out, name, _level);
            }
         }
      }
   }
}
