// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class AccessDescription : Asn1Type {
      public Asn1ObjectIdentifier accessMethod;
      public GeneralName accessLocation;

      static AccessDescription ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public AccessDescription () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AccessDescription (
         Asn1ObjectIdentifier accessMethod_,
         GeneralName accessLocation_
      )
         : base ()
      {
         accessMethod = accessMethod_;
         accessLocation = accessLocation_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public AccessDescription (int[] accessMethod_,
         GeneralName accessLocation_
      )
         : base ()
      {
         accessMethod = new Asn1ObjectIdentifier (accessMethod_);
         accessLocation = accessLocation_;
      }

      public void Init () {
         accessMethod = null;
         accessLocation = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is AccessDescription) ) return false;

         AccessDescription rhs = (AccessDescription) obj;

         if (accessMethod == null) {
            if (rhs.accessMethod != null) return false;
         }
         else {
            if (!accessMethod.Equals(rhs.accessMethod)) {
               return false;
            }
         }

         if (accessLocation == null) {
            if (rhs.accessLocation != null) return false;
         }
         else {
            if (!accessLocation.Equals(rhs.accessLocation)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (accessMethod != null) __code = 31*__code + accessMethod.GetHashCode();
         if (accessLocation != null) __code = 31*__code + accessLocation.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode accessMethod

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            accessMethod = new Asn1ObjectIdentifier();
            accessMethod.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode accessLocation

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
            {
               accessLocation = new GeneralName();
               accessLocation.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode accessLocation

         len = accessLocation.Encode (buffer, true);
         _aal += len;

         // encode accessMethod

         len = accessMethod.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (accessMethod != null) accessMethod.Print (_out, "accessMethod", _level+1);
         if (accessLocation != null) accessLocation.Print (_out, "accessLocation", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
