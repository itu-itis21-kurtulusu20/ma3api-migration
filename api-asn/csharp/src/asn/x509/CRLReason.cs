// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class CRLReason : Asn1Enumerated {
      private static CRLReason _unspecified = null;
      private static CRLReason _keyCompromise = null;
      private static CRLReason _cACompromise = null;
      private static CRLReason _affiliationChanged = null;
      private static CRLReason _superseded = null;
      private static CRLReason _cessationOfOperation = null;
      private static CRLReason _certificateHold = null;
      private static CRLReason _removeFromCRL = null;
      private static CRLReason _privilegeWithdrawn = null;
      private static CRLReason _aACompromise = null;

      static CRLReason ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      /// <summary>
      /// Enumerated constructor: this object must be initialized with one 
      /// of the following values:
      ///   0
      ///   1
      ///   2
      ///   3
      ///   4
      ///   5
      ///   6
      ///   8
      ///   9
      ///   10
      /// </summary>
      protected CRLReason (int value_) : base (value_)
      {
      }

      ///
      /// Singleton accessor method for unspecified.
      ///
      public static CRLReason unspecified() {
         if (_unspecified == null) _unspecified = new CRLReason (0);

         return _unspecified;
      }

      ///
      /// Singleton accessor method for keyCompromise.
      ///
      public static CRLReason keyCompromise() {
         if (_keyCompromise == null) _keyCompromise = new CRLReason (1);

         return _keyCompromise;
      }

      ///
      /// Singleton accessor method for cACompromise.
      ///
      public static CRLReason cACompromise() {
         if (_cACompromise == null) _cACompromise = new CRLReason (2);

         return _cACompromise;
      }

      ///
      /// Singleton accessor method for affiliationChanged.
      ///
      public static CRLReason affiliationChanged() {
         if (_affiliationChanged == null) _affiliationChanged = new CRLReason (3);

         return _affiliationChanged;
      }

      ///
      /// Singleton accessor method for superseded.
      ///
      public static CRLReason superseded() {
         if (_superseded == null) _superseded = new CRLReason (4);

         return _superseded;
      }

      ///
      /// Singleton accessor method for cessationOfOperation.
      ///
      public static CRLReason cessationOfOperation() {
         if (_cessationOfOperation == null) _cessationOfOperation = new CRLReason (5);

         return _cessationOfOperation;
      }

      ///
      /// Singleton accessor method for certificateHold.
      ///
      public static CRLReason certificateHold() {
         if (_certificateHold == null) _certificateHold = new CRLReason (6);

         return _certificateHold;
      }

      ///
      /// Singleton accessor method for removeFromCRL.
      ///
      public static CRLReason removeFromCRL() {
         if (_removeFromCRL == null) _removeFromCRL = new CRLReason (8);

         return _removeFromCRL;
      }

      ///
      /// Singleton accessor method for privilegeWithdrawn.
      ///
      public static CRLReason privilegeWithdrawn() {
         if (_privilegeWithdrawn == null) _privilegeWithdrawn = new CRLReason (9);

         return _privilegeWithdrawn;
      }

      ///
      /// Singleton accessor method for aACompromise.
      ///
      public static CRLReason aACompromise() {
         if (_aACompromise == null) _aACompromise = new CRLReason (10);

         return _aACompromise;
      }

      ///
      /// Returns the instance associated with the value passed.
      /// If the value passed is invalid, an exception is thrown.
      ///
      public static CRLReason ValueOf (int _value)
      {
         switch (_value) {
            case 0: return unspecified();
            case 1: return keyCompromise();
            case 2: return cACompromise();
            case 3: return affiliationChanged();
            case 4: return superseded();
            case 5: return cessationOfOperation();
            case 6: return certificateHold();
            case 8: return removeFromCRL();
            case 9: return privilegeWithdrawn();
            case 10: return aACompromise();
            default: throw new Asn1InvalidEnumException (_value);
         }
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         base.Decode (buffer, explicitTagging, implicitLength);
         if (!(mValue == 0 ||
         mValue == 1 ||
         mValue == 2 ||
         mValue == 3 ||
         mValue == 4 ||
         mValue == 5 ||
         mValue == 6 ||
         mValue == 8 ||
         mValue == 9 ||
         mValue == 10)) {
            throw new Asn1InvalidEnumException (mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         if (!(mValue == 0 ||
         mValue == 1 ||
         mValue == 2 ||
         mValue == 3 ||
         mValue == 4 ||
         mValue == 5 ||
         mValue == 6 ||
         mValue == 8 ||
         mValue == 9 ||
         mValue == 10)) {
            throw new Asn1InvalidEnumException (mValue);
         }

         int _aal = base.Encode (buffer, explicitTagging);

         return (_aal);
      }

      public override string ToString () {
         switch (mValue) {
            case 0: return ("unspecified");
            case 1: return ("keyCompromise");
            case 2: return ("cACompromise");
            case 3: return ("affiliationChanged");
            case 4: return ("superseded");
            case 5: return ("cessationOfOperation");
            case 6: return ("certificateHold");
            case 8: return ("removeFromCRL");
            case 9: return ("privilegeWithdrawn");
            case 10: return ("aACompromise");
            default: return ("UNDEFINED");
         }
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " = " + ToString());
      }
   }
}
