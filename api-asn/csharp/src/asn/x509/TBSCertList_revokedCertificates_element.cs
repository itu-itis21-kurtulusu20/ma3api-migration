// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class TBSCertList_revokedCertificates_element : Asn1Type {
      public Asn1BigInteger userCertificate;
      public Time revocationDate;
      public Extensions crlEntryExtensions;  // optional

      static TBSCertList_revokedCertificates_element ()
      {
         Asn1Type.SetKey2 (_ExplicitValues._rtkey);
      }

      public TBSCertList_revokedCertificates_element () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public TBSCertList_revokedCertificates_element (
         Asn1BigInteger userCertificate_,
         Time revocationDate_,
         Extensions crlEntryExtensions_
      )
         : base ()
      {
         userCertificate = userCertificate_;
         revocationDate = revocationDate_;
         crlEntryExtensions = crlEntryExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public TBSCertList_revokedCertificates_element (
         Asn1BigInteger userCertificate_,
         Time revocationDate_
      )
         : base ()
      {
         userCertificate = userCertificate_;
         revocationDate = revocationDate_;
      }

      public void Init () {
         userCertificate = null;
         revocationDate = null;
         crlEntryExtensions = null;
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is TBSCertList_revokedCertificates_element) ) return false;

         TBSCertList_revokedCertificates_element rhs = (TBSCertList_revokedCertificates_element) obj;

         if (userCertificate == null) {
            if (rhs.userCertificate != null) return false;
         }
         else {
            if (!userCertificate.Equals(rhs.userCertificate)) {
               return false;
            }
         }

         if (revocationDate == null) {
            if (rhs.revocationDate != null) return false;
         }
         else {
            if (!revocationDate.Equals(rhs.revocationDate)) {
               return false;
            }
         }

         if (crlEntryExtensions == null) {
            if (rhs.crlEntryExtensions != null) return false;
         }
         else {
            if (!crlEntryExtensions.Equals(rhs.crlEntryExtensions)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (userCertificate != null) __code = 31*__code + userCertificate.GetHashCode();
         if (revocationDate != null) __code = 31*__code + revocationDate.GetHashCode();
         if (crlEntryExtensions != null) __code = 31*__code + crlEntryExtensions.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode userCertificate

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            userCertificate = new Asn1BigInteger();
            userCertificate.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode revocationDate

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
            {
               revocationDate = new Time();
               revocationDate.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode crlEntryExtensions

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            crlEntryExtensions = new Extensions();
            crlEntryExtensions.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crlEntryExtensions

         if (crlEntryExtensions != null) {
            len = crlEntryExtensions.Encode (buffer, true);
            _aal += len;
         }

         // encode revocationDate

         len = revocationDate.Encode (buffer, true);
         _aal += len;

         // encode userCertificate

         len = userCertificate.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (userCertificate != null) userCertificate.Print (_out, "userCertificate", _level+1);
         if (revocationDate != null) revocationDate.Print (_out, "revocationDate", _level+1);
         if (crlEntryExtensions != null) crlEntryExtensions.Print (_out, "crlEntryExtensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
