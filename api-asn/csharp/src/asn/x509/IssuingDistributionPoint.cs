// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.x509 {

   public class IssuingDistributionPoint : Asn1Type {
      public DistributionPointName distributionPoint;  // optional
      public Asn1Boolean onlyContainsUserCerts;  // default = false
      public Asn1Boolean onlyContainsCACerts;  // default = false
      public ReasonFlags onlySomeReasons;  // optional
      public Asn1Boolean indirectCRL;  // default = false
      public Asn1Boolean onlyContainsAttributeCerts;  // default = false

      static IssuingDistributionPoint ()
      {
         Asn1Type.SetKey2 (_ImplicitValues._rtkey);
      }

      public IssuingDistributionPoint () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public IssuingDistributionPoint (
         DistributionPointName distributionPoint_,
         Asn1Boolean onlyContainsUserCerts_,
         Asn1Boolean onlyContainsCACerts_,
         ReasonFlags onlySomeReasons_,
         Asn1Boolean indirectCRL_,
         Asn1Boolean onlyContainsAttributeCerts_
      )
         : base ()
      {
         distributionPoint = distributionPoint_;
         onlyContainsUserCerts = onlyContainsUserCerts_;
         onlyContainsCACerts = onlyContainsCACerts_;
         onlySomeReasons = onlySomeReasons_;
         indirectCRL = indirectCRL_;
         onlyContainsAttributeCerts = onlyContainsAttributeCerts_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public IssuingDistributionPoint (DistributionPointName distributionPoint_,
         bool onlyContainsUserCerts_,
         bool onlyContainsCACerts_,
         ReasonFlags onlySomeReasons_,
         bool indirectCRL_,
         bool onlyContainsAttributeCerts_
      )
         : base ()
      {
         distributionPoint = distributionPoint_;
         onlyContainsUserCerts = new Asn1Boolean (onlyContainsUserCerts_);
         onlyContainsCACerts = new Asn1Boolean (onlyContainsCACerts_);
         onlySomeReasons = onlySomeReasons_;
         indirectCRL = new Asn1Boolean (indirectCRL_);
         onlyContainsAttributeCerts = new Asn1Boolean (onlyContainsAttributeCerts_);
      }

      public void Init () {
         distributionPoint = null;
         onlyContainsUserCerts = new Asn1Boolean (false);
         onlyContainsCACerts = new Asn1Boolean (false);
         onlySomeReasons = null;
         indirectCRL = new Asn1Boolean (false);
         onlyContainsAttributeCerts = new Asn1Boolean (false);
      }

      public override bool Equals( Object obj ) {
         if ( this == obj ) return true;
         if ( !(obj is IssuingDistributionPoint) ) return false;

         IssuingDistributionPoint rhs = (IssuingDistributionPoint) obj;

         if (distributionPoint == null) {
            if (rhs.distributionPoint != null) return false;
         }
         else {
            if (!distributionPoint.Equals(rhs.distributionPoint)) {
               return false;
            }
         }

         if (onlyContainsUserCerts == null) {
            if (rhs.onlyContainsUserCerts != null) return false;
         }
         else {
            if (!onlyContainsUserCerts.Equals(rhs.onlyContainsUserCerts)) {
               return false;
            }
         }

         if (onlyContainsCACerts == null) {
            if (rhs.onlyContainsCACerts != null) return false;
         }
         else {
            if (!onlyContainsCACerts.Equals(rhs.onlyContainsCACerts)) {
               return false;
            }
         }

         if (onlySomeReasons == null) {
            if (rhs.onlySomeReasons != null) return false;
         }
         else {
            if (!onlySomeReasons.Equals(rhs.onlySomeReasons)) {
               return false;
            }
         }

         if (indirectCRL == null) {
            if (rhs.indirectCRL != null) return false;
         }
         else {
            if (!indirectCRL.Equals(rhs.indirectCRL)) {
               return false;
            }
         }

         if (onlyContainsAttributeCerts == null) {
            if (rhs.onlyContainsAttributeCerts != null) return false;
         }
         else {
            if (!onlyContainsAttributeCerts.Equals(rhs.onlyContainsAttributeCerts)) {
               return false;
            }
         }

         return true;
      }

      public override int GetHashCode() {
         int __code = 1;

         if (distributionPoint != null) __code = 31*__code + distributionPoint.GetHashCode();
         if (onlyContainsUserCerts != null) __code = 31*__code + onlyContainsUserCerts.GetHashCode();
         if (onlyContainsCACerts != null) __code = 31*__code + onlyContainsCACerts.GetHashCode();
         if (onlySomeReasons != null) __code = 31*__code + onlySomeReasons.GetHashCode();
         if (indirectCRL != null) __code = 31*__code + indirectCRL.GetHashCode();
         if (onlyContainsAttributeCerts != null) __code = 31*__code + onlyContainsAttributeCerts.GetHashCode();

         return __code;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode distributionPoint

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            distributionPoint = new DistributionPointName();
            distributionPoint.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode onlyContainsUserCerts

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            onlyContainsUserCerts = new Asn1Boolean();
            onlyContainsUserCerts.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode onlyContainsCACerts

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            onlyContainsCACerts = new Asn1Boolean();
            onlyContainsCACerts.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode onlySomeReasons

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            onlySomeReasons = new ReasonFlags();
            onlySomeReasons.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode indirectCRL

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
            int offset = buffer.ByteCount;
            indirectCRL = new Asn1Boolean();
            indirectCRL.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode onlyContainsAttributeCerts

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, elemLen, true)) {
            int offset = buffer.ByteCount;
            onlyContainsAttributeCerts = new Asn1Boolean();
            onlyContainsAttributeCerts.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode onlyContainsAttributeCerts

         if (!onlyContainsAttributeCerts.Equals (false)) {
            len = onlyContainsAttributeCerts.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, len);
            _aal += len;
         }

         // encode indirectCRL

         if (!indirectCRL.Equals (false)) {
            len = indirectCRL.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
            _aal += len;
         }

         // encode onlySomeReasons

         if (onlySomeReasons != null) {
            len = onlySomeReasons.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
            _aal += len;
         }

         // encode onlyContainsCACerts

         if (!onlyContainsCACerts.Equals (false)) {
            len = onlyContainsCACerts.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
            _aal += len;
         }

         // encode onlyContainsUserCerts

         if (!onlyContainsUserCerts.Equals (false)) {
            len = onlyContainsUserCerts.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode distributionPoint

         if (distributionPoint != null) {
            len = distributionPoint.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (distributionPoint != null) distributionPoint.Print (_out, "distributionPoint", _level+1);
         if (onlyContainsUserCerts != null) onlyContainsUserCerts.Print (_out, "onlyContainsUserCerts", _level+1);
         if (onlyContainsCACerts != null) onlyContainsCACerts.Print (_out, "onlyContainsCACerts", _level+1);
         if (onlySomeReasons != null) onlySomeReasons.Print (_out, "onlySomeReasons", _level+1);
         if (indirectCRL != null) indirectCRL.Print (_out, "indirectCRL", _level+1);
         if (onlyContainsAttributeCerts != null) onlyContainsAttributeCerts.Print (_out, "onlyContainsAttributeCerts", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
