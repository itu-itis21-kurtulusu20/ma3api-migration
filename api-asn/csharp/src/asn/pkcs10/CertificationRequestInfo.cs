// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.pkcs10 {

   using Name = tr.gov.tubitak.uekae.esya.asn.x509.Name;
   using SubjectPublicKeyInfo = tr.gov.tubitak.uekae.esya.asn.x509.SubjectPublicKeyInfo;

   public class CertificationRequestInfo : Asn1Type {
      public Asn1Integer version;
      public Name subject;
      public SubjectPublicKeyInfo subjectPKInfo;
      public Attributes attributes;

      static CertificationRequestInfo ()
      {
         Asn1Type.SetKey2 (_pkcs10Values._rtkey);
      }

      public CertificationRequestInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CertificationRequestInfo (
         Asn1Integer version_,
         Name subject_,
         SubjectPublicKeyInfo subjectPKInfo_,
         Attributes attributes_
      )
         : base ()
      {
         version = version_;
         subject = subject_;
         subjectPKInfo = subjectPKInfo_;
         attributes = attributes_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public CertificationRequestInfo (long version_,
         Name subject_,
         SubjectPublicKeyInfo subjectPKInfo_,
         Attributes attributes_
      )
         : base ()
      {
         version = new Asn1Integer (version_);
         subject = subject_;
         subjectPKInfo = subjectPKInfo_;
         attributes = attributes_;
      }

      public void Init () {
         version = null;
         subject = null;
         subjectPKInfo = null;
         attributes = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new Asn1Integer();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode subject

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            subject = new Name();
            subject.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode subjectPKInfo

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            subjectPKInfo = new SubjectPublicKeyInfo();
            subjectPKInfo.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode attributes

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            attributes = new Attributes();
            attributes.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode attributes

         len = attributes.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;

         // encode subjectPKInfo

         len = subjectPKInfo.Encode (buffer, true);
         _aal += len;

         // encode subject

         len = subject.Encode (buffer, true);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (subject != null) subject.Print (_out, "subject", _level+1);
         if (subjectPKInfo != null) subjectPKInfo.Print (_out, "subjectPKInfo", _level+1);
         if (attributes != null) attributes.Print (_out, "attributes", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
