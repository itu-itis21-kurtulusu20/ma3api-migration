// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.pkixtsp {

   using GeneralName = tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;
   using Extensions = tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

   public class TSTInfo : Asn1Type {
      public TSTInfo_version version;
      public Asn1ObjectIdentifier policy;
      public MessageImprint messageImprint;
      public Asn1BigInteger serialNumber;
      public Asn1GeneralizedTime genTime;
      public Accuracy accuracy;  // optional
      public Asn1Boolean ordering;  // default = false
      public Asn1BigInteger nonce;  // optional
      public GeneralName tsa;  // optional
      public Extensions extensions;  // optional

      static TSTInfo ()
      {
         Asn1Type.SetKey2 (_pkixtspValues._rtkey);
      }

      public TSTInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public TSTInfo (
         TSTInfo_version version_,
         Asn1ObjectIdentifier policy_,
         MessageImprint messageImprint_,
         Asn1BigInteger serialNumber_,
         Asn1GeneralizedTime genTime_,
         Accuracy accuracy_,
         Asn1Boolean ordering_,
         Asn1BigInteger nonce_,
         GeneralName tsa_,
         Extensions extensions_
      )
         : base ()
      {
         version = version_;
         policy = policy_;
         messageImprint = messageImprint_;
         serialNumber = serialNumber_;
         genTime = genTime_;
         accuracy = accuracy_;
         ordering = ordering_;
         nonce = nonce_;
         tsa = tsa_;
         extensions = extensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public TSTInfo (
         TSTInfo_version version_,
         Asn1ObjectIdentifier policy_,
         MessageImprint messageImprint_,
         Asn1BigInteger serialNumber_,
         Asn1GeneralizedTime genTime_
      )
         : base ()
      {
         version = version_;
         policy = policy_;
         messageImprint = messageImprint_;
         serialNumber = serialNumber_;
         genTime = genTime_;
         ordering = new Asn1Boolean (false);
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public TSTInfo (long version_,
         int[] policy_,
         MessageImprint messageImprint_,
         Asn1BigInteger serialNumber_,
         string genTime_,
         Accuracy accuracy_,
         bool ordering_,
         Asn1BigInteger nonce_,
         GeneralName tsa_,
         Extensions extensions_
      )
         : base ()
      {
         version = new TSTInfo_version (version_);
         policy = new Asn1ObjectIdentifier (policy_);
         messageImprint = messageImprint_;
         serialNumber = serialNumber_;
         genTime = new Asn1GeneralizedTime (genTime_);
         accuracy = accuracy_;
         ordering = new Asn1Boolean (ordering_);
         nonce = nonce_;
         tsa = tsa_;
         extensions = extensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public TSTInfo (
         long version_,
         int[] policy_,
         MessageImprint messageImprint_,
         Asn1BigInteger serialNumber_,
         string genTime_
      )
         : base ()
      {
         version = new TSTInfo_version (version_);
         policy = new Asn1ObjectIdentifier (policy_);
         messageImprint = messageImprint_;
         serialNumber = serialNumber_;
         genTime = new Asn1GeneralizedTime (genTime_);
         ordering = new Asn1Boolean (false);
      }

      public void Init () {
         version = null;
         policy = null;
         messageImprint = null;
         serialNumber = null;
         genTime = null;
         accuracy = null;
         ordering = new Asn1Boolean (false);
         nonce = null;
         tsa = null;
         extensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new TSTInfo_version();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode policy

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            policy = new Asn1ObjectIdentifier();
            policy.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode messageImprint

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            messageImprint = new MessageImprint();
            messageImprint.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode serialNumber

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            serialNumber = new Asn1BigInteger();
            serialNumber.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode genTime

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
            genTime = new Asn1GeneralizedTime (true);
            genTime.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode accuracy

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            accuracy = new Accuracy();
            accuracy.Decode (buffer, true, elemLen.mValue);
         }

         // decode ordering

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
            ordering = new Asn1Boolean();
            ordering.Decode (buffer, true, elemLen.mValue);
         }

         // decode nonce

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            nonce = new Asn1BigInteger();
            nonce.Decode (buffer, true, elemLen.mValue);
         }

         // decode tsa

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            tsa = new GeneralName();
            tsa.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode extensions

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            extensions = new Extensions();
            extensions.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode extensions

         if (extensions != null) {
            len = extensions.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode tsa

         if (tsa != null) {
            len = tsa.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode nonce

         if (nonce != null) {
            len = nonce.Encode (buffer, true);
            _aal += len;
         }

         // encode ordering

         if (!ordering.Equals (false)) {
            len = ordering.Encode (buffer, true);
            _aal += len;
         }

         // encode accuracy

         if (accuracy != null) {
            len = accuracy.Encode (buffer, true);
            _aal += len;
         }

         // encode genTime

         len = genTime.Encode (buffer, true);
         _aal += len;

         // encode serialNumber

         len = serialNumber.Encode (buffer, true);
         _aal += len;

         // encode messageImprint

         len = messageImprint.Encode (buffer, true);
         _aal += len;

         // encode policy

         len = policy.Encode (buffer, true);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (policy != null) policy.Print (_out, "policy", _level+1);
         if (messageImprint != null) messageImprint.Print (_out, "messageImprint", _level+1);
         if (serialNumber != null) serialNumber.Print (_out, "serialNumber", _level+1);
         if (genTime != null) genTime.Print (_out, "genTime", _level+1);
         if (accuracy != null) accuracy.Print (_out, "accuracy", _level+1);
         if (ordering != null) ordering.Print (_out, "ordering", _level+1);
         if (nonce != null) nonce.Print (_out, "nonce", _level+1);
         if (tsa != null) tsa.Print (_out, "tsa", _level+1);
         if (extensions != null) extensions.Print (_out, "extensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
