// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.pkixtsp {

   public class Accuracy : Asn1Type {
      public Asn1Integer seconds;  // optional
      public Asn1Integer millis;  // optional
      public Asn1Integer micros;  // optional

      static Accuracy ()
      {
         Asn1Type.SetKey2 (_pkixtspValues._rtkey);
      }

      public Accuracy () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public Accuracy (
         Asn1Integer seconds_,
         Asn1Integer millis_,
         Asn1Integer micros_
      )
         : base ()
      {
         seconds = seconds_;
         millis = millis_;
         micros = micros_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public Accuracy (long seconds_,
         long millis_,
         long micros_
      )
         : base ()
      {
         seconds = new Asn1Integer (seconds_);
         millis = new Asn1Integer (millis_);
         micros = new Asn1Integer (micros_);
      }

      public void Init () {
         seconds = null;
         millis = null;
         micros = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode seconds

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            seconds = new Asn1Integer();
            seconds.Decode (buffer, true, elemLen.mValue);
         }

         // decode millis

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            millis = new Asn1Integer();
            millis.Decode (buffer, false, elemLen.mValue);
            if (!((millis.mValue >= 1 && millis.mValue <= 999))) {
               throw new Asn1ConsVioException ("millis.mValue", millis.mValue);
            }

            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode micros

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            micros = new Asn1Integer();
            micros.Decode (buffer, false, elemLen.mValue);
            if (!((micros.mValue >= 1 && micros.mValue <= 999))) {
               throw new Asn1ConsVioException ("micros.mValue", micros.mValue);
            }

            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode micros

         if (micros != null) {
            if (!((micros.mValue >= 1 && micros.mValue <= 999))) {
               throw new Asn1ConsVioException ("micros.mValue", micros.mValue);
            }

            len = micros.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode millis

         if (millis != null) {
            if (!((millis.mValue >= 1 && millis.mValue <= 999))) {
               throw new Asn1ConsVioException ("millis.mValue", millis.mValue);
            }

            len = millis.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
         }

         // encode seconds

         if (seconds != null) {
            len = seconds.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (seconds != null) seconds.Print (_out, "seconds", _level+1);
         if (millis != null) millis.Print (_out, "millis", _level+1);
         if (micros != null) micros.Print (_out, "micros", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
