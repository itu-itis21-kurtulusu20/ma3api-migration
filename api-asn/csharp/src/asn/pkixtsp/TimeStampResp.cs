// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.pkixtsp {

   using ContentInfo = tr.gov.tubitak.uekae.esya.asn.cms.ContentInfo;

   public class TimeStampResp : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.pkixtsp.PKIStatusInfo status;
      public ContentInfo timeStampToken;  // optional

      static TimeStampResp ()
      {
         Asn1Type.SetKey2 (_pkixtspValues._rtkey);
      }

      public TimeStampResp () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public TimeStampResp (
         tr.gov.tubitak.uekae.esya.asn.pkixtsp.PKIStatusInfo status_,
         ContentInfo timeStampToken_
      )
         : base ()
      {
         status = status_;
         timeStampToken = timeStampToken_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public TimeStampResp (
         tr.gov.tubitak.uekae.esya.asn.pkixtsp.PKIStatusInfo status_
      )
         : base ()
      {
         status = status_;
      }

      public void Init () {
         status = null;
         timeStampToken = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode status

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            status = new PKIStatusInfo();
            status.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode timeStampToken

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            timeStampToken = new ContentInfo();
            timeStampToken.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode timeStampToken

         if (timeStampToken != null) {
            len = timeStampToken.Encode (buffer, true);
            _aal += len;
         }

         // encode status

         len = status.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (status != null) status.Print (_out, "status", _level+1);
         if (timeStampToken != null) timeStampToken.Print (_out, "timeStampToken", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
