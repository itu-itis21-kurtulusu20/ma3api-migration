// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   public class AAControls : Asn1Type {
      public Asn1Integer pathLenConstraint;  // optional
      public AttrSpec permittedAttrs;  // optional
      public AttrSpec excludedAttrs;  // optional
      public Asn1Boolean permitUnSpecified;  // default = true

      static AAControls ()
      {
         Asn1Type.SetKey2 (_attrcertValues._rtkey);
      }

      public AAControls () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AAControls (
         Asn1Integer pathLenConstraint_,
         AttrSpec permittedAttrs_,
         AttrSpec excludedAttrs_,
         Asn1Boolean permitUnSpecified_
      )
         : base ()
      {
         pathLenConstraint = pathLenConstraint_;
         permittedAttrs = permittedAttrs_;
         excludedAttrs = excludedAttrs_;
         permitUnSpecified = permitUnSpecified_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public AAControls (long pathLenConstraint_,
         AttrSpec permittedAttrs_,
         AttrSpec excludedAttrs_,
         bool permitUnSpecified_
      )
         : base ()
      {
         pathLenConstraint = new Asn1Integer (pathLenConstraint_);
         permittedAttrs = permittedAttrs_;
         excludedAttrs = excludedAttrs_;
         permitUnSpecified = new Asn1Boolean (permitUnSpecified_);
      }

      public void Init () {
         pathLenConstraint = null;
         permittedAttrs = null;
         excludedAttrs = null;
         permitUnSpecified = new Asn1Boolean (true);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode pathLenConstraint

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            pathLenConstraint = new Asn1Integer();
            pathLenConstraint.Decode (buffer, true, elemLen.mValue);
            if (!(pathLenConstraint.mValue >= 0)) {
               throw new Asn1ConsVioException ("pathLenConstraint.mValue", pathLenConstraint.mValue);
            }

         }

         // decode permittedAttrs

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            permittedAttrs = new AttrSpec();
            permittedAttrs.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode excludedAttrs

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            excludedAttrs = new AttrSpec();
            excludedAttrs.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode permitUnSpecified

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
            permitUnSpecified = new Asn1Boolean();
            permitUnSpecified.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode permitUnSpecified

         if (!permitUnSpecified.Equals (true)) {
            len = permitUnSpecified.Encode (buffer, true);
            _aal += len;
         }

         // encode excludedAttrs

         if (excludedAttrs != null) {
            len = excludedAttrs.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode permittedAttrs

         if (permittedAttrs != null) {
            len = permittedAttrs.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode pathLenConstraint

         if (pathLenConstraint != null) {
            if (!(pathLenConstraint.mValue >= 0)) {
               throw new Asn1ConsVioException ("pathLenConstraint.mValue", pathLenConstraint.mValue);
            }

            len = pathLenConstraint.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (pathLenConstraint != null) pathLenConstraint.Print (_out, "pathLenConstraint", _level+1);
         if (permittedAttrs != null) permittedAttrs.Print (_out, "permittedAttrs", _level+1);
         if (excludedAttrs != null) excludedAttrs.Print (_out, "excludedAttrs", _level+1);
         if (permitUnSpecified != null) permitUnSpecified.Print (_out, "permitUnSpecified", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
