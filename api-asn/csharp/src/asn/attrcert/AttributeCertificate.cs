// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class AttributeCertificate : Asn1Type {
      public AttributeCertificateInfo acinfo;
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier signatureAlgorithm;
      public Asn1BitString signatureValue;

      static AttributeCertificate ()
      {
         Asn1Type.SetKey2 (_attrcertValues._rtkey);
      }

      public AttributeCertificate () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AttributeCertificate (
         AttributeCertificateInfo acinfo_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier signatureAlgorithm_,
         Asn1BitString signatureValue_
      )
         : base ()
      {
         acinfo = acinfo_;
         signatureAlgorithm = signatureAlgorithm_;
         signatureValue = signatureValue_;
      }

      public void Init () {
         acinfo = null;
         signatureAlgorithm = null;
         signatureValue = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode acinfo

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            acinfo = new AttributeCertificateInfo();
            acinfo.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode signatureAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            signatureAlgorithm = new AlgorithmIdentifier();
            signatureAlgorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode signatureValue

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
            signatureValue = new Asn1BitString();
            signatureValue.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode signatureValue

         len = signatureValue.Encode (buffer, true);
         _aal += len;

         // encode signatureAlgorithm

         len = signatureAlgorithm.Encode (buffer, true);
         _aal += len;

         // encode acinfo

         len = acinfo.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (acinfo != null) acinfo.Print (_out, "acinfo", _level+1);
         if (signatureAlgorithm != null) signatureAlgorithm.Print (_out, "signatureAlgorithm", _level+1);
         if (signatureValue != null) signatureValue.Print (_out, "signatureValue", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
