// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   public class Clearance : Asn1Type {
      public Asn1ObjectIdentifier policyId;
      public ClassList classList;  // optional
      public _SetOfSecurityCategory securityCategories;  // optional

      static Clearance ()
      {
         Asn1Type.SetKey2 (_attrcertValues._rtkey);
      }

      public Clearance () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public Clearance (
         Asn1ObjectIdentifier policyId_,
         ClassList classList_,
         _SetOfSecurityCategory securityCategories_
      )
         : base ()
      {
         policyId = policyId_;
         classList = classList_;
         securityCategories = securityCategories_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public Clearance (
         Asn1ObjectIdentifier policyId_
      )
         : base ()
      {
         policyId = policyId_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public Clearance (int[] policyId_,
         ClassList classList_,
         _SetOfSecurityCategory securityCategories_
      )
         : base ()
      {
         policyId = new Asn1ObjectIdentifier (policyId_);
         classList = classList_;
         securityCategories = securityCategories_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public Clearance (
         int[] policyId_
      )
         : base ()
      {
         policyId = new Asn1ObjectIdentifier (policyId_);
      }

      public void Init () {
         policyId = null;
         classList = null;
         securityCategories = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode policyId

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            policyId = new Asn1ObjectIdentifier();
            policyId.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode classList

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
            classList = new ClassList();
            classList.Decode (buffer, true, elemLen.mValue);
         }

         // decode securityCategories

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
            securityCategories = new _SetOfSecurityCategory();
            securityCategories.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode securityCategories

         if (securityCategories != null) {
            len = securityCategories.Encode (buffer, true);
            _aal += len;
         }

         // encode classList

         if (classList != null) {
            len = classList.Encode (buffer, true);
            _aal += len;
         }

         // encode policyId

         len = policyId.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (policyId != null) policyId.Print (_out, "policyId", _level+1);
         if (classList != null) classList.Print (_out, "classList", _level+1);
         if (securityCategories != null) securityCategories.Print (_out, "securityCategories", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
