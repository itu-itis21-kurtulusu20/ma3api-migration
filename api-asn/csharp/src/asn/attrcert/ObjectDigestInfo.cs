// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class ObjectDigestInfo : Asn1Type {
      public ObjectDigestInfo_digestedObjectType digestedObjectType;
      public Asn1ObjectIdentifier otherObjectTypeID;  // optional
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier digestAlgorithm;
      public Asn1BitString objectDigest;

      static ObjectDigestInfo ()
      {
         Asn1Type.SetKey2 (_attrcertValues._rtkey);
      }

      public ObjectDigestInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ObjectDigestInfo (
         ObjectDigestInfo_digestedObjectType digestedObjectType_,
         Asn1ObjectIdentifier otherObjectTypeID_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier digestAlgorithm_,
         Asn1BitString objectDigest_
      )
         : base ()
      {
         digestedObjectType = digestedObjectType_;
         otherObjectTypeID = otherObjectTypeID_;
         digestAlgorithm = digestAlgorithm_;
         objectDigest = objectDigest_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ObjectDigestInfo (
         ObjectDigestInfo_digestedObjectType digestedObjectType_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier digestAlgorithm_,
         Asn1BitString objectDigest_
      )
         : base ()
      {
         digestedObjectType = digestedObjectType_;
         digestAlgorithm = digestAlgorithm_;
         objectDigest = objectDigest_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ObjectDigestInfo (ObjectDigestInfo_digestedObjectType digestedObjectType_,
         int[] otherObjectTypeID_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier digestAlgorithm_,
         Asn1BitString objectDigest_
      )
         : base ()
      {
         digestedObjectType = digestedObjectType_;
         otherObjectTypeID = new Asn1ObjectIdentifier (otherObjectTypeID_);
         digestAlgorithm = digestAlgorithm_;
         objectDigest = objectDigest_;
      }

      public void Init () {
         digestedObjectType = null;
         otherObjectTypeID = null;
         digestAlgorithm = null;
         objectDigest = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode digestedObjectType

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
            int tval = buffer.DecodeEnumValue (ObjectDigestInfo_digestedObjectType._TAG, true, elemLen.mValue);
            digestedObjectType = ObjectDigestInfo_digestedObjectType.ValueOf (tval);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode otherObjectTypeID

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            otherObjectTypeID = new Asn1ObjectIdentifier();
            otherObjectTypeID.Decode (buffer, true, elemLen.mValue);
         }

         // decode digestAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            digestAlgorithm = new AlgorithmIdentifier();
            digestAlgorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode objectDigest

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
            objectDigest = new Asn1BitString();
            objectDigest.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode objectDigest

         len = objectDigest.Encode (buffer, true);
         _aal += len;

         // encode digestAlgorithm

         len = digestAlgorithm.Encode (buffer, true);
         _aal += len;

         // encode otherObjectTypeID

         if (otherObjectTypeID != null) {
            len = otherObjectTypeID.Encode (buffer, true);
            _aal += len;
         }

         // encode digestedObjectType

         len = digestedObjectType.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (digestedObjectType != null) digestedObjectType.Print (_out, "digestedObjectType", _level+1);
         if (otherObjectTypeID != null) otherObjectTypeID.Print (_out, "otherObjectTypeID", _level+1);
         if (digestAlgorithm != null) digestAlgorithm.Print (_out, "digestAlgorithm", _level+1);
         if (objectDigest != null) objectDigest.Print (_out, "objectDigest", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
