// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   using GeneralName = tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;

   public class ACClearAttrs : Asn1Type {
      public GeneralName acIssuer;
      public Asn1Integer acSerial;
      public _SeqOfAttribute attrs;

      static ACClearAttrs ()
      {
         Asn1Type.SetKey2 (_attrcertValues._rtkey);
      }

      public ACClearAttrs () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ACClearAttrs (
         GeneralName acIssuer_,
         Asn1Integer acSerial_,
         _SeqOfAttribute attrs_
      )
         : base ()
      {
         acIssuer = acIssuer_;
         acSerial = acSerial_;
         attrs = attrs_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ACClearAttrs (GeneralName acIssuer_,
         long acSerial_,
         _SeqOfAttribute attrs_
      )
         : base ()
      {
         acIssuer = acIssuer_;
         acSerial = new Asn1Integer (acSerial_);
         attrs = attrs_;
      }

      public void Init () {
         acIssuer = null;
         acSerial = null;
         attrs = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode acIssuer

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 6) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 7) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 8))
            {
               acIssuer = new GeneralName();
               acIssuer.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode acSerial

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            acSerial = new Asn1Integer();
            acSerial.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode attrs

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            attrs = new _SeqOfAttribute();
            attrs.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode attrs

         len = attrs.Encode (buffer, true);
         _aal += len;

         // encode acSerial

         len = acSerial.Encode (buffer, true);
         _aal += len;

         // encode acIssuer

         len = acIssuer.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (acIssuer != null) acIssuer.Print (_out, "acIssuer", _level+1);
         if (acSerial != null) acSerial.Print (_out, "acSerial", _level+1);
         if (attrs != null) attrs.Print (_out, "attrs", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
