// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.2.5, Date: 25-Mar-2010.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   using GeneralNames = tr.gov.tubitak.uekae.esya.asn.x509.GeneralNames;

   public class AttributeCertificateInfoV1_subject : Asn1Choice {
      // Choice element identifier constants
      public const byte _BASECERTIFICATEID = 1;
      public const byte _SUBJECTNAME = 2;

      public AttributeCertificateInfoV1_subject () : base()
      {
         SetKey (_attrcertValues._rtkey);
      }

      public AttributeCertificateInfoV1_subject (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
         SetKey (_attrcertValues._rtkey);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _BASECERTIFICATEID: return "baseCertificateID";
            case _SUBJECTNAME: return "subjectName";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_baseCertificateID (IssuerSerial value) {
         SetElement (_BASECERTIFICATEID, value);
      }

      public void Set_subjectName (GeneralNames value) {
         SetElement (_SUBJECTNAME, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            IssuerSerial baseCertificateID = new IssuerSerial();
            SetElement (_BASECERTIFICATEID, baseCertificateID);
            element.Decode (buffer, false, len);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
         {
            GeneralNames subjectName = new GeneralNames();
            SetElement (_SUBJECTNAME, subjectName);
            element.Decode (buffer, false, len);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode baseCertificateID
         case _BASECERTIFICATEID:
            IssuerSerial baseCertificateID = (IssuerSerial) GetElement();
            len = baseCertificateID.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
            break;

         // encode subjectName
         case _SUBJECTNAME:
            GeneralNames subjectName = (GeneralNames) GetElement();
            len = subjectName.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
