// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.2.5, Date: 25-Mar-2010.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   using GeneralNames = tr.gov.tubitak.uekae.esya.asn.x509.GeneralNames;
   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
   using Extensions = tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

   public class AttributeCertificateInfoV1 : Asn1Type {
      public AttCertVersionV1 version;  // default = AttCertVersionV1.v1
      public AttributeCertificateInfoV1_subject subject;
      public GeneralNames issuer;
      public AlgorithmIdentifier signature;
      public Asn1BigInteger serialNumber;
      public AttCertValidityPeriod attCertValidityPeriod;
      public _SeqOfAttribute attributes;
      public Asn1BitString issuerUniqueID;  // optional
      public Extensions extensions;  // optional

      public AttributeCertificateInfoV1 () : base()
      {
         Init();
         SetKey (_attrcertValues._rtkey);
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AttributeCertificateInfoV1 (
         AttCertVersionV1 version_,
         AttributeCertificateInfoV1_subject subject_,
         GeneralNames issuer_,
         AlgorithmIdentifier signature_,
         Asn1BigInteger serialNumber_,
         AttCertValidityPeriod attCertValidityPeriod_,
         _SeqOfAttribute attributes_,
         Asn1BitString issuerUniqueID_,
         Extensions extensions_
      )
         : base ()
      {
         version = version_;
         subject = subject_;
         issuer = issuer_;
         signature = signature_;
         serialNumber = serialNumber_;
         attCertValidityPeriod = attCertValidityPeriod_;
         attributes = attributes_;
         issuerUniqueID = issuerUniqueID_;
         extensions = extensions_;
         SetKey (_attrcertValues._rtkey);
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public AttributeCertificateInfoV1 (
         AttributeCertificateInfoV1_subject subject_,
         GeneralNames issuer_,
         AlgorithmIdentifier signature_,
         Asn1BigInteger serialNumber_,
         AttCertValidityPeriod attCertValidityPeriod_,
         _SeqOfAttribute attributes_
      )
         : base ()
      {
         version = new AttCertVersionV1 (AttCertVersionV1.v1);
         subject = subject_;
         issuer = issuer_;
         signature = signature_;
         serialNumber = serialNumber_;
         attCertValidityPeriod = attCertValidityPeriod_;
         attributes = attributes_;
         SetKey (_attrcertValues._rtkey);
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public AttributeCertificateInfoV1 (long version_,
         AttributeCertificateInfoV1_subject subject_,
         GeneralNames issuer_,
         AlgorithmIdentifier signature_,
         Asn1BigInteger serialNumber_,
         AttCertValidityPeriod attCertValidityPeriod_,
         _SeqOfAttribute attributes_,
         Asn1BitString issuerUniqueID_,
         Extensions extensions_
      )
         : base ()
      {
         version = new AttCertVersionV1 (version_);
         subject = subject_;
         issuer = issuer_;
         signature = signature_;
         serialNumber = serialNumber_;
         attCertValidityPeriod = attCertValidityPeriod_;
         attributes = attributes_;
         issuerUniqueID = issuerUniqueID_;
         extensions = extensions_;
         SetKey (_attrcertValues._rtkey);
      }

      public void Init () {
         version = new AttCertVersionV1 (AttCertVersionV1.v1);
         subject = null;
         issuer = null;
         signature = null;
         serialNumber = null;
         attCertValidityPeriod = null;
         attributes = null;
         issuerUniqueID = null;
         extensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new AttCertVersionV1();
            version.Decode (buffer, true, elemLen.mValue);
         }

         // decode subject

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
            {
               subject = new AttributeCertificateInfoV1_subject();
               subject.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode issuer

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            issuer = new GeneralNames();
            issuer.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode signature

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            signature = new AlgorithmIdentifier();
            signature.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode serialNumber

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            serialNumber = new Asn1BigInteger();
            serialNumber.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode attCertValidityPeriod

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            attCertValidityPeriod = new AttCertValidityPeriod();
            attCertValidityPeriod.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode attributes

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            attributes = new _SeqOfAttribute();
            attributes.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode issuerUniqueID

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
            issuerUniqueID = new Asn1BitString();
            issuerUniqueID.Decode (buffer, true, elemLen.mValue);
         }

         // decode extensions

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            extensions = new Extensions();
            extensions.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode extensions

         if (extensions != null) {
            len = extensions.Encode (buffer, true);
            _aal += len;
         }

         // encode issuerUniqueID

         if (issuerUniqueID != null) {
            len = issuerUniqueID.Encode (buffer, true);
            _aal += len;
         }

         // encode attributes

         len = attributes.Encode (buffer, true);
         _aal += len;

         // encode attCertValidityPeriod

         len = attCertValidityPeriod.Encode (buffer, true);
         _aal += len;

         // encode serialNumber

         len = serialNumber.Encode (buffer, true);
         _aal += len;

         // encode signature

         len = signature.Encode (buffer, true);
         _aal += len;

         // encode issuer

         len = issuer.Encode (buffer, true);
         _aal += len;

         // encode subject

         len = subject.Encode (buffer, true);
         _aal += len;

         // encode version

         if (!version.Equals (AttCertVersionV1.v1)) {
            len = version.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (subject != null) subject.Print (_out, "subject", _level+1);
         if (issuer != null) issuer.Print (_out, "issuer", _level+1);
         if (signature != null) signature.Print (_out, "signature", _level+1);
         if (serialNumber != null) serialNumber.Print (_out, "serialNumber", _level+1);
         if (attCertValidityPeriod != null) attCertValidityPeriod.Print (_out, "attCertValidityPeriod", _level+1);
         if (attributes != null) attributes.Print (_out, "attributes", _level+1);
         if (issuerUniqueID != null) issuerUniqueID.Print (_out, "issuerUniqueID", _level+1);
         if (extensions != null) extensions.Print (_out, "extensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
