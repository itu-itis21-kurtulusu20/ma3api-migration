// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   using GeneralNames = tr.gov.tubitak.uekae.esya.asn.x509.GeneralNames;

   public class Holder : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.attrcert.IssuerSerial baseCertificateID;  // optional
      public GeneralNames entityName;  // optional
      public ObjectDigestInfo objectDigestInfo;  // optional

      static Holder ()
      {
         Asn1Type.SetKey2 (_attrcertValues._rtkey);
      }

      public Holder () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public Holder (
         tr.gov.tubitak.uekae.esya.asn.attrcert.IssuerSerial baseCertificateID_,
         GeneralNames entityName_,
         ObjectDigestInfo objectDigestInfo_
      )
         : base ()
      {
         baseCertificateID = baseCertificateID_;
         entityName = entityName_;
         objectDigestInfo = objectDigestInfo_;
      }

      public void Init () {
         baseCertificateID = null;
         entityName = null;
         objectDigestInfo = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode baseCertificateID

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            baseCertificateID = new IssuerSerial();
            baseCertificateID.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode entityName

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            entityName = new GeneralNames();
            entityName.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode objectDigestInfo

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            objectDigestInfo = new ObjectDigestInfo();
            objectDigestInfo.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode objectDigestInfo

         if (objectDigestInfo != null) {
            len = objectDigestInfo.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode entityName

         if (entityName != null) {
            len = entityName.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode baseCertificateID

         if (baseCertificateID != null) {
            len = baseCertificateID.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (baseCertificateID != null) baseCertificateID.Print (_out, "baseCertificateID", _level+1);
         if (entityName != null) entityName.Print (_out, "entityName", _level+1);
         if (objectDigestInfo != null) objectDigestInfo.Print (_out, "objectDigestInfo", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
