// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.attrcert {

   using GeneralName = tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;

   public class Target : Asn1Choice {
      // Choice element identifier constants
      public const byte _TARGETNAME = 1;
      public const byte _TARGETGROUP = 2;
      public const byte _TARGETCERT = 3;

      static Target ()
      {
         Asn1Type.SetKey2 (_attrcertValues._rtkey);
      }

      public Target () : base()
      {
      }

      public Target (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _TARGETNAME: return "targetName";
            case _TARGETGROUP: return "targetGroup";
            case _TARGETCERT: return "targetCert";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_targetName (GeneralName value) {
         SetElement (_TARGETNAME, value);
      }

      public void Set_targetGroup (GeneralName value) {
         SetElement (_TARGETGROUP, value);
      }

      public void Set_targetCert (TargetCert value) {
         SetElement (_TARGETCERT, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            GeneralName targetName;
            targetName = new GeneralName();
            targetName.Decode (buffer, false, len);
            SetElement (_TARGETNAME, targetName);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
         {
            GeneralName targetGroup;
            targetGroup = new GeneralName();
            targetGroup.Decode (buffer, false, len);
            SetElement (_TARGETGROUP, targetGroup);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
         {
            TargetCert targetCert;
            targetCert = new TargetCert();
            targetCert.Decode (buffer, false, len);
            SetElement (_TARGETCERT, targetCert);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode targetName
         case _TARGETNAME:
            GeneralName targetName = (GeneralName) GetElement();
            len = targetName.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
            break;

         // encode targetGroup
         case _TARGETGROUP:
            GeneralName targetGroup = (GeneralName) GetElement();
            len = targetGroup.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         // encode targetCert
         case _TARGETCERT:
            TargetCert targetCert = (TargetCert) GetElement();
            len = targetCert.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
