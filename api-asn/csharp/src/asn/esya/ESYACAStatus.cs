// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.esya {

   public class ESYACAStatus : Asn1Type {
      public ESYACAStatus_initializationStatus initializationStatus;
      public ESYACAStatus_certificationServiceStatus certificationServiceStatus;
      public ESYACAStatus_crlServiceStatus crlServiceStatus;

      static ESYACAStatus ()
      {
         Asn1Type.SetKey2 (_esyaValues._rtkey);
      }

      public ESYACAStatus () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ESYACAStatus (
         ESYACAStatus_initializationStatus initializationStatus_,
         ESYACAStatus_certificationServiceStatus certificationServiceStatus_,
         ESYACAStatus_crlServiceStatus crlServiceStatus_
      )
         : base ()
      {
         initializationStatus = initializationStatus_;
         certificationServiceStatus = certificationServiceStatus_;
         crlServiceStatus = crlServiceStatus_;
      }

      public void Init () {
         initializationStatus = null;
         certificationServiceStatus = null;
         crlServiceStatus = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode initializationStatus

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
            int tval = buffer.DecodeEnumValue (ESYACAStatus_initializationStatus._TAG, true, elemLen.mValue);
            initializationStatus = ESYACAStatus_initializationStatus.ValueOf (tval);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode certificationServiceStatus

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
            int tval = buffer.DecodeEnumValue (ESYACAStatus_certificationServiceStatus._TAG, true, elemLen.mValue);
            certificationServiceStatus = ESYACAStatus_certificationServiceStatus.ValueOf (tval);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode crlServiceStatus

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
            int tval = buffer.DecodeEnumValue (ESYACAStatus_crlServiceStatus._TAG, true, elemLen.mValue);
            crlServiceStatus = ESYACAStatus_crlServiceStatus.ValueOf (tval);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crlServiceStatus

         len = crlServiceStatus.Encode (buffer, true);
         _aal += len;

         // encode certificationServiceStatus

         len = certificationServiceStatus.Encode (buffer, true);
         _aal += len;

         // encode initializationStatus

         len = initializationStatus.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (initializationStatus != null) initializationStatus.Print (_out, "initializationStatus", _level+1);
         if (certificationServiceStatus != null) certificationServiceStatus.Print (_out, "certificationServiceStatus", _level+1);
         if (crlServiceStatus != null) crlServiceStatus.Print (_out, "crlServiceStatus", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
