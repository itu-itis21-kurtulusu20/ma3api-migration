// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.esya {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class ESYASimAnahtari : Asn1Type {
      public Asn1Integer anahNo;
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier hashAlg;
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier simetrikAlg;
      public Asn1OctetString anahtarBytes;

      static ESYASimAnahtari ()
      {
         Asn1Type.SetKey2 (_esyaValues._rtkey);
      }

      public ESYASimAnahtari () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ESYASimAnahtari (
         Asn1Integer anahNo_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier hashAlg_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier simetrikAlg_,
         Asn1OctetString anahtarBytes_
      )
         : base ()
      {
         anahNo = anahNo_;
         hashAlg = hashAlg_;
         simetrikAlg = simetrikAlg_;
         anahtarBytes = anahtarBytes_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ESYASimAnahtari (long anahNo_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier hashAlg_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier simetrikAlg_,
         byte[] anahtarBytes_
      )
         : base ()
      {
         anahNo = new Asn1Integer (anahNo_);
         hashAlg = hashAlg_;
         simetrikAlg = simetrikAlg_;
         anahtarBytes = new Asn1OctetString (anahtarBytes_);
      }

      public void Init () {
         anahNo = null;
         hashAlg = null;
         simetrikAlg = null;
         anahtarBytes = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode anahNo

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            anahNo = new Asn1Integer();
            anahNo.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode hashAlg

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            hashAlg = new AlgorithmIdentifier();
            hashAlg.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode simetrikAlg

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            simetrikAlg = new AlgorithmIdentifier();
            simetrikAlg.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode anahtarBytes

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            anahtarBytes = new Asn1OctetString();
            anahtarBytes.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode anahtarBytes

         len = anahtarBytes.Encode (buffer, true);
         _aal += len;

         // encode simetrikAlg

         len = simetrikAlg.Encode (buffer, true);
         _aal += len;

         // encode hashAlg

         len = hashAlg.Encode (buffer, true);
         _aal += len;

         // encode anahNo

         len = anahNo.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (anahNo != null) anahNo.Print (_out, "anahNo", _level+1);
         if (hashAlg != null) hashAlg.Print (_out, "hashAlg", _level+1);
         if (simetrikAlg != null) simetrikAlg.Print (_out, "simetrikAlg", _level+1);
         if (anahtarBytes != null) anahtarBytes.Print (_out, "anahtarBytes", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
