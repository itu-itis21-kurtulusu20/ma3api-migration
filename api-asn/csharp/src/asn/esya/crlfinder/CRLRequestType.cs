// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.esya.crlfinder {

   public class CRLRequestType : Asn1Choice {
      // Choice element identifier constants
      public const byte _CRLNO = 1;
      public const byte _CRLHASH = 2;
      public const byte _ISSUEDNOTBEFORE = 3;
      public const byte _ISSUEDNOTAFTER = 4;

      static CRLRequestType ()
      {
         Asn1Type.SetKey2 (_crlfinderValues._rtkey);
      }

      public CRLRequestType () : base()
      {
      }

      public CRLRequestType (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _CRLNO: return "crlNo";
            case _CRLHASH: return "crlHash";
            case _ISSUEDNOTBEFORE: return "issuedNotBefore";
            case _ISSUEDNOTAFTER: return "issuedNotAfter";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_crlNo (Asn1BigInteger value) {
         SetElement (_CRLNO, value);
      }

      public void Set_crlHash (CRLHash value) {
         SetElement (_CRLHASH, value);
      }

      public void Set_issuedNotBefore (Asn1GeneralizedTime value) {
         SetElement (_ISSUEDNOTBEFORE, value);
      }

      public void Set_issuedNotAfter (Asn1GeneralizedTime value) {
         SetElement (_ISSUEDNOTAFTER, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0)) {
            Asn1BigInteger crlNo;
            crlNo = new Asn1BigInteger();
            crlNo.Decode (buffer, false, len);
            SetElement (_CRLNO, crlNo);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
         {
            CRLHash crlHash;
            crlHash = new CRLHash();
            crlHash.Decode (buffer, false, len);
            SetElement (_CRLHASH, crlHash);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
         {
            Asn1GeneralizedTime issuedNotBefore;
            issuedNotBefore = new Asn1GeneralizedTime (true);
            issuedNotBefore.Decode (buffer, false, len);
            SetElement (_ISSUEDNOTBEFORE, issuedNotBefore);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
         {
            Asn1GeneralizedTime issuedNotAfter;
            issuedNotAfter = new Asn1GeneralizedTime (true);
            issuedNotAfter.Decode (buffer, false, len);
            SetElement (_ISSUEDNOTAFTER, issuedNotAfter);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode crlNo
         case _CRLNO:
            Asn1BigInteger crlNo = (Asn1BigInteger) GetElement();
            len = crlNo.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
            break;

         // encode crlHash
         case _CRLHASH:
            CRLHash crlHash = (CRLHash) GetElement();
            len = crlHash.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         // encode issuedNotBefore
         case _ISSUEDNOTBEFORE:
            Asn1GeneralizedTime issuedNotBefore = (Asn1GeneralizedTime) GetElement();
            len = issuedNotBefore.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
            _aal += len;
            break;

         // encode issuedNotAfter
         case _ISSUEDNOTAFTER:
            Asn1GeneralizedTime issuedNotAfter = (Asn1GeneralizedTime) GetElement();
            len = issuedNotAfter.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
