// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.esya.crlfinder {

   using IssuerAndSerialNumber = tr.gov.tubitak.uekae.esya.asn.cms.IssuerAndSerialNumber;
   using Name = tr.gov.tubitak.uekae.esya.asn.x509.Name;

   public class CRLRequest : Asn1Type {
      public IssuerAndSerialNumber issuerSerialOfIssuer;  // optional
      public Name crlIssuer;  // optional
      public CRLRequestType crlRequestType;

      static CRLRequest ()
      {
         Asn1Type.SetKey2 (_crlfinderValues._rtkey);
      }

      public CRLRequest () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CRLRequest (
         IssuerAndSerialNumber issuerSerialOfIssuer_,
         Name crlIssuer_,
         CRLRequestType crlRequestType_
      )
         : base ()
      {
         issuerSerialOfIssuer = issuerSerialOfIssuer_;
         crlIssuer = crlIssuer_;
         crlRequestType = crlRequestType_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public CRLRequest (
         CRLRequestType crlRequestType_
      )
         : base ()
      {
         crlRequestType = crlRequestType_;
      }

      public void Init () {
         issuerSerialOfIssuer = null;
         crlIssuer = null;
         crlRequestType = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode issuerSerialOfIssuer

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            issuerSerialOfIssuer = new IssuerAndSerialNumber();
            issuerSerialOfIssuer.Decode (buffer, true, elemLen.mValue);
         }

         // decode crlIssuer

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 10, elemLen, true)) {
            int offset = buffer.ByteCount;
            crlIssuer = new Name();
            crlIssuer.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode crlRequestType

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 3))
            {
               crlRequestType = new CRLRequestType();
               crlRequestType.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crlRequestType

         len = crlRequestType.Encode (buffer, true);
         _aal += len;

         // encode crlIssuer

         if (crlIssuer != null) {
            len = crlIssuer.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 10, len);
            _aal += len;
         }

         // encode issuerSerialOfIssuer

         if (issuerSerialOfIssuer != null) {
            len = issuerSerialOfIssuer.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (issuerSerialOfIssuer != null) issuerSerialOfIssuer.Print (_out, "issuerSerialOfIssuer", _level+1);
         if (crlIssuer != null) crlIssuer.Print (_out, "crlIssuer", _level+1);
         if (crlRequestType != null) crlRequestType.Print (_out, "crlRequestType", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
