// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.esya {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
   using DigestInfo = tr.gov.tubitak.uekae.esya.asn.cms.DigestInfo;

   public class ESYAPasswordRecipientInfo : Asn1Type {
      public Asn1Integer version;
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyDerivationAlgorithm;  // optional
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm;
      public Asn1OctetString encryptedKey;
      public DigestInfo keyHash;

      static ESYAPasswordRecipientInfo ()
      {
         Asn1Type.SetKey2 (_esyaValues._rtkey);
      }

      public ESYAPasswordRecipientInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ESYAPasswordRecipientInfo (
         Asn1Integer version_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyDerivationAlgorithm_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         Asn1OctetString encryptedKey_,
         DigestInfo keyHash_
      )
         : base ()
      {
         version = version_;
         keyDerivationAlgorithm = keyDerivationAlgorithm_;
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         encryptedKey = encryptedKey_;
         keyHash = keyHash_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ESYAPasswordRecipientInfo (
         Asn1Integer version_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         Asn1OctetString encryptedKey_,
         DigestInfo keyHash_
      )
         : base ()
      {
         version = version_;
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         encryptedKey = encryptedKey_;
         keyHash = keyHash_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ESYAPasswordRecipientInfo (long version_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyDerivationAlgorithm_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         byte[] encryptedKey_,
         DigestInfo keyHash_
      )
         : base ()
      {
         version = new Asn1Integer (version_);
         keyDerivationAlgorithm = keyDerivationAlgorithm_;
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         encryptedKey = new Asn1OctetString (encryptedKey_);
         keyHash = keyHash_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public ESYAPasswordRecipientInfo (
         long version_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         byte[] encryptedKey_,
         DigestInfo keyHash_
      )
         : base ()
      {
         version = new Asn1Integer (version_);
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         encryptedKey = new Asn1OctetString (encryptedKey_);
         keyHash = keyHash_;
      }

      public void Init () {
         version = null;
         keyDerivationAlgorithm = null;
         keyEncryptionAlgorithm = null;
         encryptedKey = null;
         keyHash = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new Asn1Integer();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode keyDerivationAlgorithm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            keyDerivationAlgorithm = new AlgorithmIdentifier();
            keyDerivationAlgorithm.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode keyEncryptionAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            keyEncryptionAlgorithm = new AlgorithmIdentifier();
            keyEncryptionAlgorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode encryptedKey

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            encryptedKey = new Asn1OctetString();
            encryptedKey.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode keyHash

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            keyHash = new DigestInfo();
            keyHash.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode keyHash

         len = keyHash.Encode (buffer, true);
         _aal += len;

         // encode encryptedKey

         len = encryptedKey.Encode (buffer, true);
         _aal += len;

         // encode keyEncryptionAlgorithm

         len = keyEncryptionAlgorithm.Encode (buffer, true);
         _aal += len;

         // encode keyDerivationAlgorithm

         if (keyDerivationAlgorithm != null) {
            len = keyDerivationAlgorithm.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (keyDerivationAlgorithm != null) keyDerivationAlgorithm.Print (_out, "keyDerivationAlgorithm", _level+1);
         if (keyEncryptionAlgorithm != null) keyEncryptionAlgorithm.Print (_out, "keyEncryptionAlgorithm", _level+1);
         if (encryptedKey != null) encryptedKey.Print (_out, "encryptedKey", _level+1);
         if (keyHash != null) keyHash.Print (_out, "keyHash", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
