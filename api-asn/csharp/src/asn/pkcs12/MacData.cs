// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.pkcs12 {

   using DigestInfo = tr.gov.tubitak.uekae.esya.asn.cms.DigestInfo;

   public class MacData : Asn1Type {
      public DigestInfo mac;
      public Asn1OctetString macSalt;
      public Asn1Integer iterations;  // default = 1

      static MacData ()
      {
         Asn1Type.SetKey2 (_pkcs12Values._rtkey);
      }

      public MacData () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public MacData (
         DigestInfo mac_,
         Asn1OctetString macSalt_,
         Asn1Integer iterations_
      )
         : base ()
      {
         mac = mac_;
         macSalt = macSalt_;
         iterations = iterations_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public MacData (
         DigestInfo mac_,
         Asn1OctetString macSalt_
      )
         : base ()
      {
         mac = mac_;
         macSalt = macSalt_;
         iterations = new Asn1Integer (1);
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public MacData (DigestInfo mac_,
         byte[] macSalt_,
         long iterations_
      )
         : base ()
      {
         mac = mac_;
         macSalt = new Asn1OctetString (macSalt_);
         iterations = new Asn1Integer (iterations_);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public MacData (
         DigestInfo mac_,
         byte[] macSalt_
      )
         : base ()
      {
         mac = mac_;
         macSalt = new Asn1OctetString (macSalt_);
         iterations = new Asn1Integer (1);
      }

      public void Init () {
         mac = null;
         macSalt = null;
         iterations = new Asn1Integer (1);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode mac

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            mac = new DigestInfo();
            mac.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode macSalt

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            macSalt = new Asn1OctetString();
            macSalt.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode iterations

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            iterations = new Asn1Integer();
            iterations.Decode (buffer, true, elemLen.mValue);
         }

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode iterations

         len = iterations.Encode (buffer, true);
         _aal += len;

         // encode macSalt

         len = macSalt.Encode (buffer, true);
         _aal += len;

         // encode mac

         len = mac.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (mac != null) mac.Print (_out, "mac", _level+1);
         if (macSalt != null) macSalt.Print (_out, "macSalt", _level+1);
         if (iterations != null) iterations.Print (_out, "iterations", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
