// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.pkcs12 {

   using ContentInfo = tr.gov.tubitak.uekae.esya.asn.cms.ContentInfo;

   public class PFX : Asn1Type {
      public PFX_version version;
      public ContentInfo authSafe;
      public MacData macData;  // optional

      static PFX ()
      {
         Asn1Type.SetKey2 (_pkcs12Values._rtkey);
      }

      public PFX () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public PFX (
         PFX_version version_,
         ContentInfo authSafe_,
         MacData macData_
      )
         : base ()
      {
         version = version_;
         authSafe = authSafe_;
         macData = macData_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public PFX (
         PFX_version version_,
         ContentInfo authSafe_
      )
         : base ()
      {
         version = version_;
         authSafe = authSafe_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public PFX (long version_,
         ContentInfo authSafe_,
         MacData macData_
      )
         : base ()
      {
         version = new PFX_version (version_);
         authSafe = authSafe_;
         macData = macData_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public PFX (
         long version_,
         ContentInfo authSafe_
      )
         : base ()
      {
         version = new PFX_version (version_);
         authSafe = authSafe_;
      }

      public void Init () {
         version = null;
         authSafe = null;
         macData = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new PFX_version();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode authSafe

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            authSafe = new ContentInfo();
            authSafe.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode macData

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            macData = new MacData();
            macData.Decode (buffer, true, elemLen.mValue);
         }

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode macData

         if (macData != null) {
            len = macData.Encode (buffer, true);
            _aal += len;
         }

         // encode authSafe

         len = authSafe.Encode (buffer, true);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (authSafe != null) authSafe.Print (_out, "authSafe", _level+1);
         if (macData != null) macData.Print (_out, "macData", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
