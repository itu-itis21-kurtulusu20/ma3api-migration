// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.etsiqc {

   public class MonetaryValue : Asn1Type {
      public Iso4217CurrencyCode currency;
      public Asn1Integer amount;
      public Asn1Integer exponent;

      static MonetaryValue ()
      {
         Asn1Type.SetKey2 (_etsiqcValues._rtkey);
      }

      public MonetaryValue () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public MonetaryValue (
         Iso4217CurrencyCode currency_,
         Asn1Integer amount_,
         Asn1Integer exponent_
      )
         : base ()
      {
         currency = currency_;
         amount = amount_;
         exponent = exponent_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public MonetaryValue (Iso4217CurrencyCode currency_,
         long amount_,
         long exponent_
      )
         : base ()
      {
         currency = currency_;
         amount = new Asn1Integer (amount_);
         exponent = new Asn1Integer (exponent_);
      }

      public void Init () {
         currency = null;
         amount = null;
         exponent = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode currency

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19))
            {
               currency = new Iso4217CurrencyCode();
               currency.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode amount

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            amount = new Asn1Integer();
            amount.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode exponent

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            exponent = new Asn1Integer();
            exponent.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode exponent

         len = exponent.Encode (buffer, true);
         _aal += len;

         // encode amount

         len = amount.Encode (buffer, true);
         _aal += len;

         // encode currency

         len = currency.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (currency != null) currency.Print (_out, "currency", _level+1);
         if (amount != null) amount.Print (_out, "amount", _level+1);
         if (exponent != null) exponent.Print (_out, "exponent", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
