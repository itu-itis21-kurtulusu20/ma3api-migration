// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.PKIXqualified {

   public class SemanticsInformation : Asn1Type {
      public Asn1ObjectIdentifier semanticsIndentifier;  // optional
      public NameRegistrationAuthorities nameRegistrationAuthorities;  // optional

      static SemanticsInformation ()
      {
         Asn1Type.SetKey2 (_PKIXqualifiedValues._rtkey);
      }

      public SemanticsInformation () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public SemanticsInformation (
         Asn1ObjectIdentifier semanticsIndentifier_,
         NameRegistrationAuthorities nameRegistrationAuthorities_
      )
         : base ()
      {
         semanticsIndentifier = semanticsIndentifier_;
         nameRegistrationAuthorities = nameRegistrationAuthorities_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public SemanticsInformation (int[] semanticsIndentifier_,
         NameRegistrationAuthorities nameRegistrationAuthorities_
      )
         : base ()
      {
         semanticsIndentifier = new Asn1ObjectIdentifier (semanticsIndentifier_);
         nameRegistrationAuthorities = nameRegistrationAuthorities_;
      }

      public void Init () {
         semanticsIndentifier = null;
         nameRegistrationAuthorities = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode semanticsIndentifier

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            semanticsIndentifier = new Asn1ObjectIdentifier();
            semanticsIndentifier.Decode (buffer, true, elemLen.mValue);
         }

         // decode nameRegistrationAuthorities

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            nameRegistrationAuthorities = new NameRegistrationAuthorities();
            nameRegistrationAuthorities.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode nameRegistrationAuthorities

         if (nameRegistrationAuthorities != null) {
            len = nameRegistrationAuthorities.Encode (buffer, true);
            _aal += len;
         }

         // encode semanticsIndentifier

         if (semanticsIndentifier != null) {
            len = semanticsIndentifier.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (semanticsIndentifier != null) semanticsIndentifier.Print (_out, "semanticsIndentifier", _level+1);
         if (nameRegistrationAuthorities != null) nameRegistrationAuthorities.Print (_out, "nameRegistrationAuthorities", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
