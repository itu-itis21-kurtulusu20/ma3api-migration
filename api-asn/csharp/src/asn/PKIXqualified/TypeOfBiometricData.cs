// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.PKIXqualified {

   public class TypeOfBiometricData : Asn1Choice {
      // Choice element identifier constants
      public const byte _PREDEFINEDBIOMETRICTYPE = 1;
      public const byte _BIOMETRICDATAOID = 2;

      static TypeOfBiometricData ()
      {
         Asn1Type.SetKey2 (_PKIXqualifiedValues._rtkey);
      }

      public TypeOfBiometricData () : base()
      {
      }

      public TypeOfBiometricData (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _PREDEFINEDBIOMETRICTYPE: return "predefinedBiometricType";
            case _BIOMETRICDATAOID: return "biometricDataOid";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_predefinedBiometricType (PredefinedBiometricType value) {
         SetElement (_PREDEFINEDBIOMETRICTYPE, value);
      }

      public void Set_biometricDataOid (Asn1ObjectIdentifier value) {
         SetElement (_BIOMETRICDATAOID, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2))
         {
            buffer.Reset();
            PredefinedBiometricType predefinedBiometricType;
            predefinedBiometricType = new PredefinedBiometricType();
            predefinedBiometricType.Decode (buffer, true, len);
            SetElement (_PREDEFINEDBIOMETRICTYPE, predefinedBiometricType);
         }
         else if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))
         {
            buffer.Reset();
            Asn1ObjectIdentifier biometricDataOid;
            biometricDataOid = new Asn1ObjectIdentifier();
            biometricDataOid.Decode (buffer, true, len);
            SetElement (_BIOMETRICDATAOID, biometricDataOid);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode predefinedBiometricType
         case _PREDEFINEDBIOMETRICTYPE:
            PredefinedBiometricType predefinedBiometricType = (PredefinedBiometricType) GetElement();
            len = predefinedBiometricType.Encode (buffer, true);
            _aal += len;
            break;

         // encode biometricDataOid
         case _BIOMETRICDATAOID:
            Asn1ObjectIdentifier biometricDataOid = (Asn1ObjectIdentifier) GetElement();
            len = biometricDataOid.Encode (buffer, true);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
