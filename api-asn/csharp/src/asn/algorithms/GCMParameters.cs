// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 16-Jan-2019.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.algorithms {

   public class GCMParameters : Asn1Type {
      public Asn1OctetString aes_nonce;
      public Asn1Integer aes_ICVlen;  // default = 12

      static GCMParameters ()
      {
         Asn1Type.SetKey2 (_algorithmsValues._rtkey);
      }

      public GCMParameters () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public GCMParameters (
         Asn1OctetString aes_nonce_,
         Asn1Integer aes_ICVlen_
      )
         : base ()
      {
         aes_nonce = aes_nonce_;
         aes_ICVlen = aes_ICVlen_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public GCMParameters (
         Asn1OctetString aes_nonce_
      )
         : base ()
      {
         aes_nonce = aes_nonce_;
         aes_ICVlen = new Asn1Integer (12);
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public GCMParameters (byte[] aes_nonce_,
         long aes_ICVlen_
      )
         : base ()
      {
         aes_nonce = new Asn1OctetString (aes_nonce_);
         aes_ICVlen = new Asn1Integer (aes_ICVlen_);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public GCMParameters (
         byte[] aes_nonce_
      )
         : base ()
      {
         aes_nonce = new Asn1OctetString (aes_nonce_);
         aes_ICVlen = new Asn1Integer (12);
      }

      public void Init () {
         aes_nonce = null;
         aes_ICVlen = new Asn1Integer (12);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode aes_nonce

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            aes_nonce = new Asn1OctetString();
            aes_nonce.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode aes_ICVlen

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            aes_ICVlen = new Asn1Integer();
            aes_ICVlen.Decode (buffer, true, elemLen.mValue);
            if (!((aes_ICVlen.mValue == 12 || aes_ICVlen.mValue == 13 || aes_ICVlen.mValue == 14 || aes_ICVlen.mValue == 15 || aes_ICVlen.mValue == 16))) {
               throw new Asn1ConsVioException ("aes_ICVlen.mValue", aes_ICVlen.mValue);
            }

         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode aes_ICVlen

         if (!aes_ICVlen.Equals (12)) {
            if (!((aes_ICVlen.mValue == 12 || aes_ICVlen.mValue == 13 || aes_ICVlen.mValue == 14 || aes_ICVlen.mValue == 15 || aes_ICVlen.mValue == 16))) {
               throw new Asn1ConsVioException ("aes_ICVlen.mValue", aes_ICVlen.mValue);
            }

            len = aes_ICVlen.Encode (buffer, true);
            _aal += len;
         }

         // encode aes_nonce

         len = aes_nonce.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (aes_nonce != null) aes_nonce.Print (_out, "aes_nonce", _level+1);
         if (aes_ICVlen != null) aes_ICVlen.Print (_out, "aes_ICVlen", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
