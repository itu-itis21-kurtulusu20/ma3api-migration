// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.algorithms {

   public class EcpkParameters : Asn1Choice {
      // Choice element identifier constants
      public const byte _IMPLICITLYCA = 1;
      public const byte _NAMEDCURVE = 2;
      public const byte _ECPARAMETERS = 3;

      static EcpkParameters ()
      {
         Asn1Type.SetKey2 (_algorithmsValues._rtkey);
      }

      public EcpkParameters () : base()
      {
      }

      public EcpkParameters (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _IMPLICITLYCA: return "implicitlyCA";
            case _NAMEDCURVE: return "namedCurve";
            case _ECPARAMETERS: return "ecParameters";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_implicitlyCA () {
         SetElement (_IMPLICITLYCA, Asn1Null.NULL_VALUE);
      }

      public void Set_namedCurve (Asn1ObjectIdentifier value) {
         SetElement (_NAMEDCURVE, value);
      }

      public void Set_ecParameters (ECParameters value) {
         SetElement (_ECPARAMETERS, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 5))
         {
            buffer.Reset();
            Asn1Null implicitlyCA;
            implicitlyCA = new Asn1Null();
            implicitlyCA.Decode (buffer, true, len);
            SetElement (_IMPLICITLYCA, implicitlyCA);
         }
         else if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))
         {
            buffer.Reset();
            Asn1ObjectIdentifier namedCurve;
            namedCurve = new Asn1ObjectIdentifier();
            namedCurve.Decode (buffer, true, len);
            SetElement (_NAMEDCURVE, namedCurve);
         }
         else if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
         {
            buffer.Reset();
            ECParameters ecParameters;
            ecParameters = new ECParameters();
            ecParameters.Decode (buffer, true, len);
            SetElement (_ECPARAMETERS, ecParameters);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode implicitlyCA
         case _IMPLICITLYCA:
            Asn1Null implicitlyCA = (Asn1Null) GetElement();
            len = implicitlyCA.Encode (buffer, true);
            _aal += len;
            break;

         // encode namedCurve
         case _NAMEDCURVE:
            Asn1ObjectIdentifier namedCurve = (Asn1ObjectIdentifier) GetElement();
            len = namedCurve.Encode (buffer, true);
            _aal += len;
            break;

         // encode ecParameters
         case _ECPARAMETERS:
            ECParameters ecParameters = (ECParameters) GetElement();
            len = ecParameters.Encode (buffer, true);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
