// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.algorithms {

   public class Curve : Asn1Type {
      public Asn1OctetString a;
      public Asn1OctetString b;
      public Asn1BitString seed;  // optional

      static Curve ()
      {
         Asn1Type.SetKey2 (_algorithmsValues._rtkey);
      }

      public Curve () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public Curve (
         Asn1OctetString a_,
         Asn1OctetString b_,
         Asn1BitString seed_
      )
         : base ()
      {
         a = a_;
         b = b_;
         seed = seed_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public Curve (
         Asn1OctetString a_,
         Asn1OctetString b_
      )
         : base ()
      {
         a = a_;
         b = b_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public Curve (byte[] a_,
         byte[] b_,
         Asn1BitString seed_
      )
         : base ()
      {
         a = new Asn1OctetString (a_);
         b = new Asn1OctetString (b_);
         seed = seed_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public Curve (
         byte[] a_,
         byte[] b_
      )
         : base ()
      {
         a = new Asn1OctetString (a_);
         b = new Asn1OctetString (b_);
      }

      public void Init () {
         a = null;
         b = null;
         seed = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode a

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            a = new Asn1OctetString();
            a.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode b

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            b = new Asn1OctetString();
            b.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode seed

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
            seed = new Asn1BitString();
            seed.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode seed

         if (seed != null) {
            len = seed.Encode (buffer, true);
            _aal += len;
         }

         // encode b

         len = b.Encode (buffer, true);
         _aal += len;

         // encode a

         len = a.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (a != null) a.Print (_out, "a", _level+1);
         if (b != null) b.Print (_out, "b", _level+1);
         if (seed != null) seed.Print (_out, "seed", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
