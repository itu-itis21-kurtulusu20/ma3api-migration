// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.algorithms {

   public class Characteristic_two : Asn1Type {
      public Asn1Integer m;
      public Asn1ObjectIdentifier basis;
      public Asn1OpenType parameters;

      static Characteristic_two ()
      {
         Asn1Type.SetKey2 (_algorithmsValues._rtkey);
      }

      public Characteristic_two () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public Characteristic_two (
         Asn1Integer m_,
         Asn1ObjectIdentifier basis_,
         Asn1OpenType parameters_
      )
         : base ()
      {
         m = m_;
         basis = basis_;
         parameters = parameters_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public Characteristic_two (long m_,
         int[] basis_,
         Asn1OpenType parameters_
      )
         : base ()
      {
         m = new Asn1Integer (m_);
         basis = new Asn1ObjectIdentifier (basis_);
         parameters = parameters_;
      }

      public void Init () {
         m = null;
         basis = null;
         parameters = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode m

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            m = new Asn1Integer();
            m.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode basis

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            basis = new Asn1ObjectIdentifier();
            basis.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode parameters

         if (!_context.Expired ()) {
            parameters = new Asn1OpenType();
            parameters.Decode (buffer, true, 0);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode parameters

         len = parameters.Encode (buffer, true);
         _aal += len;

         // encode basis

         len = basis.Encode (buffer, true);
         _aal += len;

         // encode m

         len = m.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (m != null) m.Print (_out, "m", _level+1);
         if (basis != null) basis.Print (_out, "basis", _level+1);
         if (parameters != null) parameters.Print (_out, "parameters", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
