// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.algorithms {

   public class Pentanomial : Asn1Type {
      public Asn1Integer k1;
      public Asn1Integer k2;
      public Asn1Integer k3;

      static Pentanomial ()
      {
         Asn1Type.SetKey2 (_algorithmsValues._rtkey);
      }

      public Pentanomial () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public Pentanomial (
         Asn1Integer k1_,
         Asn1Integer k2_,
         Asn1Integer k3_
      )
         : base ()
      {
         k1 = k1_;
         k2 = k2_;
         k3 = k3_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public Pentanomial (long k1_,
         long k2_,
         long k3_
      )
         : base ()
      {
         k1 = new Asn1Integer (k1_);
         k2 = new Asn1Integer (k2_);
         k3 = new Asn1Integer (k3_);
      }

      public void Init () {
         k1 = null;
         k2 = null;
         k3 = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode k1

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            k1 = new Asn1Integer();
            k1.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode k2

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            k2 = new Asn1Integer();
            k2.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode k3

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            k3 = new Asn1Integer();
            k3.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode k3

         len = k3.Encode (buffer, true);
         _aal += len;

         // encode k2

         len = k2.Encode (buffer, true);
         _aal += len;

         // encode k1

         len = k1.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (k1 != null) k1.Print (_out, "k1", _level+1);
         if (k2 != null) k2.Print (_out, "k2", _level+1);
         if (k3 != null) k3.Print (_out, "k3", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
