// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.algorithms {

   public class ECParameters : Asn1Type {
      public ECPVer version;
      public FieldID fieldID;
      public Curve curve;
      public Asn1OctetString base_;
      public Asn1BigInteger order;
      public Asn1BigInteger cofactor;  // optional

      static ECParameters ()
      {
         Asn1Type.SetKey2 (_algorithmsValues._rtkey);
      }

      public ECParameters () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ECParameters (
         ECPVer version_,
         FieldID fieldID_,
         Curve curve_,
         Asn1OctetString base__,
         Asn1BigInteger order_,
         Asn1BigInteger cofactor_
      )
         : base ()
      {
         version = version_;
         fieldID = fieldID_;
         curve = curve_;
         base_ = base__;
         order = order_;
         cofactor = cofactor_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ECParameters (
         ECPVer version_,
         FieldID fieldID_,
         Curve curve_,
         Asn1OctetString base__,
         Asn1BigInteger order_
      )
         : base ()
      {
         version = version_;
         fieldID = fieldID_;
         curve = curve_;
         base_ = base__;
         order = order_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ECParameters (long version_,
         FieldID fieldID_,
         Curve curve_,
         byte[] base__,
         Asn1BigInteger order_,
         Asn1BigInteger cofactor_
      )
         : base ()
      {
         version = new ECPVer (version_);
         fieldID = fieldID_;
         curve = curve_;
         base_ = new Asn1OctetString (base__);
         order = order_;
         cofactor = cofactor_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public ECParameters (
         long version_,
         FieldID fieldID_,
         Curve curve_,
         byte[] base__,
         Asn1BigInteger order_
      )
         : base ()
      {
         version = new ECPVer (version_);
         fieldID = fieldID_;
         curve = curve_;
         base_ = new Asn1OctetString (base__);
         order = order_;
      }

      public void Init () {
         version = null;
         fieldID = null;
         curve = null;
         base_ = null;
         order = null;
         cofactor = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new ECPVer();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode fieldID

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            fieldID = new FieldID();
            fieldID.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode curve

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            curve = new Curve();
            curve.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode base_

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            base_ = new Asn1OctetString();
            base_.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode order

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            order = new Asn1BigInteger();
            order.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode cofactor

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            cofactor = new Asn1BigInteger();
            cofactor.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode cofactor

         if (cofactor != null) {
            len = cofactor.Encode (buffer, true);
            _aal += len;
         }

         // encode order

         len = order.Encode (buffer, true);
         _aal += len;

         // encode base_

         len = base_.Encode (buffer, true);
         _aal += len;

         // encode curve

         len = curve.Encode (buffer, true);
         _aal += len;

         // encode fieldID

         len = fieldID.Encode (buffer, true);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (fieldID != null) fieldID.Print (_out, "fieldID", _level+1);
         if (curve != null) curve.Print (_out, "curve", _level+1);
         if (base_ != null) base_.Print (_out, "base_", _level+1);
         if (order != null) order.Print (_out, "order", _level+1);
         if (cofactor != null) cofactor.Print (_out, "cofactor", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
