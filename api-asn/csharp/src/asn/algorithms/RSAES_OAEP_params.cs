// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;
using tr.gov.tubitak.uekae.esya.asn.x509;

namespace tr.gov.tubitak.uekae.esya.asn.algorithms {

   public class RSAES_OAEP_params : Asn1Type {
      public AlgorithmIdentifier hashAlgorithm;  // optional
      public AlgorithmIdentifier maskGenAlgorithm;  // optional
      public AlgorithmIdentifier pSourceAlgorithm;  // optional

      static RSAES_OAEP_params ()
      {
         Asn1Type.SetKey2 (_algorithmsValues._rtkey);
      }

      public RSAES_OAEP_params () 
          : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public RSAES_OAEP_params (
         AlgorithmIdentifier hashAlgorithm_,
         AlgorithmIdentifier maskGenAlgorithm_,
         AlgorithmIdentifier pSourceAlgorithm_
      )
         : base ()
      {
         hashAlgorithm = hashAlgorithm_;
         maskGenAlgorithm = maskGenAlgorithm_;
         pSourceAlgorithm = pSourceAlgorithm_;
      }

      public void Init () {
         hashAlgorithm = null;
         maskGenAlgorithm = null;
         pSourceAlgorithm = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode hashAlgorithm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            hashAlgorithm = new AlgorithmIdentifier();
            hashAlgorithm.Decode (buffer, true, elemLen.mValue);
         }

         // decode maskGenAlgorithm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            maskGenAlgorithm = new AlgorithmIdentifier();
            maskGenAlgorithm.Decode (buffer, true, elemLen.mValue);
         }

         // decode pSourceAlgorithm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            pSourceAlgorithm = new AlgorithmIdentifier();
            pSourceAlgorithm.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode pSourceAlgorithm

         if (pSourceAlgorithm != null) {
            len = pSourceAlgorithm.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode maskGenAlgorithm

         if (maskGenAlgorithm != null) {
            len = maskGenAlgorithm.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode hashAlgorithm

         if (hashAlgorithm != null) {
            len = hashAlgorithm.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (hashAlgorithm != null) hashAlgorithm.Print (_out, "hashAlgorithm", _level+1);
         if (maskGenAlgorithm != null) maskGenAlgorithm.Print (_out, "maskGenAlgorithm", _level+1);
         if (pSourceAlgorithm != null) pSourceAlgorithm.Print (_out, "pSourceAlgorithm", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
