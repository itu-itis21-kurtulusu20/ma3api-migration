// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using Certificate = tr.gov.tubitak.uekae.esya.asn.x509.Certificate;

   public class ExtendedCertificateInfo : Asn1Type {
      public CMSVersion version;
      public Certificate certificate;
      public UnauthAttributes attributes;

      static ExtendedCertificateInfo ()
      {
         Asn1Type.SetKey2 (_cmsValues._rtkey);
      }

      public ExtendedCertificateInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ExtendedCertificateInfo (
         CMSVersion version_,
         Certificate certificate_,
         UnauthAttributes attributes_
      )
         : base ()
      {
         version = version_;
         certificate = certificate_;
         attributes = attributes_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ExtendedCertificateInfo (long version_,
         Certificate certificate_,
         UnauthAttributes attributes_
      )
         : base ()
      {
         version = new CMSVersion (version_);
         certificate = certificate_;
         attributes = attributes_;
      }

      public void Init () {
         version = null;
         certificate = null;
         attributes = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new CMSVersion();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode certificate

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            certificate = new Certificate();
            certificate.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode attributes

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
            attributes = new UnauthAttributes();
            attributes.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode attributes

         len = attributes.Encode (buffer, true);
         _aal += len;

         // encode certificate

         len = certificate.Encode (buffer, true);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (certificate != null) certificate.Print (_out, "certificate", _level+1);
         if (attributes != null) attributes.Print (_out, "attributes", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
