// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class EncryptedContentInfo : Asn1Type {
      public Asn1ObjectIdentifier contentType;
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier contentEncryptionAlgorithm;
      public Asn1OctetString encryptedContent;  // optional

      static EncryptedContentInfo ()
      {
         Asn1Type.SetKey2 (_cmsValues._rtkey);
      }

      public EncryptedContentInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public EncryptedContentInfo (
         Asn1ObjectIdentifier contentType_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier contentEncryptionAlgorithm_,
         Asn1OctetString encryptedContent_
      )
         : base ()
      {
         contentType = contentType_;
         contentEncryptionAlgorithm = contentEncryptionAlgorithm_;
         encryptedContent = encryptedContent_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public EncryptedContentInfo (
         Asn1ObjectIdentifier contentType_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier contentEncryptionAlgorithm_
      )
         : base ()
      {
         contentType = contentType_;
         contentEncryptionAlgorithm = contentEncryptionAlgorithm_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public EncryptedContentInfo (int[] contentType_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier contentEncryptionAlgorithm_,
         byte[] encryptedContent_
      )
         : base ()
      {
         contentType = new Asn1ObjectIdentifier (contentType_);
         contentEncryptionAlgorithm = contentEncryptionAlgorithm_;
         encryptedContent = new Asn1OctetString (encryptedContent_);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public EncryptedContentInfo (
         int[] contentType_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier contentEncryptionAlgorithm_
      )
         : base ()
      {
         contentType = new Asn1ObjectIdentifier (contentType_);
         contentEncryptionAlgorithm = contentEncryptionAlgorithm_;
      }

      public void Init () {
         contentType = null;
         contentEncryptionAlgorithm = null;
         encryptedContent = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode contentType

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            contentType = new Asn1ObjectIdentifier();
            contentType.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode contentEncryptionAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            contentEncryptionAlgorithm = new AlgorithmIdentifier();
            contentEncryptionAlgorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode encryptedContent

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            encryptedContent = new Asn1OctetString();
            encryptedContent.Decode (buffer, false, elemLen.mValue);
         }

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode encryptedContent

         if (encryptedContent != null) {
            len = encryptedContent.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
         }

         // encode contentEncryptionAlgorithm

         len = contentEncryptionAlgorithm.Encode (buffer, true);
         _aal += len;

         // encode contentType

         len = contentType.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (contentType != null) contentType.Print (_out, "contentType", _level+1);
         if (contentEncryptionAlgorithm != null) contentEncryptionAlgorithm.Print (_out, "contentEncryptionAlgorithm", _level+1);
         if (encryptedContent != null) encryptedContent.Print (_out, "encryptedContent", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
