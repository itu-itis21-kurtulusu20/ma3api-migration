// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   public class SignaturePolicy : Asn1Choice {
      // Choice element identifier constants
      public const byte _SIGNATUREPOLICYIMPLIED = 1;
      public const byte _SIGNATUREPOLICYID = 2;

      static SignaturePolicy ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public SignaturePolicy () : base()
      {
      }

      public SignaturePolicy (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _SIGNATUREPOLICYIMPLIED: return "signaturePolicyImplied";
            case _SIGNATUREPOLICYID: return "signaturePolicyId";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_signaturePolicyImplied () {
         SetElement (_SIGNATUREPOLICYIMPLIED, Asn1Null.NULL_VALUE);
      }

      public void Set_signaturePolicyId (SignaturePolicyId value) {
         SetElement (_SIGNATUREPOLICYID, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 5))
         {
            buffer.Reset();
            Asn1Null signaturePolicyImplied;
            signaturePolicyImplied = new Asn1Null();
            signaturePolicyImplied.Decode (buffer, true, len);
            SetElement (_SIGNATUREPOLICYIMPLIED, signaturePolicyImplied);
         }
         else if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
         {
            buffer.Reset();
            SignaturePolicyId signaturePolicyId;
            signaturePolicyId = new SignaturePolicyId();
            signaturePolicyId.Decode (buffer, true, len);
            SetElement (_SIGNATUREPOLICYID, signaturePolicyId);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode signaturePolicyImplied
         case _SIGNATUREPOLICYIMPLIED:
            Asn1Null signaturePolicyImplied = (Asn1Null) GetElement();
            len = signaturePolicyImplied.Encode (buffer, true);
            _aal += len;
            break;

         // encode signaturePolicyId
         case _SIGNATUREPOLICYID:
            SignaturePolicyId signaturePolicyId = (SignaturePolicyId) GetElement();
            len = signaturePolicyId.Encode (buffer, true);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
