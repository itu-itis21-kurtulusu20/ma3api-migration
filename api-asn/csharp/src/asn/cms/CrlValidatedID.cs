// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   public class CrlValidatedID : Asn1Type {
      public OtherHash crlHash;
      public CrlIdentifier crlIdentifier;  // optional

      static CrlValidatedID ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public CrlValidatedID () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CrlValidatedID (
         OtherHash crlHash_,
         CrlIdentifier crlIdentifier_
      )
         : base ()
      {
         crlHash = crlHash_;
         crlIdentifier = crlIdentifier_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public CrlValidatedID (
         OtherHash crlHash_
      )
         : base ()
      {
         crlHash = crlHash_;
      }

      public void Init () {
         crlHash = null;
         crlIdentifier = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode crlHash

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            {
               crlHash = new OtherHash();
               crlHash.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode crlIdentifier

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            crlIdentifier = new CrlIdentifier();
            crlIdentifier.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crlIdentifier

         if (crlIdentifier != null) {
            len = crlIdentifier.Encode (buffer, true);
            _aal += len;
         }

         // encode crlHash

         len = crlHash.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (crlHash != null) crlHash.Print (_out, "crlHash", _level+1);
         if (crlIdentifier != null) crlIdentifier.Print (_out, "crlIdentifier", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
