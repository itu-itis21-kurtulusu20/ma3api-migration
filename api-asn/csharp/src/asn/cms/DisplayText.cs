// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   public class DisplayText : Asn1Choice {
      // Choice element identifier constants
      public const byte _UTF8STRING = 1;
      public const byte _VISIBLESTRING = 2;
      public const byte _BMPSTRING = 3;

      static DisplayText ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public DisplayText () : base()
      {
      }

      public DisplayText (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _UTF8STRING: return "utf8String";
            case _VISIBLESTRING: return "visibleString";
            case _BMPSTRING: return "bmpString";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_utf8String (Asn1UTF8String value) {
         SetElement (_UTF8STRING, value);
      }

      public void Set_visibleString (Asn1VisibleString value) {
         SetElement (_VISIBLESTRING, value);
      }

      public void Set_bmpString (Asn1BMPString value) {
         SetElement (_BMPSTRING, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12))
         {
            buffer.Reset();
            Asn1UTF8String utf8String;
            utf8String = new Asn1UTF8String();
            utf8String.Decode (buffer, true, len);
            if (!((utf8String.Length >= 1 && utf8String.Length <= 200))) {
               throw new Asn1ConsVioException ("utf8String.Length", utf8String.Length);
            }

            SetElement (_UTF8STRING, utf8String);
         }
         else if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 26))
         {
            buffer.Reset();
            Asn1VisibleString visibleString;
            visibleString = new Asn1VisibleString();
            visibleString.Decode (buffer, true, len);
            if (!((visibleString.Length >= 1 && visibleString.Length <= 200))) {
               throw new Asn1ConsVioException ("visibleString.Length", visibleString.Length);
            }

            SetElement (_VISIBLESTRING, visibleString);
         }
         else if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 30))
         {
            buffer.Reset();
            Asn1BMPString bmpString;
            bmpString = new Asn1BMPString();
            bmpString.Decode (buffer, true, len);
            if (!((bmpString.Length >= 1 && bmpString.Length <= 200))) {
               throw new Asn1ConsVioException ("bmpString.Length", bmpString.Length);
            }

            SetElement (_BMPSTRING, bmpString);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode utf8String
         case _UTF8STRING:
            Asn1UTF8String utf8String = (Asn1UTF8String) GetElement();
            if (!((utf8String.Length >= 1 && utf8String.Length <= 200))) {
               throw new Asn1ConsVioException ("utf8String.Length", utf8String.Length);
            }

            len = utf8String.Encode (buffer, true);
            _aal += len;
            break;

         // encode visibleString
         case _VISIBLESTRING:
            Asn1VisibleString visibleString = (Asn1VisibleString) GetElement();
            if (!((visibleString.Length >= 1 && visibleString.Length <= 200))) {
               throw new Asn1ConsVioException ("visibleString.Length", visibleString.Length);
            }

            len = visibleString.Encode (buffer, true);
            _aal += len;
            break;

         // encode bmpString
         case _BMPSTRING:
            Asn1BMPString bmpString = (Asn1BMPString) GetElement();
            if (!((bmpString.Length >= 1 && bmpString.Length <= 200))) {
               throw new Asn1ConsVioException ("bmpString.Length", bmpString.Length);
            }

            len = bmpString.Encode (buffer, true);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
