// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   public class RecipientInfo : Asn1Choice {
      // Choice element identifier constants
      public const byte _KTRI = 1;
      public const byte _KARI = 2;
      public const byte _KEKRI = 3;
      public const byte _PWRI = 4;
      public const byte _ORI = 5;

      static RecipientInfo ()
      {
         Asn1Type.SetKey2 (_cmsValues._rtkey);
      }

      public RecipientInfo () : base()
      {
      }

      public RecipientInfo (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _KTRI: return "ktri";
            case _KARI: return "kari";
            case _KEKRI: return "kekri";
            case _PWRI: return "pwri";
            case _ORI: return "ori";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_ktri (KeyTransRecipientInfo value) {
         SetElement (_KTRI, value);
      }

      public void Set_kari (KeyAgreeRecipientInfo value) {
         SetElement (_KARI, value);
      }

      public void Set_kekri (KEKRecipientInfo value) {
         SetElement (_KEKRI, value);
      }

      public void Set_pwri (PasswordRecipientInfo value) {
         SetElement (_PWRI, value);
      }

      public void Set_ori (OtherRecipientInfo value) {
         SetElement (_ORI, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
         {
            buffer.Reset();
            KeyTransRecipientInfo ktri;
            ktri = new KeyTransRecipientInfo();
            ktri.Decode (buffer, true, len);
            SetElement (_KTRI, ktri);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
         {
            KeyAgreeRecipientInfo kari;
            kari = new KeyAgreeRecipientInfo();
            kari.Decode (buffer, false, len);
            SetElement (_KARI, kari);
            if (len == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
         {
            KEKRecipientInfo kekri;
            kekri = new KEKRecipientInfo();
            kekri.Decode (buffer, false, len);
            SetElement (_KEKRI, kekri);
            if (len == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
         {
            PasswordRecipientInfo pwri;
            pwri = new PasswordRecipientInfo();
            pwri.Decode (buffer, false, len);
            SetElement (_PWRI, pwri);
            if (len == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))
         {
            OtherRecipientInfo ori;
            ori = new OtherRecipientInfo();
            ori.Decode (buffer, false, len);
            SetElement (_ORI, ori);
            if (len == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode ktri
         case _KTRI:
            KeyTransRecipientInfo ktri = (KeyTransRecipientInfo) GetElement();
            len = ktri.Encode (buffer, true);
            _aal += len;
            break;

         // encode kari
         case _KARI:
            KeyAgreeRecipientInfo kari = (KeyAgreeRecipientInfo) GetElement();
            len = kari.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         // encode kekri
         case _KEKRI:
            KEKRecipientInfo kekri = (KEKRecipientInfo) GetElement();
            len = kekri.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
            break;

         // encode pwri
         case _PWRI:
            PasswordRecipientInfo pwri = (PasswordRecipientInfo) GetElement();
            len = pwri.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
            break;

         // encode ori
         case _ORI:
            OtherRecipientInfo ori = (OtherRecipientInfo) GetElement();
            len = ori.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
