// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   public class KEKIdentifier : Asn1Type {
      public Asn1OctetString keyIdentifier;
      public Asn1GeneralizedTime date;  // optional
      public OtherKeyAttribute other;  // optional

      static KEKIdentifier ()
      {
         Asn1Type.SetKey2 (_cmsValues._rtkey);
      }

      public KEKIdentifier () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public KEKIdentifier (
         Asn1OctetString keyIdentifier_,
         Asn1GeneralizedTime date_,
         OtherKeyAttribute other_
      )
         : base ()
      {
         keyIdentifier = keyIdentifier_;
         date = date_;
         other = other_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public KEKIdentifier (
         Asn1OctetString keyIdentifier_
      )
         : base ()
      {
         keyIdentifier = keyIdentifier_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public KEKIdentifier (byte[] keyIdentifier_,
         string date_,
         OtherKeyAttribute other_
      )
         : base ()
      {
         keyIdentifier = new Asn1OctetString (keyIdentifier_);
         date = new Asn1GeneralizedTime (date_);
         other = other_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public KEKIdentifier (
         byte[] keyIdentifier_
      )
         : base ()
      {
         keyIdentifier = new Asn1OctetString (keyIdentifier_);
      }

      public void Init () {
         keyIdentifier = null;
         date = null;
         other = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode keyIdentifier

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            keyIdentifier = new Asn1OctetString();
            keyIdentifier.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode date

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
            date = new Asn1GeneralizedTime (false);
            date.Decode (buffer, true, elemLen.mValue);
         }

         // decode other

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            other = new OtherKeyAttribute();
            other.Decode (buffer, true, elemLen.mValue);
         }

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode other

         if (other != null) {
            len = other.Encode (buffer, true);
            _aal += len;
         }

         // encode date

         if (date != null) {
            len = date.Encode (buffer, true);
            _aal += len;
         }

         // encode keyIdentifier

         len = keyIdentifier.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (keyIdentifier != null) keyIdentifier.Print (_out, "keyIdentifier", _level+1);
         if (date != null) date.Print (_out, "date", _level+1);
         if (other != null) other.Print (_out, "other", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
