// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   //using IssuerSerial = tr.gov.tubitak.uekae.esya.asn.cms.IssuerSerial;

   public class OtherCertID : Asn1Type {
      public OtherHash otherCertHash;
      public tr.gov.tubitak.uekae.esya.asn.cms.IssuerSerial issuerSerial;  // optional

      static OtherCertID ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public OtherCertID () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public OtherCertID (
         OtherHash otherCertHash_,
         tr.gov.tubitak.uekae.esya.asn.cms.IssuerSerial issuerSerial_
      )
         : base ()
      {
         otherCertHash = otherCertHash_;
         issuerSerial = issuerSerial_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public OtherCertID (
         OtherHash otherCertHash_
      )
         : base ()
      {
         otherCertHash = otherCertHash_;
      }

      public void Init () {
         otherCertHash = null;
         issuerSerial = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode otherCertHash

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            {
               otherCertHash = new OtherHash();
               otherCertHash.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode issuerSerial

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            issuerSerial = new IssuerSerial();
            issuerSerial.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode issuerSerial

         if (issuerSerial != null) {
            len = issuerSerial.Encode (buffer, true);
            _aal += len;
         }

         // encode otherCertHash

         len = otherCertHash.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (otherCertHash != null) otherCertHash.Print (_out, "otherCertHash", _level+1);
         if (issuerSerial != null) issuerSerial.Print (_out, "issuerSerial", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
