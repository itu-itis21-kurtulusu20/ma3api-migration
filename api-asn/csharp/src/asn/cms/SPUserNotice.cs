// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   public class SPUserNotice : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.cms.NoticeReference noticeRef;  // optional
      public tr.gov.tubitak.uekae.esya.asn.cms.DisplayText explicitText;  // optional

      static SPUserNotice ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public SPUserNotice () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public SPUserNotice (
         tr.gov.tubitak.uekae.esya.asn.cms.NoticeReference noticeRef_,
         tr.gov.tubitak.uekae.esya.asn.cms.DisplayText explicitText_
      )
         : base ()
      {
         noticeRef = noticeRef_;
         explicitText = explicitText_;
      }

      public void Init () {
         noticeRef = null;
         explicitText = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode noticeRef

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            noticeRef = new NoticeReference();
            noticeRef.Decode (buffer, true, elemLen.mValue);
         }

         // decode explicitText

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 26) ||
                tag.Equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 30))
            {
               explicitText = new DisplayText();
               explicitText.Decode (buffer, true, elemLen.mValue);
            }
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode explicitText

         if (explicitText != null) {
            len = explicitText.Encode (buffer, true);
            _aal += len;
         }

         // encode noticeRef

         if (noticeRef != null) {
            len = noticeRef.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (noticeRef != null) noticeRef.Print (_out, "noticeRef", _level+1);
         if (explicitText != null) explicitText.Print (_out, "explicitText", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
