// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
   //using AuthAttributes = tr.gov.tubitak.uekae.esya.asn.cms.AuthAttributes;

   public class AuthenticatedData : Asn1Type {
      public CMSVersion version;
      public OriginatorInfo originatorInfo;  // optional
      public RecipientInfos recipientInfos;
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier macAlgorithm;
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier digestAlgorithm;  // optional
      public EncapsulatedContentInfo encapContentInfo;
      public AuthAttributes authAttrs;  // optional
      public Asn1OctetString mac;
      public UnauthAttributes unauthAttrs;  // optional

      static AuthenticatedData ()
      {
         Asn1Type.SetKey2 (_cmsValues._rtkey);
      }

      public AuthenticatedData () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public AuthenticatedData (
         CMSVersion version_,
         OriginatorInfo originatorInfo_,
         RecipientInfos recipientInfos_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier macAlgorithm_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier digestAlgorithm_,
         EncapsulatedContentInfo encapContentInfo_,
         AuthAttributes authAttrs_,
         Asn1OctetString mac_,
         UnauthAttributes unauthAttrs_
      )
         : base ()
      {
         version = version_;
         originatorInfo = originatorInfo_;
         recipientInfos = recipientInfos_;
         macAlgorithm = macAlgorithm_;
         digestAlgorithm = digestAlgorithm_;
         encapContentInfo = encapContentInfo_;
         authAttrs = authAttrs_;
         mac = mac_;
         unauthAttrs = unauthAttrs_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public AuthenticatedData (
         CMSVersion version_,
         RecipientInfos recipientInfos_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier macAlgorithm_,
         EncapsulatedContentInfo encapContentInfo_,
         Asn1OctetString mac_
      )
         : base ()
      {
         version = version_;
         recipientInfos = recipientInfos_;
         macAlgorithm = macAlgorithm_;
         encapContentInfo = encapContentInfo_;
         mac = mac_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public AuthenticatedData (long version_,
         OriginatorInfo originatorInfo_,
         RecipientInfos recipientInfos_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier macAlgorithm_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier digestAlgorithm_,
         EncapsulatedContentInfo encapContentInfo_,
         AuthAttributes authAttrs_,
         byte[] mac_,
         UnauthAttributes unauthAttrs_
      )
         : base ()
      {
         version = new CMSVersion (version_);
         originatorInfo = originatorInfo_;
         recipientInfos = recipientInfos_;
         macAlgorithm = macAlgorithm_;
         digestAlgorithm = digestAlgorithm_;
         encapContentInfo = encapContentInfo_;
         authAttrs = authAttrs_;
         mac = new Asn1OctetString (mac_);
         unauthAttrs = unauthAttrs_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public AuthenticatedData (
         long version_,
         RecipientInfos recipientInfos_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier macAlgorithm_,
         EncapsulatedContentInfo encapContentInfo_,
         byte[] mac_
      )
         : base ()
      {
         version = new CMSVersion (version_);
         recipientInfos = recipientInfos_;
         macAlgorithm = macAlgorithm_;
         encapContentInfo = encapContentInfo_;
         mac = new Asn1OctetString (mac_);
      }

      public void Init () {
         version = null;
         originatorInfo = null;
         recipientInfos = null;
         macAlgorithm = null;
         digestAlgorithm = null;
         encapContentInfo = null;
         authAttrs = null;
         mac = null;
         unauthAttrs = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new CMSVersion();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode originatorInfo

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            originatorInfo = new OriginatorInfo();
            originatorInfo.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode recipientInfos

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 17, elemLen, false)) {
            recipientInfos = new RecipientInfos();
            recipientInfos.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode macAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            macAlgorithm = new AlgorithmIdentifier();
            macAlgorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode digestAlgorithm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            digestAlgorithm = new AlgorithmIdentifier();
            digestAlgorithm.Decode (buffer, false, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode encapContentInfo

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            encapContentInfo = new EncapsulatedContentInfo();
            encapContentInfo.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode authAttrs

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            authAttrs = new AuthAttributes();
            authAttrs.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode mac

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            mac = new Asn1OctetString();
            mac.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode unauthAttrs

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            unauthAttrs = new UnauthAttributes();
            unauthAttrs.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode unauthAttrs

         if (unauthAttrs != null) {
            len = unauthAttrs.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }

         // encode mac

         len = mac.Encode (buffer, true);
         _aal += len;

         // encode authAttrs

         if (authAttrs != null) {
            len = authAttrs.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode encapContentInfo

         len = encapContentInfo.Encode (buffer, true);
         _aal += len;

         // encode digestAlgorithm

         if (digestAlgorithm != null) {
            len = digestAlgorithm.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode macAlgorithm

         len = macAlgorithm.Encode (buffer, true);
         _aal += len;

         // encode recipientInfos

         len = recipientInfos.Encode (buffer, true);
         _aal += len;

         // encode originatorInfo

         if (originatorInfo != null) {
            len = originatorInfo.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (originatorInfo != null) originatorInfo.Print (_out, "originatorInfo", _level+1);
         if (recipientInfos != null) recipientInfos.Print (_out, "recipientInfos", _level+1);
         if (macAlgorithm != null) macAlgorithm.Print (_out, "macAlgorithm", _level+1);
         if (digestAlgorithm != null) digestAlgorithm.Print (_out, "digestAlgorithm", _level+1);
         if (encapContentInfo != null) encapContentInfo.Print (_out, "encapContentInfo", _level+1);
         if (authAttrs != null) authAttrs.Print (_out, "authAttrs", _level+1);
         if (mac != null) mac.Print (_out, "mac", _level+1);
         if (unauthAttrs != null) unauthAttrs.Print (_out, "unauthAttrs", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
