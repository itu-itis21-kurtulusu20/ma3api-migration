// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using AttributeCertificate = tr.gov.tubitak.uekae.esya.asn.attrcert.AttributeCertificate;

   public class SignerAttribute_element : Asn1Choice {
      // Choice element identifier constants
      public const byte _CLAIMEDATTRIBUTES = 1;
      public const byte _CERTIFIEDATTRIBUTES = 2;

      static SignerAttribute_element ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public SignerAttribute_element () : base()
      {
      }

      public SignerAttribute_element (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _CLAIMEDATTRIBUTES: return "claimedAttributes";
            case _CERTIFIEDATTRIBUTES: return "certifiedAttributes";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_claimedAttributes (ClaimedAttributes value) {
         SetElement (_CLAIMEDATTRIBUTES, value);
      }

      public void Set_certifiedAttributes (AttributeCertificate value) {
         SetElement (_CERTIFIEDATTRIBUTES, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            ClaimedAttributes claimedAttributes;
            claimedAttributes = new ClaimedAttributes();
            claimedAttributes.Decode (buffer, true, len);
            SetElement (_CLAIMEDATTRIBUTES, claimedAttributes);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1)) {
            AttributeCertificate certifiedAttributes;
            certifiedAttributes = new AttributeCertificate();
            certifiedAttributes.Decode (buffer, true, len);
            SetElement (_CERTIFIEDATTRIBUTES, certifiedAttributes);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode claimedAttributes
         case _CLAIMEDATTRIBUTES:
            ClaimedAttributes claimedAttributes = (ClaimedAttributes) GetElement();
            len = claimedAttributes.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
            break;

         // encode certifiedAttributes
         case _CERTIFIEDATTRIBUTES:
            AttributeCertificate certifiedAttributes = (AttributeCertificate) GetElement();
            len = certifiedAttributes.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
