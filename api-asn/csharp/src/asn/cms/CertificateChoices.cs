// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;
using tr.gov.tubitak.uekae.esya.asn.attrcert;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using Certificate = tr.gov.tubitak.uekae.esya.asn.x509.Certificate;
   using AttributeCertificate = tr.gov.tubitak.uekae.esya.asn.attrcert.AttributeCertificate;

   public class CertificateChoices : Asn1Choice {
      // Choice element identifier constants
      public const byte _CERTIFICATE = 1;
      public const byte _EXTENDEDCERTIFICATE = 2;
      public const byte _V1ATTRCERT = 3;
      public const byte _V2ATTRCERT = 4;
      public const byte _OTHER = 5;

      static CertificateChoices ()
      {
         Asn1Type.SetKey2 (_cmsValues._rtkey);
      }

      public CertificateChoices ()  : base()
      {
      }

      public CertificateChoices (byte choiceId_, Asn1Type element_)  : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _CERTIFICATE: return "certificate";
            case _EXTENDEDCERTIFICATE: return "extendedCertificate";
            case _V1ATTRCERT: return "v1AttrCert";
            case _V2ATTRCERT: return "v2AttrCert";
            case _OTHER: return "other";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_certificate (Certificate value) {
         SetElement (_CERTIFICATE, value);
      }

      public void Set_extendedCertificate (ExtendedCertificate value) {
         SetElement (_EXTENDEDCERTIFICATE, value);
      }

      public void Set_v1AttrCert (Asn1Type value) {
         SetElement (_V1ATTRCERT, value);
      }

      public void Set_v2AttrCert (AttributeCertificate value) {
         SetElement (_V2ATTRCERT, value);
      }

      public void Set_other (OtherCertificateFormat value) {
         SetElement (_OTHER, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
         {
            buffer.Reset();
            Certificate certificate;
            certificate = new Certificate();
            certificate.Decode (buffer, true, len);
            SetElement (_CERTIFICATE, certificate);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            ExtendedCertificate extendedCertificate;
            extendedCertificate = new ExtendedCertificate();
            extendedCertificate.Decode (buffer, false, len);
            SetElement (_EXTENDEDCERTIFICATE, extendedCertificate);
            if (len == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 1)) {
             AttributeCertificateV1 v1AttrCert;
             v1AttrCert = new AttributeCertificateV1();
            v1AttrCert.Decode (buffer, false, len);
            SetElement (_V1ATTRCERT, v1AttrCert);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2)) {
            AttributeCertificate v2AttrCert;
            v2AttrCert = new AttributeCertificate();
            v2AttrCert.Decode (buffer, false, len);
            SetElement (_V2ATTRCERT, v2AttrCert);
            if (len == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
         {
            OtherCertificateFormat other;
            other = new OtherCertificateFormat();
            other.Decode (buffer, false, len);
            SetElement (_OTHER, other);
            if (len == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode certificate
         case _CERTIFICATE:
            Certificate certificate = (Certificate) GetElement();
            len = certificate.Encode (buffer, true);
            _aal += len;
            break;

         // encode extendedCertificate
         case _EXTENDEDCERTIFICATE:
            ExtendedCertificate extendedCertificate = (ExtendedCertificate) GetElement();
            len = extendedCertificate.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
            break;

         // encode v1AttrCert
         case _V1ATTRCERT:
            Asn1Type v1AttrCert = (Asn1Type) GetElement();
            len = v1AttrCert.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
            break;

         // encode v2AttrCert
         case _V2ATTRCERT:
            AttributeCertificate v2AttrCert = (AttributeCertificate) GetElement();
            len = v2AttrCert.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
            break;

         // encode other
         case _OTHER:
            OtherCertificateFormat other = (OtherCertificateFormat) GetElement();
            len = other.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
