// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   public class SignaturePolicyId : Asn1Type {
      public Asn1ObjectIdentifier sigPolicyId;
      public OtherHashAlgAndValue sigPolicyHash;
      public SignaturePolicyId_sigPolicyQualifiers sigPolicyQualifiers;  // optional

      static SignaturePolicyId ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public SignaturePolicyId () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public SignaturePolicyId (
         Asn1ObjectIdentifier sigPolicyId_,
         OtherHashAlgAndValue sigPolicyHash_,
         SignaturePolicyId_sigPolicyQualifiers sigPolicyQualifiers_
      )
         : base ()
      {
         sigPolicyId = sigPolicyId_;
         sigPolicyHash = sigPolicyHash_;
         sigPolicyQualifiers = sigPolicyQualifiers_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public SignaturePolicyId (
         Asn1ObjectIdentifier sigPolicyId_,
         OtherHashAlgAndValue sigPolicyHash_
      )
         : base ()
      {
         sigPolicyId = sigPolicyId_;
         sigPolicyHash = sigPolicyHash_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public SignaturePolicyId (int[] sigPolicyId_,
         OtherHashAlgAndValue sigPolicyHash_,
         SignaturePolicyId_sigPolicyQualifiers sigPolicyQualifiers_
      )
         : base ()
      {
         sigPolicyId = new Asn1ObjectIdentifier (sigPolicyId_);
         sigPolicyHash = sigPolicyHash_;
         sigPolicyQualifiers = sigPolicyQualifiers_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public SignaturePolicyId (
         int[] sigPolicyId_,
         OtherHashAlgAndValue sigPolicyHash_
      )
         : base ()
      {
         sigPolicyId = new Asn1ObjectIdentifier (sigPolicyId_);
         sigPolicyHash = sigPolicyHash_;
      }

      public void Init () {
         sigPolicyId = null;
         sigPolicyHash = null;
         sigPolicyQualifiers = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode sigPolicyId

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
            sigPolicyId = new Asn1ObjectIdentifier();
            sigPolicyId.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode sigPolicyHash

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            sigPolicyHash = new OtherHashAlgAndValue();
            sigPolicyHash.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode sigPolicyQualifiers

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            sigPolicyQualifiers = new SignaturePolicyId_sigPolicyQualifiers();
            sigPolicyQualifiers.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode sigPolicyQualifiers

         if (sigPolicyQualifiers != null) {
            len = sigPolicyQualifiers.Encode (buffer, true);
            _aal += len;
         }

         // encode sigPolicyHash

         len = sigPolicyHash.Encode (buffer, true);
         _aal += len;

         // encode sigPolicyId

         len = sigPolicyId.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (sigPolicyId != null) sigPolicyId.Print (_out, "sigPolicyId", _level+1);
         if (sigPolicyHash != null) sigPolicyHash.Print (_out, "sigPolicyHash", _level+1);
         if (sigPolicyQualifiers != null) sigPolicyQualifiers.Print (_out, "sigPolicyQualifiers", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
