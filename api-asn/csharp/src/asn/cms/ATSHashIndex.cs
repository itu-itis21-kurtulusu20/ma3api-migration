// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class ATSHashIndex : Asn1Type {
      public AlgorithmIdentifier hashIndAlgorithm;  // optional
      public ATSHashIndex_certificatesHashIndex certificatesHashIndex;
      public ATSHashIndex_crlsHashIndex crlsHashIndex;
      public ATSHashIndex_unsignedAttrsHashIndex unsignedAttrsHashIndex;

      static ATSHashIndex ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public ATSHashIndex () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ATSHashIndex (
         AlgorithmIdentifier hashIndAlgorithm_,
         ATSHashIndex_certificatesHashIndex certificatesHashIndex_,
         ATSHashIndex_crlsHashIndex crlsHashIndex_,
         ATSHashIndex_unsignedAttrsHashIndex unsignedAttrsHashIndex_
      )
         : base ()
      {
         hashIndAlgorithm = hashIndAlgorithm_;
         certificatesHashIndex = certificatesHashIndex_;
         crlsHashIndex = crlsHashIndex_;
         unsignedAttrsHashIndex = unsignedAttrsHashIndex_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ATSHashIndex (
         ATSHashIndex_certificatesHashIndex certificatesHashIndex_,
         ATSHashIndex_crlsHashIndex crlsHashIndex_,
         ATSHashIndex_unsignedAttrsHashIndex unsignedAttrsHashIndex_
      )
         : base ()
      {
         certificatesHashIndex = certificatesHashIndex_;
         crlsHashIndex = crlsHashIndex_;
         unsignedAttrsHashIndex = unsignedAttrsHashIndex_;
      }

      public void Init () {
         hashIndAlgorithm = null;
         certificatesHashIndex = null;
         crlsHashIndex = null;
         unsignedAttrsHashIndex = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode hashIndAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            hashIndAlgorithm = new AlgorithmIdentifier();
            hashIndAlgorithm.Decode (buffer, true, elemLen.mValue);
         }

         // decode certificatesHashIndex

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            certificatesHashIndex = new ATSHashIndex_certificatesHashIndex();
            certificatesHashIndex.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode crlsHashIndex

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            crlsHashIndex = new ATSHashIndex_crlsHashIndex();
            crlsHashIndex.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode unsignedAttrsHashIndex

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            unsignedAttrsHashIndex = new ATSHashIndex_unsignedAttrsHashIndex();
            unsignedAttrsHashIndex.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode unsignedAttrsHashIndex

         len = unsignedAttrsHashIndex.Encode (buffer, true);
         _aal += len;

         // encode crlsHashIndex

         len = crlsHashIndex.Encode (buffer, true);
         _aal += len;

         // encode certificatesHashIndex

         len = certificatesHashIndex.Encode (buffer, true);
         _aal += len;

         // encode hashIndAlgorithm

         if (hashIndAlgorithm != null) {
            len = hashIndAlgorithm.Encode (buffer, true);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (hashIndAlgorithm != null) hashIndAlgorithm.Print (_out, "hashIndAlgorithm", _level+1);
         if (certificatesHashIndex != null) certificatesHashIndex.Print (_out, "certificatesHashIndex", _level+1);
         if (crlsHashIndex != null) crlsHashIndex.Print (_out, "crlsHashIndex", _level+1);
         if (unsignedAttrsHashIndex != null) unsignedAttrsHashIndex.Print (_out, "unsignedAttrsHashIndex", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
