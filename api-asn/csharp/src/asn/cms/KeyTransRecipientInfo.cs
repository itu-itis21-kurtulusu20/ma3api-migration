// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class KeyTransRecipientInfo : Asn1Type {
      public CMSVersion version;
      public RecipientIdentifier rid;
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm;
      public Asn1OctetString encryptedKey;

      static KeyTransRecipientInfo ()
      {
         Asn1Type.SetKey2 (_cmsValues._rtkey);
      }

      public KeyTransRecipientInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public KeyTransRecipientInfo (
         CMSVersion version_,
         RecipientIdentifier rid_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         Asn1OctetString encryptedKey_
      )
         : base ()
      {
         version = version_;
         rid = rid_;
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         encryptedKey = encryptedKey_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public KeyTransRecipientInfo (long version_,
         RecipientIdentifier rid_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         byte[] encryptedKey_
      )
         : base ()
      {
         version = new CMSVersion (version_);
         rid = rid_;
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         encryptedKey = new Asn1OctetString (encryptedKey_);
      }

      public void Init () {
         version = null;
         rid = null;
         keyEncryptionAlgorithm = null;
         encryptedKey = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new CMSVersion();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode rid

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
            {
               rid = new RecipientIdentifier();
               rid.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode keyEncryptionAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            keyEncryptionAlgorithm = new AlgorithmIdentifier();
            keyEncryptionAlgorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode encryptedKey

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            encryptedKey = new Asn1OctetString();
            encryptedKey.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode encryptedKey

         len = encryptedKey.Encode (buffer, true);
         _aal += len;

         // encode keyEncryptionAlgorithm

         len = keyEncryptionAlgorithm.Encode (buffer, true);
         _aal += len;

         // encode rid

         len = rid.Encode (buffer, true);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (rid != null) rid.Print (_out, "rid", _level+1);
         if (keyEncryptionAlgorithm != null) keyEncryptionAlgorithm.Print (_out, "keyEncryptionAlgorithm", _level+1);
         if (encryptedKey != null) encryptedKey.Print (_out, "encryptedKey", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
