// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class KeyAgreeRecipientInfo : Asn1Type {
      public CMSVersion version;
      public OriginatorIdentifierOrKey originator;
      public Asn1OctetString ukm;  // optional
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm;
      public RecipientEncryptedKeys recipientEncryptedKeys;

      static KeyAgreeRecipientInfo ()
      {
         Asn1Type.SetKey2 (_cmsValues._rtkey);
      }

      public KeyAgreeRecipientInfo () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public KeyAgreeRecipientInfo (
         CMSVersion version_,
         OriginatorIdentifierOrKey originator_,
         Asn1OctetString ukm_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         RecipientEncryptedKeys recipientEncryptedKeys_
      )
         : base ()
      {
         version = version_;
         originator = originator_;
         ukm = ukm_;
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         recipientEncryptedKeys = recipientEncryptedKeys_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public KeyAgreeRecipientInfo (
         CMSVersion version_,
         OriginatorIdentifierOrKey originator_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         RecipientEncryptedKeys recipientEncryptedKeys_
      )
         : base ()
      {
         version = version_;
         originator = originator_;
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         recipientEncryptedKeys = recipientEncryptedKeys_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public KeyAgreeRecipientInfo (long version_,
         OriginatorIdentifierOrKey originator_,
         byte[] ukm_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         RecipientEncryptedKeys recipientEncryptedKeys_
      )
         : base ()
      {
         version = new CMSVersion (version_);
         originator = originator_;
         ukm = new Asn1OctetString (ukm_);
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         recipientEncryptedKeys = recipientEncryptedKeys_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public KeyAgreeRecipientInfo (
         long version_,
         OriginatorIdentifierOrKey originator_,
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier keyEncryptionAlgorithm_,
         RecipientEncryptedKeys recipientEncryptedKeys_
      )
         : base ()
      {
         version = new CMSVersion (version_);
         originator = originator_;
         keyEncryptionAlgorithm = keyEncryptionAlgorithm_;
         recipientEncryptedKeys = recipientEncryptedKeys_;
      }

      public void Init () {
         version = null;
         originator = null;
         ukm = null;
         keyEncryptionAlgorithm = null;
         recipientEncryptedKeys = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            version = new CMSVersion();
            version.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode originator

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            originator = new OriginatorIdentifierOrKey();
            originator.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode ukm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            ukm = new Asn1OctetString();
            ukm.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode keyEncryptionAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            keyEncryptionAlgorithm = new AlgorithmIdentifier();
            keyEncryptionAlgorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode recipientEncryptedKeys

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            recipientEncryptedKeys = new RecipientEncryptedKeys();
            recipientEncryptedKeys.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode recipientEncryptedKeys

         len = recipientEncryptedKeys.Encode (buffer, true);
         _aal += len;

         // encode keyEncryptionAlgorithm

         len = keyEncryptionAlgorithm.Encode (buffer, true);
         _aal += len;

         // encode ukm

         if (ukm != null) {
            len = ukm.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode originator

         len = originator.Encode (buffer, true);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;

         // encode version

         len = version.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (originator != null) originator.Print (_out, "originator", _level+1);
         if (ukm != null) ukm.Print (_out, "ukm", _level+1);
         if (keyEncryptionAlgorithm != null) keyEncryptionAlgorithm.Print (_out, "keyEncryptionAlgorithm", _level+1);
         if (recipientEncryptedKeys != null) recipientEncryptedKeys.Print (_out, "recipientEncryptedKeys", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
