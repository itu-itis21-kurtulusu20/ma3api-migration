// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   //using CertificateSet = tr.gov.tubitak.uekae.esya.asn.cms.CertificateSet;
   //using RevocationInfoChoices = tr.gov.tubitak.uekae.esya.asn.cms.RevocationInfoChoices;

   public class LongTermValidation : Asn1Type {
      public Asn1GeneralizedTime poeDate;
      public LongTermValidation_poeValue poeValue;  // optional
      public CertificateSet extraCertificates;  // optional
      public RevocationInfoChoices extraRevocation;  // optional

      static LongTermValidation ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public LongTermValidation () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public LongTermValidation (
         Asn1GeneralizedTime poeDate_,
         LongTermValidation_poeValue poeValue_,
         CertificateSet extraCertificates_,
         RevocationInfoChoices extraRevocation_
      )
         : base ()
      {
         poeDate = poeDate_;
         poeValue = poeValue_;
         extraCertificates = extraCertificates_;
         extraRevocation = extraRevocation_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public LongTermValidation (
         Asn1GeneralizedTime poeDate_
      )
         : base ()
      {
         poeDate = poeDate_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public LongTermValidation (string poeDate_,
         LongTermValidation_poeValue poeValue_,
         CertificateSet extraCertificates_,
         RevocationInfoChoices extraRevocation_
      )
         : base ()
      {
         poeDate = new Asn1GeneralizedTime (poeDate_);
         poeValue = poeValue_;
         extraCertificates = extraCertificates_;
         extraRevocation = extraRevocation_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public LongTermValidation (
         string poeDate_
      )
         : base ()
      {
         poeDate = new Asn1GeneralizedTime (poeDate_);
      }

      public void Init () {
         poeDate = null;
         poeValue = null;
         extraCertificates = null;
         extraRevocation = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode poeDate

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
            poeDate = new Asn1GeneralizedTime (true);
            poeDate.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode poeValue

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
            {
               poeValue = new LongTermValidation_poeValue();
               poeValue.Decode (buffer, true, elemLen.mValue);
            }
         }

         // decode extraCertificates

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            extraCertificates = new CertificateSet();
            extraCertificates.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode extraRevocation

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            extraRevocation = new RevocationInfoChoices();
            extraRevocation.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode extraRevocation

         if (extraRevocation != null) {
            len = extraRevocation.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode extraCertificates

         if (extraCertificates != null) {
            len = extraCertificates.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode poeValue

         if (poeValue != null) {
            len = poeValue.Encode (buffer, true);
            _aal += len;
         }

         // encode poeDate

         len = poeDate.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (poeDate != null) poeDate.Print (_out, "poeDate", _level+1);
         if (poeValue != null) poeValue.Print (_out, "poeValue", _level+1);
         if (extraCertificates != null) extraCertificates.Print (_out, "extraCertificates", _level+1);
         if (extraRevocation != null) extraRevocation.Print (_out, "extraRevocation", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
