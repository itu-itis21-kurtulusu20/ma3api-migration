// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cms {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;
   //using ContentInfo = tr.gov.tubitak.uekae.esya.asn.cms.ContentInfo;

   public class ArchiveTimeStamp : Asn1Type {
      public AlgorithmIdentifier digestAlgorithm;  // optional
      public tr.gov.tubitak.uekae.esya.asn.cms.Attributes attributes;  // optional
      public _SeqOfPartialHashtree reducedHashtree;  // optional
      public ContentInfo timeStamp;

      static ArchiveTimeStamp ()
      {
         Asn1Type.SetKey2 (_etsi101733Values._rtkey);
      }

      public ArchiveTimeStamp () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ArchiveTimeStamp (
         AlgorithmIdentifier digestAlgorithm_,
         tr.gov.tubitak.uekae.esya.asn.cms.Attributes attributes_,
         _SeqOfPartialHashtree reducedHashtree_,
         ContentInfo timeStamp_
      )
         : base ()
      {
         digestAlgorithm = digestAlgorithm_;
         attributes = attributes_;
         reducedHashtree = reducedHashtree_;
         timeStamp = timeStamp_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ArchiveTimeStamp (
         ContentInfo timeStamp_
      )
         : base ()
      {
         timeStamp = timeStamp_;
      }

      public void Init () {
         digestAlgorithm = null;
         attributes = null;
         reducedHashtree = null;
         timeStamp = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode digestAlgorithm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            digestAlgorithm = new AlgorithmIdentifier();
            digestAlgorithm.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode attributes

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            attributes = new Attributes();
            attributes.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode reducedHashtree

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            reducedHashtree = new _SeqOfPartialHashtree();
            reducedHashtree.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode timeStamp

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            timeStamp = new ContentInfo();
            timeStamp.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode timeStamp

         len = timeStamp.Encode (buffer, true);
         _aal += len;

         // encode reducedHashtree

         if (reducedHashtree != null) {
            len = reducedHashtree.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode attributes

         if (attributes != null) {
            len = attributes.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode digestAlgorithm

         if (digestAlgorithm != null) {
            len = digestAlgorithm.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (digestAlgorithm != null) digestAlgorithm.Print (_out, "digestAlgorithm", _level+1);
         if (attributes != null) attributes.Print (_out, "attributes", _level+1);
         if (reducedHashtree != null) reducedHashtree.Print (_out, "reducedHashtree", _level+1);
         if (timeStamp != null) timeStamp.Print (_out, "timeStamp", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
