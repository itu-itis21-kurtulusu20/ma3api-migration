// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.ocsp {

   using Extensions = tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

   public class SingleResponse : Asn1Type {
      public CertID certID;
      public tr.gov.tubitak.uekae.esya.asn.ocsp.CertStatus certStatus;
      public Asn1GeneralizedTime thisUpdate;
      public Asn1GeneralizedTime nextUpdate;  // optional
      public Extensions singleExtensions;  // optional

      static SingleResponse ()
      {
         Asn1Type.SetKey2 (_ocspValues._rtkey);
      }

      public SingleResponse () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public SingleResponse (
         CertID certID_,
         tr.gov.tubitak.uekae.esya.asn.ocsp.CertStatus certStatus_,
         Asn1GeneralizedTime thisUpdate_,
         Asn1GeneralizedTime nextUpdate_,
         Extensions singleExtensions_
      )
         : base ()
      {
         certID = certID_;
         certStatus = certStatus_;
         thisUpdate = thisUpdate_;
         nextUpdate = nextUpdate_;
         singleExtensions = singleExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public SingleResponse (
         CertID certID_,
         tr.gov.tubitak.uekae.esya.asn.ocsp.CertStatus certStatus_,
         Asn1GeneralizedTime thisUpdate_
      )
         : base ()
      {
         certID = certID_;
         certStatus = certStatus_;
         thisUpdate = thisUpdate_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public SingleResponse (CertID certID_,
         tr.gov.tubitak.uekae.esya.asn.ocsp.CertStatus certStatus_,
         string thisUpdate_,
         string nextUpdate_,
         Extensions singleExtensions_
      )
         : base ()
      {
         certID = certID_;
         certStatus = certStatus_;
         thisUpdate = new Asn1GeneralizedTime (thisUpdate_);
         nextUpdate = new Asn1GeneralizedTime (nextUpdate_);
         singleExtensions = singleExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public SingleResponse (
         CertID certID_,
         tr.gov.tubitak.uekae.esya.asn.ocsp.CertStatus certStatus_,
         string thisUpdate_
      )
         : base ()
      {
         certID = certID_;
         certStatus = certStatus_;
         thisUpdate = new Asn1GeneralizedTime (thisUpdate_);
      }

      public void Init () {
         certID = null;
         certStatus = null;
         thisUpdate = null;
         nextUpdate = null;
         singleExtensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode certID

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            certID = new CertID();
            certID.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode certStatus

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2))
            {
               certStatus = new CertStatus();
               certStatus.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode thisUpdate

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
            thisUpdate = new Asn1GeneralizedTime (true);
            thisUpdate.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode nextUpdate

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            nextUpdate = new Asn1GeneralizedTime (true);
            nextUpdate.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode singleExtensions

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            singleExtensions = new Extensions();
            singleExtensions.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode singleExtensions

         if (singleExtensions != null) {
            len = singleExtensions.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode nextUpdate

         if (nextUpdate != null) {
            len = nextUpdate.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode thisUpdate

         len = thisUpdate.Encode (buffer, true);
         _aal += len;

         // encode certStatus

         len = certStatus.Encode (buffer, true);
         _aal += len;

         // encode certID

         len = certID.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (certID != null) certID.Print (_out, "certID", _level+1);
         if (certStatus != null) certStatus.Print (_out, "certStatus", _level+1);
         if (thisUpdate != null) thisUpdate.Print (_out, "thisUpdate", _level+1);
         if (nextUpdate != null) nextUpdate.Print (_out, "nextUpdate", _level+1);
         if (singleExtensions != null) singleExtensions.Print (_out, "singleExtensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
