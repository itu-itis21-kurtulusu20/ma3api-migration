// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.ocsp {

   using AlgorithmIdentifier = tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier;

   public class CertID : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier hashAlgorithm;
      public Asn1OctetString issuerNameHash;
      public Asn1OctetString issuerKeyHash;
      public Asn1BigInteger serialNumber;

      static CertID ()
      {
         Asn1Type.SetKey2 (_ocspValues._rtkey);
      }

      public CertID () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CertID (
         tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier hashAlgorithm_,
         Asn1OctetString issuerNameHash_,
         Asn1OctetString issuerKeyHash_,
         Asn1BigInteger serialNumber_
      )
         : base ()
      {
         hashAlgorithm = hashAlgorithm_;
         issuerNameHash = issuerNameHash_;
         issuerKeyHash = issuerKeyHash_;
         serialNumber = serialNumber_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public CertID (tr.gov.tubitak.uekae.esya.asn.x509.AlgorithmIdentifier hashAlgorithm_,
         byte[] issuerNameHash_,
         byte[] issuerKeyHash_,
         Asn1BigInteger serialNumber_
      )
         : base ()
      {
         hashAlgorithm = hashAlgorithm_;
         issuerNameHash = new Asn1OctetString (issuerNameHash_);
         issuerKeyHash = new Asn1OctetString (issuerKeyHash_);
         serialNumber = serialNumber_;
      }

      public void Init () {
         hashAlgorithm = null;
         issuerNameHash = null;
         issuerKeyHash = null;
         serialNumber = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode hashAlgorithm

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            hashAlgorithm = new AlgorithmIdentifier();
            hashAlgorithm.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode issuerNameHash

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            issuerNameHash = new Asn1OctetString();
            issuerNameHash.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode issuerKeyHash

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
            issuerKeyHash = new Asn1OctetString();
            issuerKeyHash.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode serialNumber

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            serialNumber = new Asn1BigInteger();
            serialNumber.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode serialNumber

         len = serialNumber.Encode (buffer, true);
         _aal += len;

         // encode issuerKeyHash

         len = issuerKeyHash.Encode (buffer, true);
         _aal += len;

         // encode issuerNameHash

         len = issuerNameHash.Encode (buffer, true);
         _aal += len;

         // encode hashAlgorithm

         len = hashAlgorithm.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (hashAlgorithm != null) hashAlgorithm.Print (_out, "hashAlgorithm", _level+1);
         if (issuerNameHash != null) issuerNameHash.Print (_out, "issuerNameHash", _level+1);
         if (issuerKeyHash != null) issuerKeyHash.Print (_out, "issuerKeyHash", _level+1);
         if (serialNumber != null) serialNumber.Print (_out, "serialNumber", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
