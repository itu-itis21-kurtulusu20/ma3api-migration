// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.ocsp {

   public class CertStatus : Asn1Choice {
      // Choice element identifier constants
      public const byte _GOOD = 1;
      public const byte _REVOKED = 2;
      public const byte _UNKNOWN = 3;

      static CertStatus ()
      {
         Asn1Type.SetKey2 (_ocspValues._rtkey);
      }

      public CertStatus () : base()
      {
      }

      public CertStatus (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _GOOD: return "good";
            case _REVOKED: return "revoked";
            case _UNKNOWN: return "unknown";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_good () {
         SetElement (_GOOD, Asn1Null.NULL_VALUE);
      }

      public void Set_revoked (RevokedInfo value) {
         SetElement (_REVOKED, value);
      }

      public void Set_unknown () {
         SetElement (_UNKNOWN, Asn1Null.NULL_VALUE);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 0))
         {
            Asn1Null good;
            good = new Asn1Null();
            good.Decode (buffer, false, len);
            SetElement (_GOOD, good);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
         {
            RevokedInfo revoked;
            revoked = new RevokedInfo();
            revoked.Decode (buffer, false, len);
            SetElement (_REVOKED, revoked);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.PRIM, 2)) {
            Asn1Null unknown;
            unknown = new Asn1Null();
            unknown.Decode (buffer, false, len);
            SetElement (_UNKNOWN, unknown);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode good
         case _GOOD:
            Asn1Null good = (Asn1Null) GetElement();
            len = good.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
            break;

         // encode revoked
         case _REVOKED:
            RevokedInfo revoked = (RevokedInfo) GetElement();
            len = revoked.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         // encode unknown
         case _UNKNOWN:
            Asn1Null unknown = (Asn1Null) GetElement();
            len = unknown.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
