// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.ocsp {

   using GeneralName = tr.gov.tubitak.uekae.esya.asn.x509.GeneralName;
   using Extensions = tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

   public class TBSRequest : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.ocsp.Version version;  // default = Version.v1
      public GeneralName requestorName;  // optional
      public _SeqOfRequest requestList;
      public Extensions requestExtensions;  // optional

      static TBSRequest ()
      {
         Asn1Type.SetKey2 (_ocspValues._rtkey);
      }

      public TBSRequest () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public TBSRequest (
         tr.gov.tubitak.uekae.esya.asn.ocsp.Version version_,
         GeneralName requestorName_,
         _SeqOfRequest requestList_,
         Extensions requestExtensions_
      )
         : base ()
      {
         version = version_;
         requestorName = requestorName_;
         requestList = requestList_;
         requestExtensions = requestExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public TBSRequest (
         _SeqOfRequest requestList_
      )
         : base ()
      {
         version = new Version (Version.v1);
         requestList = requestList_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public TBSRequest (long version_,
         GeneralName requestorName_,
         _SeqOfRequest requestList_,
         Extensions requestExtensions_
      )
         : base ()
      {
         version = new tr.gov.tubitak.uekae.esya.asn.ocsp.Version (version_);
         requestorName = requestorName_;
         requestList = requestList_;
         requestExtensions = requestExtensions_;
      }

      public void Init () {
         version = new Version (Version.v1);
         requestorName = null;
         requestList = null;
         requestExtensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            version = new Version();
            version.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode requestorName

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            requestorName = new GeneralName();
            requestorName.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode requestList

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            requestList = new _SeqOfRequest();
            requestList.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode requestExtensions

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            requestExtensions = new Extensions();
            requestExtensions.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode requestExtensions

         if (requestExtensions != null) {
            len = requestExtensions.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode requestList

         len = requestList.Encode (buffer, true);
         _aal += len;

         // encode requestorName

         if (requestorName != null) {
            len = requestorName.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode version

         if (!version.Equals (Version.v1)) {
            len = version.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (requestorName != null) requestorName.Print (_out, "requestorName", _level+1);
         if (requestList != null) requestList.Print (_out, "requestList", _level+1);
         if (requestExtensions != null) requestExtensions.Print (_out, "requestExtensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
