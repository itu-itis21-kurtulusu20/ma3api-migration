// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.ocsp {

   public class CrlID : Asn1Type {
      public Asn1IA5String crlUrl;  // optional
      public Asn1Integer crlNum;  // optional
      public Asn1GeneralizedTime crlTime;  // optional

      static CrlID ()
      {
         Asn1Type.SetKey2 (_ocspValues._rtkey);
      }

      public CrlID () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CrlID (
         Asn1IA5String crlUrl_,
         Asn1Integer crlNum_,
         Asn1GeneralizedTime crlTime_
      )
         : base ()
      {
         crlUrl = crlUrl_;
         crlNum = crlNum_;
         crlTime = crlTime_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public CrlID (string crlUrl_,
         long crlNum_,
         string crlTime_
      )
         : base ()
      {
         crlUrl = new Asn1IA5String (crlUrl_);
         crlNum = new Asn1Integer (crlNum_);
         crlTime = new Asn1GeneralizedTime (crlTime_);
      }

      public void Init () {
         crlUrl = null;
         crlNum = null;
         crlTime = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode crlUrl

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            crlUrl = new Asn1IA5String();
            crlUrl.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode crlNum

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            crlNum = new Asn1Integer();
            crlNum.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode crlTime

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            crlTime = new Asn1GeneralizedTime (true);
            crlTime.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crlTime

         if (crlTime != null) {
            len = crlTime.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode crlNum

         if (crlNum != null) {
            len = crlNum.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode crlUrl

         if (crlUrl != null) {
            len = crlUrl.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (crlUrl != null) crlUrl.Print (_out, "crlUrl", _level+1);
         if (crlNum != null) crlNum.Print (_out, "crlNum", _level+1);
         if (crlTime != null) crlTime.Print (_out, "crlTime", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
