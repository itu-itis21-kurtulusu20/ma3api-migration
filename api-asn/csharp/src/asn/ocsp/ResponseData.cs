// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.ocsp {

   using Extensions = tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

   public class ResponseData : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.ocsp.Version version;  // default = Version.v1
      public ResponderID responderID;
      public Asn1GeneralizedTime producedAt;
      public _SeqOfSingleResponse responses;
      public Extensions responseExtensions;  // optional

      static ResponseData ()
      {
         Asn1Type.SetKey2 (_ocspValues._rtkey);
      }

      public ResponseData () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ResponseData (
         tr.gov.tubitak.uekae.esya.asn.ocsp.Version version_,
         ResponderID responderID_,
         Asn1GeneralizedTime producedAt_,
         _SeqOfSingleResponse responses_,
         Extensions responseExtensions_
      )
         : base ()
      {
         version = version_;
         responderID = responderID_;
         producedAt = producedAt_;
         responses = responses_;
         responseExtensions = responseExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ResponseData (
         ResponderID responderID_,
         Asn1GeneralizedTime producedAt_,
         _SeqOfSingleResponse responses_
      )
         : base ()
      {
         version = new Version (Version.v1);
         responderID = responderID_;
         producedAt = producedAt_;
         responses = responses_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ResponseData (long version_,
         ResponderID responderID_,
         string producedAt_,
         _SeqOfSingleResponse responses_,
         Extensions responseExtensions_
      )
         : base ()
      {
         version = new tr.gov.tubitak.uekae.esya.asn.ocsp.Version (version_);
         responderID = responderID_;
         producedAt = new Asn1GeneralizedTime (producedAt_);
         responses = responses_;
         responseExtensions = responseExtensions_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public ResponseData (
         ResponderID responderID_,
         string producedAt_,
         _SeqOfSingleResponse responses_
      )
         : base ()
      {
         version = new Version (Version.v1);
         responderID = responderID_;
         producedAt = new Asn1GeneralizedTime (producedAt_);
         responses = responses_;
      }

      public void Init () {
         version = new Version (Version.v1);
         responderID = null;
         producedAt = null;
         responses = null;
         responseExtensions = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode version

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            version = new Version();
            version.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode responderID

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
            {
               responderID = new ResponderID();
               responderID.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode producedAt

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
            producedAt = new Asn1GeneralizedTime (true);
            producedAt.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode responses

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            responses = new _SeqOfSingleResponse();
            responses.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode responseExtensions

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            responseExtensions = new Extensions();
            responseExtensions.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode responseExtensions

         if (responseExtensions != null) {
            len = responseExtensions.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode responses

         len = responses.Encode (buffer, true);
         _aal += len;

         // encode producedAt

         len = producedAt.Encode (buffer, true);
         _aal += len;

         // encode responderID

         len = responderID.Encode (buffer, true);
         _aal += len;

         // encode version

         if (!version.Equals (Version.v1)) {
            len = version.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (version != null) version.Print (_out, "version", _level+1);
         if (responderID != null) responderID.Print (_out, "responderID", _level+1);
         if (producedAt != null) producedAt.Print (_out, "producedAt", _level+1);
         if (responses != null) responses.Print (_out, "responses", _level+1);
         if (responseExtensions != null) responseExtensions.Print (_out, "responseExtensions", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
