// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cvc {

   public class ElcPuK : Asn1Type {
      public new static readonly Asn1Tag _TAG = new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 73);

      public Asn1OctetString oid;  // optional
      public Asn1OctetString algRef;  // optional
      public Asn1OctetString p;  // optional
      public Asn1OctetString a;  // optional
      public Asn1OctetString b;  // optional
      public Asn1OctetString g;  // optional
      public Asn1OctetString n;  // optional
      public Asn1OctetString q;
      public Asn1OctetString h;  // optional

      static ElcPuK ()
      {
         Asn1Type.SetKey2 (_cvcValues._rtkey);
      }

      public ElcPuK () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ElcPuK (
         Asn1OctetString oid_,
         Asn1OctetString algRef_,
         Asn1OctetString p_,
         Asn1OctetString a_,
         Asn1OctetString b_,
         Asn1OctetString g_,
         Asn1OctetString n_,
         Asn1OctetString q_,
         Asn1OctetString h_
      )
         : base ()
      {
         oid = oid_;
         algRef = algRef_;
         p = p_;
         a = a_;
         b = b_;
         g = g_;
         n = n_;
         q = q_;
         h = h_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ElcPuK (
         Asn1OctetString q_
      )
         : base ()
      {
         q = q_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ElcPuK (byte[] oid_,
         byte[] algRef_,
         byte[] p_,
         byte[] a_,
         byte[] b_,
         byte[] g_,
         byte[] n_,
         byte[] q_,
         byte[] h_
      )
         : base ()
      {
         oid = new Asn1OctetString (oid_);
         algRef = new Asn1OctetString (algRef_);
         p = new Asn1OctetString (p_);
         a = new Asn1OctetString (a_);
         b = new Asn1OctetString (b_);
         g = new Asn1OctetString (g_);
         n = new Asn1OctetString (n_);
         q = new Asn1OctetString (q_);
         h = new Asn1OctetString (h_);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public ElcPuK (
         byte[] q_
      )
         : base ()
      {
         q = new Asn1OctetString (q_);
      }

      public void Init () {
         oid = null;
         algRef = null;
         p = null;
         a = null;
         b = null;
         g = null;
         n = null;
         q = null;
         h = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, _TAG) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode oid

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, true)) {
            int offset = buffer.ByteCount;
            oid = new Asn1OctetString();
            oid.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode algRef

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            algRef = new Asn1OctetString();
            algRef.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode p

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            p = new Asn1OctetString();
            p.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode a

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            a = new Asn1OctetString();
            a.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode b

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            b = new Asn1OctetString();
            b.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode g

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, elemLen, true)) {
            int offset = buffer.ByteCount;
            g = new Asn1OctetString();
            g.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode n

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, elemLen, true)) {
            int offset = buffer.ByteCount;
            n = new Asn1OctetString();
            n.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode q

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, elemLen, true)) {
            int offset = buffer.ByteCount;
            q = new Asn1OctetString();
            q.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode h

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, elemLen, true)) {
            int offset = buffer.ByteCount;
            h = new Asn1OctetString();
            h.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode h

         if (h != null) {
            len = h.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
            _aal += len;
         }

         // encode q

         len = q.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 6, len);
         _aal += len;

         // encode n

         if (n != null) {
            len = n.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 5, len);
            _aal += len;
         }

         // encode g

         if (g != null) {
            len = g.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 4, len);
            _aal += len;
         }

         // encode b

         if (b != null) {
            len = b.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 3, len);
            _aal += len;
         }

         // encode a

         if (a != null) {
            len = a.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
            _aal += len;
         }

         // encode p

         if (p != null) {
            len = p.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
            _aal += len;
         }

         // encode algRef

         if (algRef != null) {
            len = algRef.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
         }

         // encode oid

         if (oid != null) {
            len = oid.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (_TAG, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (oid != null) oid.Print (_out, "oid", _level+1);
         if (algRef != null) algRef.Print (_out, "algRef", _level+1);
         if (p != null) p.Print (_out, "p", _level+1);
         if (a != null) a.Print (_out, "a", _level+1);
         if (b != null) b.Print (_out, "b", _level+1);
         if (g != null) g.Print (_out, "g", _level+1);
         if (n != null) n.Print (_out, "n", _level+1);
         if (q != null) q.Print (_out, "q", _level+1);
         if (h != null) h.Print (_out, "h", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
