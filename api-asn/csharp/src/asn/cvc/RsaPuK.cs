// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cvc {

   public class RsaPuK : Asn1Type {
      public new static readonly Asn1Tag _TAG = new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 73);

      public Asn1OctetString oid;  // optional
      public Asn1OctetString algRef;  // optional
      public Asn1OctetString modulus;
      public Asn1OctetString exponent;

      static RsaPuK ()
      {
         Asn1Type.SetKey2 (_cvcValues._rtkey);
      }

      public RsaPuK () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public RsaPuK (
         Asn1OctetString oid_,
         Asn1OctetString algRef_,
         Asn1OctetString modulus_,
         Asn1OctetString exponent_
      )
         : base ()
      {
         oid = oid_;
         algRef = algRef_;
         modulus = modulus_;
         exponent = exponent_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public RsaPuK (
         Asn1OctetString modulus_,
         Asn1OctetString exponent_
      )
         : base ()
      {
         modulus = modulus_;
         exponent = exponent_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public RsaPuK (byte[] oid_,
         byte[] algRef_,
         byte[] modulus_,
         byte[] exponent_
      )
         : base ()
      {
         oid = new Asn1OctetString (oid_);
         algRef = new Asn1OctetString (algRef_);
         modulus = new Asn1OctetString (modulus_);
         exponent = new Asn1OctetString (exponent_);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public RsaPuK (
         byte[] modulus_,
         byte[] exponent_
      )
         : base ()
      {
         modulus = new Asn1OctetString (modulus_);
         exponent = new Asn1OctetString (exponent_);
      }

      public void Init () {
         oid = null;
         algRef = null;
         modulus = null;
         exponent = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, _TAG) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode oid

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, true)) {
            int offset = buffer.ByteCount;
            oid = new Asn1OctetString();
            oid.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode algRef

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            algRef = new Asn1OctetString();
            algRef.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode modulus

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            modulus = new Asn1OctetString();
            modulus.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode exponent

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
            int offset = buffer.ByteCount;
            exponent = new Asn1OctetString();
            exponent.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode exponent

         len = exponent.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;

         // encode modulus

         len = modulus.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;

         // encode algRef

         if (algRef != null) {
            len = algRef.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
            _aal += len;
         }

         // encode oid

         if (oid != null) {
            len = oid.Encode (buffer, false);
            len += buffer.EncodeTagAndLength (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, len);
            _aal += len;
         }

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (_TAG, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (oid != null) oid.Print (_out, "oid", _level+1);
         if (algRef != null) algRef.Print (_out, "algRef", _level+1);
         if (modulus != null) modulus.Print (_out, "modulus", _level+1);
         if (exponent != null) exponent.Print (_out, "exponent", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
