// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.depo {

   using Name = tr.gov.tubitak.uekae.esya.asn.x509.Name;
   using Time = tr.gov.tubitak.uekae.esya.asn.x509.Time;
   using KeyUsage = tr.gov.tubitak.uekae.esya.asn.x509.KeyUsage;

   public class DepoASNEklenecekKokSertifika : Asn1Type {
      public Asn1OctetString kokSertifikaValue;
      public Asn1OctetString kokSertifikaHash;
      public Asn1BigInteger kokSerialNumber;
      public Name kokIssuerName;
      public Name kokSubjectName;
      public Time kokStartDate;
      public Time kokEndDate;
      public KeyUsage kokKeyUsage;
      public Asn1OctetString kokSubjectKeyIdentifier;
      public KokSertifikaTipi kokSertifikaTipi;
      public KOKGuvenSeviyesi kokGuvenSeviyesi;

      static DepoASNEklenecekKokSertifika ()
      {
         Asn1Type.SetKey2 (_depoValues._rtkey);
      }

      public DepoASNEklenecekKokSertifika () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public DepoASNEklenecekKokSertifika (
         Asn1OctetString kokSertifikaValue_,
         Asn1OctetString kokSertifikaHash_,
         Asn1BigInteger kokSerialNumber_,
         Name kokIssuerName_,
         Name kokSubjectName_,
         Time kokStartDate_,
         Time kokEndDate_,
         KeyUsage kokKeyUsage_,
         Asn1OctetString kokSubjectKeyIdentifier_,
         KokSertifikaTipi kokSertifikaTipi_,
         KOKGuvenSeviyesi kokGuvenSeviyesi_
      )
         : base ()
      {
         kokSertifikaValue = kokSertifikaValue_;
         kokSertifikaHash = kokSertifikaHash_;
         kokSerialNumber = kokSerialNumber_;
         kokIssuerName = kokIssuerName_;
         kokSubjectName = kokSubjectName_;
         kokStartDate = kokStartDate_;
         kokEndDate = kokEndDate_;
         kokKeyUsage = kokKeyUsage_;
         kokSubjectKeyIdentifier = kokSubjectKeyIdentifier_;
         kokSertifikaTipi = kokSertifikaTipi_;
         kokGuvenSeviyesi = kokGuvenSeviyesi_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public DepoASNEklenecekKokSertifika (byte[] kokSertifikaValue_,
         byte[] kokSertifikaHash_,
         Asn1BigInteger kokSerialNumber_,
         Name kokIssuerName_,
         Name kokSubjectName_,
         Time kokStartDate_,
         Time kokEndDate_,
         KeyUsage kokKeyUsage_,
         byte[] kokSubjectKeyIdentifier_,
         KokSertifikaTipi kokSertifikaTipi_,
         KOKGuvenSeviyesi kokGuvenSeviyesi_
      )
         : base ()
      {
         kokSertifikaValue = new Asn1OctetString (kokSertifikaValue_);
         kokSertifikaHash = new Asn1OctetString (kokSertifikaHash_);
         kokSerialNumber = kokSerialNumber_;
         kokIssuerName = kokIssuerName_;
         kokSubjectName = kokSubjectName_;
         kokStartDate = kokStartDate_;
         kokEndDate = kokEndDate_;
         kokKeyUsage = kokKeyUsage_;
         kokSubjectKeyIdentifier = new Asn1OctetString (kokSubjectKeyIdentifier_);
         kokSertifikaTipi = kokSertifikaTipi_;
         kokGuvenSeviyesi = kokGuvenSeviyesi_;
      }

      public void Init () {
         kokSertifikaValue = null;
         kokSertifikaHash = null;
         kokSerialNumber = null;
         kokIssuerName = null;
         kokSubjectName = null;
         kokStartDate = null;
         kokEndDate = null;
         kokKeyUsage = null;
         kokSubjectKeyIdentifier = null;
         kokSertifikaTipi = null;
         kokGuvenSeviyesi = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode kokSertifikaValue

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            kokSertifikaValue = new Asn1OctetString();
            kokSertifikaValue.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokSertifikaHash

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            kokSertifikaHash = new Asn1OctetString();
            kokSertifikaHash.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokSerialNumber

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, elemLen, true)) {
            kokSerialNumber = new Asn1BigInteger();
            kokSerialNumber.Decode (buffer, false, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokIssuerName

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            int offset = buffer.ByteCount;
            kokIssuerName = new Name();
            kokIssuerName.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokSubjectName

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
            int offset = buffer.ByteCount;
            kokSubjectName = new Name();
            kokSubjectName.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokStartDate

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 5, elemLen, true)) {
            int offset = buffer.ByteCount;
            kokStartDate = new Time();
            kokStartDate.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokEndDate

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 6, elemLen, true)) {
            int offset = buffer.ByteCount;
            kokEndDate = new Time();
            kokEndDate.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokKeyUsage

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, elemLen, true)) {
            int offset = buffer.ByteCount;
            kokKeyUsage = new KeyUsage();
            kokKeyUsage.Decode (buffer, false, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokSubjectKeyIdentifier

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, elemLen, true)) {
            kokSubjectKeyIdentifier = new Asn1OctetString();
            kokSubjectKeyIdentifier.Decode (buffer, false, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokSertifikaTipi

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 9, elemLen, true)) {
            int offset = buffer.ByteCount;
            int tval = buffer.DecodeEnumValue (KokSertifikaTipi._TAG, false, elemLen.mValue);
            kokSertifikaTipi = KokSertifikaTipi.ValueOf (tval);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode kokGuvenSeviyesi

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.PRIM, 10, elemLen, true)) {
            int offset = buffer.ByteCount;
            int tval = buffer.DecodeEnumValue (KOKGuvenSeviyesi._TAG, false, elemLen.mValue);
            kokGuvenSeviyesi = KOKGuvenSeviyesi.ValueOf (tval);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode kokGuvenSeviyesi

         len = kokGuvenSeviyesi.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 10, len);
         _aal += len;

         // encode kokSertifikaTipi

         len = kokSertifikaTipi.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 9, len);
         _aal += len;

         // encode kokSubjectKeyIdentifier

         len = kokSubjectKeyIdentifier.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 8, len);
         _aal += len;

         // encode kokKeyUsage

         len = kokKeyUsage.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 7, len);
         _aal += len;

         // encode kokEndDate

         len = kokEndDate.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
         _aal += len;

         // encode kokStartDate

         len = kokStartDate.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
         _aal += len;

         // encode kokSubjectName

         len = kokSubjectName.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;

         // encode kokIssuerName

         len = kokIssuerName.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;

         // encode kokSerialNumber

         len = kokSerialNumber.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 2, len);
         _aal += len;

         // encode kokSertifikaHash

         len = kokSertifikaHash.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 1, len);
         _aal += len;

         // encode kokSertifikaValue

         len = kokSertifikaValue.Encode (buffer, false);
         len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.PRIM, 0, len);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (kokSertifikaValue != null) kokSertifikaValue.Print (_out, "kokSertifikaValue", _level+1);
         if (kokSertifikaHash != null) kokSertifikaHash.Print (_out, "kokSertifikaHash", _level+1);
         if (kokSerialNumber != null) kokSerialNumber.Print (_out, "kokSerialNumber", _level+1);
         if (kokIssuerName != null) kokIssuerName.Print (_out, "kokIssuerName", _level+1);
         if (kokSubjectName != null) kokSubjectName.Print (_out, "kokSubjectName", _level+1);
         if (kokStartDate != null) kokStartDate.Print (_out, "kokStartDate", _level+1);
         if (kokEndDate != null) kokEndDate.Print (_out, "kokEndDate", _level+1);
         if (kokKeyUsage != null) kokKeyUsage.Print (_out, "kokKeyUsage", _level+1);
         if (kokSubjectKeyIdentifier != null) kokSubjectKeyIdentifier.Print (_out, "kokSubjectKeyIdentifier", _level+1);
         if (kokSertifikaTipi != null) kokSertifikaTipi.Print (_out, "kokSertifikaTipi", _level+1);
         if (kokGuvenSeviyesi != null) kokGuvenSeviyesi.Print (_out, "kokGuvenSeviyesi", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
