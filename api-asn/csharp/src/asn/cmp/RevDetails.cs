// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   using CertTemplate = tr.gov.tubitak.uekae.esya.asn.crmf.CertTemplate;
   using Extensions = tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

   public class RevDetails : Asn1Type {
      public CertTemplate certDetails;
      public Extensions crlEntryDetails;  // optional

      static RevDetails ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public RevDetails () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public RevDetails (
         CertTemplate certDetails_,
         Extensions crlEntryDetails_
      )
         : base ()
      {
         certDetails = certDetails_;
         crlEntryDetails = crlEntryDetails_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public RevDetails (
         CertTemplate certDetails_
      )
         : base ()
      {
         certDetails = certDetails_;
      }

      public void Init () {
         certDetails = null;
         crlEntryDetails = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode certDetails

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            certDetails = new CertTemplate();
            certDetails.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode crlEntryDetails

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            crlEntryDetails = new Extensions();
            crlEntryDetails.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crlEntryDetails

         if (crlEntryDetails != null) {
            len = crlEntryDetails.Encode (buffer, true);
            _aal += len;
         }

         // encode certDetails

         len = certDetails.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (certDetails != null) certDetails.Print (_out, "certDetails", _level+1);
         if (crlEntryDetails != null) crlEntryDetails.Print (_out, "crlEntryDetails", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
