// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   using EncryptedValue = tr.gov.tubitak.uekae.esya.asn.crmf.EncryptedValue;

   public class CertOrEncCert : Asn1Choice {
      // Choice element identifier constants
      public const byte _CERTIFICATE = 1;
      public const byte _ENCRYPTEDCERT = 2;

      static CertOrEncCert ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public CertOrEncCert () : base()
      {
      }

      public CertOrEncCert (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _CERTIFICATE: return "certificate";
            case _ENCRYPTEDCERT: return "encryptedCert";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_certificate (CMPCertificate value) {
         SetElement (_CERTIFICATE, value);
      }

      public void Set_encryptedCert (EncryptedValue value) {
         SetElement (_ENCRYPTEDCERT, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            CMPCertificate certificate;
            certificate = new CMPCertificate();
            certificate.Decode (buffer, true, len);
            SetElement (_CERTIFICATE, certificate);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
         {
            EncryptedValue encryptedCert;
            encryptedCert = new EncryptedValue();
            encryptedCert.Decode (buffer, true, len);
            SetElement (_ENCRYPTEDCERT, encryptedCert);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode certificate
         case _CERTIFICATE:
            CMPCertificate certificate = (CMPCertificate) GetElement();
            len = certificate.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
            break;

         // encode encryptedCert
         case _ENCRYPTEDCERT:
            EncryptedValue encryptedCert = (EncryptedValue) GetElement();
            len = encryptedCert.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
