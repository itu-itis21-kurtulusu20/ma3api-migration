// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   using EncryptedValue = tr.gov.tubitak.uekae.esya.asn.crmf.EncryptedValue;
   using PKIPublicationInfo = tr.gov.tubitak.uekae.esya.asn.crmf.PKIPublicationInfo;

   public class CertifiedKeyPair : Asn1Type {
      public CertOrEncCert certOrEncCert;
      public EncryptedValue privateKey;  // optional
      public PKIPublicationInfo publicationInfo;  // optional

      static CertifiedKeyPair ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public CertifiedKeyPair () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CertifiedKeyPair (
         CertOrEncCert certOrEncCert_,
         EncryptedValue privateKey_,
         PKIPublicationInfo publicationInfo_
      )
         : base ()
      {
         certOrEncCert = certOrEncCert_;
         privateKey = privateKey_;
         publicationInfo = publicationInfo_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public CertifiedKeyPair (
         CertOrEncCert certOrEncCert_
      )
         : base ()
      {
         certOrEncCert = certOrEncCert_;
      }

      public void Init () {
         certOrEncCert = null;
         privateKey = null;
         publicationInfo = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode certOrEncCert

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
                tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
            {
               certOrEncCert = new CertOrEncCert();
               certOrEncCert.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode privateKey

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            privateKey = new EncryptedValue();
            privateKey.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode publicationInfo

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            int offset = buffer.ByteCount;
            publicationInfo = new PKIPublicationInfo();
            publicationInfo.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode publicationInfo

         if (publicationInfo != null) {
            len = publicationInfo.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
         }

         // encode privateKey

         if (privateKey != null) {
            len = privateKey.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode certOrEncCert

         len = certOrEncCert.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (certOrEncCert != null) certOrEncCert.Print (_out, "certOrEncCert", _level+1);
         if (privateKey != null) privateKey.Print (_out, "privateKey", _level+1);
         if (publicationInfo != null) publicationInfo.Print (_out, "publicationInfo", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
