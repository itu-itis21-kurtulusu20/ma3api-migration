// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   using CertReqMessages = tr.gov.tubitak.uekae.esya.asn.crmf.CertReqMessages;
   using CertificationRequest = tr.gov.tubitak.uekae.esya.asn.pkcs10.CertificationRequest;

   public class PKIBody : Asn1Choice {
      // Choice element identifier constants
      public const byte _IR = 1;
      public const byte _IP = 2;
      public const byte _CR = 3;
      public const byte _CP = 4;
      public const byte _P10CR = 5;
      public const byte _POPDECC = 6;
      public const byte _POPDECR = 7;
      public const byte _KUR = 8;
      public const byte _KUP = 9;
      public const byte _KRR = 10;
      public const byte _KRP = 11;
      public const byte _RR = 12;
      public const byte _RP = 13;
      public const byte _CCR = 14;
      public const byte _CCP = 15;
      public const byte _CKUANN = 16;
      public const byte _CANN = 17;
      public const byte _RANN = 18;
      public const byte _CRLANN = 19;
      public const byte _PKICONF = 20;
      public const byte _NESTED = 21;
      public const byte _GENM = 22;
      public const byte _GENP = 23;
      public const byte _ERROR = 24;
      public const byte _CERTCONF = 25;
      public const byte _POLLREQ = 26;
      public const byte _POLLREP = 27;
      public const byte _CVCREQ = 28;

      static PKIBody ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public PKIBody () : base()
      {
      }

      public PKIBody (byte choiceId_, Asn1Type element_) : base()
      {
         SetElement (choiceId_, element_);
      }

      public override string ElemName {
         get {
            switch (choiceID) {
            case _IR: return "ir";
            case _IP: return "ip";
            case _CR: return "cr";
            case _CP: return "cp";
            case _P10CR: return "p10cr";
            case _POPDECC: return "popdecc";
            case _POPDECR: return "popdecr";
            case _KUR: return "kur";
            case _KUP: return "kup";
            case _KRR: return "krr";
            case _KRP: return "krp";
            case _RR: return "rr";
            case _RP: return "rp";
            case _CCR: return "ccr";
            case _CCP: return "ccp";
            case _CKUANN: return "ckuann";
            case _CANN: return "cann";
            case _RANN: return "rann";
            case _CRLANN: return "crlann";
            case _PKICONF: return "pkiconf";
            case _NESTED: return "nested";
            case _GENM: return "genm";
            case _GENP: return "genp";
            case _ERROR: return "error";
            case _CERTCONF: return "certConf";
            case _POLLREQ: return "pollReq";
            case _POLLREP: return "pollRep";
            case _CVCREQ: return "cvcReq";
            default: return "UNDEFINED";
            }
         }
      }

      public void Set_ir (CertReqMessages value) {
         SetElement (_IR, value);
      }

      public void Set_ip (CertRepMessage value) {
         SetElement (_IP, value);
      }

      public void Set_cr (CertReqMessages value) {
         SetElement (_CR, value);
      }

      public void Set_cp (CertRepMessage value) {
         SetElement (_CP, value);
      }

      public void Set_p10cr (CertificationRequest value) {
         SetElement (_P10CR, value);
      }

      public void Set_popdecc (POPODecKeyChallContent value) {
         SetElement (_POPDECC, value);
      }

      public void Set_popdecr (POPODecKeyRespContent value) {
         SetElement (_POPDECR, value);
      }

      public void Set_kur (CertReqMessages value) {
         SetElement (_KUR, value);
      }

      public void Set_kup (CertRepMessage value) {
         SetElement (_KUP, value);
      }

      public void Set_krr (CertReqMessages value) {
         SetElement (_KRR, value);
      }

      public void Set_krp (KeyRecRepContent value) {
         SetElement (_KRP, value);
      }

      public void Set_rr (RevReqContent value) {
         SetElement (_RR, value);
      }

      public void Set_rp (RevRepContent value) {
         SetElement (_RP, value);
      }

      public void Set_ccr (CertReqMessages value) {
         SetElement (_CCR, value);
      }

      public void Set_ccp (CertRepMessage value) {
         SetElement (_CCP, value);
      }

      public void Set_ckuann (CAKeyUpdAnnContent value) {
         SetElement (_CKUANN, value);
      }

      public void Set_cann (CMPCertificate value) {
         SetElement (_CANN, value);
      }

      public void Set_rann (RevAnnContent value) {
         SetElement (_RANN, value);
      }

      public void Set_crlann (CRLAnnContent value) {
         SetElement (_CRLANN, value);
      }

      public void Set_pkiconf () {
         SetElement (_PKICONF, Asn1Null.NULL_VALUE);
      }

      public void Set_nested (PKIMessages value) {
         SetElement (_NESTED, value);
      }

      public void Set_genm (GenMsgContent value) {
         SetElement (_GENM, value);
      }

      public void Set_genp (GenRepContent value) {
         SetElement (_GENP, value);
      }

      public void Set_error (ErrorMsgContent value) {
         SetElement (_ERROR, value);
      }

      public void Set_certConf (CertConfirmContent value) {
         SetElement (_CERTCONF, value);
      }

      public void Set_pollReq (PollReqContent value) {
         SetElement (_POLLREQ, value);
      }

      public void Set_pollRep (PollRepContent value) {
         SetElement (_POLLREP, value);
      }

      public void Set_cvcReq (CertReqMessages value) {
         SetElement (_CVCREQ, value);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         // decode CHOICE

         Asn1Tag tag = new Asn1Tag ();
         buffer.Mark ();
         int len = buffer.DecodeTagAndLength (tag);

         if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0))
         {
            CertReqMessages ir;
            ir = new CertReqMessages();
            ir.Decode (buffer, true, len);
            SetElement (_IR, ir);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 1))
         {
            CertRepMessage ip;
            ip = new CertRepMessage();
            ip.Decode (buffer, true, len);
            SetElement (_IP, ip);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 2))
         {
            CertReqMessages cr;
            cr = new CertReqMessages();
            cr.Decode (buffer, true, len);
            SetElement (_CR, cr);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 3))
         {
            CertRepMessage cp;
            cp = new CertRepMessage();
            cp.Decode (buffer, true, len);
            SetElement (_CP, cp);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 4))
         {
            CertificationRequest p10cr;
            p10cr = new CertificationRequest();
            p10cr.Decode (buffer, true, len);
            SetElement (_P10CR, p10cr);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 5))
         {
            POPODecKeyChallContent popdecc;
            popdecc = new POPODecKeyChallContent();
            popdecc.Decode (buffer, true, len);
            SetElement (_POPDECC, popdecc);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 6))
         {
            POPODecKeyRespContent popdecr;
            popdecr = new POPODecKeyRespContent();
            popdecr.Decode (buffer, true, len);
            SetElement (_POPDECR, popdecr);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 7))
         {
            CertReqMessages kur;
            kur = new CertReqMessages();
            kur.Decode (buffer, true, len);
            SetElement (_KUR, kur);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 8))
         {
            CertRepMessage kup;
            kup = new CertRepMessage();
            kup.Decode (buffer, true, len);
            SetElement (_KUP, kup);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 9))
         {
            CertReqMessages krr;
            krr = new CertReqMessages();
            krr.Decode (buffer, true, len);
            SetElement (_KRR, krr);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 10))
         {
            KeyRecRepContent krp;
            krp = new KeyRecRepContent();
            krp.Decode (buffer, true, len);
            SetElement (_KRP, krp);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 11))
         {
            RevReqContent rr;
            rr = new RevReqContent();
            rr.Decode (buffer, true, len);
            SetElement (_RR, rr);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 12))
         {
            RevRepContent rp;
            rp = new RevRepContent();
            rp.Decode (buffer, true, len);
            SetElement (_RP, rp);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 13))
         {
            CertReqMessages ccr;
            ccr = new CertReqMessages();
            ccr.Decode (buffer, true, len);
            SetElement (_CCR, ccr);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 14))
         {
            CertRepMessage ccp;
            ccp = new CertRepMessage();
            ccp.Decode (buffer, true, len);
            SetElement (_CCP, ccp);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 15))
         {
            CAKeyUpdAnnContent ckuann;
            ckuann = new CAKeyUpdAnnContent();
            ckuann.Decode (buffer, true, len);
            SetElement (_CKUANN, ckuann);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 16)) {
            CMPCertificate cann;
            cann = new CMPCertificate();
            cann.Decode (buffer, true, len);
            SetElement (_CANN, cann);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 17))
         {
            RevAnnContent rann;
            rann = new RevAnnContent();
            rann.Decode (buffer, true, len);
            SetElement (_RANN, rann);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 18))
         {
            CRLAnnContent crlann;
            crlann = new CRLAnnContent();
            crlann.Decode (buffer, true, len);
            SetElement (_CRLANN, crlann);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 19)) {
            Asn1Null pkiconf;
            pkiconf = new Asn1Null();
            pkiconf.Decode (buffer, true, len);
            SetElement (_PKICONF, pkiconf);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 20)) {
            PKIMessages nested;
            nested = new PKIMessages();
            nested.Decode (buffer, true, len);
            SetElement (_NESTED, nested);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 21))
         {
            GenMsgContent genm;
            genm = new GenMsgContent();
            genm.Decode (buffer, true, len);
            SetElement (_GENM, genm);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 22))
         {
            GenRepContent genp;
            genp = new GenRepContent();
            genp.Decode (buffer, true, len);
            SetElement (_GENP, genp);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 23))
         {
            ErrorMsgContent error;
            error = new ErrorMsgContent();
            error.Decode (buffer, true, len);
            SetElement (_ERROR, error);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 24))
         {
            CertConfirmContent certConf;
            certConf = new CertConfirmContent();
            certConf.Decode (buffer, true, len);
            SetElement (_CERTCONF, certConf);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 25))
         {
            PollReqContent pollReq;
            pollReq = new PollReqContent();
            pollReq.Decode (buffer, true, len);
            SetElement (_POLLREQ, pollReq);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 26))
         {
            PollRepContent pollRep;
            pollRep = new PollRepContent();
            pollRep.Decode (buffer, true, len);
            SetElement (_POLLREP, pollRep);
         }
         else if (tag.Equals (Asn1Tag.CTXT, Asn1Tag.CONS, 27))
         {
            CertReqMessages cvcReq;
            cvcReq = new CertReqMessages();
            cvcReq.Decode (buffer, true, len);
            SetElement (_CVCREQ, cvcReq);
         }
         else {
            throw new Asn1InvalidChoiceOptionException (buffer, tag);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;
         switch (choiceID) {
         // encode ir
         case _IR:
            CertReqMessages ir = (CertReqMessages) GetElement();
            len = ir.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
            break;

         // encode ip
         case _IP:
            CertRepMessage ip = (CertRepMessage) GetElement();
            len = ip.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
            _aal += len;
            break;

         // encode cr
         case _CR:
            CertReqMessages cr = (CertReqMessages) GetElement();
            len = cr.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
            break;

         // encode cp
         case _CP:
            CertRepMessage cp = (CertRepMessage) GetElement();
            len = cp.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
            break;

         // encode p10cr
         case _P10CR:
            CertificationRequest p10cr = (CertificationRequest) GetElement();
            len = p10cr.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
            _aal += len;
            break;

         // encode popdecc
         case _POPDECC:
            POPODecKeyChallContent popdecc = (POPODecKeyChallContent) GetElement();
            len = popdecc.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
            _aal += len;
            break;

         // encode popdecr
         case _POPDECR:
            POPODecKeyRespContent popdecr = (POPODecKeyRespContent) GetElement();
            len = popdecr.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
            _aal += len;
            break;

         // encode kur
         case _KUR:
            CertReqMessages kur = (CertReqMessages) GetElement();
            len = kur.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 7, len);
            _aal += len;
            break;

         // encode kup
         case _KUP:
            CertRepMessage kup = (CertRepMessage) GetElement();
            len = kup.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 8, len);
            _aal += len;
            break;

         // encode krr
         case _KRR:
            CertReqMessages krr = (CertReqMessages) GetElement();
            len = krr.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 9, len);
            _aal += len;
            break;

         // encode krp
         case _KRP:
            KeyRecRepContent krp = (KeyRecRepContent) GetElement();
            len = krp.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 10, len);
            _aal += len;
            break;

         // encode rr
         case _RR:
            RevReqContent rr = (RevReqContent) GetElement();
            len = rr.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 11, len);
            _aal += len;
            break;

         // encode rp
         case _RP:
            RevRepContent rp = (RevRepContent) GetElement();
            len = rp.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 12, len);
            _aal += len;
            break;

         // encode ccr
         case _CCR:
            CertReqMessages ccr = (CertReqMessages) GetElement();
            len = ccr.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 13, len);
            _aal += len;
            break;

         // encode ccp
         case _CCP:
            CertRepMessage ccp = (CertRepMessage) GetElement();
            len = ccp.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 14, len);
            _aal += len;
            break;

         // encode ckuann
         case _CKUANN:
            CAKeyUpdAnnContent ckuann = (CAKeyUpdAnnContent) GetElement();
            len = ckuann.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 15, len);
            _aal += len;
            break;

         // encode cann
         case _CANN:
            CMPCertificate cann = (CMPCertificate) GetElement();
            len = cann.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 16, len);
            _aal += len;
            break;

         // encode rann
         case _RANN:
            RevAnnContent rann = (RevAnnContent) GetElement();
            len = rann.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 17, len);
            _aal += len;
            break;

         // encode crlann
         case _CRLANN:
            CRLAnnContent crlann = (CRLAnnContent) GetElement();
            len = crlann.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 18, len);
            _aal += len;
            break;

         // encode pkiconf
         case _PKICONF:
            Asn1Null pkiconf = (Asn1Null) GetElement();
            len = pkiconf.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 19, len);
            _aal += len;
            break;

         // encode nested
         case _NESTED:
            PKIMessages nested = (PKIMessages) GetElement();
            len = nested.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 20, len);
            _aal += len;
            break;

         // encode genm
         case _GENM:
            GenMsgContent genm = (GenMsgContent) GetElement();
            len = genm.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 21, len);
            _aal += len;
            break;

         // encode genp
         case _GENP:
            GenRepContent genp = (GenRepContent) GetElement();
            len = genp.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 22, len);
            _aal += len;
            break;

         // encode error
         case _ERROR:
            ErrorMsgContent error = (ErrorMsgContent) GetElement();
            len = error.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 23, len);
            _aal += len;
            break;

         // encode certConf
         case _CERTCONF:
            CertConfirmContent certConf = (CertConfirmContent) GetElement();
            len = certConf.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 24, len);
            _aal += len;
            break;

         // encode pollReq
         case _POLLREQ:
            PollReqContent pollReq = (PollReqContent) GetElement();
            len = pollReq.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 25, len);
            _aal += len;
            break;

         // encode pollRep
         case _POLLREP:
            PollRepContent pollRep = (PollRepContent) GetElement();
            len = pollRep.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 26, len);
            _aal += len;
            break;

         // encode cvcReq
         case _CVCREQ:
            CertReqMessages cvcReq = (CertReqMessages) GetElement();
            len = cvcReq.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 27, len);
            _aal += len;
            break;

         default:
            throw new Asn1InvalidChoiceOptionException();
         }

         return _aal;
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (element != null) {
            element.Print (_out, ElemName, _level+1);
         }
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
