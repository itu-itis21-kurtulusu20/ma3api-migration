// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   public class CAKeyUpdAnnContent : Asn1Type {
      public CMPCertificate oldWithNew;
      public CMPCertificate newWithOld;
      public CMPCertificate newWithNew;

      static CAKeyUpdAnnContent ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public CAKeyUpdAnnContent () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public CAKeyUpdAnnContent (
         CMPCertificate oldWithNew_,
         CMPCertificate newWithOld_,
         CMPCertificate newWithNew_
      )
         : base ()
      {
         oldWithNew = oldWithNew_;
         newWithOld = newWithOld_;
         newWithNew = newWithNew_;
      }

      public void Init () {
         oldWithNew = null;
         newWithOld = null;
         newWithNew = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode oldWithNew

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
                tag.Equals (Asn1Tag.APPL, Asn1Tag.CONS, 33) ||
                tag.Equals (Asn1Tag.APPL, Asn1Tag.CONS, 34))
            {
               oldWithNew = new CMPCertificate();
               oldWithNew.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode newWithOld

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
                tag.Equals (Asn1Tag.APPL, Asn1Tag.CONS, 33) ||
                tag.Equals (Asn1Tag.APPL, Asn1Tag.CONS, 34))
            {
               newWithOld = new CMPCertificate();
               newWithOld.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode newWithNew

         if (!_context.Expired()) {
            Asn1Tag tag = buffer.PeekTag ();
            if (tag.Equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
                tag.Equals (Asn1Tag.APPL, Asn1Tag.CONS, 33) ||
                tag.Equals (Asn1Tag.APPL, Asn1Tag.CONS, 34))
            {
               newWithNew = new CMPCertificate();
               newWithNew.Decode (buffer, true, elemLen.mValue);
            }
            else throw new Asn1MissingRequiredException (buffer);
         }
         else throw new Asn1MissingRequiredException (buffer);

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode newWithNew

         len = newWithNew.Encode (buffer, true);
         _aal += len;

         // encode newWithOld

         len = newWithOld.Encode (buffer, true);
         _aal += len;

         // encode oldWithNew

         len = oldWithNew.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (oldWithNew != null) oldWithNew.Print (_out, "oldWithNew", _level+1);
         if (newWithOld != null) newWithOld.Print (_out, "newWithOld", _level+1);
         if (newWithNew != null) newWithNew.Print (_out, "newWithNew", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
