// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   public class KeyRecRepContent : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatusInfo status;
      public CMPCertificate newSigCert;  // optional
      public KeyRecRepContent_caCerts caCerts;  // optional
      public KeyRecRepContent_keyPairHist keyPairHist;  // optional

      static KeyRecRepContent ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public KeyRecRepContent () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public KeyRecRepContent (
         tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatusInfo status_,
         CMPCertificate newSigCert_,
         KeyRecRepContent_caCerts caCerts_,
         KeyRecRepContent_keyPairHist keyPairHist_
      )
         : base ()
      {
         status = status_;
         newSigCert = newSigCert_;
         caCerts = caCerts_;
         keyPairHist = keyPairHist_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public KeyRecRepContent (
         tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatusInfo status_
      )
         : base ()
      {
         status = status_;
      }

      public void Init () {
         status = null;
         newSigCert = null;
         caCerts = null;
         keyPairHist = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode status

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            status = new PKIStatusInfo();
            status.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode newSigCert

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            int offset = buffer.ByteCount;
            newSigCert = new CMPCertificate();
            newSigCert.Decode (buffer, true, elemLen.mValue);
            int declen = buffer.ByteCount - offset;
            if (declen != elemLen.mValue && elemLen.mValue != Asn1Status.INDEFLEN)
               throw new Asn1InvalidLengthException();
         }

         // decode caCerts

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, false)) {
            caCerts = new KeyRecRepContent_caCerts();
            caCerts.Decode (buffer, true, elemLen.mValue);
         }

         // decode keyPairHist

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, false)) {
            keyPairHist = new KeyRecRepContent_keyPairHist();
            keyPairHist.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode keyPairHist

         if (keyPairHist != null) {
            len = keyPairHist.Encode (buffer, true);
            _aal += len;
         }

         // encode caCerts

         if (caCerts != null) {
            len = caCerts.Encode (buffer, true);
            _aal += len;
         }

         // encode newSigCert

         if (newSigCert != null) {
            len = newSigCert.Encode (buffer, true);
            len += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
            _aal += len;
         }

         // encode status

         len = status.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (status != null) status.Print (_out, "status", _level+1);
         if (newSigCert != null) newSigCert.Print (_out, "newSigCert", _level+1);
         if (caCerts != null) caCerts.Print (_out, "caCerts", _level+1);
         if (keyPairHist != null) keyPairHist.Print (_out, "keyPairHist", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
