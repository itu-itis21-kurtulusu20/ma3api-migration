// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   public class RevRepContent : Asn1Type {
      public RevRepContent_status status;
      public RevRepContent_revCerts revCerts;  // optional
      public RevRepContent_crls crls;  // optional

      static RevRepContent ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public RevRepContent () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public RevRepContent (
         RevRepContent_status status_,
         RevRepContent_revCerts revCerts_,
         RevRepContent_crls crls_
      )
         : base ()
      {
         status = status_;
         revCerts = revCerts_;
         crls = crls_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public RevRepContent (
         RevRepContent_status status_
      )
         : base ()
      {
         status = status_;
      }

      public void Init () {
         status = null;
         revCerts = null;
         crls = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode status

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            status = new RevRepContent_status();
            status.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode revCerts

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, false)) {
            revCerts = new RevRepContent_revCerts();
            revCerts.Decode (buffer, true, elemLen.mValue);
         }

         // decode crls

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, false)) {
            crls = new RevRepContent_crls();
            crls.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crls

         if (crls != null) {
            len = crls.Encode (buffer, true);
            _aal += len;
         }

         // encode revCerts

         if (revCerts != null) {
            len = revCerts.Encode (buffer, true);
            _aal += len;
         }

         // encode status

         len = status.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (status != null) status.Print (_out, "status", _level+1);
         if (revCerts != null) revCerts.Print (_out, "revCerts", _level+1);
         if (crls != null) crls.Print (_out, "crls", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
