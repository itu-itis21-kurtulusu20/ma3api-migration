// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   public class ErrorMsgContent : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatusInfo pKIStatusInfo;
      public Asn1Integer errorCode;  // optional
      public PKIFreeText errorDetails;  // optional

      static ErrorMsgContent ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public ErrorMsgContent () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public ErrorMsgContent (
         tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatusInfo pKIStatusInfo_,
         Asn1Integer errorCode_,
         PKIFreeText errorDetails_
      )
         : base ()
      {
         pKIStatusInfo = pKIStatusInfo_;
         errorCode = errorCode_;
         errorDetails = errorDetails_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public ErrorMsgContent (
         tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatusInfo pKIStatusInfo_
      )
         : base ()
      {
         pKIStatusInfo = pKIStatusInfo_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public ErrorMsgContent (tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatusInfo pKIStatusInfo_,
         long errorCode_,
         PKIFreeText errorDetails_
      )
         : base ()
      {
         pKIStatusInfo = pKIStatusInfo_;
         errorCode = new Asn1Integer (errorCode_);
         errorDetails = errorDetails_;
      }

      public void Init () {
         pKIStatusInfo = null;
         errorCode = null;
         errorDetails = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode pKIStatusInfo

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            pKIStatusInfo = new PKIStatusInfo();
            pKIStatusInfo.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode errorCode

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            errorCode = new Asn1Integer();
            errorCode.Decode (buffer, true, elemLen.mValue);
         }

         // decode errorDetails

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            errorDetails = new PKIFreeText();
            errorDetails.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode errorDetails

         if (errorDetails != null) {
            len = errorDetails.Encode (buffer, true);
            _aal += len;
         }

         // encode errorCode

         if (errorCode != null) {
            len = errorCode.Encode (buffer, true);
            _aal += len;
         }

         // encode pKIStatusInfo

         len = pKIStatusInfo.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (pKIStatusInfo != null) pKIStatusInfo.Print (_out, "pKIStatusInfo", _level+1);
         if (errorCode != null) errorCode.Print (_out, "errorCode", _level+1);
         if (errorDetails != null) errorDetails.Print (_out, "errorDetails", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
