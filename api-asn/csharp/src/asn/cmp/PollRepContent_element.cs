// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   public class PollRepContent_element : Asn1Type {
      public Asn1Integer certReqId;
      public Asn1Integer checkAfter;
      public PKIFreeText reason;  // optional

      static PollRepContent_element ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public PollRepContent_element () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public PollRepContent_element (
         Asn1Integer certReqId_,
         Asn1Integer checkAfter_,
         PKIFreeText reason_
      )
         : base ()
      {
         certReqId = certReqId_;
         checkAfter = checkAfter_;
         reason = reason_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public PollRepContent_element (
         Asn1Integer certReqId_,
         Asn1Integer checkAfter_
      )
         : base ()
      {
         certReqId = certReqId_;
         checkAfter = checkAfter_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public PollRepContent_element (long certReqId_,
         long checkAfter_,
         PKIFreeText reason_
      )
         : base ()
      {
         certReqId = new Asn1Integer (certReqId_);
         checkAfter = new Asn1Integer (checkAfter_);
         reason = reason_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public PollRepContent_element (
         long certReqId_,
         long checkAfter_
      )
         : base ()
      {
         certReqId = new Asn1Integer (certReqId_);
         checkAfter = new Asn1Integer (checkAfter_);
      }

      public void Init () {
         certReqId = null;
         checkAfter = null;
         reason = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode certReqId

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            certReqId = new Asn1Integer();
            certReqId.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode checkAfter

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            checkAfter = new Asn1Integer();
            checkAfter.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode reason

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            reason = new PKIFreeText();
            reason.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode reason

         if (reason != null) {
            len = reason.Encode (buffer, true);
            _aal += len;
         }

         // encode checkAfter

         len = checkAfter.Encode (buffer, true);
         _aal += len;

         // encode certReqId

         len = certReqId.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (certReqId != null) certReqId.Print (_out, "certReqId", _level+1);
         if (checkAfter != null) checkAfter.Print (_out, "checkAfter", _level+1);
         if (reason != null) reason.Print (_out, "reason", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
