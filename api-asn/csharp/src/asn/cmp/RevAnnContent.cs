// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.6.4, Date: 10-Oct-2013.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace tr.gov.tubitak.uekae.esya.asn.cmp {

   using CertId = tr.gov.tubitak.uekae.esya.asn.crmf.CertId;
   using Extensions = tr.gov.tubitak.uekae.esya.asn.x509.Extensions;

   public class RevAnnContent : Asn1Type {
      public tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatus status;
      public CertId certId;
      public Asn1GeneralizedTime willBeRevokedAt;
      public Asn1GeneralizedTime badSinceDate;
      public Extensions crlDetails;  // optional

      static RevAnnContent ()
      {
         Asn1Type.SetKey2 (_cmpValues._rtkey);
      }

      public RevAnnContent () : base()
      {
         Init();
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public RevAnnContent (
         tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatus status_,
         CertId certId_,
         Asn1GeneralizedTime willBeRevokedAt_,
         Asn1GeneralizedTime badSinceDate_,
         Extensions crlDetails_
      )
         : base ()
      {
         status = status_;
         certId = certId_;
         willBeRevokedAt = willBeRevokedAt_;
         badSinceDate = badSinceDate_;
         crlDetails = crlDetails_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public RevAnnContent (
         tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatus status_,
         CertId certId_,
         Asn1GeneralizedTime willBeRevokedAt_,
         Asn1GeneralizedTime badSinceDate_
      )
         : base ()
      {
         status = status_;
         certId = certId_;
         willBeRevokedAt = willBeRevokedAt_;
         badSinceDate = badSinceDate_;
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public RevAnnContent (long status_,
         CertId certId_,
         string willBeRevokedAt_,
         string badSinceDate_,
         Extensions crlDetails_
      )
         : base ()
      {
         status = new tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatus (status_);
         certId = certId_;
         willBeRevokedAt = new Asn1GeneralizedTime (willBeRevokedAt_);
         badSinceDate = new Asn1GeneralizedTime (badSinceDate_);
         crlDetails = crlDetails_;
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public RevAnnContent (
         long status_,
         CertId certId_,
         string willBeRevokedAt_,
         string badSinceDate_
      )
         : base ()
      {
         status = new tr.gov.tubitak.uekae.esya.asn.cmp.PKIStatus (status_);
         certId = certId_;
         willBeRevokedAt = new Asn1GeneralizedTime (willBeRevokedAt_);
         badSinceDate = new Asn1GeneralizedTime (badSinceDate_);
      }

      public void Init () {
         status = null;
         certId = null;
         willBeRevokedAt = null;
         badSinceDate = null;
         crlDetails = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode status

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
            status = new PKIStatus();
            status.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode certId

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            certId = new CertId();
            certId.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode willBeRevokedAt

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
            willBeRevokedAt = new Asn1GeneralizedTime (true);
            willBeRevokedAt.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode badSinceDate

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 24, elemLen, false)) {
            badSinceDate = new Asn1GeneralizedTime (true);
            badSinceDate.Decode (buffer, true, elemLen.mValue);
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode crlDetails

         if (_context.MatchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
            crlDetails = new Extensions();
            crlDetails.Decode (buffer, true, elemLen.mValue);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode crlDetails

         if (crlDetails != null) {
            len = crlDetails.Encode (buffer, true);
            _aal += len;
         }

         // encode badSinceDate

         len = badSinceDate.Encode (buffer, true);
         _aal += len;

         // encode willBeRevokedAt

         len = willBeRevokedAt.Encode (buffer, true);
         _aal += len;

         // encode certId

         len = certId.Encode (buffer, true);
         _aal += len;

         // encode status

         len = status.Encode (buffer, true);
         _aal += len;

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
         }

         return (_aal);
      }

      public override void Print (System.IO.TextWriter _out, 
                                  string _varName, int _level)
      {
         Indent (_out, _level);
         _out.WriteLine (_varName + " {");
         if (status != null) status.Print (_out, "status", _level+1);
         if (certId != null) certId.Print (_out, "certId", _level+1);
         if (willBeRevokedAt != null) willBeRevokedAt.Print (_out, "willBeRevokedAt", _level+1);
         if (badSinceDate != null) badSinceDate.Print (_out, "badSinceDate", _level+1);
         if (crlDetails != null) crlDetails.Print (_out, "crlDetails", _level+1);
         Indent (_out, _level);
         _out.WriteLine ("}");
      }
   }
}
