#dictionary
configFile=xml signature configuration file(xmlsignature-config.xml)
encode=encode
decode=decode
certificate=certificate
CRL=CRL
OCSP=OCSP
signer=signer
signature=signature
publicKey=public key


# xml
xml.WrongContent = Cannot find {0} in {1}
xml.WrongElement = Cannot create a {0} from a {1} element

# common
errors.kripto.hash = Cannot hash using algorithm "{0}".
errors.base64 = Error in Base64 conversion.
errors.null = {0} cannot be 'null'.
errors.nullElement = Expected: {0} element instead of 'null'.
errors.cantFindCertificate = Cannot find certificate.
errors.cantInit = Could not init "{0}"
errors.convert = Error occurred converting {0} to {1}.
errors.invalid.certificate = Invalid certificate.
errors.cantEncode = Cannot encode {1} as {0}.
errors.cantDecode = Cannot decode {1} as {0}.
errors.cantDigest = Cannot digest "{0}".
errors.cantCanonicalize = Cannot canonicalize {0}.
errors.cantFind = Cannot find "{0}".
errors.duplicate = Duplicate "{0}".
errors.cantUpdate = Cannot update "{0}".
errors.sign=Sign error.
errors.verify=Verify error.

errors.cantConstructSignature = Cannot construct XML Signature from document: "{0}"
errors.cantAddDocument = Cannot add document:"{0}" to XML Signature.
errors.cantOutputXml = Cannot output signature.

unsupported.operation = Unsupported operation: "{0}".
unknown.algorithm = Unknown algorithm: "{0}".
unknown.keyValue = Unknown key value.
unknown.encoding = Unknown encoding type "{0}"

error.formatCantEvolveMultiple=Evolution from {0} to {1} format is not supported. Evolve to {2} format first.
error.formatCantEvolve=Evolution from {0} to {1} format is not supported.
error.formatCantAddArchiveTS=Before adding additional Archive timestamps, evolve to A format first.
error.formatAlreadyEvolved=Signature already in {0} format.


# config
config.cantFind = Cannot find "{0}" for init!
config.cantLoad = Cannot load "{0}" for init!
config.notDefined = "{0}" not defined in XML Signature configuration.
config.invalidProfile = Cannot resolve signature profile "{0}" for validation configuration.
config.invalidValidator = Class "{0}" for profile "{1}" is not a validator.
config.validatorClassNotFound = Validator class "{0}" not found.
config.cyclicInheritanceForProfileValidators = Validation profiles has cyclic dependency.
config.missingAncestorToInheritProfiles = Validation profile "{0}" cannot inherit validators from missing "{1}" profile.
config.missingValidationProfile = Validation profile "{0}" is not declared on config file. 
config.inconsistentGracePeriod=Last Revocation Period must be higher than grace period!

# core
core.cantCalculateSignatureValue = Cannot calculate signature value.
core.cantVerify.reference = Reference "{0}" could not be validated.
core.referencesAreValid = References are valid.
core.cantVerify = Core validation failed.
core.verified = Core validation succeeded.
core.signedDocumentVerified = SignedDocument validation succeeded.
core.cantVerify.signatureValue = Inconsistent signature value.
core.verified.signatureValue = Signature value validated.
core.cantResolve.verificationKey = Cannot resolve Key for verification.
core.invalidKeyInfo = Cannot resolve Certificate from KeyInfo.
core.cantResolve.signingCertificateAttribute = Error occurred while resolving referenced certificate in SigningCertificate attribute.
core.etsiRequiresCertificate = For ETSI formats key information shall be provided as Public Certificate.
core.cantCreateBuffer = Cannot create {0} buffer for "{1}"
core.cantGeneratePublicKey = Error occurred in {0} public key generation.
core.cantResolveRetrievalMethod = Cannot dereference Retrieval Method: "{0}"
core.invalidRetrievalMethod = Retrieval Method must return DOM element but returned: "{0}"

core.invalid.formatOf = Invalid {0} format of {1}
core.invalid.privatekey = Invalid {0} private key : {1}
core.invalid.publickey = Invalid {0} public key : {1}
core.invalid.secretkey = Invalid secret key : {0}

core.timestamp.cantEncode = Cannot encode TimeStamp.
core.timestamp.cantExtractSignedData = Cannot get SignedData from TimeStamp.
core.timestamp.cantExtractTSTInfo = Cannot get TSTInfo from TimeStamp.
core.timestamp.cantExtractDigestAlg = Cannot get digest algorithm from Timestamp.
core.timestamp.cantExtractTime = Cannot get time from Timestamp.
core.timestamp.cantTimestamp = Cannot timestamp "{0}"
core.timestamp.cantAddBeforeSignatureValue = Cannot calculate value for Signature TimeStamp. Sign document first.

core.ocsp.cantResolveResponderId = Cannot resolve ResponderId from OCSP response.
core.ocsp.cantResolveProducedAt = Cannot resolve produce date from OCSP response.

core.model.individualDataObjectsCantReferenceQP = SignedProperties typed Reference cannot be included to IndividualDataObjectsTimeStamp.
core.model.commitmentNeedObjectReferences = Either object references must exist or CommitmentIndication should be for all signed data objects
core.model.missingDataObjectFormatContent = At least one element of Description, ObjectIdentifier and/or MimeType MUST be present within DataObjectFormat
core.model.invalidResponderId = Invalid ResponderId. Either key or name values shall be declared.
core.model.invalidEncapsulatedEncoding=Encapsulated {0} cannot have encoding type other than 'DER'.

# resolver
resolver.cantResolveUri = Cannot resolve URI : "{0}"
resolver.cantFindResolverForUri = Cannot find any resolver suitable for URI : "{0}"
resolver.xpointerSupportLimited = XPointer support is only for '/' or Id. Cannot resolve "{0}"

# transform
transform.error = Error occurred while applying {0} transform.
transform.unsupported = Unsupported transformation: "{0}".
transform.isNotApplicableFor = Cannot apply "{0}" transform to "{1}".
transform.errorApplyingTo = Error occurred applying "{0}" transform to "{1}".
transform.enveloped.cantFindSignature = Cannot find Signature element that belongs to Enveloped Signature transform.

# validation
validation.data.cantConstruct=Cannot construct {0}. {1} in {2}
validation.data.resolutionMismatch=Resolved {0} [uri:'{1}'] mismatch {2} : {3}

validation.timestamp.cantFind = No TimeStamp found in "{0}".
validation.timestamp.invalidFormat = {0}[{1}] is not in TimeStamp format.
validation.timestamp.invalidDigest = {0}[{1}] has invalid digest value.
validation.timestamp.error = Error occurred while validating {0}[{1}].
validation.timestamp.valid = {0} is valid.
validation.timestamp.failed = Cannot validate timestamp {0}, because {1}.

validation.timestamp.notWithinCertificatePeriod = {0}[{1}] time "{2}", is not within certificate validity period.
validation.timestamp.cantBeBeforeTimestamp = {0}[{1}] time "{2}", cannot be before {3} time "{4}".
validation.timestamp.cantBeBeforeSigningTime = {0}[{1}] time "{2}", cannot be before SigningTime attribute "{3}".
validation.timestamp.incoherent = Timestamp time incoherent.

validation.timestamp.signature.verified = Timestamp signature verified.
validation.timestamp.certificateNotValidated= Cannot verify timestamp signer certificate.
validation.timestamp.certificateNotFound= Cannot find {0} timestamp signer certificate.
validation.timestamp.signature.invalid = Timestamp signature invalid.
validation.timestamp.signature.verificationError = Cannot verify Timestamp signature
validation.timestamp.vdata.cantResolveByURI = Cannot resolve Timestamp(uri:{0}) for TimestampValidationData
validation.timestamp.vdata.cantResolveI = Cannot resolve Timestamp for TimestampValidationData
validation.timestamp.vdata.orderError=Timestamp should be added before its validation data"
validation.timestamp.notAfterSigningTime = Signature timestamp must be taken after signing time.
validation.timestamp.notWithin2HoursOfSigningTime = Signature timestamp must be taken within 2 hours after signing time.
validation.timestamp.revocationValue.noCRL = Timestamp does not have CRL for revocation data.
validation.timestamp.certificateValue.noRootCert = Timestamp does not have its root certificate in validation data.

validation.certificate.cantFound=Cannot determine signing certificate.
validation.certificate.cantValidateSigner = Cannot validate signer certificate: {0}
validation.certificate.validatedSigner = Successfully validated signer certificate.
validation.certificate.error = Error occurred verifying signer certificate: {0}

validation.signingCertificate.issuerMismatch=Certificate issuer is : "{0}", but should have been: "{1}".
validation.signingCertificate.serialMismatch=Certificate serial number is : "{0}", but should have been: "{1}".
validation.signingCertificate.invalidDigest=Invalid certificate digest.
validation.signingCertificate.valid=SigningCertificate property is valid.
validation.signingCertificate.notFound=SigningCertificate property not found.
validation.signingCertificate.notSha2 = Signing Certificate digest algorithm is not SHA-256.

validation.dataObjectFormat.noReference = DataObjectFormat must refer to a Reference!
validation.dataObjectFormat.mimeMismatch = DataObjectFormat/Reference MIME Type mismatch! Expected "{0}", found "{1}".
validation.dataObjectFormat.encodingMismatch = DataObjectFormat/Reference Encoding mismatch! Expected "{0}", found "{1}".
validation.dataObjectFormat.valid = DataObjectFormat property is valid.

validation.policy.cantFindId = SignaturePolicy is not implied and SignaturePolicyId cannot be found.
validation.policy.cantFind = SignaturePolicy cannot be found.
validation.policy.invalidDigest = Invalid SignaturePolicy digest.
validation.policy.cantFindByUri = SignaturePolicy referenced by SPURI cannot be found.
validation.policy.invalidDigestByUri = Invalid digest for SignaturePolicy referenced by SPURI.
validation.policy.invalidRevocationDataType = Revocation data type is not convenient for used profile.
validation.policy.valid = SignaturePolicyIdentifier is valid.

#profile
validation.policy.notsha2 = Policy digest algorithm is not SHA-256.
validation.policy.not2h = Signature time stamp must be taken within 2 hours after signing time.
validation.policy.timeStampCheckError = Error while checking timestamp conformance for signature profile.
validation.policy.successful = Profile attributes compatible with standards.
validation.policy.cantcheck = Profile exists but cannot recognized.
validation.policy.notTurkishProfile = Signature does not have Turkish signature profile.
validation.policy.signaturePolicyAttributes = Signature Policy Attribute Check
validation.policy.cantValidatePolicy = Unable to validate signature policy ID.
validation.policy.invalidSignatureType = Signature format is not convenient for used profile.
validation.policy.noOCSP = Profile has to have OCSP as revocation data for signer's certificate.
validation.policy.noCRL = Profile has to have CRL as revocation data for signer's certificate.

validation.signingTime.notWithinCertificatePeriod = SigningTime property is not within validity period of signers certificate.
validation.signingTime.valid = Signing Certificate is valid at signing time signed property.
validation.signingTime.notFound = No signing time present.

validation.signatureAlgorithm.notSha2 = Signature algorithm is not SHA-256.

validation.references.certRefs.valid = CompleteCertificateRefs is consistent.
validation.references.certRefs.missingCert = CompleteCertificateRefs does not contain certificate in validation path!
validation.references.certRefs.extraCert = CompleteCertificateRefs contains a reference not existing in cert validation path!

validation.references.revRefs.valid = CompleteRevocationRefs is consistent.
validation.references.revRefs.missing = CompleteRevocationRefs does not contain {0} in validation path!
validation.references.revRefs.extra = CompleteRevocationRefs contains a reference not existing in cert validation path!

validation.values.certVals.valid = CertificateValues is consistent with CompleteCertificateRefs.
validation.values.certVals.countMismatch = CertificateValues and CompleteCertificateRefs counts mismatch!
validation.values.certVals.missingValue = Cannot find value in CertificateValues for a reference!

validation.values.revVals.valid = RevocationValues is consistent with CompleteRevocationRefs.
validation.values.revVals.countMismatch = RevocationValues and CompleteRevocationRefs counts mismatch in {0}!
validation.values.revVals.missingValue = Cannot find {0} value in RevocationValues for a reference!

validation.check.signedDoc = Signed Document Check
validation.check.xmlSignature = XML Signature Check
validation.check.keyInfo = Key Info Check
validation.check.signatureValue = Signature Value Check
validation.check.reference = Reference Check
validation.check.certificate = Certificate Validation Check
validation.check.signingCertificate = Signing Certificate Check
validation.check.signingTime = Signing Time Check
validation.check.timestamp = {0} Timestamp Check
validation.check.encapsulatedTS = Encapsulated Timestamp Check
validation.check.certValues = Certificate Values Check
validation.check.certRefs = Certificate References Check
validation.check.revocationRefs = Revocation References Check
validation.check.revocationValues = Revocation Values Check
validation.check.dataObjectFormat = Data Object Format Check
validation.check.signaturePolicy = Signature Policy Check
validation.check.signaturePolicyAttributes = Signature Policy Attribute Check 
