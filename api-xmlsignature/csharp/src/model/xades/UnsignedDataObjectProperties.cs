using System.Collections.Generic;
using System.Xml;

namespace tr.gov.tubitak.uekae.esya.api.xmlsignature.model.xades
{

	using Element = XmlElement;
	using Context = tr.gov.tubitak.uekae.esya.api.xmlsignature.Context;
	using XMLSignatureException = tr.gov.tubitak.uekae.esya.api.xmlsignature.XMLSignatureException;

	using Constants = tr.gov.tubitak.uekae.esya.api.xmlsignature.core.Constants;


	/// <summary>
	/// <p>This element contains properties that qualify some of the signed data
	/// objects. The signature generated by the signer does not cover the content
	/// of this element.
	/// <p><pre>
	/// &lt;xsd:element name="UnsignedDataObjectProperties" type="UnsignedDataObjectPropertiesType" />
	/// 
	/// &lt;xsd:complexType name="UnsignedDataObjectPropertiesType">
	///     &lt;xsd:sequence>
	///       &lt;xsd:element name="UnsignedDataObjectProperty" type="AnyType" maxOccurs="unbounded"/>
	///     &lt;/xsd:sequence>
	///     &lt;xsd:attribute name="Id" type="xsd:ID" use="optional"/>
	/// &lt;/xsd:complexType>
	/// </pre>
	/// 
	/// <p>The optional Id attribute can be used to make a reference to the
	/// <code>UnsignedDataObjectProperties</code> element. TS 101 733 [1] does not
	/// specify the usage of any unsigned property qualifying the signed data object.
	/// The present document, however, incorporates this element for the sake of
	/// completeness and to cope with potential future needs for inclusion of such
	/// kind of properties. The schema definition leaves open the definition of
	/// the contents of this type. .
	/// 
	/// @author ahmety
	/// date: Sep 23, 2009
	/// 
	/// </summary>
	public class UnsignedDataObjectProperties : XAdESBaseElement
	{
		private readonly IList<UnsignedDataObjectProperty> mProperties = new List<UnsignedDataObjectProperty>();

		/// <summary>
		/// Construct new BaseElement according to context </summary>
		/// <param name="aContext"> where some signature spesific properties reside. </param>
		public UnsignedDataObjectProperties(Context aContext) : base(aContext)
		{
			addLineBreak();
		}

		/// <summary>
		/// Construct Any from existing </summary>
		/// <param name="aElement"> xml element </param>
		/// <param name="aContext"> according to context </param>
		/// <exception cref="tr.gov.tubitak.uekae.esya.api.xmlsignature.XMLSignatureException">
		///          when structure is invalid or can not be
		///          resolved appropriately </exception>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: public UnsignedDataObjectProperties(XmlElement aElement, tr.gov.tubitak.uekae.esya.api.xmlsignature.Context aContext) throws tr.gov.tubitak.uekae.esya.api.xmlsignature.XMLSignatureException
		public UnsignedDataObjectProperties(Element aElement, Context aContext) : base(aElement, aContext)
		{

            Element[] elements = selectChildren(Constants.NS_XADES_1_3_2, Constants.TAGX_UNSIGNEDDATAOBJECTPROPERTY);
			foreach (Element propElm in elements)
			{
				mProperties.Add(new UnsignedDataObjectProperty(propElm, mContext));
			}
		}

		public virtual void addProperty(UnsignedDataObjectProperty aUsdop)
		{
			mProperties.Add(aUsdop);
			mElement.AppendChild(aUsdop.Element);
			addLineBreak();
		}

		public virtual int PropertyCount
		{
			get
			{
				return mProperties.Count;
			}
		}

		public virtual UnsignedDataObjectProperty getProperty(int aIndex)
		{
			return mProperties[aIndex];
		}

		public override string Namespace
		{
			get
			{
                return Constants.NS_XADES_1_3_2;
			}
		}

		public override string LocalName
		{
			get
			{
                return Constants.TAGX_UNSIGNEDDATAOBJECTPROPERTIES;
			}
		}
	}

}