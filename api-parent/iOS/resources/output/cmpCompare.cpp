/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "cmp.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_CMP_PKIProtection (const char* name, 
   ASN1T_CMP_PKIProtection* pValue, ASN1T_CMP_PKIProtection* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpBitStr (name, pValue->numbits, pValue->data, 
      pCmpValue->numbits, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMP_PKIProtection::Equals (ASN1T_CMP_PKIProtection* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIProtection ("PKIProtection", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIHeader_pvno (const char* name, 
   ASN1T_CMP_PKIHeader_pvno* pValue, ASN1T_CMP_PKIHeader_pvno* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMP_PKIHeader_pvno::Equals (ASN1T_CMP_PKIHeader_pvno* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIHeader_pvno ("PKIHeader_pvno", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIFreeText (const char* name, 
   ASN1T_CMP_PKIFreeText* pValue, ASN1T_CMP_PKIFreeText* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   const OSUTF8CHAR** pdata;
   const OSUTF8CHAR** pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (const OSUTF8CHAR**) pnode->data;
      pCmpdata = (const OSUTF8CHAR**) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpCharStr (namebuf, (const char*)*pdata, (const char*)*pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PKIFreeText::Equals (ASN1T_CMP_PKIFreeText* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIFreeText ("PKIFreeText", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_InfoTypeAndValue (const char* name, 
   ASN1T_CMP_InfoTypeAndValue* pValue, ASN1T_CMP_InfoTypeAndValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".infoType", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->infoType, (ASN1OBJID*)&pCmpValue->infoType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".infoValue", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.infoValuePresent,
   pCmpValue->m.infoValuePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.infoValuePresent) 
   {
      if ( !rtCmpOpenType (namebuf,
      pValue->infoValue.numocts,
      pValue->infoValue.data,
      pCmpValue->infoValue.numocts,
      pCmpValue->infoValue.data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_InfoTypeAndValue::Equals (ASN1T_CMP_InfoTypeAndValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_InfoTypeAndValue ("InfoTypeAndValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIHeader_generalInfo (const char* name, 
   ASN1T_CMP_PKIHeader_generalInfo* pValue, 
   ASN1T_CMP_PKIHeader_generalInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMP_InfoTypeAndValue* pdata;
   ASN1T_CMP_InfoTypeAndValue* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      pCmpdata = (ASN1T_CMP_InfoTypeAndValue*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_InfoTypeAndValue (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PKIHeader_generalInfo::Equals (ASN1T_CMP_PKIHeader_generalInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIHeader_generalInfo ("PKIHeader_generalInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIHeader (const char* name, 
   ASN1T_CMP_PKIHeader* pValue, ASN1T_CMP_PKIHeader* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".pvno", 0, 0, 0);
   if (! asn1Compare_CMP_PKIHeader_pvno (namebuf, &pValue->pvno, &pCmpValue->pvno, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".sender", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->sender, &pCmpValue->sender, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".recipient", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->recipient, &pCmpValue->recipient, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".messageTime", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.messageTimePresent,
   pCmpValue->m.messageTimePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.messageTimePresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->messageTime, pCmpValue->messageTime, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".protectionAlg", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.protectionAlgPresent,
   pCmpValue->m.protectionAlgPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.protectionAlgPresent) 
   {
      if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->protectionAlg, &pCmpValue->protectionAlg, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".senderKID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.senderKIDPresent,
   pCmpValue->m.senderKIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.senderKIDPresent) 
   {
      if (! asn1Compare_IMP_KeyIdentifier (namebuf, &pValue->senderKID, &pCmpValue->senderKID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".recipKID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.recipKIDPresent,
   pCmpValue->m.recipKIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.recipKIDPresent) 
   {
      if (! asn1Compare_IMP_KeyIdentifier (namebuf, &pValue->recipKID, &pCmpValue->recipKID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".transactionID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.transactionIDPresent,
   pCmpValue->m.transactionIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.transactionIDPresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->transactionID.numocts, 
         pValue->transactionID.data, pCmpValue->transactionID.numocts, 
         pCmpValue->transactionID.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".senderNonce", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.senderNoncePresent,
   pCmpValue->m.senderNoncePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.senderNoncePresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->senderNonce.numocts, 
         pValue->senderNonce.data, pCmpValue->senderNonce.numocts, 
         pCmpValue->senderNonce.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".recipNonce", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.recipNoncePresent,
   pCmpValue->m.recipNoncePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.recipNoncePresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->recipNonce.numocts, 
         pValue->recipNonce.data, pCmpValue->recipNonce.numocts, 
         pCmpValue->recipNonce.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".freeText", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.freeTextPresent,
   pCmpValue->m.freeTextPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.freeTextPresent) 
   {
      if (! asn1Compare_CMP_PKIFreeText (namebuf, &pValue->freeText, &pCmpValue->freeText, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".generalInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.generalInfoPresent,
   pCmpValue->m.generalInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.generalInfoPresent) 
   {
      if (! asn1Compare_CMP_PKIHeader_generalInfo (namebuf, &pValue->generalInfo, &pCmpValue->generalInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PKIHeader::Equals (ASN1T_CMP_PKIHeader* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIHeader ("PKIHeader", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CMPCertificate (const char* name, 
   ASN1T_CMP_CMPCertificate* pValue, ASN1T_CMP_CMPCertificate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* x509v3PKCert */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.x509v3PKCert", 0, 0, 0);
         if (! asn1Compare_EXP_Certificate (namebuf, pValue->u.x509v3PKCert, pCmpValue->u.x509v3PKCert, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMP_CMPCertificate::Equals (ASN1T_CMP_CMPCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CMPCertificate ("CMPCertificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CertRepMessage_caPubs (const char* name, 
   ASN1T_CMP_CertRepMessage_caPubs* pValue, 
   ASN1T_CMP_CertRepMessage_caPubs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMP_CMPCertificate* pdata;
   ASN1T_CMP_CMPCertificate* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_CMPCertificate*) pnode->data;
      pCmpdata = (ASN1T_CMP_CMPCertificate*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_CMPCertificate (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_CertRepMessage_caPubs::Equals (ASN1T_CMP_CertRepMessage_caPubs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CertRepMessage_caPubs ("CertRepMessage_caPubs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIStatus (const char* name, 
   ASN1T_CMP_PKIStatus* pValue, ASN1T_CMP_PKIStatus* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMP_PKIStatus::Equals (ASN1T_CMP_PKIStatus* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIStatus ("PKIStatus", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIFailureInfo (const char* name, 
   ASN1T_CMP_PKIFailureInfo* pValue, ASN1T_CMP_PKIFailureInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpBitStr (name, pValue->numbits, pValue->data, 
      pCmpValue->numbits, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMP_PKIFailureInfo::Equals (ASN1T_CMP_PKIFailureInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIFailureInfo ("PKIFailureInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIStatusInfo (const char* name, 
   ASN1T_CMP_PKIStatusInfo* pValue, ASN1T_CMP_PKIStatusInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".status", 0, 0, 0);
   if (! asn1Compare_CMP_PKIStatus (namebuf, &pValue->status, &pCmpValue->status, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".statusString", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.statusStringPresent,
   pCmpValue->m.statusStringPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.statusStringPresent) 
   {
      if (! asn1Compare_CMP_PKIFreeText (namebuf, &pValue->statusString, &pCmpValue->statusString, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".failInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.failInfoPresent,
   pCmpValue->m.failInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.failInfoPresent) 
   {
      if (! asn1Compare_CMP_PKIFailureInfo (namebuf, &pValue->failInfo, &pCmpValue->failInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PKIStatusInfo::Equals (ASN1T_CMP_PKIStatusInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIStatusInfo ("PKIStatusInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CertOrEncCert (const char* name, 
   ASN1T_CMP_CertOrEncCert* pValue, ASN1T_CMP_CertOrEncCert* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* certificate */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.certificate", 0, 0, 0);
         if (! asn1Compare_CMP_CMPCertificate (namebuf, pValue->u.certificate, pCmpValue->u.certificate, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* encryptedCert */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.encryptedCert", 0, 0, 0);
         if (! asn1Compare_CRMF_EncryptedValue (namebuf, pValue->u.encryptedCert, pCmpValue->u.encryptedCert, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMP_CertOrEncCert::Equals (ASN1T_CMP_CertOrEncCert* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CertOrEncCert ("CertOrEncCert", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CertifiedKeyPair (const char* name, 
   ASN1T_CMP_CertifiedKeyPair* pValue, ASN1T_CMP_CertifiedKeyPair* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certOrEncCert", 0, 0, 0);
   if (! asn1Compare_CMP_CertOrEncCert (namebuf, &pValue->certOrEncCert, &pCmpValue->certOrEncCert, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".privateKey", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.privateKeyPresent,
   pCmpValue->m.privateKeyPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.privateKeyPresent) 
   {
      if (! asn1Compare_CRMF_EncryptedValue (namebuf, &pValue->privateKey, &pCmpValue->privateKey, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".publicationInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.publicationInfoPresent,
   pCmpValue->m.publicationInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.publicationInfoPresent) 
   {
      if (! asn1Compare_CRMF_PKIPublicationInfo (namebuf, &pValue->publicationInfo, &pCmpValue->publicationInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_CertifiedKeyPair::Equals (ASN1T_CMP_CertifiedKeyPair* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CertifiedKeyPair ("CertifiedKeyPair", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CertResponse (const char* name, 
   ASN1T_CMP_CertResponse* pValue, ASN1T_CMP_CertResponse* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certReqId", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->certReqId, pCmpValue->certReqId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".status", 0, 0, 0);
   if (! asn1Compare_CMP_PKIStatusInfo (namebuf, &pValue->status, &pCmpValue->status, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certifiedKeyPair", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certifiedKeyPairPresent,
   pCmpValue->m.certifiedKeyPairPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certifiedKeyPairPresent) 
   {
      if (! asn1Compare_CMP_CertifiedKeyPair (namebuf, &pValue->certifiedKeyPair, &pCmpValue->certifiedKeyPair, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".rspInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.rspInfoPresent,
   pCmpValue->m.rspInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.rspInfoPresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->rspInfo.numocts, 
         pValue->rspInfo.data, pCmpValue->rspInfo.numocts, 
         pCmpValue->rspInfo.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_CertResponse::Equals (ASN1T_CMP_CertResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CertResponse ("CertResponse", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP__SeqOfCMP_CertResponse (const char* name, 
   ASN1T_CMP__SeqOfCMP_CertResponse* pValue, 
   ASN1T_CMP__SeqOfCMP_CertResponse* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMP_CertResponse* pdata;
   ASN1T_CMP_CertResponse* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_CertResponse*) pnode->data;
      pCmpdata = (ASN1T_CMP_CertResponse*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_CertResponse (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP__SeqOfCMP_CertResponse::Equals (ASN1T_CMP__SeqOfCMP_CertResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP__SeqOfCMP_CertResponse ("_SeqOfCMP_CertResponse", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CertRepMessage (const char* name, 
   ASN1T_CMP_CertRepMessage* pValue, ASN1T_CMP_CertRepMessage* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".caPubs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.caPubsPresent,
   pCmpValue->m.caPubsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.caPubsPresent) 
   {
      if (! asn1Compare_CMP_CertRepMessage_caPubs (namebuf, &pValue->caPubs, &pCmpValue->caPubs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".response", 0, 0, 0);
   if (! asn1Compare_CMP__SeqOfCMP_CertResponse (namebuf, &pValue->response, &pCmpValue->response, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMP_CertRepMessage::Equals (ASN1T_CMP_CertRepMessage* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CertRepMessage ("CertRepMessage", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_Challenge (const char* name, 
   ASN1T_CMP_Challenge* pValue, ASN1T_CMP_Challenge* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".owf", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.owfPresent,
   pCmpValue->m.owfPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.owfPresent) 
   {
      if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->owf, &pCmpValue->owf, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".witness", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->witness.numocts, pValue->witness.data, 
      pCmpValue->witness.numocts, pCmpValue->witness.data, errBuff, errBuffSize
      )) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".challenge", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->challenge.numocts, 
      pValue->challenge.data, pCmpValue->challenge.numocts, 
      pCmpValue->challenge.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMP_Challenge::Equals (ASN1T_CMP_Challenge* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_Challenge ("Challenge", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_POPODecKeyChallContent (const char* name, 
   ASN1T_CMP_POPODecKeyChallContent* pValue, 
   ASN1T_CMP_POPODecKeyChallContent* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMP_Challenge* pdata;
   ASN1T_CMP_Challenge* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_Challenge*) pnode->data;
      pCmpdata = (ASN1T_CMP_Challenge*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_Challenge (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_POPODecKeyChallContent::Equals (ASN1T_CMP_POPODecKeyChallContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_POPODecKeyChallContent ("POPODecKeyChallContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_POPODecKeyRespContent (const char* name, 
   ASN1T_CMP_POPODecKeyRespContent* pValue, 
   ASN1T_CMP_POPODecKeyRespContent* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   OSINT32* pdata;
   OSINT32* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (OSINT32*) pnode->data;
      pCmpdata = (OSINT32*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpInteger (namebuf, *pdata, *pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_POPODecKeyRespContent::Equals (ASN1T_CMP_POPODecKeyRespContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_POPODecKeyRespContent ("POPODecKeyRespContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_KeyRecRepContent_caCerts (const char* name, 
   ASN1T_CMP_KeyRecRepContent_caCerts* pValue, 
   ASN1T_CMP_KeyRecRepContent_caCerts* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMP_CMPCertificate* pdata;
   ASN1T_CMP_CMPCertificate* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_CMPCertificate*) pnode->data;
      pCmpdata = (ASN1T_CMP_CMPCertificate*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_CMPCertificate (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_KeyRecRepContent_caCerts::Equals (ASN1T_CMP_KeyRecRepContent_caCerts* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_KeyRecRepContent_caCerts ("KeyRecRepContent_caCerts", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_KeyRecRepContent_keyPairHist (const char* name, 
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pValue, 
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMP_CertifiedKeyPair* pdata;
   ASN1T_CMP_CertifiedKeyPair* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_CertifiedKeyPair*) pnode->data;
      pCmpdata = (ASN1T_CMP_CertifiedKeyPair*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_CertifiedKeyPair (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_KeyRecRepContent_keyPairHist::Equals (ASN1T_CMP_KeyRecRepContent_keyPairHist* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_KeyRecRepContent_keyPairHist ("KeyRecRepContent_keyPairHist", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_KeyRecRepContent (const char* name, 
   ASN1T_CMP_KeyRecRepContent* pValue, ASN1T_CMP_KeyRecRepContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".status", 0, 0, 0);
   if (! asn1Compare_CMP_PKIStatusInfo (namebuf, &pValue->status, &pCmpValue->status, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".newSigCert", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.newSigCertPresent,
   pCmpValue->m.newSigCertPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.newSigCertPresent) 
   {
      if (! asn1Compare_CMP_CMPCertificate (namebuf, &pValue->newSigCert, &pCmpValue->newSigCert, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".caCerts", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.caCertsPresent,
   pCmpValue->m.caCertsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.caCertsPresent) 
   {
      if (! asn1Compare_CMP_KeyRecRepContent_caCerts (namebuf, &pValue->caCerts, &pCmpValue->caCerts, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".keyPairHist", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.keyPairHistPresent,
   pCmpValue->m.keyPairHistPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.keyPairHistPresent) 
   {
      if (! asn1Compare_CMP_KeyRecRepContent_keyPairHist (namebuf, &pValue->keyPairHist, &pCmpValue->keyPairHist, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_KeyRecRepContent::Equals (ASN1T_CMP_KeyRecRepContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_KeyRecRepContent ("KeyRecRepContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_RevDetails (const char* name, 
   ASN1T_CMP_RevDetails* pValue, ASN1T_CMP_RevDetails* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certDetails", 0, 0, 0);
   if (! asn1Compare_CRMF_CertTemplate (namebuf, &pValue->certDetails, &pCmpValue->certDetails, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".crlEntryDetails", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlEntryDetailsPresent,
   pCmpValue->m.crlEntryDetailsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlEntryDetailsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->crlEntryDetails, &pCmpValue->crlEntryDetails, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_RevDetails::Equals (ASN1T_CMP_RevDetails* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_RevDetails ("RevDetails", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_RevReqContent (const char* name, 
   ASN1T_CMP_RevReqContent* pValue, ASN1T_CMP_RevReqContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMP_RevDetails* pdata;
   ASN1T_CMP_RevDetails* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_RevDetails*) pnode->data;
      pCmpdata = (ASN1T_CMP_RevDetails*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_RevDetails (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_RevReqContent::Equals (ASN1T_CMP_RevReqContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_RevReqContent ("RevReqContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_RevRepContent_status (const char* name, 
   ASN1T_CMP_RevRepContent_status* pValue, 
   ASN1T_CMP_RevRepContent_status* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMP_PKIStatusInfo* pdata;
   ASN1T_CMP_PKIStatusInfo* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_PKIStatusInfo*) pnode->data;
      pCmpdata = (ASN1T_CMP_PKIStatusInfo*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_PKIStatusInfo (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_RevRepContent_status::Equals (ASN1T_CMP_RevRepContent_status* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_RevRepContent_status ("RevRepContent_status", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_RevRepContent_revCerts (const char* name, 
   ASN1T_CMP_RevRepContent_revCerts* pValue, 
   ASN1T_CMP_RevRepContent_revCerts* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CRMF_CertId* pdata;
   ASN1T_CRMF_CertId* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CRMF_CertId*) pnode->data;
      pCmpdata = (ASN1T_CRMF_CertId*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CRMF_CertId (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_RevRepContent_revCerts::Equals (ASN1T_CMP_RevRepContent_revCerts* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_RevRepContent_revCerts ("RevRepContent_revCerts", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_RevRepContent_crls (const char* name, 
   ASN1T_CMP_RevRepContent_crls* pValue, 
   ASN1T_CMP_RevRepContent_crls* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_CertificateList* pdata;
   ASN1T_EXP_CertificateList* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_CertificateList*) pnode->data;
      pCmpdata = (ASN1T_EXP_CertificateList*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_CertificateList (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_RevRepContent_crls::Equals (ASN1T_CMP_RevRepContent_crls* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_RevRepContent_crls ("RevRepContent_crls", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_RevRepContent (const char* name, 
   ASN1T_CMP_RevRepContent* pValue, ASN1T_CMP_RevRepContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".status", 0, 0, 0);
   if (! asn1Compare_CMP_RevRepContent_status (namebuf, &pValue->status, &pCmpValue->status, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".revCerts", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.revCertsPresent,
   pCmpValue->m.revCertsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.revCertsPresent) 
   {
      if (! asn1Compare_CMP_RevRepContent_revCerts (namebuf, &pValue->revCerts, &pCmpValue->revCerts, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".crls", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlsPresent,
   pCmpValue->m.crlsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlsPresent) 
   {
      if (! asn1Compare_CMP_RevRepContent_crls (namebuf, &pValue->crls, &pCmpValue->crls, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_RevRepContent::Equals (ASN1T_CMP_RevRepContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_RevRepContent ("RevRepContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CAKeyUpdAnnContent (const char* name, 
   ASN1T_CMP_CAKeyUpdAnnContent* pValue, 
   ASN1T_CMP_CAKeyUpdAnnContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".oldWithNew", 0, 0, 0);
   if (! asn1Compare_CMP_CMPCertificate (namebuf, &pValue->oldWithNew, &pCmpValue->oldWithNew, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".newWithOld", 0, 0, 0);
   if (! asn1Compare_CMP_CMPCertificate (namebuf, &pValue->newWithOld, &pCmpValue->newWithOld, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".newWithNew", 0, 0, 0);
   if (! asn1Compare_CMP_CMPCertificate (namebuf, &pValue->newWithNew, &pCmpValue->newWithNew, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMP_CAKeyUpdAnnContent::Equals (ASN1T_CMP_CAKeyUpdAnnContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CAKeyUpdAnnContent ("CAKeyUpdAnnContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CertAnnContent (const char* name, 
   ASN1T_CMP_CertAnnContent* pValue, ASN1T_CMP_CertAnnContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_CMP_CMPCertificate (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMP_CertAnnContent::Equals (ASN1T_CMP_CertAnnContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CertAnnContent ("CertAnnContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_RevAnnContent (const char* name, 
   ASN1T_CMP_RevAnnContent* pValue, ASN1T_CMP_RevAnnContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".status", 0, 0, 0);
   if (! asn1Compare_CMP_PKIStatus (namebuf, &pValue->status, &pCmpValue->status, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certId", 0, 0, 0);
   if (! asn1Compare_CRMF_CertId (namebuf, &pValue->certId, &pCmpValue->certId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".willBeRevokedAt", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->willBeRevokedAt, pCmpValue->willBeRevokedAt, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".badSinceDate", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->badSinceDate, pCmpValue->badSinceDate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".crlDetails", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlDetailsPresent,
   pCmpValue->m.crlDetailsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlDetailsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->crlDetails, &pCmpValue->crlDetails, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_RevAnnContent::Equals (ASN1T_CMP_RevAnnContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_RevAnnContent ("RevAnnContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CRLAnnContent (const char* name, 
   ASN1T_CMP_CRLAnnContent* pValue, ASN1T_CMP_CRLAnnContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_CertificateList* pdata;
   ASN1T_EXP_CertificateList* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_CertificateList*) pnode->data;
      pCmpdata = (ASN1T_EXP_CertificateList*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_CertificateList (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_CRLAnnContent::Equals (ASN1T_CMP_CRLAnnContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CRLAnnContent ("CRLAnnContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIConfirmContent (const char* name)
{
   return TRUE;
}

OSBOOL ASN1C_CMP_PKIConfirmContent::Equals ()
{
   if(asn1Compare_CMP_PKIConfirmContent ("PKIConfirmContent"))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_GenMsgContent (const char* name, 
   ASN1T_CMP_GenMsgContent* pValue, ASN1T_CMP_GenMsgContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMP_InfoTypeAndValue* pdata;
   ASN1T_CMP_InfoTypeAndValue* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      pCmpdata = (ASN1T_CMP_InfoTypeAndValue*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_InfoTypeAndValue (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_GenMsgContent::Equals (ASN1T_CMP_GenMsgContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_GenMsgContent ("GenMsgContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_GenRepContent (const char* name, 
   ASN1T_CMP_GenRepContent* pValue, ASN1T_CMP_GenRepContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMP_InfoTypeAndValue* pdata;
   ASN1T_CMP_InfoTypeAndValue* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      pCmpdata = (ASN1T_CMP_InfoTypeAndValue*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_InfoTypeAndValue (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_GenRepContent::Equals (ASN1T_CMP_GenRepContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_GenRepContent ("GenRepContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_ErrorMsgContent (const char* name, 
   ASN1T_CMP_ErrorMsgContent* pValue, ASN1T_CMP_ErrorMsgContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".pKIStatusInfo", 0, 0, 0);
   if (! asn1Compare_CMP_PKIStatusInfo (namebuf, &pValue->pKIStatusInfo, &pCmpValue->pKIStatusInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".errorCode", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.errorCodePresent,
   pCmpValue->m.errorCodePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.errorCodePresent) 
   {
      if ( !rtCmpInteger (namebuf, pValue->errorCode, pCmpValue->errorCode, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".errorDetails", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.errorDetailsPresent,
   pCmpValue->m.errorDetailsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.errorDetailsPresent) 
   {
      if (! asn1Compare_CMP_PKIFreeText (namebuf, &pValue->errorDetails, &pCmpValue->errorDetails, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_ErrorMsgContent::Equals (ASN1T_CMP_ErrorMsgContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_ErrorMsgContent ("ErrorMsgContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CertStatus (const char* name, 
   ASN1T_CMP_CertStatus* pValue, ASN1T_CMP_CertStatus* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certHash", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->certHash.numocts, 
      pValue->certHash.data, pCmpValue->certHash.numocts, 
      pCmpValue->certHash.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certReqId", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->certReqId, pCmpValue->certReqId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".statusInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.statusInfoPresent,
   pCmpValue->m.statusInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.statusInfoPresent) 
   {
      if (! asn1Compare_CMP_PKIStatusInfo (namebuf, &pValue->statusInfo, &pCmpValue->statusInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_CertStatus::Equals (ASN1T_CMP_CertStatus* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CertStatus ("CertStatus", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_CertConfirmContent (const char* name, 
   ASN1T_CMP_CertConfirmContent* pValue, 
   ASN1T_CMP_CertConfirmContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMP_CertStatus* pdata;
   ASN1T_CMP_CertStatus* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_CertStatus*) pnode->data;
      pCmpdata = (ASN1T_CMP_CertStatus*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_CertStatus (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_CertConfirmContent::Equals (ASN1T_CMP_CertConfirmContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_CertConfirmContent ("CertConfirmContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PollReqContent_element (const char* name, 
   ASN1T_CMP_PollReqContent_element* pValue, 
   ASN1T_CMP_PollReqContent_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certReqId", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->certReqId, pCmpValue->certReqId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMP_PollReqContent_element::Equals (ASN1T_CMP_PollReqContent_element* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PollReqContent_element ("PollReqContent_element", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PollReqContent (const char* name, 
   ASN1T_CMP_PollReqContent* pValue, ASN1T_CMP_PollReqContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMP_PollReqContent_element* pdata;
   ASN1T_CMP_PollReqContent_element* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_PollReqContent_element*) pnode->data;
      pCmpdata = (ASN1T_CMP_PollReqContent_element*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_PollReqContent_element (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PollReqContent::Equals (ASN1T_CMP_PollReqContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PollReqContent ("PollReqContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PollRepContent_element (const char* name, 
   ASN1T_CMP_PollRepContent_element* pValue, 
   ASN1T_CMP_PollRepContent_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certReqId", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->certReqId, pCmpValue->certReqId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".checkAfter", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->checkAfter, pCmpValue->checkAfter, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".reason", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.reasonPresent,
   pCmpValue->m.reasonPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.reasonPresent) 
   {
      if (! asn1Compare_CMP_PKIFreeText (namebuf, &pValue->reason, &pCmpValue->reason, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PollRepContent_element::Equals (ASN1T_CMP_PollRepContent_element* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PollRepContent_element ("PollRepContent_element", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PollRepContent (const char* name, 
   ASN1T_CMP_PollRepContent* pValue, ASN1T_CMP_PollRepContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMP_PollRepContent_element* pdata;
   ASN1T_CMP_PollRepContent_element* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_PollRepContent_element*) pnode->data;
      pCmpdata = (ASN1T_CMP_PollRepContent_element*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_PollRepContent_element (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PollRepContent::Equals (ASN1T_CMP_PollRepContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PollRepContent ("PollRepContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIBody (const char* name, ASN1T_CMP_PKIBody* pValue, 
   ASN1T_CMP_PKIBody* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* ir */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.ir", 0, 0, 0);
         if (! asn1Compare_CRMF_CertReqMessages (namebuf, pValue->u.ir, pCmpValue->u.ir, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* ip */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.ip", 0, 0, 0);
         if (! asn1Compare_CMP_CertRepMessage (namebuf, pValue->u.ip, pCmpValue->u.ip, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* cr */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.cr", 0, 0, 0);
         if (! asn1Compare_CRMF_CertReqMessages (namebuf, pValue->u.cr, pCmpValue->u.cr, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* cp */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.cp", 0, 0, 0);
         if (! asn1Compare_CMP_CertRepMessage (namebuf, pValue->u.cp, pCmpValue->u.cp, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* p10cr */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.p10cr", 0, 0, 0);
         if (! asn1Compare_PKCS10_CertificationRequest (namebuf, pValue->u.p10cr, pCmpValue->u.p10cr, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* popdecc */
      case 6:
         rtxStrJoin (namebuf, 512, name, ".u.popdecc", 0, 0, 0);
         if (! asn1Compare_CMP_POPODecKeyChallContent (namebuf, pValue->u.popdecc, pCmpValue->u.popdecc, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* popdecr */
      case 7:
         rtxStrJoin (namebuf, 512, name, ".u.popdecr", 0, 0, 0);
         if (! asn1Compare_CMP_POPODecKeyRespContent (namebuf, pValue->u.popdecr, pCmpValue->u.popdecr, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* kur */
      case 8:
         rtxStrJoin (namebuf, 512, name, ".u.kur", 0, 0, 0);
         if (! asn1Compare_CRMF_CertReqMessages (namebuf, pValue->u.kur, pCmpValue->u.kur, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* kup */
      case 9:
         rtxStrJoin (namebuf, 512, name, ".u.kup", 0, 0, 0);
         if (! asn1Compare_CMP_CertRepMessage (namebuf, pValue->u.kup, pCmpValue->u.kup, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* krr */
      case 10:
         rtxStrJoin (namebuf, 512, name, ".u.krr", 0, 0, 0);
         if (! asn1Compare_CRMF_CertReqMessages (namebuf, pValue->u.krr, pCmpValue->u.krr, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* krp */
      case 11:
         rtxStrJoin (namebuf, 512, name, ".u.krp", 0, 0, 0);
         if (! asn1Compare_CMP_KeyRecRepContent (namebuf, pValue->u.krp, pCmpValue->u.krp, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* rr */
      case 12:
         rtxStrJoin (namebuf, 512, name, ".u.rr", 0, 0, 0);
         if (! asn1Compare_CMP_RevReqContent (namebuf, pValue->u.rr, pCmpValue->u.rr, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* rp */
      case 13:
         rtxStrJoin (namebuf, 512, name, ".u.rp", 0, 0, 0);
         if (! asn1Compare_CMP_RevRepContent (namebuf, pValue->u.rp, pCmpValue->u.rp, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* ccr */
      case 14:
         rtxStrJoin (namebuf, 512, name, ".u.ccr", 0, 0, 0);
         if (! asn1Compare_CRMF_CertReqMessages (namebuf, pValue->u.ccr, pCmpValue->u.ccr, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* ccp */
      case 15:
         rtxStrJoin (namebuf, 512, name, ".u.ccp", 0, 0, 0);
         if (! asn1Compare_CMP_CertRepMessage (namebuf, pValue->u.ccp, pCmpValue->u.ccp, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* ckuann */
      case 16:
         rtxStrJoin (namebuf, 512, name, ".u.ckuann", 0, 0, 0);
         if (! asn1Compare_CMP_CAKeyUpdAnnContent (namebuf, pValue->u.ckuann, pCmpValue->u.ckuann, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* cann */
      case 17:
         rtxStrJoin (namebuf, 512, name, ".u.cann", 0, 0, 0);
         if (! asn1Compare_CMP_CertAnnContent (namebuf, pValue->u.cann, pCmpValue->u.cann, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* rann */
      case 18:
         rtxStrJoin (namebuf, 512, name, ".u.rann", 0, 0, 0);
         if (! asn1Compare_CMP_RevAnnContent (namebuf, pValue->u.rann, pCmpValue->u.rann, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* crlann */
      case 19:
         rtxStrJoin (namebuf, 512, name, ".u.crlann", 0, 0, 0);
         if (! asn1Compare_CMP_CRLAnnContent (namebuf, pValue->u.crlann, pCmpValue->u.crlann, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* pkiconf */
      case 20:
         rtxStrJoin (namebuf, 512, name, ".u.pkiconf", 0, 0, 0);
         break;

      /* nested */
      case 21:
         rtxStrJoin (namebuf, 512, name, ".u.nested", 0, 0, 0);
         if (! asn1Compare_CMP_NestedMessageContent (namebuf, (ASN1T_CMP_NestedMessageContent*)pValue->u.nested, (ASN1T_CMP_NestedMessageContent*)pCmpValue->u.nested, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* genm */
      case 22:
         rtxStrJoin (namebuf, 512, name, ".u.genm", 0, 0, 0);
         if (! asn1Compare_CMP_GenMsgContent (namebuf, pValue->u.genm, pCmpValue->u.genm, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* genp */
      case 23:
         rtxStrJoin (namebuf, 512, name, ".u.genp", 0, 0, 0);
         if (! asn1Compare_CMP_GenRepContent (namebuf, pValue->u.genp, pCmpValue->u.genp, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* error */
      case 24:
         rtxStrJoin (namebuf, 512, name, ".u.error", 0, 0, 0);
         if (! asn1Compare_CMP_ErrorMsgContent (namebuf, pValue->u.error, pCmpValue->u.error, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* certConf */
      case 25:
         rtxStrJoin (namebuf, 512, name, ".u.certConf", 0, 0, 0);
         if (! asn1Compare_CMP_CertConfirmContent (namebuf, pValue->u.certConf, pCmpValue->u.certConf, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* pollReq */
      case 26:
         rtxStrJoin (namebuf, 512, name, ".u.pollReq", 0, 0, 0);
         if (! asn1Compare_CMP_PollReqContent (namebuf, pValue->u.pollReq, pCmpValue->u.pollReq, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* pollRep */
      case 27:
         rtxStrJoin (namebuf, 512, name, ".u.pollRep", 0, 0, 0);
         if (! asn1Compare_CMP_PollRepContent (namebuf, pValue->u.pollRep, pCmpValue->u.pollRep, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bcr */
      case 28:
         rtxStrJoin (namebuf, 512, name, ".u.bcr", 0, 0, 0);
         if (! asn1Compare_CRMF_CertReqMessages (namebuf, pValue->u.bcr, pCmpValue->u.bcr, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMP_PKIBody::Equals (ASN1T_CMP_PKIBody* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIBody ("PKIBody", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIMessage_extraCerts (const char* name, 
   ASN1T_CMP_PKIMessage_extraCerts* pValue, 
   ASN1T_CMP_PKIMessage_extraCerts* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMP_CMPCertificate* pdata;
   ASN1T_CMP_CMPCertificate* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_CMPCertificate*) pnode->data;
      pCmpdata = (ASN1T_CMP_CMPCertificate*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_CMPCertificate (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PKIMessage_extraCerts::Equals (ASN1T_CMP_PKIMessage_extraCerts* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIMessage_extraCerts ("PKIMessage_extraCerts", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIMessage (const char* name, 
   ASN1T_CMP_PKIMessage* pValue, ASN1T_CMP_PKIMessage* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".header", 0, 0, 0);
   if (! asn1Compare_CMP_PKIHeader (namebuf, &pValue->header, &pCmpValue->header, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".body", 0, 0, 0);
   if (! asn1Compare_CMP_PKIBody (namebuf, &pValue->body, &pCmpValue->body, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".protection", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.protectionPresent,
   pCmpValue->m.protectionPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.protectionPresent) 
   {
      if (! asn1Compare_CMP_PKIProtection (namebuf, &pValue->protection, &pCmpValue->protection, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".extraCerts", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.extraCertsPresent,
   pCmpValue->m.extraCertsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.extraCertsPresent) 
   {
      if (! asn1Compare_CMP_PKIMessage_extraCerts (namebuf, &pValue->extraCerts, &pCmpValue->extraCerts, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PKIMessage::Equals (ASN1T_CMP_PKIMessage* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIMessage ("PKIMessage", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PKIMessages (const char* name, 
   ASN1T_CMP_PKIMessages* pValue, ASN1T_CMP_PKIMessages* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMP_PKIMessage* pdata;
   ASN1T_CMP_PKIMessage* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMP_PKIMessage*) pnode->data;
      pCmpdata = (ASN1T_CMP_PKIMessage*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMP_PKIMessage (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMP_PKIMessages::Equals (ASN1T_CMP_PKIMessages* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PKIMessages ("PKIMessages", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_NestedMessageContent (const char* name, 
   ASN1T_CMP_NestedMessageContent* pValue, 
   ASN1T_CMP_NestedMessageContent* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_CMP_PKIMessages (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMP_NestedMessageContent::Equals (ASN1T_CMP_NestedMessageContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_NestedMessageContent ("NestedMessageContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_OOBCert (const char* name, ASN1T_CMP_OOBCert* pValue, 
   ASN1T_CMP_OOBCert* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_CMP_CMPCertificate (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMP_OOBCert::Equals (ASN1T_CMP_OOBCert* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_OOBCert ("OOBCert", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_ProtectedPart (const char* name, 
   ASN1T_CMP_ProtectedPart* pValue, ASN1T_CMP_ProtectedPart* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".header", 0, 0, 0);
   if (! asn1Compare_CMP_PKIHeader (namebuf, &pValue->header, &pCmpValue->header, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".body", 0, 0, 0);
   if (! asn1Compare_CMP_PKIBody (namebuf, &pValue->body, &pCmpValue->body, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMP_ProtectedPart::Equals (ASN1T_CMP_ProtectedPart* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_ProtectedPart ("ProtectedPart", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_PBMParameter (const char* name, 
   ASN1T_CMP_PBMParameter* pValue, ASN1T_CMP_PBMParameter* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".salt", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->salt.numocts, pValue->salt.data, 
      pCmpValue->salt.numocts, pCmpValue->salt.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".owf", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->owf, &pCmpValue->owf, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".iterationCount", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->iterationCount, pCmpValue->iterationCount, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".mac", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->mac, &pCmpValue->mac, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMP_PBMParameter::Equals (ASN1T_CMP_PBMParameter* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_PBMParameter ("PBMParameter", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_DHBMParameter (const char* name, 
   ASN1T_CMP_DHBMParameter* pValue, ASN1T_CMP_DHBMParameter* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".owf", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->owf, &pCmpValue->owf, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".mac", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->mac, &pCmpValue->mac, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMP_DHBMParameter::Equals (ASN1T_CMP_DHBMParameter* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_DHBMParameter ("DHBMParameter", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMP_OOBCertHash (const char* name, 
   ASN1T_CMP_OOBCertHash* pValue, ASN1T_CMP_OOBCertHash* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".hashAlg", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.hashAlgPresent,
   pCmpValue->m.hashAlgPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.hashAlgPresent) 
   {
      if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->hashAlg, &pCmpValue->hashAlg, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".certId", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certIdPresent,
   pCmpValue->m.certIdPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certIdPresent) 
   {
      if (! asn1Compare_CRMF_CertId (namebuf, &pValue->certId, &pCmpValue->certId, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".hashVal", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->hashVal.numbits, pValue->hashVal.data, 
      pCmpValue->hashVal.numbits, pCmpValue->hashVal.data, errBuff, errBuffSize
      )) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMP_OOBCertHash::Equals (ASN1T_CMP_OOBCertHash* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMP_OOBCertHash ("OOBCertHash", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

