/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkcs5v2.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_PKCS5_PBEParameter_salt 
   (const char* name, const ASN1T_PKCS5_PBEParameter_salt* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS5_PBEParameter_salt::Print (const char* name)
{
   asn1Print_PKCS5_PBEParameter_salt (name, &msgData);
}

void asn1Print_PKCS5_RC2_CBC_Parameter_iv 
   (const char* name, const ASN1T_PKCS5_RC2_CBC_Parameter_iv* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS5_RC2_CBC_Parameter_iv::Print (const char* name)
{
   asn1Print_PKCS5_RC2_CBC_Parameter_iv (name, &msgData);
}

void asn1Print_PKCS5_RC5_CBC_Parameters_version 
   (const char* name, const ASN1T_PKCS5_RC5_CBC_Parameters_version* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 16: printf ("%s = v1_0\n", name); break;
      default: rtxPrintUnsigned (name, *pvalue);
   }
}

void ASN1C_PKCS5_RC5_CBC_Parameters_version::Print (const char* name)
{
   asn1Print_PKCS5_RC5_CBC_Parameters_version (name, &msgData);
}

void asn1Print_PKCS5_PBKDF2_params_salt 
   (const char* name, const ASN1T_PKCS5_PBKDF2_params_salt* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* specified */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintHexStr ("specified", pvalue->u.specified->numocts, pvalue->u.specified->data);
         break;
      }
      /* otherSource */
      case 2:
      {
         asn1Print_EXP_AlgorithmIdentifier ("otherSource", pvalue->
            u.otherSource);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS5_PBKDF2_params_salt::Print (const char* name)
{
   asn1Print_PKCS5_PBKDF2_params_salt (name, &msgData);
}

void asn1Print_PKCS5_PBKDF2_params 
   (const char* name, const ASN1T_PKCS5_PBKDF2_params* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS5_PBKDF2_params_salt ("salt", &pvalue->salt);

   rtxPrintIndent ();
   rtxPrintUnsigned ("iterationCount", pvalue->iterationCount);

   if (pvalue->m.keyLengthPresent) {
      rtxPrintIndent ();
      rtxPrintUnsigned ("keyLength", pvalue->keyLength);
   }

   if (pvalue->m.prfPresent) {
      asn1Print_EXP_AlgorithmIdentifier ("prf", &pvalue->prf);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS5_PBKDF2_params::Print (const char* name)
{
   asn1Print_PKCS5_PBKDF2_params (name, &msgData);
}

void asn1Print_PKCS5_PBEParameter 
   (const char* name, const ASN1T_PKCS5_PBEParameter* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS5_PBEParameter_salt ("salt", &pvalue->salt);

   rtxPrintIndent ();
   rtxPrintInteger ("iterationCount", pvalue->iterationCount);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS5_PBEParameter::Print (const char* name)
{
   asn1Print_PKCS5_PBEParameter (name, &msgData);
}

void asn1Print_PKCS5_PBES2_params 
   (const char* name, const ASN1T_PKCS5_PBES2_params* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("keyDerivationFunc", &pvalue->
      keyDerivationFunc);

   asn1Print_EXP_AlgorithmIdentifier ("encryptionScheme", &pvalue->
      encryptionScheme);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS5_PBES2_params::Print (const char* name)
{
   asn1Print_PKCS5_PBES2_params (name, &msgData);
}

void asn1Print_PKCS5_PBMAC1_params 
   (const char* name, const ASN1T_PKCS5_PBMAC1_params* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("keyDerivationFunc", &pvalue->
      keyDerivationFunc);

   asn1Print_EXP_AlgorithmIdentifier ("messageAuthScheme", &pvalue->
      messageAuthScheme);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS5_PBMAC1_params::Print (const char* name)
{
   asn1Print_PKCS5_PBMAC1_params (name, &msgData);
}

void asn1Print_PKCS5_RC2_CBC_Parameter 
   (const char* name, const ASN1T_PKCS5_RC2_CBC_Parameter* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.rc2ParameterVersionPresent) {
      rtxPrintIndent ();
      rtxPrintInteger ("rc2ParameterVersion", pvalue->rc2ParameterVersion);
   }

   asn1Print_PKCS5_RC2_CBC_Parameter_iv ("iv", &pvalue->iv);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS5_RC2_CBC_Parameter::Print (const char* name)
{
   asn1Print_PKCS5_RC2_CBC_Parameter (name, &msgData);
}

void asn1Print_PKCS5_RC5_CBC_Parameters 
   (const char* name, const ASN1T_PKCS5_RC5_CBC_Parameters* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS5_RC5_CBC_Parameters_version ("version", &pvalue->version);

   rtxPrintIndent ();
   rtxPrintUnsigned ("rounds", pvalue->rounds);

   rtxPrintIndent ();
   rtxPrintUnsigned ("blockSizeInBits", pvalue->blockSizeInBits);

   if (pvalue->m.ivPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("iv", pvalue->iv.numocts, pvalue->iv.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS5_RC5_CBC_Parameters::Print (const char* name)
{
   asn1Print_PKCS5_RC5_CBC_Parameters (name, &msgData);
}

