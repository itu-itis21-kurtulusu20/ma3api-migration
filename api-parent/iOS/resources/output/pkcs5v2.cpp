/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "pkcs5v2.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID PKCS5_rsadsi = {
   4,
   { 1, 2, 840, 113549 }
} ;
ASN1OBJID PKCS5_pkcs = {
   5,
   { 1, 2, 840, 113549, 1 }
} ;
ASN1OBJID PKCS5_pkcs_5 = {
   6,
   { 1, 2, 840, 113549, 1, 5 }
} ;
ASN1OBJID PKCS5_id_PBKDF2 = {
   7,
   { 1, 2, 840, 113549, 1, 5, 12 }
} ;
ASN1OBJID PKCS5_pbeWithMD2AndDES_CBC = {
   7,
   { 1, 2, 840, 113549, 1, 5, 1 }
} ;
ASN1OBJID PKCS5_pbeWithMD2AndRC2_CBC = {
   7,
   { 1, 2, 840, 113549, 1, 5, 4 }
} ;
ASN1OBJID PKCS5_pbeWithMD5AndDES_CBC = {
   7,
   { 1, 2, 840, 113549, 1, 5, 3 }
} ;
ASN1OBJID PKCS5_pbeWithMD5AndRC2_CBC = {
   7,
   { 1, 2, 840, 113549, 1, 5, 6 }
} ;
ASN1OBJID PKCS5_pbeWithSHA1AndDES_CBC = {
   7,
   { 1, 2, 840, 113549, 1, 5, 10 }
} ;
ASN1OBJID PKCS5_pbeWithSHA1AndRC2_CBC = {
   7,
   { 1, 2, 840, 113549, 1, 5, 11 }
} ;
ASN1OBJID PKCS5_id_PBES2 = {
   7,
   { 1, 2, 840, 113549, 1, 5, 13 }
} ;
ASN1OBJID PKCS5_id_PBMAC1 = {
   7,
   { 1, 2, 840, 113549, 1, 5, 14 }
} ;
ASN1OBJID PKCS5_digestAlgorithm = {
   5,
   { 1, 2, 840, 113549, 2 }
} ;
ASN1OBJID PKCS5_encryptionAlgorithm = {
   5,
   { 1, 2, 840, 113549, 3 }
} ;
ASN1OBJID PKCS5_id_hmacWithSHA1 = {
   6,
   { 1, 2, 840, 113549, 2, 7 }
} ;
ASN1OBJID PKCS5_id_hmacWithSHA224 = {
   6,
   { 1, 2, 840, 113549, 2, 8 }
} ;
ASN1OBJID PKCS5_id_hmacWithSHA256 = {
   6,
   { 1, 2, 840, 113549, 2, 9 }
} ;
ASN1OBJID PKCS5_id_hmacWithSHA384 = {
   6,
   { 1, 2, 840, 113549, 2, 10 }
} ;
ASN1OBJID PKCS5_id_hmacWithSHA512 = {
   6,
   { 1, 2, 840, 113549, 2, 11 }
} ;
ASN1OBJID PKCS5_rc2CBC = {
   6,
   { 1, 2, 840, 113549, 3, 2 }
} ;
ASN1OBJID PKCS5_rc5_CBC_PAD = {
   6,
   { 1, 2, 840, 113549, 3, 9 }
} ;

ASN1T_PKCS5_PBEParameter_salt* 
   new_ASN1T_PKCS5_PBEParameter_salt (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_PBEParameter_salt));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_PBEParameter_salt;
}

ASN1C_PKCS5_PBEParameter_salt::ASN1C_PKCS5_PBEParameter_salt
    (ASN1T_PKCS5_PBEParameter_salt& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_PBEParameter_salt::ASN1C_PKCS5_PBEParameter_salt (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS5_PBEParameter_salt& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_PBEParameter_salt::ASN1C_PKCS5_PBEParameter_salt (
   OSRTContext &context, ASN1T_PKCS5_PBEParameter_salt& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS5_PBEParameter_salt::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_PBEParameter_salt (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_PBEParameter_salt::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS5_PBEParameter_salt (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_PBEParameter_salt (ASN1T_PKCS5_PBEParameter_salt* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_PBEParameter_salt;
}

ASN1T_PKCS5_RC2_CBC_Parameter_iv* 
   new_ASN1T_PKCS5_RC2_CBC_Parameter_iv (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_RC2_CBC_Parameter_iv));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_RC2_CBC_Parameter_iv;
}

ASN1C_PKCS5_RC2_CBC_Parameter_iv::ASN1C_PKCS5_RC2_CBC_Parameter_iv
    (ASN1T_PKCS5_RC2_CBC_Parameter_iv& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_RC2_CBC_Parameter_iv::ASN1C_PKCS5_RC2_CBC_Parameter_iv (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS5_RC2_CBC_Parameter_iv& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_RC2_CBC_Parameter_iv::ASN1C_PKCS5_RC2_CBC_Parameter_iv (
   OSRTContext &context, ASN1T_PKCS5_RC2_CBC_Parameter_iv& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS5_RC2_CBC_Parameter_iv::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_RC2_CBC_Parameter_iv (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_RC2_CBC_Parameter_iv::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS5_RC2_CBC_Parameter_iv (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_RC2_CBC_Parameter_iv (
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_RC2_CBC_Parameter_iv;
}

ASN1T_PKCS5_RC5_CBC_Parameters_version* 
   new_ASN1T_PKCS5_RC5_CBC_Parameters_version (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_RC5_CBC_Parameters_version));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_RC5_CBC_Parameters_version;
}

ASN1C_PKCS5_RC5_CBC_Parameters_version::ASN1C_PKCS5_RC5_CBC_Parameters_version
    (ASN1T_PKCS5_RC5_CBC_Parameters_version& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_RC5_CBC_Parameters_version::
   ASN1C_PKCS5_RC5_CBC_Parameters_version (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS5_RC5_CBC_Parameters_version& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_RC5_CBC_Parameters_version::
   ASN1C_PKCS5_RC5_CBC_Parameters_version (OSRTContext &context
   , ASN1T_PKCS5_RC5_CBC_Parameters_version& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS5_RC5_CBC_Parameters_version::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_RC5_CBC_Parameters_version (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_RC5_CBC_Parameters_version::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS5_RC5_CBC_Parameters_version (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_PKCS5_PBKDF2_params_salt* 
   new_ASN1T_PKCS5_PBKDF2_params_salt (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_PBKDF2_params_salt));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_PBKDF2_params_salt;
}

ASN1C_PKCS5_PBKDF2_params_salt::ASN1C_PKCS5_PBKDF2_params_salt
    (ASN1T_PKCS5_PBKDF2_params_salt& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_PBKDF2_params_salt::ASN1C_PKCS5_PBKDF2_params_salt (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS5_PBKDF2_params_salt& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_PBKDF2_params_salt::ASN1C_PKCS5_PBKDF2_params_salt (
   OSRTContext &context, ASN1T_PKCS5_PBKDF2_params_salt& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS5_PBKDF2_params_salt::~ASN1T_PKCS5_PBKDF2_params_salt ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS5_PBKDF2_params_salt (pctxt, this);
   }
}

int ASN1C_PKCS5_PBKDF2_params_salt::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_PBKDF2_params_salt (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_PBKDF2_params_salt::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS5_PBKDF2_params_salt;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS5_PBKDF2_params_salt (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_PBKDF2_params_salt (ASN1T_PKCS5_PBKDF2_params_salt* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_PBKDF2_params_salt;
}

void asn1Free_PKCS5_PBKDF2_params_salt (OSCTXT *pctxt, 
   ASN1T_PKCS5_PBKDF2_params_salt* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != pvalue->u.specified) {
            if (pvalue->u.specified->numocts > 0) {
               rtxMemFreePtr (pctxt, (void*)pvalue->u.specified->data);
               pvalue->u.specified->numocts = 0;
               pvalue->u.specified->data = 0;
            }
            rtxMemFreePtr (pctxt, (void*)pvalue->u.specified);
         }
         break;

      case 2:
         if (0 != pvalue->u.otherSource) {
            asn1Free_EXP_AlgorithmIdentifier (pctxt, pvalue->u.otherSource);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.otherSource);
         }
         break;

   }
}

void ASN1C_PKCS5_PBKDF2_params_salt::MemFree ()
{
   asn1Free_PKCS5_PBKDF2_params_salt (getCtxtPtr(), &msgData);
}

ASN1T_PKCS5_PBKDF2_params* new_ASN1T_PKCS5_PBKDF2_params (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_PBKDF2_params));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_PBKDF2_params;
}

ASN1C_PKCS5_PBKDF2_params::ASN1C_PKCS5_PBKDF2_params
    (ASN1T_PKCS5_PBKDF2_params& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_PBKDF2_params::ASN1C_PKCS5_PBKDF2_params (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS5_PBKDF2_params& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_PBKDF2_params::ASN1C_PKCS5_PBKDF2_params (OSRTContext &context
   , ASN1T_PKCS5_PBKDF2_params& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS5_PBKDF2_params::ASN1T_PKCS5_PBKDF2_params ()
{
   m.keyLengthPresent = 0;
   m.prfPresent = 0;
}

ASN1T_PKCS5_PBKDF2_params::~ASN1T_PKCS5_PBKDF2_params ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS5_PBKDF2_params (pctxt, this);
   }
}

int ASN1C_PKCS5_PBKDF2_params::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_PBKDF2_params (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_PBKDF2_params::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS5_PBKDF2_params;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS5_PBKDF2_params (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_PBKDF2_params (ASN1T_PKCS5_PBKDF2_params* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_PBKDF2_params;
}

void asn1Free_PKCS5_PBKDF2_params (OSCTXT *pctxt, 
   ASN1T_PKCS5_PBKDF2_params* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS5_PBKDF2_params_salt (pctxt, &pvalue->salt);
   if (pvalue->m.prfPresent) {
      asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->prf);
   }
}

void ASN1C_PKCS5_PBKDF2_params::MemFree ()
{
   asn1Free_PKCS5_PBKDF2_params (getCtxtPtr(), &msgData);
}

ASN1T_PKCS5_PBEParameter* new_ASN1T_PKCS5_PBEParameter (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_PBEParameter));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_PBEParameter;
}

ASN1C_PKCS5_PBEParameter::ASN1C_PKCS5_PBEParameter
    (ASN1T_PKCS5_PBEParameter& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_PBEParameter::ASN1C_PKCS5_PBEParameter (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS5_PBEParameter& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_PBEParameter::ASN1C_PKCS5_PBEParameter (OSRTContext &context
   , ASN1T_PKCS5_PBEParameter& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS5_PBEParameter::ASN1T_PKCS5_PBEParameter ()
{
}

int ASN1C_PKCS5_PBEParameter::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_PBEParameter (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_PBEParameter::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS5_PBEParameter;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS5_PBEParameter (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_PBEParameter (ASN1T_PKCS5_PBEParameter* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_PBEParameter;
}

ASN1T_PKCS5_PBES2_params* new_ASN1T_PKCS5_PBES2_params (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_PBES2_params));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_PBES2_params;
}

ASN1C_PKCS5_PBES2_params::ASN1C_PKCS5_PBES2_params
    (ASN1T_PKCS5_PBES2_params& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_PBES2_params::ASN1C_PKCS5_PBES2_params (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS5_PBES2_params& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_PBES2_params::ASN1C_PKCS5_PBES2_params (OSRTContext &context
   , ASN1T_PKCS5_PBES2_params& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS5_PBES2_params::ASN1T_PKCS5_PBES2_params ()
{
}

ASN1T_PKCS5_PBES2_params::~ASN1T_PKCS5_PBES2_params ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS5_PBES2_params (pctxt, this);
   }
}

int ASN1C_PKCS5_PBES2_params::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_PBES2_params (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_PBES2_params::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS5_PBES2_params;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS5_PBES2_params (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_PBES2_params (ASN1T_PKCS5_PBES2_params* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_PBES2_params;
}

void asn1Free_PKCS5_PBES2_params (OSCTXT *pctxt, 
   ASN1T_PKCS5_PBES2_params* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->keyDerivationFunc);
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->encryptionScheme);
}

void ASN1C_PKCS5_PBES2_params::MemFree ()
{
   asn1Free_PKCS5_PBES2_params (getCtxtPtr(), &msgData);
}

ASN1T_PKCS5_PBMAC1_params* new_ASN1T_PKCS5_PBMAC1_params (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_PBMAC1_params));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_PBMAC1_params;
}

ASN1C_PKCS5_PBMAC1_params::ASN1C_PKCS5_PBMAC1_params
    (ASN1T_PKCS5_PBMAC1_params& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_PBMAC1_params::ASN1C_PKCS5_PBMAC1_params (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS5_PBMAC1_params& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_PBMAC1_params::ASN1C_PKCS5_PBMAC1_params (OSRTContext &context
   , ASN1T_PKCS5_PBMAC1_params& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS5_PBMAC1_params::ASN1T_PKCS5_PBMAC1_params ()
{
}

ASN1T_PKCS5_PBMAC1_params::~ASN1T_PKCS5_PBMAC1_params ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS5_PBMAC1_params (pctxt, this);
   }
}

int ASN1C_PKCS5_PBMAC1_params::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_PBMAC1_params (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_PBMAC1_params::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS5_PBMAC1_params;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS5_PBMAC1_params (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_PBMAC1_params (ASN1T_PKCS5_PBMAC1_params* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_PBMAC1_params;
}

void asn1Free_PKCS5_PBMAC1_params (OSCTXT *pctxt, 
   ASN1T_PKCS5_PBMAC1_params* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->keyDerivationFunc);
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->messageAuthScheme);
}

void ASN1C_PKCS5_PBMAC1_params::MemFree ()
{
   asn1Free_PKCS5_PBMAC1_params (getCtxtPtr(), &msgData);
}

ASN1T_PKCS5_RC2_CBC_Parameter* 
   new_ASN1T_PKCS5_RC2_CBC_Parameter (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_RC2_CBC_Parameter));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_RC2_CBC_Parameter;
}

ASN1C_PKCS5_RC2_CBC_Parameter::ASN1C_PKCS5_RC2_CBC_Parameter
    (ASN1T_PKCS5_RC2_CBC_Parameter& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_RC2_CBC_Parameter::ASN1C_PKCS5_RC2_CBC_Parameter (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS5_RC2_CBC_Parameter& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_RC2_CBC_Parameter::ASN1C_PKCS5_RC2_CBC_Parameter (
   OSRTContext &context, ASN1T_PKCS5_RC2_CBC_Parameter& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS5_RC2_CBC_Parameter::ASN1T_PKCS5_RC2_CBC_Parameter ()
{
   m.rc2ParameterVersionPresent = 0;
}

int ASN1C_PKCS5_RC2_CBC_Parameter::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_RC2_CBC_Parameter (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_RC2_CBC_Parameter::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS5_RC2_CBC_Parameter;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS5_RC2_CBC_Parameter (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_RC2_CBC_Parameter (ASN1T_PKCS5_RC2_CBC_Parameter* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_RC2_CBC_Parameter;
}

ASN1T_PKCS5_RC5_CBC_Parameters* 
   new_ASN1T_PKCS5_RC5_CBC_Parameters (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS5_RC5_CBC_Parameters));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS5_RC5_CBC_Parameters;
}

ASN1C_PKCS5_RC5_CBC_Parameters::ASN1C_PKCS5_RC5_CBC_Parameters
    (ASN1T_PKCS5_RC5_CBC_Parameters& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS5_RC5_CBC_Parameters::ASN1C_PKCS5_RC5_CBC_Parameters (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS5_RC5_CBC_Parameters& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS5_RC5_CBC_Parameters::ASN1C_PKCS5_RC5_CBC_Parameters (
   OSRTContext &context, ASN1T_PKCS5_RC5_CBC_Parameters& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS5_RC5_CBC_Parameters::ASN1T_PKCS5_RC5_CBC_Parameters ()
{
   m.ivPresent = 0;
}

ASN1T_PKCS5_RC5_CBC_Parameters::~ASN1T_PKCS5_RC5_CBC_Parameters ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS5_RC5_CBC_Parameters (pctxt, this);
   }
}

int ASN1C_PKCS5_RC5_CBC_Parameters::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS5_RC5_CBC_Parameters (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS5_RC5_CBC_Parameters::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS5_RC5_CBC_Parameters;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS5_RC5_CBC_Parameters (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS5_RC5_CBC_Parameters (ASN1T_PKCS5_RC5_CBC_Parameters* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS5_RC5_CBC_Parameters;
}

void asn1Free_PKCS5_RC5_CBC_Parameters (OSCTXT *pctxt, 
   ASN1T_PKCS5_RC5_CBC_Parameters* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.ivPresent) {
      if (pvalue->iv.numocts > 0) {
         rtxMemFreePtr (pctxt, (void*)pvalue->iv.data);
         pvalue->iv.numocts = 0;
         pvalue->iv.data = 0;
      }
   }
}

void ASN1C_PKCS5_RC5_CBC_Parameters::MemFree ()
{
   asn1Free_PKCS5_RC5_CBC_Parameters (getCtxtPtr(), &msgData);
}

