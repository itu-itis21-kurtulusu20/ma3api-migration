/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkcs5v2.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_PKCS5_PBEParameter_salt (OSCTXT* pctxt,
   ASN1T_PKCS5_PBEParameter_salt *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   if (!(pvalue->numocts == 8)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->numocts);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   return (ll0);
}

EXTERN int asn1E_PKCS5_RC2_CBC_Parameter_iv (OSCTXT* pctxt,
   ASN1T_PKCS5_RC2_CBC_Parameter_iv *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   if (!(pvalue->numocts == 8)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->numocts);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   return (ll0);
}

EXTERN int asn1E_PKCS5_RC5_CBC_Parameters_version (OSCTXT* pctxt,
   ASN1T_PKCS5_RC5_CBC_Parameters_version *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   if (!(*pvalue == 16)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)*pvalue);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_uint8 (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   return (ll0);
}

EXTERN int asn1E_PKCS5_PBKDF2_params_salt (OSCTXT* pctxt,
   ASN1T_PKCS5_PBKDF2_params_salt *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "specified");

         ll = xe_octstr (pctxt, pvalue->u.specified->data, pvalue->u.specified->numocts, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "otherSource");

         ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue->u.otherSource, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   return (ll0);
}

EXTERN int asn1E_PKCS5_PBKDF2_params (OSCTXT* pctxt,
   ASN1T_PKCS5_PBKDF2_params *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PBKDF2-params");

   /* encode prf */

   if (pvalue->m.prfPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "prf");

      ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->prf, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode keyLength */

   if (pvalue->m.keyLengthPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "keyLength");

      if (!(pvalue->keyLength >= 1)) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddUIntParm (pctxt, pvalue->keyLength);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      ll = xe_unsigned (pctxt, &pvalue->keyLength, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode iterationCount */

   RTXCTXTPUSHELEMNAME (pctxt, "iterationCount");

   if (!(pvalue->iterationCount >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddUIntParm (pctxt, pvalue->iterationCount);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_unsigned (pctxt, &pvalue->iterationCount, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode salt */

   RTXCTXTPUSHELEMNAME (pctxt, "salt");

   ll = asn1E_PKCS5_PBKDF2_params_salt (pctxt, &pvalue->salt, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS5_PBEParameter (OSCTXT* pctxt,
   ASN1T_PKCS5_PBEParameter *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PBEParameter");

   /* encode iterationCount */

   RTXCTXTPUSHELEMNAME (pctxt, "iterationCount");

   ll = xe_integer (pctxt, &pvalue->iterationCount, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode salt */

   RTXCTXTPUSHELEMNAME (pctxt, "salt");

   ll = asn1E_PKCS5_PBEParameter_salt (pctxt, &pvalue->salt, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS5_PBES2_params (OSCTXT* pctxt,
   ASN1T_PKCS5_PBES2_params *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PBES2-params");

   /* encode encryptionScheme */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptionScheme");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->encryptionScheme, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyDerivationFunc */

   RTXCTXTPUSHELEMNAME (pctxt, "keyDerivationFunc");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->keyDerivationFunc, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS5_PBMAC1_params (OSCTXT* pctxt,
   ASN1T_PKCS5_PBMAC1_params *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PBMAC1-params");

   /* encode messageAuthScheme */

   RTXCTXTPUSHELEMNAME (pctxt, "messageAuthScheme");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->messageAuthScheme, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyDerivationFunc */

   RTXCTXTPUSHELEMNAME (pctxt, "keyDerivationFunc");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->keyDerivationFunc, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS5_RC2_CBC_Parameter (OSCTXT* pctxt,
   ASN1T_PKCS5_RC2_CBC_Parameter *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RC2-CBC-Parameter");

   /* encode iv */

   RTXCTXTPUSHELEMNAME (pctxt, "iv");

   ll = asn1E_PKCS5_RC2_CBC_Parameter_iv (pctxt, &pvalue->iv, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode rc2ParameterVersion */

   if (pvalue->m.rc2ParameterVersionPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "rc2ParameterVersion");

      ll = xe_integer (pctxt, &pvalue->rc2ParameterVersion, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS5_RC5_CBC_Parameters (OSCTXT* pctxt,
   ASN1T_PKCS5_RC5_CBC_Parameters *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RC5-CBC-Parameters");

   /* encode iv */

   if (pvalue->m.ivPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "iv");

      ll = xe_octstr (pctxt, pvalue->iv.data, pvalue->iv.numocts, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode blockSizeInBits */

   RTXCTXTPUSHELEMNAME (pctxt, "blockSizeInBits");

   if (!((pvalue->blockSizeInBits == 64 || pvalue->blockSizeInBits == 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->blockSizeInBits);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_uint8 (pctxt, &pvalue->blockSizeInBits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode rounds */

   RTXCTXTPUSHELEMNAME (pctxt, "rounds");

   if (!((pvalue->rounds >= OSUINTCONST(8) && pvalue->rounds <= OSUINTCONST(127)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->rounds);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_uint8 (pctxt, &pvalue->rounds, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_PKCS5_RC5_CBC_Parameters_version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

