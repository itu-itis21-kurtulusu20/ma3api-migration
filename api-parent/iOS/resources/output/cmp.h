/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#ifndef CMP_H
#define CMP_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CBitStr.h"
#include "rtsrc/ASN1CSeqOfList.h"
#include "Explicit.h"
#include "Implicit.h"
#include "crmf.h"
#include "pkcs10.h"

/**
 * Header file for ASN.1 module cmp
 */
/**************************************************************/
/*                                                            */
/*  PKIProtection                                             */
/*                                                            */
/**************************************************************/
/*
PKIProtection ::= BIT STRING 
*/
#define TV_CMP_PKIProtection	(TM_UNIV|TM_PRIM|3)

typedef ASN1TDynBitStr ASN1T_CMP_PKIProtection;

class EXTERN ASN1C_CMP_PKIProtection :
public ASN1CBitStr
{
protected:
   ASN1T_CMP_PKIProtection& msgData;
public:
   ASN1C_CMP_PKIProtection (ASN1T_CMP_PKIProtection& data);
   ASN1C_CMP_PKIProtection (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIProtection& data);
   ASN1C_CMP_PKIProtection (OSRTContext &context, ASN1T_CMP_PKIProtection& data
      );
   ASN1C_CMP_PKIProtection (ASN1C_CMP_PKIProtection& original);
   virtual ~ASN1C_CMP_PKIProtection () {}
   inline ASN1T_CMP_PKIProtection& getData () { return msgData; }
   inline const ASN1T_CMP_PKIProtection& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIProtection");
   int toStream (const char* name = "PKIProtection");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIProtection* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIProtection& getCopy (ASN1T_CMP_PKIProtection* pDstData = 0);
   ASN1T_CMP_PKIProtection* newCopy ();

   ASN1C_CMP_PKIProtection& operator= (ASN1C_CMP_PKIProtection& srcData);
} ;

EXTERN int asn1E_CMP_PKIProtection (OSCTXT* pctxt,
   ASN1T_CMP_PKIProtection *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIProtection (OSCTXT* pctxt, 
   ASN1T_CMP_PKIProtection* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIProtection 
   (const char* name, const ASN1T_CMP_PKIProtection* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIProtection (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIProtection* pvalue);

EXTERN ASN1T_CMP_PKIProtection* new_ASN1T_CMP_PKIProtection (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMP_PKIProtection (const char* name, 
   ASN1T_CMP_PKIProtection* pValue, ASN1T_CMP_PKIProtection* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIProtection (OSCTXT* pctxt, 
   ASN1T_CMP_PKIProtection* pSrcValue, ASN1T_CMP_PKIProtection* pDstValue);

EXTERN void asn1Init_CMP_PKIProtection (ASN1T_CMP_PKIProtection* pvalue);

EXTERN void asn1Free_CMP_PKIProtection (OSCTXT *pctxt, 
   ASN1T_CMP_PKIProtection* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIHeader_pvno                                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PKIHeader'
*/
struct EXTERN CMP_PKIHeader_pvno {
   enum Root {
      cmp1999 = 1,
      cmp2000 = 2
   } ;
} ;

typedef OSINT32 ASN1T_CMP_PKIHeader_pvno;

class EXTERN ASN1C_CMP_PKIHeader_pvno :
public ASN1CType
{
protected:
   ASN1T_CMP_PKIHeader_pvno& msgData;
public:
   ASN1C_CMP_PKIHeader_pvno (ASN1T_CMP_PKIHeader_pvno& data);
   ASN1C_CMP_PKIHeader_pvno (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIHeader_pvno& data);
   ASN1C_CMP_PKIHeader_pvno (OSRTContext &context
      , ASN1T_CMP_PKIHeader_pvno& data);
   virtual ~ASN1C_CMP_PKIHeader_pvno () {}
   inline ASN1T_CMP_PKIHeader_pvno& getData () { return msgData; }
   inline const ASN1T_CMP_PKIHeader_pvno& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIHeader_pvno");
   int toStream (const char* name = "PKIHeader_pvno");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIHeader_pvno* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_CMP_PKIHeader_pvno (OSCTXT* pctxt,
   ASN1T_CMP_PKIHeader_pvno *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIHeader_pvno (OSCTXT* pctxt, 
   ASN1T_CMP_PKIHeader_pvno* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIHeader_pvno 
   (const char* name, const ASN1T_CMP_PKIHeader_pvno* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIHeader_pvno (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIHeader_pvno* pvalue);

EXTERN ASN1T_CMP_PKIHeader_pvno* 
   new_ASN1T_CMP_PKIHeader_pvno (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PKIHeader_pvno (const char* name, 
   ASN1T_CMP_PKIHeader_pvno* pValue, ASN1T_CMP_PKIHeader_pvno* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  PKIFreeText                                               */
/*                                                            */
/**************************************************************/
/*
PKIFreeText ::= SEQUENCE (SIZE (1..MAX)) OF UTF8String
*/
#define TV_CMP_PKIFreeText	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_PKIFreeText;

/* List of const OSUTF8CHAR* */
typedef struct EXTERN ASN1T_CMP_PKIFreeText : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_PKIFreeText();
} ASN1T_CMP_PKIFreeText;

class EXTERN ASN1C_CMP_PKIFreeText :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_PKIFreeText& msgData;
public:
   ASN1C_CMP_PKIFreeText (ASN1T_CMP_PKIFreeText& data);
   ASN1C_CMP_PKIFreeText (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIFreeText& data);
   ASN1C_CMP_PKIFreeText (ASN1CType& ccobj, ASN1T_CMP_PKIFreeText& data);
   ASN1C_CMP_PKIFreeText (OSRTContext &context, ASN1T_CMP_PKIFreeText& data);
   ASN1C_CMP_PKIFreeText (ASN1C_CMP_PKIFreeText& original);
   virtual ~ASN1C_CMP_PKIFreeText () {}
   inline ASN1T_CMP_PKIFreeText& getData () { return msgData; }
   inline const ASN1T_CMP_PKIFreeText& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIFreeText");
   int toStream (const char* name = "PKIFreeText");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIFreeText* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIFreeText& getCopy (ASN1T_CMP_PKIFreeText* pDstData = 0);
   ASN1T_CMP_PKIFreeText* newCopy ();

   ASN1C_CMP_PKIFreeText& operator= (ASN1C_CMP_PKIFreeText& srcData);
   void Append (const OSUTF8CHAR* elem);
} ;

EXTERN int asn1E_CMP_PKIFreeText (OSCTXT* pctxt,
   ASN1T_CMP_PKIFreeText *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIFreeText (OSCTXT* pctxt, 
   ASN1T_CMP_PKIFreeText* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIFreeText 
   (const char* name, const ASN1T_CMP_PKIFreeText* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIFreeText (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIFreeText* pvalue);

EXTERN OSBOOL asn1Compare_CMP_PKIFreeText (const char* name, 
   ASN1T_CMP_PKIFreeText* pValue, ASN1T_CMP_PKIFreeText* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIFreeText (OSCTXT* pctxt, 
   ASN1T_CMP_PKIFreeText* pSrcValue, ASN1T_CMP_PKIFreeText* pDstValue);

EXTERN void asn1Init_CMP_PKIFreeText (ASN1T_CMP_PKIFreeText* pvalue);

EXTERN void asn1Free_CMP_PKIFreeText (OSCTXT *pctxt, ASN1T_CMP_PKIFreeText* pvalue);

/**************************************************************/
/*                                                            */
/*  InfoTypeAndValue                                          */
/*                                                            */
/**************************************************************/
/*
InfoTypeAndValue ::= SEQUENCE {
   infoType OBJECT IDENTIFIER,
   infoValue ANY OPTIONAL
}
*/
#define TV_CMP_InfoTypeAndValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_InfoTypeAndValue;

struct EXTERN ASN1T_CMP_InfoTypeAndValue : public ASN1TPDU {
   struct {
      unsigned infoValuePresent : 1;
   } m;
   ASN1TObjId infoType;
   ASN1TOpenType infoValue;
   ASN1T_CMP_InfoTypeAndValue ();
   ASN1T_CMP_InfoTypeAndValue (ASN1C_CMP_InfoTypeAndValue& srcData);
   ~ASN1T_CMP_InfoTypeAndValue ();
} ;

class EXTERN ASN1C_CMP_InfoTypeAndValue :
public ASN1CType
{
protected:
   ASN1T_CMP_InfoTypeAndValue& msgData;
public:
   ASN1C_CMP_InfoTypeAndValue (ASN1T_CMP_InfoTypeAndValue& data);
   ASN1C_CMP_InfoTypeAndValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_InfoTypeAndValue& data);
   ASN1C_CMP_InfoTypeAndValue (OSRTContext &context
      , ASN1T_CMP_InfoTypeAndValue& data);
   ASN1C_CMP_InfoTypeAndValue (ASN1C_CMP_InfoTypeAndValue& original);
   virtual ~ASN1C_CMP_InfoTypeAndValue () {}
   inline ASN1T_CMP_InfoTypeAndValue& getData () { return msgData; }
   inline const ASN1T_CMP_InfoTypeAndValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "InfoTypeAndValue");
   int toStream (const char* name = "InfoTypeAndValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_InfoTypeAndValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_InfoTypeAndValue& getCopy (ASN1T_CMP_InfoTypeAndValue* pDstData = 0);
   ASN1T_CMP_InfoTypeAndValue* newCopy ();

   inline ASN1C_CMP_InfoTypeAndValue& operator= (ASN1C_CMP_InfoTypeAndValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_InfoTypeAndValue (OSCTXT* pctxt,
   ASN1T_CMP_InfoTypeAndValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_InfoTypeAndValue (OSCTXT* pctxt, 
   ASN1T_CMP_InfoTypeAndValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_InfoTypeAndValue 
   (const char* name, const ASN1T_CMP_InfoTypeAndValue* pvalue);

EXTERN int asn1PrtToStrm_CMP_InfoTypeAndValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_InfoTypeAndValue* pvalue);

EXTERN ASN1T_CMP_InfoTypeAndValue* 
   new_ASN1T_CMP_InfoTypeAndValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_InfoTypeAndValue (const char* name, 
   ASN1T_CMP_InfoTypeAndValue* pValue, ASN1T_CMP_InfoTypeAndValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_InfoTypeAndValue (OSCTXT* pctxt, 
   ASN1T_CMP_InfoTypeAndValue* pSrcValue, ASN1T_CMP_InfoTypeAndValue*
    pDstValue);

EXTERN void asn1Init_CMP_InfoTypeAndValue (ASN1T_CMP_InfoTypeAndValue* pvalue);

EXTERN void asn1Free_CMP_InfoTypeAndValue (OSCTXT *pctxt, 
   ASN1T_CMP_InfoTypeAndValue* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIHeader_generalInfo                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PKIHeader'
*/
class EXTERN ASN1C_CMP_PKIHeader_generalInfo;

/* List of ASN1T_CMP_InfoTypeAndValue */
typedef struct EXTERN ASN1T_CMP_PKIHeader_generalInfo : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_PKIHeader_generalInfo();
} ASN1T_CMP_PKIHeader_generalInfo;

class EXTERN ASN1C_CMP_PKIHeader_generalInfo :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_PKIHeader_generalInfo& msgData;
public:
   ASN1C_CMP_PKIHeader_generalInfo (ASN1T_CMP_PKIHeader_generalInfo& data);
   ASN1C_CMP_PKIHeader_generalInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIHeader_generalInfo& data);
   ASN1C_CMP_PKIHeader_generalInfo (ASN1CType& ccobj
      , ASN1T_CMP_PKIHeader_generalInfo& data);
   ASN1C_CMP_PKIHeader_generalInfo (OSRTContext &context
      , ASN1T_CMP_PKIHeader_generalInfo& data);
   ASN1C_CMP_PKIHeader_generalInfo (ASN1C_CMP_PKIHeader_generalInfo& original);
   virtual ~ASN1C_CMP_PKIHeader_generalInfo () {}
   inline ASN1T_CMP_PKIHeader_generalInfo& getData () { return msgData; }
   inline const ASN1T_CMP_PKIHeader_generalInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIHeader_generalInfo");
   int toStream (const char* name = "PKIHeader_generalInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIHeader_generalInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIHeader_generalInfo& getCopy (ASN1T_CMP_PKIHeader_generalInfo* pDstData = 0);
   ASN1T_CMP_PKIHeader_generalInfo* newCopy ();

   ASN1C_CMP_PKIHeader_generalInfo& operator= (ASN1C_CMP_PKIHeader_generalInfo& srcData);
   void Append (ASN1T_CMP_InfoTypeAndValue* elem);
   ASN1T_CMP_InfoTypeAndValue* NewElement ();
   ASN1T_CMP_InfoTypeAndValue* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_PKIHeader_generalInfo (OSCTXT* pctxt,
   ASN1T_CMP_PKIHeader_generalInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIHeader_generalInfo (OSCTXT* pctxt, 
   ASN1T_CMP_PKIHeader_generalInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIHeader_generalInfo 
   (const char* name, const ASN1T_CMP_PKIHeader_generalInfo* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIHeader_generalInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIHeader_generalInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMP_PKIHeader_generalInfo (const char* name, 
   ASN1T_CMP_PKIHeader_generalInfo* pValue, 
   ASN1T_CMP_PKIHeader_generalInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIHeader_generalInfo (OSCTXT* pctxt, 
   ASN1T_CMP_PKIHeader_generalInfo* pSrcValue, ASN1T_CMP_PKIHeader_generalInfo*
    pDstValue);

EXTERN void asn1Init_CMP_PKIHeader_generalInfo (
   ASN1T_CMP_PKIHeader_generalInfo* pvalue);

EXTERN void asn1Free_CMP_PKIHeader_generalInfo (OSCTXT *pctxt, 
   ASN1T_CMP_PKIHeader_generalInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIHeader                                                 */
/*                                                            */
/**************************************************************/
/*
PKIHeader ::= SEQUENCE {
   pvno INTEGER { cmp1999(1), cmp2000(2) },
   sender GeneralName,
   recipient GeneralName,
   messageTime [0] GeneralizedTime OPTIONAL,
   protectionAlg [1] AlgorithmIdentifier OPTIONAL,
   senderKID [2] KeyIdentifier OPTIONAL,
   recipKID [3] KeyIdentifier OPTIONAL,
   transactionID [4] OCTET STRING OPTIONAL,
   senderNonce [5] OCTET STRING OPTIONAL,
   recipNonce [6] OCTET STRING OPTIONAL,
   freeText [7] PKIFreeText OPTIONAL,
   generalInfo [8] SEQUENCE (SIZE (1..MAX)) OF InfoTypeAndValue OPTIONAL
}
*/
#define TV_CMP_PKIHeader	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_PKIHeader;

struct EXTERN ASN1T_CMP_PKIHeader : public ASN1TPDU {
   struct {
      unsigned messageTimePresent : 1;
      unsigned protectionAlgPresent : 1;
      unsigned senderKIDPresent : 1;
      unsigned recipKIDPresent : 1;
      unsigned transactionIDPresent : 1;
      unsigned senderNoncePresent : 1;
      unsigned recipNoncePresent : 1;
      unsigned freeTextPresent : 1;
      unsigned generalInfoPresent : 1;
   } m;
   ASN1T_CMP_PKIHeader_pvno pvno;
   ASN1T_IMP_GeneralName sender;
   ASN1T_IMP_GeneralName recipient;
   const char* messageTime;
   ASN1T_EXP_AlgorithmIdentifier protectionAlg;
   ASN1T_IMP_KeyIdentifier senderKID;
   ASN1T_IMP_KeyIdentifier recipKID;
   ASN1TDynOctStr transactionID;
   ASN1TDynOctStr senderNonce;
   ASN1TDynOctStr recipNonce;
   ASN1T_CMP_PKIFreeText freeText;
   ASN1T_CMP_PKIHeader_generalInfo generalInfo;
   ASN1T_CMP_PKIHeader ();
   ASN1T_CMP_PKIHeader (ASN1C_CMP_PKIHeader& srcData);
   ~ASN1T_CMP_PKIHeader ();
} ;

class EXTERN ASN1C_CMP_PKIHeader :
public ASN1CType
{
protected:
   ASN1T_CMP_PKIHeader& msgData;
public:
   ASN1C_CMP_PKIHeader (ASN1T_CMP_PKIHeader& data);
   ASN1C_CMP_PKIHeader (OSRTMessageBufferIF& msgBuf, ASN1T_CMP_PKIHeader& data);
   ASN1C_CMP_PKIHeader (OSRTContext &context, ASN1T_CMP_PKIHeader& data);
   ASN1C_CMP_PKIHeader (ASN1C_CMP_PKIHeader& original);
   virtual ~ASN1C_CMP_PKIHeader () {}
   inline ASN1T_CMP_PKIHeader& getData () { return msgData; }
   inline const ASN1T_CMP_PKIHeader& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIHeader");
   int toStream (const char* name = "PKIHeader");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIHeader* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIHeader& getCopy (ASN1T_CMP_PKIHeader* pDstData = 0);
   ASN1T_CMP_PKIHeader* newCopy ();

   inline ASN1C_CMP_PKIHeader& operator= (ASN1C_CMP_PKIHeader& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_PKIHeader (OSCTXT* pctxt,
   ASN1T_CMP_PKIHeader *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIHeader (OSCTXT* pctxt, ASN1T_CMP_PKIHeader* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIHeader 
   (const char* name, const ASN1T_CMP_PKIHeader* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIHeader (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIHeader* pvalue);

EXTERN ASN1T_CMP_PKIHeader* new_ASN1T_CMP_PKIHeader (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PKIHeader (const char* name, 
   ASN1T_CMP_PKIHeader* pValue, ASN1T_CMP_PKIHeader* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIHeader (OSCTXT* pctxt, ASN1T_CMP_PKIHeader* pSrcValue, 
   ASN1T_CMP_PKIHeader* pDstValue);

EXTERN void asn1Init_CMP_PKIHeader (ASN1T_CMP_PKIHeader* pvalue);

EXTERN void asn1Free_CMP_PKIHeader (OSCTXT *pctxt, ASN1T_CMP_PKIHeader* pvalue);

/**************************************************************/
/*                                                            */
/*  CMPCertificate                                            */
/*                                                            */
/**************************************************************/
/*
  the rest of the module contains locally-defined OIDs and constructs 

CMPCertificate ::= CHOICE {
   x509v3PKCert Certificate
}
*/
/* Choice context tags */

#define TVC_CMP_CMPCertificate_x509v3PKCert	(TM_UNIV|TM_CONS|16)

/* Choice tag constants */

#define T_CMP_CMPCertificate_x509v3PKCert 1

class EXTERN ASN1C_CMP_CMPCertificate;

struct EXTERN ASN1T_CMP_CMPCertificate : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_EXP_Certificate *x509v3PKCert;
   } u;
   ASN1T_CMP_CMPCertificate () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMP_CMPCertificate (ASN1C_CMP_CMPCertificate& srcData);
   ~ASN1T_CMP_CMPCertificate ();
} ;

class EXTERN ASN1C_CMP_CMPCertificate :
public ASN1CType
{
protected:
   ASN1T_CMP_CMPCertificate& msgData;
public:
   ASN1C_CMP_CMPCertificate (ASN1T_CMP_CMPCertificate& data);
   ASN1C_CMP_CMPCertificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CMPCertificate& data);
   ASN1C_CMP_CMPCertificate (OSRTContext &context
      , ASN1T_CMP_CMPCertificate& data);
   ASN1C_CMP_CMPCertificate (ASN1C_CMP_CMPCertificate& original);
   virtual ~ASN1C_CMP_CMPCertificate () {}
   inline ASN1T_CMP_CMPCertificate& getData () { return msgData; }
   inline const ASN1T_CMP_CMPCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CMPCertificate");
   int toStream (const char* name = "CMPCertificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CMPCertificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CMPCertificate& getCopy (ASN1T_CMP_CMPCertificate* pDstData = 0);
   ASN1T_CMP_CMPCertificate* newCopy ();

   inline ASN1C_CMP_CMPCertificate& operator= (ASN1C_CMP_CMPCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_CMPCertificate (OSCTXT* pctxt,
   ASN1T_CMP_CMPCertificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CMPCertificate (OSCTXT* pctxt, 
   ASN1T_CMP_CMPCertificate* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CMPCertificate 
   (const char* name, const ASN1T_CMP_CMPCertificate* pvalue);

EXTERN int asn1PrtToStrm_CMP_CMPCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CMPCertificate* pvalue);

EXTERN ASN1T_CMP_CMPCertificate* 
   new_ASN1T_CMP_CMPCertificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_CMPCertificate (const char* name, 
   ASN1T_CMP_CMPCertificate* pValue, ASN1T_CMP_CMPCertificate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CMPCertificate (OSCTXT* pctxt, 
   ASN1T_CMP_CMPCertificate* pSrcValue, ASN1T_CMP_CMPCertificate* pDstValue);

EXTERN void asn1Init_CMP_CMPCertificate (ASN1T_CMP_CMPCertificate* pvalue);

EXTERN void asn1Free_CMP_CMPCertificate (OSCTXT *pctxt, 
   ASN1T_CMP_CMPCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  CertRepMessage_caPubs                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'CertRepMessage'
*/
class EXTERN ASN1C_CMP_CertRepMessage_caPubs;

/* List of ASN1T_CMP_CMPCertificate */
typedef struct EXTERN ASN1T_CMP_CertRepMessage_caPubs : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_CertRepMessage_caPubs();
} ASN1T_CMP_CertRepMessage_caPubs;

class EXTERN ASN1C_CMP_CertRepMessage_caPubs :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_CertRepMessage_caPubs& msgData;
public:
   ASN1C_CMP_CertRepMessage_caPubs (ASN1T_CMP_CertRepMessage_caPubs& data);
   ASN1C_CMP_CertRepMessage_caPubs (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CertRepMessage_caPubs& data);
   ASN1C_CMP_CertRepMessage_caPubs (ASN1CType& ccobj
      , ASN1T_CMP_CertRepMessage_caPubs& data);
   ASN1C_CMP_CertRepMessage_caPubs (OSRTContext &context
      , ASN1T_CMP_CertRepMessage_caPubs& data);
   ASN1C_CMP_CertRepMessage_caPubs (ASN1C_CMP_CertRepMessage_caPubs& original);
   virtual ~ASN1C_CMP_CertRepMessage_caPubs () {}
   inline ASN1T_CMP_CertRepMessage_caPubs& getData () { return msgData; }
   inline const ASN1T_CMP_CertRepMessage_caPubs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertRepMessage_caPubs");
   int toStream (const char* name = "CertRepMessage_caPubs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CertRepMessage_caPubs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CertRepMessage_caPubs& getCopy (ASN1T_CMP_CertRepMessage_caPubs* pDstData = 0);
   ASN1T_CMP_CertRepMessage_caPubs* newCopy ();

   ASN1C_CMP_CertRepMessage_caPubs& operator= (ASN1C_CMP_CertRepMessage_caPubs& srcData);
   void Append (ASN1T_CMP_CMPCertificate* elem);
   ASN1T_CMP_CMPCertificate* NewElement ();
   ASN1T_CMP_CMPCertificate* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_CertRepMessage_caPubs (OSCTXT* pctxt,
   ASN1T_CMP_CertRepMessage_caPubs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CertRepMessage_caPubs (OSCTXT* pctxt, 
   ASN1T_CMP_CertRepMessage_caPubs* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CertRepMessage_caPubs 
   (const char* name, const ASN1T_CMP_CertRepMessage_caPubs* pvalue);

EXTERN int asn1PrtToStrm_CMP_CertRepMessage_caPubs (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertRepMessage_caPubs* pvalue);

EXTERN OSBOOL asn1Compare_CMP_CertRepMessage_caPubs (const char* name, 
   ASN1T_CMP_CertRepMessage_caPubs* pValue, 
   ASN1T_CMP_CertRepMessage_caPubs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CertRepMessage_caPubs (OSCTXT* pctxt, 
   ASN1T_CMP_CertRepMessage_caPubs* pSrcValue, ASN1T_CMP_CertRepMessage_caPubs*
    pDstValue);

EXTERN void asn1Init_CMP_CertRepMessage_caPubs (
   ASN1T_CMP_CertRepMessage_caPubs* pvalue);

EXTERN void asn1Free_CMP_CertRepMessage_caPubs (OSCTXT *pctxt, 
   ASN1T_CMP_CertRepMessage_caPubs* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIStatus                                                 */
/*                                                            */
/**************************************************************/
/*
PKIStatus ::= INTEGER { accepted(0), grantedWithMods(1), rejection(2), waiting(3), revocationWarning(4), revocationNotification(5), keyUpdateWarning(6) }
*/
#define TV_CMP_PKIStatus	(TM_UNIV|TM_PRIM|2)

struct EXTERN CMP_PKIStatus {
   enum Root {
      accepted = 0,
      grantedWithMods = 1,
      rejection = 2,
      waiting = 3,
      revocationWarning = 4,
      revocationNotification = 5,
      keyUpdateWarning = 6
   } ;
} ;

typedef OSINT32 ASN1T_CMP_PKIStatus;

class EXTERN ASN1C_CMP_PKIStatus :
public ASN1CType
{
protected:
   ASN1T_CMP_PKIStatus& msgData;
public:
   ASN1C_CMP_PKIStatus (ASN1T_CMP_PKIStatus& data);
   ASN1C_CMP_PKIStatus (OSRTMessageBufferIF& msgBuf, ASN1T_CMP_PKIStatus& data);
   ASN1C_CMP_PKIStatus (OSRTContext &context, ASN1T_CMP_PKIStatus& data);
   virtual ~ASN1C_CMP_PKIStatus () {}
   inline ASN1T_CMP_PKIStatus& getData () { return msgData; }
   inline const ASN1T_CMP_PKIStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIStatus");
   int toStream (const char* name = "PKIStatus");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIStatus* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_CMP_PKIStatus (OSCTXT* pctxt,
   ASN1T_CMP_PKIStatus *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIStatus (OSCTXT* pctxt, ASN1T_CMP_PKIStatus* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIStatus 
   (const char* name, const ASN1T_CMP_PKIStatus* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIStatus* pvalue);

EXTERN ASN1T_CMP_PKIStatus* new_ASN1T_CMP_PKIStatus (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PKIStatus (const char* name, 
   ASN1T_CMP_PKIStatus* pValue, ASN1T_CMP_PKIStatus* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  PKIFailureInfo                                            */
/*                                                            */
/**************************************************************/
/*
PKIFailureInfo ::= BIT STRING  { badAlg(0), badMessageCheck(1), badRequest(2), badTime(3), badCertId(4), badDataFormat(5), wrongAuthority(6), incorrectData(7), missingTimeStamp(8), badPOP(9), certRevoked(10), certConfirmed(11), wrongIntegrity(12), badRecipientNonce(13), timeNotAvailable(14), unacceptedPolicy(15), unacceptedExtension(16), addInfoNotAvailable(17), badSenderNonce(18), badCertTemplate(19), signerNotTrusted(20), transactionIdInUse(21), unsupportedVersion(22), notAuthorized(23), systemUnavail(24), systemFailure(25), duplicateCertReq(26) }
*/
#define TV_CMP_PKIFailureInfo	(TM_UNIV|TM_PRIM|3)

class EXTERN ASN1C_CMP_PKIFailureInfo;

struct EXTERN ASN1T_CMP_PKIFailureInfo {
   OSUINT32 numbits;
   OSOCTET data[4];
   // ctors
   ASN1T_CMP_PKIFailureInfo () : numbits(0) {}
   ASN1T_CMP_PKIFailureInfo (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits (_numbits) {
      OSCRTLMEMCPY (data, _data, sizeof(data));
   }
   ASN1T_CMP_PKIFailureInfo (ASN1C_CMP_PKIFailureInfo& srcData);
} ;

class EXTERN ASN1C_CMP_PKIFailureInfo :
public ASN1CBitStr
{
protected:
   ASN1T_CMP_PKIFailureInfo& msgData;
public:
   // named bits
   enum { badAlg = 0, badMessageCheck = 1, badRequest = 2, badTime = 3, badCertId = 4, badDataFormat = 5, wrongAuthority = 6, incorrectData = 7, missingTimeStamp = 8, badPOP = 9, certRevoked = 10, certConfirmed = 11, wrongIntegrity = 12, badRecipientNonce = 13, timeNotAvailable = 14, unacceptedPolicy = 15, unacceptedExtension = 16, addInfoNotAvailable = 17, badSenderNonce = 18, badCertTemplate = 19, signerNotTrusted = 20, transactionIdInUse = 21, unsupportedVersion = 22, notAuthorized = 23, systemUnavail = 24, systemFailure = 25, duplicateCertReq = 26 };

   ASN1C_CMP_PKIFailureInfo (ASN1T_CMP_PKIFailureInfo& data);
   ASN1C_CMP_PKIFailureInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIFailureInfo& data);
   ASN1C_CMP_PKIFailureInfo (OSRTContext &context
      , ASN1T_CMP_PKIFailureInfo& data);
   ASN1C_CMP_PKIFailureInfo (ASN1C_CMP_PKIFailureInfo& original);
   virtual ~ASN1C_CMP_PKIFailureInfo () {}
   inline ASN1T_CMP_PKIFailureInfo& getData () { return msgData; }
   inline const ASN1T_CMP_PKIFailureInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIFailureInfo");
   int toStream (const char* name = "PKIFailureInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIFailureInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIFailureInfo& getCopy (ASN1T_CMP_PKIFailureInfo* pDstData = 0);
   ASN1T_CMP_PKIFailureInfo* newCopy ();

   ASN1C_CMP_PKIFailureInfo& operator= (ASN1C_CMP_PKIFailureInfo& srcData);
} ;

EXTERN int asn1E_CMP_PKIFailureInfo (OSCTXT* pctxt,
   ASN1T_CMP_PKIFailureInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIFailureInfo (OSCTXT* pctxt, 
   ASN1T_CMP_PKIFailureInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIFailureInfo 
   (const char* name, const ASN1T_CMP_PKIFailureInfo* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIFailureInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIFailureInfo* pvalue);

EXTERN ASN1T_CMP_PKIFailureInfo* 
   new_ASN1T_CMP_PKIFailureInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PKIFailureInfo (const char* name, 
   ASN1T_CMP_PKIFailureInfo* pValue, ASN1T_CMP_PKIFailureInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIFailureInfo (OSCTXT* pctxt, 
   ASN1T_CMP_PKIFailureInfo* pSrcValue, ASN1T_CMP_PKIFailureInfo* pDstValue);

EXTERN void asn1Init_CMP_PKIFailureInfo (ASN1T_CMP_PKIFailureInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIStatusInfo                                             */
/*                                                            */
/**************************************************************/
/*
PKIStatusInfo ::= SEQUENCE {
   status PKIStatus,
   statusString PKIFreeText OPTIONAL,
   failInfo PKIFailureInfo OPTIONAL
}
*/
#define TV_CMP_PKIStatusInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_PKIStatusInfo;

struct EXTERN ASN1T_CMP_PKIStatusInfo : public ASN1TPDU {
   struct {
      unsigned statusStringPresent : 1;
      unsigned failInfoPresent : 1;
   } m;
   ASN1T_CMP_PKIStatus status;
   ASN1T_CMP_PKIFreeText statusString;
   ASN1T_CMP_PKIFailureInfo failInfo;
   ASN1T_CMP_PKIStatusInfo ();
   ASN1T_CMP_PKIStatusInfo (ASN1C_CMP_PKIStatusInfo& srcData);
   ~ASN1T_CMP_PKIStatusInfo ();
} ;

class EXTERN ASN1C_CMP_PKIStatusInfo :
public ASN1CType
{
protected:
   ASN1T_CMP_PKIStatusInfo& msgData;
public:
   ASN1C_CMP_PKIStatusInfo (ASN1T_CMP_PKIStatusInfo& data);
   ASN1C_CMP_PKIStatusInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIStatusInfo& data);
   ASN1C_CMP_PKIStatusInfo (OSRTContext &context, ASN1T_CMP_PKIStatusInfo& data
      );
   ASN1C_CMP_PKIStatusInfo (ASN1C_CMP_PKIStatusInfo& original);
   virtual ~ASN1C_CMP_PKIStatusInfo () {}
   inline ASN1T_CMP_PKIStatusInfo& getData () { return msgData; }
   inline const ASN1T_CMP_PKIStatusInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIStatusInfo");
   int toStream (const char* name = "PKIStatusInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIStatusInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIStatusInfo& getCopy (ASN1T_CMP_PKIStatusInfo* pDstData = 0);
   ASN1T_CMP_PKIStatusInfo* newCopy ();

   inline ASN1C_CMP_PKIStatusInfo& operator= (ASN1C_CMP_PKIStatusInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_PKIStatusInfo (OSCTXT* pctxt,
   ASN1T_CMP_PKIStatusInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIStatusInfo (OSCTXT* pctxt, 
   ASN1T_CMP_PKIStatusInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIStatusInfo 
   (const char* name, const ASN1T_CMP_PKIStatusInfo* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIStatusInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIStatusInfo* pvalue);

EXTERN ASN1T_CMP_PKIStatusInfo* new_ASN1T_CMP_PKIStatusInfo (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMP_PKIStatusInfo (const char* name, 
   ASN1T_CMP_PKIStatusInfo* pValue, ASN1T_CMP_PKIStatusInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIStatusInfo (OSCTXT* pctxt, 
   ASN1T_CMP_PKIStatusInfo* pSrcValue, ASN1T_CMP_PKIStatusInfo* pDstValue);

EXTERN void asn1Init_CMP_PKIStatusInfo (ASN1T_CMP_PKIStatusInfo* pvalue);

EXTERN void asn1Free_CMP_PKIStatusInfo (OSCTXT *pctxt, 
   ASN1T_CMP_PKIStatusInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertOrEncCert                                             */
/*                                                            */
/**************************************************************/
/*
CertOrEncCert ::= CHOICE {
   certificate [0] CMPCertificate,
   encryptedCert [1] EncryptedValue
}
*/
/* Choice context tags */

#define TVC_CMP_CertOrEncCert_certificate	(TM_CTXT|TM_CONS|0)
#define TVC_CMP_CertOrEncCert_encryptedCert	(TM_CTXT|TM_CONS|1)

/* Choice tag constants */

#define T_CMP_CertOrEncCert_certificate 1
#define T_CMP_CertOrEncCert_encryptedCert 2

class EXTERN ASN1C_CMP_CertOrEncCert;

struct EXTERN ASN1T_CMP_CertOrEncCert : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_CMP_CMPCertificate *certificate;
      /* t = 2 */
      ASN1T_CRMF_EncryptedValue *encryptedCert;
   } u;
   ASN1T_CMP_CertOrEncCert () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMP_CertOrEncCert (ASN1C_CMP_CertOrEncCert& srcData);
   ~ASN1T_CMP_CertOrEncCert ();
} ;

class EXTERN ASN1C_CMP_CertOrEncCert :
public ASN1CType
{
protected:
   ASN1T_CMP_CertOrEncCert& msgData;
public:
   ASN1C_CMP_CertOrEncCert (ASN1T_CMP_CertOrEncCert& data);
   ASN1C_CMP_CertOrEncCert (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CertOrEncCert& data);
   ASN1C_CMP_CertOrEncCert (OSRTContext &context, ASN1T_CMP_CertOrEncCert& data
      );
   ASN1C_CMP_CertOrEncCert (ASN1C_CMP_CertOrEncCert& original);
   virtual ~ASN1C_CMP_CertOrEncCert () {}
   inline ASN1T_CMP_CertOrEncCert& getData () { return msgData; }
   inline const ASN1T_CMP_CertOrEncCert& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertOrEncCert");
   int toStream (const char* name = "CertOrEncCert");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CertOrEncCert* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CertOrEncCert& getCopy (ASN1T_CMP_CertOrEncCert* pDstData = 0);
   ASN1T_CMP_CertOrEncCert* newCopy ();

   inline ASN1C_CMP_CertOrEncCert& operator= (ASN1C_CMP_CertOrEncCert& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_CertOrEncCert (OSCTXT* pctxt,
   ASN1T_CMP_CertOrEncCert *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CertOrEncCert (OSCTXT* pctxt, 
   ASN1T_CMP_CertOrEncCert* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CertOrEncCert 
   (const char* name, const ASN1T_CMP_CertOrEncCert* pvalue);

EXTERN int asn1PrtToStrm_CMP_CertOrEncCert (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertOrEncCert* pvalue);

EXTERN ASN1T_CMP_CertOrEncCert* new_ASN1T_CMP_CertOrEncCert (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMP_CertOrEncCert (const char* name, 
   ASN1T_CMP_CertOrEncCert* pValue, ASN1T_CMP_CertOrEncCert* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CertOrEncCert (OSCTXT* pctxt, 
   ASN1T_CMP_CertOrEncCert* pSrcValue, ASN1T_CMP_CertOrEncCert* pDstValue);

EXTERN void asn1Init_CMP_CertOrEncCert (ASN1T_CMP_CertOrEncCert* pvalue);

EXTERN void asn1Free_CMP_CertOrEncCert (OSCTXT *pctxt, 
   ASN1T_CMP_CertOrEncCert* pvalue);

/**************************************************************/
/*                                                            */
/*  CertifiedKeyPair                                          */
/*                                                            */
/**************************************************************/
/*
CertifiedKeyPair ::= SEQUENCE {
   certOrEncCert CertOrEncCert,
   privateKey [0] EncryptedValue OPTIONAL,
   publicationInfo [1] PKIPublicationInfo OPTIONAL
}
*/
#define TV_CMP_CertifiedKeyPair	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_CertifiedKeyPair;

struct EXTERN ASN1T_CMP_CertifiedKeyPair : public ASN1TPDU {
   struct {
      unsigned privateKeyPresent : 1;
      unsigned publicationInfoPresent : 1;
   } m;
   ASN1T_CMP_CertOrEncCert certOrEncCert;
   ASN1T_CRMF_EncryptedValue privateKey;
   ASN1T_CRMF_PKIPublicationInfo publicationInfo;
   ASN1T_CMP_CertifiedKeyPair ();
   ASN1T_CMP_CertifiedKeyPair (ASN1C_CMP_CertifiedKeyPair& srcData);
   ~ASN1T_CMP_CertifiedKeyPair ();
} ;

class EXTERN ASN1C_CMP_CertifiedKeyPair :
public ASN1CType
{
protected:
   ASN1T_CMP_CertifiedKeyPair& msgData;
public:
   ASN1C_CMP_CertifiedKeyPair (ASN1T_CMP_CertifiedKeyPair& data);
   ASN1C_CMP_CertifiedKeyPair (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CertifiedKeyPair& data);
   ASN1C_CMP_CertifiedKeyPair (OSRTContext &context
      , ASN1T_CMP_CertifiedKeyPair& data);
   ASN1C_CMP_CertifiedKeyPair (ASN1C_CMP_CertifiedKeyPair& original);
   virtual ~ASN1C_CMP_CertifiedKeyPair () {}
   inline ASN1T_CMP_CertifiedKeyPair& getData () { return msgData; }
   inline const ASN1T_CMP_CertifiedKeyPair& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertifiedKeyPair");
   int toStream (const char* name = "CertifiedKeyPair");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CertifiedKeyPair* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CertifiedKeyPair& getCopy (ASN1T_CMP_CertifiedKeyPair* pDstData = 0);
   ASN1T_CMP_CertifiedKeyPair* newCopy ();

   inline ASN1C_CMP_CertifiedKeyPair& operator= (ASN1C_CMP_CertifiedKeyPair& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_CertifiedKeyPair (OSCTXT* pctxt,
   ASN1T_CMP_CertifiedKeyPair *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CertifiedKeyPair (OSCTXT* pctxt, 
   ASN1T_CMP_CertifiedKeyPair* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CertifiedKeyPair 
   (const char* name, const ASN1T_CMP_CertifiedKeyPair* pvalue);

EXTERN int asn1PrtToStrm_CMP_CertifiedKeyPair (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertifiedKeyPair* pvalue);

EXTERN ASN1T_CMP_CertifiedKeyPair* 
   new_ASN1T_CMP_CertifiedKeyPair (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_CertifiedKeyPair (const char* name, 
   ASN1T_CMP_CertifiedKeyPair* pValue, ASN1T_CMP_CertifiedKeyPair* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CertifiedKeyPair (OSCTXT* pctxt, 
   ASN1T_CMP_CertifiedKeyPair* pSrcValue, ASN1T_CMP_CertifiedKeyPair*
    pDstValue);

EXTERN void asn1Init_CMP_CertifiedKeyPair (ASN1T_CMP_CertifiedKeyPair* pvalue);

EXTERN void asn1Free_CMP_CertifiedKeyPair (OSCTXT *pctxt, 
   ASN1T_CMP_CertifiedKeyPair* pvalue);

/**************************************************************/
/*                                                            */
/*  CertResponse                                              */
/*                                                            */
/**************************************************************/
/*
CertResponse ::= SEQUENCE {
   certReqId INTEGER,
   status PKIStatusInfo,
   certifiedKeyPair CertifiedKeyPair OPTIONAL,
   rspInfo OCTET STRING OPTIONAL
}
*/
#define TV_CMP_CertResponse	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_CertResponse;

struct EXTERN ASN1T_CMP_CertResponse : public ASN1TPDU {
   struct {
      unsigned certifiedKeyPairPresent : 1;
      unsigned rspInfoPresent : 1;
   } m;
   OSINT32 certReqId;
   ASN1T_CMP_PKIStatusInfo status;
   ASN1T_CMP_CertifiedKeyPair certifiedKeyPair;
   ASN1TDynOctStr rspInfo;
   ASN1T_CMP_CertResponse ();
   ASN1T_CMP_CertResponse (ASN1C_CMP_CertResponse& srcData);
   ~ASN1T_CMP_CertResponse ();
} ;

class EXTERN ASN1C_CMP_CertResponse :
public ASN1CType
{
protected:
   ASN1T_CMP_CertResponse& msgData;
public:
   ASN1C_CMP_CertResponse (ASN1T_CMP_CertResponse& data);
   ASN1C_CMP_CertResponse (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CertResponse& data);
   ASN1C_CMP_CertResponse (OSRTContext &context, ASN1T_CMP_CertResponse& data);
   ASN1C_CMP_CertResponse (ASN1C_CMP_CertResponse& original);
   virtual ~ASN1C_CMP_CertResponse () {}
   inline ASN1T_CMP_CertResponse& getData () { return msgData; }
   inline const ASN1T_CMP_CertResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertResponse");
   int toStream (const char* name = "CertResponse");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CertResponse* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CertResponse& getCopy (ASN1T_CMP_CertResponse* pDstData = 0);
   ASN1T_CMP_CertResponse* newCopy ();

   inline ASN1C_CMP_CertResponse& operator= (ASN1C_CMP_CertResponse& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_CertResponse (OSCTXT* pctxt,
   ASN1T_CMP_CertResponse *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CertResponse (OSCTXT* pctxt, 
   ASN1T_CMP_CertResponse* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CertResponse 
   (const char* name, const ASN1T_CMP_CertResponse* pvalue);

EXTERN int asn1PrtToStrm_CMP_CertResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertResponse* pvalue);

EXTERN ASN1T_CMP_CertResponse* new_ASN1T_CMP_CertResponse (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_CertResponse (const char* name, 
   ASN1T_CMP_CertResponse* pValue, ASN1T_CMP_CertResponse* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CertResponse (OSCTXT* pctxt, 
   ASN1T_CMP_CertResponse* pSrcValue, ASN1T_CMP_CertResponse* pDstValue);

EXTERN void asn1Init_CMP_CertResponse (ASN1T_CMP_CertResponse* pvalue);

EXTERN void asn1Free_CMP_CertResponse (OSCTXT *pctxt, ASN1T_CMP_CertResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfCMP_CertResponse                                    */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_CMP__SeqOfCMP_CertResponse;

/* List of ASN1T_CMP_CertResponse */
typedef struct EXTERN ASN1T_CMP__SeqOfCMP_CertResponse : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP__SeqOfCMP_CertResponse();
} ASN1T_CMP__SeqOfCMP_CertResponse;

class EXTERN ASN1C_CMP__SeqOfCMP_CertResponse :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP__SeqOfCMP_CertResponse& msgData;
public:
   ASN1C_CMP__SeqOfCMP_CertResponse (ASN1T_CMP__SeqOfCMP_CertResponse& data);
   ASN1C_CMP__SeqOfCMP_CertResponse (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP__SeqOfCMP_CertResponse& data);
   ASN1C_CMP__SeqOfCMP_CertResponse (ASN1CType& ccobj
      , ASN1T_CMP__SeqOfCMP_CertResponse& data);
   ASN1C_CMP__SeqOfCMP_CertResponse (OSRTContext &context
      , ASN1T_CMP__SeqOfCMP_CertResponse& data);
   ASN1C_CMP__SeqOfCMP_CertResponse (ASN1C_CMP__SeqOfCMP_CertResponse& original);
   virtual ~ASN1C_CMP__SeqOfCMP_CertResponse () {}
   inline ASN1T_CMP__SeqOfCMP_CertResponse& getData () { return msgData; }
   inline const ASN1T_CMP__SeqOfCMP_CertResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfCMP_CertResponse");
   int toStream (const char* name = "_SeqOfCMP_CertResponse");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP__SeqOfCMP_CertResponse* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP__SeqOfCMP_CertResponse& getCopy (ASN1T_CMP__SeqOfCMP_CertResponse* pDstData = 0);
   ASN1T_CMP__SeqOfCMP_CertResponse* newCopy ();

   ASN1C_CMP__SeqOfCMP_CertResponse& operator= (ASN1C_CMP__SeqOfCMP_CertResponse& srcData);
   void Append (ASN1T_CMP_CertResponse* elem);
   ASN1T_CMP_CertResponse* NewElement ();
   ASN1T_CMP_CertResponse* AppendNewElement ();
} ;

EXTERN int asn1E_CMP__SeqOfCMP_CertResponse (OSCTXT* pctxt,
   ASN1T_CMP__SeqOfCMP_CertResponse *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP__SeqOfCMP_CertResponse (OSCTXT* pctxt, 
   ASN1T_CMP__SeqOfCMP_CertResponse* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP__SeqOfCMP_CertResponse 
   (const char* name, const ASN1T_CMP__SeqOfCMP_CertResponse* pvalue);

EXTERN int asn1PrtToStrm_CMP__SeqOfCMP_CertResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP__SeqOfCMP_CertResponse* pvalue);

EXTERN OSBOOL asn1Compare_CMP__SeqOfCMP_CertResponse (const char* name, 
   ASN1T_CMP__SeqOfCMP_CertResponse* pValue, 
   ASN1T_CMP__SeqOfCMP_CertResponse* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP__SeqOfCMP_CertResponse (OSCTXT* pctxt, 
   ASN1T_CMP__SeqOfCMP_CertResponse* pSrcValue, 
   ASN1T_CMP__SeqOfCMP_CertResponse* pDstValue);

EXTERN void asn1Init_CMP__SeqOfCMP_CertResponse (
   ASN1T_CMP__SeqOfCMP_CertResponse* pvalue);

EXTERN void asn1Free_CMP__SeqOfCMP_CertResponse (OSCTXT *pctxt, 
   ASN1T_CMP__SeqOfCMP_CertResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  CertRepMessage                                            */
/*                                                            */
/**************************************************************/
/*
 One INTEGER per encryption key certification request (in the
 same order as these requests appear in CertReqMessages).  The
 retrieved INTEGER A (above) is returned to the sender of the
 corresponding Challenge.

CertRepMessage ::= SEQUENCE {
   caPubs [1] SEQUENCE (SIZE (1..MAX)) OF CMPCertificate OPTIONAL,
   response SEQUENCE OF CertResponse
}
*/
#define TV_CMP_CertRepMessage	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_CertRepMessage;

struct EXTERN ASN1T_CMP_CertRepMessage : public ASN1TPDU {
   struct {
      unsigned caPubsPresent : 1;
   } m;
   ASN1T_CMP_CertRepMessage_caPubs caPubs;
   ASN1T_CMP__SeqOfCMP_CertResponse response;
   ASN1T_CMP_CertRepMessage ();
   ASN1T_CMP_CertRepMessage (ASN1C_CMP_CertRepMessage& srcData);
   ~ASN1T_CMP_CertRepMessage ();
} ;

class EXTERN ASN1C_CMP_CertRepMessage :
public ASN1CType
{
protected:
   ASN1T_CMP_CertRepMessage& msgData;
public:
   ASN1C_CMP_CertRepMessage (ASN1T_CMP_CertRepMessage& data);
   ASN1C_CMP_CertRepMessage (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CertRepMessage& data);
   ASN1C_CMP_CertRepMessage (OSRTContext &context
      , ASN1T_CMP_CertRepMessage& data);
   ASN1C_CMP_CertRepMessage (ASN1C_CMP_CertRepMessage& original);
   virtual ~ASN1C_CMP_CertRepMessage () {}
   inline ASN1T_CMP_CertRepMessage& getData () { return msgData; }
   inline const ASN1T_CMP_CertRepMessage& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertRepMessage");
   int toStream (const char* name = "CertRepMessage");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CertRepMessage* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CertRepMessage& getCopy (ASN1T_CMP_CertRepMessage* pDstData = 0);
   ASN1T_CMP_CertRepMessage* newCopy ();

   inline ASN1C_CMP_CertRepMessage& operator= (ASN1C_CMP_CertRepMessage& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_CertRepMessage (OSCTXT* pctxt,
   ASN1T_CMP_CertRepMessage *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CertRepMessage (OSCTXT* pctxt, 
   ASN1T_CMP_CertRepMessage* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CertRepMessage 
   (const char* name, const ASN1T_CMP_CertRepMessage* pvalue);

EXTERN int asn1PrtToStrm_CMP_CertRepMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertRepMessage* pvalue);

EXTERN ASN1T_CMP_CertRepMessage* 
   new_ASN1T_CMP_CertRepMessage (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_CertRepMessage (const char* name, 
   ASN1T_CMP_CertRepMessage* pValue, ASN1T_CMP_CertRepMessage* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CertRepMessage (OSCTXT* pctxt, 
   ASN1T_CMP_CertRepMessage* pSrcValue, ASN1T_CMP_CertRepMessage* pDstValue);

EXTERN void asn1Init_CMP_CertRepMessage (ASN1T_CMP_CertRepMessage* pvalue);

EXTERN void asn1Free_CMP_CertRepMessage (OSCTXT *pctxt, 
   ASN1T_CMP_CertRepMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  Challenge                                                 */
/*                                                            */
/**************************************************************/
/*
 One Challenge per encryption key certification request (in the
 same order as these requests appear in CertReqMessages).

Challenge ::= SEQUENCE {
   owf AlgorithmIdentifier OPTIONAL,
   witness OCTET STRING,
   challenge OCTET STRING
}
*/
#define TV_CMP_Challenge	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_Challenge;

struct EXTERN ASN1T_CMP_Challenge : public ASN1TPDU {
   struct {
      unsigned owfPresent : 1;
   } m;
   ASN1T_EXP_AlgorithmIdentifier owf;
   ASN1TDynOctStr witness;
   ASN1TDynOctStr challenge;
   ASN1T_CMP_Challenge ();
   ASN1T_CMP_Challenge (ASN1C_CMP_Challenge& srcData);
   ~ASN1T_CMP_Challenge ();
} ;

class EXTERN ASN1C_CMP_Challenge :
public ASN1CType
{
protected:
   ASN1T_CMP_Challenge& msgData;
public:
   ASN1C_CMP_Challenge (ASN1T_CMP_Challenge& data);
   ASN1C_CMP_Challenge (OSRTMessageBufferIF& msgBuf, ASN1T_CMP_Challenge& data);
   ASN1C_CMP_Challenge (OSRTContext &context, ASN1T_CMP_Challenge& data);
   ASN1C_CMP_Challenge (ASN1C_CMP_Challenge& original);
   virtual ~ASN1C_CMP_Challenge () {}
   inline ASN1T_CMP_Challenge& getData () { return msgData; }
   inline const ASN1T_CMP_Challenge& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Challenge");
   int toStream (const char* name = "Challenge");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_Challenge* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_Challenge& getCopy (ASN1T_CMP_Challenge* pDstData = 0);
   ASN1T_CMP_Challenge* newCopy ();

   inline ASN1C_CMP_Challenge& operator= (ASN1C_CMP_Challenge& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_Challenge (OSCTXT* pctxt,
   ASN1T_CMP_Challenge *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_Challenge (OSCTXT* pctxt, ASN1T_CMP_Challenge* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_Challenge 
   (const char* name, const ASN1T_CMP_Challenge* pvalue);

EXTERN int asn1PrtToStrm_CMP_Challenge (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_Challenge* pvalue);

EXTERN ASN1T_CMP_Challenge* new_ASN1T_CMP_Challenge (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_Challenge (const char* name, 
   ASN1T_CMP_Challenge* pValue, ASN1T_CMP_Challenge* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_Challenge (OSCTXT* pctxt, ASN1T_CMP_Challenge* pSrcValue, 
   ASN1T_CMP_Challenge* pDstValue);

EXTERN void asn1Init_CMP_Challenge (ASN1T_CMP_Challenge* pvalue);

EXTERN void asn1Free_CMP_Challenge (OSCTXT *pctxt, ASN1T_CMP_Challenge* pvalue);

/**************************************************************/
/*                                                            */
/*  POPODecKeyChallContent                                    */
/*                                                            */
/**************************************************************/
/*
POPODecKeyChallContent ::= SEQUENCE OF Challenge
*/
#define TV_CMP_POPODecKeyChallContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_POPODecKeyChallContent;

/* List of ASN1T_CMP_Challenge */
typedef struct EXTERN ASN1T_CMP_POPODecKeyChallContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_POPODecKeyChallContent();
} ASN1T_CMP_POPODecKeyChallContent;

class EXTERN ASN1C_CMP_POPODecKeyChallContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_POPODecKeyChallContent& msgData;
public:
   ASN1C_CMP_POPODecKeyChallContent (ASN1T_CMP_POPODecKeyChallContent& data);
   ASN1C_CMP_POPODecKeyChallContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_POPODecKeyChallContent& data);
   ASN1C_CMP_POPODecKeyChallContent (ASN1CType& ccobj
      , ASN1T_CMP_POPODecKeyChallContent& data);
   ASN1C_CMP_POPODecKeyChallContent (OSRTContext &context
      , ASN1T_CMP_POPODecKeyChallContent& data);
   ASN1C_CMP_POPODecKeyChallContent (ASN1C_CMP_POPODecKeyChallContent& original);
   virtual ~ASN1C_CMP_POPODecKeyChallContent () {}
   inline ASN1T_CMP_POPODecKeyChallContent& getData () { return msgData; }
   inline const ASN1T_CMP_POPODecKeyChallContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "POPODecKeyChallContent");
   int toStream (const char* name = "POPODecKeyChallContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_POPODecKeyChallContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_POPODecKeyChallContent& getCopy (ASN1T_CMP_POPODecKeyChallContent* pDstData = 0);
   ASN1T_CMP_POPODecKeyChallContent* newCopy ();

   ASN1C_CMP_POPODecKeyChallContent& operator= (ASN1C_CMP_POPODecKeyChallContent& srcData);
   void Append (ASN1T_CMP_Challenge* elem);
   ASN1T_CMP_Challenge* NewElement ();
   ASN1T_CMP_Challenge* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_POPODecKeyChallContent (OSCTXT* pctxt,
   ASN1T_CMP_POPODecKeyChallContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_POPODecKeyChallContent (OSCTXT* pctxt, 
   ASN1T_CMP_POPODecKeyChallContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_POPODecKeyChallContent 
   (const char* name, const ASN1T_CMP_POPODecKeyChallContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_POPODecKeyChallContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_POPODecKeyChallContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_POPODecKeyChallContent (const char* name, 
   ASN1T_CMP_POPODecKeyChallContent* pValue, 
   ASN1T_CMP_POPODecKeyChallContent* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_POPODecKeyChallContent (OSCTXT* pctxt, 
   ASN1T_CMP_POPODecKeyChallContent* pSrcValue, 
   ASN1T_CMP_POPODecKeyChallContent* pDstValue);

EXTERN void asn1Init_CMP_POPODecKeyChallContent (
   ASN1T_CMP_POPODecKeyChallContent* pvalue);

EXTERN void asn1Free_CMP_POPODecKeyChallContent (OSCTXT *pctxt, 
   ASN1T_CMP_POPODecKeyChallContent* pvalue);

/**************************************************************/
/*                                                            */
/*  POPODecKeyRespContent                                     */
/*                                                            */
/**************************************************************/
/*
POPODecKeyRespContent ::= SEQUENCE OF INTEGER
*/
#define TV_CMP_POPODecKeyRespContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_POPODecKeyRespContent;

/* List of OSINT32 */
typedef struct EXTERN ASN1T_CMP_POPODecKeyRespContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_POPODecKeyRespContent();
} ASN1T_CMP_POPODecKeyRespContent;

class EXTERN ASN1C_CMP_POPODecKeyRespContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_POPODecKeyRespContent& msgData;
public:
   ASN1C_CMP_POPODecKeyRespContent (ASN1T_CMP_POPODecKeyRespContent& data);
   ASN1C_CMP_POPODecKeyRespContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_POPODecKeyRespContent& data);
   ASN1C_CMP_POPODecKeyRespContent (ASN1CType& ccobj
      , ASN1T_CMP_POPODecKeyRespContent& data);
   ASN1C_CMP_POPODecKeyRespContent (OSRTContext &context
      , ASN1T_CMP_POPODecKeyRespContent& data);
   ASN1C_CMP_POPODecKeyRespContent (ASN1C_CMP_POPODecKeyRespContent& original);
   virtual ~ASN1C_CMP_POPODecKeyRespContent () {}
   inline ASN1T_CMP_POPODecKeyRespContent& getData () { return msgData; }
   inline const ASN1T_CMP_POPODecKeyRespContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "POPODecKeyRespContent");
   int toStream (const char* name = "POPODecKeyRespContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_POPODecKeyRespContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_POPODecKeyRespContent& getCopy (ASN1T_CMP_POPODecKeyRespContent* pDstData = 0);
   ASN1T_CMP_POPODecKeyRespContent* newCopy ();

   ASN1C_CMP_POPODecKeyRespContent& operator= (ASN1C_CMP_POPODecKeyRespContent& srcData);
   void Append (OSINT32* elem);
   OSINT32* NewElement ();
   OSINT32* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_POPODecKeyRespContent (OSCTXT* pctxt,
   ASN1T_CMP_POPODecKeyRespContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_POPODecKeyRespContent (OSCTXT* pctxt, 
   ASN1T_CMP_POPODecKeyRespContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_POPODecKeyRespContent 
   (const char* name, const ASN1T_CMP_POPODecKeyRespContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_POPODecKeyRespContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_POPODecKeyRespContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_POPODecKeyRespContent (const char* name, 
   ASN1T_CMP_POPODecKeyRespContent* pValue, 
   ASN1T_CMP_POPODecKeyRespContent* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_POPODecKeyRespContent (OSCTXT* pctxt, 
   ASN1T_CMP_POPODecKeyRespContent* pSrcValue, ASN1T_CMP_POPODecKeyRespContent*
    pDstValue);

EXTERN void asn1Init_CMP_POPODecKeyRespContent (
   ASN1T_CMP_POPODecKeyRespContent* pvalue);

EXTERN void asn1Free_CMP_POPODecKeyRespContent (OSCTXT *pctxt, 
   ASN1T_CMP_POPODecKeyRespContent* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyRecRepContent_caCerts                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'KeyRecRepContent'
*/
class EXTERN ASN1C_CMP_KeyRecRepContent_caCerts;

/* List of ASN1T_CMP_CMPCertificate */
typedef struct EXTERN ASN1T_CMP_KeyRecRepContent_caCerts : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_KeyRecRepContent_caCerts();
} ASN1T_CMP_KeyRecRepContent_caCerts;

class EXTERN ASN1C_CMP_KeyRecRepContent_caCerts :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_KeyRecRepContent_caCerts& msgData;
public:
   ASN1C_CMP_KeyRecRepContent_caCerts
       (ASN1T_CMP_KeyRecRepContent_caCerts& data);
   ASN1C_CMP_KeyRecRepContent_caCerts (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_KeyRecRepContent_caCerts& data);
   ASN1C_CMP_KeyRecRepContent_caCerts (ASN1CType& ccobj
      , ASN1T_CMP_KeyRecRepContent_caCerts& data);
   ASN1C_CMP_KeyRecRepContent_caCerts (OSRTContext &context
      , ASN1T_CMP_KeyRecRepContent_caCerts& data);
   ASN1C_CMP_KeyRecRepContent_caCerts (ASN1C_CMP_KeyRecRepContent_caCerts& original);
   virtual ~ASN1C_CMP_KeyRecRepContent_caCerts () {}
   inline ASN1T_CMP_KeyRecRepContent_caCerts& getData () { return msgData; }
   inline const ASN1T_CMP_KeyRecRepContent_caCerts& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyRecRepContent_caCerts");
   int toStream (const char* name = "KeyRecRepContent_caCerts");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_KeyRecRepContent_caCerts* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_KeyRecRepContent_caCerts& getCopy (ASN1T_CMP_KeyRecRepContent_caCerts* pDstData = 0);
   ASN1T_CMP_KeyRecRepContent_caCerts* newCopy ();

   ASN1C_CMP_KeyRecRepContent_caCerts& operator= (ASN1C_CMP_KeyRecRepContent_caCerts& srcData);
   void Append (ASN1T_CMP_CMPCertificate* elem);
   ASN1T_CMP_CMPCertificate* NewElement ();
   ASN1T_CMP_CMPCertificate* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_KeyRecRepContent_caCerts (OSCTXT* pctxt,
   ASN1T_CMP_KeyRecRepContent_caCerts *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_KeyRecRepContent_caCerts (OSCTXT* pctxt, 
   ASN1T_CMP_KeyRecRepContent_caCerts* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_KeyRecRepContent_caCerts 
   (const char* name, const ASN1T_CMP_KeyRecRepContent_caCerts* pvalue);

EXTERN int asn1PrtToStrm_CMP_KeyRecRepContent_caCerts (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_KeyRecRepContent_caCerts* pvalue);

EXTERN OSBOOL asn1Compare_CMP_KeyRecRepContent_caCerts (const char* name, 
   ASN1T_CMP_KeyRecRepContent_caCerts* pValue, 
   ASN1T_CMP_KeyRecRepContent_caCerts* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_KeyRecRepContent_caCerts (OSCTXT* pctxt, 
   ASN1T_CMP_KeyRecRepContent_caCerts* pSrcValue, 
   ASN1T_CMP_KeyRecRepContent_caCerts* pDstValue);

EXTERN void asn1Init_CMP_KeyRecRepContent_caCerts (
   ASN1T_CMP_KeyRecRepContent_caCerts* pvalue);

EXTERN void asn1Free_CMP_KeyRecRepContent_caCerts (OSCTXT *pctxt, 
   ASN1T_CMP_KeyRecRepContent_caCerts* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyRecRepContent_keyPairHist                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'KeyRecRepContent'
*/
class EXTERN ASN1C_CMP_KeyRecRepContent_keyPairHist;

/* List of ASN1T_CMP_CertifiedKeyPair */
typedef struct EXTERN ASN1T_CMP_KeyRecRepContent_keyPairHist : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_KeyRecRepContent_keyPairHist();
} ASN1T_CMP_KeyRecRepContent_keyPairHist;

class EXTERN ASN1C_CMP_KeyRecRepContent_keyPairHist :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_KeyRecRepContent_keyPairHist& msgData;
public:
   ASN1C_CMP_KeyRecRepContent_keyPairHist
       (ASN1T_CMP_KeyRecRepContent_keyPairHist& data);
   ASN1C_CMP_KeyRecRepContent_keyPairHist (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_KeyRecRepContent_keyPairHist& data);
   ASN1C_CMP_KeyRecRepContent_keyPairHist (ASN1CType& ccobj
      , ASN1T_CMP_KeyRecRepContent_keyPairHist& data);
   ASN1C_CMP_KeyRecRepContent_keyPairHist (OSRTContext &context
      , ASN1T_CMP_KeyRecRepContent_keyPairHist& data);
   ASN1C_CMP_KeyRecRepContent_keyPairHist (ASN1C_CMP_KeyRecRepContent_keyPairHist& original);
   virtual ~ASN1C_CMP_KeyRecRepContent_keyPairHist () {}
   inline ASN1T_CMP_KeyRecRepContent_keyPairHist& getData () { return msgData; }
   inline const ASN1T_CMP_KeyRecRepContent_keyPairHist& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyRecRepContent_keyPairHist");
   int toStream (const char* name = "KeyRecRepContent_keyPairHist");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_KeyRecRepContent_keyPairHist* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_KeyRecRepContent_keyPairHist& getCopy (ASN1T_CMP_KeyRecRepContent_keyPairHist* pDstData = 0);
   ASN1T_CMP_KeyRecRepContent_keyPairHist* newCopy ();

   ASN1C_CMP_KeyRecRepContent_keyPairHist& operator= (ASN1C_CMP_KeyRecRepContent_keyPairHist& srcData);
   void Append (ASN1T_CMP_CertifiedKeyPair* elem);
   ASN1T_CMP_CertifiedKeyPair* NewElement ();
   ASN1T_CMP_CertifiedKeyPair* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_KeyRecRepContent_keyPairHist (OSCTXT* pctxt,
   ASN1T_CMP_KeyRecRepContent_keyPairHist *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_KeyRecRepContent_keyPairHist (OSCTXT* pctxt, 
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMP_KeyRecRepContent_keyPairHist 
   (const char* name, const ASN1T_CMP_KeyRecRepContent_keyPairHist* pvalue);

EXTERN int asn1PrtToStrm_CMP_KeyRecRepContent_keyPairHist (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_KeyRecRepContent_keyPairHist* pvalue);

EXTERN OSBOOL asn1Compare_CMP_KeyRecRepContent_keyPairHist (const char* name, 
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pValue, 
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_KeyRecRepContent_keyPairHist (OSCTXT* pctxt, 
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pSrcValue, 
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pDstValue);

EXTERN void asn1Init_CMP_KeyRecRepContent_keyPairHist (
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pvalue);

EXTERN void asn1Free_CMP_KeyRecRepContent_keyPairHist (OSCTXT *pctxt, 
   ASN1T_CMP_KeyRecRepContent_keyPairHist* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyRecRepContent                                          */
/*                                                            */
/**************************************************************/
/*
KeyRecRepContent ::= SEQUENCE {
   status PKIStatusInfo,
   newSigCert [0] CMPCertificate OPTIONAL,
   caCerts [1] SEQUENCE (SIZE (1..MAX)) OF CMPCertificate OPTIONAL,
   keyPairHist [2] SEQUENCE (SIZE (1..MAX)) OF CertifiedKeyPair OPTIONAL
}
*/
#define TV_CMP_KeyRecRepContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_KeyRecRepContent;

struct EXTERN ASN1T_CMP_KeyRecRepContent : public ASN1TPDU {
   struct {
      unsigned newSigCertPresent : 1;
      unsigned caCertsPresent : 1;
      unsigned keyPairHistPresent : 1;
   } m;
   ASN1T_CMP_PKIStatusInfo status;
   ASN1T_CMP_CMPCertificate newSigCert;
   ASN1T_CMP_KeyRecRepContent_caCerts caCerts;
   ASN1T_CMP_KeyRecRepContent_keyPairHist keyPairHist;
   ASN1T_CMP_KeyRecRepContent ();
   ASN1T_CMP_KeyRecRepContent (ASN1C_CMP_KeyRecRepContent& srcData);
   ~ASN1T_CMP_KeyRecRepContent ();
} ;

class EXTERN ASN1C_CMP_KeyRecRepContent :
public ASN1CType
{
protected:
   ASN1T_CMP_KeyRecRepContent& msgData;
public:
   ASN1C_CMP_KeyRecRepContent (ASN1T_CMP_KeyRecRepContent& data);
   ASN1C_CMP_KeyRecRepContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_KeyRecRepContent& data);
   ASN1C_CMP_KeyRecRepContent (OSRTContext &context
      , ASN1T_CMP_KeyRecRepContent& data);
   ASN1C_CMP_KeyRecRepContent (ASN1C_CMP_KeyRecRepContent& original);
   virtual ~ASN1C_CMP_KeyRecRepContent () {}
   inline ASN1T_CMP_KeyRecRepContent& getData () { return msgData; }
   inline const ASN1T_CMP_KeyRecRepContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyRecRepContent");
   int toStream (const char* name = "KeyRecRepContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_KeyRecRepContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_KeyRecRepContent& getCopy (ASN1T_CMP_KeyRecRepContent* pDstData = 0);
   ASN1T_CMP_KeyRecRepContent* newCopy ();

   inline ASN1C_CMP_KeyRecRepContent& operator= (ASN1C_CMP_KeyRecRepContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_KeyRecRepContent (OSCTXT* pctxt,
   ASN1T_CMP_KeyRecRepContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_KeyRecRepContent (OSCTXT* pctxt, 
   ASN1T_CMP_KeyRecRepContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_KeyRecRepContent 
   (const char* name, const ASN1T_CMP_KeyRecRepContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_KeyRecRepContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_KeyRecRepContent* pvalue);

EXTERN ASN1T_CMP_KeyRecRepContent* 
   new_ASN1T_CMP_KeyRecRepContent (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_KeyRecRepContent (const char* name, 
   ASN1T_CMP_KeyRecRepContent* pValue, ASN1T_CMP_KeyRecRepContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_KeyRecRepContent (OSCTXT* pctxt, 
   ASN1T_CMP_KeyRecRepContent* pSrcValue, ASN1T_CMP_KeyRecRepContent*
    pDstValue);

EXTERN void asn1Init_CMP_KeyRecRepContent (ASN1T_CMP_KeyRecRepContent* pvalue);

EXTERN void asn1Free_CMP_KeyRecRepContent (OSCTXT *pctxt, 
   ASN1T_CMP_KeyRecRepContent* pvalue);

/**************************************************************/
/*                                                            */
/*  RevDetails                                                */
/*                                                            */
/**************************************************************/
/*
RevDetails ::= SEQUENCE {
   certDetails CertTemplate,
   crlEntryDetails Extensions OPTIONAL
}
*/
#define TV_CMP_RevDetails	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_RevDetails;

struct EXTERN ASN1T_CMP_RevDetails : public ASN1TPDU {
   struct {
      unsigned crlEntryDetailsPresent : 1;
   } m;
   ASN1T_CRMF_CertTemplate certDetails;
   ASN1T_EXP_Extensions crlEntryDetails;
   ASN1T_CMP_RevDetails ();
   ASN1T_CMP_RevDetails (ASN1C_CMP_RevDetails& srcData);
   ~ASN1T_CMP_RevDetails ();
} ;

class EXTERN ASN1C_CMP_RevDetails :
public ASN1CType
{
protected:
   ASN1T_CMP_RevDetails& msgData;
public:
   ASN1C_CMP_RevDetails (ASN1T_CMP_RevDetails& data);
   ASN1C_CMP_RevDetails (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_RevDetails& data);
   ASN1C_CMP_RevDetails (OSRTContext &context, ASN1T_CMP_RevDetails& data);
   ASN1C_CMP_RevDetails (ASN1C_CMP_RevDetails& original);
   virtual ~ASN1C_CMP_RevDetails () {}
   inline ASN1T_CMP_RevDetails& getData () { return msgData; }
   inline const ASN1T_CMP_RevDetails& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevDetails");
   int toStream (const char* name = "RevDetails");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_RevDetails* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_RevDetails& getCopy (ASN1T_CMP_RevDetails* pDstData = 0);
   ASN1T_CMP_RevDetails* newCopy ();

   inline ASN1C_CMP_RevDetails& operator= (ASN1C_CMP_RevDetails& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_RevDetails (OSCTXT* pctxt,
   ASN1T_CMP_RevDetails *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_RevDetails (OSCTXT* pctxt, ASN1T_CMP_RevDetails* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_RevDetails 
   (const char* name, const ASN1T_CMP_RevDetails* pvalue);

EXTERN int asn1PrtToStrm_CMP_RevDetails (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevDetails* pvalue);

EXTERN ASN1T_CMP_RevDetails* new_ASN1T_CMP_RevDetails (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_RevDetails (const char* name, 
   ASN1T_CMP_RevDetails* pValue, ASN1T_CMP_RevDetails* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_RevDetails (OSCTXT* pctxt, ASN1T_CMP_RevDetails* pSrcValue, 
   ASN1T_CMP_RevDetails* pDstValue);

EXTERN void asn1Init_CMP_RevDetails (ASN1T_CMP_RevDetails* pvalue);

EXTERN void asn1Free_CMP_RevDetails (OSCTXT *pctxt, ASN1T_CMP_RevDetails* pvalue);

/**************************************************************/
/*                                                            */
/*  RevReqContent                                             */
/*                                                            */
/**************************************************************/
/*
RevReqContent ::= SEQUENCE OF RevDetails
*/
#define TV_CMP_RevReqContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_RevReqContent;

/* List of ASN1T_CMP_RevDetails */
typedef struct EXTERN ASN1T_CMP_RevReqContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_RevReqContent();
} ASN1T_CMP_RevReqContent;

class EXTERN ASN1C_CMP_RevReqContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_RevReqContent& msgData;
public:
   ASN1C_CMP_RevReqContent (ASN1T_CMP_RevReqContent& data);
   ASN1C_CMP_RevReqContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_RevReqContent& data);
   ASN1C_CMP_RevReqContent (ASN1CType& ccobj, ASN1T_CMP_RevReqContent& data);
   ASN1C_CMP_RevReqContent (OSRTContext &context, ASN1T_CMP_RevReqContent& data
      );
   ASN1C_CMP_RevReqContent (ASN1C_CMP_RevReqContent& original);
   virtual ~ASN1C_CMP_RevReqContent () {}
   inline ASN1T_CMP_RevReqContent& getData () { return msgData; }
   inline const ASN1T_CMP_RevReqContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevReqContent");
   int toStream (const char* name = "RevReqContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_RevReqContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_RevReqContent& getCopy (ASN1T_CMP_RevReqContent* pDstData = 0);
   ASN1T_CMP_RevReqContent* newCopy ();

   ASN1C_CMP_RevReqContent& operator= (ASN1C_CMP_RevReqContent& srcData);
   void Append (ASN1T_CMP_RevDetails* elem);
   ASN1T_CMP_RevDetails* NewElement ();
   ASN1T_CMP_RevDetails* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_RevReqContent (OSCTXT* pctxt,
   ASN1T_CMP_RevReqContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_RevReqContent (OSCTXT* pctxt, 
   ASN1T_CMP_RevReqContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_RevReqContent 
   (const char* name, const ASN1T_CMP_RevReqContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_RevReqContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevReqContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_RevReqContent (const char* name, 
   ASN1T_CMP_RevReqContent* pValue, ASN1T_CMP_RevReqContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_RevReqContent (OSCTXT* pctxt, 
   ASN1T_CMP_RevReqContent* pSrcValue, ASN1T_CMP_RevReqContent* pDstValue);

EXTERN void asn1Init_CMP_RevReqContent (ASN1T_CMP_RevReqContent* pvalue);

EXTERN void asn1Free_CMP_RevReqContent (OSCTXT *pctxt, 
   ASN1T_CMP_RevReqContent* pvalue);

/**************************************************************/
/*                                                            */
/*  RevRepContent_status                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RevRepContent'
*/
class EXTERN ASN1C_CMP_RevRepContent_status;

/* List of ASN1T_CMP_PKIStatusInfo */
typedef struct EXTERN ASN1T_CMP_RevRepContent_status : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_RevRepContent_status();
} ASN1T_CMP_RevRepContent_status;

class EXTERN ASN1C_CMP_RevRepContent_status :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_RevRepContent_status& msgData;
public:
   ASN1C_CMP_RevRepContent_status (ASN1T_CMP_RevRepContent_status& data);
   ASN1C_CMP_RevRepContent_status (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_RevRepContent_status& data);
   ASN1C_CMP_RevRepContent_status (ASN1CType& ccobj
      , ASN1T_CMP_RevRepContent_status& data);
   ASN1C_CMP_RevRepContent_status (OSRTContext &context
      , ASN1T_CMP_RevRepContent_status& data);
   ASN1C_CMP_RevRepContent_status (ASN1C_CMP_RevRepContent_status& original);
   virtual ~ASN1C_CMP_RevRepContent_status () {}
   inline ASN1T_CMP_RevRepContent_status& getData () { return msgData; }
   inline const ASN1T_CMP_RevRepContent_status& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevRepContent_status");
   int toStream (const char* name = "RevRepContent_status");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_RevRepContent_status* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_RevRepContent_status& getCopy (ASN1T_CMP_RevRepContent_status* pDstData = 0);
   ASN1T_CMP_RevRepContent_status* newCopy ();

   ASN1C_CMP_RevRepContent_status& operator= (ASN1C_CMP_RevRepContent_status& srcData);
   void Append (ASN1T_CMP_PKIStatusInfo* elem);
   ASN1T_CMP_PKIStatusInfo* NewElement ();
   ASN1T_CMP_PKIStatusInfo* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_RevRepContent_status (OSCTXT* pctxt,
   ASN1T_CMP_RevRepContent_status *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_RevRepContent_status (OSCTXT* pctxt, 
   ASN1T_CMP_RevRepContent_status* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_RevRepContent_status 
   (const char* name, const ASN1T_CMP_RevRepContent_status* pvalue);

EXTERN int asn1PrtToStrm_CMP_RevRepContent_status (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevRepContent_status* pvalue);

EXTERN OSBOOL asn1Compare_CMP_RevRepContent_status (const char* name, 
   ASN1T_CMP_RevRepContent_status* pValue, 
   ASN1T_CMP_RevRepContent_status* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_RevRepContent_status (OSCTXT* pctxt, 
   ASN1T_CMP_RevRepContent_status* pSrcValue, ASN1T_CMP_RevRepContent_status*
    pDstValue);

EXTERN void asn1Init_CMP_RevRepContent_status (ASN1T_CMP_RevRepContent_status* pvalue);

EXTERN void asn1Free_CMP_RevRepContent_status (OSCTXT *pctxt, 
   ASN1T_CMP_RevRepContent_status* pvalue);

/**************************************************************/
/*                                                            */
/*  RevRepContent_revCerts                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RevRepContent'
*/
class EXTERN ASN1C_CMP_RevRepContent_revCerts;

/* List of ASN1T_CRMF_CertId */
typedef struct EXTERN ASN1T_CMP_RevRepContent_revCerts : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_RevRepContent_revCerts();
} ASN1T_CMP_RevRepContent_revCerts;

class EXTERN ASN1C_CMP_RevRepContent_revCerts :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_RevRepContent_revCerts& msgData;
public:
   ASN1C_CMP_RevRepContent_revCerts (ASN1T_CMP_RevRepContent_revCerts& data);
   ASN1C_CMP_RevRepContent_revCerts (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_RevRepContent_revCerts& data);
   ASN1C_CMP_RevRepContent_revCerts (ASN1CType& ccobj
      , ASN1T_CMP_RevRepContent_revCerts& data);
   ASN1C_CMP_RevRepContent_revCerts (OSRTContext &context
      , ASN1T_CMP_RevRepContent_revCerts& data);
   ASN1C_CMP_RevRepContent_revCerts (ASN1C_CMP_RevRepContent_revCerts& original);
   virtual ~ASN1C_CMP_RevRepContent_revCerts () {}
   inline ASN1T_CMP_RevRepContent_revCerts& getData () { return msgData; }
   inline const ASN1T_CMP_RevRepContent_revCerts& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevRepContent_revCerts");
   int toStream (const char* name = "RevRepContent_revCerts");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_RevRepContent_revCerts* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_RevRepContent_revCerts& getCopy (ASN1T_CMP_RevRepContent_revCerts* pDstData = 0);
   ASN1T_CMP_RevRepContent_revCerts* newCopy ();

   ASN1C_CMP_RevRepContent_revCerts& operator= (ASN1C_CMP_RevRepContent_revCerts& srcData);
   void Append (ASN1T_CRMF_CertId* elem);
   ASN1T_CRMF_CertId* NewElement ();
   ASN1T_CRMF_CertId* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_RevRepContent_revCerts (OSCTXT* pctxt,
   ASN1T_CMP_RevRepContent_revCerts *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_RevRepContent_revCerts (OSCTXT* pctxt, 
   ASN1T_CMP_RevRepContent_revCerts* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_RevRepContent_revCerts 
   (const char* name, const ASN1T_CMP_RevRepContent_revCerts* pvalue);

EXTERN int asn1PrtToStrm_CMP_RevRepContent_revCerts (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevRepContent_revCerts* pvalue);

EXTERN OSBOOL asn1Compare_CMP_RevRepContent_revCerts (const char* name, 
   ASN1T_CMP_RevRepContent_revCerts* pValue, 
   ASN1T_CMP_RevRepContent_revCerts* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_RevRepContent_revCerts (OSCTXT* pctxt, 
   ASN1T_CMP_RevRepContent_revCerts* pSrcValue, 
   ASN1T_CMP_RevRepContent_revCerts* pDstValue);

EXTERN void asn1Init_CMP_RevRepContent_revCerts (
   ASN1T_CMP_RevRepContent_revCerts* pvalue);

EXTERN void asn1Free_CMP_RevRepContent_revCerts (OSCTXT *pctxt, 
   ASN1T_CMP_RevRepContent_revCerts* pvalue);

/**************************************************************/
/*                                                            */
/*  RevRepContent_crls                                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RevRepContent'
*/
class EXTERN ASN1C_CMP_RevRepContent_crls;

/* List of ASN1T_EXP_CertificateList */
typedef struct EXTERN ASN1T_CMP_RevRepContent_crls : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_RevRepContent_crls();
} ASN1T_CMP_RevRepContent_crls;

class EXTERN ASN1C_CMP_RevRepContent_crls :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_RevRepContent_crls& msgData;
public:
   ASN1C_CMP_RevRepContent_crls (ASN1T_CMP_RevRepContent_crls& data);
   ASN1C_CMP_RevRepContent_crls (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_RevRepContent_crls& data);
   ASN1C_CMP_RevRepContent_crls (ASN1CType& ccobj
      , ASN1T_CMP_RevRepContent_crls& data);
   ASN1C_CMP_RevRepContent_crls (OSRTContext &context
      , ASN1T_CMP_RevRepContent_crls& data);
   ASN1C_CMP_RevRepContent_crls (ASN1C_CMP_RevRepContent_crls& original);
   virtual ~ASN1C_CMP_RevRepContent_crls () {}
   inline ASN1T_CMP_RevRepContent_crls& getData () { return msgData; }
   inline const ASN1T_CMP_RevRepContent_crls& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevRepContent_crls");
   int toStream (const char* name = "RevRepContent_crls");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_RevRepContent_crls* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_RevRepContent_crls& getCopy (ASN1T_CMP_RevRepContent_crls* pDstData = 0);
   ASN1T_CMP_RevRepContent_crls* newCopy ();

   ASN1C_CMP_RevRepContent_crls& operator= (ASN1C_CMP_RevRepContent_crls& srcData);
   void Append (ASN1T_EXP_CertificateList* elem);
   ASN1T_EXP_CertificateList* NewElement ();
   ASN1T_EXP_CertificateList* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_RevRepContent_crls (OSCTXT* pctxt,
   ASN1T_CMP_RevRepContent_crls *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_RevRepContent_crls (OSCTXT* pctxt, 
   ASN1T_CMP_RevRepContent_crls* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_RevRepContent_crls 
   (const char* name, const ASN1T_CMP_RevRepContent_crls* pvalue);

EXTERN int asn1PrtToStrm_CMP_RevRepContent_crls (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevRepContent_crls* pvalue);

EXTERN OSBOOL asn1Compare_CMP_RevRepContent_crls (const char* name, 
   ASN1T_CMP_RevRepContent_crls* pValue, 
   ASN1T_CMP_RevRepContent_crls* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_RevRepContent_crls (OSCTXT* pctxt, 
   ASN1T_CMP_RevRepContent_crls* pSrcValue, ASN1T_CMP_RevRepContent_crls*
    pDstValue);

EXTERN void asn1Init_CMP_RevRepContent_crls (ASN1T_CMP_RevRepContent_crls* pvalue);

EXTERN void asn1Free_CMP_RevRepContent_crls (OSCTXT *pctxt, 
   ASN1T_CMP_RevRepContent_crls* pvalue);

/**************************************************************/
/*                                                            */
/*  RevRepContent                                             */
/*                                                            */
/**************************************************************/
/*
RevRepContent ::= SEQUENCE {
   status SEQUENCE (SIZE (1..MAX)) OF PKIStatusInfo,
   revCerts [0] SEQUENCE (SIZE (1..MAX)) OF CertId OPTIONAL,
   crls [1] SEQUENCE (SIZE (1..MAX)) OF CertificateList OPTIONAL
}
*/
#define TV_CMP_RevRepContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_RevRepContent;

struct EXTERN ASN1T_CMP_RevRepContent : public ASN1TPDU {
   struct {
      unsigned revCertsPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_CMP_RevRepContent_status status;
   ASN1T_CMP_RevRepContent_revCerts revCerts;
   ASN1T_CMP_RevRepContent_crls crls;
   ASN1T_CMP_RevRepContent ();
   ASN1T_CMP_RevRepContent (ASN1C_CMP_RevRepContent& srcData);
   ~ASN1T_CMP_RevRepContent ();
} ;

class EXTERN ASN1C_CMP_RevRepContent :
public ASN1CType
{
protected:
   ASN1T_CMP_RevRepContent& msgData;
public:
   ASN1C_CMP_RevRepContent (ASN1T_CMP_RevRepContent& data);
   ASN1C_CMP_RevRepContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_RevRepContent& data);
   ASN1C_CMP_RevRepContent (OSRTContext &context, ASN1T_CMP_RevRepContent& data
      );
   ASN1C_CMP_RevRepContent (ASN1C_CMP_RevRepContent& original);
   virtual ~ASN1C_CMP_RevRepContent () {}
   inline ASN1T_CMP_RevRepContent& getData () { return msgData; }
   inline const ASN1T_CMP_RevRepContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevRepContent");
   int toStream (const char* name = "RevRepContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_RevRepContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_RevRepContent& getCopy (ASN1T_CMP_RevRepContent* pDstData = 0);
   ASN1T_CMP_RevRepContent* newCopy ();

   inline ASN1C_CMP_RevRepContent& operator= (ASN1C_CMP_RevRepContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_RevRepContent (OSCTXT* pctxt,
   ASN1T_CMP_RevRepContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_RevRepContent (OSCTXT* pctxt, 
   ASN1T_CMP_RevRepContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_RevRepContent 
   (const char* name, const ASN1T_CMP_RevRepContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_RevRepContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevRepContent* pvalue);

EXTERN ASN1T_CMP_RevRepContent* new_ASN1T_CMP_RevRepContent (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMP_RevRepContent (const char* name, 
   ASN1T_CMP_RevRepContent* pValue, ASN1T_CMP_RevRepContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_RevRepContent (OSCTXT* pctxt, 
   ASN1T_CMP_RevRepContent* pSrcValue, ASN1T_CMP_RevRepContent* pDstValue);

EXTERN void asn1Init_CMP_RevRepContent (ASN1T_CMP_RevRepContent* pvalue);

EXTERN void asn1Free_CMP_RevRepContent (OSCTXT *pctxt, 
   ASN1T_CMP_RevRepContent* pvalue);

/**************************************************************/
/*                                                            */
/*  CAKeyUpdAnnContent                                        */
/*                                                            */
/**************************************************************/
/*
CAKeyUpdAnnContent ::= SEQUENCE {
   oldWithNew CMPCertificate,
   newWithOld CMPCertificate,
   newWithNew CMPCertificate
}
*/
#define TV_CMP_CAKeyUpdAnnContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_CAKeyUpdAnnContent;

struct EXTERN ASN1T_CMP_CAKeyUpdAnnContent : public ASN1TPDU {
   ASN1T_CMP_CMPCertificate oldWithNew;
   ASN1T_CMP_CMPCertificate newWithOld;
   ASN1T_CMP_CMPCertificate newWithNew;
   ASN1T_CMP_CAKeyUpdAnnContent ();
   ASN1T_CMP_CAKeyUpdAnnContent (ASN1C_CMP_CAKeyUpdAnnContent& srcData);
   ~ASN1T_CMP_CAKeyUpdAnnContent ();
} ;

class EXTERN ASN1C_CMP_CAKeyUpdAnnContent :
public ASN1CType
{
protected:
   ASN1T_CMP_CAKeyUpdAnnContent& msgData;
public:
   ASN1C_CMP_CAKeyUpdAnnContent (ASN1T_CMP_CAKeyUpdAnnContent& data);
   ASN1C_CMP_CAKeyUpdAnnContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CAKeyUpdAnnContent& data);
   ASN1C_CMP_CAKeyUpdAnnContent (OSRTContext &context
      , ASN1T_CMP_CAKeyUpdAnnContent& data);
   ASN1C_CMP_CAKeyUpdAnnContent (ASN1C_CMP_CAKeyUpdAnnContent& original);
   virtual ~ASN1C_CMP_CAKeyUpdAnnContent () {}
   inline ASN1T_CMP_CAKeyUpdAnnContent& getData () { return msgData; }
   inline const ASN1T_CMP_CAKeyUpdAnnContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CAKeyUpdAnnContent");
   int toStream (const char* name = "CAKeyUpdAnnContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CAKeyUpdAnnContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CAKeyUpdAnnContent& getCopy (ASN1T_CMP_CAKeyUpdAnnContent* pDstData = 0);
   ASN1T_CMP_CAKeyUpdAnnContent* newCopy ();

   inline ASN1C_CMP_CAKeyUpdAnnContent& operator= (ASN1C_CMP_CAKeyUpdAnnContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_CAKeyUpdAnnContent (OSCTXT* pctxt,
   ASN1T_CMP_CAKeyUpdAnnContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CAKeyUpdAnnContent (OSCTXT* pctxt, 
   ASN1T_CMP_CAKeyUpdAnnContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CAKeyUpdAnnContent 
   (const char* name, const ASN1T_CMP_CAKeyUpdAnnContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_CAKeyUpdAnnContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CAKeyUpdAnnContent* pvalue);

EXTERN ASN1T_CMP_CAKeyUpdAnnContent* 
   new_ASN1T_CMP_CAKeyUpdAnnContent (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_CAKeyUpdAnnContent (const char* name, 
   ASN1T_CMP_CAKeyUpdAnnContent* pValue, 
   ASN1T_CMP_CAKeyUpdAnnContent* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CAKeyUpdAnnContent (OSCTXT* pctxt, 
   ASN1T_CMP_CAKeyUpdAnnContent* pSrcValue, ASN1T_CMP_CAKeyUpdAnnContent*
    pDstValue);

EXTERN void asn1Init_CMP_CAKeyUpdAnnContent (ASN1T_CMP_CAKeyUpdAnnContent* pvalue);

EXTERN void asn1Free_CMP_CAKeyUpdAnnContent (OSCTXT *pctxt, 
   ASN1T_CMP_CAKeyUpdAnnContent* pvalue);

/**************************************************************/
/*                                                            */
/*  CertAnnContent                                            */
/*                                                            */
/**************************************************************/
/*
CertAnnContent ::= CMPCertificate
*/
/* Choice context tags */

#define TVC_CMP_CertAnnContent_x509v3PKCert	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_CertAnnContent;

typedef ASN1T_CMP_CMPCertificate ASN1T_CMP_CertAnnContent;

class EXTERN ASN1C_CMP_CertAnnContent :
   public ASN1C_CMP_CMPCertificate
{
protected:
public:
   ASN1C_CMP_CertAnnContent (ASN1T_CMP_CertAnnContent& data);
   ASN1C_CMP_CertAnnContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CertAnnContent& data);
   ASN1C_CMP_CertAnnContent (OSRTContext &context
      , ASN1T_CMP_CertAnnContent& data);
   ASN1C_CMP_CertAnnContent (ASN1C_CMP_CertAnnContent& original);
   virtual ~ASN1C_CMP_CertAnnContent () {}
   inline ASN1T_CMP_CertAnnContent& getData () { return msgData; }
   inline const ASN1T_CMP_CertAnnContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertAnnContent");
   int toStream (const char* name = "CertAnnContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CertAnnContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CertAnnContent& getCopy (ASN1T_CMP_CertAnnContent* pDstData = 0);
   ASN1T_CMP_CertAnnContent* newCopy ();

   inline ASN1C_CMP_CertAnnContent& operator= (ASN1C_CMP_CertAnnContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_CertAnnContent (OSCTXT* pctxt,
   ASN1T_CMP_CertAnnContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CertAnnContent (OSCTXT* pctxt, 
   ASN1T_CMP_CertAnnContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CertAnnContent 
   (const char* name, const ASN1T_CMP_CertAnnContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_CertAnnContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertAnnContent* pvalue);

EXTERN ASN1T_CMP_CertAnnContent* 
   new_ASN1T_CMP_CertAnnContent (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_CertAnnContent (const char* name, 
   ASN1T_CMP_CertAnnContent* pValue, ASN1T_CMP_CertAnnContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CertAnnContent (OSCTXT* pctxt, 
   ASN1T_CMP_CertAnnContent* pSrcValue, ASN1T_CMP_CertAnnContent* pDstValue);

EXTERN void asn1Init_CMP_CertAnnContent (ASN1T_CMP_CertAnnContent* pvalue);

EXTERN void asn1Free_CMP_CertAnnContent (OSCTXT *pctxt, 
   ASN1T_CMP_CertAnnContent* pvalue);

/**************************************************************/
/*                                                            */
/*  RevAnnContent                                             */
/*                                                            */
/**************************************************************/
/*
RevAnnContent ::= SEQUENCE {
   status PKIStatus,
   certId CertId,
   willBeRevokedAt GeneralizedTime,
   badSinceDate GeneralizedTime,
   crlDetails Extensions OPTIONAL
}
*/
#define TV_CMP_RevAnnContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_RevAnnContent;

struct EXTERN ASN1T_CMP_RevAnnContent : public ASN1TPDU {
   struct {
      unsigned crlDetailsPresent : 1;
   } m;
   ASN1T_CMP_PKIStatus status;
   ASN1T_CRMF_CertId certId;
   const char* willBeRevokedAt;
   const char* badSinceDate;
   ASN1T_EXP_Extensions crlDetails;
   ASN1T_CMP_RevAnnContent ();
   ASN1T_CMP_RevAnnContent (ASN1C_CMP_RevAnnContent& srcData);
   ~ASN1T_CMP_RevAnnContent ();
} ;

class EXTERN ASN1C_CMP_RevAnnContent :
public ASN1CType
{
protected:
   ASN1T_CMP_RevAnnContent& msgData;
public:
   ASN1C_CMP_RevAnnContent (ASN1T_CMP_RevAnnContent& data);
   ASN1C_CMP_RevAnnContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_RevAnnContent& data);
   ASN1C_CMP_RevAnnContent (OSRTContext &context, ASN1T_CMP_RevAnnContent& data
      );
   ASN1C_CMP_RevAnnContent (ASN1C_CMP_RevAnnContent& original);
   virtual ~ASN1C_CMP_RevAnnContent () {}
   inline ASN1T_CMP_RevAnnContent& getData () { return msgData; }
   inline const ASN1T_CMP_RevAnnContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevAnnContent");
   int toStream (const char* name = "RevAnnContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_RevAnnContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_RevAnnContent& getCopy (ASN1T_CMP_RevAnnContent* pDstData = 0);
   ASN1T_CMP_RevAnnContent* newCopy ();

   inline ASN1C_CMP_RevAnnContent& operator= (ASN1C_CMP_RevAnnContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_RevAnnContent (OSCTXT* pctxt,
   ASN1T_CMP_RevAnnContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_RevAnnContent (OSCTXT* pctxt, 
   ASN1T_CMP_RevAnnContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_RevAnnContent 
   (const char* name, const ASN1T_CMP_RevAnnContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_RevAnnContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevAnnContent* pvalue);

EXTERN ASN1T_CMP_RevAnnContent* new_ASN1T_CMP_RevAnnContent (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMP_RevAnnContent (const char* name, 
   ASN1T_CMP_RevAnnContent* pValue, ASN1T_CMP_RevAnnContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_RevAnnContent (OSCTXT* pctxt, 
   ASN1T_CMP_RevAnnContent* pSrcValue, ASN1T_CMP_RevAnnContent* pDstValue);

EXTERN void asn1Init_CMP_RevAnnContent (ASN1T_CMP_RevAnnContent* pvalue);

EXTERN void asn1Free_CMP_RevAnnContent (OSCTXT *pctxt, 
   ASN1T_CMP_RevAnnContent* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLAnnContent                                             */
/*                                                            */
/**************************************************************/
/*
CRLAnnContent ::= SEQUENCE OF CertificateList
*/
#define TV_CMP_CRLAnnContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_CRLAnnContent;

/* List of ASN1T_EXP_CertificateList */
typedef struct EXTERN ASN1T_CMP_CRLAnnContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_CRLAnnContent();
} ASN1T_CMP_CRLAnnContent;

class EXTERN ASN1C_CMP_CRLAnnContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_CRLAnnContent& msgData;
public:
   ASN1C_CMP_CRLAnnContent (ASN1T_CMP_CRLAnnContent& data);
   ASN1C_CMP_CRLAnnContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CRLAnnContent& data);
   ASN1C_CMP_CRLAnnContent (ASN1CType& ccobj, ASN1T_CMP_CRLAnnContent& data);
   ASN1C_CMP_CRLAnnContent (OSRTContext &context, ASN1T_CMP_CRLAnnContent& data
      );
   ASN1C_CMP_CRLAnnContent (ASN1C_CMP_CRLAnnContent& original);
   virtual ~ASN1C_CMP_CRLAnnContent () {}
   inline ASN1T_CMP_CRLAnnContent& getData () { return msgData; }
   inline const ASN1T_CMP_CRLAnnContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CRLAnnContent");
   int toStream (const char* name = "CRLAnnContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CRLAnnContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CRLAnnContent& getCopy (ASN1T_CMP_CRLAnnContent* pDstData = 0);
   ASN1T_CMP_CRLAnnContent* newCopy ();

   ASN1C_CMP_CRLAnnContent& operator= (ASN1C_CMP_CRLAnnContent& srcData);
   void Append (ASN1T_EXP_CertificateList* elem);
   ASN1T_EXP_CertificateList* NewElement ();
   ASN1T_EXP_CertificateList* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_CRLAnnContent (OSCTXT* pctxt,
   ASN1T_CMP_CRLAnnContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CRLAnnContent (OSCTXT* pctxt, 
   ASN1T_CMP_CRLAnnContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CRLAnnContent 
   (const char* name, const ASN1T_CMP_CRLAnnContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_CRLAnnContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CRLAnnContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_CRLAnnContent (const char* name, 
   ASN1T_CMP_CRLAnnContent* pValue, ASN1T_CMP_CRLAnnContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CRLAnnContent (OSCTXT* pctxt, 
   ASN1T_CMP_CRLAnnContent* pSrcValue, ASN1T_CMP_CRLAnnContent* pDstValue);

EXTERN void asn1Init_CMP_CRLAnnContent (ASN1T_CMP_CRLAnnContent* pvalue);

EXTERN void asn1Free_CMP_CRLAnnContent (OSCTXT *pctxt, 
   ASN1T_CMP_CRLAnnContent* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIConfirmContent                                         */
/*                                                            */
/**************************************************************/
/*
PKIConfirmContent ::= NULL
*/
#define TV_CMP_PKIConfirmContent	(TM_UNIV|TM_PRIM|5)

class EXTERN ASN1C_CMP_PKIConfirmContent :
public ASN1CType
{
protected:
public:
   ASN1C_CMP_PKIConfirmContent ();
   ASN1C_CMP_PKIConfirmContent (OSRTMessageBufferIF& msgBuf);
   ASN1C_CMP_PKIConfirmContent (OSRTContext &context);
   ASN1C_CMP_PKIConfirmContent (ASN1C_CMP_PKIConfirmContent& original);
   virtual ~ASN1C_CMP_PKIConfirmContent () {}
   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIConfirmContent");
   int toStream (const char* name = "PKIConfirmContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals ();

   inline ASN1C_CMP_PKIConfirmContent& operator= (ASN1C_CMP_PKIConfirmContent& srcData) {
      return *this;
   }
} ;

EXTERN int asn1E_CMP_PKIConfirmContent_ (OSCTXT* pctxt,
   void *pvalue, ASN1TagType tagging);
#define asn1E_CMP_PKIConfirmContent(pctxt, tagging) \
asn1E_CMP_PKIConfirmContent_(pctxt, NULL, tagging)

EXTERN int asn1D_CMP_PKIConfirmContent_ (OSCTXT* pctxt, void* pvalue, 
   ASN1TagType tagging, int length);
#define asn1D_CMP_PKIConfirmContent(pctxt, tagging, length) \
asn1D_CMP_PKIConfirmContent_(pctxt, NULL, tagging, length)

EXTERN void asn1Print_CMP_PKIConfirmContent_ (const char* name, const void* pvalue);
#define asn1Print_CMP_PKIConfirmContent(name) \
asn1Print_CMP_PKIConfirmContent_(name, NULL)

EXTERN int asn1PrtToStrm_CMP_PKIConfirmContent_ (OSCTXT *pctxt, 
   const char* name, const void* pvalue);
#define asn1PrtToStrm_CMP_PKIConfirmContent(pctxt, name) \
asn1PrtToStrm_CMP_PKIConfirmContent_(pctxt, name, NULL)

EXTERN OSBOOL asn1Compare_CMP_PKIConfirmContent (const char* name);

/**************************************************************/
/*                                                            */
/*  GenMsgContent                                             */
/*                                                            */
/**************************************************************/
/*
 Example InfoTypeAndValue contents include, but are not limited to,
 the following (un-comment in this ASN.1 module and use as
 appropriate for a given environment):

   id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}
      CAProtEncCertValue      ::= CMPCertificate
   id-it-signKeyPairTypes OBJECT IDENTIFIER ::= {id-it 2}
      SignKeyPairTypesValue   ::= SEQUENCE OF AlgorithmIdentifier
   id-it-encKeyPairTypes  OBJECT IDENTIFIER ::= {id-it 3}
      EncKeyPairTypesValue    ::= SEQUENCE OF AlgorithmIdentifier
   id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}
      PreferredSymmAlgValue   ::= AlgorithmIdentifier
   id-it-caKeyUpdateInfo  OBJECT IDENTIFIER ::= {id-it 5}
      CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent
   id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}
      CurrentCRLValue         ::= CertificateList
   id-it-unsupportedOIDs  OBJECT IDENTIFIER ::= {id-it 7}
      UnsupportedOIDsValue    ::= SEQUENCE OF OBJECT IDENTIFIER
   id-it-keyPairParamReq  OBJECT IDENTIFIER ::= {id-it 10}
      KeyPairParamReqValue    ::= OBJECT IDENTIFIER
   id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}
      KeyPairParamRepValue    ::= AlgorithmIdentifer
   id-it-revPassphrase    OBJECT IDENTIFIER ::= {id-it 12}
      RevPassphraseValue      ::= EncryptedValue
   id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it 13}
      ImplicitConfirmValue    ::= NULL
   id-it-confirmWaitTime  OBJECT IDENTIFIER ::= {id-it 14}
      ConfirmWaitTimeValue    ::= GeneralizedTime
   id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it 15}
      OrigPKIMessageValue     ::= PKIMessages
   id-it-suppLangTags     OBJECT IDENTIFIER ::= {id-it 16}
      SuppLangTagsValue       ::= SEQUENCE OF UTF8String

 where

   id-pkix OBJECT IDENTIFIER ::= {iso(1) identified-organization(3)
      dod(6) internet(1) security(5) mechanisms(5) pkix(7)}
 and
   id-it   OBJECT IDENTIFIER ::= {id-pkix 4}


 This construct MAY also be used to define new PKIX Certificate
 Management Protocol request and response messages, or general-
 purpose (e.g., announcement) messages for future needs or for
 specific environments.

GenMsgContent ::= SEQUENCE OF InfoTypeAndValue
*/
#define TV_CMP_GenMsgContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_GenMsgContent;

/* List of ASN1T_CMP_InfoTypeAndValue */
typedef struct EXTERN ASN1T_CMP_GenMsgContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_GenMsgContent();
} ASN1T_CMP_GenMsgContent;

class EXTERN ASN1C_CMP_GenMsgContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_GenMsgContent& msgData;
public:
   ASN1C_CMP_GenMsgContent (ASN1T_CMP_GenMsgContent& data);
   ASN1C_CMP_GenMsgContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_GenMsgContent& data);
   ASN1C_CMP_GenMsgContent (ASN1CType& ccobj, ASN1T_CMP_GenMsgContent& data);
   ASN1C_CMP_GenMsgContent (OSRTContext &context, ASN1T_CMP_GenMsgContent& data
      );
   ASN1C_CMP_GenMsgContent (ASN1C_CMP_GenMsgContent& original);
   virtual ~ASN1C_CMP_GenMsgContent () {}
   inline ASN1T_CMP_GenMsgContent& getData () { return msgData; }
   inline const ASN1T_CMP_GenMsgContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "GenMsgContent");
   int toStream (const char* name = "GenMsgContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_GenMsgContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_GenMsgContent& getCopy (ASN1T_CMP_GenMsgContent* pDstData = 0);
   ASN1T_CMP_GenMsgContent* newCopy ();

   ASN1C_CMP_GenMsgContent& operator= (ASN1C_CMP_GenMsgContent& srcData);
   void Append (ASN1T_CMP_InfoTypeAndValue* elem);
   ASN1T_CMP_InfoTypeAndValue* NewElement ();
   ASN1T_CMP_InfoTypeAndValue* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_GenMsgContent (OSCTXT* pctxt,
   ASN1T_CMP_GenMsgContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_GenMsgContent (OSCTXT* pctxt, 
   ASN1T_CMP_GenMsgContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_GenMsgContent 
   (const char* name, const ASN1T_CMP_GenMsgContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_GenMsgContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_GenMsgContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_GenMsgContent (const char* name, 
   ASN1T_CMP_GenMsgContent* pValue, ASN1T_CMP_GenMsgContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_GenMsgContent (OSCTXT* pctxt, 
   ASN1T_CMP_GenMsgContent* pSrcValue, ASN1T_CMP_GenMsgContent* pDstValue);

EXTERN void asn1Init_CMP_GenMsgContent (ASN1T_CMP_GenMsgContent* pvalue);

EXTERN void asn1Free_CMP_GenMsgContent (OSCTXT *pctxt, 
   ASN1T_CMP_GenMsgContent* pvalue);

/**************************************************************/
/*                                                            */
/*  GenRepContent                                             */
/*                                                            */
/**************************************************************/
/*
 May be sent by EE, RA, or CA (depending on message content).
 The OPTIONAL infoValue parameter of InfoTypeAndValue will typically
 be omitted for some of the examples given above.  The receiver is
 free to ignore any contained OBJ. IDs that it does not recognize.
 If sent from EE to CA, the empty set indicates that the CA may send
 any/all information that it wishes.

GenRepContent ::= SEQUENCE OF InfoTypeAndValue
*/
#define TV_CMP_GenRepContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_GenRepContent;

/* List of ASN1T_CMP_InfoTypeAndValue */
typedef struct EXTERN ASN1T_CMP_GenRepContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_GenRepContent();
} ASN1T_CMP_GenRepContent;

class EXTERN ASN1C_CMP_GenRepContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_GenRepContent& msgData;
public:
   ASN1C_CMP_GenRepContent (ASN1T_CMP_GenRepContent& data);
   ASN1C_CMP_GenRepContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_GenRepContent& data);
   ASN1C_CMP_GenRepContent (ASN1CType& ccobj, ASN1T_CMP_GenRepContent& data);
   ASN1C_CMP_GenRepContent (OSRTContext &context, ASN1T_CMP_GenRepContent& data
      );
   ASN1C_CMP_GenRepContent (ASN1C_CMP_GenRepContent& original);
   virtual ~ASN1C_CMP_GenRepContent () {}
   inline ASN1T_CMP_GenRepContent& getData () { return msgData; }
   inline const ASN1T_CMP_GenRepContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "GenRepContent");
   int toStream (const char* name = "GenRepContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_GenRepContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_GenRepContent& getCopy (ASN1T_CMP_GenRepContent* pDstData = 0);
   ASN1T_CMP_GenRepContent* newCopy ();

   ASN1C_CMP_GenRepContent& operator= (ASN1C_CMP_GenRepContent& srcData);
   void Append (ASN1T_CMP_InfoTypeAndValue* elem);
   ASN1T_CMP_InfoTypeAndValue* NewElement ();
   ASN1T_CMP_InfoTypeAndValue* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_GenRepContent (OSCTXT* pctxt,
   ASN1T_CMP_GenRepContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_GenRepContent (OSCTXT* pctxt, 
   ASN1T_CMP_GenRepContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_GenRepContent 
   (const char* name, const ASN1T_CMP_GenRepContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_GenRepContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_GenRepContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_GenRepContent (const char* name, 
   ASN1T_CMP_GenRepContent* pValue, ASN1T_CMP_GenRepContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_GenRepContent (OSCTXT* pctxt, 
   ASN1T_CMP_GenRepContent* pSrcValue, ASN1T_CMP_GenRepContent* pDstValue);

EXTERN void asn1Init_CMP_GenRepContent (ASN1T_CMP_GenRepContent* pvalue);

EXTERN void asn1Free_CMP_GenRepContent (OSCTXT *pctxt, 
   ASN1T_CMP_GenRepContent* pvalue);

/**************************************************************/
/*                                                            */
/*  ErrorMsgContent                                           */
/*                                                            */
/**************************************************************/
/*
 Receiver MAY ignore any contained OIDs that it does not recognize.

ErrorMsgContent ::= SEQUENCE {
   pKIStatusInfo PKIStatusInfo,
   errorCode INTEGER OPTIONAL,
   errorDetails PKIFreeText OPTIONAL
}
*/
#define TV_CMP_ErrorMsgContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_ErrorMsgContent;

struct EXTERN ASN1T_CMP_ErrorMsgContent : public ASN1TPDU {
   struct {
      unsigned errorCodePresent : 1;
      unsigned errorDetailsPresent : 1;
   } m;
   ASN1T_CMP_PKIStatusInfo pKIStatusInfo;
   OSINT32 errorCode;
   ASN1T_CMP_PKIFreeText errorDetails;
   ASN1T_CMP_ErrorMsgContent ();
   ASN1T_CMP_ErrorMsgContent (ASN1C_CMP_ErrorMsgContent& srcData);
   ~ASN1T_CMP_ErrorMsgContent ();
} ;

class EXTERN ASN1C_CMP_ErrorMsgContent :
public ASN1CType
{
protected:
   ASN1T_CMP_ErrorMsgContent& msgData;
public:
   ASN1C_CMP_ErrorMsgContent (ASN1T_CMP_ErrorMsgContent& data);
   ASN1C_CMP_ErrorMsgContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_ErrorMsgContent& data);
   ASN1C_CMP_ErrorMsgContent (OSRTContext &context
      , ASN1T_CMP_ErrorMsgContent& data);
   ASN1C_CMP_ErrorMsgContent (ASN1C_CMP_ErrorMsgContent& original);
   virtual ~ASN1C_CMP_ErrorMsgContent () {}
   inline ASN1T_CMP_ErrorMsgContent& getData () { return msgData; }
   inline const ASN1T_CMP_ErrorMsgContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ErrorMsgContent");
   int toStream (const char* name = "ErrorMsgContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_ErrorMsgContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_ErrorMsgContent& getCopy (ASN1T_CMP_ErrorMsgContent* pDstData = 0);
   ASN1T_CMP_ErrorMsgContent* newCopy ();

   inline ASN1C_CMP_ErrorMsgContent& operator= (ASN1C_CMP_ErrorMsgContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_ErrorMsgContent (OSCTXT* pctxt,
   ASN1T_CMP_ErrorMsgContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_ErrorMsgContent (OSCTXT* pctxt, 
   ASN1T_CMP_ErrorMsgContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_ErrorMsgContent 
   (const char* name, const ASN1T_CMP_ErrorMsgContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_ErrorMsgContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_ErrorMsgContent* pvalue);

EXTERN ASN1T_CMP_ErrorMsgContent* 
   new_ASN1T_CMP_ErrorMsgContent (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_ErrorMsgContent (const char* name, 
   ASN1T_CMP_ErrorMsgContent* pValue, ASN1T_CMP_ErrorMsgContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_ErrorMsgContent (OSCTXT* pctxt, 
   ASN1T_CMP_ErrorMsgContent* pSrcValue, ASN1T_CMP_ErrorMsgContent* pDstValue);

EXTERN void asn1Init_CMP_ErrorMsgContent (ASN1T_CMP_ErrorMsgContent* pvalue);

EXTERN void asn1Free_CMP_ErrorMsgContent (OSCTXT *pctxt, 
   ASN1T_CMP_ErrorMsgContent* pvalue);

/**************************************************************/
/*                                                            */
/*  CertStatus                                                */
/*                                                            */
/**************************************************************/
/*
CertStatus ::= SEQUENCE {
   certHash OCTET STRING,
   certReqId INTEGER,
   statusInfo PKIStatusInfo OPTIONAL
}
*/
#define TV_CMP_CertStatus	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_CertStatus;

struct EXTERN ASN1T_CMP_CertStatus : public ASN1TPDU {
   struct {
      unsigned statusInfoPresent : 1;
   } m;
   ASN1TDynOctStr certHash;
   OSINT32 certReqId;
   ASN1T_CMP_PKIStatusInfo statusInfo;
   ASN1T_CMP_CertStatus ();
   ASN1T_CMP_CertStatus (ASN1C_CMP_CertStatus& srcData);
   ~ASN1T_CMP_CertStatus ();
} ;

class EXTERN ASN1C_CMP_CertStatus :
public ASN1CType
{
protected:
   ASN1T_CMP_CertStatus& msgData;
public:
   ASN1C_CMP_CertStatus (ASN1T_CMP_CertStatus& data);
   ASN1C_CMP_CertStatus (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CertStatus& data);
   ASN1C_CMP_CertStatus (OSRTContext &context, ASN1T_CMP_CertStatus& data);
   ASN1C_CMP_CertStatus (ASN1C_CMP_CertStatus& original);
   virtual ~ASN1C_CMP_CertStatus () {}
   inline ASN1T_CMP_CertStatus& getData () { return msgData; }
   inline const ASN1T_CMP_CertStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertStatus");
   int toStream (const char* name = "CertStatus");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CertStatus* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CertStatus& getCopy (ASN1T_CMP_CertStatus* pDstData = 0);
   ASN1T_CMP_CertStatus* newCopy ();

   inline ASN1C_CMP_CertStatus& operator= (ASN1C_CMP_CertStatus& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_CertStatus (OSCTXT* pctxt,
   ASN1T_CMP_CertStatus *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CertStatus (OSCTXT* pctxt, ASN1T_CMP_CertStatus* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CertStatus 
   (const char* name, const ASN1T_CMP_CertStatus* pvalue);

EXTERN int asn1PrtToStrm_CMP_CertStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertStatus* pvalue);

EXTERN ASN1T_CMP_CertStatus* new_ASN1T_CMP_CertStatus (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_CertStatus (const char* name, 
   ASN1T_CMP_CertStatus* pValue, ASN1T_CMP_CertStatus* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CertStatus (OSCTXT* pctxt, ASN1T_CMP_CertStatus* pSrcValue, 
   ASN1T_CMP_CertStatus* pDstValue);

EXTERN void asn1Init_CMP_CertStatus (ASN1T_CMP_CertStatus* pvalue);

EXTERN void asn1Free_CMP_CertStatus (OSCTXT *pctxt, ASN1T_CMP_CertStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  CertConfirmContent                                        */
/*                                                            */
/**************************************************************/
/*
CertConfirmContent ::= SEQUENCE OF CertStatus
*/
#define TV_CMP_CertConfirmContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_CertConfirmContent;

/* List of ASN1T_CMP_CertStatus */
typedef struct EXTERN ASN1T_CMP_CertConfirmContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_CertConfirmContent();
} ASN1T_CMP_CertConfirmContent;

class EXTERN ASN1C_CMP_CertConfirmContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_CertConfirmContent& msgData;
public:
   ASN1C_CMP_CertConfirmContent (ASN1T_CMP_CertConfirmContent& data);
   ASN1C_CMP_CertConfirmContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_CertConfirmContent& data);
   ASN1C_CMP_CertConfirmContent (ASN1CType& ccobj
      , ASN1T_CMP_CertConfirmContent& data);
   ASN1C_CMP_CertConfirmContent (OSRTContext &context
      , ASN1T_CMP_CertConfirmContent& data);
   ASN1C_CMP_CertConfirmContent (ASN1C_CMP_CertConfirmContent& original);
   virtual ~ASN1C_CMP_CertConfirmContent () {}
   inline ASN1T_CMP_CertConfirmContent& getData () { return msgData; }
   inline const ASN1T_CMP_CertConfirmContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertConfirmContent");
   int toStream (const char* name = "CertConfirmContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_CertConfirmContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_CertConfirmContent& getCopy (ASN1T_CMP_CertConfirmContent* pDstData = 0);
   ASN1T_CMP_CertConfirmContent* newCopy ();

   ASN1C_CMP_CertConfirmContent& operator= (ASN1C_CMP_CertConfirmContent& srcData);
   void Append (ASN1T_CMP_CertStatus* elem);
   ASN1T_CMP_CertStatus* NewElement ();
   ASN1T_CMP_CertStatus* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_CertConfirmContent (OSCTXT* pctxt,
   ASN1T_CMP_CertConfirmContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_CertConfirmContent (OSCTXT* pctxt, 
   ASN1T_CMP_CertConfirmContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_CertConfirmContent 
   (const char* name, const ASN1T_CMP_CertConfirmContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_CertConfirmContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertConfirmContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_CertConfirmContent (const char* name, 
   ASN1T_CMP_CertConfirmContent* pValue, 
   ASN1T_CMP_CertConfirmContent* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_CertConfirmContent (OSCTXT* pctxt, 
   ASN1T_CMP_CertConfirmContent* pSrcValue, ASN1T_CMP_CertConfirmContent*
    pDstValue);

EXTERN void asn1Init_CMP_CertConfirmContent (ASN1T_CMP_CertConfirmContent* pvalue);

EXTERN void asn1Free_CMP_CertConfirmContent (OSCTXT *pctxt, 
   ASN1T_CMP_CertConfirmContent* pvalue);

/**************************************************************/
/*                                                            */
/*  PollReqContent_element                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PollReqContent'
*/
class EXTERN ASN1C_CMP_PollReqContent_element;

struct EXTERN ASN1T_CMP_PollReqContent_element : public ASN1TPDU {
   OSINT32 certReqId;
   ASN1T_CMP_PollReqContent_element ();
   ASN1T_CMP_PollReqContent_element (ASN1C_CMP_PollReqContent_element& srcData);
} ;

class EXTERN ASN1C_CMP_PollReqContent_element :
public ASN1CType
{
protected:
   ASN1T_CMP_PollReqContent_element& msgData;
public:
   ASN1C_CMP_PollReqContent_element (ASN1T_CMP_PollReqContent_element& data);
   ASN1C_CMP_PollReqContent_element (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PollReqContent_element& data);
   ASN1C_CMP_PollReqContent_element (OSRTContext &context
      , ASN1T_CMP_PollReqContent_element& data);
   ASN1C_CMP_PollReqContent_element (ASN1C_CMP_PollReqContent_element& original);
   virtual ~ASN1C_CMP_PollReqContent_element () {}
   inline ASN1T_CMP_PollReqContent_element& getData () { return msgData; }
   inline const ASN1T_CMP_PollReqContent_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PollReqContent_element");
   int toStream (const char* name = "PollReqContent_element");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PollReqContent_element* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PollReqContent_element& getCopy (ASN1T_CMP_PollReqContent_element* pDstData = 0);
   ASN1T_CMP_PollReqContent_element* newCopy ();

   inline ASN1C_CMP_PollReqContent_element& operator= (ASN1C_CMP_PollReqContent_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_PollReqContent_element (OSCTXT* pctxt,
   ASN1T_CMP_PollReqContent_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PollReqContent_element (OSCTXT* pctxt, 
   ASN1T_CMP_PollReqContent_element* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PollReqContent_element 
   (const char* name, const ASN1T_CMP_PollReqContent_element* pvalue);

EXTERN int asn1PrtToStrm_CMP_PollReqContent_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PollReqContent_element* pvalue);

EXTERN ASN1T_CMP_PollReqContent_element* 
   new_ASN1T_CMP_PollReqContent_element (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PollReqContent_element (const char* name, 
   ASN1T_CMP_PollReqContent_element* pValue, 
   ASN1T_CMP_PollReqContent_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PollReqContent_element (OSCTXT* pctxt, 
   ASN1T_CMP_PollReqContent_element* pSrcValue, 
   ASN1T_CMP_PollReqContent_element* pDstValue);

/**************************************************************/
/*                                                            */
/*  PollReqContent                                            */
/*                                                            */
/**************************************************************/
/*
PollReqContent ::= SEQUENCE OF SEQUENCE {
   certReqId INTEGER
}
*/
#define TV_CMP_PollReqContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_PollReqContent;

/* List of ASN1T_CMP_PollReqContent_element */
typedef struct EXTERN ASN1T_CMP_PollReqContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_PollReqContent();
} ASN1T_CMP_PollReqContent;

class EXTERN ASN1C_CMP_PollReqContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_PollReqContent& msgData;
public:
   ASN1C_CMP_PollReqContent (ASN1T_CMP_PollReqContent& data);
   ASN1C_CMP_PollReqContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PollReqContent& data);
   ASN1C_CMP_PollReqContent (ASN1CType& ccobj, ASN1T_CMP_PollReqContent& data);
   ASN1C_CMP_PollReqContent (OSRTContext &context
      , ASN1T_CMP_PollReqContent& data);
   ASN1C_CMP_PollReqContent (ASN1C_CMP_PollReqContent& original);
   virtual ~ASN1C_CMP_PollReqContent () {}
   inline ASN1T_CMP_PollReqContent& getData () { return msgData; }
   inline const ASN1T_CMP_PollReqContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PollReqContent");
   int toStream (const char* name = "PollReqContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PollReqContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PollReqContent& getCopy (ASN1T_CMP_PollReqContent* pDstData = 0);
   ASN1T_CMP_PollReqContent* newCopy ();

   ASN1C_CMP_PollReqContent& operator= (ASN1C_CMP_PollReqContent& srcData);
   void Append (ASN1T_CMP_PollReqContent_element* elem);
   ASN1T_CMP_PollReqContent_element* NewElement ();
   ASN1T_CMP_PollReqContent_element* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_PollReqContent (OSCTXT* pctxt,
   ASN1T_CMP_PollReqContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PollReqContent (OSCTXT* pctxt, 
   ASN1T_CMP_PollReqContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PollReqContent 
   (const char* name, const ASN1T_CMP_PollReqContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_PollReqContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PollReqContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_PollReqContent (const char* name, 
   ASN1T_CMP_PollReqContent* pValue, ASN1T_CMP_PollReqContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PollReqContent (OSCTXT* pctxt, 
   ASN1T_CMP_PollReqContent* pSrcValue, ASN1T_CMP_PollReqContent* pDstValue);

EXTERN void asn1Init_CMP_PollReqContent (ASN1T_CMP_PollReqContent* pvalue);

EXTERN void asn1Free_CMP_PollReqContent (OSCTXT *pctxt, 
   ASN1T_CMP_PollReqContent* pvalue);

/**************************************************************/
/*                                                            */
/*  PollRepContent_element                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PollRepContent'
*/
class EXTERN ASN1C_CMP_PollRepContent_element;

struct EXTERN ASN1T_CMP_PollRepContent_element : public ASN1TPDU {
   struct {
      unsigned reasonPresent : 1;
   } m;
   OSINT32 certReqId;
   OSINT32 checkAfter;
   ASN1T_CMP_PKIFreeText reason;
   ASN1T_CMP_PollRepContent_element ();
   ASN1T_CMP_PollRepContent_element (ASN1C_CMP_PollRepContent_element& srcData);
   ~ASN1T_CMP_PollRepContent_element ();
} ;

class EXTERN ASN1C_CMP_PollRepContent_element :
public ASN1CType
{
protected:
   ASN1T_CMP_PollRepContent_element& msgData;
public:
   ASN1C_CMP_PollRepContent_element (ASN1T_CMP_PollRepContent_element& data);
   ASN1C_CMP_PollRepContent_element (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PollRepContent_element& data);
   ASN1C_CMP_PollRepContent_element (OSRTContext &context
      , ASN1T_CMP_PollRepContent_element& data);
   ASN1C_CMP_PollRepContent_element (ASN1C_CMP_PollRepContent_element& original);
   virtual ~ASN1C_CMP_PollRepContent_element () {}
   inline ASN1T_CMP_PollRepContent_element& getData () { return msgData; }
   inline const ASN1T_CMP_PollRepContent_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PollRepContent_element");
   int toStream (const char* name = "PollRepContent_element");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PollRepContent_element* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PollRepContent_element& getCopy (ASN1T_CMP_PollRepContent_element* pDstData = 0);
   ASN1T_CMP_PollRepContent_element* newCopy ();

   inline ASN1C_CMP_PollRepContent_element& operator= (ASN1C_CMP_PollRepContent_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_PollRepContent_element (OSCTXT* pctxt,
   ASN1T_CMP_PollRepContent_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PollRepContent_element (OSCTXT* pctxt, 
   ASN1T_CMP_PollRepContent_element* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PollRepContent_element 
   (const char* name, const ASN1T_CMP_PollRepContent_element* pvalue);

EXTERN int asn1PrtToStrm_CMP_PollRepContent_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PollRepContent_element* pvalue);

EXTERN ASN1T_CMP_PollRepContent_element* 
   new_ASN1T_CMP_PollRepContent_element (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PollRepContent_element (const char* name, 
   ASN1T_CMP_PollRepContent_element* pValue, 
   ASN1T_CMP_PollRepContent_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PollRepContent_element (OSCTXT* pctxt, 
   ASN1T_CMP_PollRepContent_element* pSrcValue, 
   ASN1T_CMP_PollRepContent_element* pDstValue);

EXTERN void asn1Init_CMP_PollRepContent_element (
   ASN1T_CMP_PollRepContent_element* pvalue);

EXTERN void asn1Free_CMP_PollRepContent_element (OSCTXT *pctxt, 
   ASN1T_CMP_PollRepContent_element* pvalue);

/**************************************************************/
/*                                                            */
/*  PollRepContent                                            */
/*                                                            */
/**************************************************************/
/*
PollRepContent ::= SEQUENCE OF SEQUENCE {
   certReqId INTEGER,
   checkAfter INTEGER,
   reason PKIFreeText OPTIONAL
}
*/
#define TV_CMP_PollRepContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_PollRepContent;

/* List of ASN1T_CMP_PollRepContent_element */
typedef struct EXTERN ASN1T_CMP_PollRepContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_PollRepContent();
} ASN1T_CMP_PollRepContent;

class EXTERN ASN1C_CMP_PollRepContent :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_PollRepContent& msgData;
public:
   ASN1C_CMP_PollRepContent (ASN1T_CMP_PollRepContent& data);
   ASN1C_CMP_PollRepContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PollRepContent& data);
   ASN1C_CMP_PollRepContent (ASN1CType& ccobj, ASN1T_CMP_PollRepContent& data);
   ASN1C_CMP_PollRepContent (OSRTContext &context
      , ASN1T_CMP_PollRepContent& data);
   ASN1C_CMP_PollRepContent (ASN1C_CMP_PollRepContent& original);
   virtual ~ASN1C_CMP_PollRepContent () {}
   inline ASN1T_CMP_PollRepContent& getData () { return msgData; }
   inline const ASN1T_CMP_PollRepContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PollRepContent");
   int toStream (const char* name = "PollRepContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PollRepContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PollRepContent& getCopy (ASN1T_CMP_PollRepContent* pDstData = 0);
   ASN1T_CMP_PollRepContent* newCopy ();

   ASN1C_CMP_PollRepContent& operator= (ASN1C_CMP_PollRepContent& srcData);
   void Append (ASN1T_CMP_PollRepContent_element* elem);
   ASN1T_CMP_PollRepContent_element* NewElement ();
   ASN1T_CMP_PollRepContent_element* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_PollRepContent (OSCTXT* pctxt,
   ASN1T_CMP_PollRepContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PollRepContent (OSCTXT* pctxt, 
   ASN1T_CMP_PollRepContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PollRepContent 
   (const char* name, const ASN1T_CMP_PollRepContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_PollRepContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PollRepContent* pvalue);

EXTERN OSBOOL asn1Compare_CMP_PollRepContent (const char* name, 
   ASN1T_CMP_PollRepContent* pValue, ASN1T_CMP_PollRepContent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PollRepContent (OSCTXT* pctxt, 
   ASN1T_CMP_PollRepContent* pSrcValue, ASN1T_CMP_PollRepContent* pDstValue);

EXTERN void asn1Init_CMP_PollRepContent (ASN1T_CMP_PollRepContent* pvalue);

EXTERN void asn1Free_CMP_PollRepContent (OSCTXT *pctxt, 
   ASN1T_CMP_PollRepContent* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIBody                                                   */
/*                                                            */
/**************************************************************/
/*
 text encoded as UTF-8 String [RFC3629] (note:  each UTF8String
 MAY include an RFC 1766/RFC 3066 language tag to indicate the
 language of the contained text - see [RFC2482] for details)

PKIBody ::= CHOICE {
   ir [0] CertReqMessages,
   ip [1] CertRepMessage,
   cr [2] CertReqMessages,
   cp [3] CertRepMessage,
   p10cr [4] CertificationRequest,
   popdecc [5] POPODecKeyChallContent,
   popdecr [6] POPODecKeyRespContent,
   kur [7] CertReqMessages,
   kup [8] CertRepMessage,
   krr [9] CertReqMessages,
   krp [10] KeyRecRepContent,
   rr [11] RevReqContent,
   rp [12] RevRepContent,
   ccr [13] CertReqMessages,
   ccp [14] CertRepMessage,
   ckuann [15] CAKeyUpdAnnContent,
   cann [16] CertAnnContent,
   rann [17] RevAnnContent,
   crlann [18] CRLAnnContent,
   pkiconf [19] PKIConfirmContent,
   nested [20] NestedMessageContent,
   genm [21] GenMsgContent,
   genp [22] GenRepContent,
   error [23] ErrorMsgContent,
   certConf [24] CertConfirmContent,
   pollReq [25] PollReqContent,
   pollRep [26] PollRepContent,
   bcr [27] CertReqMessages
}
*/
/* Choice context tags */

#define TVC_CMP_PKIBody_ir	(TM_CTXT|TM_CONS|0)
#define TVC_CMP_PKIBody_ip	(TM_CTXT|TM_CONS|1)
#define TVC_CMP_PKIBody_cr	(TM_CTXT|TM_CONS|2)
#define TVC_CMP_PKIBody_cp	(TM_CTXT|TM_CONS|3)
#define TVC_CMP_PKIBody_p10cr	(TM_CTXT|TM_CONS|4)
#define TVC_CMP_PKIBody_popdecc	(TM_CTXT|TM_CONS|5)
#define TVC_CMP_PKIBody_popdecr	(TM_CTXT|TM_CONS|6)
#define TVC_CMP_PKIBody_kur	(TM_CTXT|TM_CONS|7)
#define TVC_CMP_PKIBody_kup	(TM_CTXT|TM_CONS|8)
#define TVC_CMP_PKIBody_krr	(TM_CTXT|TM_CONS|9)
#define TVC_CMP_PKIBody_krp	(TM_CTXT|TM_CONS|10)
#define TVC_CMP_PKIBody_rr	(TM_CTXT|TM_CONS|11)
#define TVC_CMP_PKIBody_rp	(TM_CTXT|TM_CONS|12)
#define TVC_CMP_PKIBody_ccr	(TM_CTXT|TM_CONS|13)
#define TVC_CMP_PKIBody_ccp	(TM_CTXT|TM_CONS|14)
#define TVC_CMP_PKIBody_ckuann	(TM_CTXT|TM_CONS|15)
#define TVC_CMP_PKIBody_cann	(TM_CTXT|TM_CONS|16)
#define TVC_CMP_PKIBody_rann	(TM_CTXT|TM_CONS|17)
#define TVC_CMP_PKIBody_crlann	(TM_CTXT|TM_CONS|18)
#define TVC_CMP_PKIBody_pkiconf	(TM_CTXT|TM_CONS|19)
#define TVC_CMP_PKIBody_nested	(TM_CTXT|TM_CONS|20)
#define TVC_CMP_PKIBody_genm	(TM_CTXT|TM_CONS|21)
#define TVC_CMP_PKIBody_genp	(TM_CTXT|TM_CONS|22)
#define TVC_CMP_PKIBody_error	(TM_CTXT|TM_CONS|23)
#define TVC_CMP_PKIBody_certConf	(TM_CTXT|TM_CONS|24)
#define TVC_CMP_PKIBody_pollReq	(TM_CTXT|TM_CONS|25)
#define TVC_CMP_PKIBody_pollRep	(TM_CTXT|TM_CONS|26)
#define TVC_CMP_PKIBody_bcr	(TM_CTXT|TM_CONS|27)

/* Choice tag constants */

#define T_CMP_PKIBody_ir                1
#define T_CMP_PKIBody_ip                2
#define T_CMP_PKIBody_cr                3
#define T_CMP_PKIBody_cp                4
#define T_CMP_PKIBody_p10cr             5
#define T_CMP_PKIBody_popdecc           6
#define T_CMP_PKIBody_popdecr           7
#define T_CMP_PKIBody_kur               8
#define T_CMP_PKIBody_kup               9
#define T_CMP_PKIBody_krr               10
#define T_CMP_PKIBody_krp               11
#define T_CMP_PKIBody_rr                12
#define T_CMP_PKIBody_rp                13
#define T_CMP_PKIBody_ccr               14
#define T_CMP_PKIBody_ccp               15
#define T_CMP_PKIBody_ckuann            16
#define T_CMP_PKIBody_cann              17
#define T_CMP_PKIBody_rann              18
#define T_CMP_PKIBody_crlann            19
#define T_CMP_PKIBody_pkiconf           20
#define T_CMP_PKIBody_nested            21
#define T_CMP_PKIBody_genm              22
#define T_CMP_PKIBody_genp              23
#define T_CMP_PKIBody_error             24
#define T_CMP_PKIBody_certConf          25
#define T_CMP_PKIBody_pollReq           26
#define T_CMP_PKIBody_pollRep           27
#define T_CMP_PKIBody_bcr               28

class EXTERN ASN1C_CMP_PKIBody;

struct EXTERN ASN1T_CMP_PKIBody : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_CRMF_CertReqMessages *ir;
      /* t = 2 */
      ASN1T_CMP_CertRepMessage *ip;
      /* t = 3 */
      ASN1T_CRMF_CertReqMessages *cr;
      /* t = 4 */
      ASN1T_CMP_CertRepMessage *cp;
      /* t = 5 */
      ASN1T_PKCS10_CertificationRequest *p10cr;
      /* t = 6 */
      ASN1T_CMP_POPODecKeyChallContent *popdecc;
      /* t = 7 */
      ASN1T_CMP_POPODecKeyRespContent *popdecr;
      /* t = 8 */
      ASN1T_CRMF_CertReqMessages *kur;
      /* t = 9 */
      ASN1T_CMP_CertRepMessage *kup;
      /* t = 10 */
      ASN1T_CRMF_CertReqMessages *krr;
      /* t = 11 */
      ASN1T_CMP_KeyRecRepContent *krp;
      /* t = 12 */
      ASN1T_CMP_RevReqContent *rr;
      /* t = 13 */
      ASN1T_CMP_RevRepContent *rp;
      /* t = 14 */
      ASN1T_CRMF_CertReqMessages *ccr;
      /* t = 15 */
      ASN1T_CMP_CertRepMessage *ccp;
      /* t = 16 */
      ASN1T_CMP_CAKeyUpdAnnContent *ckuann;
      /* t = 17 */
      ASN1T_CMP_CertAnnContent *cann;
      /* t = 18 */
      ASN1T_CMP_RevAnnContent *rann;
      /* t = 19 */
      ASN1T_CMP_CRLAnnContent *crlann;
      /* t = 20 */
      /* t = 21 */
      struct ASN1T_CMP_PKIMessages *nested;
      /* t = 22 */
      ASN1T_CMP_GenMsgContent *genm;
      /* t = 23 */
      ASN1T_CMP_GenRepContent *genp;
      /* t = 24 */
      ASN1T_CMP_ErrorMsgContent *error;
      /* t = 25 */
      ASN1T_CMP_CertConfirmContent *certConf;
      /* t = 26 */
      ASN1T_CMP_PollReqContent *pollReq;
      /* t = 27 */
      ASN1T_CMP_PollRepContent *pollRep;
      /* t = 28 */
      ASN1T_CRMF_CertReqMessages *bcr;
   } u;
   ASN1T_CMP_PKIBody () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMP_PKIBody (ASN1C_CMP_PKIBody& srcData);
   ~ASN1T_CMP_PKIBody ();
} ;

class EXTERN ASN1C_CMP_PKIBody :
public ASN1CType
{
protected:
   ASN1T_CMP_PKIBody& msgData;
public:
   ASN1C_CMP_PKIBody (ASN1T_CMP_PKIBody& data);
   ASN1C_CMP_PKIBody (OSRTMessageBufferIF& msgBuf, ASN1T_CMP_PKIBody& data);
   ASN1C_CMP_PKIBody (OSRTContext &context, ASN1T_CMP_PKIBody& data);
   ASN1C_CMP_PKIBody (ASN1C_CMP_PKIBody& original);
   virtual ~ASN1C_CMP_PKIBody () {}
   inline ASN1T_CMP_PKIBody& getData () { return msgData; }
   inline const ASN1T_CMP_PKIBody& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIBody");
   int toStream (const char* name = "PKIBody");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIBody* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIBody& getCopy (ASN1T_CMP_PKIBody* pDstData = 0);
   ASN1T_CMP_PKIBody* newCopy ();

   inline ASN1C_CMP_PKIBody& operator= (ASN1C_CMP_PKIBody& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_PKIBody (OSCTXT* pctxt,
   ASN1T_CMP_PKIBody *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIBody (OSCTXT* pctxt, ASN1T_CMP_PKIBody* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIBody (const char* name, const ASN1T_CMP_PKIBody* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIBody (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIBody* pvalue);

EXTERN ASN1T_CMP_PKIBody* new_ASN1T_CMP_PKIBody (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PKIBody (const char* name, ASN1T_CMP_PKIBody* pValue, 
   ASN1T_CMP_PKIBody* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIBody (OSCTXT* pctxt, ASN1T_CMP_PKIBody* pSrcValue, 
   ASN1T_CMP_PKIBody* pDstValue);

EXTERN void asn1Init_CMP_PKIBody (ASN1T_CMP_PKIBody* pvalue);

EXTERN void asn1Free_CMP_PKIBody (OSCTXT *pctxt, ASN1T_CMP_PKIBody* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIMessage_extraCerts                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PKIMessage'
*/
class EXTERN ASN1C_CMP_PKIMessage_extraCerts;

/* List of ASN1T_CMP_CMPCertificate */
typedef struct EXTERN ASN1T_CMP_PKIMessage_extraCerts : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_PKIMessage_extraCerts();
} ASN1T_CMP_PKIMessage_extraCerts;

class EXTERN ASN1C_CMP_PKIMessage_extraCerts :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_PKIMessage_extraCerts& msgData;
public:
   ASN1C_CMP_PKIMessage_extraCerts (ASN1T_CMP_PKIMessage_extraCerts& data);
   ASN1C_CMP_PKIMessage_extraCerts (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIMessage_extraCerts& data);
   ASN1C_CMP_PKIMessage_extraCerts (ASN1CType& ccobj
      , ASN1T_CMP_PKIMessage_extraCerts& data);
   ASN1C_CMP_PKIMessage_extraCerts (OSRTContext &context
      , ASN1T_CMP_PKIMessage_extraCerts& data);
   ASN1C_CMP_PKIMessage_extraCerts (ASN1C_CMP_PKIMessage_extraCerts& original);
   virtual ~ASN1C_CMP_PKIMessage_extraCerts () {}
   inline ASN1T_CMP_PKIMessage_extraCerts& getData () { return msgData; }
   inline const ASN1T_CMP_PKIMessage_extraCerts& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIMessage_extraCerts");
   int toStream (const char* name = "PKIMessage_extraCerts");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIMessage_extraCerts* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIMessage_extraCerts& getCopy (ASN1T_CMP_PKIMessage_extraCerts* pDstData = 0);
   ASN1T_CMP_PKIMessage_extraCerts* newCopy ();

   ASN1C_CMP_PKIMessage_extraCerts& operator= (ASN1C_CMP_PKIMessage_extraCerts& srcData);
   void Append (ASN1T_CMP_CMPCertificate* elem);
   ASN1T_CMP_CMPCertificate* NewElement ();
   ASN1T_CMP_CMPCertificate* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_PKIMessage_extraCerts (OSCTXT* pctxt,
   ASN1T_CMP_PKIMessage_extraCerts *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIMessage_extraCerts (OSCTXT* pctxt, 
   ASN1T_CMP_PKIMessage_extraCerts* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIMessage_extraCerts 
   (const char* name, const ASN1T_CMP_PKIMessage_extraCerts* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIMessage_extraCerts (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIMessage_extraCerts* pvalue);

EXTERN OSBOOL asn1Compare_CMP_PKIMessage_extraCerts (const char* name, 
   ASN1T_CMP_PKIMessage_extraCerts* pValue, 
   ASN1T_CMP_PKIMessage_extraCerts* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIMessage_extraCerts (OSCTXT* pctxt, 
   ASN1T_CMP_PKIMessage_extraCerts* pSrcValue, ASN1T_CMP_PKIMessage_extraCerts*
    pDstValue);

EXTERN void asn1Init_CMP_PKIMessage_extraCerts (
   ASN1T_CMP_PKIMessage_extraCerts* pvalue);

EXTERN void asn1Free_CMP_PKIMessage_extraCerts (OSCTXT *pctxt, 
   ASN1T_CMP_PKIMessage_extraCerts* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIMessage                                                */
/*                                                            */
/**************************************************************/
/*
 This syntax, while bits-on-the-wire compatible with the standard
 X.509 definition of "Certificate", allows the possibility of future
 certificate types (such as X.509 attribute certificates, WAP WTLS
 certificates, or other kinds of certificates) within this
 certificate management protocol, should a need ever arise to support
 such generality.  Those implementations that do not foresee a need to
 ever support other certificate types MAY, if they wish, comment out
 the above structure and "un-comment" the following one prior to
 compiling this ASN.1 module.  (Note that interoperability with
 implementations that don't do this will be unaffected by this change.)
 CMPCertificate ::= Certificate

PKIMessage ::= SEQUENCE {
   header PKIHeader,
   body PKIBody,
   protection [0] PKIProtection OPTIONAL,
   extraCerts [1] SEQUENCE (SIZE (1..MAX)) OF CMPCertificate OPTIONAL
}
*/
#define TV_CMP_PKIMessage	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_PKIMessage;

struct EXTERN ASN1T_CMP_PKIMessage : public ASN1TPDU {
   struct {
      unsigned protectionPresent : 1;
      unsigned extraCertsPresent : 1;
   } m;
   ASN1T_CMP_PKIHeader header;
   ASN1T_CMP_PKIBody body;
   ASN1T_CMP_PKIProtection protection;
   ASN1T_CMP_PKIMessage_extraCerts extraCerts;
   ASN1T_CMP_PKIMessage ();
   ASN1T_CMP_PKIMessage (ASN1C_CMP_PKIMessage& srcData);
   ~ASN1T_CMP_PKIMessage ();
} ;

class EXTERN ASN1C_CMP_PKIMessage :
public ASN1CType
{
protected:
   ASN1T_CMP_PKIMessage& msgData;
public:
   ASN1C_CMP_PKIMessage (ASN1T_CMP_PKIMessage& data);
   ASN1C_CMP_PKIMessage (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIMessage& data);
   ASN1C_CMP_PKIMessage (OSRTContext &context, ASN1T_CMP_PKIMessage& data);
   ASN1C_CMP_PKIMessage (ASN1C_CMP_PKIMessage& original);
   virtual ~ASN1C_CMP_PKIMessage () {}
   inline ASN1T_CMP_PKIMessage& getData () { return msgData; }
   inline const ASN1T_CMP_PKIMessage& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIMessage");
   int toStream (const char* name = "PKIMessage");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIMessage* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIMessage& getCopy (ASN1T_CMP_PKIMessage* pDstData = 0);
   ASN1T_CMP_PKIMessage* newCopy ();

   inline ASN1C_CMP_PKIMessage& operator= (ASN1C_CMP_PKIMessage& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_PKIMessage (OSCTXT* pctxt,
   ASN1T_CMP_PKIMessage *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIMessage (OSCTXT* pctxt, ASN1T_CMP_PKIMessage* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIMessage 
   (const char* name, const ASN1T_CMP_PKIMessage* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIMessage* pvalue);

EXTERN ASN1T_CMP_PKIMessage* new_ASN1T_CMP_PKIMessage (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PKIMessage (const char* name, 
   ASN1T_CMP_PKIMessage* pValue, ASN1T_CMP_PKIMessage* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIMessage (OSCTXT* pctxt, ASN1T_CMP_PKIMessage* pSrcValue, 
   ASN1T_CMP_PKIMessage* pDstValue);

EXTERN void asn1Init_CMP_PKIMessage (ASN1T_CMP_PKIMessage* pvalue);

EXTERN void asn1Free_CMP_PKIMessage (OSCTXT *pctxt, ASN1T_CMP_PKIMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIMessages                                               */
/*                                                            */
/**************************************************************/
/*
PKIMessages ::= SEQUENCE (SIZE (1..MAX)) OF PKIMessage
*/
#define TV_CMP_PKIMessages	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_PKIMessages;

/* List of ASN1T_CMP_PKIMessage */
typedef struct EXTERN ASN1T_CMP_PKIMessages : public ASN1TPDUSeqOfList {
   ~ASN1T_CMP_PKIMessages();
} ASN1T_CMP_PKIMessages;

class EXTERN ASN1C_CMP_PKIMessages :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMP_PKIMessages& msgData;
public:
   ASN1C_CMP_PKIMessages (ASN1T_CMP_PKIMessages& data);
   ASN1C_CMP_PKIMessages (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PKIMessages& data);
   ASN1C_CMP_PKIMessages (ASN1CType& ccobj, ASN1T_CMP_PKIMessages& data);
   ASN1C_CMP_PKIMessages (OSRTContext &context, ASN1T_CMP_PKIMessages& data);
   ASN1C_CMP_PKIMessages (ASN1C_CMP_PKIMessages& original);
   virtual ~ASN1C_CMP_PKIMessages () {}
   inline ASN1T_CMP_PKIMessages& getData () { return msgData; }
   inline const ASN1T_CMP_PKIMessages& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIMessages");
   int toStream (const char* name = "PKIMessages");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PKIMessages* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PKIMessages& getCopy (ASN1T_CMP_PKIMessages* pDstData = 0);
   ASN1T_CMP_PKIMessages* newCopy ();

   ASN1C_CMP_PKIMessages& operator= (ASN1C_CMP_PKIMessages& srcData);
   void Append (ASN1T_CMP_PKIMessage* elem);
   ASN1T_CMP_PKIMessage* NewElement ();
   ASN1T_CMP_PKIMessage* AppendNewElement ();
} ;

EXTERN int asn1E_CMP_PKIMessages (OSCTXT* pctxt,
   ASN1T_CMP_PKIMessages *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PKIMessages (OSCTXT* pctxt, 
   ASN1T_CMP_PKIMessages* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PKIMessages 
   (const char* name, const ASN1T_CMP_PKIMessages* pvalue);

EXTERN int asn1PrtToStrm_CMP_PKIMessages (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIMessages* pvalue);

EXTERN OSBOOL asn1Compare_CMP_PKIMessages (const char* name, 
   ASN1T_CMP_PKIMessages* pValue, ASN1T_CMP_PKIMessages* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PKIMessages (OSCTXT* pctxt, 
   ASN1T_CMP_PKIMessages* pSrcValue, ASN1T_CMP_PKIMessages* pDstValue);

EXTERN void asn1Init_CMP_PKIMessages (ASN1T_CMP_PKIMessages* pvalue);

EXTERN void asn1Free_CMP_PKIMessages (OSCTXT *pctxt, ASN1T_CMP_PKIMessages* pvalue);

/**************************************************************/
/*                                                            */
/*  NestedMessageContent                                      */
/*                                                            */
/**************************************************************/
/*
 or HMAC [RFC2104, RFC2202])

NestedMessageContent ::= PKIMessages
*/
#define TV_CMP_NestedMessageContent	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_NestedMessageContent;

/* List of ASN1T_CMP_PKIMessage */
typedef ASN1T_CMP_PKIMessages ASN1T_CMP_NestedMessageContent;

class EXTERN ASN1C_CMP_NestedMessageContent :
   public ASN1C_CMP_PKIMessages
{
protected:
public:
   ASN1C_CMP_NestedMessageContent (ASN1T_CMP_NestedMessageContent& data);
   ASN1C_CMP_NestedMessageContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_NestedMessageContent& data);
   ASN1C_CMP_NestedMessageContent (OSRTContext &context
      , ASN1T_CMP_NestedMessageContent& data);
   ASN1C_CMP_NestedMessageContent (ASN1C_CMP_NestedMessageContent& original);
   virtual ~ASN1C_CMP_NestedMessageContent () {}
   inline ASN1T_CMP_NestedMessageContent& getData () { return msgData; }
   inline const ASN1T_CMP_NestedMessageContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NestedMessageContent");
   int toStream (const char* name = "NestedMessageContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_NestedMessageContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_NestedMessageContent& getCopy (ASN1T_CMP_NestedMessageContent* pDstData = 0);
   ASN1T_CMP_NestedMessageContent* newCopy ();

   inline ASN1C_CMP_NestedMessageContent& operator= (ASN1C_CMP_NestedMessageContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_NestedMessageContent (OSCTXT* pctxt,
   ASN1T_CMP_NestedMessageContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_NestedMessageContent (OSCTXT* pctxt, 
   ASN1T_CMP_NestedMessageContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_NestedMessageContent 
   (const char* name, const ASN1T_CMP_NestedMessageContent* pvalue);

EXTERN int asn1PrtToStrm_CMP_NestedMessageContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_NestedMessageContent* pvalue);

EXTERN ASN1T_CMP_NestedMessageContent* 
   new_ASN1T_CMP_NestedMessageContent (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_NestedMessageContent (const char* name, 
   ASN1T_CMP_NestedMessageContent* pValue, 
   ASN1T_CMP_NestedMessageContent* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_NestedMessageContent (OSCTXT* pctxt, 
   ASN1T_CMP_NestedMessageContent* pSrcValue, ASN1T_CMP_NestedMessageContent*
    pDstValue);

EXTERN void asn1Init_CMP_NestedMessageContent (ASN1T_CMP_NestedMessageContent* pvalue);

EXTERN void asn1Free_CMP_NestedMessageContent (OSCTXT *pctxt, 
   ASN1T_CMP_NestedMessageContent* pvalue);

/**************************************************************/
/*                                                            */
/*  OOBCert                                                   */
/*                                                            */
/**************************************************************/
/*
OOBCert ::= CMPCertificate
*/
/* Choice context tags */

#define TVC_CMP_OOBCert_x509v3PKCert	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_OOBCert;

typedef ASN1T_CMP_CMPCertificate ASN1T_CMP_OOBCert;

class EXTERN ASN1C_CMP_OOBCert :
   public ASN1C_CMP_CMPCertificate
{
protected:
public:
   ASN1C_CMP_OOBCert (ASN1T_CMP_OOBCert& data);
   ASN1C_CMP_OOBCert (OSRTMessageBufferIF& msgBuf, ASN1T_CMP_OOBCert& data);
   ASN1C_CMP_OOBCert (OSRTContext &context, ASN1T_CMP_OOBCert& data);
   ASN1C_CMP_OOBCert (ASN1C_CMP_OOBCert& original);
   virtual ~ASN1C_CMP_OOBCert () {}
   inline ASN1T_CMP_OOBCert& getData () { return msgData; }
   inline const ASN1T_CMP_OOBCert& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OOBCert");
   int toStream (const char* name = "OOBCert");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_OOBCert* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_OOBCert& getCopy (ASN1T_CMP_OOBCert* pDstData = 0);
   ASN1T_CMP_OOBCert* newCopy ();

   inline ASN1C_CMP_OOBCert& operator= (ASN1C_CMP_OOBCert& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_OOBCert (OSCTXT* pctxt,
   ASN1T_CMP_OOBCert *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_OOBCert (OSCTXT* pctxt, ASN1T_CMP_OOBCert* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_OOBCert (const char* name, const ASN1T_CMP_OOBCert* pvalue);

EXTERN int asn1PrtToStrm_CMP_OOBCert (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_OOBCert* pvalue);

EXTERN ASN1T_CMP_OOBCert* new_ASN1T_CMP_OOBCert (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_OOBCert (const char* name, ASN1T_CMP_OOBCert* pValue, 
   ASN1T_CMP_OOBCert* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_OOBCert (OSCTXT* pctxt, ASN1T_CMP_OOBCert* pSrcValue, 
   ASN1T_CMP_OOBCert* pDstValue);

EXTERN void asn1Init_CMP_OOBCert (ASN1T_CMP_OOBCert* pvalue);

EXTERN void asn1Free_CMP_OOBCert (OSCTXT *pctxt, ASN1T_CMP_OOBCert* pvalue);

/**************************************************************/
/*                                                            */
/*  ProtectedPart                                             */
/*                                                            */
/**************************************************************/
/*
ProtectedPart ::= SEQUENCE {
   header PKIHeader,
   body PKIBody
}
*/
#define TV_CMP_ProtectedPart	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_ProtectedPart;

struct EXTERN ASN1T_CMP_ProtectedPart : public ASN1TPDU {
   ASN1T_CMP_PKIHeader header;
   ASN1T_CMP_PKIBody body;
   ASN1T_CMP_ProtectedPart ();
   ASN1T_CMP_ProtectedPart (ASN1C_CMP_ProtectedPart& srcData);
   ~ASN1T_CMP_ProtectedPart ();
} ;

class EXTERN ASN1C_CMP_ProtectedPart :
public ASN1CType
{
protected:
   ASN1T_CMP_ProtectedPart& msgData;
public:
   ASN1C_CMP_ProtectedPart (ASN1T_CMP_ProtectedPart& data);
   ASN1C_CMP_ProtectedPart (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_ProtectedPart& data);
   ASN1C_CMP_ProtectedPart (OSRTContext &context, ASN1T_CMP_ProtectedPart& data
      );
   ASN1C_CMP_ProtectedPart (ASN1C_CMP_ProtectedPart& original);
   virtual ~ASN1C_CMP_ProtectedPart () {}
   inline ASN1T_CMP_ProtectedPart& getData () { return msgData; }
   inline const ASN1T_CMP_ProtectedPart& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ProtectedPart");
   int toStream (const char* name = "ProtectedPart");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_ProtectedPart* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_ProtectedPart& getCopy (ASN1T_CMP_ProtectedPart* pDstData = 0);
   ASN1T_CMP_ProtectedPart* newCopy ();

   inline ASN1C_CMP_ProtectedPart& operator= (ASN1C_CMP_ProtectedPart& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_ProtectedPart (OSCTXT* pctxt,
   ASN1T_CMP_ProtectedPart *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_ProtectedPart (OSCTXT* pctxt, 
   ASN1T_CMP_ProtectedPart* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_ProtectedPart 
   (const char* name, const ASN1T_CMP_ProtectedPart* pvalue);

EXTERN int asn1PrtToStrm_CMP_ProtectedPart (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_ProtectedPart* pvalue);

EXTERN ASN1T_CMP_ProtectedPart* new_ASN1T_CMP_ProtectedPart (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMP_ProtectedPart (const char* name, 
   ASN1T_CMP_ProtectedPart* pValue, ASN1T_CMP_ProtectedPart* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_ProtectedPart (OSCTXT* pctxt, 
   ASN1T_CMP_ProtectedPart* pSrcValue, ASN1T_CMP_ProtectedPart* pDstValue);

EXTERN void asn1Init_CMP_ProtectedPart (ASN1T_CMP_ProtectedPart* pvalue);

EXTERN void asn1Free_CMP_ProtectedPart (OSCTXT *pctxt, 
   ASN1T_CMP_ProtectedPart* pvalue);

/**************************************************************/
/*                                                            */
/*  PBMParameter                                              */
/*                                                            */
/**************************************************************/
/*
PBMParameter ::= SEQUENCE {
   salt OCTET STRING,
   owf AlgorithmIdentifier,
   iterationCount INTEGER,
   mac AlgorithmIdentifier
}
*/
#define TV_CMP_PBMParameter	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_PBMParameter;

struct EXTERN ASN1T_CMP_PBMParameter : public ASN1TPDU {
   ASN1TDynOctStr salt;
   ASN1T_EXP_AlgorithmIdentifier owf;
   OSINT32 iterationCount;
   ASN1T_EXP_AlgorithmIdentifier mac;
   ASN1T_CMP_PBMParameter ();
   ASN1T_CMP_PBMParameter (ASN1C_CMP_PBMParameter& srcData);
   ~ASN1T_CMP_PBMParameter ();
} ;

class EXTERN ASN1C_CMP_PBMParameter :
public ASN1CType
{
protected:
   ASN1T_CMP_PBMParameter& msgData;
public:
   ASN1C_CMP_PBMParameter (ASN1T_CMP_PBMParameter& data);
   ASN1C_CMP_PBMParameter (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_PBMParameter& data);
   ASN1C_CMP_PBMParameter (OSRTContext &context, ASN1T_CMP_PBMParameter& data);
   ASN1C_CMP_PBMParameter (ASN1C_CMP_PBMParameter& original);
   virtual ~ASN1C_CMP_PBMParameter () {}
   inline ASN1T_CMP_PBMParameter& getData () { return msgData; }
   inline const ASN1T_CMP_PBMParameter& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PBMParameter");
   int toStream (const char* name = "PBMParameter");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_PBMParameter* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_PBMParameter& getCopy (ASN1T_CMP_PBMParameter* pDstData = 0);
   ASN1T_CMP_PBMParameter* newCopy ();

   inline ASN1C_CMP_PBMParameter& operator= (ASN1C_CMP_PBMParameter& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_PBMParameter (OSCTXT* pctxt,
   ASN1T_CMP_PBMParameter *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_PBMParameter (OSCTXT* pctxt, 
   ASN1T_CMP_PBMParameter* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_PBMParameter 
   (const char* name, const ASN1T_CMP_PBMParameter* pvalue);

EXTERN int asn1PrtToStrm_CMP_PBMParameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PBMParameter* pvalue);

EXTERN ASN1T_CMP_PBMParameter* new_ASN1T_CMP_PBMParameter (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_PBMParameter (const char* name, 
   ASN1T_CMP_PBMParameter* pValue, ASN1T_CMP_PBMParameter* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_PBMParameter (OSCTXT* pctxt, 
   ASN1T_CMP_PBMParameter* pSrcValue, ASN1T_CMP_PBMParameter* pDstValue);

EXTERN void asn1Init_CMP_PBMParameter (ASN1T_CMP_PBMParameter* pvalue);

EXTERN void asn1Free_CMP_PBMParameter (OSCTXT *pctxt, ASN1T_CMP_PBMParameter* pvalue);

/**************************************************************/
/*                                                            */
/*  DHBMParameter                                             */
/*                                                            */
/**************************************************************/
/*
DHBMParameter ::= SEQUENCE {
   owf AlgorithmIdentifier,
   mac AlgorithmIdentifier
}
*/
#define TV_CMP_DHBMParameter	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_DHBMParameter;

struct EXTERN ASN1T_CMP_DHBMParameter : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier owf;
   ASN1T_EXP_AlgorithmIdentifier mac;
   ASN1T_CMP_DHBMParameter ();
   ASN1T_CMP_DHBMParameter (ASN1C_CMP_DHBMParameter& srcData);
   ~ASN1T_CMP_DHBMParameter ();
} ;

class EXTERN ASN1C_CMP_DHBMParameter :
public ASN1CType
{
protected:
   ASN1T_CMP_DHBMParameter& msgData;
public:
   ASN1C_CMP_DHBMParameter (ASN1T_CMP_DHBMParameter& data);
   ASN1C_CMP_DHBMParameter (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_DHBMParameter& data);
   ASN1C_CMP_DHBMParameter (OSRTContext &context, ASN1T_CMP_DHBMParameter& data
      );
   ASN1C_CMP_DHBMParameter (ASN1C_CMP_DHBMParameter& original);
   virtual ~ASN1C_CMP_DHBMParameter () {}
   inline ASN1T_CMP_DHBMParameter& getData () { return msgData; }
   inline const ASN1T_CMP_DHBMParameter& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DHBMParameter");
   int toStream (const char* name = "DHBMParameter");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_DHBMParameter* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_DHBMParameter& getCopy (ASN1T_CMP_DHBMParameter* pDstData = 0);
   ASN1T_CMP_DHBMParameter* newCopy ();

   inline ASN1C_CMP_DHBMParameter& operator= (ASN1C_CMP_DHBMParameter& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_DHBMParameter (OSCTXT* pctxt,
   ASN1T_CMP_DHBMParameter *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_DHBMParameter (OSCTXT* pctxt, 
   ASN1T_CMP_DHBMParameter* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_DHBMParameter 
   (const char* name, const ASN1T_CMP_DHBMParameter* pvalue);

EXTERN int asn1PrtToStrm_CMP_DHBMParameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_DHBMParameter* pvalue);

EXTERN ASN1T_CMP_DHBMParameter* new_ASN1T_CMP_DHBMParameter (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMP_DHBMParameter (const char* name, 
   ASN1T_CMP_DHBMParameter* pValue, ASN1T_CMP_DHBMParameter* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_DHBMParameter (OSCTXT* pctxt, 
   ASN1T_CMP_DHBMParameter* pSrcValue, ASN1T_CMP_DHBMParameter* pDstValue);

EXTERN void asn1Init_CMP_DHBMParameter (ASN1T_CMP_DHBMParameter* pvalue);

EXTERN void asn1Free_CMP_DHBMParameter (OSCTXT *pctxt, 
   ASN1T_CMP_DHBMParameter* pvalue);

/**************************************************************/
/*                                                            */
/*  OOBCertHash                                               */
/*                                                            */
/**************************************************************/
/*
OOBCertHash ::= SEQUENCE {
   hashAlg [0] AlgorithmIdentifier OPTIONAL,
   certId [1] CertId OPTIONAL,
   hashVal BIT STRING 
}
*/
#define TV_CMP_OOBCertHash	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMP_OOBCertHash;

struct EXTERN ASN1T_CMP_OOBCertHash : public ASN1TPDU {
   struct {
      unsigned hashAlgPresent : 1;
      unsigned certIdPresent : 1;
   } m;
   ASN1T_EXP_AlgorithmIdentifier hashAlg;
   ASN1T_CRMF_CertId certId;
   ASN1TDynBitStr hashVal;
   ASN1T_CMP_OOBCertHash ();
   ASN1T_CMP_OOBCertHash (ASN1C_CMP_OOBCertHash& srcData);
   ~ASN1T_CMP_OOBCertHash ();
} ;

class EXTERN ASN1C_CMP_OOBCertHash :
public ASN1CType
{
protected:
   ASN1T_CMP_OOBCertHash& msgData;
public:
   ASN1C_CMP_OOBCertHash (ASN1T_CMP_OOBCertHash& data);
   ASN1C_CMP_OOBCertHash (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMP_OOBCertHash& data);
   ASN1C_CMP_OOBCertHash (OSRTContext &context, ASN1T_CMP_OOBCertHash& data);
   ASN1C_CMP_OOBCertHash (ASN1C_CMP_OOBCertHash& original);
   virtual ~ASN1C_CMP_OOBCertHash () {}
   inline ASN1T_CMP_OOBCertHash& getData () { return msgData; }
   inline const ASN1T_CMP_OOBCertHash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OOBCertHash");
   int toStream (const char* name = "OOBCertHash");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMP_OOBCertHash* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMP_OOBCertHash& getCopy (ASN1T_CMP_OOBCertHash* pDstData = 0);
   ASN1T_CMP_OOBCertHash* newCopy ();

   inline ASN1C_CMP_OOBCertHash& operator= (ASN1C_CMP_OOBCertHash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMP_OOBCertHash (OSCTXT* pctxt,
   ASN1T_CMP_OOBCertHash *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMP_OOBCertHash (OSCTXT* pctxt, 
   ASN1T_CMP_OOBCertHash* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMP_OOBCertHash 
   (const char* name, const ASN1T_CMP_OOBCertHash* pvalue);

EXTERN int asn1PrtToStrm_CMP_OOBCertHash (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_OOBCertHash* pvalue);

EXTERN ASN1T_CMP_OOBCertHash* new_ASN1T_CMP_OOBCertHash (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMP_OOBCertHash (const char* name, 
   ASN1T_CMP_OOBCertHash* pValue, ASN1T_CMP_OOBCertHash* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMP_OOBCertHash (OSCTXT* pctxt, 
   ASN1T_CMP_OOBCertHash* pSrcValue, ASN1T_CMP_OOBCertHash* pDstValue);

EXTERN void asn1Init_CMP_OOBCertHash (ASN1T_CMP_OOBCertHash* pvalue);

EXTERN void asn1Free_CMP_OOBCertHash (OSCTXT *pctxt, ASN1T_CMP_OOBCertHash* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID CMP_id_PasswordBasedMac;
extern EXTERN ASN1OBJID CMP_id_HMAC_SHA1;
extern EXTERN ASN1OBJID CMP_id_DHBasedMac;

#endif
