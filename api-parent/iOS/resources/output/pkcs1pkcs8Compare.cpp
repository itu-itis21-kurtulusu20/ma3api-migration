/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkcs1pkcs8.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_PKCS18_PrivateKey (const char* name, 
   ASN1T_PKCS18_PrivateKey* pValue, ASN1T_PKCS18_PrivateKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS18_PrivateKey::Equals (ASN1T_PKCS18_PrivateKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS18_PrivateKey ("PrivateKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS18_EncryptedData (const char* name, 
   ASN1T_PKCS18_EncryptedData* pValue, ASN1T_PKCS18_EncryptedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS18_EncryptedData::Equals (ASN1T_PKCS18_EncryptedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS18_EncryptedData ("EncryptedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS18_PrivateKeyInfo (const char* name, 
   ASN1T_PKCS18_PrivateKeyInfo* pValue, 
   ASN1T_PKCS18_PrivateKeyInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_EXP_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".privateKeyAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->privateKeyAlgorithm, &pCmpValue->privateKeyAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".privateKey", 0, 0, 0);
   if (! asn1Compare_PKCS18_PrivateKey (namebuf, &pValue->privateKey, &pCmpValue->privateKey, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".attributes", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.attributesPresent,
   pCmpValue->m.attributesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.attributesPresent) 
   {
      if (! asn1Compare_PKCS10_Attributes (namebuf, &pValue->attributes, &pCmpValue->attributes, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS18_PrivateKeyInfo::Equals (ASN1T_PKCS18_PrivateKeyInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS18_PrivateKeyInfo ("PrivateKeyInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS18_EncryptedPrivateKeyInfo (const char* name, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pValue, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".encryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->encryptionAlgorithm, &pCmpValue->encryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedData", 0, 0, 0);
   if (! asn1Compare_PKCS18_EncryptedData (namebuf, &pValue->encryptedData, &pCmpValue->encryptedData, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS18_EncryptedPrivateKeyInfo::Equals (ASN1T_PKCS18_EncryptedPrivateKeyInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS18_EncryptedPrivateKeyInfo ("EncryptedPrivateKeyInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS18_RSAPublicKey (const char* name, 
   ASN1T_PKCS18_RSAPublicKey* pValue, ASN1T_PKCS18_RSAPublicKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".modulus", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->modulus, pCmpValue->modulus, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".publicExponent", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->publicExponent, pCmpValue->publicExponent, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS18_RSAPublicKey::Equals (ASN1T_PKCS18_RSAPublicKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS18_RSAPublicKey ("RSAPublicKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS18_RSAPrivateKey (const char* name, 
   ASN1T_PKCS18_RSAPrivateKey* pValue, ASN1T_PKCS18_RSAPrivateKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_EXP_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".modulus", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->modulus, pCmpValue->modulus, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".publicExponent", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->publicExponent, pCmpValue->publicExponent, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".privateExponent", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->privateExponent, pCmpValue->privateExponent, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".prime1", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->prime1, pCmpValue->prime1, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".prime2", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->prime2, pCmpValue->prime2, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".exponent1", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->exponent1, pCmpValue->exponent1, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".exponent2", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->exponent2, pCmpValue->exponent2, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".coefficient", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->coefficient, pCmpValue->coefficient, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS18_RSAPrivateKey::Equals (ASN1T_PKCS18_RSAPrivateKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS18_RSAPrivateKey ("RSAPrivateKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

