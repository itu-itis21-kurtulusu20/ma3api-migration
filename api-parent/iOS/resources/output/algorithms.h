/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#ifndef ALGORITHMS_H
#define ALGORITHMS_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "Explicit.h"

/**
 * Header file for ASN.1 module algorithms
 */
/**************************************************************/
/*                                                            */
/*  KEA_Parms_Id                                              */
/*                                                            */
/**************************************************************/
/*
KEA-Parms-Id ::= OCTET STRING
*/
#define TV_ALGOS_KEA_Parms_Id	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_ALGOS_KEA_Parms_Id;

class EXTERN ASN1C_ALGOS_KEA_Parms_Id :
public ASN1CType
{
protected:
   ASN1T_ALGOS_KEA_Parms_Id& msgData;
public:
   ASN1C_ALGOS_KEA_Parms_Id (ASN1T_ALGOS_KEA_Parms_Id& data);
   ASN1C_ALGOS_KEA_Parms_Id (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_KEA_Parms_Id& data);
   ASN1C_ALGOS_KEA_Parms_Id (OSRTContext &context
      , ASN1T_ALGOS_KEA_Parms_Id& data);
   ASN1C_ALGOS_KEA_Parms_Id (ASN1C_ALGOS_KEA_Parms_Id& original);
   virtual ~ASN1C_ALGOS_KEA_Parms_Id () {}
   inline ASN1T_ALGOS_KEA_Parms_Id& getData () { return msgData; }
   inline const ASN1T_ALGOS_KEA_Parms_Id& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KEA_Parms_Id");
   int toStream (const char* name = "KEA_Parms_Id");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_KEA_Parms_Id* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_KEA_Parms_Id& getCopy (ASN1T_ALGOS_KEA_Parms_Id* pDstData = 0);
   ASN1T_ALGOS_KEA_Parms_Id* newCopy ();

   inline ASN1C_ALGOS_KEA_Parms_Id& operator= (ASN1C_ALGOS_KEA_Parms_Id& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_KEA_Parms_Id (OSCTXT* pctxt,
   ASN1T_ALGOS_KEA_Parms_Id *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_KEA_Parms_Id (OSCTXT* pctxt, 
   ASN1T_ALGOS_KEA_Parms_Id* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_KEA_Parms_Id 
   (const char* name, const ASN1T_ALGOS_KEA_Parms_Id* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_KEA_Parms_Id (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_KEA_Parms_Id* pvalue);

EXTERN ASN1T_ALGOS_KEA_Parms_Id* 
   new_ASN1T_ALGOS_KEA_Parms_Id (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_KEA_Parms_Id (const char* name, 
   ASN1T_ALGOS_KEA_Parms_Id* pValue, ASN1T_ALGOS_KEA_Parms_Id* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_KEA_Parms_Id (OSCTXT* pctxt, 
   ASN1T_ALGOS_KEA_Parms_Id* pSrcValue, ASN1T_ALGOS_KEA_Parms_Id* pDstValue);

EXTERN void asn1Init_ALGOS_KEA_Parms_Id (ASN1T_ALGOS_KEA_Parms_Id* pvalue);

EXTERN void asn1Free_ALGOS_KEA_Parms_Id (OSCTXT *pctxt, 
   ASN1T_ALGOS_KEA_Parms_Id* pvalue);

/**************************************************************/
/*                                                            */
/*  Prime_p                                                   */
/*                                                            */
/**************************************************************/
/*
Prime-p ::= INTEGER
*/
#define TV_ALGOS_Prime_p	(TM_UNIV|TM_PRIM|2)

typedef OSINT32 ASN1T_ALGOS_Prime_p;

class EXTERN ASN1C_ALGOS_Prime_p :
public ASN1CType
{
protected:
   ASN1T_ALGOS_Prime_p& msgData;
public:
   ASN1C_ALGOS_Prime_p (ASN1T_ALGOS_Prime_p& data);
   ASN1C_ALGOS_Prime_p (OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_Prime_p& data);
   ASN1C_ALGOS_Prime_p (OSRTContext &context, ASN1T_ALGOS_Prime_p& data);
   virtual ~ASN1C_ALGOS_Prime_p () {}
   inline ASN1T_ALGOS_Prime_p& getData () { return msgData; }
   inline const ASN1T_ALGOS_Prime_p& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Prime_p");
   int toStream (const char* name = "Prime_p");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_Prime_p* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_ALGOS_Prime_p (OSCTXT* pctxt,
   ASN1T_ALGOS_Prime_p *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_Prime_p (OSCTXT* pctxt, ASN1T_ALGOS_Prime_p* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_Prime_p 
   (const char* name, const ASN1T_ALGOS_Prime_p* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_Prime_p (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Prime_p* pvalue);

EXTERN ASN1T_ALGOS_Prime_p* new_ASN1T_ALGOS_Prime_p (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_Prime_p (const char* name, 
   ASN1T_ALGOS_Prime_p* pValue, ASN1T_ALGOS_Prime_p* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  Trinomial                                                 */
/*                                                            */
/**************************************************************/
/*
 Trinomial basis representation of F2^m
 Integer k for reduction polynomial xm + xk + 1


Trinomial ::= INTEGER
*/
#define TV_ALGOS_Trinomial	(TM_UNIV|TM_PRIM|2)

typedef OSINT32 ASN1T_ALGOS_Trinomial;

class EXTERN ASN1C_ALGOS_Trinomial :
public ASN1CType
{
protected:
   ASN1T_ALGOS_Trinomial& msgData;
public:
   ASN1C_ALGOS_Trinomial (ASN1T_ALGOS_Trinomial& data);
   ASN1C_ALGOS_Trinomial (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_Trinomial& data);
   ASN1C_ALGOS_Trinomial (OSRTContext &context, ASN1T_ALGOS_Trinomial& data);
   virtual ~ASN1C_ALGOS_Trinomial () {}
   inline ASN1T_ALGOS_Trinomial& getData () { return msgData; }
   inline const ASN1T_ALGOS_Trinomial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Trinomial");
   int toStream (const char* name = "Trinomial");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_Trinomial* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_ALGOS_Trinomial (OSCTXT* pctxt,
   ASN1T_ALGOS_Trinomial *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_Trinomial (OSCTXT* pctxt, 
   ASN1T_ALGOS_Trinomial* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_Trinomial 
   (const char* name, const ASN1T_ALGOS_Trinomial* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_Trinomial (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Trinomial* pvalue);

EXTERN ASN1T_ALGOS_Trinomial* new_ASN1T_ALGOS_Trinomial (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_Trinomial (const char* name, 
   ASN1T_ALGOS_Trinomial* pValue, ASN1T_ALGOS_Trinomial* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  FieldElement                                              */
/*                                                            */
/**************************************************************/
/*
 The object identifiers gnBasis, tpBasis and ppBasis name
 three kinds of basis for characteristic-two finite fields

FieldElement ::= OCTET STRING
*/
#define TV_ALGOS_FieldElement	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_ALGOS_FieldElement;

class EXTERN ASN1C_ALGOS_FieldElement :
public ASN1CType
{
protected:
   ASN1T_ALGOS_FieldElement& msgData;
public:
   ASN1C_ALGOS_FieldElement (ASN1T_ALGOS_FieldElement& data);
   ASN1C_ALGOS_FieldElement (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_FieldElement& data);
   ASN1C_ALGOS_FieldElement (OSRTContext &context
      , ASN1T_ALGOS_FieldElement& data);
   ASN1C_ALGOS_FieldElement (ASN1C_ALGOS_FieldElement& original);
   virtual ~ASN1C_ALGOS_FieldElement () {}
   inline ASN1T_ALGOS_FieldElement& getData () { return msgData; }
   inline const ASN1T_ALGOS_FieldElement& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "FieldElement");
   int toStream (const char* name = "FieldElement");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_FieldElement* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_FieldElement& getCopy (ASN1T_ALGOS_FieldElement* pDstData = 0);
   ASN1T_ALGOS_FieldElement* newCopy ();

   inline ASN1C_ALGOS_FieldElement& operator= (ASN1C_ALGOS_FieldElement& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_FieldElement (OSCTXT* pctxt,
   ASN1T_ALGOS_FieldElement *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_FieldElement (OSCTXT* pctxt, 
   ASN1T_ALGOS_FieldElement* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_FieldElement 
   (const char* name, const ASN1T_ALGOS_FieldElement* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_FieldElement (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_FieldElement* pvalue);

EXTERN ASN1T_ALGOS_FieldElement* 
   new_ASN1T_ALGOS_FieldElement (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_FieldElement (const char* name, 
   ASN1T_ALGOS_FieldElement* pValue, ASN1T_ALGOS_FieldElement* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_FieldElement (OSCTXT* pctxt, 
   ASN1T_ALGOS_FieldElement* pSrcValue, ASN1T_ALGOS_FieldElement* pDstValue);

EXTERN void asn1Init_ALGOS_FieldElement (ASN1T_ALGOS_FieldElement* pvalue);

EXTERN void asn1Free_ALGOS_FieldElement (OSCTXT *pctxt, 
   ASN1T_ALGOS_FieldElement* pvalue);

/**************************************************************/
/*                                                            */
/*  ECPoint                                                   */
/*                                                            */
/**************************************************************/
/*
 Finite field element

ECPoint ::= OCTET STRING
*/
#define TV_ALGOS_ECPoint	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_ALGOS_ECPoint;

class EXTERN ASN1C_ALGOS_ECPoint :
public ASN1CType
{
protected:
   ASN1T_ALGOS_ECPoint& msgData;
public:
   ASN1C_ALGOS_ECPoint (ASN1T_ALGOS_ECPoint& data);
   ASN1C_ALGOS_ECPoint (OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_ECPoint& data);
   ASN1C_ALGOS_ECPoint (OSRTContext &context, ASN1T_ALGOS_ECPoint& data);
   ASN1C_ALGOS_ECPoint (ASN1C_ALGOS_ECPoint& original);
   virtual ~ASN1C_ALGOS_ECPoint () {}
   inline ASN1T_ALGOS_ECPoint& getData () { return msgData; }
   inline const ASN1T_ALGOS_ECPoint& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ECPoint");
   int toStream (const char* name = "ECPoint");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_ECPoint* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_ECPoint& getCopy (ASN1T_ALGOS_ECPoint* pDstData = 0);
   ASN1T_ALGOS_ECPoint* newCopy ();

   inline ASN1C_ALGOS_ECPoint& operator= (ASN1C_ALGOS_ECPoint& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_ECPoint (OSCTXT* pctxt,
   ASN1T_ALGOS_ECPoint *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_ECPoint (OSCTXT* pctxt, ASN1T_ALGOS_ECPoint* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_ECPoint 
   (const char* name, const ASN1T_ALGOS_ECPoint* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_ECPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECPoint* pvalue);

EXTERN ASN1T_ALGOS_ECPoint* new_ASN1T_ALGOS_ECPoint (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_ECPoint (const char* name, 
   ASN1T_ALGOS_ECPoint* pValue, ASN1T_ALGOS_ECPoint* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_ECPoint (OSCTXT* pctxt, ASN1T_ALGOS_ECPoint* pSrcValue, 
   ASN1T_ALGOS_ECPoint* pDstValue);

EXTERN void asn1Init_ALGOS_ECPoint (ASN1T_ALGOS_ECPoint* pvalue);

EXTERN void asn1Free_ALGOS_ECPoint (OSCTXT *pctxt, ASN1T_ALGOS_ECPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  HashAlgorithm                                             */
/*                                                            */
/**************************************************************/
/*
HashAlgorithm ::= AlgorithmIdentifier
*/
#define TV_ALGOS_HashAlgorithm	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_HashAlgorithm;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_ALGOS_HashAlgorithm;

class EXTERN ASN1C_ALGOS_HashAlgorithm :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_ALGOS_HashAlgorithm (ASN1T_ALGOS_HashAlgorithm& data);
   ASN1C_ALGOS_HashAlgorithm (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_HashAlgorithm& data);
   ASN1C_ALGOS_HashAlgorithm (OSRTContext &context
      , ASN1T_ALGOS_HashAlgorithm& data);
   ASN1C_ALGOS_HashAlgorithm (ASN1C_ALGOS_HashAlgorithm& original);
   virtual ~ASN1C_ALGOS_HashAlgorithm () {}
   inline ASN1T_ALGOS_HashAlgorithm& getData () { return msgData; }
   inline const ASN1T_ALGOS_HashAlgorithm& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "HashAlgorithm");
   int toStream (const char* name = "HashAlgorithm");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_HashAlgorithm* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_HashAlgorithm& getCopy (ASN1T_ALGOS_HashAlgorithm* pDstData = 0);
   ASN1T_ALGOS_HashAlgorithm* newCopy ();

   inline ASN1C_ALGOS_HashAlgorithm& operator= (ASN1C_ALGOS_HashAlgorithm& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_HashAlgorithm (OSCTXT* pctxt,
   ASN1T_ALGOS_HashAlgorithm *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_HashAlgorithm (OSCTXT* pctxt, 
   ASN1T_ALGOS_HashAlgorithm* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_HashAlgorithm 
   (const char* name, const ASN1T_ALGOS_HashAlgorithm* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_HashAlgorithm (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_HashAlgorithm* pvalue);

EXTERN ASN1T_ALGOS_HashAlgorithm* 
   new_ASN1T_ALGOS_HashAlgorithm (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_HashAlgorithm (const char* name, 
   ASN1T_ALGOS_HashAlgorithm* pValue, ASN1T_ALGOS_HashAlgorithm* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_HashAlgorithm (OSCTXT* pctxt, 
   ASN1T_ALGOS_HashAlgorithm* pSrcValue, ASN1T_ALGOS_HashAlgorithm* pDstValue);

EXTERN void asn1Init_ALGOS_HashAlgorithm (ASN1T_ALGOS_HashAlgorithm* pvalue);

EXTERN void asn1Free_ALGOS_HashAlgorithm (OSCTXT *pctxt, 
   ASN1T_ALGOS_HashAlgorithm* pvalue);

/**************************************************************/
/*                                                            */
/*  SpecifiedECDomainVersion                                  */
/*                                                            */
/**************************************************************/
/*
SpecifiedECDomainVersion ::= INTEGER { ecdpVer1(1), ecdpVer2(2), ecdpVer3(3) }
*/
#define TV_ALGOS_SpecifiedECDomainVersion	(TM_UNIV|TM_PRIM|2)

struct EXTERN ALGOS_SpecifiedECDomainVersion {
   enum Root {
      ecdpVer1 = 1,
      ecdpVer2 = 2,
      ecdpVer3 = 3
   } ;
} ;

typedef OSINT32 ASN1T_ALGOS_SpecifiedECDomainVersion;

class EXTERN ASN1C_ALGOS_SpecifiedECDomainVersion :
public ASN1CType
{
protected:
   ASN1T_ALGOS_SpecifiedECDomainVersion& msgData;
public:
   ASN1C_ALGOS_SpecifiedECDomainVersion
       (ASN1T_ALGOS_SpecifiedECDomainVersion& data);
   ASN1C_ALGOS_SpecifiedECDomainVersion (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_SpecifiedECDomainVersion& data);
   ASN1C_ALGOS_SpecifiedECDomainVersion (OSRTContext &context
      , ASN1T_ALGOS_SpecifiedECDomainVersion& data);
   virtual ~ASN1C_ALGOS_SpecifiedECDomainVersion () {}
   inline ASN1T_ALGOS_SpecifiedECDomainVersion& getData () { return msgData; }
   inline const ASN1T_ALGOS_SpecifiedECDomainVersion& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SpecifiedECDomainVersion");
   int toStream (const char* name = "SpecifiedECDomainVersion");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_SpecifiedECDomainVersion* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_ALGOS_SpecifiedECDomainVersion (OSCTXT* pctxt,
   ASN1T_ALGOS_SpecifiedECDomainVersion *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_SpecifiedECDomainVersion (OSCTXT* pctxt, 
   ASN1T_ALGOS_SpecifiedECDomainVersion* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ALGOS_SpecifiedECDomainVersion 
   (const char* name, const ASN1T_ALGOS_SpecifiedECDomainVersion* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_SpecifiedECDomainVersion (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_SpecifiedECDomainVersion* pvalue);

EXTERN ASN1T_ALGOS_SpecifiedECDomainVersion* 
   new_ASN1T_ALGOS_SpecifiedECDomainVersion (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_SpecifiedECDomainVersion (const char* name, 
   ASN1T_ALGOS_SpecifiedECDomainVersion* pValue, 
   ASN1T_ALGOS_SpecifiedECDomainVersion* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  ECPVer                                                    */
/*                                                            */
/**************************************************************/
/*
ECPVer ::= INTEGER { ecpVer1(1) }
*/
#define TV_ALGOS_ECPVer	(TM_UNIV|TM_PRIM|2)

struct EXTERN ALGOS_ECPVer {
   enum Root {
      ecpVer1 = 1
   } ;
} ;

typedef OSINT32 ASN1T_ALGOS_ECPVer;

class EXTERN ASN1C_ALGOS_ECPVer :
public ASN1CType
{
protected:
   ASN1T_ALGOS_ECPVer& msgData;
public:
   ASN1C_ALGOS_ECPVer (ASN1T_ALGOS_ECPVer& data);
   ASN1C_ALGOS_ECPVer (OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_ECPVer& data);
   ASN1C_ALGOS_ECPVer (OSRTContext &context, ASN1T_ALGOS_ECPVer& data);
   virtual ~ASN1C_ALGOS_ECPVer () {}
   inline ASN1T_ALGOS_ECPVer& getData () { return msgData; }
   inline const ASN1T_ALGOS_ECPVer& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ECPVer");
   int toStream (const char* name = "ECPVer");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_ECPVer* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_ALGOS_ECPVer (OSCTXT* pctxt,
   ASN1T_ALGOS_ECPVer *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_ECPVer (OSCTXT* pctxt, ASN1T_ALGOS_ECPVer* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_ECPVer 
   (const char* name, const ASN1T_ALGOS_ECPVer* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_ECPVer (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECPVer* pvalue);

EXTERN ASN1T_ALGOS_ECPVer* new_ASN1T_ALGOS_ECPVer (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_ECPVer (const char* name, ASN1T_ALGOS_ECPVer* pValue, 
   ASN1T_ALGOS_ECPVer* pCmpValue, char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  ECPrivateKey_version                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ECPrivateKey'
*/
struct EXTERN ALGOS_ECPrivateKey_version {
   enum Root {
      ecPrivkeyVer1 = 1
   } ;
} ;

typedef OSUINT8 ASN1T_ALGOS_ECPrivateKey_version;

class EXTERN ASN1C_ALGOS_ECPrivateKey_version :
public ASN1CType
{
protected:
   ASN1T_ALGOS_ECPrivateKey_version& msgData;
public:
   ASN1C_ALGOS_ECPrivateKey_version (ASN1T_ALGOS_ECPrivateKey_version& data);
   ASN1C_ALGOS_ECPrivateKey_version (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_ECPrivateKey_version& data);
   ASN1C_ALGOS_ECPrivateKey_version (OSRTContext &context
      , ASN1T_ALGOS_ECPrivateKey_version& data);
   virtual ~ASN1C_ALGOS_ECPrivateKey_version () {}
   inline ASN1T_ALGOS_ECPrivateKey_version& getData () { return msgData; }
   inline const ASN1T_ALGOS_ECPrivateKey_version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ECPrivateKey_version");
   int toStream (const char* name = "ECPrivateKey_version");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_ECPrivateKey_version* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_ALGOS_ECPrivateKey_version (OSCTXT* pctxt,
   ASN1T_ALGOS_ECPrivateKey_version *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_ECPrivateKey_version (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECPrivateKey_version* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_ECPrivateKey_version 
   (const char* name, const ASN1T_ALGOS_ECPrivateKey_version* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_ECPrivateKey_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECPrivateKey_version* pvalue);

EXTERN ASN1T_ALGOS_ECPrivateKey_version* 
   new_ASN1T_ALGOS_ECPrivateKey_version (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_ECPrivateKey_version (const char* name, 
   ASN1T_ALGOS_ECPrivateKey_version* pValue, 
   ASN1T_ALGOS_ECPrivateKey_version* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  Dss_Parms                                                 */
/*                                                            */
/**************************************************************/
/*
 encoding for DSA public key

Dss-Parms ::= SEQUENCE {
   p INTEGER,
   q INTEGER,
   g INTEGER
}
*/
#define TV_ALGOS_Dss_Parms	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_Dss_Parms;

struct EXTERN ASN1T_ALGOS_Dss_Parms : public ASN1TPDU {
   OSINT32 p;
   OSINT32 q;
   OSINT32 g;
   ASN1T_ALGOS_Dss_Parms ();
   ASN1T_ALGOS_Dss_Parms (ASN1C_ALGOS_Dss_Parms& srcData);
} ;

class EXTERN ASN1C_ALGOS_Dss_Parms :
public ASN1CType
{
protected:
   ASN1T_ALGOS_Dss_Parms& msgData;
public:
   ASN1C_ALGOS_Dss_Parms (ASN1T_ALGOS_Dss_Parms& data);
   ASN1C_ALGOS_Dss_Parms (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_Dss_Parms& data);
   ASN1C_ALGOS_Dss_Parms (OSRTContext &context, ASN1T_ALGOS_Dss_Parms& data);
   ASN1C_ALGOS_Dss_Parms (ASN1C_ALGOS_Dss_Parms& original);
   virtual ~ASN1C_ALGOS_Dss_Parms () {}
   inline ASN1T_ALGOS_Dss_Parms& getData () { return msgData; }
   inline const ASN1T_ALGOS_Dss_Parms& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Dss_Parms");
   int toStream (const char* name = "Dss_Parms");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_Dss_Parms* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_Dss_Parms& getCopy (ASN1T_ALGOS_Dss_Parms* pDstData = 0);
   ASN1T_ALGOS_Dss_Parms* newCopy ();

   inline ASN1C_ALGOS_Dss_Parms& operator= (ASN1C_ALGOS_Dss_Parms& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_Dss_Parms (OSCTXT* pctxt,
   ASN1T_ALGOS_Dss_Parms *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_Dss_Parms (OSCTXT* pctxt, 
   ASN1T_ALGOS_Dss_Parms* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_Dss_Parms 
   (const char* name, const ASN1T_ALGOS_Dss_Parms* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_Dss_Parms (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Dss_Parms* pvalue);

EXTERN ASN1T_ALGOS_Dss_Parms* new_ASN1T_ALGOS_Dss_Parms (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_Dss_Parms (const char* name, 
   ASN1T_ALGOS_Dss_Parms* pValue, ASN1T_ALGOS_Dss_Parms* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_Dss_Parms (OSCTXT* pctxt, 
   ASN1T_ALGOS_Dss_Parms* pSrcValue, ASN1T_ALGOS_Dss_Parms* pDstValue);

/**************************************************************/
/*                                                            */
/*  DssSigValue                                               */
/*                                                            */
/**************************************************************/
/*
 encoding for DSA signature generated with SHA-1 hash

DssSigValue ::= SEQUENCE {
   r INTEGER,
   s INTEGER
}
*/
#define TV_ALGOS_DssSigValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_DssSigValue;

struct EXTERN ASN1T_ALGOS_DssSigValue : public ASN1TPDU {
   const char* r;
   const char* s;
   ASN1T_ALGOS_DssSigValue ();
   ASN1T_ALGOS_DssSigValue (ASN1C_ALGOS_DssSigValue& srcData);
} ;

class EXTERN ASN1C_ALGOS_DssSigValue :
public ASN1CType
{
protected:
   ASN1T_ALGOS_DssSigValue& msgData;
public:
   ASN1C_ALGOS_DssSigValue (ASN1T_ALGOS_DssSigValue& data);
   ASN1C_ALGOS_DssSigValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_DssSigValue& data);
   ASN1C_ALGOS_DssSigValue (OSRTContext &context, ASN1T_ALGOS_DssSigValue& data
      );
   ASN1C_ALGOS_DssSigValue (ASN1C_ALGOS_DssSigValue& original);
   virtual ~ASN1C_ALGOS_DssSigValue () {}
   inline ASN1T_ALGOS_DssSigValue& getData () { return msgData; }
   inline const ASN1T_ALGOS_DssSigValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DssSigValue");
   int toStream (const char* name = "DssSigValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_DssSigValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_DssSigValue& getCopy (ASN1T_ALGOS_DssSigValue* pDstData = 0);
   ASN1T_ALGOS_DssSigValue* newCopy ();

   inline ASN1C_ALGOS_DssSigValue& operator= (ASN1C_ALGOS_DssSigValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_DssSigValue (OSCTXT* pctxt,
   ASN1T_ALGOS_DssSigValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_DssSigValue (OSCTXT* pctxt, 
   ASN1T_ALGOS_DssSigValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_DssSigValue 
   (const char* name, const ASN1T_ALGOS_DssSigValue* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_DssSigValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_DssSigValue* pvalue);

EXTERN ASN1T_ALGOS_DssSigValue* new_ASN1T_ALGOS_DssSigValue (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_ALGOS_DssSigValue (const char* name, 
   ASN1T_ALGOS_DssSigValue* pValue, ASN1T_ALGOS_DssSigValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_DssSigValue (OSCTXT* pctxt, 
   ASN1T_ALGOS_DssSigValue* pSrcValue, ASN1T_ALGOS_DssSigValue* pDstValue);

/**************************************************************/
/*                                                            */
/*  ValidationParms                                           */
/*                                                            */
/**************************************************************/
/*
ValidationParms ::= SEQUENCE {
   seed BIT STRING ,
   pgenCounter INTEGER
}
*/
#define TV_ALGOS_ValidationParms	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_ValidationParms;

struct EXTERN ASN1T_ALGOS_ValidationParms : public ASN1TPDU {
   ASN1TDynBitStr seed;
   OSINT32 pgenCounter;
   ASN1T_ALGOS_ValidationParms ();
   ASN1T_ALGOS_ValidationParms (ASN1C_ALGOS_ValidationParms& srcData);
   ~ASN1T_ALGOS_ValidationParms ();
} ;

class EXTERN ASN1C_ALGOS_ValidationParms :
public ASN1CType
{
protected:
   ASN1T_ALGOS_ValidationParms& msgData;
public:
   ASN1C_ALGOS_ValidationParms (ASN1T_ALGOS_ValidationParms& data);
   ASN1C_ALGOS_ValidationParms (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_ValidationParms& data);
   ASN1C_ALGOS_ValidationParms (OSRTContext &context
      , ASN1T_ALGOS_ValidationParms& data);
   ASN1C_ALGOS_ValidationParms (ASN1C_ALGOS_ValidationParms& original);
   virtual ~ASN1C_ALGOS_ValidationParms () {}
   inline ASN1T_ALGOS_ValidationParms& getData () { return msgData; }
   inline const ASN1T_ALGOS_ValidationParms& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ValidationParms");
   int toStream (const char* name = "ValidationParms");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_ValidationParms* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_ValidationParms& getCopy (ASN1T_ALGOS_ValidationParms* pDstData = 0);
   ASN1T_ALGOS_ValidationParms* newCopy ();

   inline ASN1C_ALGOS_ValidationParms& operator= (ASN1C_ALGOS_ValidationParms& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_ValidationParms (OSCTXT* pctxt,
   ASN1T_ALGOS_ValidationParms *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_ValidationParms (OSCTXT* pctxt, 
   ASN1T_ALGOS_ValidationParms* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_ValidationParms 
   (const char* name, const ASN1T_ALGOS_ValidationParms* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_ValidationParms (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ValidationParms* pvalue);

EXTERN ASN1T_ALGOS_ValidationParms* 
   new_ASN1T_ALGOS_ValidationParms (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_ValidationParms (const char* name, 
   ASN1T_ALGOS_ValidationParms* pValue, 
   ASN1T_ALGOS_ValidationParms* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_ValidationParms (OSCTXT* pctxt, 
   ASN1T_ALGOS_ValidationParms* pSrcValue, ASN1T_ALGOS_ValidationParms*
    pDstValue);

EXTERN void asn1Init_ALGOS_ValidationParms (ASN1T_ALGOS_ValidationParms* pvalue);

EXTERN void asn1Free_ALGOS_ValidationParms (OSCTXT *pctxt, 
   ASN1T_ALGOS_ValidationParms* pvalue);

/**************************************************************/
/*                                                            */
/*  DomainParameters                                          */
/*                                                            */
/**************************************************************/
/*
DomainParameters ::= SEQUENCE {
   p INTEGER,
   g INTEGER,
   q INTEGER,
   j INTEGER OPTIONAL,
   validationParms ValidationParms OPTIONAL
}
*/
#define TV_ALGOS_DomainParameters	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_DomainParameters;

struct EXTERN ASN1T_ALGOS_DomainParameters : public ASN1TPDU {
   struct {
      unsigned jPresent : 1;
      unsigned validationParmsPresent : 1;
   } m;
   OSINT32 p;
   OSINT32 g;
   OSINT32 q;
   OSINT32 j;
   ASN1T_ALGOS_ValidationParms validationParms;
   ASN1T_ALGOS_DomainParameters ();
   ASN1T_ALGOS_DomainParameters (ASN1C_ALGOS_DomainParameters& srcData);
   ~ASN1T_ALGOS_DomainParameters ();
} ;

class EXTERN ASN1C_ALGOS_DomainParameters :
public ASN1CType
{
protected:
   ASN1T_ALGOS_DomainParameters& msgData;
public:
   ASN1C_ALGOS_DomainParameters (ASN1T_ALGOS_DomainParameters& data);
   ASN1C_ALGOS_DomainParameters (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_DomainParameters& data);
   ASN1C_ALGOS_DomainParameters (OSRTContext &context
      , ASN1T_ALGOS_DomainParameters& data);
   ASN1C_ALGOS_DomainParameters (ASN1C_ALGOS_DomainParameters& original);
   virtual ~ASN1C_ALGOS_DomainParameters () {}
   inline ASN1T_ALGOS_DomainParameters& getData () { return msgData; }
   inline const ASN1T_ALGOS_DomainParameters& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DomainParameters");
   int toStream (const char* name = "DomainParameters");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_DomainParameters* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_DomainParameters& getCopy (ASN1T_ALGOS_DomainParameters* pDstData = 0);
   ASN1T_ALGOS_DomainParameters* newCopy ();

   inline ASN1C_ALGOS_DomainParameters& operator= (ASN1C_ALGOS_DomainParameters& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_DomainParameters (OSCTXT* pctxt,
   ASN1T_ALGOS_DomainParameters *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_DomainParameters (OSCTXT* pctxt, 
   ASN1T_ALGOS_DomainParameters* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_DomainParameters 
   (const char* name, const ASN1T_ALGOS_DomainParameters* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_DomainParameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_DomainParameters* pvalue);

EXTERN ASN1T_ALGOS_DomainParameters* 
   new_ASN1T_ALGOS_DomainParameters (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_DomainParameters (const char* name, 
   ASN1T_ALGOS_DomainParameters* pValue, 
   ASN1T_ALGOS_DomainParameters* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_DomainParameters (OSCTXT* pctxt, 
   ASN1T_ALGOS_DomainParameters* pSrcValue, ASN1T_ALGOS_DomainParameters*
    pDstValue);

EXTERN void asn1Init_ALGOS_DomainParameters (ASN1T_ALGOS_DomainParameters* pvalue);

EXTERN void asn1Free_ALGOS_DomainParameters (OSCTXT *pctxt, 
   ASN1T_ALGOS_DomainParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  FieldID                                                   */
/*                                                            */
/**************************************************************/
/*
FieldID ::= SEQUENCE {
   fieldType OBJECT IDENTIFIER,
   parameters ANY
}
*/
#define TV_ALGOS_FieldID	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_FieldID;

struct EXTERN ASN1T_ALGOS_FieldID : public ASN1TPDU {
   ASN1TObjId fieldType;
   ASN1TOpenType parameters;
   ASN1T_ALGOS_FieldID ();
   ASN1T_ALGOS_FieldID (ASN1C_ALGOS_FieldID& srcData);
   ~ASN1T_ALGOS_FieldID ();
} ;

class EXTERN ASN1C_ALGOS_FieldID :
public ASN1CType
{
protected:
   ASN1T_ALGOS_FieldID& msgData;
public:
   ASN1C_ALGOS_FieldID (ASN1T_ALGOS_FieldID& data);
   ASN1C_ALGOS_FieldID (OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_FieldID& data);
   ASN1C_ALGOS_FieldID (OSRTContext &context, ASN1T_ALGOS_FieldID& data);
   ASN1C_ALGOS_FieldID (ASN1C_ALGOS_FieldID& original);
   virtual ~ASN1C_ALGOS_FieldID () {}
   inline ASN1T_ALGOS_FieldID& getData () { return msgData; }
   inline const ASN1T_ALGOS_FieldID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "FieldID");
   int toStream (const char* name = "FieldID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_FieldID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_FieldID& getCopy (ASN1T_ALGOS_FieldID* pDstData = 0);
   ASN1T_ALGOS_FieldID* newCopy ();

   inline ASN1C_ALGOS_FieldID& operator= (ASN1C_ALGOS_FieldID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_FieldID (OSCTXT* pctxt,
   ASN1T_ALGOS_FieldID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_FieldID (OSCTXT* pctxt, ASN1T_ALGOS_FieldID* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_FieldID 
   (const char* name, const ASN1T_ALGOS_FieldID* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_FieldID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_FieldID* pvalue);

EXTERN ASN1T_ALGOS_FieldID* new_ASN1T_ALGOS_FieldID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_FieldID (const char* name, 
   ASN1T_ALGOS_FieldID* pValue, ASN1T_ALGOS_FieldID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_FieldID (OSCTXT* pctxt, ASN1T_ALGOS_FieldID* pSrcValue, 
   ASN1T_ALGOS_FieldID* pDstValue);

EXTERN void asn1Init_ALGOS_FieldID (ASN1T_ALGOS_FieldID* pvalue);

EXTERN void asn1Free_ALGOS_FieldID (OSCTXT *pctxt, ASN1T_ALGOS_FieldID* pvalue);

/**************************************************************/
/*                                                            */
/*  ECDSASigValue                                             */
/*                                                            */
/**************************************************************/
/*
 OID for an elliptic curve signature
 format for the value of an ECDSA signature value

ECDSASigValue ::= SEQUENCE {
   r INTEGER,
   s INTEGER
}
*/
#define TV_ALGOS_ECDSASigValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_ECDSASigValue;

struct EXTERN ASN1T_ALGOS_ECDSASigValue : public ASN1TPDU {
   const char* r;
   const char* s;
   ASN1T_ALGOS_ECDSASigValue ();
   ASN1T_ALGOS_ECDSASigValue (ASN1C_ALGOS_ECDSASigValue& srcData);
} ;

class EXTERN ASN1C_ALGOS_ECDSASigValue :
public ASN1CType
{
protected:
   ASN1T_ALGOS_ECDSASigValue& msgData;
public:
   ASN1C_ALGOS_ECDSASigValue (ASN1T_ALGOS_ECDSASigValue& data);
   ASN1C_ALGOS_ECDSASigValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_ECDSASigValue& data);
   ASN1C_ALGOS_ECDSASigValue (OSRTContext &context
      , ASN1T_ALGOS_ECDSASigValue& data);
   ASN1C_ALGOS_ECDSASigValue (ASN1C_ALGOS_ECDSASigValue& original);
   virtual ~ASN1C_ALGOS_ECDSASigValue () {}
   inline ASN1T_ALGOS_ECDSASigValue& getData () { return msgData; }
   inline const ASN1T_ALGOS_ECDSASigValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ECDSASigValue");
   int toStream (const char* name = "ECDSASigValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_ECDSASigValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_ECDSASigValue& getCopy (ASN1T_ALGOS_ECDSASigValue* pDstData = 0);
   ASN1T_ALGOS_ECDSASigValue* newCopy ();

   inline ASN1C_ALGOS_ECDSASigValue& operator= (ASN1C_ALGOS_ECDSASigValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_ECDSASigValue (OSCTXT* pctxt,
   ASN1T_ALGOS_ECDSASigValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_ECDSASigValue (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECDSASigValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_ECDSASigValue 
   (const char* name, const ASN1T_ALGOS_ECDSASigValue* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_ECDSASigValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECDSASigValue* pvalue);

EXTERN ASN1T_ALGOS_ECDSASigValue* 
   new_ASN1T_ALGOS_ECDSASigValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_ECDSASigValue (const char* name, 
   ASN1T_ALGOS_ECDSASigValue* pValue, ASN1T_ALGOS_ECDSASigValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_ECDSASigValue (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECDSASigValue* pSrcValue, ASN1T_ALGOS_ECDSASigValue* pDstValue);

/**************************************************************/
/*                                                            */
/*  Characteristic_two                                        */
/*                                                            */
/**************************************************************/
/*
Characteristic-two ::= SEQUENCE {
   m INTEGER,
   basis OBJECT IDENTIFIER,
   parameters ANY
}
*/
#define TV_ALGOS_Characteristic_two	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_Characteristic_two;

struct EXTERN ASN1T_ALGOS_Characteristic_two : public ASN1TPDU {
   OSINT32 m_;
   ASN1TObjId basis;
   ASN1TOpenType parameters;
   ASN1T_ALGOS_Characteristic_two ();
   ASN1T_ALGOS_Characteristic_two (ASN1C_ALGOS_Characteristic_two& srcData);
   ~ASN1T_ALGOS_Characteristic_two ();
} ;

class EXTERN ASN1C_ALGOS_Characteristic_two :
public ASN1CType
{
protected:
   ASN1T_ALGOS_Characteristic_two& msgData;
public:
   ASN1C_ALGOS_Characteristic_two (ASN1T_ALGOS_Characteristic_two& data);
   ASN1C_ALGOS_Characteristic_two (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_Characteristic_two& data);
   ASN1C_ALGOS_Characteristic_two (OSRTContext &context
      , ASN1T_ALGOS_Characteristic_two& data);
   ASN1C_ALGOS_Characteristic_two (ASN1C_ALGOS_Characteristic_two& original);
   virtual ~ASN1C_ALGOS_Characteristic_two () {}
   inline ASN1T_ALGOS_Characteristic_two& getData () { return msgData; }
   inline const ASN1T_ALGOS_Characteristic_two& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Characteristic_two");
   int toStream (const char* name = "Characteristic_two");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_Characteristic_two* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_Characteristic_two& getCopy (ASN1T_ALGOS_Characteristic_two* pDstData = 0);
   ASN1T_ALGOS_Characteristic_two* newCopy ();

   inline ASN1C_ALGOS_Characteristic_two& operator= (ASN1C_ALGOS_Characteristic_two& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_Characteristic_two (OSCTXT* pctxt,
   ASN1T_ALGOS_Characteristic_two *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_Characteristic_two (OSCTXT* pctxt, 
   ASN1T_ALGOS_Characteristic_two* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_Characteristic_two 
   (const char* name, const ASN1T_ALGOS_Characteristic_two* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_Characteristic_two (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Characteristic_two* pvalue);

EXTERN ASN1T_ALGOS_Characteristic_two* 
   new_ASN1T_ALGOS_Characteristic_two (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_Characteristic_two (const char* name, 
   ASN1T_ALGOS_Characteristic_two* pValue, 
   ASN1T_ALGOS_Characteristic_two* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_Characteristic_two (OSCTXT* pctxt, 
   ASN1T_ALGOS_Characteristic_two* pSrcValue, ASN1T_ALGOS_Characteristic_two*
    pDstValue);

EXTERN void asn1Init_ALGOS_Characteristic_two (ASN1T_ALGOS_Characteristic_two* pvalue);

EXTERN void asn1Free_ALGOS_Characteristic_two (OSCTXT *pctxt, 
   ASN1T_ALGOS_Characteristic_two* pvalue);

/**************************************************************/
/*                                                            */
/*  Pentanomial                                               */
/*                                                            */
/**************************************************************/
/*
Pentanomial ::= SEQUENCE {
   k1 INTEGER,
   k2 INTEGER,
   k3 INTEGER
}
*/
#define TV_ALGOS_Pentanomial	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_Pentanomial;

struct EXTERN ASN1T_ALGOS_Pentanomial : public ASN1TPDU {
   OSINT32 k1;
   OSINT32 k2;
   OSINT32 k3;
   ASN1T_ALGOS_Pentanomial ();
   ASN1T_ALGOS_Pentanomial (ASN1C_ALGOS_Pentanomial& srcData);
} ;

class EXTERN ASN1C_ALGOS_Pentanomial :
public ASN1CType
{
protected:
   ASN1T_ALGOS_Pentanomial& msgData;
public:
   ASN1C_ALGOS_Pentanomial (ASN1T_ALGOS_Pentanomial& data);
   ASN1C_ALGOS_Pentanomial (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_Pentanomial& data);
   ASN1C_ALGOS_Pentanomial (OSRTContext &context, ASN1T_ALGOS_Pentanomial& data
      );
   ASN1C_ALGOS_Pentanomial (ASN1C_ALGOS_Pentanomial& original);
   virtual ~ASN1C_ALGOS_Pentanomial () {}
   inline ASN1T_ALGOS_Pentanomial& getData () { return msgData; }
   inline const ASN1T_ALGOS_Pentanomial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Pentanomial");
   int toStream (const char* name = "Pentanomial");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_Pentanomial* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_Pentanomial& getCopy (ASN1T_ALGOS_Pentanomial* pDstData = 0);
   ASN1T_ALGOS_Pentanomial* newCopy ();

   inline ASN1C_ALGOS_Pentanomial& operator= (ASN1C_ALGOS_Pentanomial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_Pentanomial (OSCTXT* pctxt,
   ASN1T_ALGOS_Pentanomial *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_Pentanomial (OSCTXT* pctxt, 
   ASN1T_ALGOS_Pentanomial* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_Pentanomial 
   (const char* name, const ASN1T_ALGOS_Pentanomial* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_Pentanomial (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Pentanomial* pvalue);

EXTERN ASN1T_ALGOS_Pentanomial* new_ASN1T_ALGOS_Pentanomial (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_ALGOS_Pentanomial (const char* name, 
   ASN1T_ALGOS_Pentanomial* pValue, ASN1T_ALGOS_Pentanomial* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_Pentanomial (OSCTXT* pctxt, 
   ASN1T_ALGOS_Pentanomial* pSrcValue, ASN1T_ALGOS_Pentanomial* pDstValue);

/**************************************************************/
/*                                                            */
/*  Curve                                                     */
/*                                                            */
/**************************************************************/
/*
Curve ::= SEQUENCE {
   a FieldElement,
   b FieldElement,
   seed BIT STRING  OPTIONAL
}
*/
#define TV_ALGOS_Curve	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_Curve;

struct EXTERN ASN1T_ALGOS_Curve : public ASN1TPDU {
   struct {
      unsigned seedPresent : 1;
   } m;
   ASN1T_ALGOS_FieldElement a;
   ASN1T_ALGOS_FieldElement b;
   ASN1TDynBitStr seed;
   ASN1T_ALGOS_Curve ();
   ASN1T_ALGOS_Curve (ASN1C_ALGOS_Curve& srcData);
   ~ASN1T_ALGOS_Curve ();
} ;

class EXTERN ASN1C_ALGOS_Curve :
public ASN1CType
{
protected:
   ASN1T_ALGOS_Curve& msgData;
public:
   ASN1C_ALGOS_Curve (ASN1T_ALGOS_Curve& data);
   ASN1C_ALGOS_Curve (OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_Curve& data);
   ASN1C_ALGOS_Curve (OSRTContext &context, ASN1T_ALGOS_Curve& data);
   ASN1C_ALGOS_Curve (ASN1C_ALGOS_Curve& original);
   virtual ~ASN1C_ALGOS_Curve () {}
   inline ASN1T_ALGOS_Curve& getData () { return msgData; }
   inline const ASN1T_ALGOS_Curve& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Curve");
   int toStream (const char* name = "Curve");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_Curve* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_Curve& getCopy (ASN1T_ALGOS_Curve* pDstData = 0);
   ASN1T_ALGOS_Curve* newCopy ();

   inline ASN1C_ALGOS_Curve& operator= (ASN1C_ALGOS_Curve& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_Curve (OSCTXT* pctxt,
   ASN1T_ALGOS_Curve *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_Curve (OSCTXT* pctxt, ASN1T_ALGOS_Curve* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_Curve (const char* name, const ASN1T_ALGOS_Curve* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_Curve (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Curve* pvalue);

EXTERN ASN1T_ALGOS_Curve* new_ASN1T_ALGOS_Curve (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_Curve (const char* name, ASN1T_ALGOS_Curve* pValue, 
   ASN1T_ALGOS_Curve* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_Curve (OSCTXT* pctxt, ASN1T_ALGOS_Curve* pSrcValue, 
   ASN1T_ALGOS_Curve* pDstValue);

EXTERN void asn1Init_ALGOS_Curve (ASN1T_ALGOS_Curve* pvalue);

EXTERN void asn1Free_ALGOS_Curve (OSCTXT *pctxt, ASN1T_ALGOS_Curve* pvalue);

/**************************************************************/
/*                                                            */
/*  SpecifiedECDomain                                         */
/*                                                            */
/**************************************************************/
/*
SpecifiedECDomain ::= SEQUENCE {
   version INTEGER { ecdpVer1(1), ecdpVer2(2), ecdpVer3(3) } (ecdpVer1 | ecdpVer2 | ecdpVer3),
   fieldID FieldID,
   curve Curve,
   base ECPoint,
   order INTEGER,
   cofactor INTEGER OPTIONAL,
   hash HashAlgorithm OPTIONAL
}
*/
#define TV_ALGOS_SpecifiedECDomain	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_SpecifiedECDomain;

struct EXTERN ASN1T_ALGOS_SpecifiedECDomain : public ASN1TPDU {
   struct {
      unsigned cofactorPresent : 1;
      unsigned hashPresent : 1;
   } m;
   OSINT32 version;
   ASN1T_ALGOS_FieldID fieldID;
   ASN1T_ALGOS_Curve curve;
   ASN1T_ALGOS_ECPoint base;
   const char* order;
   const char* cofactor;
   ASN1T_ALGOS_HashAlgorithm hash;
   ASN1T_ALGOS_SpecifiedECDomain ();
   ASN1T_ALGOS_SpecifiedECDomain (ASN1C_ALGOS_SpecifiedECDomain& srcData);
   ~ASN1T_ALGOS_SpecifiedECDomain ();
} ;

class EXTERN ASN1C_ALGOS_SpecifiedECDomain :
public ASN1CType
{
protected:
   ASN1T_ALGOS_SpecifiedECDomain& msgData;
public:
   ASN1C_ALGOS_SpecifiedECDomain (ASN1T_ALGOS_SpecifiedECDomain& data);
   ASN1C_ALGOS_SpecifiedECDomain (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_SpecifiedECDomain& data);
   ASN1C_ALGOS_SpecifiedECDomain (OSRTContext &context
      , ASN1T_ALGOS_SpecifiedECDomain& data);
   ASN1C_ALGOS_SpecifiedECDomain (ASN1C_ALGOS_SpecifiedECDomain& original);
   virtual ~ASN1C_ALGOS_SpecifiedECDomain () {}
   inline ASN1T_ALGOS_SpecifiedECDomain& getData () { return msgData; }
   inline const ASN1T_ALGOS_SpecifiedECDomain& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SpecifiedECDomain");
   int toStream (const char* name = "SpecifiedECDomain");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_SpecifiedECDomain* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_SpecifiedECDomain& getCopy (ASN1T_ALGOS_SpecifiedECDomain* pDstData = 0);
   ASN1T_ALGOS_SpecifiedECDomain* newCopy ();

   inline ASN1C_ALGOS_SpecifiedECDomain& operator= (ASN1C_ALGOS_SpecifiedECDomain& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_SpecifiedECDomain (OSCTXT* pctxt,
   ASN1T_ALGOS_SpecifiedECDomain *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_SpecifiedECDomain (OSCTXT* pctxt, 
   ASN1T_ALGOS_SpecifiedECDomain* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_SpecifiedECDomain 
   (const char* name, const ASN1T_ALGOS_SpecifiedECDomain* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_SpecifiedECDomain (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_SpecifiedECDomain* pvalue);

EXTERN ASN1T_ALGOS_SpecifiedECDomain* 
   new_ASN1T_ALGOS_SpecifiedECDomain (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_SpecifiedECDomain (const char* name, 
   ASN1T_ALGOS_SpecifiedECDomain* pValue, 
   ASN1T_ALGOS_SpecifiedECDomain* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_SpecifiedECDomain (OSCTXT* pctxt, 
   ASN1T_ALGOS_SpecifiedECDomain* pSrcValue, ASN1T_ALGOS_SpecifiedECDomain*
    pDstValue);

EXTERN void asn1Init_ALGOS_SpecifiedECDomain (ASN1T_ALGOS_SpecifiedECDomain* pvalue);

EXTERN void asn1Free_ALGOS_SpecifiedECDomain (OSCTXT *pctxt, 
   ASN1T_ALGOS_SpecifiedECDomain* pvalue);

/**************************************************************/
/*                                                            */
/*  ECParameters                                              */
/*                                                            */
/**************************************************************/
/*
 Elliptic curve point
 Elliptic Curve parameters may be specfied explicitly,
 specified implicitly through a "named curve", or
 inherited from the CA

ECParameters ::= CHOICE {
   implicitCurve NULL,
   namedCurve OBJECT IDENTIFIER,
   specifiedCurve SpecifiedECDomain
}
*/
/* Choice context tags */

#define TVC_ALGOS_ECParameters_implicitCurve	(TM_UNIV|TM_PRIM|5)
#define TVC_ALGOS_ECParameters_namedCurve	(TM_UNIV|TM_PRIM|6)
#define TVC_ALGOS_ECParameters_specifiedCurve	(TM_UNIV|TM_CONS|16)

/* Choice tag constants */

#define T_ALGOS_ECParameters_implicitCurve 1
#define T_ALGOS_ECParameters_namedCurve 2
#define T_ALGOS_ECParameters_specifiedCurve 3

class EXTERN ASN1C_ALGOS_ECParameters;

struct EXTERN ASN1T_ALGOS_ECParameters : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      /* t = 2 */
      ASN1TObjId *namedCurve;
      /* t = 3 */
      ASN1T_ALGOS_SpecifiedECDomain *specifiedCurve;
   } u;
   ASN1T_ALGOS_ECParameters () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ALGOS_ECParameters (ASN1C_ALGOS_ECParameters& srcData);
   ~ASN1T_ALGOS_ECParameters ();
} ;

class EXTERN ASN1C_ALGOS_ECParameters :
public ASN1CType
{
protected:
   ASN1T_ALGOS_ECParameters& msgData;
public:
   ASN1C_ALGOS_ECParameters (ASN1T_ALGOS_ECParameters& data);
   ASN1C_ALGOS_ECParameters (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_ECParameters& data);
   ASN1C_ALGOS_ECParameters (OSRTContext &context
      , ASN1T_ALGOS_ECParameters& data);
   ASN1C_ALGOS_ECParameters (ASN1C_ALGOS_ECParameters& original);
   virtual ~ASN1C_ALGOS_ECParameters () {}
   inline ASN1T_ALGOS_ECParameters& getData () { return msgData; }
   inline const ASN1T_ALGOS_ECParameters& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ECParameters");
   int toStream (const char* name = "ECParameters");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_ECParameters* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_ECParameters& getCopy (ASN1T_ALGOS_ECParameters* pDstData = 0);
   ASN1T_ALGOS_ECParameters* newCopy ();

   inline ASN1C_ALGOS_ECParameters& operator= (ASN1C_ALGOS_ECParameters& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_ECParameters (OSCTXT* pctxt,
   ASN1T_ALGOS_ECParameters *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_ECParameters (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECParameters* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_ECParameters 
   (const char* name, const ASN1T_ALGOS_ECParameters* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_ECParameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECParameters* pvalue);

EXTERN ASN1T_ALGOS_ECParameters* 
   new_ASN1T_ALGOS_ECParameters (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_ECParameters (const char* name, 
   ASN1T_ALGOS_ECParameters* pValue, ASN1T_ALGOS_ECParameters* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_ECParameters (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECParameters* pSrcValue, ASN1T_ALGOS_ECParameters* pDstValue);

EXTERN void asn1Init_ALGOS_ECParameters (ASN1T_ALGOS_ECParameters* pvalue);

EXTERN void asn1Free_ALGOS_ECParameters (OSCTXT *pctxt, 
   ASN1T_ALGOS_ECParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  ECPrivateKey                                              */
/*                                                            */
/**************************************************************/
/*
ECPrivateKey ::= SEQUENCE {
   version INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
   privateKey OCTET STRING,
   parameters [0] ECParameters OPTIONAL,
   publicKey [1] BIT STRING  OPTIONAL
}
*/
#define TV_ALGOS_ECPrivateKey	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_ECPrivateKey;

struct EXTERN ASN1T_ALGOS_ECPrivateKey : public ASN1TPDU {
   struct {
      unsigned parametersPresent : 1;
      unsigned publicKeyPresent : 1;
   } m;
   ASN1T_ALGOS_ECPrivateKey_version version;
   ASN1TDynOctStr privateKey;
   ASN1T_ALGOS_ECParameters parameters;
   ASN1TDynBitStr publicKey;
   ASN1T_ALGOS_ECPrivateKey ();
   ASN1T_ALGOS_ECPrivateKey (ASN1C_ALGOS_ECPrivateKey& srcData);
   ~ASN1T_ALGOS_ECPrivateKey ();
} ;

class EXTERN ASN1C_ALGOS_ECPrivateKey :
public ASN1CType
{
protected:
   ASN1T_ALGOS_ECPrivateKey& msgData;
public:
   ASN1C_ALGOS_ECPrivateKey (ASN1T_ALGOS_ECPrivateKey& data);
   ASN1C_ALGOS_ECPrivateKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_ECPrivateKey& data);
   ASN1C_ALGOS_ECPrivateKey (OSRTContext &context
      , ASN1T_ALGOS_ECPrivateKey& data);
   ASN1C_ALGOS_ECPrivateKey (ASN1C_ALGOS_ECPrivateKey& original);
   virtual ~ASN1C_ALGOS_ECPrivateKey () {}
   inline ASN1T_ALGOS_ECPrivateKey& getData () { return msgData; }
   inline const ASN1T_ALGOS_ECPrivateKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ECPrivateKey");
   int toStream (const char* name = "ECPrivateKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_ECPrivateKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_ECPrivateKey& getCopy (ASN1T_ALGOS_ECPrivateKey* pDstData = 0);
   ASN1T_ALGOS_ECPrivateKey* newCopy ();

   inline ASN1C_ALGOS_ECPrivateKey& operator= (ASN1C_ALGOS_ECPrivateKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_ECPrivateKey (OSCTXT* pctxt,
   ASN1T_ALGOS_ECPrivateKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_ECPrivateKey (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECPrivateKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_ECPrivateKey 
   (const char* name, const ASN1T_ALGOS_ECPrivateKey* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_ECPrivateKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECPrivateKey* pvalue);

EXTERN ASN1T_ALGOS_ECPrivateKey* 
   new_ASN1T_ALGOS_ECPrivateKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_ECPrivateKey (const char* name, 
   ASN1T_ALGOS_ECPrivateKey* pValue, ASN1T_ALGOS_ECPrivateKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_ECPrivateKey (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECPrivateKey* pSrcValue, ASN1T_ALGOS_ECPrivateKey* pDstValue);

EXTERN void asn1Init_ALGOS_ECPrivateKey (ASN1T_ALGOS_ECPrivateKey* pvalue);

EXTERN void asn1Free_ALGOS_ECPrivateKey (OSCTXT *pctxt, 
   ASN1T_ALGOS_ECPrivateKey* pvalue);

/**************************************************************/
/*                                                            */
/*  RSASSA_PSS_params                                         */
/*                                                            */
/**************************************************************/
/*
RSASSA-PSS-params ::= SEQUENCE {
   hashAlgorithm [0] AlgorithmIdentifier DEFAULT sha1Identifier,
   maskGenAlgorithm [1] AlgorithmIdentifier DEFAULT mgf1SHA1Identifier,
   saltLength [2] INTEGER DEFAULT 20,
   trailerField [3] INTEGER DEFAULT 1
}
*/
#define TV_ALGOS_RSASSA_PSS_params	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ALGOS_RSASSA_PSS_params;

struct EXTERN ASN1T_ALGOS_RSASSA_PSS_params : public ASN1TPDU {
   struct {
      unsigned hashAlgorithmPresent : 1;
      unsigned maskGenAlgorithmPresent : 1;
   } m;
   ASN1T_EXP_AlgorithmIdentifier hashAlgorithm;
   ASN1T_EXP_AlgorithmIdentifier maskGenAlgorithm;
   OSINT32 saltLength;
   OSINT32 trailerField;
   ASN1T_ALGOS_RSASSA_PSS_params ();
   ASN1T_ALGOS_RSASSA_PSS_params (ASN1C_ALGOS_RSASSA_PSS_params& srcData);
   ~ASN1T_ALGOS_RSASSA_PSS_params ();
} ;

class EXTERN ASN1C_ALGOS_RSASSA_PSS_params :
public ASN1CType
{
protected:
   ASN1T_ALGOS_RSASSA_PSS_params& msgData;
public:
   ASN1C_ALGOS_RSASSA_PSS_params (ASN1T_ALGOS_RSASSA_PSS_params& data);
   ASN1C_ALGOS_RSASSA_PSS_params (OSRTMessageBufferIF& msgBuf
      , ASN1T_ALGOS_RSASSA_PSS_params& data);
   ASN1C_ALGOS_RSASSA_PSS_params (OSRTContext &context
      , ASN1T_ALGOS_RSASSA_PSS_params& data);
   ASN1C_ALGOS_RSASSA_PSS_params (ASN1C_ALGOS_RSASSA_PSS_params& original);
   virtual ~ASN1C_ALGOS_RSASSA_PSS_params () {}
   inline ASN1T_ALGOS_RSASSA_PSS_params& getData () { return msgData; }
   inline const ASN1T_ALGOS_RSASSA_PSS_params& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RSASSA_PSS_params");
   int toStream (const char* name = "RSASSA_PSS_params");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ALGOS_RSASSA_PSS_params* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ALGOS_RSASSA_PSS_params& getCopy (ASN1T_ALGOS_RSASSA_PSS_params* pDstData = 0);
   ASN1T_ALGOS_RSASSA_PSS_params* newCopy ();

   inline ASN1C_ALGOS_RSASSA_PSS_params& operator= (ASN1C_ALGOS_RSASSA_PSS_params& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ALGOS_RSASSA_PSS_params (OSCTXT* pctxt,
   ASN1T_ALGOS_RSASSA_PSS_params *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ALGOS_RSASSA_PSS_params (OSCTXT* pctxt, 
   ASN1T_ALGOS_RSASSA_PSS_params* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ALGOS_RSASSA_PSS_params 
   (const char* name, const ASN1T_ALGOS_RSASSA_PSS_params* pvalue);

EXTERN int asn1PrtToStrm_ALGOS_RSASSA_PSS_params (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_RSASSA_PSS_params* pvalue);

EXTERN ASN1T_ALGOS_RSASSA_PSS_params* 
   new_ASN1T_ALGOS_RSASSA_PSS_params (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ALGOS_RSASSA_PSS_params (const char* name, 
   ASN1T_ALGOS_RSASSA_PSS_params* pValue, 
   ASN1T_ALGOS_RSASSA_PSS_params* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ALGOS_RSASSA_PSS_params (OSCTXT* pctxt, 
   ASN1T_ALGOS_RSASSA_PSS_params* pSrcValue, ASN1T_ALGOS_RSASSA_PSS_params*
    pDstValue);

EXTERN void asn1Init_ALGOS_RSASSA_PSS_params (ASN1T_ALGOS_RSASSA_PSS_params* pvalue);

EXTERN void asn1Free_ALGOS_RSASSA_PSS_params (OSCTXT *pctxt, 
   ASN1T_ALGOS_RSASSA_PSS_params* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ALGOS_id_dsa;
extern EXTERN ASN1OBJID ALGOS_id_dsa_with_sha1;
extern EXTERN ASN1OBJID ALGOS_pkcs_1;
extern EXTERN ASN1OBJID ALGOS_rsaEncryption;
extern EXTERN ASN1OBJID ALGOS_md2WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOS_md5WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOS_sha1WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOS_pbe_with_Sha_and_40Bit_RC2_CBC;
extern EXTERN ASN1OBJID ALGOS_des_EDE3_CBC;
extern EXTERN ASN1OBJID ALGOS_des_EDE3_ECB;
extern EXTERN ASN1OBJID ALGOS_arc4_Sim_Stream_Cypher;
extern EXTERN ASN1OBJID ALGOS_dhpublicnumber;
extern EXTERN ASN1OBJID ALGOS_id_keyExchangeAlgorithm;
extern EXTERN ASN1OBJID ALGOS_ansi_X9_62;
extern EXTERN ASN1OBJID ALGOS_id_ecSigType;
extern EXTERN ASN1OBJID ALGOS_ecdsa_with_SHA1;
extern EXTERN ASN1OBJID ALGOS_id_fieldType;
extern EXTERN ASN1OBJID ALGOS_prime_field;
extern EXTERN ASN1OBJID ALGOS_characteristic_two_field;
extern EXTERN ASN1OBJID ALGOS_id_characteristic_two_basis;
extern EXTERN ASN1OBJID ALGOS_gnBasis;
extern EXTERN ASN1OBJID ALGOS_tpBasis;
extern EXTERN ASN1OBJID ALGOS_ppBasis;
extern EXTERN ASN1OBJID ALGOS_id_publicKeyType;
extern EXTERN ASN1OBJID ALGOS_id_ecPublicKey;
extern EXTERN ASN1OBJID ALGOS_ellipticCurve;
extern EXTERN ASN1OBJID ALGOS_c_TwoCurve;
extern EXTERN ASN1OBJID ALGOS_primeCurve;
extern EXTERN ASN1OBJID ALGOS_c2pnb163v1;
extern EXTERN ASN1OBJID ALGOS_c2pnb163v2;
extern EXTERN ASN1OBJID ALGOS_c2pnb163v3;
extern EXTERN ASN1OBJID ALGOS_c2pnb176w1;
extern EXTERN ASN1OBJID ALGOS_c2tnb191v1;
extern EXTERN ASN1OBJID ALGOS_c2tnb191v2;
extern EXTERN ASN1OBJID ALGOS_c2tnb191v3;
extern EXTERN ASN1OBJID ALGOS_c2onb191v4;
extern EXTERN ASN1OBJID ALGOS_c2onb191v5;
extern EXTERN ASN1OBJID ALGOS_c2pnb208w1;
extern EXTERN ASN1OBJID ALGOS_c2tnb239v1;
extern EXTERN ASN1OBJID ALGOS_c2tnb239v2;
extern EXTERN ASN1OBJID ALGOS_c2tnb239v3;
extern EXTERN ASN1OBJID ALGOS_c2onb239v4;
extern EXTERN ASN1OBJID ALGOS_c2onb239v5;
extern EXTERN ASN1OBJID ALGOS_c2pnb272w1;
extern EXTERN ASN1OBJID ALGOS_c2pnb304w1;
extern EXTERN ASN1OBJID ALGOS_c2tnb359v1;
extern EXTERN ASN1OBJID ALGOS_c2pnb368w1;
extern EXTERN ASN1OBJID ALGOS_c2tnb431r1;
extern EXTERN ASN1OBJID ALGOS_prime192v1;
extern EXTERN ASN1OBJID ALGOS_prime192v2;
extern EXTERN ASN1OBJID ALGOS_prime192v3;
extern EXTERN ASN1OBJID ALGOS_prime239v1;
extern EXTERN ASN1OBJID ALGOS_prime239v2;
extern EXTERN ASN1OBJID ALGOS_prime239v3;
extern EXTERN ASN1OBJID ALGOS_prime256v1;
extern EXTERN ASN1OBJID ALGOS_sha_1;
extern EXTERN ASN1OBJID ALGOS_md5;
extern EXTERN ASN1OBJID ALGOS_ripemd_160;
extern EXTERN ASN1OBJID ALGOS_id_sha224;
extern EXTERN ASN1OBJID ALGOS_id_sha256;
extern EXTERN ASN1OBJID ALGOS_id_sha384;
extern EXTERN ASN1OBJID ALGOS_id_sha512;
extern EXTERN ASN1OBJID ALGOS_sha224WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOS_sha256WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOS_sha384WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOS_sha512WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOS_id_RSASSA_PSS;
extern EXTERN ASN1OBJID ALGOS_id_mgf1;
extern EXTERN ASN1OBJID ALGOS_ecdsa_with_Sha224;
extern EXTERN ASN1OBJID ALGOS_ecdsa_with_Sha256;
extern EXTERN ASN1OBJID ALGOS_ecdsa_with_Sha384;
extern EXTERN ASN1OBJID ALGOS_ecdsa_with_Sha512;
extern EXTERN ASN1OBJID ALGOS_des_ede3_cbc;
extern EXTERN ASN1OBJID ALGOS_rc2_cbc;
extern EXTERN ASN1OBJID ALGOS_certicom_arc;
extern EXTERN ASN1OBJID ALGOS_secp192r1;
extern EXTERN ASN1OBJID ALGOS_sect163k1;
extern EXTERN ASN1OBJID ALGOS_sect163r2;
extern EXTERN ASN1OBJID ALGOS_secp224r1;
extern EXTERN ASN1OBJID ALGOS_sect233k1;
extern EXTERN ASN1OBJID ALGOS_sect233r1;
extern EXTERN ASN1OBJID ALGOS_secp256r1;
extern EXTERN ASN1OBJID ALGOS_sect283k1;
extern EXTERN ASN1OBJID ALGOS_sect283r1;
extern EXTERN ASN1OBJID ALGOS_secp384r1;
extern EXTERN ASN1OBJID ALGOS_sect409k1;
extern EXTERN ASN1OBJID ALGOS_sect409r1;
extern EXTERN ASN1OBJID ALGOS_secp521r1;
extern EXTERN ASN1OBJID ALGOS_sect571k1;
extern EXTERN ASN1OBJID ALGOS_sect571r1;
extern EXTERN ASN1OBJID ALGOS_secg_scheme;
extern EXTERN ASN1OBJID ALGOS_aes128_keywrap;
extern EXTERN ASN1OBJID ALGOS_aes192_keywrap;
extern EXTERN ASN1OBJID ALGOS_aes256_keywrap;
extern EXTERN ASN1OBJID ALGOS_dhSinglePass_stdDH_sha1kdf_scheme;
extern EXTERN ASN1OBJID ALGOS_dhSinglePass_stdDH_sha224kdf_scheme;
extern EXTERN ASN1OBJID ALGOS_dhSinglePass_stdDH_sha256kdf_scheme;
extern EXTERN ASN1OBJID ALGOS_dhSinglePass_stdDH_sha384kdf_scheme;
extern EXTERN ASN1OBJID ALGOS_dhSinglePass_stdDH_sha512kdf_scheme;

#endif
