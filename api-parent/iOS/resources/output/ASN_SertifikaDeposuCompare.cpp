/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "ASN_SertifikaDeposu.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_SD_KokSertifikaTipi (const char* name, 
   ASN1T_SD_KokSertifikaTipi* pValue, ASN1T_SD_KokSertifikaTipi* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_SD_KokSertifikaTipi::Equals (ASN1T_SD_KokSertifikaTipi* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_KokSertifikaTipi ("KokSertifikaTipi", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_SD_KOKGuvenSeviyesi (const char* name, 
   ASN1T_SD_KOKGuvenSeviyesi* pValue, ASN1T_SD_KOKGuvenSeviyesi* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_SD_KOKGuvenSeviyesi::Equals (ASN1T_SD_KOKGuvenSeviyesi* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_KOKGuvenSeviyesi ("KOKGuvenSeviyesi", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_SD_DepoASNEklenecekKokSertifika (const char* name, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pValue, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".kokSertifikaValue", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->kokSertifikaValue.numocts, 
      pValue->kokSertifikaValue.data, pCmpValue->kokSertifikaValue.numocts, 
      pCmpValue->kokSertifikaValue.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokSertifikaHash", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->kokSertifikaHash.numocts, 
      pValue->kokSertifikaHash.data, pCmpValue->kokSertifikaHash.numocts, 
      pCmpValue->kokSertifikaHash.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokSerialNumber", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->kokSerialNumber, &pCmpValue->kokSerialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokIssuerName", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->kokIssuerName, &pCmpValue->kokIssuerName, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokSubjectName", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->kokSubjectName, &pCmpValue->kokSubjectName, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokStartDate", 0, 0, 0);
   if (! asn1Compare_EXP_Time (namebuf, &pValue->kokStartDate, &pCmpValue->kokStartDate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokEndDate", 0, 0, 0);
   if (! asn1Compare_EXP_Time (namebuf, &pValue->kokEndDate, &pCmpValue->kokEndDate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokKeyUsage", 0, 0, 0);
   if (! asn1Compare_IMP_KeyUsage (namebuf, &pValue->kokKeyUsage, &pCmpValue->kokKeyUsage, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokSubjectKeyIdentifier", 0, 0, 0);
   if (! asn1Compare_IMP_SubjectKeyIdentifier (namebuf, &pValue->kokSubjectKeyIdentifier, &pCmpValue->kokSubjectKeyIdentifier, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokSertifikaTipi", 0, 0, 0);
   if (! asn1Compare_SD_KokSertifikaTipi (namebuf, &pValue->kokSertifikaTipi, &pCmpValue->kokSertifikaTipi, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokGuvenSeviyesi", 0, 0, 0);
   if (! asn1Compare_SD_KOKGuvenSeviyesi (namebuf, &pValue->kokGuvenSeviyesi, &pCmpValue->kokGuvenSeviyesi, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_SD_DepoASNEklenecekKokSertifika::Equals (ASN1T_SD_DepoASNEklenecekKokSertifika* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_DepoASNEklenecekKokSertifika ("DepoASNEklenecekKokSertifika", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_SD_DepoASNSilinecekKokSertifika (const char* name, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pValue, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".kokSertifikaValue", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->kokSertifikaValue.numocts, 
      pValue->kokSertifikaValue.data, pCmpValue->kokSertifikaValue.numocts, 
      pCmpValue->kokSertifikaValue.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokSerialNumber", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->kokSerialNumber, &pCmpValue->kokSerialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokIssuerName", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->kokIssuerName, &pCmpValue->kokIssuerName, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kokSubjectName", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->kokSubjectName, &pCmpValue->kokSubjectName, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_SD_DepoASNSilinecekKokSertifika::Equals (ASN1T_SD_DepoASNSilinecekKokSertifika* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_DepoASNSilinecekKokSertifika ("DepoASNSilinecekKokSertifika", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_SD_DepoASNKokSertifika (const char* name, 
   ASN1T_SD_DepoASNKokSertifika* pValue, 
   ASN1T_SD_DepoASNKokSertifika* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* eklenecekSertifika */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.eklenecekSertifika", 0, 0, 0);
         if (! asn1Compare_SD_DepoASNEklenecekKokSertifika (namebuf, pValue->u.eklenecekSertifika, pCmpValue->u.eklenecekSertifika, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* silinecekSertifika */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.silinecekSertifika", 0, 0, 0);
         if (! asn1Compare_SD_DepoASNSilinecekKokSertifika (namebuf, pValue->u.silinecekSertifika, pCmpValue->u.silinecekSertifika, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_SD_DepoASNKokSertifika::Equals (ASN1T_SD_DepoASNKokSertifika* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_DepoASNKokSertifika ("DepoASNKokSertifika", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_SD_DepoASNKokSertifikalar (const char* name, 
   ASN1T_SD_DepoASNKokSertifikalar* pValue, 
   ASN1T_SD_DepoASNKokSertifikalar* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_SD_DepoASNKokSertifika* pdata;
   ASN1T_SD_DepoASNKokSertifika* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_SD_DepoASNKokSertifika*) pnode->data;
      pCmpdata = (ASN1T_SD_DepoASNKokSertifika*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_SD_DepoASNKokSertifika (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_SD_DepoASNKokSertifikalar::Equals (ASN1T_SD_DepoASNKokSertifikalar* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_DepoASNKokSertifikalar ("DepoASNKokSertifikalar", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_SD_DepoASNRawImza (const char* name, 
   ASN1T_SD_DepoASNRawImza* pValue, ASN1T_SD_DepoASNRawImza* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".publicKeyHash", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->publicKeyHash.numocts, 
      pValue->publicKeyHash.data, pCmpValue->publicKeyHash.numocts, 
      pCmpValue->publicKeyHash.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".imza", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->imza.numocts, pValue->imza.data, 
      pCmpValue->imza.numocts, pCmpValue->imza.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_SD_DepoASNRawImza::Equals (ASN1T_SD_DepoASNRawImza* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_DepoASNRawImza ("DepoASNRawImza", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_SD_DepoASNImza (const char* name, 
   ASN1T_SD_DepoASNImza* pValue, ASN1T_SD_DepoASNImza* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".imzalanan", 0, 0, 0);
   if (! asn1Compare_SD_DepoASNKokSertifika (namebuf, &pValue->imzalanan, &pCmpValue->imzalanan, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".imza", 0, 0, 0);
   if (! asn1Compare_SD_DepoASNRawImza (namebuf, &pValue->imza, &pCmpValue->imza, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_SD_DepoASNImza::Equals (ASN1T_SD_DepoASNImza* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_DepoASNImza ("DepoASNImza", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_SD_DepoASNImzalar (const char* name, 
   ASN1T_SD_DepoASNImzalar* pValue, ASN1T_SD_DepoASNImzalar* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_SD_DepoASNImza* pdata;
   ASN1T_SD_DepoASNImza* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_SD_DepoASNImza*) pnode->data;
      pCmpdata = (ASN1T_SD_DepoASNImza*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_SD_DepoASNImza (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_SD_DepoASNImzalar::Equals (ASN1T_SD_DepoASNImzalar* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_SD_DepoASNImzalar ("DepoASNImzalar", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

