/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "pkcs7.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID PKCS7_pkcs_7 = {
   6,
   { 1, 2, 840, 113549, 1, 7 }
} ;
ASN1OBJID PKCS7_data = {
   7,
   { 1, 2, 840, 113549, 1, 7, 1 }
} ;
ASN1OBJID PKCS7_signedData = {
   7,
   { 1, 2, 840, 113549, 1, 7, 2 }
} ;
ASN1OBJID PKCS7_envelopedData = {
   7,
   { 1, 2, 840, 113549, 1, 7, 3 }
} ;
ASN1OBJID PKCS7_signedAndEnvelopedData = {
   7,
   { 1, 2, 840, 113549, 1, 7, 4 }
} ;
ASN1OBJID PKCS7_digestedData = {
   7,
   { 1, 2, 840, 113549, 1, 7, 5 }
} ;
ASN1OBJID PKCS7_encryptedData = {
   7,
   { 1, 2, 840, 113549, 1, 7, 6 }
} ;
ASN1OBJID PKCS7_id_aa_signingCertificate = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 12 }
} ;
ASN1OBJID PKCS7_id_aa_timeStampToken = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 14 }
} ;

ASN1T_PKCS7_ContentType* new_ASN1T_PKCS7_ContentType (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_ContentType));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_ContentType;
}

ASN1C_PKCS7_ContentType::ASN1C_PKCS7_ContentType
    (ASN1T_PKCS7_ContentType& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_ContentType::ASN1C_PKCS7_ContentType (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_ContentType& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_ContentType::ASN1C_PKCS7_ContentType (OSRTContext &context
   , ASN1T_PKCS7_ContentType& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_ContentType::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_ContentType (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_ContentType::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS7_ContentType (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_ContentType (ASN1T_PKCS7_ContentType* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_ContentType;
}

ASN1T_PKCS7_Data* new_ASN1T_PKCS7_Data (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_Data));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_Data;
}

ASN1C_PKCS7_Data::ASN1C_PKCS7_Data (ASN1T_PKCS7_Data& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_Data::ASN1C_PKCS7_Data (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_Data& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_Data::ASN1C_PKCS7_Data (OSRTContext &context
   , ASN1T_PKCS7_Data& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_Data::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_Data (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_Data::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS7_Data (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_Data (ASN1T_PKCS7_Data* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_Data;
}

void asn1Free_PKCS7_Data (OSCTXT *pctxt, ASN1T_PKCS7_Data* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_PKCS7_Data::MemFree ()
{
   asn1Free_PKCS7_Data (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* 
   new_ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier;
}

ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier
    (ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier (OSRTContext &context
   , ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_ContentEncryptionAlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_ContentEncryptionAlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_ContentEncryptionAlgorithmIdentifier (
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier;
}

void asn1Free_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, pvalue);
}

void ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::MemFree ()
{
   asn1Free_PKCS7_ContentEncryptionAlgorithmIdentifier (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_DigestAlgorithmIdentifier* 
   new_ASN1T_PKCS7_DigestAlgorithmIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_DigestAlgorithmIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_DigestAlgorithmIdentifier;
}

ASN1C_PKCS7_DigestAlgorithmIdentifier::ASN1C_PKCS7_DigestAlgorithmIdentifier
    (ASN1T_PKCS7_DigestAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_DigestAlgorithmIdentifier::ASN1C_PKCS7_DigestAlgorithmIdentifier (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_DigestAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_DigestAlgorithmIdentifier::ASN1C_PKCS7_DigestAlgorithmIdentifier (
   OSRTContext &context, ASN1T_PKCS7_DigestAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_DigestAlgorithmIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_DigestAlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_DigestAlgorithmIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_DigestAlgorithmIdentifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_DigestAlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_DigestAlgorithmIdentifier (
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_DigestAlgorithmIdentifier;
}

void asn1Free_PKCS7_DigestAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, pvalue);
}

void ASN1C_PKCS7_DigestAlgorithmIdentifier::MemFree ()
{
   asn1Free_PKCS7_DigestAlgorithmIdentifier (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* 
   new_ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier;
}

ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier
    (ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier (OSRTContext &context
   , ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_DigestEncryptionAlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_DigestEncryptionAlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_DigestEncryptionAlgorithmIdentifier (
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier;
}

void asn1Free_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, pvalue);
}

void ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::MemFree ()
{
   asn1Free_PKCS7_DigestEncryptionAlgorithmIdentifier (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* 
   new_ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier;
}

ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier
    (ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::
   ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier (OSRTContext &context
   , ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& data) : 
   ASN1C_EXP_AlgorithmIdentifier (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_KeyEncryptionAlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_KeyEncryptionAlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_KeyEncryptionAlgorithmIdentifier (
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier;
}

void asn1Free_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, pvalue);
}

void ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::MemFree ()
{
   asn1Free_PKCS7_KeyEncryptionAlgorithmIdentifier (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_Version* new_ASN1T_PKCS7_Version (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_Version));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_Version;
}

ASN1C_PKCS7_Version::ASN1C_PKCS7_Version (ASN1T_PKCS7_Version& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_Version::ASN1C_PKCS7_Version (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_Version& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_Version::ASN1C_PKCS7_Version (OSRTContext &context
   , ASN1T_PKCS7_Version& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_Version::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_Version (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_Version::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS7_Version (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_PKCS7_EncryptedDigest* new_ASN1T_PKCS7_EncryptedDigest (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_EncryptedDigest));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_EncryptedDigest;
}

ASN1C_PKCS7_EncryptedDigest::ASN1C_PKCS7_EncryptedDigest
    (ASN1T_PKCS7_EncryptedDigest& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_EncryptedDigest::ASN1C_PKCS7_EncryptedDigest (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_EncryptedDigest& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_EncryptedDigest::ASN1C_PKCS7_EncryptedDigest (OSRTContext &context
   , ASN1T_PKCS7_EncryptedDigest& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_EncryptedDigest::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_EncryptedDigest (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_EncryptedDigest::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS7_EncryptedDigest (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_EncryptedDigest (ASN1T_PKCS7_EncryptedDigest* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_EncryptedDigest;
}

void asn1Free_PKCS7_EncryptedDigest (OSCTXT *pctxt, 
   ASN1T_PKCS7_EncryptedDigest* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_PKCS7_EncryptedDigest::MemFree ()
{
   asn1Free_PKCS7_EncryptedDigest (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_Digest* new_ASN1T_PKCS7_Digest (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_Digest));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_Digest;
}

ASN1C_PKCS7_Digest::ASN1C_PKCS7_Digest (ASN1T_PKCS7_Digest& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_Digest::ASN1C_PKCS7_Digest (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_Digest& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_Digest::ASN1C_PKCS7_Digest (OSRTContext &context
   , ASN1T_PKCS7_Digest& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_Digest::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_Digest (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_Digest::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS7_Digest (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_Digest (ASN1T_PKCS7_Digest* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_Digest;
}

void asn1Free_PKCS7_Digest (OSCTXT *pctxt, ASN1T_PKCS7_Digest* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_PKCS7_Digest::MemFree ()
{
   asn1Free_PKCS7_Digest (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_EncryptedContent* 
   new_ASN1T_PKCS7_EncryptedContent (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_EncryptedContent));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_EncryptedContent;
}

ASN1C_PKCS7_EncryptedContent::ASN1C_PKCS7_EncryptedContent
    (ASN1T_PKCS7_EncryptedContent& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_EncryptedContent::ASN1C_PKCS7_EncryptedContent (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_EncryptedContent& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_EncryptedContent::ASN1C_PKCS7_EncryptedContent (
   OSRTContext &context, ASN1T_PKCS7_EncryptedContent& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_EncryptedContent::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_EncryptedContent (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_EncryptedContent::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS7_EncryptedContent (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_EncryptedContent (ASN1T_PKCS7_EncryptedContent* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_EncryptedContent;
}

void asn1Free_PKCS7_EncryptedContent (OSCTXT *pctxt, 
   ASN1T_PKCS7_EncryptedContent* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_PKCS7_EncryptedContent::MemFree ()
{
   asn1Free_PKCS7_EncryptedContent (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_EncryptedKey* new_ASN1T_PKCS7_EncryptedKey (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_EncryptedKey));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_EncryptedKey;
}

ASN1C_PKCS7_EncryptedKey::ASN1C_PKCS7_EncryptedKey
    (ASN1T_PKCS7_EncryptedKey& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_EncryptedKey::ASN1C_PKCS7_EncryptedKey (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_EncryptedKey& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_EncryptedKey::ASN1C_PKCS7_EncryptedKey (OSRTContext &context
   , ASN1T_PKCS7_EncryptedKey& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_EncryptedKey::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_EncryptedKey (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_EncryptedKey::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS7_EncryptedKey (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_EncryptedKey (ASN1T_PKCS7_EncryptedKey* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_EncryptedKey;
}

void asn1Free_PKCS7_EncryptedKey (OSCTXT *pctxt, 
   ASN1T_PKCS7_EncryptedKey* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_PKCS7_EncryptedKey::MemFree ()
{
   asn1Free_PKCS7_EncryptedKey (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_Hash* new_ASN1T_PKCS7_Hash (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_Hash));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_Hash;
}

ASN1C_PKCS7_Hash::ASN1C_PKCS7_Hash (ASN1T_PKCS7_Hash& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_Hash::ASN1C_PKCS7_Hash (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_Hash& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_Hash::ASN1C_PKCS7_Hash (OSRTContext &context
   , ASN1T_PKCS7_Hash& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKCS7_Hash::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_Hash (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_Hash::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKCS7_Hash (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_Hash (ASN1T_PKCS7_Hash* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_Hash;
}

void asn1Free_PKCS7_Hash (OSCTXT *pctxt, ASN1T_PKCS7_Hash* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_PKCS7_Hash::MemFree ()
{
   asn1Free_PKCS7_Hash (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_ContentInfo* new_ASN1T_PKCS7_ContentInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_ContentInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_ContentInfo;
}

ASN1C_PKCS7_ContentInfo::ASN1C_PKCS7_ContentInfo
    (ASN1T_PKCS7_ContentInfo& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_ContentInfo::ASN1C_PKCS7_ContentInfo (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_ContentInfo& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_ContentInfo::ASN1C_PKCS7_ContentInfo (OSRTContext &context
   , ASN1T_PKCS7_ContentInfo& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_ContentInfo::ASN1T_PKCS7_ContentInfo ()
{
   m.contentPresent = 0;
}

ASN1T_PKCS7_ContentInfo::~ASN1T_PKCS7_ContentInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_ContentInfo (pctxt, this);
   }
}

int ASN1C_PKCS7_ContentInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_ContentInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_ContentInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_ContentInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_ContentInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_ContentInfo (ASN1T_PKCS7_ContentInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_ContentInfo;
}

void asn1Free_PKCS7_ContentInfo (OSCTXT *pctxt, 
   ASN1T_PKCS7_ContentInfo* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.contentPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->content.data);
   }
}

void ASN1C_PKCS7_ContentInfo::MemFree ()
{
   asn1Free_PKCS7_ContentInfo (getCtxtPtr(), &msgData);
}

ASN1C_PKCS7_CertificateRevocationLists::ASN1C_PKCS7_CertificateRevocationLists
    (ASN1T_PKCS7_CertificateRevocationLists& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_CertificateRevocationLists::
   ASN1C_PKCS7_CertificateRevocationLists (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_CertificateRevocationLists& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_CertificateRevocationLists::
   ASN1C_PKCS7_CertificateRevocationLists (OSRTContext &context
   , ASN1T_PKCS7_CertificateRevocationLists& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKCS7_CertificateRevocationLists::
   ASN1C_PKCS7_CertificateRevocationLists (ASN1CType& ccobj
   , ASN1T_PKCS7_CertificateRevocationLists& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKCS7_CertificateRevocationLists::Append (ASN1T_EXP_CertificateList* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_CertificateList* ASN1C_PKCS7_CertificateRevocationLists::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_CertificateList));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_CertificateList;
}

ASN1T_EXP_CertificateList* ASN1C_PKCS7_CertificateRevocationLists::AppendNewElement ()
{
   ASN1T_EXP_CertificateList* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKCS7_CertificateRevocationLists::~ASN1T_PKCS7_CertificateRevocationLists ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_CertificateRevocationLists (pctxt, this);
   }
}

int ASN1C_PKCS7_CertificateRevocationLists::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_CertificateRevocationLists (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_CertificateRevocationLists::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_CertificateRevocationLists;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_CertificateRevocationLists (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_CertificateRevocationLists (
   ASN1T_PKCS7_CertificateRevocationLists* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_CertificateRevocationLists;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKCS7_CertificateRevocationLists (OSCTXT *pctxt, 
   ASN1T_PKCS7_CertificateRevocationLists* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_CertificateList* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_CertificateList*)pnode->data;
      asn1Free_EXP_CertificateList (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKCS7_CertificateRevocationLists::MemFree ()
{
   asn1Free_PKCS7_CertificateRevocationLists (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_IssuerAndSerialNumber* 
   new_ASN1T_PKCS7_IssuerAndSerialNumber (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_IssuerAndSerialNumber));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_IssuerAndSerialNumber;
}

ASN1C_PKCS7_IssuerAndSerialNumber::ASN1C_PKCS7_IssuerAndSerialNumber
    (ASN1T_PKCS7_IssuerAndSerialNumber& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_IssuerAndSerialNumber::ASN1C_PKCS7_IssuerAndSerialNumber (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_IssuerAndSerialNumber& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_IssuerAndSerialNumber::ASN1C_PKCS7_IssuerAndSerialNumber (
   OSRTContext &context, ASN1T_PKCS7_IssuerAndSerialNumber& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_IssuerAndSerialNumber::ASN1T_PKCS7_IssuerAndSerialNumber ()
{
}

ASN1T_PKCS7_IssuerAndSerialNumber::~ASN1T_PKCS7_IssuerAndSerialNumber ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_IssuerAndSerialNumber (pctxt, this);
   }
}

int ASN1C_PKCS7_IssuerAndSerialNumber::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_IssuerAndSerialNumber (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_IssuerAndSerialNumber::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_IssuerAndSerialNumber;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_IssuerAndSerialNumber (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_IssuerAndSerialNumber (
   ASN1T_PKCS7_IssuerAndSerialNumber* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_IssuerAndSerialNumber;
}

void asn1Free_PKCS7_IssuerAndSerialNumber (OSCTXT *pctxt, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_Name (pctxt, &pvalue->issuer);
}

void ASN1C_PKCS7_IssuerAndSerialNumber::MemFree ()
{
   asn1Free_PKCS7_IssuerAndSerialNumber (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_ExtendedCertificateOrCertificate* 
   new_ASN1T_PKCS7_ExtendedCertificateOrCertificate (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_ExtendedCertificateOrCertificate));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_ExtendedCertificateOrCertificate;
}

ASN1C_PKCS7_ExtendedCertificateOrCertificate::
   ASN1C_PKCS7_ExtendedCertificateOrCertificate
    (ASN1T_PKCS7_ExtendedCertificateOrCertificate& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_ExtendedCertificateOrCertificate::
   ASN1C_PKCS7_ExtendedCertificateOrCertificate (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_ExtendedCertificateOrCertificate& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_ExtendedCertificateOrCertificate::
   ASN1C_PKCS7_ExtendedCertificateOrCertificate (OSRTContext &context
   , ASN1T_PKCS7_ExtendedCertificateOrCertificate& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_ExtendedCertificateOrCertificate::~ASN1T_PKCS7_ExtendedCertificateOrCertificate ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_ExtendedCertificateOrCertificate (pctxt, this);
   }
}

int ASN1C_PKCS7_ExtendedCertificateOrCertificate::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_ExtendedCertificateOrCertificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_ExtendedCertificateOrCertificate::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_ExtendedCertificateOrCertificate;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_ExtendedCertificateOrCertificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_ExtendedCertificateOrCertificate (
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_ExtendedCertificateOrCertificate;
}

void asn1Free_PKCS7_ExtendedCertificateOrCertificate (OSCTXT *pctxt, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != pvalue->u.certificate) {
            asn1Free_EXP_Certificate (pctxt, pvalue->u.certificate);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.certificate);
         }
         break;

   }
}

void ASN1C_PKCS7_ExtendedCertificateOrCertificate::MemFree ()
{
   asn1Free_PKCS7_ExtendedCertificateOrCertificate (getCtxtPtr(), &msgData);
}

ASN1C_PKCS7_ExtendedCertificatesAndCertificates::
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates
    (ASN1T_PKCS7_ExtendedCertificatesAndCertificates& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_ExtendedCertificatesAndCertificates::
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_ExtendedCertificatesAndCertificates& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_ExtendedCertificatesAndCertificates::
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates (OSRTContext &context
   , ASN1T_PKCS7_ExtendedCertificatesAndCertificates& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKCS7_ExtendedCertificatesAndCertificates::
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates (ASN1CType& ccobj
   , ASN1T_PKCS7_ExtendedCertificatesAndCertificates& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKCS7_ExtendedCertificatesAndCertificates::Append (ASN1T_PKCS7_ExtendedCertificateOrCertificate* elem)
{
   append ((void*)elem);
}

ASN1T_PKCS7_ExtendedCertificateOrCertificate* ASN1C_PKCS7_ExtendedCertificatesAndCertificates::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_PKCS7_ExtendedCertificateOrCertificate));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_ExtendedCertificateOrCertificate;
}

ASN1T_PKCS7_ExtendedCertificateOrCertificate* ASN1C_PKCS7_ExtendedCertificatesAndCertificates::AppendNewElement ()
{
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKCS7_ExtendedCertificatesAndCertificates::~ASN1T_PKCS7_ExtendedCertificatesAndCertificates ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_ExtendedCertificatesAndCertificates (pctxt, this);
   }
}

int ASN1C_PKCS7_ExtendedCertificatesAndCertificates::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_ExtendedCertificatesAndCertificates (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_ExtendedCertificatesAndCertificates::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_ExtendedCertificatesAndCertificates;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_ExtendedCertificatesAndCertificates (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_ExtendedCertificatesAndCertificates (
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_ExtendedCertificatesAndCertificates;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT *pctxt, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_PKCS7_ExtendedCertificateOrCertificate* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_PKCS7_ExtendedCertificateOrCertificate*)pnode->data;
      asn1Free_PKCS7_ExtendedCertificateOrCertificate (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKCS7_ExtendedCertificatesAndCertificates::MemFree ()
{
   asn1Free_PKCS7_ExtendedCertificatesAndCertificates (getCtxtPtr(), &msgData);
}

ASN1C_PKCS7_DigestAlgorithmIdentifiers::ASN1C_PKCS7_DigestAlgorithmIdentifiers
    (ASN1T_PKCS7_DigestAlgorithmIdentifiers& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_DigestAlgorithmIdentifiers::
   ASN1C_PKCS7_DigestAlgorithmIdentifiers (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_DigestAlgorithmIdentifiers& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_DigestAlgorithmIdentifiers::
   ASN1C_PKCS7_DigestAlgorithmIdentifiers (OSRTContext &context
   , ASN1T_PKCS7_DigestAlgorithmIdentifiers& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKCS7_DigestAlgorithmIdentifiers::
   ASN1C_PKCS7_DigestAlgorithmIdentifiers (ASN1CType& ccobj
   , ASN1T_PKCS7_DigestAlgorithmIdentifiers& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKCS7_DigestAlgorithmIdentifiers::Append (ASN1T_PKCS7_DigestAlgorithmIdentifier* elem)
{
   append ((void*)elem);
}

ASN1T_PKCS7_DigestAlgorithmIdentifier* ASN1C_PKCS7_DigestAlgorithmIdentifiers::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_PKCS7_DigestAlgorithmIdentifier));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_DigestAlgorithmIdentifier;
}

ASN1T_PKCS7_DigestAlgorithmIdentifier* ASN1C_PKCS7_DigestAlgorithmIdentifiers::AppendNewElement ()
{
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKCS7_DigestAlgorithmIdentifiers::~ASN1T_PKCS7_DigestAlgorithmIdentifiers ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_DigestAlgorithmIdentifiers (pctxt, this);
   }
}

int ASN1C_PKCS7_DigestAlgorithmIdentifiers::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_DigestAlgorithmIdentifiers (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_DigestAlgorithmIdentifiers::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_DigestAlgorithmIdentifiers;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_DigestAlgorithmIdentifiers (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_DigestAlgorithmIdentifiers (
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_DigestAlgorithmIdentifiers;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKCS7_DigestAlgorithmIdentifiers (OSCTXT *pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_PKCS7_DigestAlgorithmIdentifier* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_PKCS7_DigestAlgorithmIdentifier*)pnode->data;
      asn1Free_PKCS7_DigestAlgorithmIdentifier (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKCS7_DigestAlgorithmIdentifiers::MemFree ()
{
   asn1Free_PKCS7_DigestAlgorithmIdentifiers (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_SignerInfo* new_ASN1T_PKCS7_SignerInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_SignerInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_SignerInfo;
}

ASN1C_PKCS7_SignerInfo::ASN1C_PKCS7_SignerInfo (ASN1T_PKCS7_SignerInfo& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_SignerInfo::ASN1C_PKCS7_SignerInfo (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_SignerInfo& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_SignerInfo::ASN1C_PKCS7_SignerInfo (OSRTContext &context
   , ASN1T_PKCS7_SignerInfo& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_SignerInfo::ASN1T_PKCS7_SignerInfo ()
{
   m.authenticatedAttributesPresent = 0;
   m.unauthenticatedAttributesPresent = 0;
}

ASN1T_PKCS7_SignerInfo::~ASN1T_PKCS7_SignerInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_SignerInfo (pctxt, this);
   }
}

int ASN1C_PKCS7_SignerInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_SignerInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_SignerInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_SignerInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_SignerInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_SignerInfo (ASN1T_PKCS7_SignerInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_SignerInfo;
}

void asn1Free_PKCS7_SignerInfo (OSCTXT *pctxt, ASN1T_PKCS7_SignerInfo* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7_IssuerAndSerialNumber (pctxt, &pvalue->issuerAndSerialNumber);
   asn1Free_PKCS7_DigestAlgorithmIdentifier (pctxt, &pvalue->digestAlgorithm);
   if (pvalue->m.authenticatedAttributesPresent) {
      asn1Free_PKCS10_Attributes (pctxt, &pvalue->authenticatedAttributes);
   }
   asn1Free_PKCS7_DigestEncryptionAlgorithmIdentifier (pctxt, &pvalue->digestEncryptionAlgorithm);
   asn1Free_PKCS7_EncryptedDigest (pctxt, &pvalue->encryptedDigest);
   if (pvalue->m.unauthenticatedAttributesPresent) {
      asn1Free_PKCS10_Attributes (pctxt, &pvalue->unauthenticatedAttributes);
   }
}

void ASN1C_PKCS7_SignerInfo::MemFree ()
{
   asn1Free_PKCS7_SignerInfo (getCtxtPtr(), &msgData);
}

ASN1C_PKCS7_SignerInfos::ASN1C_PKCS7_SignerInfos
    (ASN1T_PKCS7_SignerInfos& data) : ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_SignerInfos::ASN1C_PKCS7_SignerInfos (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_SignerInfos& data) : ASN1CSeqOfList(msgBuf, data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_SignerInfos::ASN1C_PKCS7_SignerInfos (OSRTContext &context
   , ASN1T_PKCS7_SignerInfos& data) : ASN1CSeqOfList(context, data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKCS7_SignerInfos::ASN1C_PKCS7_SignerInfos (ASN1CType& ccobj
   , ASN1T_PKCS7_SignerInfos& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKCS7_SignerInfos::Append (ASN1T_PKCS7_SignerInfo* elem)
{
   append ((void*)elem);
}

ASN1T_PKCS7_SignerInfo* ASN1C_PKCS7_SignerInfos::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_PKCS7_SignerInfo));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_SignerInfo;
}

ASN1T_PKCS7_SignerInfo* ASN1C_PKCS7_SignerInfos::AppendNewElement ()
{
   ASN1T_PKCS7_SignerInfo* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKCS7_SignerInfos::~ASN1T_PKCS7_SignerInfos ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_SignerInfos (pctxt, this);
   }
}

int ASN1C_PKCS7_SignerInfos::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_SignerInfos (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_SignerInfos::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_SignerInfos;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_SignerInfos (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_SignerInfos (ASN1T_PKCS7_SignerInfos* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_SignerInfos;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKCS7_SignerInfos (OSCTXT *pctxt, 
   ASN1T_PKCS7_SignerInfos* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_PKCS7_SignerInfo* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_PKCS7_SignerInfo*)pnode->data;
      asn1Free_PKCS7_SignerInfo (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKCS7_SignerInfos::MemFree ()
{
   asn1Free_PKCS7_SignerInfos (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_SignedData* new_ASN1T_PKCS7_SignedData (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_SignedData));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_SignedData;
}

ASN1C_PKCS7_SignedData::ASN1C_PKCS7_SignedData (ASN1T_PKCS7_SignedData& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_SignedData::ASN1C_PKCS7_SignedData (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_SignedData& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_SignedData::ASN1C_PKCS7_SignedData (OSRTContext &context
   , ASN1T_PKCS7_SignedData& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_SignedData::ASN1T_PKCS7_SignedData ()
{
   m.certificatesPresent = 0;
   m.crlsPresent = 0;
}

ASN1T_PKCS7_SignedData::~ASN1T_PKCS7_SignedData ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_SignedData (pctxt, this);
   }
}

int ASN1C_PKCS7_SignedData::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_SignedData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_SignedData::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_SignedData;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_SignedData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_SignedData (ASN1T_PKCS7_SignedData* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_SignedData;
}

void asn1Free_PKCS7_SignedData (OSCTXT *pctxt, ASN1T_PKCS7_SignedData* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7_DigestAlgorithmIdentifiers (pctxt, &pvalue->digestAlgorithms);
   asn1Free_PKCS7_ContentInfo (pctxt, &pvalue->contentInfo);
   if (pvalue->m.certificatesPresent) {
      asn1Free_PKCS7_ExtendedCertificatesAndCertificates (pctxt, &pvalue->certificates);
   }
   if (pvalue->m.crlsPresent) {
      asn1Free_PKCS7_CertificateRevocationLists (pctxt, &pvalue->crls);
   }
   asn1Free_PKCS7_SignerInfos (pctxt, &pvalue->signerInfos);
}

void ASN1C_PKCS7_SignedData::MemFree ()
{
   asn1Free_PKCS7_SignedData (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_DigestInfo* new_ASN1T_PKCS7_DigestInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_DigestInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_DigestInfo;
}

ASN1C_PKCS7_DigestInfo::ASN1C_PKCS7_DigestInfo (ASN1T_PKCS7_DigestInfo& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_DigestInfo::ASN1C_PKCS7_DigestInfo (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_DigestInfo& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_DigestInfo::ASN1C_PKCS7_DigestInfo (OSRTContext &context
   , ASN1T_PKCS7_DigestInfo& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_DigestInfo::ASN1T_PKCS7_DigestInfo ()
{
}

ASN1T_PKCS7_DigestInfo::~ASN1T_PKCS7_DigestInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_DigestInfo (pctxt, this);
   }
}

int ASN1C_PKCS7_DigestInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_DigestInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_DigestInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_DigestInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_DigestInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_DigestInfo (ASN1T_PKCS7_DigestInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_DigestInfo;
}

void asn1Free_PKCS7_DigestInfo (OSCTXT *pctxt, ASN1T_PKCS7_DigestInfo* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7_DigestAlgorithmIdentifier (pctxt, &pvalue->digestAlgorithm);
   asn1Free_PKCS7_Digest (pctxt, &pvalue->digest);
}

void ASN1C_PKCS7_DigestInfo::MemFree ()
{
   asn1Free_PKCS7_DigestInfo (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_RecipientInfo* new_ASN1T_PKCS7_RecipientInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_RecipientInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_RecipientInfo;
}

ASN1C_PKCS7_RecipientInfo::ASN1C_PKCS7_RecipientInfo
    (ASN1T_PKCS7_RecipientInfo& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_RecipientInfo::ASN1C_PKCS7_RecipientInfo (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_RecipientInfo& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_RecipientInfo::ASN1C_PKCS7_RecipientInfo (OSRTContext &context
   , ASN1T_PKCS7_RecipientInfo& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_RecipientInfo::ASN1T_PKCS7_RecipientInfo ()
{
}

ASN1T_PKCS7_RecipientInfo::~ASN1T_PKCS7_RecipientInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_RecipientInfo (pctxt, this);
   }
}

int ASN1C_PKCS7_RecipientInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_RecipientInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_RecipientInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_RecipientInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_RecipientInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_RecipientInfo (ASN1T_PKCS7_RecipientInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_RecipientInfo;
}

void asn1Free_PKCS7_RecipientInfo (OSCTXT *pctxt, 
   ASN1T_PKCS7_RecipientInfo* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7_IssuerAndSerialNumber (pctxt, &pvalue->issuerAndSerialNumber);
   asn1Free_PKCS7_KeyEncryptionAlgorithmIdentifier (pctxt, &pvalue->keyEncryptionAlgorithm);
   asn1Free_PKCS7_EncryptedKey (pctxt, &pvalue->encryptedKey);
}

void ASN1C_PKCS7_RecipientInfo::MemFree ()
{
   asn1Free_PKCS7_RecipientInfo (getCtxtPtr(), &msgData);
}

ASN1C_PKCS7_RecipientInfos::ASN1C_PKCS7_RecipientInfos
    (ASN1T_PKCS7_RecipientInfos& data) : ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_RecipientInfos::ASN1C_PKCS7_RecipientInfos (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_RecipientInfos& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_RecipientInfos::ASN1C_PKCS7_RecipientInfos (OSRTContext &context
   , ASN1T_PKCS7_RecipientInfos& data) : ASN1CSeqOfList(context, data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKCS7_RecipientInfos::ASN1C_PKCS7_RecipientInfos (ASN1CType& ccobj
   , ASN1T_PKCS7_RecipientInfos& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKCS7_RecipientInfos::Append (ASN1T_PKCS7_RecipientInfo* elem)
{
   append ((void*)elem);
}

ASN1T_PKCS7_RecipientInfo* ASN1C_PKCS7_RecipientInfos::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_PKCS7_RecipientInfo));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_RecipientInfo;
}

ASN1T_PKCS7_RecipientInfo* ASN1C_PKCS7_RecipientInfos::AppendNewElement ()
{
   ASN1T_PKCS7_RecipientInfo* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKCS7_RecipientInfos::~ASN1T_PKCS7_RecipientInfos ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_RecipientInfos (pctxt, this);
   }
}

int ASN1C_PKCS7_RecipientInfos::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_RecipientInfos (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_RecipientInfos::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_RecipientInfos;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_RecipientInfos (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_RecipientInfos (ASN1T_PKCS7_RecipientInfos* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_RecipientInfos;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKCS7_RecipientInfos (OSCTXT *pctxt, 
   ASN1T_PKCS7_RecipientInfos* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_PKCS7_RecipientInfo* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_PKCS7_RecipientInfo*)pnode->data;
      asn1Free_PKCS7_RecipientInfo (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKCS7_RecipientInfos::MemFree ()
{
   asn1Free_PKCS7_RecipientInfos (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_EncryptedContentInfo* 
   new_ASN1T_PKCS7_EncryptedContentInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_EncryptedContentInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_EncryptedContentInfo;
}

ASN1C_PKCS7_EncryptedContentInfo::ASN1C_PKCS7_EncryptedContentInfo
    (ASN1T_PKCS7_EncryptedContentInfo& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_EncryptedContentInfo::ASN1C_PKCS7_EncryptedContentInfo (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_EncryptedContentInfo& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_EncryptedContentInfo::ASN1C_PKCS7_EncryptedContentInfo (
   OSRTContext &context, ASN1T_PKCS7_EncryptedContentInfo& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_EncryptedContentInfo::ASN1T_PKCS7_EncryptedContentInfo ()
{
   m.encryptedContentPresent = 0;
}

ASN1T_PKCS7_EncryptedContentInfo::~ASN1T_PKCS7_EncryptedContentInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_EncryptedContentInfo (pctxt, this);
   }
}

int ASN1C_PKCS7_EncryptedContentInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_EncryptedContentInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_EncryptedContentInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_EncryptedContentInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_EncryptedContentInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_EncryptedContentInfo (
   ASN1T_PKCS7_EncryptedContentInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_EncryptedContentInfo;
}

void asn1Free_PKCS7_EncryptedContentInfo (OSCTXT *pctxt, 
   ASN1T_PKCS7_EncryptedContentInfo* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7_ContentEncryptionAlgorithmIdentifier (pctxt, &pvalue->contentEncryptionAlgorithm);
   if (pvalue->m.encryptedContentPresent) {
      asn1Free_PKCS7_EncryptedContent (pctxt, &pvalue->encryptedContent);
   }
}

void ASN1C_PKCS7_EncryptedContentInfo::MemFree ()
{
   asn1Free_PKCS7_EncryptedContentInfo (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_EnvelopedData* new_ASN1T_PKCS7_EnvelopedData (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_EnvelopedData));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_EnvelopedData;
}

ASN1C_PKCS7_EnvelopedData::ASN1C_PKCS7_EnvelopedData
    (ASN1T_PKCS7_EnvelopedData& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_EnvelopedData::ASN1C_PKCS7_EnvelopedData (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_EnvelopedData& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_EnvelopedData::ASN1C_PKCS7_EnvelopedData (OSRTContext &context
   , ASN1T_PKCS7_EnvelopedData& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_EnvelopedData::ASN1T_PKCS7_EnvelopedData ()
{
}

ASN1T_PKCS7_EnvelopedData::~ASN1T_PKCS7_EnvelopedData ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_EnvelopedData (pctxt, this);
   }
}

int ASN1C_PKCS7_EnvelopedData::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_EnvelopedData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_EnvelopedData::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_EnvelopedData;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_EnvelopedData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_EnvelopedData (ASN1T_PKCS7_EnvelopedData* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_EnvelopedData;
}

void asn1Free_PKCS7_EnvelopedData (OSCTXT *pctxt, 
   ASN1T_PKCS7_EnvelopedData* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7_RecipientInfos (pctxt, &pvalue->recipientInfos);
   asn1Free_PKCS7_EncryptedContentInfo (pctxt, &pvalue->encryptedContentInfo);
}

void ASN1C_PKCS7_EnvelopedData::MemFree ()
{
   asn1Free_PKCS7_EnvelopedData (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_SignedAndEnvelopedData* 
   new_ASN1T_PKCS7_SignedAndEnvelopedData (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_SignedAndEnvelopedData));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_SignedAndEnvelopedData;
}

ASN1C_PKCS7_SignedAndEnvelopedData::ASN1C_PKCS7_SignedAndEnvelopedData
    (ASN1T_PKCS7_SignedAndEnvelopedData& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_SignedAndEnvelopedData::ASN1C_PKCS7_SignedAndEnvelopedData (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_SignedAndEnvelopedData& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_SignedAndEnvelopedData::ASN1C_PKCS7_SignedAndEnvelopedData (
   OSRTContext &context, ASN1T_PKCS7_SignedAndEnvelopedData& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_SignedAndEnvelopedData::ASN1T_PKCS7_SignedAndEnvelopedData ()
{
   m.certificatesPresent = 0;
   m.crlsPresent = 0;
}

ASN1T_PKCS7_SignedAndEnvelopedData::~ASN1T_PKCS7_SignedAndEnvelopedData ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_SignedAndEnvelopedData (pctxt, this);
   }
}

int ASN1C_PKCS7_SignedAndEnvelopedData::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_SignedAndEnvelopedData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_SignedAndEnvelopedData::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_SignedAndEnvelopedData;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_SignedAndEnvelopedData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_SignedAndEnvelopedData (
   ASN1T_PKCS7_SignedAndEnvelopedData* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_SignedAndEnvelopedData;
}

void asn1Free_PKCS7_SignedAndEnvelopedData (OSCTXT *pctxt, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7_RecipientInfos (pctxt, &pvalue->recipientInfos);
   asn1Free_PKCS7_DigestAlgorithmIdentifiers (pctxt, &pvalue->digestAlgorithms);
   asn1Free_PKCS7_EncryptedContentInfo (pctxt, &pvalue->encryptedContentInfo);
   if (pvalue->m.certificatesPresent) {
      asn1Free_PKCS7_ExtendedCertificatesAndCertificates (pctxt, &pvalue->certificates);
   }
   if (pvalue->m.crlsPresent) {
      asn1Free_PKCS7_CertificateRevocationLists (pctxt, &pvalue->crls);
   }
   asn1Free_PKCS7_SignerInfos (pctxt, &pvalue->signerInfos);
}

void ASN1C_PKCS7_SignedAndEnvelopedData::MemFree ()
{
   asn1Free_PKCS7_SignedAndEnvelopedData (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_IssuerSerial* new_ASN1T_PKCS7_IssuerSerial (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_IssuerSerial));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_IssuerSerial;
}

ASN1C_PKCS7_IssuerSerial::ASN1C_PKCS7_IssuerSerial
    (ASN1T_PKCS7_IssuerSerial& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_IssuerSerial::ASN1C_PKCS7_IssuerSerial (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_IssuerSerial& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_IssuerSerial::ASN1C_PKCS7_IssuerSerial (OSRTContext &context
   , ASN1T_PKCS7_IssuerSerial& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_IssuerSerial::ASN1T_PKCS7_IssuerSerial ()
{
}

ASN1T_PKCS7_IssuerSerial::~ASN1T_PKCS7_IssuerSerial ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_IssuerSerial (pctxt, this);
   }
}

int ASN1C_PKCS7_IssuerSerial::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_IssuerSerial (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_IssuerSerial::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_IssuerSerial;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_IssuerSerial (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_IssuerSerial (ASN1T_PKCS7_IssuerSerial* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_IssuerSerial;
}

void asn1Free_PKCS7_IssuerSerial (OSCTXT *pctxt, 
   ASN1T_PKCS7_IssuerSerial* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_IMP_GeneralNames (pctxt, &pvalue->issuer);
}

void ASN1C_PKCS7_IssuerSerial::MemFree ()
{
   asn1Free_PKCS7_IssuerSerial (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_ESSCertID* new_ASN1T_PKCS7_ESSCertID (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_ESSCertID));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_ESSCertID;
}

ASN1C_PKCS7_ESSCertID::ASN1C_PKCS7_ESSCertID (ASN1T_PKCS7_ESSCertID& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_ESSCertID::ASN1C_PKCS7_ESSCertID (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7_ESSCertID& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_ESSCertID::ASN1C_PKCS7_ESSCertID (OSRTContext &context
   , ASN1T_PKCS7_ESSCertID& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_ESSCertID::ASN1T_PKCS7_ESSCertID ()
{
   m.issuerSerialPresent = 0;
}

ASN1T_PKCS7_ESSCertID::~ASN1T_PKCS7_ESSCertID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_ESSCertID (pctxt, this);
   }
}

int ASN1C_PKCS7_ESSCertID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_ESSCertID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_ESSCertID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_ESSCertID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_ESSCertID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_ESSCertID (ASN1T_PKCS7_ESSCertID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_ESSCertID;
}

void asn1Free_PKCS7_ESSCertID (OSCTXT *pctxt, ASN1T_PKCS7_ESSCertID* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7_Hash (pctxt, &pvalue->certHash);
   if (pvalue->m.issuerSerialPresent) {
      asn1Free_PKCS7_IssuerSerial (pctxt, &pvalue->issuerSerial);
   }
}

void ASN1C_PKCS7_ESSCertID::MemFree ()
{
   asn1Free_PKCS7_ESSCertID (getCtxtPtr(), &msgData);
}

ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::ASN1C_PKCS7__SeqOfPKCS7_ESSCertID
    (ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (
   OSRTContext &context, ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (ASN1CType& ccobj
   , ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::Append (ASN1T_PKCS7_ESSCertID* elem)
{
   append ((void*)elem);
}

ASN1T_PKCS7_ESSCertID* ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_PKCS7_ESSCertID));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_ESSCertID;
}

ASN1T_PKCS7_ESSCertID* ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::AppendNewElement ()
{
   ASN1T_PKCS7_ESSCertID* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKCS7__SeqOfPKCS7_ESSCertID::~ASN1T_PKCS7__SeqOfPKCS7_ESSCertID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7__SeqOfPKCS7_ESSCertID (pctxt, this);
   }
}

int ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7__SeqOfPKCS7_ESSCertID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7__SeqOfPKCS7_ESSCertID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7__SeqOfPKCS7_ESSCertID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7__SeqOfPKCS7_ESSCertID (
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7__SeqOfPKCS7_ESSCertID;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT *pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_PKCS7_ESSCertID* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_PKCS7_ESSCertID*)pnode->data;
      asn1Free_PKCS7_ESSCertID (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::MemFree ()
{
   asn1Free_PKCS7__SeqOfPKCS7_ESSCertID (getCtxtPtr(), &msgData);
}

ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation
    (ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation (OSRTContext &context
   , ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation (ASN1CType& ccobj
   , ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::Append (ASN1T_IMP_PolicyInformation* elem)
{
   append ((void*)elem);
}

ASN1T_IMP_PolicyInformation* ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_IMP_PolicyInformation));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_IMP_PolicyInformation;
}

ASN1T_IMP_PolicyInformation* ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::AppendNewElement ()
{
   ASN1T_IMP_PolicyInformation* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation::~ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, this);
   }
}

int ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7__SeqOfPKCS7_PolicyInformation (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7__SeqOfPKCS7_PolicyInformation (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7__SeqOfPKCS7_PolicyInformation (
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT *pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_IMP_PolicyInformation* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_IMP_PolicyInformation*)pnode->data;
      asn1Free_IMP_PolicyInformation (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::MemFree ()
{
   asn1Free_PKCS7__SeqOfPKCS7_PolicyInformation (getCtxtPtr(), &msgData);
}

ASN1T_PKCS7_SigningCertificate* 
   new_ASN1T_PKCS7_SigningCertificate (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS7_SigningCertificate));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS7_SigningCertificate;
}

ASN1C_PKCS7_SigningCertificate::ASN1C_PKCS7_SigningCertificate
    (ASN1T_PKCS7_SigningCertificate& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS7_SigningCertificate::ASN1C_PKCS7_SigningCertificate (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_SigningCertificate& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS7_SigningCertificate::ASN1C_PKCS7_SigningCertificate (
   OSRTContext &context, ASN1T_PKCS7_SigningCertificate& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS7_SigningCertificate::ASN1T_PKCS7_SigningCertificate ()
{
   m.policiesPresent = 0;
}

ASN1T_PKCS7_SigningCertificate::~ASN1T_PKCS7_SigningCertificate ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS7_SigningCertificate (pctxt, this);
   }
}

int ASN1C_PKCS7_SigningCertificate::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS7_SigningCertificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS7_SigningCertificate::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS7_SigningCertificate;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS7_SigningCertificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS7_SigningCertificate (ASN1T_PKCS7_SigningCertificate* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS7_SigningCertificate;
}

void asn1Free_PKCS7_SigningCertificate (OSCTXT *pctxt, 
   ASN1T_PKCS7_SigningCertificate* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS7__SeqOfPKCS7_ESSCertID (pctxt, &pvalue->certs);
   if (pvalue->m.policiesPresent) {
      asn1Free_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, &pvalue->policies);
   }
}

void ASN1C_PKCS7_SigningCertificate::MemFree ()
{
   asn1Free_PKCS7_SigningCertificate (getCtxtPtr(), &msgData);
}

