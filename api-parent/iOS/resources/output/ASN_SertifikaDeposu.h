/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#ifndef ASN_SERTIFIKADEPOSU_H
#define ASN_SERTIFIKADEPOSU_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "Explicit.h"
#include "Implicit.h"

/**
 * Header file for ASN.1 module ASN_SertifikaDeposu
 */
/**************************************************************/
/*                                                            */
/*  KokSertifikaTipi                                          */
/*                                                            */
/**************************************************************/
/*
KokSertifikaTipi ::= ENUMERATED { kokSertifika(1), caprazSertifika(2), smSertifikasi(3), hizmetSertifikasi(4) }
*/
#define TV_SD_KokSertifikaTipi	(TM_UNIV|TM_PRIM|10)

struct EXTERN SD_KokSertifikaTipi {
   enum Root {
      kokSertifika = 1,
      caprazSertifika = 2,
      smSertifikasi = 3,
      hizmetSertifikasi = 4
   } ;
} ;

typedef OSUINT32 ASN1T_SD_KokSertifikaTipi;

class EXTERN ASN1C_SD_KokSertifikaTipi :
public ASN1CType
{
protected:
   ASN1T_SD_KokSertifikaTipi& msgData;
public:
   ASN1C_SD_KokSertifikaTipi (ASN1T_SD_KokSertifikaTipi& data);
   ASN1C_SD_KokSertifikaTipi (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_KokSertifikaTipi& data);
   ASN1C_SD_KokSertifikaTipi (OSRTContext &context
      , ASN1T_SD_KokSertifikaTipi& data);
   virtual ~ASN1C_SD_KokSertifikaTipi () {}
   inline ASN1T_SD_KokSertifikaTipi& getData () { return msgData; }
   inline const ASN1T_SD_KokSertifikaTipi& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KokSertifikaTipi");
   int toStream (const char* name = "KokSertifikaTipi");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_KokSertifikaTipi* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_SD_KokSertifikaTipi (OSCTXT* pctxt,
   ASN1T_SD_KokSertifikaTipi *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_KokSertifikaTipi (OSCTXT* pctxt, 
   ASN1T_SD_KokSertifikaTipi* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_SD_KokSertifikaTipi 
   (const char* name, const ASN1T_SD_KokSertifikaTipi* pvalue);

EXTERN int asn1PrtToStrm_SD_KokSertifikaTipi (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_KokSertifikaTipi* pvalue);

EXTERN ASN1T_SD_KokSertifikaTipi* 
   new_ASN1T_SD_KokSertifikaTipi (ASN1CType& ccobj);

EXTERN const OSUTF8CHAR* ASN1T_SD_KokSertifikaTipi_ToString (OSINT32 value);

EXTERN int ASN1T_SD_KokSertifikaTipi_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SD_KokSertifikaTipi* pvalue);

EXTERN int ASN1T_SD_KokSertifikaTipi_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_SD_KokSertifikaTipi* pvalue)
      ;

EXTERN OSBOOL asn1Compare_SD_KokSertifikaTipi (const char* name, 
   ASN1T_SD_KokSertifikaTipi* pValue, ASN1T_SD_KokSertifikaTipi* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  KOKGuvenSeviyesi                                          */
/*                                                            */
/**************************************************************/
/*
KOKGuvenSeviyesi ::= ENUMERATED { kanuni(1), kurumsal(2), kisisel(3) }
*/
#define TV_SD_KOKGuvenSeviyesi	(TM_UNIV|TM_PRIM|10)

struct EXTERN SD_KOKGuvenSeviyesi {
   enum Root {
      kanuni = 1,
      kurumsal = 2,
      kisisel = 3
   } ;
} ;

typedef OSUINT32 ASN1T_SD_KOKGuvenSeviyesi;

class EXTERN ASN1C_SD_KOKGuvenSeviyesi :
public ASN1CType
{
protected:
   ASN1T_SD_KOKGuvenSeviyesi& msgData;
public:
   ASN1C_SD_KOKGuvenSeviyesi (ASN1T_SD_KOKGuvenSeviyesi& data);
   ASN1C_SD_KOKGuvenSeviyesi (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_KOKGuvenSeviyesi& data);
   ASN1C_SD_KOKGuvenSeviyesi (OSRTContext &context
      , ASN1T_SD_KOKGuvenSeviyesi& data);
   virtual ~ASN1C_SD_KOKGuvenSeviyesi () {}
   inline ASN1T_SD_KOKGuvenSeviyesi& getData () { return msgData; }
   inline const ASN1T_SD_KOKGuvenSeviyesi& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KOKGuvenSeviyesi");
   int toStream (const char* name = "KOKGuvenSeviyesi");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_KOKGuvenSeviyesi* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_SD_KOKGuvenSeviyesi (OSCTXT* pctxt,
   ASN1T_SD_KOKGuvenSeviyesi *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_KOKGuvenSeviyesi (OSCTXT* pctxt, 
   ASN1T_SD_KOKGuvenSeviyesi* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_SD_KOKGuvenSeviyesi 
   (const char* name, const ASN1T_SD_KOKGuvenSeviyesi* pvalue);

EXTERN int asn1PrtToStrm_SD_KOKGuvenSeviyesi (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_KOKGuvenSeviyesi* pvalue);

EXTERN ASN1T_SD_KOKGuvenSeviyesi* 
   new_ASN1T_SD_KOKGuvenSeviyesi (ASN1CType& ccobj);

EXTERN const OSUTF8CHAR* ASN1T_SD_KOKGuvenSeviyesi_ToString (OSINT32 value);

EXTERN int ASN1T_SD_KOKGuvenSeviyesi_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SD_KOKGuvenSeviyesi* pvalue);

EXTERN int ASN1T_SD_KOKGuvenSeviyesi_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_SD_KOKGuvenSeviyesi* pvalue)
      ;

EXTERN OSBOOL asn1Compare_SD_KOKGuvenSeviyesi (const char* name, 
   ASN1T_SD_KOKGuvenSeviyesi* pValue, ASN1T_SD_KOKGuvenSeviyesi* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  DepoASNEklenecekKokSertifika                              */
/*                                                            */
/**************************************************************/
/*
DepoASNEklenecekKokSertifika ::= SEQUENCE {
   kokSertifikaValue [0] OCTET STRING,
   kokSertifikaHash [1] OCTET STRING,
   kokSerialNumber [2] CertificateSerialNumber,
   kokIssuerName [3] Name,
   kokSubjectName [4] Name,
   kokStartDate [5] Time,
   kokEndDate [6] Time,
   kokKeyUsage [7] KeyUsage,
   kokSubjectKeyIdentifier [8] SubjectKeyIdentifier,
   kokSertifikaTipi [9] KokSertifikaTipi,
   kokGuvenSeviyesi [10] KOKGuvenSeviyesi
}
*/
#define TV_SD_DepoASNEklenecekKokSertifika	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_SD_DepoASNEklenecekKokSertifika;

struct EXTERN ASN1T_SD_DepoASNEklenecekKokSertifika : public ASN1TPDU {
   ASN1TDynOctStr kokSertifikaValue;
   ASN1TDynOctStr kokSertifikaHash;
   ASN1T_EXP_CertificateSerialNumber kokSerialNumber;
   ASN1T_EXP_Name kokIssuerName;
   ASN1T_EXP_Name kokSubjectName;
   ASN1T_EXP_Time kokStartDate;
   ASN1T_EXP_Time kokEndDate;
   ASN1T_IMP_KeyUsage kokKeyUsage;
   ASN1T_IMP_SubjectKeyIdentifier kokSubjectKeyIdentifier;
   ASN1T_SD_KokSertifikaTipi kokSertifikaTipi;
   ASN1T_SD_KOKGuvenSeviyesi kokGuvenSeviyesi;
   ASN1T_SD_DepoASNEklenecekKokSertifika ();
   ASN1T_SD_DepoASNEklenecekKokSertifika (ASN1C_SD_DepoASNEklenecekKokSertifika& srcData);
   ~ASN1T_SD_DepoASNEklenecekKokSertifika ();
} ;

class EXTERN ASN1C_SD_DepoASNEklenecekKokSertifika :
public ASN1CType
{
protected:
   ASN1T_SD_DepoASNEklenecekKokSertifika& msgData;
public:
   ASN1C_SD_DepoASNEklenecekKokSertifika
       (ASN1T_SD_DepoASNEklenecekKokSertifika& data);
   ASN1C_SD_DepoASNEklenecekKokSertifika (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_DepoASNEklenecekKokSertifika& data);
   ASN1C_SD_DepoASNEklenecekKokSertifika (OSRTContext &context
      , ASN1T_SD_DepoASNEklenecekKokSertifika& data);
   ASN1C_SD_DepoASNEklenecekKokSertifika (ASN1C_SD_DepoASNEklenecekKokSertifika& original);
   virtual ~ASN1C_SD_DepoASNEklenecekKokSertifika () {}
   inline ASN1T_SD_DepoASNEklenecekKokSertifika& getData () { return msgData; }
   inline const ASN1T_SD_DepoASNEklenecekKokSertifika& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DepoASNEklenecekKokSertifika");
   int toStream (const char* name = "DepoASNEklenecekKokSertifika");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_DepoASNEklenecekKokSertifika* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_SD_DepoASNEklenecekKokSertifika& getCopy (ASN1T_SD_DepoASNEklenecekKokSertifika* pDstData = 0);
   ASN1T_SD_DepoASNEklenecekKokSertifika* newCopy ();

   inline ASN1C_SD_DepoASNEklenecekKokSertifika& operator= (ASN1C_SD_DepoASNEklenecekKokSertifika& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_SD_DepoASNEklenecekKokSertifika (OSCTXT* pctxt,
   ASN1T_SD_DepoASNEklenecekKokSertifika *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_DepoASNEklenecekKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_SD_DepoASNEklenecekKokSertifika 
   (const char* name, const ASN1T_SD_DepoASNEklenecekKokSertifika* pvalue);

EXTERN int asn1PrtToStrm_SD_DepoASNEklenecekKokSertifika (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNEklenecekKokSertifika* pvalue);

EXTERN ASN1T_SD_DepoASNEklenecekKokSertifika* 
   new_ASN1T_SD_DepoASNEklenecekKokSertifika (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_SD_DepoASNEklenecekKokSertifika (const char* name, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pValue, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_SD_DepoASNEklenecekKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pSrcValue, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pDstValue);

EXTERN void asn1Init_SD_DepoASNEklenecekKokSertifika (
   ASN1T_SD_DepoASNEklenecekKokSertifika* pvalue);

EXTERN void asn1Free_SD_DepoASNEklenecekKokSertifika (OSCTXT *pctxt, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pvalue);

/**************************************************************/
/*                                                            */
/*  DepoASNSilinecekKokSertifika                              */
/*                                                            */
/**************************************************************/
/*
DepoASNSilinecekKokSertifika ::= SEQUENCE {
   kokSertifikaValue [0] OCTET STRING,
   kokSerialNumber [1] CertificateSerialNumber,
   kokIssuerName [2] Name,
   kokSubjectName [3] Name
}
*/
#define TV_SD_DepoASNSilinecekKokSertifika	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_SD_DepoASNSilinecekKokSertifika;

struct EXTERN ASN1T_SD_DepoASNSilinecekKokSertifika : public ASN1TPDU {
   ASN1TDynOctStr kokSertifikaValue;
   ASN1T_EXP_CertificateSerialNumber kokSerialNumber;
   ASN1T_EXP_Name kokIssuerName;
   ASN1T_EXP_Name kokSubjectName;
   ASN1T_SD_DepoASNSilinecekKokSertifika ();
   ASN1T_SD_DepoASNSilinecekKokSertifika (ASN1C_SD_DepoASNSilinecekKokSertifika& srcData);
   ~ASN1T_SD_DepoASNSilinecekKokSertifika ();
} ;

class EXTERN ASN1C_SD_DepoASNSilinecekKokSertifika :
public ASN1CType
{
protected:
   ASN1T_SD_DepoASNSilinecekKokSertifika& msgData;
public:
   ASN1C_SD_DepoASNSilinecekKokSertifika
       (ASN1T_SD_DepoASNSilinecekKokSertifika& data);
   ASN1C_SD_DepoASNSilinecekKokSertifika (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_DepoASNSilinecekKokSertifika& data);
   ASN1C_SD_DepoASNSilinecekKokSertifika (OSRTContext &context
      , ASN1T_SD_DepoASNSilinecekKokSertifika& data);
   ASN1C_SD_DepoASNSilinecekKokSertifika (ASN1C_SD_DepoASNSilinecekKokSertifika& original);
   virtual ~ASN1C_SD_DepoASNSilinecekKokSertifika () {}
   inline ASN1T_SD_DepoASNSilinecekKokSertifika& getData () { return msgData; }
   inline const ASN1T_SD_DepoASNSilinecekKokSertifika& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DepoASNSilinecekKokSertifika");
   int toStream (const char* name = "DepoASNSilinecekKokSertifika");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_DepoASNSilinecekKokSertifika* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_SD_DepoASNSilinecekKokSertifika& getCopy (ASN1T_SD_DepoASNSilinecekKokSertifika* pDstData = 0);
   ASN1T_SD_DepoASNSilinecekKokSertifika* newCopy ();

   inline ASN1C_SD_DepoASNSilinecekKokSertifika& operator= (ASN1C_SD_DepoASNSilinecekKokSertifika& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_SD_DepoASNSilinecekKokSertifika (OSCTXT* pctxt,
   ASN1T_SD_DepoASNSilinecekKokSertifika *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_DepoASNSilinecekKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_SD_DepoASNSilinecekKokSertifika 
   (const char* name, const ASN1T_SD_DepoASNSilinecekKokSertifika* pvalue);

EXTERN int asn1PrtToStrm_SD_DepoASNSilinecekKokSertifika (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNSilinecekKokSertifika* pvalue);

EXTERN ASN1T_SD_DepoASNSilinecekKokSertifika* 
   new_ASN1T_SD_DepoASNSilinecekKokSertifika (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_SD_DepoASNSilinecekKokSertifika (const char* name, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pValue, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_SD_DepoASNSilinecekKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pSrcValue, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pDstValue);

EXTERN void asn1Init_SD_DepoASNSilinecekKokSertifika (
   ASN1T_SD_DepoASNSilinecekKokSertifika* pvalue);

EXTERN void asn1Free_SD_DepoASNSilinecekKokSertifika (OSCTXT *pctxt, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pvalue);

/**************************************************************/
/*                                                            */
/*  DepoASNKokSertifika                                       */
/*                                                            */
/**************************************************************/
/*
DepoASNKokSertifika ::= CHOICE {
   eklenecekSertifika [0] DepoASNEklenecekKokSertifika,
   silinecekSertifika [1] DepoASNSilinecekKokSertifika
}
*/
/* Choice context tags */

#define TVC_SD_DepoASNKokSertifika_eklenecekSertifika	(TM_CTXT|TM_CONS|0)
#define TVC_SD_DepoASNKokSertifika_silinecekSertifika	(TM_CTXT|TM_CONS|1)

/* Choice tag constants */

#define T_SD_DepoASNKokSertifika_eklenecekSertifika 1
#define T_SD_DepoASNKokSertifika_silinecekSertifika 2

class EXTERN ASN1C_SD_DepoASNKokSertifika;

struct EXTERN ASN1T_SD_DepoASNKokSertifika : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_SD_DepoASNEklenecekKokSertifika *eklenecekSertifika;
      /* t = 2 */
      ASN1T_SD_DepoASNSilinecekKokSertifika *silinecekSertifika;
   } u;
   ASN1T_SD_DepoASNKokSertifika () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_SD_DepoASNKokSertifika (ASN1C_SD_DepoASNKokSertifika& srcData);
   ~ASN1T_SD_DepoASNKokSertifika ();
} ;

class EXTERN ASN1C_SD_DepoASNKokSertifika :
public ASN1CType
{
protected:
   ASN1T_SD_DepoASNKokSertifika& msgData;
public:
   ASN1C_SD_DepoASNKokSertifika (ASN1T_SD_DepoASNKokSertifika& data);
   ASN1C_SD_DepoASNKokSertifika (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_DepoASNKokSertifika& data);
   ASN1C_SD_DepoASNKokSertifika (OSRTContext &context
      , ASN1T_SD_DepoASNKokSertifika& data);
   ASN1C_SD_DepoASNKokSertifika (ASN1C_SD_DepoASNKokSertifika& original);
   virtual ~ASN1C_SD_DepoASNKokSertifika () {}
   inline ASN1T_SD_DepoASNKokSertifika& getData () { return msgData; }
   inline const ASN1T_SD_DepoASNKokSertifika& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DepoASNKokSertifika");
   int toStream (const char* name = "DepoASNKokSertifika");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_DepoASNKokSertifika* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_SD_DepoASNKokSertifika& getCopy (ASN1T_SD_DepoASNKokSertifika* pDstData = 0);
   ASN1T_SD_DepoASNKokSertifika* newCopy ();

   inline ASN1C_SD_DepoASNKokSertifika& operator= (ASN1C_SD_DepoASNKokSertifika& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_SD_DepoASNKokSertifika (OSCTXT* pctxt,
   ASN1T_SD_DepoASNKokSertifika *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_DepoASNKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNKokSertifika* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_SD_DepoASNKokSertifika 
   (const char* name, const ASN1T_SD_DepoASNKokSertifika* pvalue);

EXTERN int asn1PrtToStrm_SD_DepoASNKokSertifika (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNKokSertifika* pvalue);

EXTERN ASN1T_SD_DepoASNKokSertifika* 
   new_ASN1T_SD_DepoASNKokSertifika (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_SD_DepoASNKokSertifika (const char* name, 
   ASN1T_SD_DepoASNKokSertifika* pValue, 
   ASN1T_SD_DepoASNKokSertifika* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_SD_DepoASNKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNKokSertifika* pSrcValue, ASN1T_SD_DepoASNKokSertifika*
    pDstValue);

EXTERN void asn1Init_SD_DepoASNKokSertifika (ASN1T_SD_DepoASNKokSertifika* pvalue);

EXTERN void asn1Free_SD_DepoASNKokSertifika (OSCTXT *pctxt, 
   ASN1T_SD_DepoASNKokSertifika* pvalue);

/**************************************************************/
/*                                                            */
/*  DepoASNKokSertifikalar                                    */
/*                                                            */
/**************************************************************/
/*
DepoASNKokSertifikalar ::= SEQUENCE OF DepoASNKokSertifika
*/
#define TV_SD_DepoASNKokSertifikalar	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_SD_DepoASNKokSertifikalar;

/* List of ASN1T_SD_DepoASNKokSertifika */
typedef struct EXTERN ASN1T_SD_DepoASNKokSertifikalar : public ASN1TPDUSeqOfList {
   ~ASN1T_SD_DepoASNKokSertifikalar();
} ASN1T_SD_DepoASNKokSertifikalar;

class EXTERN ASN1C_SD_DepoASNKokSertifikalar :
public ASN1CSeqOfList
{
protected:
   ASN1T_SD_DepoASNKokSertifikalar& msgData;
public:
   ASN1C_SD_DepoASNKokSertifikalar (ASN1T_SD_DepoASNKokSertifikalar& data);
   ASN1C_SD_DepoASNKokSertifikalar (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_DepoASNKokSertifikalar& data);
   ASN1C_SD_DepoASNKokSertifikalar (ASN1CType& ccobj
      , ASN1T_SD_DepoASNKokSertifikalar& data);
   ASN1C_SD_DepoASNKokSertifikalar (OSRTContext &context
      , ASN1T_SD_DepoASNKokSertifikalar& data);
   ASN1C_SD_DepoASNKokSertifikalar (ASN1C_SD_DepoASNKokSertifikalar& original);
   virtual ~ASN1C_SD_DepoASNKokSertifikalar () {}
   inline ASN1T_SD_DepoASNKokSertifikalar& getData () { return msgData; }
   inline const ASN1T_SD_DepoASNKokSertifikalar& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DepoASNKokSertifikalar");
   int toStream (const char* name = "DepoASNKokSertifikalar");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_DepoASNKokSertifikalar* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_SD_DepoASNKokSertifikalar& getCopy (ASN1T_SD_DepoASNKokSertifikalar* pDstData = 0);
   ASN1T_SD_DepoASNKokSertifikalar* newCopy ();

   ASN1C_SD_DepoASNKokSertifikalar& operator= (ASN1C_SD_DepoASNKokSertifikalar& srcData);
   void Append (ASN1T_SD_DepoASNKokSertifika* elem);
   ASN1T_SD_DepoASNKokSertifika* NewElement ();
   ASN1T_SD_DepoASNKokSertifika* AppendNewElement ();
} ;

EXTERN int asn1E_SD_DepoASNKokSertifikalar (OSCTXT* pctxt,
   ASN1T_SD_DepoASNKokSertifikalar *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_DepoASNKokSertifikalar (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNKokSertifikalar* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_SD_DepoASNKokSertifikalar 
   (const char* name, const ASN1T_SD_DepoASNKokSertifikalar* pvalue);

EXTERN int asn1PrtToStrm_SD_DepoASNKokSertifikalar (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNKokSertifikalar* pvalue);

EXTERN OSBOOL asn1Compare_SD_DepoASNKokSertifikalar (const char* name, 
   ASN1T_SD_DepoASNKokSertifikalar* pValue, 
   ASN1T_SD_DepoASNKokSertifikalar* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_SD_DepoASNKokSertifikalar (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNKokSertifikalar* pSrcValue, ASN1T_SD_DepoASNKokSertifikalar*
    pDstValue);

EXTERN void asn1Init_SD_DepoASNKokSertifikalar (
   ASN1T_SD_DepoASNKokSertifikalar* pvalue);

EXTERN void asn1Free_SD_DepoASNKokSertifikalar (OSCTXT *pctxt, 
   ASN1T_SD_DepoASNKokSertifikalar* pvalue);

/**************************************************************/
/*                                                            */
/*  DepoASNRawImza                                            */
/*                                                            */
/**************************************************************/
/*
DepoASNRawImza ::= SEQUENCE {
   publicKeyHash [0] OCTET STRING,
   imza [1] OCTET STRING
}
*/
#define TV_SD_DepoASNRawImza	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_SD_DepoASNRawImza;

struct EXTERN ASN1T_SD_DepoASNRawImza : public ASN1TPDU {
   ASN1TDynOctStr publicKeyHash;
   ASN1TDynOctStr imza;
   ASN1T_SD_DepoASNRawImza ();
   ASN1T_SD_DepoASNRawImza (ASN1C_SD_DepoASNRawImza& srcData);
   ~ASN1T_SD_DepoASNRawImza ();
} ;

class EXTERN ASN1C_SD_DepoASNRawImza :
public ASN1CType
{
protected:
   ASN1T_SD_DepoASNRawImza& msgData;
public:
   ASN1C_SD_DepoASNRawImza (ASN1T_SD_DepoASNRawImza& data);
   ASN1C_SD_DepoASNRawImza (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_DepoASNRawImza& data);
   ASN1C_SD_DepoASNRawImza (OSRTContext &context, ASN1T_SD_DepoASNRawImza& data
      );
   ASN1C_SD_DepoASNRawImza (ASN1C_SD_DepoASNRawImza& original);
   virtual ~ASN1C_SD_DepoASNRawImza () {}
   inline ASN1T_SD_DepoASNRawImza& getData () { return msgData; }
   inline const ASN1T_SD_DepoASNRawImza& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DepoASNRawImza");
   int toStream (const char* name = "DepoASNRawImza");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_DepoASNRawImza* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_SD_DepoASNRawImza& getCopy (ASN1T_SD_DepoASNRawImza* pDstData = 0);
   ASN1T_SD_DepoASNRawImza* newCopy ();

   inline ASN1C_SD_DepoASNRawImza& operator= (ASN1C_SD_DepoASNRawImza& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_SD_DepoASNRawImza (OSCTXT* pctxt,
   ASN1T_SD_DepoASNRawImza *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_DepoASNRawImza (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNRawImza* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_SD_DepoASNRawImza 
   (const char* name, const ASN1T_SD_DepoASNRawImza* pvalue);

EXTERN int asn1PrtToStrm_SD_DepoASNRawImza (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNRawImza* pvalue);

EXTERN ASN1T_SD_DepoASNRawImza* new_ASN1T_SD_DepoASNRawImza (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_SD_DepoASNRawImza (const char* name, 
   ASN1T_SD_DepoASNRawImza* pValue, ASN1T_SD_DepoASNRawImza* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_SD_DepoASNRawImza (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNRawImza* pSrcValue, ASN1T_SD_DepoASNRawImza* pDstValue);

EXTERN void asn1Init_SD_DepoASNRawImza (ASN1T_SD_DepoASNRawImza* pvalue);

EXTERN void asn1Free_SD_DepoASNRawImza (OSCTXT *pctxt, 
   ASN1T_SD_DepoASNRawImza* pvalue);

/**************************************************************/
/*                                                            */
/*  DepoASNImza                                               */
/*                                                            */
/**************************************************************/
/*
DepoASNImza ::= SEQUENCE {
   imzalanan [0] DepoASNKokSertifika,
   imza [1] DepoASNRawImza
}
*/
#define TV_SD_DepoASNImza	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_SD_DepoASNImza;

struct EXTERN ASN1T_SD_DepoASNImza : public ASN1TPDU {
   ASN1T_SD_DepoASNKokSertifika imzalanan;
   ASN1T_SD_DepoASNRawImza imza;
   ASN1T_SD_DepoASNImza ();
   ASN1T_SD_DepoASNImza (ASN1C_SD_DepoASNImza& srcData);
   ~ASN1T_SD_DepoASNImza ();
} ;

class EXTERN ASN1C_SD_DepoASNImza :
public ASN1CType
{
protected:
   ASN1T_SD_DepoASNImza& msgData;
public:
   ASN1C_SD_DepoASNImza (ASN1T_SD_DepoASNImza& data);
   ASN1C_SD_DepoASNImza (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_DepoASNImza& data);
   ASN1C_SD_DepoASNImza (OSRTContext &context, ASN1T_SD_DepoASNImza& data);
   ASN1C_SD_DepoASNImza (ASN1C_SD_DepoASNImza& original);
   virtual ~ASN1C_SD_DepoASNImza () {}
   inline ASN1T_SD_DepoASNImza& getData () { return msgData; }
   inline const ASN1T_SD_DepoASNImza& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DepoASNImza");
   int toStream (const char* name = "DepoASNImza");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_DepoASNImza* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_SD_DepoASNImza& getCopy (ASN1T_SD_DepoASNImza* pDstData = 0);
   ASN1T_SD_DepoASNImza* newCopy ();

   inline ASN1C_SD_DepoASNImza& operator= (ASN1C_SD_DepoASNImza& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_SD_DepoASNImza (OSCTXT* pctxt,
   ASN1T_SD_DepoASNImza *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_DepoASNImza (OSCTXT* pctxt, ASN1T_SD_DepoASNImza* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_SD_DepoASNImza 
   (const char* name, const ASN1T_SD_DepoASNImza* pvalue);

EXTERN int asn1PrtToStrm_SD_DepoASNImza (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNImza* pvalue);

EXTERN ASN1T_SD_DepoASNImza* new_ASN1T_SD_DepoASNImza (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_SD_DepoASNImza (const char* name, 
   ASN1T_SD_DepoASNImza* pValue, ASN1T_SD_DepoASNImza* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_SD_DepoASNImza (OSCTXT* pctxt, ASN1T_SD_DepoASNImza* pSrcValue, 
   ASN1T_SD_DepoASNImza* pDstValue);

EXTERN void asn1Init_SD_DepoASNImza (ASN1T_SD_DepoASNImza* pvalue);

EXTERN void asn1Free_SD_DepoASNImza (OSCTXT *pctxt, ASN1T_SD_DepoASNImza* pvalue);

/**************************************************************/
/*                                                            */
/*  DepoASNImzalar                                            */
/*                                                            */
/**************************************************************/
/*
DepoASNImzalar ::= SEQUENCE OF DepoASNImza
*/
#define TV_SD_DepoASNImzalar	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_SD_DepoASNImzalar;

/* List of ASN1T_SD_DepoASNImza */
typedef struct EXTERN ASN1T_SD_DepoASNImzalar : public ASN1TPDUSeqOfList {
   ~ASN1T_SD_DepoASNImzalar();
} ASN1T_SD_DepoASNImzalar;

class EXTERN ASN1C_SD_DepoASNImzalar :
public ASN1CSeqOfList
{
protected:
   ASN1T_SD_DepoASNImzalar& msgData;
public:
   ASN1C_SD_DepoASNImzalar (ASN1T_SD_DepoASNImzalar& data);
   ASN1C_SD_DepoASNImzalar (OSRTMessageBufferIF& msgBuf
      , ASN1T_SD_DepoASNImzalar& data);
   ASN1C_SD_DepoASNImzalar (ASN1CType& ccobj, ASN1T_SD_DepoASNImzalar& data);
   ASN1C_SD_DepoASNImzalar (OSRTContext &context, ASN1T_SD_DepoASNImzalar& data
      );
   ASN1C_SD_DepoASNImzalar (ASN1C_SD_DepoASNImzalar& original);
   virtual ~ASN1C_SD_DepoASNImzalar () {}
   inline ASN1T_SD_DepoASNImzalar& getData () { return msgData; }
   inline const ASN1T_SD_DepoASNImzalar& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DepoASNImzalar");
   int toStream (const char* name = "DepoASNImzalar");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_SD_DepoASNImzalar* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_SD_DepoASNImzalar& getCopy (ASN1T_SD_DepoASNImzalar* pDstData = 0);
   ASN1T_SD_DepoASNImzalar* newCopy ();

   ASN1C_SD_DepoASNImzalar& operator= (ASN1C_SD_DepoASNImzalar& srcData);
   void Append (ASN1T_SD_DepoASNImza* elem);
   ASN1T_SD_DepoASNImza* NewElement ();
   ASN1T_SD_DepoASNImza* AppendNewElement ();
} ;

EXTERN int asn1E_SD_DepoASNImzalar (OSCTXT* pctxt,
   ASN1T_SD_DepoASNImzalar *pvalue, ASN1TagType tagging);

EXTERN int asn1D_SD_DepoASNImzalar (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNImzalar* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_SD_DepoASNImzalar 
   (const char* name, const ASN1T_SD_DepoASNImzalar* pvalue);

EXTERN int asn1PrtToStrm_SD_DepoASNImzalar (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNImzalar* pvalue);

EXTERN OSBOOL asn1Compare_SD_DepoASNImzalar (const char* name, 
   ASN1T_SD_DepoASNImzalar* pValue, ASN1T_SD_DepoASNImzalar* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_SD_DepoASNImzalar (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNImzalar* pSrcValue, ASN1T_SD_DepoASNImzalar* pDstValue);

EXTERN void asn1Init_SD_DepoASNImzalar (ASN1T_SD_DepoASNImzalar* pvalue);

EXTERN void asn1Free_SD_DepoASNImzalar (OSCTXT *pctxt, 
   ASN1T_SD_DepoASNImzalar* pvalue);

#endif
