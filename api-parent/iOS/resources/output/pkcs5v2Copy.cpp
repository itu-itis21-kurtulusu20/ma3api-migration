/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "pkcs5v2.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_PKCS5_PBEParameter_salt (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBEParameter_salt* pSrcValue, ASN1T_PKCS5_PBEParameter_salt*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->numocts = pSrcValue->numocts;
   if (pSrcValue->numocts > 0) {
      OSCRTLMEMCPY (pDstValue->data, pSrcValue->data, pSrcValue->numocts);
   }
}

ASN1C_PKCS5_PBEParameter_salt::ASN1C_PKCS5_PBEParameter_salt (ASN1C_PKCS5_PBEParameter_salt& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_PBEParameter_salt::ASN1T_PKCS5_PBEParameter_salt (ASN1C_PKCS5_PBEParameter_salt& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_PBEParameter_salt& ASN1C_PKCS5_PBEParameter_salt::getCopy (ASN1T_PKCS5_PBEParameter_salt* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_PBEParameter_salt);
      new (pDstData) ASN1T_PKCS5_PBEParameter_salt;
   }

   asn1Copy_PKCS5_PBEParameter_salt (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS5_PBEParameter_salt* ASN1C_PKCS5_PBEParameter_salt::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_PBEParameter_salt* pDstData = new ASN1T_PKCS5_PBEParameter_salt;

   asn1Copy_PKCS5_PBEParameter_salt (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS5_RC2_CBC_Parameter_iv (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pSrcValue, 
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->numocts = pSrcValue->numocts;
   if (pSrcValue->numocts > 0) {
      OSCRTLMEMCPY (pDstValue->data, pSrcValue->data, pSrcValue->numocts);
   }
}

ASN1C_PKCS5_RC2_CBC_Parameter_iv::ASN1C_PKCS5_RC2_CBC_Parameter_iv (ASN1C_PKCS5_RC2_CBC_Parameter_iv& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_RC2_CBC_Parameter_iv::ASN1T_PKCS5_RC2_CBC_Parameter_iv (ASN1C_PKCS5_RC2_CBC_Parameter_iv& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_RC2_CBC_Parameter_iv& ASN1C_PKCS5_RC2_CBC_Parameter_iv::getCopy (ASN1T_PKCS5_RC2_CBC_Parameter_iv* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_RC2_CBC_Parameter_iv);
      new (pDstData) ASN1T_PKCS5_RC2_CBC_Parameter_iv;
   }

   asn1Copy_PKCS5_RC2_CBC_Parameter_iv (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS5_RC2_CBC_Parameter_iv* ASN1C_PKCS5_RC2_CBC_Parameter_iv::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pDstData = new ASN1T_PKCS5_RC2_CBC_Parameter_iv;

   asn1Copy_PKCS5_RC2_CBC_Parameter_iv (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS5_PBKDF2_params_salt (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBKDF2_params_salt* pSrcValue, ASN1T_PKCS5_PBKDF2_params_salt*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* specified */
      case 1:
         pDstValue->u.specified = rtxMemAllocType (pctxt, ASN1TDynOctStr);
         new (pDstValue->u.specified) ASN1TDynOctStr;
         rtCopyDynOctStr (pctxt, pSrcValue->u.specified, pDstValue->u.specified
            );
         break;

      /* otherSource */
      case 2:
         pDstValue->u.otherSource = rtxMemAllocType (pctxt, ASN1T_EXP_AlgorithmIdentifier);
         new (pDstValue->u.otherSource) ASN1T_EXP_AlgorithmIdentifier;
         asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue->u.otherSource, pDstValue->u.otherSource);
         break;

   }
}

ASN1C_PKCS5_PBKDF2_params_salt::ASN1C_PKCS5_PBKDF2_params_salt (ASN1C_PKCS5_PBKDF2_params_salt& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_PBKDF2_params_salt::ASN1T_PKCS5_PBKDF2_params_salt (ASN1C_PKCS5_PBKDF2_params_salt& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_PBKDF2_params_salt& ASN1C_PKCS5_PBKDF2_params_salt::getCopy (ASN1T_PKCS5_PBKDF2_params_salt* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_PBKDF2_params_salt);
      new (pDstData) ASN1T_PKCS5_PBKDF2_params_salt;
   }

   asn1Copy_PKCS5_PBKDF2_params_salt (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS5_PBKDF2_params_salt* ASN1C_PKCS5_PBKDF2_params_salt::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_PBKDF2_params_salt* pDstData = new ASN1T_PKCS5_PBKDF2_params_salt;

   asn1Copy_PKCS5_PBKDF2_params_salt (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS5_PBKDF2_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBKDF2_params* pSrcValue, ASN1T_PKCS5_PBKDF2_params* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_PKCS5_PBKDF2_params_salt (pctxt, &pSrcValue->salt, &pDstValue->salt);

   pDstValue->iterationCount = pSrcValue->iterationCount;

   if (pSrcValue->m.keyLengthPresent) {
      pDstValue->keyLength = pSrcValue->keyLength;
   }

   if (pSrcValue->m.prfPresent) {
      asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->prf, &pDstValue->prf);
   }

}

ASN1C_PKCS5_PBKDF2_params::ASN1C_PKCS5_PBKDF2_params (ASN1C_PKCS5_PBKDF2_params& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_PBKDF2_params::ASN1T_PKCS5_PBKDF2_params (ASN1C_PKCS5_PBKDF2_params& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_PBKDF2_params& ASN1C_PKCS5_PBKDF2_params::getCopy (ASN1T_PKCS5_PBKDF2_params* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_PBKDF2_params);
      new (pDstData) ASN1T_PKCS5_PBKDF2_params;
   }

   asn1Copy_PKCS5_PBKDF2_params (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS5_PBKDF2_params* ASN1C_PKCS5_PBKDF2_params::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_PBKDF2_params* pDstData = new ASN1T_PKCS5_PBKDF2_params;

   asn1Copy_PKCS5_PBKDF2_params (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS5_PBEParameter (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBEParameter* pSrcValue, ASN1T_PKCS5_PBEParameter* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_PKCS5_PBEParameter_salt (pctxt, &pSrcValue->salt, &pDstValue->salt);

   pDstValue->iterationCount = pSrcValue->iterationCount;

}

ASN1C_PKCS5_PBEParameter::ASN1C_PKCS5_PBEParameter (ASN1C_PKCS5_PBEParameter& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_PBEParameter::ASN1T_PKCS5_PBEParameter (ASN1C_PKCS5_PBEParameter& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_PBEParameter& ASN1C_PKCS5_PBEParameter::getCopy (ASN1T_PKCS5_PBEParameter* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_PBEParameter);
      new (pDstData) ASN1T_PKCS5_PBEParameter;
   }

   asn1Copy_PKCS5_PBEParameter (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS5_PBEParameter* ASN1C_PKCS5_PBEParameter::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_PBEParameter* pDstData = new ASN1T_PKCS5_PBEParameter;

   asn1Copy_PKCS5_PBEParameter (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS5_PBES2_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBES2_params* pSrcValue, ASN1T_PKCS5_PBES2_params* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->keyDerivationFunc, &pDstValue->keyDerivationFunc);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->encryptionScheme, &pDstValue->encryptionScheme);

}

ASN1C_PKCS5_PBES2_params::ASN1C_PKCS5_PBES2_params (ASN1C_PKCS5_PBES2_params& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_PBES2_params::ASN1T_PKCS5_PBES2_params (ASN1C_PKCS5_PBES2_params& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_PBES2_params& ASN1C_PKCS5_PBES2_params::getCopy (ASN1T_PKCS5_PBES2_params* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_PBES2_params);
      new (pDstData) ASN1T_PKCS5_PBES2_params;
   }

   asn1Copy_PKCS5_PBES2_params (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS5_PBES2_params* ASN1C_PKCS5_PBES2_params::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_PBES2_params* pDstData = new ASN1T_PKCS5_PBES2_params;

   asn1Copy_PKCS5_PBES2_params (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS5_PBMAC1_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBMAC1_params* pSrcValue, ASN1T_PKCS5_PBMAC1_params* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->keyDerivationFunc, &pDstValue->keyDerivationFunc);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->messageAuthScheme, &pDstValue->messageAuthScheme);

}

ASN1C_PKCS5_PBMAC1_params::ASN1C_PKCS5_PBMAC1_params (ASN1C_PKCS5_PBMAC1_params& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_PBMAC1_params::ASN1T_PKCS5_PBMAC1_params (ASN1C_PKCS5_PBMAC1_params& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_PBMAC1_params& ASN1C_PKCS5_PBMAC1_params::getCopy (ASN1T_PKCS5_PBMAC1_params* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_PBMAC1_params);
      new (pDstData) ASN1T_PKCS5_PBMAC1_params;
   }

   asn1Copy_PKCS5_PBMAC1_params (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS5_PBMAC1_params* ASN1C_PKCS5_PBMAC1_params::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_PBMAC1_params* pDstData = new ASN1T_PKCS5_PBMAC1_params;

   asn1Copy_PKCS5_PBMAC1_params (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS5_RC2_CBC_Parameter (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC2_CBC_Parameter* pSrcValue, ASN1T_PKCS5_RC2_CBC_Parameter*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.rc2ParameterVersionPresent) {
      pDstValue->rc2ParameterVersion = pSrcValue->rc2ParameterVersion;
   }

   asn1Copy_PKCS5_RC2_CBC_Parameter_iv (pctxt, &pSrcValue->iv, &pDstValue->iv);

}

ASN1C_PKCS5_RC2_CBC_Parameter::ASN1C_PKCS5_RC2_CBC_Parameter (ASN1C_PKCS5_RC2_CBC_Parameter& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_RC2_CBC_Parameter::ASN1T_PKCS5_RC2_CBC_Parameter (ASN1C_PKCS5_RC2_CBC_Parameter& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_RC2_CBC_Parameter& ASN1C_PKCS5_RC2_CBC_Parameter::getCopy (ASN1T_PKCS5_RC2_CBC_Parameter* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_RC2_CBC_Parameter);
      new (pDstData) ASN1T_PKCS5_RC2_CBC_Parameter;
   }

   asn1Copy_PKCS5_RC2_CBC_Parameter (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS5_RC2_CBC_Parameter* ASN1C_PKCS5_RC2_CBC_Parameter::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_RC2_CBC_Parameter* pDstData = new ASN1T_PKCS5_RC2_CBC_Parameter;

   asn1Copy_PKCS5_RC2_CBC_Parameter (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS5_RC5_CBC_Parameters (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC5_CBC_Parameters* pSrcValue, ASN1T_PKCS5_RC5_CBC_Parameters*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   pDstValue->rounds = pSrcValue->rounds;

   pDstValue->blockSizeInBits = pSrcValue->blockSizeInBits;

   if (pSrcValue->m.ivPresent) {
      rtCopyDynOctStr (pctxt, &pSrcValue->iv, &pDstValue->iv);
   }

}

ASN1C_PKCS5_RC5_CBC_Parameters::ASN1C_PKCS5_RC5_CBC_Parameters (ASN1C_PKCS5_RC5_CBC_Parameters& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS5_RC5_CBC_Parameters::ASN1T_PKCS5_RC5_CBC_Parameters (ASN1C_PKCS5_RC5_CBC_Parameters& original)
{
   original.getCopy (this);
}

ASN1T_PKCS5_RC5_CBC_Parameters& ASN1C_PKCS5_RC5_CBC_Parameters::getCopy (ASN1T_PKCS5_RC5_CBC_Parameters* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS5_RC5_CBC_Parameters);
      new (pDstData) ASN1T_PKCS5_RC5_CBC_Parameters;
   }

   asn1Copy_PKCS5_RC5_CBC_Parameters (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS5_RC5_CBC_Parameters* ASN1C_PKCS5_RC5_CBC_Parameters::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS5_RC5_CBC_Parameters* pDstData = new ASN1T_PKCS5_RC5_CBC_Parameters;

   asn1Copy_PKCS5_RC5_CBC_Parameters (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

