/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "ASN_SertifikaDeposu.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_SD_KokSertifikaTipi (OSCTXT* pctxt,
   ASN1T_SD_KokSertifikaTipi *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KokSertifikaTipi");

   if(*pvalue < 1 || *pvalue > 4)
      return LOG_RTERR (pctxt, RTERR_INVENUM);

   ll = xe_enumUnsigned (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_SD_KOKGuvenSeviyesi (OSCTXT* pctxt,
   ASN1T_SD_KOKGuvenSeviyesi *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KOKGuvenSeviyesi");

   if(*pvalue < 1 || *pvalue > 3)
      return LOG_RTERR (pctxt, RTERR_INVENUM);

   ll = xe_enumUnsigned (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_SD_DepoASNEklenecekKokSertifika (OSCTXT* pctxt,
   ASN1T_SD_DepoASNEklenecekKokSertifika *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DepoASNEklenecekKokSertifika");

   /* encode kokGuvenSeviyesi */

   RTXCTXTPUSHELEMNAME (pctxt, "kokGuvenSeviyesi");

   if(pvalue->kokGuvenSeviyesi < 1 || pvalue->kokGuvenSeviyesi > 3)
      return LOG_RTERR (pctxt, RTERR_INVENUM);

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|10,
      asn1E_SD_KOKGuvenSeviyesi (pctxt, &pvalue->kokGuvenSeviyesi, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokSertifikaTipi */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSertifikaTipi");

   if(pvalue->kokSertifikaTipi < 1 || pvalue->kokSertifikaTipi > 4)
      return LOG_RTERR (pctxt, RTERR_INVENUM);

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|9,
      asn1E_SD_KokSertifikaTipi (pctxt, &pvalue->kokSertifikaTipi, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokSubjectKeyIdentifier */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSubjectKeyIdentifier");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|8,
      asn1E_IMP_SubjectKeyIdentifier (pctxt, &pvalue->kokSubjectKeyIdentifier, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokKeyUsage */

   RTXCTXTPUSHELEMNAME (pctxt, "kokKeyUsage");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|7,
      asn1E_IMP_KeyUsage (pctxt, &pvalue->kokKeyUsage, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokEndDate */

   RTXCTXTPUSHELEMNAME (pctxt, "kokEndDate");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|6,
      asn1E_EXP_Time (pctxt, &pvalue->kokEndDate, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokStartDate */

   RTXCTXTPUSHELEMNAME (pctxt, "kokStartDate");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|5,
      asn1E_EXP_Time (pctxt, &pvalue->kokStartDate, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokSubjectName */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSubjectName");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|4,
      asn1E_EXP_Name (pctxt, &pvalue->kokSubjectName, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokIssuerName */

   RTXCTXTPUSHELEMNAME (pctxt, "kokIssuerName");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
      asn1E_EXP_Name (pctxt, &pvalue->kokIssuerName, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokSerialNumber */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSerialNumber");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|2,
      asn1E_EXP_CertificateSerialNumber (pctxt, &pvalue->kokSerialNumber, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokSertifikaHash */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSertifikaHash");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|1,
      xe_octstr (pctxt, pvalue->kokSertifikaHash.data, pvalue->kokSertifikaHash.numocts, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokSertifikaValue */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSertifikaValue");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
      xe_octstr (pctxt, pvalue->kokSertifikaValue.data, pvalue->kokSertifikaValue.numocts, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_SD_DepoASNSilinecekKokSertifika (OSCTXT* pctxt,
   ASN1T_SD_DepoASNSilinecekKokSertifika *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DepoASNSilinecekKokSertifika");

   /* encode kokSubjectName */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSubjectName");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
      asn1E_EXP_Name (pctxt, &pvalue->kokSubjectName, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokIssuerName */

   RTXCTXTPUSHELEMNAME (pctxt, "kokIssuerName");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
      asn1E_EXP_Name (pctxt, &pvalue->kokIssuerName, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokSerialNumber */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSerialNumber");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|1,
      asn1E_EXP_CertificateSerialNumber (pctxt, &pvalue->kokSerialNumber, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kokSertifikaValue */

   RTXCTXTPUSHELEMNAME (pctxt, "kokSertifikaValue");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
      xe_octstr (pctxt, pvalue->kokSertifikaValue.data, pvalue->kokSertifikaValue.numocts, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_SD_DepoASNKokSertifika (OSCTXT* pctxt,
   ASN1T_SD_DepoASNKokSertifika *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DepoASNKokSertifika");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "eklenecekSertifika");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_SD_DepoASNEklenecekKokSertifika (pctxt, pvalue->u.eklenecekSertifika, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "silinecekSertifika");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_SD_DepoASNSilinecekKokSertifika (pctxt, pvalue->u.silinecekSertifika, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_SD_DepoASNKokSertifikalar (OSCTXT* pctxt,
   ASN1T_SD_DepoASNKokSertifikalar *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DepoASNKokSertifikalar");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "DepoASNKokSertifika", xx1);

      ll = asn1E_SD_DepoASNKokSertifika (pctxt, ((ASN1T_SD_DepoASNKokSertifika*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_SD_DepoASNRawImza (OSCTXT* pctxt,
   ASN1T_SD_DepoASNRawImza *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DepoASNRawImza");

   /* encode imza */

   RTXCTXTPUSHELEMNAME (pctxt, "imza");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|1,
      xe_octstr (pctxt, pvalue->imza.data, pvalue->imza.numocts, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode publicKeyHash */

   RTXCTXTPUSHELEMNAME (pctxt, "publicKeyHash");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
      xe_octstr (pctxt, pvalue->publicKeyHash.data, pvalue->publicKeyHash.numocts, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_SD_DepoASNImza (OSCTXT* pctxt,
   ASN1T_SD_DepoASNImza *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DepoASNImza");

   /* encode imza */

   RTXCTXTPUSHELEMNAME (pctxt, "imza");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
      asn1E_SD_DepoASNRawImza (pctxt, &pvalue->imza, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode imzalanan */

   RTXCTXTPUSHELEMNAME (pctxt, "imzalanan");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
      asn1E_SD_DepoASNKokSertifika (pctxt, &pvalue->imzalanan, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_SD_DepoASNImzalar (OSCTXT* pctxt,
   ASN1T_SD_DepoASNImzalar *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DepoASNImzalar");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "DepoASNImza", xx1);

      ll = asn1E_SD_DepoASNImza (pctxt, ((ASN1T_SD_DepoASNImza*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

