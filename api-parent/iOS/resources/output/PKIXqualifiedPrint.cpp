/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "PKIXqualified.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_PKIXQUAL_DateOfBirth 
   (const char* name, const ASN1T_PKIXQUAL_DateOfBirth pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_PKIXQUAL_DateOfBirth::Print (const char* name)
{
   asn1Print_PKIXQUAL_DateOfBirth (name, msgData);
}

void asn1Print_PKIXQUAL_PlaceOfBirth 
   (const char* name, const ASN1T_PKIXQUAL_PlaceOfBirth* pvalue)
{
   asn1Print_EXP_DirectoryString (name, pvalue);
}

void ASN1C_PKIXQUAL_PlaceOfBirth::Print (const char* name)
{
   asn1Print_PKIXQUAL_PlaceOfBirth (name, &msgData);
}

void asn1Print_PKIXQUAL_Gender 
   (const char* name, const ASN1T_PKIXQUAL_Gender pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_PKIXQUAL_Gender::Print (const char* name)
{
   asn1Print_PKIXQUAL_Gender (name, msgData);
}

void asn1Print_PKIXQUAL_CountryOfCitizenship 
   (const char* name, const ASN1T_PKIXQUAL_CountryOfCitizenship pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_PKIXQUAL_CountryOfCitizenship::Print (const char* name)
{
   asn1Print_PKIXQUAL_CountryOfCitizenship (name, msgData);
}

void asn1Print_PKIXQUAL_CountryOfResidence 
   (const char* name, const ASN1T_PKIXQUAL_CountryOfResidence pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_PKIXQUAL_CountryOfResidence::Print (const char* name)
{
   asn1Print_PKIXQUAL_CountryOfResidence (name, msgData);
}

void asn1Print_PKIXQUAL_PredefinedBiometricType 
   (const char* name, const ASN1T_PKIXQUAL_PredefinedBiometricType* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 0: printf ("%s = picture\n", name); break;
      case 1: printf ("%s = handwritten_signature\n", name); break;
      default: rtxPrintUnsigned (name, *pvalue);
   }
}

void ASN1C_PKIXQUAL_PredefinedBiometricType::Print (const char* name)
{
   asn1Print_PKIXQUAL_PredefinedBiometricType (name, &msgData);
}

void asn1Print_PKIXQUAL_TypeOfBiometricData 
   (const char* name, const ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* predefinedBiometricType */
      case 1:
      {
         asn1Print_PKIXQUAL_PredefinedBiometricType (
            "predefinedBiometricType", &pvalue->u.predefinedBiometricType);
         break;
      }
      /* biometricDataOid */
      case 2:
      {
         rtxPrintIndent ();
         rtPrintOID ("biometricDataOid", (ASN1OBJID*)pvalue->u.biometricDataOid);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKIXQUAL_TypeOfBiometricData::Print (const char* name)
{
   asn1Print_PKIXQUAL_TypeOfBiometricData (name, &msgData);
}

void asn1Print_PKIXQUAL_BiometricData 
   (const char* name, const ASN1T_PKIXQUAL_BiometricData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKIXQUAL_TypeOfBiometricData ("typeOfBiometricData", &pvalue->
      typeOfBiometricData);

   asn1Print_EXP_AlgorithmIdentifier ("hashAlgorithm", &pvalue->hashAlgorithm
      );

   rtxPrintIndent ();
   rtxPrintHexStr ("biometricDataHash", pvalue->biometricDataHash.numocts, pvalue->biometricDataHash.data);

   if (pvalue->m.sourceDataUriPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("sourceDataUri", pvalue->sourceDataUri);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKIXQUAL_BiometricData::Print (const char* name)
{
   asn1Print_PKIXQUAL_BiometricData (name, &msgData);
}

void asn1Print_PKIXQUAL_BiometricSyntax 
   (const char* name, const ASN1T_PKIXQUAL_BiometricSyntax* pvalue)
{
   ASN1T_PKIXQUAL_BiometricData* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKIXQUAL_BiometricData*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKIXQUAL_BiometricData (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKIXQUAL_BiometricSyntax::Print (const char* name)
{
   asn1Print_PKIXQUAL_BiometricSyntax (name, &msgData);
}

void asn1Print_PKIXQUAL_QCStatement 
   (const char* name, const ASN1T_PKIXQUAL_QCStatement* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("statementId", (ASN1OBJID*)&pvalue->statementId);

   if (pvalue->m.statementInfoPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("statementInfo", pvalue->statementInfo.numocts,
      pvalue->statementInfo.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKIXQUAL_QCStatement::Print (const char* name)
{
   asn1Print_PKIXQUAL_QCStatement (name, &msgData);
}

void asn1Print_PKIXQUAL_QCStatements 
   (const char* name, const ASN1T_PKIXQUAL_QCStatements* pvalue)
{
   ASN1T_PKIXQUAL_QCStatement* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKIXQUAL_QCStatement*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKIXQUAL_QCStatement (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKIXQUAL_QCStatements::Print (const char* name)
{
   asn1Print_PKIXQUAL_QCStatements (name, &msgData);
}

void asn1Print_PKIXQUAL_NameRegistrationAuthorities 
   (const char* name, const ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue)
{
   ASN1T_IMP_GeneralName* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_GeneralName*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_GeneralName (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKIXQUAL_NameRegistrationAuthorities::Print (const char* name)
{
   asn1Print_PKIXQUAL_NameRegistrationAuthorities (name, &msgData);
}

void asn1Print_PKIXQUAL_SemanticsInformation 
   (const char* name, const ASN1T_PKIXQUAL_SemanticsInformation* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.semanticsIndentifierPresent) {
      rtxPrintIndent ();
      rtPrintOID ("semanticsIndentifier", (ASN1OBJID*)&pvalue->semanticsIndentifier);
   }

   if (pvalue->m.nameRegistrationAuthoritiesPresent) {
      asn1Print_PKIXQUAL_NameRegistrationAuthorities (
         "nameRegistrationAuthorities", &pvalue->nameRegistrationAuthorities);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKIXQUAL_SemanticsInformation::Print (const char* name)
{
   asn1Print_PKIXQUAL_SemanticsInformation (name, &msgData);
}

