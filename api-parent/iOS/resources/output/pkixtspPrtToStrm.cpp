/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkixtsp.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_TSP_BIGINTEGER (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_BIGINTEGER* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, *pvalue);
   return 0;
}

int ASN1C_TSP_BIGINTEGER::toStream (const char* name)

{
   asn1PrtToStrm_TSP_BIGINTEGER (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_BIGINTEGER::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_TSAPolicyId (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TSAPolicyId* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_TSP_TSAPolicyId::toStream (const char* name)

{
   asn1PrtToStrm_TSP_TSAPolicyId (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_TSAPolicyId::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_PKIStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_PKIStatus* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 0: rtxStrcat (namebuf, 512, "granted\n");break;
         case 1: rtxStrcat (namebuf, 512, "grantedWithMods\n");break;
         case 2: rtxStrcat (namebuf, 512, "rejection\n");break;
         case 3: rtxStrcat (namebuf, 512, "waiting\n");break;
         case 4: rtxStrcat (namebuf, 512, "revocationWarning\n");break;
         case 5: rtxStrcat (namebuf, 512, "revocationNotification\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_TSP_PKIStatus::toStream (const char* name)

{
   asn1PrtToStrm_TSP_PKIStatus (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_PKIStatus::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_PKIFailureInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_PKIFailureInfo* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, name, pvalue->numbits, pvalue->data);
   return 0;
}

int ASN1C_TSP_PKIFailureInfo::toStream (const char* name)

{
   asn1PrtToStrm_TSP_PKIFailureInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_PKIFailureInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_TimeStampToken (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TimeStampToken* pvalue)
{
   asn1PrtToStrm_CMS_ContentInfo (pctxt, name, pvalue);
   return 0;
}

int ASN1C_TSP_TimeStampToken::toStream (const char* name)

{
   asn1PrtToStrm_TSP_TimeStampToken (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_TimeStampToken::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_TimeStampReq_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TimeStampReq_version* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 1: rtxStrcat (namebuf, 512, "v1\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_TSP_TimeStampReq_version::toStream (const char* name)

{
   asn1PrtToStrm_TSP_TimeStampReq_version (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_TimeStampReq_version::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_TSTInfo_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TSTInfo_version* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 1: rtxStrcat (namebuf, 512, "v1\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_TSP_TSTInfo_version::toStream (const char* name)

{
   asn1PrtToStrm_TSP_TSTInfo_version (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_TSTInfo_version::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_MessageImprint (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_MessageImprint* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "hashAlgorithm", &pvalue->hashAlgorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "hashedMessage", pvalue->hashedMessage.numocts, pvalue->hashedMessage.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_TSP_MessageImprint::toStream (const char* name)

{
   asn1PrtToStrm_TSP_MessageImprint (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_MessageImprint::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_TimeStampReq (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TimeStampReq* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_TSP_TimeStampReq_version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_TSP_MessageImprint (pctxt, "messageImprint", &pvalue->messageImprint);

   if (pvalue->m.reqPolicyPresent) {
      asn1PrtToStrm_TSP_TSAPolicyId (pctxt, "reqPolicy", &pvalue->reqPolicy);
   }

   if (pvalue->m.noncePresent) {
      asn1PrtToStrm_TSP_BIGINTEGER (pctxt, "nonce", &pvalue->nonce);
   }

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBoolean (pctxt, "certReq", pvalue->certReq);

   if (pvalue->m.extensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "extensions", &pvalue->extensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_TSP_TimeStampReq::toStream (const char* name)

{
   asn1PrtToStrm_TSP_TimeStampReq (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_TimeStampReq::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_PKIStatusInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_PKIStatusInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_TSP_PKIStatus (pctxt, "status", &pvalue->status);

   if (pvalue->m.statusStringPresent) {
      asn1PrtToStrm_CMP_PKIFreeText (pctxt, "statusString", &pvalue->statusString);
   }

   if (pvalue->m.failInfoPresent) {
      asn1PrtToStrm_TSP_PKIFailureInfo (pctxt, "failInfo", &pvalue->failInfo);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_TSP_PKIStatusInfo::toStream (const char* name)

{
   asn1PrtToStrm_TSP_PKIStatusInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_PKIStatusInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_TimeStampResp (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TimeStampResp* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_TSP_PKIStatusInfo (pctxt, "status", &pvalue->status);

   if (pvalue->m.timeStampTokenPresent) {
      asn1PrtToStrm_TSP_TimeStampToken (pctxt, "timeStampToken", &pvalue->timeStampToken);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_TSP_TimeStampResp::toStream (const char* name)

{
   asn1PrtToStrm_TSP_TimeStampResp (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_TimeStampResp::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_Accuracy (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_Accuracy* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.secondsPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamInteger (pctxt, "seconds", pvalue->seconds);
   }

   if (pvalue->m.millisPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamUnsigned (pctxt, "millis", pvalue->millis);
   }

   if (pvalue->m.microsPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamUnsigned (pctxt, "micros", pvalue->micros);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_TSP_Accuracy::toStream (const char* name)

{
   asn1PrtToStrm_TSP_Accuracy (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_Accuracy::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_TSTInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TSTInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_TSP_TSTInfo_version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_TSP_TSAPolicyId (pctxt, "policy", &pvalue->policy);

   asn1PrtToStrm_TSP_MessageImprint (pctxt, "messageImprint", &pvalue->messageImprint);

   asn1PrtToStrm_TSP_BIGINTEGER (pctxt, "serialNumber", &pvalue->serialNumber);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "genTime", pvalue->genTime);

   if (pvalue->m.accuracyPresent) {
      asn1PrtToStrm_TSP_Accuracy (pctxt, "accuracy", &pvalue->accuracy);
   }

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBoolean (pctxt, "ordering", pvalue->ordering);

   if (pvalue->m.noncePresent) {
      asn1PrtToStrm_TSP_BIGINTEGER (pctxt, "nonce", &pvalue->nonce);
   }

   if (pvalue->m.tsaPresent) {
      asn1PrtToStrm_IMP_GeneralName (pctxt, "tsa", &pvalue->tsa);
   }

   if (pvalue->m.extensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "extensions", &pvalue->extensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_TSP_TSTInfo::toStream (const char* name)

{
   asn1PrtToStrm_TSP_TSTInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_TSTInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_TSP_ESYAReqEx (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_ESYAReqEx* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "userid", pvalue->userid);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "salt", pvalue->salt.numocts, pvalue->salt.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "iterationCount", pvalue->iterationCount);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "iv", pvalue->iv.numocts, pvalue->iv.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "encryptedMessageImprint", pvalue->encryptedMessageImprint.numocts, pvalue->encryptedMessageImprint.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_TSP_ESYAReqEx::toStream (const char* name)

{
   asn1PrtToStrm_TSP_ESYAReqEx (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_TSP_ESYAReqEx::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

