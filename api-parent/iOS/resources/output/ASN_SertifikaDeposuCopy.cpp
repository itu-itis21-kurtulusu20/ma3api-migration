/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "ASN_SertifikaDeposu.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_SD_DepoASNEklenecekKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pSrcValue, 
   ASN1T_SD_DepoASNEklenecekKokSertifika* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, &pSrcValue->kokSertifikaValue, &pDstValue->
      kokSertifikaValue);

   rtCopyDynOctStr (pctxt, &pSrcValue->kokSertifikaHash, &pDstValue->
      kokSertifikaHash);

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->kokSerialNumber, &pDstValue->kokSerialNumber);

   asn1Copy_EXP_Name (pctxt, &pSrcValue->kokIssuerName, &pDstValue->kokIssuerName);

   asn1Copy_EXP_Name (pctxt, &pSrcValue->kokSubjectName, &pDstValue->kokSubjectName);

   asn1Copy_EXP_Time (pctxt, &pSrcValue->kokStartDate, &pDstValue->kokStartDate);

   asn1Copy_EXP_Time (pctxt, &pSrcValue->kokEndDate, &pDstValue->kokEndDate);

   asn1Copy_IMP_KeyUsage (pctxt, &pSrcValue->kokKeyUsage, &pDstValue->kokKeyUsage);

   asn1Copy_IMP_SubjectKeyIdentifier (pctxt, &pSrcValue->kokSubjectKeyIdentifier, &pDstValue->kokSubjectKeyIdentifier);

   pDstValue->kokSertifikaTipi = pSrcValue->kokSertifikaTipi;

   pDstValue->kokGuvenSeviyesi = pSrcValue->kokGuvenSeviyesi;

}

ASN1C_SD_DepoASNEklenecekKokSertifika::ASN1C_SD_DepoASNEklenecekKokSertifika (ASN1C_SD_DepoASNEklenecekKokSertifika& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_SD_DepoASNEklenecekKokSertifika::ASN1T_SD_DepoASNEklenecekKokSertifika (ASN1C_SD_DepoASNEklenecekKokSertifika& original)
{
   original.getCopy (this);
}

ASN1T_SD_DepoASNEklenecekKokSertifika& ASN1C_SD_DepoASNEklenecekKokSertifika::getCopy (ASN1T_SD_DepoASNEklenecekKokSertifika* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNEklenecekKokSertifika);
      new (pDstData) ASN1T_SD_DepoASNEklenecekKokSertifika;
   }

   asn1Copy_SD_DepoASNEklenecekKokSertifika (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_SD_DepoASNEklenecekKokSertifika* ASN1C_SD_DepoASNEklenecekKokSertifika::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_SD_DepoASNEklenecekKokSertifika* pDstData = new ASN1T_SD_DepoASNEklenecekKokSertifika;

   asn1Copy_SD_DepoASNEklenecekKokSertifika (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_SD_DepoASNSilinecekKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pSrcValue, 
   ASN1T_SD_DepoASNSilinecekKokSertifika* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, &pSrcValue->kokSertifikaValue, &pDstValue->
      kokSertifikaValue);

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->kokSerialNumber, &pDstValue->kokSerialNumber);

   asn1Copy_EXP_Name (pctxt, &pSrcValue->kokIssuerName, &pDstValue->kokIssuerName);

   asn1Copy_EXP_Name (pctxt, &pSrcValue->kokSubjectName, &pDstValue->kokSubjectName);

}

ASN1C_SD_DepoASNSilinecekKokSertifika::ASN1C_SD_DepoASNSilinecekKokSertifika (ASN1C_SD_DepoASNSilinecekKokSertifika& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_SD_DepoASNSilinecekKokSertifika::ASN1T_SD_DepoASNSilinecekKokSertifika (ASN1C_SD_DepoASNSilinecekKokSertifika& original)
{
   original.getCopy (this);
}

ASN1T_SD_DepoASNSilinecekKokSertifika& ASN1C_SD_DepoASNSilinecekKokSertifika::getCopy (ASN1T_SD_DepoASNSilinecekKokSertifika* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNSilinecekKokSertifika);
      new (pDstData) ASN1T_SD_DepoASNSilinecekKokSertifika;
   }

   asn1Copy_SD_DepoASNSilinecekKokSertifika (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_SD_DepoASNSilinecekKokSertifika* ASN1C_SD_DepoASNSilinecekKokSertifika::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_SD_DepoASNSilinecekKokSertifika* pDstData = new ASN1T_SD_DepoASNSilinecekKokSertifika;

   asn1Copy_SD_DepoASNSilinecekKokSertifika (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_SD_DepoASNKokSertifika (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNKokSertifika* pSrcValue, ASN1T_SD_DepoASNKokSertifika*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* eklenecekSertifika */
      case 1:
         pDstValue->u.eklenecekSertifika = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNEklenecekKokSertifika);
         new (pDstValue->u.eklenecekSertifika) ASN1T_SD_DepoASNEklenecekKokSertifika;
         asn1Copy_SD_DepoASNEklenecekKokSertifika (pctxt, pSrcValue->u.eklenecekSertifika, pDstValue->u.eklenecekSertifika);
         break;

      /* silinecekSertifika */
      case 2:
         pDstValue->u.silinecekSertifika = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNSilinecekKokSertifika);
         new (pDstValue->u.silinecekSertifika) ASN1T_SD_DepoASNSilinecekKokSertifika;
         asn1Copy_SD_DepoASNSilinecekKokSertifika (pctxt, pSrcValue->u.silinecekSertifika, pDstValue->u.silinecekSertifika);
         break;

   }
}

ASN1C_SD_DepoASNKokSertifika::ASN1C_SD_DepoASNKokSertifika (ASN1C_SD_DepoASNKokSertifika& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_SD_DepoASNKokSertifika::ASN1T_SD_DepoASNKokSertifika (ASN1C_SD_DepoASNKokSertifika& original)
{
   original.getCopy (this);
}

ASN1T_SD_DepoASNKokSertifika& ASN1C_SD_DepoASNKokSertifika::getCopy (ASN1T_SD_DepoASNKokSertifika* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNKokSertifika);
      new (pDstData) ASN1T_SD_DepoASNKokSertifika;
   }

   asn1Copy_SD_DepoASNKokSertifika (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_SD_DepoASNKokSertifika* ASN1C_SD_DepoASNKokSertifika::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_SD_DepoASNKokSertifika* pDstData = new ASN1T_SD_DepoASNKokSertifika;

   asn1Copy_SD_DepoASNKokSertifika (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_SD_DepoASNKokSertifikalar (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNKokSertifikalar* pSrcValue, ASN1T_SD_DepoASNKokSertifikalar*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_SD_DepoASNKokSertifika* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_SD_DepoASNKokSertifika* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_SD_DepoASNKokSertifika);
         pSrcData = (ASN1T_SD_DepoASNKokSertifika*) pnode->data;

         asn1Copy_SD_DepoASNKokSertifika (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_SD_DepoASNKokSertifikalar::ASN1C_SD_DepoASNKokSertifikalar (ASN1C_SD_DepoASNKokSertifikalar& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_SD_DepoASNKokSertifikalar*)pList)
{
}

ASN1C_SD_DepoASNKokSertifikalar& ASN1C_SD_DepoASNKokSertifikalar::operator= (ASN1C_SD_DepoASNKokSertifikalar& srcData)
{
   clear ();
   asn1Copy_SD_DepoASNKokSertifikalar (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_SD_DepoASNKokSertifikalar& ASN1C_SD_DepoASNKokSertifikalar::getCopy (ASN1T_SD_DepoASNKokSertifikalar* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNKokSertifikalar);
      new (pDstData) ASN1T_SD_DepoASNKokSertifikalar;
   }

   asn1Copy_SD_DepoASNKokSertifikalar (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_SD_DepoASNKokSertifikalar* ASN1C_SD_DepoASNKokSertifikalar::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_SD_DepoASNKokSertifikalar* pDstData = new ASN1T_SD_DepoASNKokSertifikalar;

   asn1Copy_SD_DepoASNKokSertifikalar (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_SD_DepoASNRawImza (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNRawImza* pSrcValue, ASN1T_SD_DepoASNRawImza* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, &pSrcValue->publicKeyHash, &pDstValue->publicKeyHash
      );

   rtCopyDynOctStr (pctxt, &pSrcValue->imza, &pDstValue->imza);

}

ASN1C_SD_DepoASNRawImza::ASN1C_SD_DepoASNRawImza (ASN1C_SD_DepoASNRawImza& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_SD_DepoASNRawImza::ASN1T_SD_DepoASNRawImza (ASN1C_SD_DepoASNRawImza& original)
{
   original.getCopy (this);
}

ASN1T_SD_DepoASNRawImza& ASN1C_SD_DepoASNRawImza::getCopy (ASN1T_SD_DepoASNRawImza* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNRawImza);
      new (pDstData) ASN1T_SD_DepoASNRawImza;
   }

   asn1Copy_SD_DepoASNRawImza (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_SD_DepoASNRawImza* ASN1C_SD_DepoASNRawImza::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_SD_DepoASNRawImza* pDstData = new ASN1T_SD_DepoASNRawImza;

   asn1Copy_SD_DepoASNRawImza (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_SD_DepoASNImza (OSCTXT* pctxt, ASN1T_SD_DepoASNImza* pSrcValue, 
   ASN1T_SD_DepoASNImza* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_SD_DepoASNKokSertifika (pctxt, &pSrcValue->imzalanan, &pDstValue->imzalanan);

   asn1Copy_SD_DepoASNRawImza (pctxt, &pSrcValue->imza, &pDstValue->imza);

}

ASN1C_SD_DepoASNImza::ASN1C_SD_DepoASNImza (ASN1C_SD_DepoASNImza& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_SD_DepoASNImza::ASN1T_SD_DepoASNImza (ASN1C_SD_DepoASNImza& original)
{
   original.getCopy (this);
}

ASN1T_SD_DepoASNImza& ASN1C_SD_DepoASNImza::getCopy (ASN1T_SD_DepoASNImza* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNImza);
      new (pDstData) ASN1T_SD_DepoASNImza;
   }

   asn1Copy_SD_DepoASNImza (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_SD_DepoASNImza* ASN1C_SD_DepoASNImza::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_SD_DepoASNImza* pDstData = new ASN1T_SD_DepoASNImza;

   asn1Copy_SD_DepoASNImza (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_SD_DepoASNImzalar (OSCTXT* pctxt, 
   ASN1T_SD_DepoASNImzalar* pSrcValue, ASN1T_SD_DepoASNImzalar* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_SD_DepoASNImza* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_SD_DepoASNImza* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_SD_DepoASNImza);
         pSrcData = (ASN1T_SD_DepoASNImza*) pnode->data;

         asn1Copy_SD_DepoASNImza (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_SD_DepoASNImzalar::ASN1C_SD_DepoASNImzalar (ASN1C_SD_DepoASNImzalar& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_SD_DepoASNImzalar*)pList)
{
}

ASN1C_SD_DepoASNImzalar& ASN1C_SD_DepoASNImzalar::operator= (ASN1C_SD_DepoASNImzalar& srcData)
{
   clear ();
   asn1Copy_SD_DepoASNImzalar (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_SD_DepoASNImzalar& ASN1C_SD_DepoASNImzalar::getCopy (ASN1T_SD_DepoASNImzalar* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_SD_DepoASNImzalar);
      new (pDstData) ASN1T_SD_DepoASNImzalar;
   }

   asn1Copy_SD_DepoASNImzalar (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_SD_DepoASNImzalar* ASN1C_SD_DepoASNImzalar::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_SD_DepoASNImzalar* pDstData = new ASN1T_SD_DepoASNImzalar;

   asn1Copy_SD_DepoASNImzalar (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

