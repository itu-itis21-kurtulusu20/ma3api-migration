/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#ifndef PKCS1PKCS8_H
#define PKCS1PKCS8_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "Explicit.h"
#include "pkcs10.h"

/**
 * Header file for ASN.1 module pkcs1pkcs8
 */
/**************************************************************/
/*                                                            */
/*  PrivateKey                                                */
/*                                                            */
/**************************************************************/
/*
PrivateKey ::= OCTET STRING
*/
#define TV_PKCS18_PrivateKey	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_PKCS18_PrivateKey;

class EXTERN ASN1C_PKCS18_PrivateKey :
public ASN1CType
{
protected:
   ASN1T_PKCS18_PrivateKey& msgData;
public:
   ASN1C_PKCS18_PrivateKey (ASN1T_PKCS18_PrivateKey& data);
   ASN1C_PKCS18_PrivateKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS18_PrivateKey& data);
   ASN1C_PKCS18_PrivateKey (OSRTContext &context, ASN1T_PKCS18_PrivateKey& data
      );
   ASN1C_PKCS18_PrivateKey (ASN1C_PKCS18_PrivateKey& original);
   virtual ~ASN1C_PKCS18_PrivateKey () {}
   inline ASN1T_PKCS18_PrivateKey& getData () { return msgData; }
   inline const ASN1T_PKCS18_PrivateKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PrivateKey");
   int toStream (const char* name = "PrivateKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS18_PrivateKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS18_PrivateKey& getCopy (ASN1T_PKCS18_PrivateKey* pDstData = 0);
   ASN1T_PKCS18_PrivateKey* newCopy ();

   inline ASN1C_PKCS18_PrivateKey& operator= (ASN1C_PKCS18_PrivateKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS18_PrivateKey (OSCTXT* pctxt,
   ASN1T_PKCS18_PrivateKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS18_PrivateKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_PrivateKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS18_PrivateKey 
   (const char* name, const ASN1T_PKCS18_PrivateKey* pvalue);

EXTERN int asn1PrtToStrm_PKCS18_PrivateKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_PrivateKey* pvalue);

EXTERN ASN1T_PKCS18_PrivateKey* new_ASN1T_PKCS18_PrivateKey (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_PKCS18_PrivateKey (const char* name, 
   ASN1T_PKCS18_PrivateKey* pValue, ASN1T_PKCS18_PrivateKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS18_PrivateKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_PrivateKey* pSrcValue, ASN1T_PKCS18_PrivateKey* pDstValue);

EXTERN void asn1Init_PKCS18_PrivateKey (ASN1T_PKCS18_PrivateKey* pvalue);

EXTERN void asn1Free_PKCS18_PrivateKey (OSCTXT *pctxt, 
   ASN1T_PKCS18_PrivateKey* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedData                                             */
/*                                                            */
/**************************************************************/
/*
EncryptedData ::= OCTET STRING
*/
#define TV_PKCS18_EncryptedData	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_PKCS18_EncryptedData;

class EXTERN ASN1C_PKCS18_EncryptedData :
public ASN1CType
{
protected:
   ASN1T_PKCS18_EncryptedData& msgData;
public:
   ASN1C_PKCS18_EncryptedData (ASN1T_PKCS18_EncryptedData& data);
   ASN1C_PKCS18_EncryptedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS18_EncryptedData& data);
   ASN1C_PKCS18_EncryptedData (OSRTContext &context
      , ASN1T_PKCS18_EncryptedData& data);
   ASN1C_PKCS18_EncryptedData (ASN1C_PKCS18_EncryptedData& original);
   virtual ~ASN1C_PKCS18_EncryptedData () {}
   inline ASN1T_PKCS18_EncryptedData& getData () { return msgData; }
   inline const ASN1T_PKCS18_EncryptedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedData");
   int toStream (const char* name = "EncryptedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS18_EncryptedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS18_EncryptedData& getCopy (ASN1T_PKCS18_EncryptedData* pDstData = 0);
   ASN1T_PKCS18_EncryptedData* newCopy ();

   inline ASN1C_PKCS18_EncryptedData& operator= (ASN1C_PKCS18_EncryptedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS18_EncryptedData (OSCTXT* pctxt,
   ASN1T_PKCS18_EncryptedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS18_EncryptedData (OSCTXT* pctxt, 
   ASN1T_PKCS18_EncryptedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS18_EncryptedData 
   (const char* name, const ASN1T_PKCS18_EncryptedData* pvalue);

EXTERN int asn1PrtToStrm_PKCS18_EncryptedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_EncryptedData* pvalue);

EXTERN ASN1T_PKCS18_EncryptedData* 
   new_ASN1T_PKCS18_EncryptedData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS18_EncryptedData (const char* name, 
   ASN1T_PKCS18_EncryptedData* pValue, ASN1T_PKCS18_EncryptedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS18_EncryptedData (OSCTXT* pctxt, 
   ASN1T_PKCS18_EncryptedData* pSrcValue, ASN1T_PKCS18_EncryptedData*
    pDstValue);

EXTERN void asn1Init_PKCS18_EncryptedData (ASN1T_PKCS18_EncryptedData* pvalue);

EXTERN void asn1Free_PKCS18_EncryptedData (OSCTXT *pctxt, 
   ASN1T_PKCS18_EncryptedData* pvalue);

/**************************************************************/
/*                                                            */
/*  PrivateKeyInfo                                            */
/*                                                            */
/**************************************************************/
/*
PrivateKeyInfo ::= SEQUENCE {
   version Version,
   privateKeyAlgorithm AlgorithmIdentifier,
   privateKey PrivateKey,
   attributes [0] Attributes OPTIONAL
}
*/
#define TV_PKCS18_PrivateKeyInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS18_PrivateKeyInfo;

struct EXTERN ASN1T_PKCS18_PrivateKeyInfo : public ASN1TPDU {
   struct {
      unsigned attributesPresent : 1;
   } m;
   ASN1T_EXP_Version version;
   ASN1T_EXP_AlgorithmIdentifier privateKeyAlgorithm;
   ASN1T_PKCS18_PrivateKey privateKey;
   ASN1T_PKCS10_Attributes attributes;
   ASN1T_PKCS18_PrivateKeyInfo ();
   ASN1T_PKCS18_PrivateKeyInfo (ASN1C_PKCS18_PrivateKeyInfo& srcData);
   ~ASN1T_PKCS18_PrivateKeyInfo ();
} ;

class EXTERN ASN1C_PKCS18_PrivateKeyInfo :
public ASN1CType
{
protected:
   ASN1T_PKCS18_PrivateKeyInfo& msgData;
public:
   ASN1C_PKCS18_PrivateKeyInfo (ASN1T_PKCS18_PrivateKeyInfo& data);
   ASN1C_PKCS18_PrivateKeyInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS18_PrivateKeyInfo& data);
   ASN1C_PKCS18_PrivateKeyInfo (OSRTContext &context
      , ASN1T_PKCS18_PrivateKeyInfo& data);
   ASN1C_PKCS18_PrivateKeyInfo (ASN1C_PKCS18_PrivateKeyInfo& original);
   virtual ~ASN1C_PKCS18_PrivateKeyInfo () {}
   inline ASN1T_PKCS18_PrivateKeyInfo& getData () { return msgData; }
   inline const ASN1T_PKCS18_PrivateKeyInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PrivateKeyInfo");
   int toStream (const char* name = "PrivateKeyInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS18_PrivateKeyInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS18_PrivateKeyInfo& getCopy (ASN1T_PKCS18_PrivateKeyInfo* pDstData = 0);
   ASN1T_PKCS18_PrivateKeyInfo* newCopy ();

   inline ASN1C_PKCS18_PrivateKeyInfo& operator= (ASN1C_PKCS18_PrivateKeyInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS18_PrivateKeyInfo (OSCTXT* pctxt,
   ASN1T_PKCS18_PrivateKeyInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS18_PrivateKeyInfo (OSCTXT* pctxt, 
   ASN1T_PKCS18_PrivateKeyInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS18_PrivateKeyInfo 
   (const char* name, const ASN1T_PKCS18_PrivateKeyInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS18_PrivateKeyInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_PrivateKeyInfo* pvalue);

EXTERN ASN1T_PKCS18_PrivateKeyInfo* 
   new_ASN1T_PKCS18_PrivateKeyInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS18_PrivateKeyInfo (const char* name, 
   ASN1T_PKCS18_PrivateKeyInfo* pValue, 
   ASN1T_PKCS18_PrivateKeyInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS18_PrivateKeyInfo (OSCTXT* pctxt, 
   ASN1T_PKCS18_PrivateKeyInfo* pSrcValue, ASN1T_PKCS18_PrivateKeyInfo*
    pDstValue);

EXTERN void asn1Init_PKCS18_PrivateKeyInfo (ASN1T_PKCS18_PrivateKeyInfo* pvalue);

EXTERN void asn1Free_PKCS18_PrivateKeyInfo (OSCTXT *pctxt, 
   ASN1T_PKCS18_PrivateKeyInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedPrivateKeyInfo                                   */
/*                                                            */
/**************************************************************/
/*
EncryptedPrivateKeyInfo ::= SEQUENCE {
   encryptionAlgorithm AlgorithmIdentifier,
   encryptedData EncryptedData
}
*/
#define TV_PKCS18_EncryptedPrivateKeyInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS18_EncryptedPrivateKeyInfo;

struct EXTERN ASN1T_PKCS18_EncryptedPrivateKeyInfo : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier encryptionAlgorithm;
   ASN1T_PKCS18_EncryptedData encryptedData;
   ASN1T_PKCS18_EncryptedPrivateKeyInfo ();
   ASN1T_PKCS18_EncryptedPrivateKeyInfo (ASN1C_PKCS18_EncryptedPrivateKeyInfo& srcData);
   ~ASN1T_PKCS18_EncryptedPrivateKeyInfo ();
} ;

class EXTERN ASN1C_PKCS18_EncryptedPrivateKeyInfo :
public ASN1CType
{
protected:
   ASN1T_PKCS18_EncryptedPrivateKeyInfo& msgData;
public:
   ASN1C_PKCS18_EncryptedPrivateKeyInfo
       (ASN1T_PKCS18_EncryptedPrivateKeyInfo& data);
   ASN1C_PKCS18_EncryptedPrivateKeyInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS18_EncryptedPrivateKeyInfo& data);
   ASN1C_PKCS18_EncryptedPrivateKeyInfo (OSRTContext &context
      , ASN1T_PKCS18_EncryptedPrivateKeyInfo& data);
   ASN1C_PKCS18_EncryptedPrivateKeyInfo (ASN1C_PKCS18_EncryptedPrivateKeyInfo& original);
   virtual ~ASN1C_PKCS18_EncryptedPrivateKeyInfo () {}
   inline ASN1T_PKCS18_EncryptedPrivateKeyInfo& getData () { return msgData; }
   inline const ASN1T_PKCS18_EncryptedPrivateKeyInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedPrivateKeyInfo");
   int toStream (const char* name = "EncryptedPrivateKeyInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS18_EncryptedPrivateKeyInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS18_EncryptedPrivateKeyInfo& getCopy (ASN1T_PKCS18_EncryptedPrivateKeyInfo* pDstData = 0);
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* newCopy ();

   inline ASN1C_PKCS18_EncryptedPrivateKeyInfo& operator= (ASN1C_PKCS18_EncryptedPrivateKeyInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS18_EncryptedPrivateKeyInfo (OSCTXT* pctxt,
   ASN1T_PKCS18_EncryptedPrivateKeyInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS18_EncryptedPrivateKeyInfo (OSCTXT* pctxt, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS18_EncryptedPrivateKeyInfo 
   (const char* name, const ASN1T_PKCS18_EncryptedPrivateKeyInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS18_EncryptedPrivateKeyInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_EncryptedPrivateKeyInfo* pvalue);

EXTERN ASN1T_PKCS18_EncryptedPrivateKeyInfo* 
   new_ASN1T_PKCS18_EncryptedPrivateKeyInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS18_EncryptedPrivateKeyInfo (const char* name, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pValue, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS18_EncryptedPrivateKeyInfo (OSCTXT* pctxt, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pSrcValue, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pDstValue);

EXTERN void asn1Init_PKCS18_EncryptedPrivateKeyInfo (
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pvalue);

EXTERN void asn1Free_PKCS18_EncryptedPrivateKeyInfo (OSCTXT *pctxt, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RSAPublicKey                                              */
/*                                                            */
/**************************************************************/
/*
PKCS1 basliyor

RSAPublicKey ::= SEQUENCE {
   modulus INTEGER,
   publicExponent INTEGER
}
*/
#define TV_PKCS18_RSAPublicKey	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS18_RSAPublicKey;

struct EXTERN ASN1T_PKCS18_RSAPublicKey : public ASN1TPDU {
   const char* modulus;
   const char* publicExponent;
   ASN1T_PKCS18_RSAPublicKey ();
   ASN1T_PKCS18_RSAPublicKey (ASN1C_PKCS18_RSAPublicKey& srcData);
} ;

class EXTERN ASN1C_PKCS18_RSAPublicKey :
public ASN1CType
{
protected:
   ASN1T_PKCS18_RSAPublicKey& msgData;
public:
   ASN1C_PKCS18_RSAPublicKey (ASN1T_PKCS18_RSAPublicKey& data);
   ASN1C_PKCS18_RSAPublicKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS18_RSAPublicKey& data);
   ASN1C_PKCS18_RSAPublicKey (OSRTContext &context
      , ASN1T_PKCS18_RSAPublicKey& data);
   ASN1C_PKCS18_RSAPublicKey (ASN1C_PKCS18_RSAPublicKey& original);
   virtual ~ASN1C_PKCS18_RSAPublicKey () {}
   inline ASN1T_PKCS18_RSAPublicKey& getData () { return msgData; }
   inline const ASN1T_PKCS18_RSAPublicKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RSAPublicKey");
   int toStream (const char* name = "RSAPublicKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS18_RSAPublicKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS18_RSAPublicKey& getCopy (ASN1T_PKCS18_RSAPublicKey* pDstData = 0);
   ASN1T_PKCS18_RSAPublicKey* newCopy ();

   inline ASN1C_PKCS18_RSAPublicKey& operator= (ASN1C_PKCS18_RSAPublicKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS18_RSAPublicKey (OSCTXT* pctxt,
   ASN1T_PKCS18_RSAPublicKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS18_RSAPublicKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_RSAPublicKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS18_RSAPublicKey 
   (const char* name, const ASN1T_PKCS18_RSAPublicKey* pvalue);

EXTERN int asn1PrtToStrm_PKCS18_RSAPublicKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_RSAPublicKey* pvalue);

EXTERN ASN1T_PKCS18_RSAPublicKey* 
   new_ASN1T_PKCS18_RSAPublicKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS18_RSAPublicKey (const char* name, 
   ASN1T_PKCS18_RSAPublicKey* pValue, ASN1T_PKCS18_RSAPublicKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS18_RSAPublicKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_RSAPublicKey* pSrcValue, ASN1T_PKCS18_RSAPublicKey* pDstValue);

/**************************************************************/
/*                                                            */
/*  RSAPrivateKey                                             */
/*                                                            */
/**************************************************************/
/*
RSAPrivateKey ::= SEQUENCE {
   version Version,
   modulus INTEGER,
   publicExponent INTEGER,
   privateExponent INTEGER,
   prime1 INTEGER,
   prime2 INTEGER,
   exponent1 INTEGER,
   exponent2 INTEGER,
   coefficient INTEGER
}
*/
#define TV_PKCS18_RSAPrivateKey	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS18_RSAPrivateKey;

struct EXTERN ASN1T_PKCS18_RSAPrivateKey : public ASN1TPDU {
   ASN1T_EXP_Version version;
   const char* modulus;
   const char* publicExponent;
   const char* privateExponent;
   const char* prime1;
   const char* prime2;
   const char* exponent1;
   const char* exponent2;
   const char* coefficient;
   ASN1T_PKCS18_RSAPrivateKey ();
   ASN1T_PKCS18_RSAPrivateKey (ASN1C_PKCS18_RSAPrivateKey& srcData);
} ;

class EXTERN ASN1C_PKCS18_RSAPrivateKey :
public ASN1CType
{
protected:
   ASN1T_PKCS18_RSAPrivateKey& msgData;
public:
   ASN1C_PKCS18_RSAPrivateKey (ASN1T_PKCS18_RSAPrivateKey& data);
   ASN1C_PKCS18_RSAPrivateKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS18_RSAPrivateKey& data);
   ASN1C_PKCS18_RSAPrivateKey (OSRTContext &context
      , ASN1T_PKCS18_RSAPrivateKey& data);
   ASN1C_PKCS18_RSAPrivateKey (ASN1C_PKCS18_RSAPrivateKey& original);
   virtual ~ASN1C_PKCS18_RSAPrivateKey () {}
   inline ASN1T_PKCS18_RSAPrivateKey& getData () { return msgData; }
   inline const ASN1T_PKCS18_RSAPrivateKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RSAPrivateKey");
   int toStream (const char* name = "RSAPrivateKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS18_RSAPrivateKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS18_RSAPrivateKey& getCopy (ASN1T_PKCS18_RSAPrivateKey* pDstData = 0);
   ASN1T_PKCS18_RSAPrivateKey* newCopy ();

   inline ASN1C_PKCS18_RSAPrivateKey& operator= (ASN1C_PKCS18_RSAPrivateKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS18_RSAPrivateKey (OSCTXT* pctxt,
   ASN1T_PKCS18_RSAPrivateKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS18_RSAPrivateKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_RSAPrivateKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS18_RSAPrivateKey 
   (const char* name, const ASN1T_PKCS18_RSAPrivateKey* pvalue);

EXTERN int asn1PrtToStrm_PKCS18_RSAPrivateKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_RSAPrivateKey* pvalue);

EXTERN ASN1T_PKCS18_RSAPrivateKey* 
   new_ASN1T_PKCS18_RSAPrivateKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS18_RSAPrivateKey (const char* name, 
   ASN1T_PKCS18_RSAPrivateKey* pValue, ASN1T_PKCS18_RSAPrivateKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS18_RSAPrivateKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_RSAPrivateKey* pSrcValue, ASN1T_PKCS18_RSAPrivateKey*
    pDstValue);

#endif
