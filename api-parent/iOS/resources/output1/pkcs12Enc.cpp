/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkcs12.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_PKCS12_KeyBag (OSCTXT* pctxt,
   ASN1T_PKCS12_KeyBag *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyBag");

   ll = asn1E_PKCS18_PrivateKeyInfo (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_PKCS8ShroudedKeyBag (OSCTXT* pctxt,
   ASN1T_PKCS12_PKCS8ShroudedKeyBag *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKCS8ShroudedKeyBag");

   ll = asn1E_PKCS18_EncryptedPrivateKeyInfo (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12__x509Certificate_Type (OSCTXT* pctxt,
   ASN1T_PKCS12__x509Certificate_Type *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   return (ll0);
}

EXTERN int asn1E_PKCS12__x509CRL_Type (OSCTXT* pctxt,
   ASN1T_PKCS12__x509CRL_Type *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   return (ll0);
}

EXTERN int asn1E_PKCS12_PFX_version (OSCTXT* pctxt,
   ASN1T_PKCS12_PFX_version *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   ll = xe_unsigned (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   return (ll0);
}

EXTERN int asn1E_PKCS12_MacData (OSCTXT* pctxt,
   ASN1T_PKCS12_MacData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "MacData");

   /* encode iterations */

   RTXCTXTPUSHELEMNAME (pctxt, "iterations");

   ll = xe_integer (pctxt, &pvalue->iterations, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode macSalt */

   RTXCTXTPUSHELEMNAME (pctxt, "macSalt");

   ll = xe_octstr (pctxt, pvalue->macSalt.data, pvalue->macSalt.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode mac */

   RTXCTXTPUSHELEMNAME (pctxt, "mac");

   ll = asn1E_PKCS7_DigestInfo (pctxt, &pvalue->mac, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_PFX (OSCTXT* pctxt,
   ASN1T_PKCS12_PFX *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PFX");

   /* encode macData */

   if (pvalue->m.macDataPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "macData");

      ll = asn1E_PKCS12_MacData (pctxt, &pvalue->macData, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode authSafe */

   RTXCTXTPUSHELEMNAME (pctxt, "authSafe");

   ll = asn1E_PKCS7_ContentInfo (pctxt, &pvalue->authSafe, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_PKCS12_PFX_version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_AuthenticatedSafe (OSCTXT* pctxt,
   ASN1T_PKCS12_AuthenticatedSafe *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AuthenticatedSafe");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "ContentInfo", xx1);

      ll = asn1E_PKCS7_ContentInfo (pctxt, ((ASN1T_PKCS7_ContentInfo*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_PKCS12Attribute_attrValues (OSCTXT* pctxt,
   ASN1T_PKCS12_PKCS12Attribute_attrValues *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OPEN_TYPE", xx1);

      ll = xe_OpenType (pctxt, ((ASN1TOpenType*)pnode->data)->data, ((ASN1TOpenType*)pnode->data)->numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   return (ll0);
}

EXTERN int asn1E_PKCS12_PKCS12Attribute (OSCTXT* pctxt,
   ASN1T_PKCS12_PKCS12Attribute *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKCS12Attribute");

   /* encode attrValues */

   RTXCTXTPUSHELEMNAME (pctxt, "attrValues");

   ll = asn1E_PKCS12_PKCS12Attribute_attrValues (pctxt, &pvalue->attrValues, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode attrId */

   RTXCTXTPUSHELEMNAME (pctxt, "attrId");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->attrId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12__SetOfPKCS12_PKCS12Attribute (OSCTXT* pctxt,
   ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "PKCS12Attribute", xx1);

      ll = asn1E_PKCS12_PKCS12Attribute (pctxt, ((ASN1T_PKCS12_PKCS12Attribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   return (ll0);
}

EXTERN int asn1E_PKCS12_SafeBag (OSCTXT* pctxt,
   ASN1T_PKCS12_SafeBag *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SafeBag");

   /* encode bagAttributes */

   if (pvalue->m.bagAttributesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "bagAttributes");

      ll = asn1E_PKCS12__SetOfPKCS12_PKCS12Attribute (pctxt, &pvalue->bagAttributes, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode bagValue */

   RTXCTXTPUSHELEMNAME (pctxt, "bagValue");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
      xe_OpenType (pctxt, pvalue->bagValue.data, pvalue->bagValue.numocts));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode bagId */

   RTXCTXTPUSHELEMNAME (pctxt, "bagId");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->bagId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_SafeContents (OSCTXT* pctxt,
   ASN1T_PKCS12_SafeContents *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SafeContents");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SafeBag", xx1);

      ll = asn1E_PKCS12_SafeBag (pctxt, ((ASN1T_PKCS12_SafeBag*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_CertBag (OSCTXT* pctxt,
   ASN1T_PKCS12_CertBag *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertBag");

   /* encode certValue */

   RTXCTXTPUSHELEMNAME (pctxt, "certValue");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
      xe_OpenType (pctxt, pvalue->certValue.data, pvalue->certValue.numocts));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certId */

   RTXCTXTPUSHELEMNAME (pctxt, "certId");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->certId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_CRLBag (OSCTXT* pctxt,
   ASN1T_PKCS12_CRLBag *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CRLBag");

   /* encode crltValue */

   RTXCTXTPUSHELEMNAME (pctxt, "crltValue");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
      xe_OpenType (pctxt, pvalue->crltValue.data, pvalue->crltValue.numocts));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode crlId */

   RTXCTXTPUSHELEMNAME (pctxt, "crlId");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->crlId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_SecretBag (OSCTXT* pctxt,
   ASN1T_PKCS12_SecretBag *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SecretBag");

   /* encode secretValue */

   RTXCTXTPUSHELEMNAME (pctxt, "secretValue");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
      xe_OpenType (pctxt, pvalue->secretValue.data, pvalue->secretValue.numocts));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode secretTypeId */

   RTXCTXTPUSHELEMNAME (pctxt, "secretTypeId");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->secretTypeId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS12_PKCS12PbeParams (OSCTXT* pctxt,
   ASN1T_PKCS12_PKCS12PbeParams *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKCS12PbeParams");

   /* encode iterations */

   RTXCTXTPUSHELEMNAME (pctxt, "iterations");

   ll = xe_integer (pctxt, &pvalue->iterations, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode salt */

   RTXCTXTPUSHELEMNAME (pctxt, "salt");

   ll = xe_octstr (pctxt, pvalue->salt.data, pvalue->salt.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

