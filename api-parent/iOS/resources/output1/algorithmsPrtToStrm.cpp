/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "algorithms.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_ALGOS_KEA_Parms_Id (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_KEA_Parms_Id* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_ALGOS_KEA_Parms_Id::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_KEA_Parms_Id (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_KEA_Parms_Id::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_Prime_p (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Prime_p* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, name, *pvalue);
   return 0;
}

int ASN1C_ALGOS_Prime_p::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_Prime_p (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_Prime_p::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_Trinomial (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Trinomial* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, name, *pvalue);
   return 0;
}

int ASN1C_ALGOS_Trinomial::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_Trinomial (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_Trinomial::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_FieldElement (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_FieldElement* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_ALGOS_FieldElement::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_FieldElement (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_FieldElement::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_ECPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECPoint* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_ALGOS_ECPoint::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_ECPoint (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_ECPoint::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_HashAlgorithm (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_HashAlgorithm* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ALGOS_HashAlgorithm::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_HashAlgorithm (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_HashAlgorithm::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_SpecifiedECDomainVersion (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_SpecifiedECDomainVersion* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 1: rtxStrcat (namebuf, 512, "ecdpVer1\n");break;
         case 2: rtxStrcat (namebuf, 512, "ecdpVer2\n");break;
         case 3: rtxStrcat (namebuf, 512, "ecdpVer3\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_ALGOS_SpecifiedECDomainVersion::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_SpecifiedECDomainVersion (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_SpecifiedECDomainVersion::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_ECPVer (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECPVer* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 1: rtxStrcat (namebuf, 512, "ecpVer1\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_ALGOS_ECPVer::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_ECPVer (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_ECPVer::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_ECPrivateKey_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECPrivateKey_version* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 1: rtxStrcat (namebuf, 512, "ecPrivkeyVer1\n");break;
         default:
            rtPrintToStreamUnsigned (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_ALGOS_ECPrivateKey_version::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_ECPrivateKey_version (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_ECPrivateKey_version::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_Dss_Parms (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Dss_Parms* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "p", pvalue->p);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "q", pvalue->q);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "g", pvalue->g);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_Dss_Parms::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_Dss_Parms (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_Dss_Parms::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_DssSigValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_DssSigValue* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "r", pvalue->r);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "s", pvalue->s);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_DssSigValue::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_DssSigValue (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_DssSigValue::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_ValidationParms (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ValidationParms* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, "seed", pvalue->seed.numbits, pvalue->seed.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "pgenCounter", pvalue->pgenCounter);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_ValidationParms::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_ValidationParms (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_ValidationParms::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_DomainParameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_DomainParameters* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "p", pvalue->p);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "g", pvalue->g);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "q", pvalue->q);

   if (pvalue->m.jPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamInteger (pctxt, "j", pvalue->j);
   }

   if (pvalue->m.validationParmsPresent) {
      asn1PrtToStrm_ALGOS_ValidationParms (pctxt, "validationParms", &pvalue->validationParms);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_DomainParameters::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_DomainParameters (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_DomainParameters::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_FieldID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_FieldID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "fieldType", (ASN1OBJID*)&pvalue->fieldType);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "parameters",
      pvalue->parameters.numocts, pvalue->parameters.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_FieldID::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_FieldID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_FieldID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_ECDSASigValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECDSASigValue* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "r", pvalue->r);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "s", pvalue->s);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_ECDSASigValue::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_ECDSASigValue (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_ECDSASigValue::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_Characteristic_two (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Characteristic_two* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "m_", pvalue->m_);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "basis", (ASN1OBJID*)&pvalue->basis);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "parameters",
      pvalue->parameters.numocts, pvalue->parameters.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_Characteristic_two::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_Characteristic_two (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_Characteristic_two::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_Pentanomial (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Pentanomial* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "k1", pvalue->k1);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "k2", pvalue->k2);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "k3", pvalue->k3);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_Pentanomial::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_Pentanomial (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_Pentanomial::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_Curve (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_Curve* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ALGOS_FieldElement (pctxt, "a", &pvalue->a);

   asn1PrtToStrm_ALGOS_FieldElement (pctxt, "b", &pvalue->b);

   if (pvalue->m.seedPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamBitStrBraceText (pctxt, "seed", pvalue->seed.numbits, pvalue->seed.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_Curve::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_Curve (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_Curve::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_SpecifiedECDomain (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_SpecifiedECDomain* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, "version");
      rtxStrcat (namebuf, 512, " = ");
      switch (pvalue->version) {
         case 1: rtxStrcat (namebuf, 512, "ecdpVer1\n");break;
         case 2: rtxStrcat (namebuf, 512, "ecdpVer2\n");break;
         case 3: rtxStrcat (namebuf, 512, "ecdpVer3\n");break;
         default:
            rtPrintToStreamInteger (pctxt, "version", pvalue->version);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }

   asn1PrtToStrm_ALGOS_FieldID (pctxt, "fieldID", &pvalue->fieldID);

   asn1PrtToStrm_ALGOS_Curve (pctxt, "curve", &pvalue->curve);

   asn1PrtToStrm_ALGOS_ECPoint (pctxt, "base", &pvalue->base);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "order", pvalue->order);

   if (pvalue->m.cofactorPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "cofactor", pvalue->cofactor);
   }

   if (pvalue->m.hashPresent) {
      asn1PrtToStrm_ALGOS_HashAlgorithm (pctxt, "hash", &pvalue->hash);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_SpecifiedECDomain::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_SpecifiedECDomain (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_SpecifiedECDomain::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_ECParameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECParameters* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* implicitCurve */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamNull (pctxt, "implicitCurve");
         break;
      }
      /* namedCurve */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamOID (pctxt, "namedCurve", (ASN1OBJID*)pvalue->u.namedCurve);
         break;
      }
      /* specifiedCurve */
      case 3:
      {
         asn1PrtToStrm_ALGOS_SpecifiedECDomain (pctxt, "specifiedCurve", pvalue->u.specifiedCurve);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_ECParameters::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_ECParameters (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_ECParameters::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_ECPrivateKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_ECPrivateKey* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ALGOS_ECPrivateKey_version (pctxt, "version", &pvalue->version);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "privateKey", pvalue->privateKey.numocts, pvalue->privateKey.data);

   if (pvalue->m.parametersPresent) {
      asn1PrtToStrm_ALGOS_ECParameters (pctxt, "parameters", &pvalue->parameters);
   }

   if (pvalue->m.publicKeyPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamBitStrBraceText (pctxt, "publicKey", pvalue->publicKey.numbits, pvalue->publicKey.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_ECPrivateKey::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_ECPrivateKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_ECPrivateKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ALGOS_RSASSA_PSS_params (OSCTXT *pctxt, 
   const char* name, const ASN1T_ALGOS_RSASSA_PSS_params* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.hashAlgorithmPresent) {
      asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "hashAlgorithm", &pvalue->hashAlgorithm);
   }

   if (pvalue->m.maskGenAlgorithmPresent) {
      asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "maskGenAlgorithm", &pvalue->maskGenAlgorithm);
   }

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "saltLength", pvalue->saltLength);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "trailerField", pvalue->trailerField);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ALGOS_RSASSA_PSS_params::toStream (const char* name)

{
   asn1PrtToStrm_ALGOS_RSASSA_PSS_params (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ALGOS_RSASSA_PSS_params::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

