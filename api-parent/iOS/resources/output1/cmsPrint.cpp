/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "cms.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_CMS_ContentType 
   (const char* name, const ASN1T_CMS_ContentType* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_CMS_ContentType::Print (const char* name)
{
   asn1Print_CMS_ContentType (name, &msgData);
}

void asn1Print_CMS_EncryptedKey 
   (const char* name, const ASN1T_CMS_EncryptedKey* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_CMS_EncryptedKey::Print (const char* name)
{
   asn1Print_CMS_EncryptedKey (name, &msgData);
}

void asn1Print_CMS_SubjectKeyIdentifier 
   (const char* name, const ASN1T_CMS_SubjectKeyIdentifier* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_CMS_SubjectKeyIdentifier::Print (const char* name)
{
   asn1Print_CMS_SubjectKeyIdentifier (name, &msgData);
}

void asn1Print_CMS_Digest (const char* name, const ASN1T_CMS_Digest* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_CMS_Digest::Print (const char* name)
{
   asn1Print_CMS_Digest (name, &msgData);
}

void asn1Print_CMS_MessageAuthenticationCode 
   (const char* name, const ASN1T_CMS_MessageAuthenticationCode* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_CMS_MessageAuthenticationCode::Print (const char* name)
{
   asn1Print_CMS_MessageAuthenticationCode (name, &msgData);
}

void asn1Print_CMS_DigestAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_DigestAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_CMS_DigestAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_CMS_DigestAlgorithmIdentifier (name, &msgData);
}

void asn1Print_CMS_SignatureAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_SignatureAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_CMS_SignatureAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_CMS_SignatureAlgorithmIdentifier (name, &msgData);
}

void asn1Print_CMS_KeyEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_CMS_KeyEncryptionAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_CMS_KeyEncryptionAlgorithmIdentifier (name, &msgData);
}

void asn1Print_CMS_ContentEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_CMS_ContentEncryptionAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_CMS_ContentEncryptionAlgorithmIdentifier (name, &msgData);
}

void asn1Print_CMS_MessageAuthenticationCodeAlgorithm 
   (const char* name, const ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_CMS_MessageAuthenticationCodeAlgorithm::Print (const char* name)
{
   asn1Print_CMS_MessageAuthenticationCodeAlgorithm (name, &msgData);
}

void asn1Print_CMS_KeyDerivationAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_CMS_KeyDerivationAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_CMS_KeyDerivationAlgorithmIdentifier (name, &msgData);
}

void asn1Print_CMS_AttributeCertificateV2 
   (const char* name, const ASN1T_CMS_AttributeCertificateV2* pvalue)
{
   asn1Print_ATTRCERT_AttributeCertificate (name, pvalue);
}

void ASN1C_CMS_AttributeCertificateV2::Print (const char* name)
{
   asn1Print_CMS_AttributeCertificateV2 (name, &msgData);
}

void asn1Print_CMS_CMSVersion 
   (const char* name, const ASN1T_CMS_CMSVersion* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 0: printf ("%s = v0\n", name); break;
      case 1: printf ("%s = v1\n", name); break;
      case 2: printf ("%s = v2\n", name); break;
      case 3: printf ("%s = v3\n", name); break;
      case 4: printf ("%s = v4\n", name); break;
      case 5: printf ("%s = v5\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_CMS_CMSVersion::Print (const char* name)
{
   asn1Print_CMS_CMSVersion (name, &msgData);
}

void asn1Print_CMS_UserKeyingMaterial 
   (const char* name, const ASN1T_CMS_UserKeyingMaterial* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_CMS_UserKeyingMaterial::Print (const char* name)
{
   asn1Print_CMS_UserKeyingMaterial (name, &msgData);
}

void asn1Print_CMS_MessageDigest 
   (const char* name, const ASN1T_CMS_MessageDigest* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_CMS_MessageDigest::Print (const char* name)
{
   asn1Print_CMS_MessageDigest (name, &msgData);
}

void asn1Print_CMS_SignerIdentifier 
   (const char* name, const ASN1T_CMS_SignerIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1Print_PKCS7_IssuerAndSerialNumber ("issuerAndSerialNumber", pvalue
            ->u.issuerAndSerialNumber);
         break;
      }
      /* subjectKeyIdentifier */
      case 2:
      {
         asn1Print_CMS_SubjectKeyIdentifier ("subjectKeyIdentifier", pvalue->
            u.subjectKeyIdentifier);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_SignerIdentifier::Print (const char* name)
{
   asn1Print_CMS_SignerIdentifier (name, &msgData);
}

void asn1Print_CMS_UnsignedAttributes 
   (const char* name, const ASN1T_CMS_UnsignedAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Attribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_UnsignedAttributes::Print (const char* name)
{
   asn1Print_CMS_UnsignedAttributes (name, &msgData);
}

void asn1Print_CMS_SignerInfo 
   (const char* name, const ASN1T_CMS_SignerInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   asn1Print_CMS_SignerIdentifier ("sid", &pvalue->sid);

   asn1Print_CMS_DigestAlgorithmIdentifier ("digestAlgorithm", &pvalue->
      digestAlgorithm);

   if (pvalue->m.signedAttrsPresent) {
      asn1Print_DERCMS_SignedAttributes ("signedAttrs", &pvalue->signedAttrs);
   }

   asn1Print_CMS_SignatureAlgorithmIdentifier ("signatureAlgorithm", &pvalue->
      signatureAlgorithm);

   asn1Print_DERCMS_SignatureValue ("signature_", &pvalue->signature_);

   if (pvalue->m.unsignedAttrsPresent) {
      asn1Print_CMS_UnsignedAttributes ("unsignedAttrs", &pvalue->unsignedAttrs
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_SignerInfo::Print (const char* name)
{
   asn1Print_CMS_SignerInfo (name, &msgData);
}

void asn1Print_CMS_Countersignature 
   (const char* name, const ASN1T_CMS_Countersignature* pvalue)
{
   asn1Print_CMS_SignerInfo (name, pvalue);
}

void ASN1C_CMS_Countersignature::Print (const char* name)
{
   asn1Print_CMS_Countersignature (name, &msgData);
}

void asn1Print_CMS_Signature 
   (const char* name, const ASN1T_CMS_Signature* pvalue)
{
   rtxPrintIndent ();
   rtPrintBitStrBraceText (name, pvalue->numbits, pvalue->data);
}

void ASN1C_CMS_Signature::Print (const char* name)
{
   asn1Print_CMS_Signature (name, &msgData);
}

void asn1Print_CMS_ContentInfo 
   (const char* name, const ASN1T_CMS_ContentInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_ContentType ("contentType", &pvalue->contentType);

   rtxPrintIndent ();
   rtxPrintHexStr ("content", pvalue->content.numocts,
   pvalue->content.data);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_ContentInfo::Print (const char* name)
{
   asn1Print_CMS_ContentInfo (name, &msgData);
}

void asn1Print_CMS_EncapsulatedContentInfo 
   (const char* name, const ASN1T_CMS_EncapsulatedContentInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_ContentType ("eContentType", &pvalue->eContentType);

   if (pvalue->m.eContentPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("eContent", pvalue->eContent.numocts, pvalue->eContent.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_EncapsulatedContentInfo::Print (const char* name)
{
   asn1Print_CMS_EncapsulatedContentInfo (name, &msgData);
}

void asn1Print_CMS_UnauthAttributes 
   (const char* name, const ASN1T_CMS_UnauthAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Attribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_UnauthAttributes::Print (const char* name)
{
   asn1Print_CMS_UnauthAttributes (name, &msgData);
}

void asn1Print_CMS_ExtendedCertificateInfo 
   (const char* name, const ASN1T_CMS_ExtendedCertificateInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   asn1Print_EXP_Certificate ("certificate", &pvalue->certificate);

   asn1Print_CMS_UnauthAttributes ("attributes", &pvalue->attributes);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_ExtendedCertificateInfo::Print (const char* name)
{
   asn1Print_CMS_ExtendedCertificateInfo (name, &msgData);
}

void asn1Print_CMS_ExtendedCertificate 
   (const char* name, const ASN1T_CMS_ExtendedCertificate* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_ExtendedCertificateInfo ("extendedCertificateInfo", &pvalue->
      extendedCertificateInfo);

   asn1Print_CMS_SignatureAlgorithmIdentifier ("signatureAlgorithm", &pvalue->
      signatureAlgorithm);

   asn1Print_CMS_Signature ("signature_", &pvalue->signature_);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_ExtendedCertificate::Print (const char* name)
{
   asn1Print_CMS_ExtendedCertificate (name, &msgData);
}

void asn1Print_CMS_OtherCertificateFormat 
   (const char* name, const ASN1T_CMS_OtherCertificateFormat* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("otherCertFormat", (ASN1OBJID*)&pvalue->otherCertFormat);

   rtxPrintIndent ();
   rtxPrintHexStr ("otherCert", pvalue->otherCert.numocts,
   pvalue->otherCert.data);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_OtherCertificateFormat::Print (const char* name)
{
   asn1Print_CMS_OtherCertificateFormat (name, &msgData);
}

void asn1Print_CMS_CertificateChoices 
   (const char* name, const ASN1T_CMS_CertificateChoices* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* certificate */
      case 1:
      {
         asn1Print_EXP_Certificate ("certificate", pvalue->u.certificate);
         break;
      }
      /* extendedCertificate */
      case 2:
      {
         asn1Print_CMS_ExtendedCertificate ("extendedCertificate", pvalue->
            u.extendedCertificate);
         break;
      }
      /* v1AttrCert */
      case 3:
      {
         asn1Print_ATTRCERT_AttributeCertificateV1 ("v1AttrCert", pvalue->
            u.v1AttrCert);
         break;
      }
      /* v2AttrCert */
      case 4:
      {
         asn1Print_CMS_AttributeCertificateV2 ("v2AttrCert", pvalue->
            u.v2AttrCert);
         break;
      }
      /* other */
      case 5:
      {
         asn1Print_CMS_OtherCertificateFormat ("other", pvalue->u.other);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_CertificateChoices::Print (const char* name)
{
   asn1Print_CMS_CertificateChoices (name, &msgData);
}

void asn1Print_CMS_CertificateSet 
   (const char* name, const ASN1T_CMS_CertificateSet* pvalue)
{
   ASN1T_CMS_CertificateChoices* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMS_CertificateChoices*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMS_CertificateChoices (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_CertificateSet::Print (const char* name)
{
   asn1Print_CMS_CertificateSet (name, &msgData);
}

void asn1Print_CMS_OtherRevocationInfoFormat 
   (const char* name, const ASN1T_CMS_OtherRevocationInfoFormat* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("otherRevInfoFormat", (ASN1OBJID*)&pvalue->otherRevInfoFormat);

   rtxPrintIndent ();
   rtxPrintHexStr ("otherRevInfo", pvalue->otherRevInfo.numocts,
   pvalue->otherRevInfo.data);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_OtherRevocationInfoFormat::Print (const char* name)
{
   asn1Print_CMS_OtherRevocationInfoFormat (name, &msgData);
}

void asn1Print_CMS_RevocationInfoChoice 
   (const char* name, const ASN1T_CMS_RevocationInfoChoice* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* crl */
      case 1:
      {
         asn1Print_EXP_CertificateList ("crl", pvalue->u.crl);
         break;
      }
      /* other */
      case 2:
      {
         asn1Print_CMS_OtherRevocationInfoFormat ("other", pvalue->u.other);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_RevocationInfoChoice::Print (const char* name)
{
   asn1Print_CMS_RevocationInfoChoice (name, &msgData);
}

void asn1Print_CMS_RevocationInfoChoices 
   (const char* name, const ASN1T_CMS_RevocationInfoChoices* pvalue)
{
   ASN1T_CMS_RevocationInfoChoice* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMS_RevocationInfoChoice*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMS_RevocationInfoChoice (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_RevocationInfoChoices::Print (const char* name)
{
   asn1Print_CMS_RevocationInfoChoices (name, &msgData);
}

void asn1Print_CMS_SignerInfos 
   (const char* name, const ASN1T_CMS_SignerInfos* pvalue)
{
   ASN1T_CMS_SignerInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMS_SignerInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMS_SignerInfo (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_SignerInfos::Print (const char* name)
{
   asn1Print_CMS_SignerInfos (name, &msgData);
}

void asn1Print_CMS_SignedData 
   (const char* name, const ASN1T_CMS_SignedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   asn1Print_PKCS7_DigestAlgorithmIdentifiers ("digestAlgorithms", &pvalue->
      digestAlgorithms);

   asn1Print_CMS_EncapsulatedContentInfo ("encapContentInfo", &pvalue->
      encapContentInfo);

   if (pvalue->m.certificatesPresent) {
      asn1Print_CMS_CertificateSet ("certificates", &pvalue->certificates);
   }

   if (pvalue->m.crlsPresent) {
      asn1Print_CMS_RevocationInfoChoices ("crls", &pvalue->crls);
   }

   asn1Print_CMS_SignerInfos ("signerInfos", &pvalue->signerInfos);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_SignedData::Print (const char* name)
{
   asn1Print_CMS_SignedData (name, &msgData);
}

void asn1Print_CMS_OriginatorInfo 
   (const char* name, const ASN1T_CMS_OriginatorInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.certsPresent) {
      asn1Print_CMS_CertificateSet ("certs", &pvalue->certs);
   }

   if (pvalue->m.crlsPresent) {
      asn1Print_CMS_RevocationInfoChoices ("crls", &pvalue->crls);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_OriginatorInfo::Print (const char* name)
{
   asn1Print_CMS_OriginatorInfo (name, &msgData);
}

void asn1Print_CMS_RecipientIdentifier 
   (const char* name, const ASN1T_CMS_RecipientIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1Print_PKCS7_IssuerAndSerialNumber ("issuerAndSerialNumber", pvalue
            ->u.issuerAndSerialNumber);
         break;
      }
      /* subjectKeyIdentifier */
      case 2:
      {
         asn1Print_CMS_SubjectKeyIdentifier ("subjectKeyIdentifier", pvalue->
            u.subjectKeyIdentifier);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_RecipientIdentifier::Print (const char* name)
{
   asn1Print_CMS_RecipientIdentifier (name, &msgData);
}

void asn1Print_CMS_KeyTransRecipientInfo 
   (const char* name, const ASN1T_CMS_KeyTransRecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   asn1Print_CMS_RecipientIdentifier ("rid", &pvalue->rid);

   asn1Print_CMS_KeyEncryptionAlgorithmIdentifier ("keyEncryptionAlgorithm", &
      pvalue->keyEncryptionAlgorithm);

   asn1Print_CMS_EncryptedKey ("encryptedKey", &pvalue->encryptedKey);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_KeyTransRecipientInfo::Print (const char* name)
{
   asn1Print_CMS_KeyTransRecipientInfo (name, &msgData);
}

void asn1Print_CMS_OriginatorPublicKey 
   (const char* name, const ASN1T_CMS_OriginatorPublicKey* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("algorithm", &pvalue->algorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("publicKey", pvalue->publicKey.numbits, pvalue->publicKey.data);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_OriginatorPublicKey::Print (const char* name)
{
   asn1Print_CMS_OriginatorPublicKey (name, &msgData);
}

void asn1Print_CMS_OriginatorIdentifierOrKey 
   (const char* name, const ASN1T_CMS_OriginatorIdentifierOrKey* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1Print_PKCS7_IssuerAndSerialNumber ("issuerAndSerialNumber", pvalue
            ->u.issuerAndSerialNumber);
         break;
      }
      /* subjectKeyIdentifier */
      case 2:
      {
         asn1Print_CMS_SubjectKeyIdentifier ("subjectKeyIdentifier", pvalue->
            u.subjectKeyIdentifier);
         break;
      }
      /* originatorKey */
      case 3:
      {
         asn1Print_CMS_OriginatorPublicKey ("originatorKey", pvalue->
            u.originatorKey);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_OriginatorIdentifierOrKey::Print (const char* name)
{
   asn1Print_CMS_OriginatorIdentifierOrKey (name, &msgData);
}

void asn1Print_CMS_OtherKeyAttribute 
   (const char* name, const ASN1T_CMS_OtherKeyAttribute* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("keyAttrId", (ASN1OBJID*)&pvalue->keyAttrId);

   if (pvalue->m.keyAttrPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("keyAttr", pvalue->keyAttr.numocts,
      pvalue->keyAttr.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_OtherKeyAttribute::Print (const char* name)
{
   asn1Print_CMS_OtherKeyAttribute (name, &msgData);
}

void asn1Print_CMS_RecipientKeyIdentifier 
   (const char* name, const ASN1T_CMS_RecipientKeyIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_SubjectKeyIdentifier ("subjectKeyIdentifier", &pvalue->
      subjectKeyIdentifier);

   if (pvalue->m.datePresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("date", pvalue->date);
   }

   if (pvalue->m.otherPresent) {
      asn1Print_CMS_OtherKeyAttribute ("other", &pvalue->other);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_RecipientKeyIdentifier::Print (const char* name)
{
   asn1Print_CMS_RecipientKeyIdentifier (name, &msgData);
}

void asn1Print_CMS_KeyAgreeRecipientIdentifier 
   (const char* name, const ASN1T_CMS_KeyAgreeRecipientIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1Print_PKCS7_IssuerAndSerialNumber ("issuerAndSerialNumber", pvalue
            ->u.issuerAndSerialNumber);
         break;
      }
      /* rKeyId */
      case 2:
      {
         asn1Print_CMS_RecipientKeyIdentifier ("rKeyId", pvalue->u.rKeyId);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_KeyAgreeRecipientIdentifier::Print (const char* name)
{
   asn1Print_CMS_KeyAgreeRecipientIdentifier (name, &msgData);
}

void asn1Print_CMS_RecipientEncryptedKey 
   (const char* name, const ASN1T_CMS_RecipientEncryptedKey* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_KeyAgreeRecipientIdentifier ("rid", &pvalue->rid);

   asn1Print_CMS_EncryptedKey ("encryptedKey", &pvalue->encryptedKey);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_RecipientEncryptedKey::Print (const char* name)
{
   asn1Print_CMS_RecipientEncryptedKey (name, &msgData);
}

void asn1Print_CMS_RecipientEncryptedKeys 
   (const char* name, const ASN1T_CMS_RecipientEncryptedKeys* pvalue)
{
   ASN1T_CMS_RecipientEncryptedKey* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMS_RecipientEncryptedKey*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMS_RecipientEncryptedKey (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_RecipientEncryptedKeys::Print (const char* name)
{
   asn1Print_CMS_RecipientEncryptedKeys (name, &msgData);
}

void asn1Print_CMS_KeyAgreeRecipientInfo 
   (const char* name, const ASN1T_CMS_KeyAgreeRecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   asn1Print_CMS_OriginatorIdentifierOrKey ("originator", &pvalue->originator
      );

   if (pvalue->m.ukmPresent) {
      asn1Print_CMS_UserKeyingMaterial ("ukm", &pvalue->ukm);
   }

   asn1Print_CMS_KeyEncryptionAlgorithmIdentifier ("keyEncryptionAlgorithm", &
      pvalue->keyEncryptionAlgorithm);

   asn1Print_CMS_RecipientEncryptedKeys ("recipientEncryptedKeys", &pvalue->
      recipientEncryptedKeys);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_KeyAgreeRecipientInfo::Print (const char* name)
{
   asn1Print_CMS_KeyAgreeRecipientInfo (name, &msgData);
}

void asn1Print_CMS_KEKIdentifier 
   (const char* name, const ASN1T_CMS_KEKIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintHexStr ("keyIdentifier", pvalue->keyIdentifier.numocts, pvalue->keyIdentifier.data);

   if (pvalue->m.datePresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("date", pvalue->date);
   }

   if (pvalue->m.otherPresent) {
      asn1Print_CMS_OtherKeyAttribute ("other", &pvalue->other);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_KEKIdentifier::Print (const char* name)
{
   asn1Print_CMS_KEKIdentifier (name, &msgData);
}

void asn1Print_CMS_KEKRecipientInfo 
   (const char* name, const ASN1T_CMS_KEKRecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   asn1Print_CMS_KEKIdentifier ("kekid", &pvalue->kekid);

   asn1Print_CMS_KeyEncryptionAlgorithmIdentifier ("keyEncryptionAlgorithm", &
      pvalue->keyEncryptionAlgorithm);

   asn1Print_CMS_EncryptedKey ("encryptedKey", &pvalue->encryptedKey);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_KEKRecipientInfo::Print (const char* name)
{
   asn1Print_CMS_KEKRecipientInfo (name, &msgData);
}

void asn1Print_CMS_PasswordRecipientInfo 
   (const char* name, const ASN1T_CMS_PasswordRecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   if (pvalue->m.keyDerivationAlgorithmPresent) {
      asn1Print_CMS_KeyDerivationAlgorithmIdentifier (
         "keyDerivationAlgorithm", &pvalue->keyDerivationAlgorithm);
   }

   asn1Print_CMS_KeyEncryptionAlgorithmIdentifier ("keyEncryptionAlgorithm", &
      pvalue->keyEncryptionAlgorithm);

   asn1Print_CMS_EncryptedKey ("encryptedKey", &pvalue->encryptedKey);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_PasswordRecipientInfo::Print (const char* name)
{
   asn1Print_CMS_PasswordRecipientInfo (name, &msgData);
}

void asn1Print_CMS_OtherRecipientInfo 
   (const char* name, const ASN1T_CMS_OtherRecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("oriType", (ASN1OBJID*)&pvalue->oriType);

   rtxPrintIndent ();
   rtxPrintHexStr ("oriValue", pvalue->oriValue.numocts,
   pvalue->oriValue.data);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_OtherRecipientInfo::Print (const char* name)
{
   asn1Print_CMS_OtherRecipientInfo (name, &msgData);
}

void asn1Print_CMS_RecipientInfo 
   (const char* name, const ASN1T_CMS_RecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* ktri */
      case 1:
      {
         asn1Print_CMS_KeyTransRecipientInfo ("ktri", pvalue->u.ktri);
         break;
      }
      /* kari */
      case 2:
      {
         asn1Print_CMS_KeyAgreeRecipientInfo ("kari", pvalue->u.kari);
         break;
      }
      /* kekri */
      case 3:
      {
         asn1Print_CMS_KEKRecipientInfo ("kekri", pvalue->u.kekri);
         break;
      }
      /* pwri */
      case 4:
      {
         asn1Print_CMS_PasswordRecipientInfo ("pwri", pvalue->u.pwri);
         break;
      }
      /* ori */
      case 5:
      {
         asn1Print_CMS_OtherRecipientInfo ("ori", pvalue->u.ori);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_RecipientInfo::Print (const char* name)
{
   asn1Print_CMS_RecipientInfo (name, &msgData);
}

void asn1Print_CMS_RecipientInfos 
   (const char* name, const ASN1T_CMS_RecipientInfos* pvalue)
{
   ASN1T_CMS_RecipientInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMS_RecipientInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMS_RecipientInfo (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_RecipientInfos::Print (const char* name)
{
   asn1Print_CMS_RecipientInfos (name, &msgData);
}

void asn1Print_CMS_UnprotectedAttributes 
   (const char* name, const ASN1T_CMS_UnprotectedAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Attribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_UnprotectedAttributes::Print (const char* name)
{
   asn1Print_CMS_UnprotectedAttributes (name, &msgData);
}

void asn1Print_CMS_EnvelopedData 
   (const char* name, const ASN1T_CMS_EnvelopedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   if (pvalue->m.originatorInfoPresent) {
      asn1Print_CMS_OriginatorInfo ("originatorInfo", &pvalue->originatorInfo
         );
   }

   asn1Print_CMS_RecipientInfos ("recipientInfos", &pvalue->recipientInfos);

   asn1Print_PKCS7_EncryptedContentInfo ("encryptedContentInfo", &pvalue->
      encryptedContentInfo);

   if (pvalue->m.unprotectedAttrsPresent) {
      asn1Print_CMS_UnprotectedAttributes ("unprotectedAttrs", &pvalue->
         unprotectedAttrs);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_EnvelopedData::Print (const char* name)
{
   asn1Print_CMS_EnvelopedData (name, &msgData);
}

void asn1Print_CMS_DigestedData 
   (const char* name, const ASN1T_CMS_DigestedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   asn1Print_CMS_DigestAlgorithmIdentifier ("digestAlgorithm", &pvalue->
      digestAlgorithm);

   asn1Print_CMS_EncapsulatedContentInfo ("encapContentInfo", &pvalue->
      encapContentInfo);

   asn1Print_CMS_Digest ("digest", &pvalue->digest);

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_DigestedData::Print (const char* name)
{
   asn1Print_CMS_DigestedData (name, &msgData);
}

void asn1Print_CMS_EncryptedData 
   (const char* name, const ASN1T_CMS_EncryptedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   asn1Print_PKCS7_EncryptedContentInfo ("encryptedContentInfo", &pvalue->
      encryptedContentInfo);

   if (pvalue->m.unprotectedAttrsPresent) {
      asn1Print_CMS_UnprotectedAttributes ("unprotectedAttrs", &pvalue->
         unprotectedAttrs);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_EncryptedData::Print (const char* name)
{
   asn1Print_CMS_EncryptedData (name, &msgData);
}

void asn1Print_CMS_AuthenticatedData 
   (const char* name, const ASN1T_CMS_AuthenticatedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   if (pvalue->m.originatorInfoPresent) {
      asn1Print_CMS_OriginatorInfo ("originatorInfo", &pvalue->originatorInfo
         );
   }

   asn1Print_CMS_RecipientInfos ("recipientInfos", &pvalue->recipientInfos);

   asn1Print_CMS_MessageAuthenticationCodeAlgorithm ("macAlgorithm", &pvalue->
      macAlgorithm);

   if (pvalue->m.digestAlgorithmPresent) {
      asn1Print_CMS_DigestAlgorithmIdentifier ("digestAlgorithm", &pvalue->
         digestAlgorithm);
   }

   asn1Print_CMS_EncapsulatedContentInfo ("encapContentInfo", &pvalue->
      encapContentInfo);

   if (pvalue->m.authAttrsPresent) {
      asn1Print_DERCMS_AuthAttributes ("authAttrs", &pvalue->authAttrs);
   }

   asn1Print_CMS_MessageAuthenticationCode ("mac", &pvalue->mac);

   if (pvalue->m.unauthAttrsPresent) {
      asn1Print_CMS_UnauthAttributes ("unauthAttrs", &pvalue->unauthAttrs);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_AuthenticatedData::Print (const char* name)
{
   asn1Print_CMS_AuthenticatedData (name, &msgData);
}

void asn1Print_CMS_ExtendedCertificateOrCertificate 
   (const char* name, const ASN1T_CMS_ExtendedCertificateOrCertificate* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* certificate */
      case 1:
      {
         asn1Print_EXP_Certificate ("certificate", pvalue->u.certificate);
         break;
      }
      /* extendedCertificate */
      case 2:
      {
         asn1Print_CMS_ExtendedCertificate ("extendedCertificate", pvalue->
            u.extendedCertificate);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_ExtendedCertificateOrCertificate::Print (const char* name)
{
   asn1Print_CMS_ExtendedCertificateOrCertificate (name, &msgData);
}

void asn1Print_CMS_SMIMECapability 
   (const char* name, const ASN1T_CMS_SMIMECapability* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("capabilityID", (ASN1OBJID*)&pvalue->capabilityID);

   if (pvalue->m.parametersPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("parameters", pvalue->parameters.numocts,
      pvalue->parameters.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_SMIMECapability::Print (const char* name)
{
   asn1Print_CMS_SMIMECapability (name, &msgData);
}

void asn1Print_CMS_SMIMECapabilities 
   (const char* name, const ASN1T_CMS_SMIMECapabilities* pvalue)
{
   ASN1T_CMS_SMIMECapability* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMS_SMIMECapability*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMS_SMIMECapability (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMS_SMIMECapabilities::Print (const char* name)
{
   asn1Print_CMS_SMIMECapabilities (name, &msgData);
}

void asn1Print_CMS_SMIMEEncryptionKeyPreference 
   (const char* name, const ASN1T_CMS_SMIMEEncryptionKeyPreference* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1Print_PKCS7_IssuerAndSerialNumber ("issuerAndSerialNumber", pvalue
            ->u.issuerAndSerialNumber);
         break;
      }
      /* receipentKeyId */
      case 2:
      {
         asn1Print_CMS_RecipientKeyIdentifier ("receipentKeyId", pvalue->
            u.receipentKeyId);
         break;
      }
      /* subjectAltKeyIdentifier */
      case 3:
      {
         asn1Print_CMS_SubjectKeyIdentifier ("subjectAltKeyIdentifier", pvalue
            ->u.subjectAltKeyIdentifier);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_SMIMEEncryptionKeyPreference::Print (const char* name)
{
   asn1Print_CMS_SMIMEEncryptionKeyPreference (name, &msgData);
}

void asn1Print_CMS_MQVuserKeyingMaterial 
   (const char* name, const ASN1T_CMS_MQVuserKeyingMaterial* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_OriginatorPublicKey ("ephemeralPublicKey", &pvalue->
      ephemeralPublicKey);

   if (pvalue->m.addedukmPresent) {
      asn1Print_CMS_UserKeyingMaterial ("addedukm", &pvalue->addedukm);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_MQVuserKeyingMaterial::Print (const char* name)
{
   asn1Print_CMS_MQVuserKeyingMaterial (name, &msgData);
}

void asn1Print_CMS_ESSCertIDv2 
   (const char* name, const ASN1T_CMS_ESSCertIDv2* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.hashAlgorithmPresent) {
      asn1Print_EXP_AlgorithmIdentifier ("hashAlgorithm", &pvalue->
         hashAlgorithm);
   }

   rtxPrintIndent ();
   rtxPrintHexStr ("certHash", pvalue->certHash.numocts, pvalue->certHash.data);

   if (pvalue->m.issuerSerialPresent) {
      asn1Print_PKCS7_IssuerAndSerialNumber ("issuerSerial", &pvalue->
         issuerSerial);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_ESSCertIDv2::Print (const char* name)
{
   asn1Print_CMS_ESSCertIDv2 (name, &msgData);
}

void asn1Print_CMS_AuthEnvelopedData 
   (const char* name, const ASN1T_CMS_AuthEnvelopedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_CMSVersion ("version", &pvalue->version);

   if (pvalue->m.originatorInfoPresent) {
      asn1Print_CMS_OriginatorInfo ("originatorInfo", &pvalue->originatorInfo
         );
   }

   asn1Print_CMS_RecipientInfos ("recipientInfos", &pvalue->recipientInfos);

   asn1Print_PKCS7_EncryptedContentInfo ("authEncryptedContentInfo", &pvalue->
      authEncryptedContentInfo);

   if (pvalue->m.authAttrsPresent) {
      asn1Print_DERCMS_AuthAttributes ("authAttrs", &pvalue->authAttrs);
   }

   asn1Print_CMS_MessageAuthenticationCode ("mac", &pvalue->mac);

   if (pvalue->m.unauthAttrsPresent) {
      asn1Print_CMS_UnauthAttributes ("unauthAttrs", &pvalue->unauthAttrs);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMS_AuthEnvelopedData::Print (const char* name)
{
   asn1Print_CMS_AuthEnvelopedData (name, &msgData);
}

