/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkcs12.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_PKCS12_KeyBag 
   (const char* name, const ASN1T_PKCS12_KeyBag* pvalue)
{
   asn1Print_PKCS18_PrivateKeyInfo (name, pvalue);
}

void ASN1C_PKCS12_KeyBag::Print (const char* name)
{
   asn1Print_PKCS12_KeyBag (name, &msgData);
}

void asn1Print_PKCS12_PKCS8ShroudedKeyBag 
   (const char* name, const ASN1T_PKCS12_PKCS8ShroudedKeyBag* pvalue)
{
   asn1Print_PKCS18_EncryptedPrivateKeyInfo (name, pvalue);
}

void ASN1C_PKCS12_PKCS8ShroudedKeyBag::Print (const char* name)
{
   asn1Print_PKCS12_PKCS8ShroudedKeyBag (name, &msgData);
}

void asn1Print_PKCS12__x509Certificate_Type 
   (const char* name, const ASN1T_PKCS12__x509Certificate_Type* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS12__x509Certificate_Type::Print (const char* name)
{
   asn1Print_PKCS12__x509Certificate_Type (name, &msgData);
}

void asn1Print_PKCS12__x509CRL_Type 
   (const char* name, const ASN1T_PKCS12__x509CRL_Type* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS12__x509CRL_Type::Print (const char* name)
{
   asn1Print_PKCS12__x509CRL_Type (name, &msgData);
}

void asn1Print_PKCS12_PFX_version 
   (const char* name, const ASN1T_PKCS12_PFX_version* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 3: printf ("%s = v3\n", name); break;
      default: rtxPrintUnsigned (name, *pvalue);
   }
}

void ASN1C_PKCS12_PFX_version::Print (const char* name)
{
   asn1Print_PKCS12_PFX_version (name, &msgData);
}

void asn1Print_PKCS12_MacData 
   (const char* name, const ASN1T_PKCS12_MacData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_DigestInfo ("mac", &pvalue->mac);

   rtxPrintIndent ();
   rtxPrintHexStr ("macSalt", pvalue->macSalt.numocts, pvalue->macSalt.data);

   rtxPrintIndent ();
   rtxPrintInteger ("iterations", pvalue->iterations);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS12_MacData::Print (const char* name)
{
   asn1Print_PKCS12_MacData (name, &msgData);
}

void asn1Print_PKCS12_PFX (const char* name, const ASN1T_PKCS12_PFX* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS12_PFX_version ("version", &pvalue->version);

   asn1Print_PKCS7_ContentInfo ("authSafe", &pvalue->authSafe);

   if (pvalue->m.macDataPresent) {
      asn1Print_PKCS12_MacData ("macData", &pvalue->macData);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS12_PFX::Print (const char* name)
{
   asn1Print_PKCS12_PFX (name, &msgData);
}

void asn1Print_PKCS12_AuthenticatedSafe 
   (const char* name, const ASN1T_PKCS12_AuthenticatedSafe* pvalue)
{
   ASN1T_PKCS7_ContentInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKCS7_ContentInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKCS7_ContentInfo (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS12_AuthenticatedSafe::Print (const char* name)
{
   asn1Print_PKCS12_AuthenticatedSafe (name, &msgData);
}

void asn1Print_PKCS12_PKCS12Attribute_attrValues 
   (const char* name, const ASN1T_PKCS12_PKCS12Attribute_attrValues* pvalue)
{
   ASN1TOpenType* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1TOpenType*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintHexStr (namebuf, pdata0->numocts,
      pdata0->data);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS12_PKCS12Attribute_attrValues::Print (const char* name)
{
   asn1Print_PKCS12_PKCS12Attribute_attrValues (name, &msgData);
}

void asn1Print_PKCS12_PKCS12Attribute 
   (const char* name, const ASN1T_PKCS12_PKCS12Attribute* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("attrId", (ASN1OBJID*)&pvalue->attrId);

   asn1Print_PKCS12_PKCS12Attribute_attrValues ("attrValues", &pvalue->
      attrValues);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS12_PKCS12Attribute::Print (const char* name)
{
   asn1Print_PKCS12_PKCS12Attribute (name, &msgData);
}

void asn1Print_PKCS12__SetOfPKCS12_PKCS12Attribute 
   (const char* name, const ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pvalue)
{
   ASN1T_PKCS12_PKCS12Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKCS12_PKCS12Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKCS12_PKCS12Attribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute::Print (const char* name)
{
   asn1Print_PKCS12__SetOfPKCS12_PKCS12Attribute (name, &msgData);
}

void asn1Print_PKCS12_SafeBag 
   (const char* name, const ASN1T_PKCS12_SafeBag* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("bagId", (ASN1OBJID*)&pvalue->bagId);

   rtxPrintIndent ();
   rtxPrintHexStr ("bagValue", pvalue->bagValue.numocts,
   pvalue->bagValue.data);

   if (pvalue->m.bagAttributesPresent) {
      asn1Print_PKCS12__SetOfPKCS12_PKCS12Attribute ("bagAttributes", &pvalue->
         bagAttributes);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS12_SafeBag::Print (const char* name)
{
   asn1Print_PKCS12_SafeBag (name, &msgData);
}

void asn1Print_PKCS12_SafeContents 
   (const char* name, const ASN1T_PKCS12_SafeContents* pvalue)
{
   ASN1T_PKCS12_SafeBag* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKCS12_SafeBag*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKCS12_SafeBag (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS12_SafeContents::Print (const char* name)
{
   asn1Print_PKCS12_SafeContents (name, &msgData);
}

void asn1Print_PKCS12_CertBag 
   (const char* name, const ASN1T_PKCS12_CertBag* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("certId", (ASN1OBJID*)&pvalue->certId);

   rtxPrintIndent ();
   rtxPrintHexStr ("certValue", pvalue->certValue.numocts,
   pvalue->certValue.data);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS12_CertBag::Print (const char* name)
{
   asn1Print_PKCS12_CertBag (name, &msgData);
}

void asn1Print_PKCS12_CRLBag 
   (const char* name, const ASN1T_PKCS12_CRLBag* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("crlId", (ASN1OBJID*)&pvalue->crlId);

   rtxPrintIndent ();
   rtxPrintHexStr ("crltValue", pvalue->crltValue.numocts,
   pvalue->crltValue.data);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS12_CRLBag::Print (const char* name)
{
   asn1Print_PKCS12_CRLBag (name, &msgData);
}

void asn1Print_PKCS12_SecretBag 
   (const char* name, const ASN1T_PKCS12_SecretBag* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("secretTypeId", (ASN1OBJID*)&pvalue->secretTypeId);

   rtxPrintIndent ();
   rtxPrintHexStr ("secretValue", pvalue->secretValue.numocts,
   pvalue->secretValue.data);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS12_SecretBag::Print (const char* name)
{
   asn1Print_PKCS12_SecretBag (name, &msgData);
}

void asn1Print_PKCS12_PKCS12PbeParams 
   (const char* name, const ASN1T_PKCS12_PKCS12PbeParams* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintHexStr ("salt", pvalue->salt.numocts, pvalue->salt.data);

   rtxPrintIndent ();
   rtxPrintInteger ("iterations", pvalue->iterations);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS12_PKCS12PbeParams::Print (const char* name)
{
   asn1Print_PKCS12_PKCS12PbeParams (name, &msgData);
}

