/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "attrcert.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_ATTRCERT_AttCertVersion 
   (const char* name, const ASN1T_ATTRCERT_AttCertVersion* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 1: printf ("%s = v2\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_ATTRCERT_AttCertVersion::Print (const char* name)
{
   asn1Print_ATTRCERT_AttCertVersion (name, &msgData);
}

void asn1Print_ATTRCERT_ClassList 
   (const char* name, const ASN1T_ATTRCERT_ClassList* pvalue)
{
   rtxPrintIndent ();
   rtPrintBitStrBraceText (name, pvalue->numbits, pvalue->data);
}

void ASN1C_ATTRCERT_ClassList::Print (const char* name)
{
   asn1Print_ATTRCERT_ClassList (name, &msgData);
}

void asn1Print_ATTRCERT_AttCertVersionV1 
   (const char* name, const ASN1T_ATTRCERT_AttCertVersionV1* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 0: printf ("%s = v1\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_ATTRCERT_AttCertVersionV1::Print (const char* name)
{
   asn1Print_ATTRCERT_AttCertVersionV1 (name, &msgData);
}

void asn1Print_ATTRCERT_ObjectDigestInfo_digestedObjectType 
   (const char* name, const ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pvalue)
{
   rtxPrintIndent ();
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("publicKey\n"); break;
      case 1: printf ("publicKeyCert\n"); break;
      case 2: printf ("otherObjectTypes\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_ATTRCERT_ObjectDigestInfo_digestedObjectType::Print (const char* name)
{
   asn1Print_ATTRCERT_ObjectDigestInfo_digestedObjectType (name, &msgData);
}

void asn1Print_ATTRCERT_IssuerSerial 
   (const char* name, const ASN1T_ATTRCERT_IssuerSerial* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_GeneralNames ("issuer", &pvalue->issuer);

   asn1Print_EXP_CertificateSerialNumber ("serial", &pvalue->serial);

   if (pvalue->m.issuerUIDPresent) {
      asn1Print_EXP_UniqueIdentifier ("issuerUID", &pvalue->issuerUID);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_IssuerSerial::Print (const char* name)
{
   asn1Print_ATTRCERT_IssuerSerial (name, &msgData);
}

void asn1Print_ATTRCERT_ObjectDigestInfo 
   (const char* name, const ASN1T_ATTRCERT_ObjectDigestInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ATTRCERT_ObjectDigestInfo_digestedObjectType (
      "digestedObjectType", &pvalue->digestedObjectType);

   if (pvalue->m.otherObjectTypeIDPresent) {
      rtxPrintIndent ();
      rtPrintOID ("otherObjectTypeID", (ASN1OBJID*)&pvalue->otherObjectTypeID);
   }

   asn1Print_EXP_AlgorithmIdentifier ("digestAlgorithm", &pvalue->
      digestAlgorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("objectDigest", pvalue->objectDigest.numbits, pvalue->objectDigest.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_ObjectDigestInfo::Print (const char* name)
{
   asn1Print_ATTRCERT_ObjectDigestInfo (name, &msgData);
}

void asn1Print_ATTRCERT_Holder 
   (const char* name, const ASN1T_ATTRCERT_Holder* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.baseCertificateIDPresent) {
      asn1Print_ATTRCERT_IssuerSerial ("baseCertificateID", &pvalue->
         baseCertificateID);
   }

   if (pvalue->m.entityNamePresent) {
      asn1Print_IMP_GeneralNames ("entityName", &pvalue->entityName);
   }

   if (pvalue->m.objectDigestInfoPresent) {
      asn1Print_ATTRCERT_ObjectDigestInfo ("objectDigestInfo", &pvalue->
         objectDigestInfo);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_Holder::Print (const char* name)
{
   asn1Print_ATTRCERT_Holder (name, &msgData);
}

void asn1Print_ATTRCERT_V2Form 
   (const char* name, const ASN1T_ATTRCERT_V2Form* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.issuerNamePresent) {
      asn1Print_IMP_GeneralNames ("issuerName", &pvalue->issuerName);
   }

   if (pvalue->m.baseCertificateIDPresent) {
      asn1Print_ATTRCERT_IssuerSerial ("baseCertificateID", &pvalue->
         baseCertificateID);
   }

   if (pvalue->m.objectDigestInfoPresent) {
      asn1Print_ATTRCERT_ObjectDigestInfo ("objectDigestInfo", &pvalue->
         objectDigestInfo);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_V2Form::Print (const char* name)
{
   asn1Print_ATTRCERT_V2Form (name, &msgData);
}

void asn1Print_ATTRCERT_AttCertIssuer 
   (const char* name, const ASN1T_ATTRCERT_AttCertIssuer* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* v1Form */
      case 1:
      {
         asn1Print_IMP_GeneralNames ("v1Form", pvalue->u.v1Form);
         break;
      }
      /* v2Form */
      case 2:
      {
         asn1Print_ATTRCERT_V2Form ("v2Form", pvalue->u.v2Form);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_AttCertIssuer::Print (const char* name)
{
   asn1Print_ATTRCERT_AttCertIssuer (name, &msgData);
}

void asn1Print_ATTRCERT_AttCertValidityPeriod 
   (const char* name, const ASN1T_ATTRCERT_AttCertValidityPeriod* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("notBeforeTime", pvalue->notBeforeTime);

   rtxPrintIndent ();
   rtxPrintCharStr ("notAfterTime", pvalue->notAfterTime);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_AttCertValidityPeriod::Print (const char* name)
{
   asn1Print_ATTRCERT_AttCertValidityPeriod (name, &msgData);
}

void asn1Print_ATTRCERT__SeqOfATTRCERT_Attribute 
   (const char* name, const ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Attribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute::Print (const char* name)
{
   asn1Print_ATTRCERT__SeqOfATTRCERT_Attribute (name, &msgData);
}

void asn1Print_ATTRCERT_AttributeCertificateInfo 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ATTRCERT_AttCertVersion ("version", &pvalue->version);

   asn1Print_ATTRCERT_Holder ("holder", &pvalue->holder);

   asn1Print_ATTRCERT_AttCertIssuer ("issuer", &pvalue->issuer);

   asn1Print_EXP_AlgorithmIdentifier ("signature_", &pvalue->signature_);

   asn1Print_EXP_CertificateSerialNumber ("serialNumber", &pvalue->serialNumber
      );

   asn1Print_ATTRCERT_AttCertValidityPeriod ("attrCertValidityPeriod", &pvalue
      ->attrCertValidityPeriod);

   asn1Print_ATTRCERT__SeqOfATTRCERT_Attribute ("attributes", &pvalue->
      attributes);

   if (pvalue->m.issuerUniqueIDPresent) {
      asn1Print_EXP_UniqueIdentifier ("issuerUniqueID", &pvalue->issuerUniqueID
         );
   }

   if (pvalue->m.extensionsPresent) {
      asn1Print_EXP_Extensions ("extensions", &pvalue->extensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_AttributeCertificateInfo::Print (const char* name)
{
   asn1Print_ATTRCERT_AttributeCertificateInfo (name, &msgData);
}

void asn1Print_ATTRCERT_AttributeCertificate 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificate* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ATTRCERT_AttributeCertificateInfo ("acinfo", &pvalue->acinfo);

   asn1Print_EXP_AlgorithmIdentifier ("signatureAlgorithm", &pvalue->
      signatureAlgorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("signatureValue", pvalue->signatureValue.numbits, pvalue->signatureValue.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_AttributeCertificate::Print (const char* name)
{
   asn1Print_ATTRCERT_AttributeCertificate (name, &msgData);
}

void asn1Print_ATTRCERT_TargetCert 
   (const char* name, const ASN1T_ATTRCERT_TargetCert* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ATTRCERT_IssuerSerial ("targetCertificate", &pvalue->
      targetCertificate);

   if (pvalue->m.targetNamePresent) {
      asn1Print_IMP_GeneralName ("targetName", &pvalue->targetName);
   }

   if (pvalue->m.certDigestInfoPresent) {
      asn1Print_ATTRCERT_ObjectDigestInfo ("certDigestInfo", &pvalue->
         certDigestInfo);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_TargetCert::Print (const char* name)
{
   asn1Print_ATTRCERT_TargetCert (name, &msgData);
}

void asn1Print_ATTRCERT_Target 
   (const char* name, const ASN1T_ATTRCERT_Target* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* targetName */
      case 1:
      {
         asn1Print_IMP_GeneralName ("targetName", pvalue->u.targetName);
         break;
      }
      /* targetGroup */
      case 2:
      {
         asn1Print_IMP_GeneralName ("targetGroup", pvalue->u.targetGroup);
         break;
      }
      /* targetCert */
      case 3:
      {
         asn1Print_ATTRCERT_TargetCert ("targetCert", pvalue->u.targetCert);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_Target::Print (const char* name)
{
   asn1Print_ATTRCERT_Target (name, &msgData);
}

void asn1Print_ATTRCERT_Targets 
   (const char* name, const ASN1T_ATTRCERT_Targets* pvalue)
{
   ASN1T_ATTRCERT_Target* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ATTRCERT_Target*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ATTRCERT_Target (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ATTRCERT_Targets::Print (const char* name)
{
   asn1Print_ATTRCERT_Targets (name, &msgData);
}

void asn1Print_ATTRCERT_IetfAttrSyntax_values_element 
   (const char* name, const ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* octets */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintHexStr ("octets", pvalue->u.octets->numocts, pvalue->u.octets->data);
         break;
      }
      /* oid */
      case 2:
      {
         rtxPrintIndent ();
         rtPrintOID ("oid", (ASN1OBJID*)pvalue->u.oid);
         break;
      }
      /* string */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("string", pvalue->u.string);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_IetfAttrSyntax_values_element::Print (const char* name)
{
   asn1Print_ATTRCERT_IetfAttrSyntax_values_element (name, &msgData);
}

void asn1Print_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element 
   (const char* name, const ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pvalue)
{
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ATTRCERT_IetfAttrSyntax_values_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ATTRCERT_IetfAttrSyntax_values_element (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element::Print (const char* name)
{
   asn1Print_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (name, &msgData);
}

void asn1Print_ATTRCERT_IetfAttrSyntax 
   (const char* name, const ASN1T_ATTRCERT_IetfAttrSyntax* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.policyAuthorityPresent) {
      asn1Print_IMP_GeneralNames ("policyAuthority", &pvalue->policyAuthority
         );
   }

   asn1Print_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element ("values", &
      pvalue->values);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_IetfAttrSyntax::Print (const char* name)
{
   asn1Print_ATTRCERT_IetfAttrSyntax (name, &msgData);
}

void asn1Print_ATTRCERT_SvceAuthInfo 
   (const char* name, const ASN1T_ATTRCERT_SvceAuthInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_GeneralName ("service", &pvalue->service);

   asn1Print_IMP_GeneralName ("ident", &pvalue->ident);

   if (pvalue->m.authInfoPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("authInfo", pvalue->authInfo.numocts, pvalue->authInfo.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_SvceAuthInfo::Print (const char* name)
{
   asn1Print_ATTRCERT_SvceAuthInfo (name, &msgData);
}

void asn1Print_ATTRCERT_RoleSyntax 
   (const char* name, const ASN1T_ATTRCERT_RoleSyntax* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.roleAuthorityPresent) {
      asn1Print_IMP_GeneralNames ("roleAuthority", &pvalue->roleAuthority);
   }

   asn1Print_IMP_GeneralName ("roleName", &pvalue->roleName);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_RoleSyntax::Print (const char* name)
{
   asn1Print_ATTRCERT_RoleSyntax (name, &msgData);
}

void asn1Print_ATTRCERT_SecurityCategory 
   (const char* name, const ASN1T_ATTRCERT_SecurityCategory* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("type", (ASN1OBJID*)&pvalue->type);

   rtxPrintIndent ();
   rtxPrintHexStr ("value", pvalue->value.numocts,
   pvalue->value.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_SecurityCategory::Print (const char* name)
{
   asn1Print_ATTRCERT_SecurityCategory (name, &msgData);
}

void asn1Print_ATTRCERT__SetOfATTRCERT_SecurityCategory 
   (const char* name, const ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pvalue)
{
   ASN1T_ATTRCERT_SecurityCategory* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ATTRCERT_SecurityCategory*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ATTRCERT_SecurityCategory (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory::Print (const char* name)
{
   asn1Print_ATTRCERT__SetOfATTRCERT_SecurityCategory (name, &msgData);
}

void asn1Print_ATTRCERT_Clearance 
   (const char* name, const ASN1T_ATTRCERT_Clearance* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("policyId", (ASN1OBJID*)&pvalue->policyId);

   if (pvalue->m.classListPresent) {
      asn1Print_ATTRCERT_ClassList ("classList", &pvalue->classList);
   }

   if (pvalue->m.securityCategoriesPresent) {
      asn1Print_ATTRCERT__SetOfATTRCERT_SecurityCategory (
         "securityCategories", &pvalue->securityCategories);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_Clearance::Print (const char* name)
{
   asn1Print_ATTRCERT_Clearance (name, &msgData);
}

void asn1Print_ATTRCERT_AttrSpec 
   (const char* name, const ASN1T_ATTRCERT_AttrSpec* pvalue)
{
   ASN1TObjId* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1TObjId*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtPrintOID (namebuf, (ASN1OBJID*)pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ATTRCERT_AttrSpec::Print (const char* name)
{
   asn1Print_ATTRCERT_AttrSpec (name, &msgData);
}

void asn1Print_ATTRCERT_AAControls 
   (const char* name, const ASN1T_ATTRCERT_AAControls* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.pathLenConstraintPresent) {
      rtxPrintIndent ();
      rtxPrintUnsigned ("pathLenConstraint", pvalue->pathLenConstraint);
   }

   if (pvalue->m.permittedAttrsPresent) {
      asn1Print_ATTRCERT_AttrSpec ("permittedAttrs", &pvalue->permittedAttrs);
   }

   if (pvalue->m.excludedAttrsPresent) {
      asn1Print_ATTRCERT_AttrSpec ("excludedAttrs", &pvalue->excludedAttrs);
   }

   rtxPrintIndent ();
   rtxPrintBoolean ("permitUnSpecified", pvalue->permitUnSpecified);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_AAControls::Print (const char* name)
{
   asn1Print_ATTRCERT_AAControls (name, &msgData);
}

void asn1Print_ATTRCERT_ACClearAttrs 
   (const char* name, const ASN1T_ATTRCERT_ACClearAttrs* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_GeneralName ("acIssuer", &pvalue->acIssuer);

   rtxPrintIndent ();
   rtxPrintInteger ("acSerial", pvalue->acSerial);

   asn1Print_ATTRCERT__SeqOfATTRCERT_Attribute ("attrs", &pvalue->attrs);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_ACClearAttrs::Print (const char* name)
{
   asn1Print_ATTRCERT_ACClearAttrs (name, &msgData);
}

void asn1Print_ATTRCERT_ProxyInfo 
   (const char* name, const ASN1T_ATTRCERT_ProxyInfo* pvalue)
{
   ASN1T_ATTRCERT_Targets* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ATTRCERT_Targets*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ATTRCERT_Targets (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ATTRCERT_ProxyInfo::Print (const char* name)
{
   asn1Print_ATTRCERT_ProxyInfo (name, &msgData);
}

void asn1Print_ATTRCERT_AttributeCertificateInfoV1_subject 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* baseCertificateID */
      case 1:
      {
         asn1Print_ATTRCERT_IssuerSerial ("baseCertificateID", pvalue->
            u.baseCertificateID);
         break;
      }
      /* subjectName */
      case 2:
      {
         asn1Print_IMP_GeneralNames ("subjectName", pvalue->u.subjectName);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject::Print (const char* name)
{
   asn1Print_ATTRCERT_AttributeCertificateInfoV1_subject (name, &msgData);
}

void asn1Print_ATTRCERT_AttributeCertificateInfoV1 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfoV1* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ATTRCERT_AttCertVersionV1 ("version", &pvalue->version);

   asn1Print_ATTRCERT_AttributeCertificateInfoV1_subject ("subject", &pvalue->
      subject);

   asn1Print_IMP_GeneralNames ("issuer", &pvalue->issuer);

   asn1Print_EXP_AlgorithmIdentifier ("signature_", &pvalue->signature_);

   asn1Print_EXP_CertificateSerialNumber ("serialNumber", &pvalue->serialNumber
      );

   asn1Print_ATTRCERT_AttCertValidityPeriod ("attCertValidityPeriod", &pvalue->
      attCertValidityPeriod);

   asn1Print_ATTRCERT__SeqOfATTRCERT_Attribute ("attributes", &pvalue->
      attributes);

   if (pvalue->m.issuerUniqueIDPresent) {
      asn1Print_EXP_UniqueIdentifier ("issuerUniqueID", &pvalue->issuerUniqueID
         );
   }

   if (pvalue->m.extensionsPresent) {
      asn1Print_EXP_Extensions ("extensions", &pvalue->extensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_AttributeCertificateInfoV1::Print (const char* name)
{
   asn1Print_ATTRCERT_AttributeCertificateInfoV1 (name, &msgData);
}

void asn1Print_ATTRCERT_AttributeCertificateV1 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificateV1* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ATTRCERT_AttributeCertificateInfoV1 ("acInfo", &pvalue->acInfo);

   asn1Print_EXP_AlgorithmIdentifier ("signatureAlgorithm", &pvalue->
      signatureAlgorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ATTRCERT_AttributeCertificateV1::Print (const char* name)
{
   asn1Print_ATTRCERT_AttributeCertificateV1 (name, &msgData);
}

