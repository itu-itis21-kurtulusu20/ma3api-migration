/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkcs7.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_PKCS7_ContentType 
   (const char* name, const ASN1T_PKCS7_ContentType* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_PKCS7_ContentType::Print (const char* name)
{
   asn1Print_PKCS7_ContentType (name, &msgData);
}

void asn1Print_PKCS7_Data (const char* name, const ASN1T_PKCS7_Data* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS7_Data::Print (const char* name)
{
   asn1Print_PKCS7_Data (name, &msgData);
}

void asn1Print_PKCS7_ContentEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_PKCS7_ContentEncryptionAlgorithmIdentifier (name, &msgData);
}

void asn1Print_PKCS7_DigestAlgorithmIdentifier 
   (const char* name, const ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_PKCS7_DigestAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_PKCS7_DigestAlgorithmIdentifier (name, &msgData);
}

void asn1Print_PKCS7_DigestEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_PKCS7_DigestEncryptionAlgorithmIdentifier (name, &msgData);
}

void asn1Print_PKCS7_KeyEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::Print (const char* name)
{
   asn1Print_PKCS7_KeyEncryptionAlgorithmIdentifier (name, &msgData);
}

void asn1Print_PKCS7_Version 
   (const char* name, const ASN1T_PKCS7_Version* pvalue)
{
   rtxPrintIndent ();
   rtxPrintInteger (name, *pvalue);
}

void ASN1C_PKCS7_Version::Print (const char* name)
{
   asn1Print_PKCS7_Version (name, &msgData);
}

void asn1Print_PKCS7_EncryptedDigest 
   (const char* name, const ASN1T_PKCS7_EncryptedDigest* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS7_EncryptedDigest::Print (const char* name)
{
   asn1Print_PKCS7_EncryptedDigest (name, &msgData);
}

void asn1Print_PKCS7_Digest 
   (const char* name, const ASN1T_PKCS7_Digest* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS7_Digest::Print (const char* name)
{
   asn1Print_PKCS7_Digest (name, &msgData);
}

void asn1Print_PKCS7_EncryptedContent 
   (const char* name, const ASN1T_PKCS7_EncryptedContent* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS7_EncryptedContent::Print (const char* name)
{
   asn1Print_PKCS7_EncryptedContent (name, &msgData);
}

void asn1Print_PKCS7_EncryptedKey 
   (const char* name, const ASN1T_PKCS7_EncryptedKey* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS7_EncryptedKey::Print (const char* name)
{
   asn1Print_PKCS7_EncryptedKey (name, &msgData);
}

void asn1Print_PKCS7_Hash (const char* name, const ASN1T_PKCS7_Hash* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_PKCS7_Hash::Print (const char* name)
{
   asn1Print_PKCS7_Hash (name, &msgData);
}

void asn1Print_PKCS7_ContentInfo 
   (const char* name, const ASN1T_PKCS7_ContentInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_ContentType ("contentType", &pvalue->contentType);

   if (pvalue->m.contentPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("content", pvalue->content.numocts,
      pvalue->content.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_ContentInfo::Print (const char* name)
{
   asn1Print_PKCS7_ContentInfo (name, &msgData);
}

void asn1Print_PKCS7_CertificateRevocationLists 
   (const char* name, const ASN1T_PKCS7_CertificateRevocationLists* pvalue)
{
   ASN1T_EXP_CertificateList* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_CertificateList*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_CertificateList (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS7_CertificateRevocationLists::Print (const char* name)
{
   asn1Print_PKCS7_CertificateRevocationLists (name, &msgData);
}

void asn1Print_PKCS7_IssuerAndSerialNumber 
   (const char* name, const ASN1T_PKCS7_IssuerAndSerialNumber* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_Name ("issuer", &pvalue->issuer);

   asn1Print_EXP_CertificateSerialNumber ("serialNumber", &pvalue->serialNumber
      );

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_IssuerAndSerialNumber::Print (const char* name)
{
   asn1Print_PKCS7_IssuerAndSerialNumber (name, &msgData);
}

void asn1Print_PKCS7_ExtendedCertificateOrCertificate 
   (const char* name, const ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* certificate */
      case 1:
      {
         asn1Print_EXP_Certificate ("certificate", pvalue->u.certificate);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_ExtendedCertificateOrCertificate::Print (const char* name)
{
   asn1Print_PKCS7_ExtendedCertificateOrCertificate (name, &msgData);
}

void asn1Print_PKCS7_ExtendedCertificatesAndCertificates 
   (const char* name, const ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue)
{
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKCS7_ExtendedCertificateOrCertificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKCS7_ExtendedCertificateOrCertificate (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS7_ExtendedCertificatesAndCertificates::Print (const char* name)
{
   asn1Print_PKCS7_ExtendedCertificatesAndCertificates (name, &msgData);
}

void asn1Print_PKCS7_DigestAlgorithmIdentifiers 
   (const char* name, const ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue)
{
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKCS7_DigestAlgorithmIdentifier*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKCS7_DigestAlgorithmIdentifier (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS7_DigestAlgorithmIdentifiers::Print (const char* name)
{
   asn1Print_PKCS7_DigestAlgorithmIdentifiers (name, &msgData);
}

void asn1Print_PKCS7_SignerInfo 
   (const char* name, const ASN1T_PKCS7_SignerInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_Version ("version", &pvalue->version);

   asn1Print_PKCS7_IssuerAndSerialNumber ("issuerAndSerialNumber", &pvalue->
      issuerAndSerialNumber);

   asn1Print_PKCS7_DigestAlgorithmIdentifier ("digestAlgorithm", &pvalue->
      digestAlgorithm);

   if (pvalue->m.authenticatedAttributesPresent) {
      asn1Print_PKCS10_Attributes ("authenticatedAttributes", &pvalue->
         authenticatedAttributes);
   }

   asn1Print_PKCS7_DigestEncryptionAlgorithmIdentifier (
      "digestEncryptionAlgorithm", &pvalue->digestEncryptionAlgorithm);

   asn1Print_PKCS7_EncryptedDigest ("encryptedDigest", &pvalue->encryptedDigest
      );

   if (pvalue->m.unauthenticatedAttributesPresent) {
      asn1Print_PKCS10_Attributes ("unauthenticatedAttributes", &pvalue->
         unauthenticatedAttributes);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_SignerInfo::Print (const char* name)
{
   asn1Print_PKCS7_SignerInfo (name, &msgData);
}

void asn1Print_PKCS7_SignerInfos 
   (const char* name, const ASN1T_PKCS7_SignerInfos* pvalue)
{
   ASN1T_PKCS7_SignerInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKCS7_SignerInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKCS7_SignerInfo (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS7_SignerInfos::Print (const char* name)
{
   asn1Print_PKCS7_SignerInfos (name, &msgData);
}

void asn1Print_PKCS7_SignedData 
   (const char* name, const ASN1T_PKCS7_SignedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_Version ("version", &pvalue->version);

   asn1Print_PKCS7_DigestAlgorithmIdentifiers ("digestAlgorithms", &pvalue->
      digestAlgorithms);

   asn1Print_PKCS7_ContentInfo ("contentInfo", &pvalue->contentInfo);

   if (pvalue->m.certificatesPresent) {
      asn1Print_PKCS7_ExtendedCertificatesAndCertificates ("certificates", &
         pvalue->certificates);
   }

   if (pvalue->m.crlsPresent) {
      asn1Print_PKCS7_CertificateRevocationLists ("crls", &pvalue->crls);
   }

   asn1Print_PKCS7_SignerInfos ("signerInfos", &pvalue->signerInfos);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_SignedData::Print (const char* name)
{
   asn1Print_PKCS7_SignedData (name, &msgData);
}

void asn1Print_PKCS7_DigestInfo 
   (const char* name, const ASN1T_PKCS7_DigestInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_DigestAlgorithmIdentifier ("digestAlgorithm", &pvalue->
      digestAlgorithm);

   asn1Print_PKCS7_Digest ("digest", &pvalue->digest);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_DigestInfo::Print (const char* name)
{
   asn1Print_PKCS7_DigestInfo (name, &msgData);
}

void asn1Print_PKCS7_RecipientInfo 
   (const char* name, const ASN1T_PKCS7_RecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_Version ("version", &pvalue->version);

   asn1Print_PKCS7_IssuerAndSerialNumber ("issuerAndSerialNumber", &pvalue->
      issuerAndSerialNumber);

   asn1Print_PKCS7_KeyEncryptionAlgorithmIdentifier ("keyEncryptionAlgorithm", 
      &pvalue->keyEncryptionAlgorithm);

   asn1Print_PKCS7_EncryptedKey ("encryptedKey", &pvalue->encryptedKey);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_RecipientInfo::Print (const char* name)
{
   asn1Print_PKCS7_RecipientInfo (name, &msgData);
}

void asn1Print_PKCS7_RecipientInfos 
   (const char* name, const ASN1T_PKCS7_RecipientInfos* pvalue)
{
   ASN1T_PKCS7_RecipientInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKCS7_RecipientInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKCS7_RecipientInfo (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS7_RecipientInfos::Print (const char* name)
{
   asn1Print_PKCS7_RecipientInfos (name, &msgData);
}

void asn1Print_PKCS7_EncryptedContentInfo 
   (const char* name, const ASN1T_PKCS7_EncryptedContentInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_ContentType ("contentType", &pvalue->contentType);

   asn1Print_PKCS7_ContentEncryptionAlgorithmIdentifier (
      "contentEncryptionAlgorithm", &pvalue->contentEncryptionAlgorithm);

   if (pvalue->m.encryptedContentPresent) {
      asn1Print_PKCS7_EncryptedContent ("encryptedContent", &pvalue->
         encryptedContent);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_EncryptedContentInfo::Print (const char* name)
{
   asn1Print_PKCS7_EncryptedContentInfo (name, &msgData);
}

void asn1Print_PKCS7_EnvelopedData 
   (const char* name, const ASN1T_PKCS7_EnvelopedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_Version ("version", &pvalue->version);

   asn1Print_PKCS7_RecipientInfos ("recipientInfos", &pvalue->recipientInfos);

   asn1Print_PKCS7_EncryptedContentInfo ("encryptedContentInfo", &pvalue->
      encryptedContentInfo);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_EnvelopedData::Print (const char* name)
{
   asn1Print_PKCS7_EnvelopedData (name, &msgData);
}

void asn1Print_PKCS7_SignedAndEnvelopedData 
   (const char* name, const ASN1T_PKCS7_SignedAndEnvelopedData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_Version ("version", &pvalue->version);

   asn1Print_PKCS7_RecipientInfos ("recipientInfos", &pvalue->recipientInfos);

   asn1Print_PKCS7_DigestAlgorithmIdentifiers ("digestAlgorithms", &pvalue->
      digestAlgorithms);

   asn1Print_PKCS7_EncryptedContentInfo ("encryptedContentInfo", &pvalue->
      encryptedContentInfo);

   if (pvalue->m.certificatesPresent) {
      asn1Print_PKCS7_ExtendedCertificatesAndCertificates ("certificates", &
         pvalue->certificates);
   }

   if (pvalue->m.crlsPresent) {
      asn1Print_PKCS7_CertificateRevocationLists ("crls", &pvalue->crls);
   }

   asn1Print_PKCS7_SignerInfos ("signerInfos", &pvalue->signerInfos);

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_SignedAndEnvelopedData::Print (const char* name)
{
   asn1Print_PKCS7_SignedAndEnvelopedData (name, &msgData);
}

void asn1Print_PKCS7_IssuerSerial 
   (const char* name, const ASN1T_PKCS7_IssuerSerial* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_GeneralNames ("issuer", &pvalue->issuer);

   asn1Print_EXP_CertificateSerialNumber ("serialNumber", &pvalue->serialNumber
      );

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_IssuerSerial::Print (const char* name)
{
   asn1Print_PKCS7_IssuerSerial (name, &msgData);
}

void asn1Print_PKCS7_ESSCertID 
   (const char* name, const ASN1T_PKCS7_ESSCertID* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7_Hash ("certHash", &pvalue->certHash);

   if (pvalue->m.issuerSerialPresent) {
      asn1Print_PKCS7_IssuerSerial ("issuerSerial", &pvalue->issuerSerial);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_ESSCertID::Print (const char* name)
{
   asn1Print_PKCS7_ESSCertID (name, &msgData);
}

void asn1Print_PKCS7__SeqOfPKCS7_ESSCertID 
   (const char* name, const ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue)
{
   ASN1T_PKCS7_ESSCertID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_PKCS7_ESSCertID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_PKCS7_ESSCertID (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::Print (const char* name)
{
   asn1Print_PKCS7__SeqOfPKCS7_ESSCertID (name, &msgData);
}

void asn1Print_PKCS7__SeqOfPKCS7_PolicyInformation 
   (const char* name, const ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue)
{
   ASN1T_IMP_PolicyInformation* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_PolicyInformation*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_PolicyInformation (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::Print (const char* name)
{
   asn1Print_PKCS7__SeqOfPKCS7_PolicyInformation (name, &msgData);
}

void asn1Print_PKCS7_SigningCertificate 
   (const char* name, const ASN1T_PKCS7_SigningCertificate* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_PKCS7__SeqOfPKCS7_ESSCertID ("certs", &pvalue->certs);

   if (pvalue->m.policiesPresent) {
      asn1Print_PKCS7__SeqOfPKCS7_PolicyInformation ("policies", &pvalue->
         policies);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_PKCS7_SigningCertificate::Print (const char* name)
{
   asn1Print_PKCS7_SigningCertificate (name, &msgData);
}

