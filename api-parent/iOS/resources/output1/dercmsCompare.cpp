/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "dercms.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_DERCMS_SignatureValue (const char* name, 
   ASN1T_DERCMS_SignatureValue* pValue, 
   ASN1T_DERCMS_SignatureValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_DERCMS_SignatureValue::Equals (ASN1T_DERCMS_SignatureValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_DERCMS_SignatureValue ("SignatureValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_DERCMS_AuthAttributes (const char* name, 
   ASN1T_DERCMS_AuthAttributes* pValue, 
   ASN1T_DERCMS_AuthAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_Attribute* pdata;
   ASN1T_EXP_Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Attribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_DERCMS_AuthAttributes::Equals (ASN1T_DERCMS_AuthAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_DERCMS_AuthAttributes ("AuthAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_DERCMS_SignedAttributes (const char* name, 
   ASN1T_DERCMS_SignedAttributes* pValue, 
   ASN1T_DERCMS_SignedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_Attribute* pdata;
   ASN1T_EXP_Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Attribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_DERCMS_SignedAttributes::Equals (ASN1T_DERCMS_SignedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_DERCMS_SignedAttributes ("SignedAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_DERCMS_ECC_CMS_SharedInfo (const char* name, 
   ASN1T_DERCMS_ECC_CMS_SharedInfo* pValue, 
   ASN1T_DERCMS_ECC_CMS_SharedInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".keyInfo", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->keyInfo, &pCmpValue->keyInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".entityUInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.entityUInfoPresent,
   pCmpValue->m.entityUInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.entityUInfoPresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->entityUInfo.numocts, 
         pValue->entityUInfo.data, pCmpValue->entityUInfo.numocts, 
         pCmpValue->entityUInfo.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".suppPubInfo", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->suppPubInfo.numocts, 
      pValue->suppPubInfo.data, pCmpValue->suppPubInfo.numocts, 
      pCmpValue->suppPubInfo.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_DERCMS_ECC_CMS_SharedInfo::Equals (ASN1T_DERCMS_ECC_CMS_SharedInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_DERCMS_ECC_CMS_SharedInfo ("ECC_CMS_SharedInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

