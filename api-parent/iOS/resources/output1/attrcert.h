/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#ifndef ATTRCERT_H
#define ATTRCERT_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CBitStr.h"
#include "rtsrc/ASN1CSeqOfList.h"
#include "Explicit.h"
#include "Implicit.h"

/**
 * Header file for ASN.1 module attrcert
 */
/**************************************************************/
/*                                                            */
/*  AttCertVersion                                            */
/*                                                            */
/**************************************************************/
/*
AttCertVersion ::= INTEGER { v2(1) }
*/
#define TV_ATTRCERT_AttCertVersion	(TM_UNIV|TM_PRIM|2)

struct EXTERN ATTRCERT_AttCertVersion {
   enum Root {
      v2 = 1
   } ;
} ;

typedef OSINT32 ASN1T_ATTRCERT_AttCertVersion;

class EXTERN ASN1C_ATTRCERT_AttCertVersion :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttCertVersion& msgData;
public:
   ASN1C_ATTRCERT_AttCertVersion (ASN1T_ATTRCERT_AttCertVersion& data);
   ASN1C_ATTRCERT_AttCertVersion (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttCertVersion& data);
   ASN1C_ATTRCERT_AttCertVersion (OSRTContext &context
      , ASN1T_ATTRCERT_AttCertVersion& data);
   virtual ~ASN1C_ATTRCERT_AttCertVersion () {}
   inline ASN1T_ATTRCERT_AttCertVersion& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttCertVersion& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttCertVersion");
   int toStream (const char* name = "AttCertVersion");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttCertVersion* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_ATTRCERT_AttCertVersion (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttCertVersion *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttCertVersion (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttCertVersion* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_AttCertVersion 
   (const char* name, const ASN1T_ATTRCERT_AttCertVersion* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttCertVersion (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttCertVersion* pvalue);

EXTERN ASN1T_ATTRCERT_AttCertVersion* 
   new_ASN1T_ATTRCERT_AttCertVersion (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttCertVersion (const char* name, 
   ASN1T_ATTRCERT_AttCertVersion* pValue, 
   ASN1T_ATTRCERT_AttCertVersion* pCmpValue, char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  ClassList                                                 */
/*                                                            */
/**************************************************************/
/*
ClassList ::= BIT STRING  { unmarked(0), unclassified(1), restricted(2), confidential(3), secret(4), topSecret(5) }
*/
#define TV_ATTRCERT_ClassList	(TM_UNIV|TM_PRIM|3)

class EXTERN ASN1C_ATTRCERT_ClassList;

struct EXTERN ASN1T_ATTRCERT_ClassList {
   OSUINT32 numbits;
   OSOCTET data[1];
   // ctors
   ASN1T_ATTRCERT_ClassList () : numbits(0) {}
   ASN1T_ATTRCERT_ClassList (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits (_numbits) {
      OSCRTLMEMCPY (data, _data, sizeof(data));
   }
   ASN1T_ATTRCERT_ClassList (ASN1C_ATTRCERT_ClassList& srcData);
} ;

class EXTERN ASN1C_ATTRCERT_ClassList :
public ASN1CBitStr
{
protected:
   ASN1T_ATTRCERT_ClassList& msgData;
public:
   // named bits
   enum { unmarked = 0, unclassified = 1, restricted = 2, confidential = 3, secret = 4, topSecret = 5 };

   ASN1C_ATTRCERT_ClassList (ASN1T_ATTRCERT_ClassList& data);
   ASN1C_ATTRCERT_ClassList (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_ClassList& data);
   ASN1C_ATTRCERT_ClassList (OSRTContext &context
      , ASN1T_ATTRCERT_ClassList& data);
   ASN1C_ATTRCERT_ClassList (ASN1C_ATTRCERT_ClassList& original);
   virtual ~ASN1C_ATTRCERT_ClassList () {}
   inline ASN1T_ATTRCERT_ClassList& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_ClassList& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ClassList");
   int toStream (const char* name = "ClassList");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_ClassList* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_ClassList& getCopy (ASN1T_ATTRCERT_ClassList* pDstData = 0);
   ASN1T_ATTRCERT_ClassList* newCopy ();

   ASN1C_ATTRCERT_ClassList& operator= (ASN1C_ATTRCERT_ClassList& srcData);
} ;

EXTERN int asn1E_ATTRCERT_ClassList (OSCTXT* pctxt,
   ASN1T_ATTRCERT_ClassList *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_ClassList (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ClassList* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_ClassList 
   (const char* name, const ASN1T_ATTRCERT_ClassList* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_ClassList (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_ClassList* pvalue);

EXTERN ASN1T_ATTRCERT_ClassList* 
   new_ASN1T_ATTRCERT_ClassList (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_ClassList (const char* name, 
   ASN1T_ATTRCERT_ClassList* pValue, ASN1T_ATTRCERT_ClassList* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_ClassList (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ClassList* pSrcValue, ASN1T_ATTRCERT_ClassList* pDstValue);

EXTERN void asn1Init_ATTRCERT_ClassList (ASN1T_ATTRCERT_ClassList* pvalue);

/**************************************************************/
/*                                                            */
/*  AttCertVersionV1                                          */
/*                                                            */
/**************************************************************/
/*
AttCertVersionV1 ::= INTEGER { v1(0) }
*/
#define TV_ATTRCERT_AttCertVersionV1	(TM_UNIV|TM_PRIM|2)

struct EXTERN ATTRCERT_AttCertVersionV1 {
   enum Root {
      v1 = 0
   } ;
} ;

typedef OSINT32 ASN1T_ATTRCERT_AttCertVersionV1;

class EXTERN ASN1C_ATTRCERT_AttCertVersionV1 :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttCertVersionV1& msgData;
public:
   ASN1C_ATTRCERT_AttCertVersionV1 (ASN1T_ATTRCERT_AttCertVersionV1& data);
   ASN1C_ATTRCERT_AttCertVersionV1 (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttCertVersionV1& data);
   ASN1C_ATTRCERT_AttCertVersionV1 (OSRTContext &context
      , ASN1T_ATTRCERT_AttCertVersionV1& data);
   virtual ~ASN1C_ATTRCERT_AttCertVersionV1 () {}
   inline ASN1T_ATTRCERT_AttCertVersionV1& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttCertVersionV1& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttCertVersionV1");
   int toStream (const char* name = "AttCertVersionV1");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttCertVersionV1* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_ATTRCERT_AttCertVersionV1 (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttCertVersionV1 *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttCertVersionV1 (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttCertVersionV1* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_AttCertVersionV1 
   (const char* name, const ASN1T_ATTRCERT_AttCertVersionV1* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttCertVersionV1 (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttCertVersionV1* pvalue);

EXTERN ASN1T_ATTRCERT_AttCertVersionV1* 
   new_ASN1T_ATTRCERT_AttCertVersionV1 (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttCertVersionV1 (const char* name, 
   ASN1T_ATTRCERT_AttCertVersionV1* pValue, 
   ASN1T_ATTRCERT_AttCertVersionV1* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  ObjectDigestInfo_digestedObjectType                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ObjectDigestInfo'
*/
struct EXTERN ATTRCERT_ObjectDigestInfo_digestedObjectType {
   enum Root {
      publicKey = 0,
      publicKeyCert = 1,
      otherObjectTypes = 2
   } ;
} ;

typedef OSUINT32 ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType;

class EXTERN ASN1C_ATTRCERT_ObjectDigestInfo_digestedObjectType :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType& msgData;
public:
   ASN1C_ATTRCERT_ObjectDigestInfo_digestedObjectType
       (ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType& data);
   ASN1C_ATTRCERT_ObjectDigestInfo_digestedObjectType (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType& data);
   ASN1C_ATTRCERT_ObjectDigestInfo_digestedObjectType (OSRTContext &context
      , ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType& data);
   virtual ~ASN1C_ATTRCERT_ObjectDigestInfo_digestedObjectType () {}
   inline ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ObjectDigestInfo_digestedObjectType");
   int toStream (const char* name = "ObjectDigestInfo_digestedObjectType");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_ATTRCERT_ObjectDigestInfo_digestedObjectType (OSCTXT* pctxt,
   ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_ObjectDigestInfo_digestedObjectType (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_ObjectDigestInfo_digestedObjectType 
   (const char* name, const ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_ObjectDigestInfo_digestedObjectType (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pvalue);

EXTERN ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* 
   new_ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType (ASN1CType& ccobj);

EXTERN const OSUTF8CHAR* ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType_ToString (OSINT32 value);

EXTERN 
   int ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, 
      ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pvalue);

EXTERN 
   int ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERT_ObjectDigestInfo_digestedObjectType (
   const char* name, 
   ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pValue, 
   ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  IssuerSerial                                              */
/*                                                            */
/**************************************************************/
/*
IssuerSerial ::= SEQUENCE {
   issuer GeneralNames,
   serial CertificateSerialNumber,
   issuerUID UniqueIdentifier OPTIONAL
}
*/
#define TV_ATTRCERT_IssuerSerial	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_IssuerSerial;

struct EXTERN ASN1T_ATTRCERT_IssuerSerial : public ASN1TPDU {
   struct {
      unsigned issuerUIDPresent : 1;
   } m;
   ASN1T_IMP_GeneralNames issuer;
   ASN1T_EXP_CertificateSerialNumber serial;
   ASN1T_EXP_UniqueIdentifier issuerUID;
   ASN1T_ATTRCERT_IssuerSerial ();
   ASN1T_ATTRCERT_IssuerSerial (ASN1C_ATTRCERT_IssuerSerial& srcData);
   ~ASN1T_ATTRCERT_IssuerSerial ();
} ;

class EXTERN ASN1C_ATTRCERT_IssuerSerial :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_IssuerSerial& msgData;
public:
   ASN1C_ATTRCERT_IssuerSerial (ASN1T_ATTRCERT_IssuerSerial& data);
   ASN1C_ATTRCERT_IssuerSerial (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_IssuerSerial& data);
   ASN1C_ATTRCERT_IssuerSerial (OSRTContext &context
      , ASN1T_ATTRCERT_IssuerSerial& data);
   ASN1C_ATTRCERT_IssuerSerial (ASN1C_ATTRCERT_IssuerSerial& original);
   virtual ~ASN1C_ATTRCERT_IssuerSerial () {}
   inline ASN1T_ATTRCERT_IssuerSerial& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_IssuerSerial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "IssuerSerial");
   int toStream (const char* name = "IssuerSerial");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_IssuerSerial* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_IssuerSerial& getCopy (ASN1T_ATTRCERT_IssuerSerial* pDstData = 0);
   ASN1T_ATTRCERT_IssuerSerial* newCopy ();

   inline ASN1C_ATTRCERT_IssuerSerial& operator= (ASN1C_ATTRCERT_IssuerSerial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_IssuerSerial (OSCTXT* pctxt,
   ASN1T_ATTRCERT_IssuerSerial *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_IssuerSerial (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IssuerSerial* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_IssuerSerial 
   (const char* name, const ASN1T_ATTRCERT_IssuerSerial* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_IssuerSerial (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_IssuerSerial* pvalue);

EXTERN ASN1T_ATTRCERT_IssuerSerial* 
   new_ASN1T_ATTRCERT_IssuerSerial (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_IssuerSerial (const char* name, 
   ASN1T_ATTRCERT_IssuerSerial* pValue, 
   ASN1T_ATTRCERT_IssuerSerial* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_IssuerSerial (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IssuerSerial* pSrcValue, ASN1T_ATTRCERT_IssuerSerial*
    pDstValue);

EXTERN void asn1Init_ATTRCERT_IssuerSerial (ASN1T_ATTRCERT_IssuerSerial* pvalue);

EXTERN void asn1Free_ATTRCERT_IssuerSerial (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_IssuerSerial* pvalue);

/**************************************************************/
/*                                                            */
/*  ObjectDigestInfo                                          */
/*                                                            */
/**************************************************************/
/*
Farrell & Housley Standards Track [Page 36]
RFC 3281 An Internet Attribute Certificate April 2002

ObjectDigestInfo ::= SEQUENCE {
   digestedObjectType ENUMERATED { publicKey(0), publicKeyCert(1), otherObjectTypes(2) },
   otherObjectTypeID OBJECT IDENTIFIER OPTIONAL,
   digestAlgorithm AlgorithmIdentifier,
   objectDigest BIT STRING 
}
*/
#define TV_ATTRCERT_ObjectDigestInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_ObjectDigestInfo;

struct EXTERN ASN1T_ATTRCERT_ObjectDigestInfo : public ASN1TPDU {
   struct {
      unsigned otherObjectTypeIDPresent : 1;
   } m;
   ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType digestedObjectType;
   ASN1TObjId otherObjectTypeID;
   ASN1T_EXP_AlgorithmIdentifier digestAlgorithm;
   ASN1TDynBitStr objectDigest;
   ASN1T_ATTRCERT_ObjectDigestInfo ();
   ASN1T_ATTRCERT_ObjectDigestInfo (ASN1C_ATTRCERT_ObjectDigestInfo& srcData);
   ~ASN1T_ATTRCERT_ObjectDigestInfo ();
} ;

class EXTERN ASN1C_ATTRCERT_ObjectDigestInfo :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_ObjectDigestInfo& msgData;
public:
   ASN1C_ATTRCERT_ObjectDigestInfo (ASN1T_ATTRCERT_ObjectDigestInfo& data);
   ASN1C_ATTRCERT_ObjectDigestInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_ObjectDigestInfo& data);
   ASN1C_ATTRCERT_ObjectDigestInfo (OSRTContext &context
      , ASN1T_ATTRCERT_ObjectDigestInfo& data);
   ASN1C_ATTRCERT_ObjectDigestInfo (ASN1C_ATTRCERT_ObjectDigestInfo& original);
   virtual ~ASN1C_ATTRCERT_ObjectDigestInfo () {}
   inline ASN1T_ATTRCERT_ObjectDigestInfo& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_ObjectDigestInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ObjectDigestInfo");
   int toStream (const char* name = "ObjectDigestInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_ObjectDigestInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_ObjectDigestInfo& getCopy (ASN1T_ATTRCERT_ObjectDigestInfo* pDstData = 0);
   ASN1T_ATTRCERT_ObjectDigestInfo* newCopy ();

   inline ASN1C_ATTRCERT_ObjectDigestInfo& operator= (ASN1C_ATTRCERT_ObjectDigestInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_ObjectDigestInfo (OSCTXT* pctxt,
   ASN1T_ATTRCERT_ObjectDigestInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_ObjectDigestInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ObjectDigestInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_ObjectDigestInfo 
   (const char* name, const ASN1T_ATTRCERT_ObjectDigestInfo* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_ObjectDigestInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_ObjectDigestInfo* pvalue);

EXTERN ASN1T_ATTRCERT_ObjectDigestInfo* 
   new_ASN1T_ATTRCERT_ObjectDigestInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_ObjectDigestInfo (const char* name, 
   ASN1T_ATTRCERT_ObjectDigestInfo* pValue, 
   ASN1T_ATTRCERT_ObjectDigestInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_ObjectDigestInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ObjectDigestInfo* pSrcValue, ASN1T_ATTRCERT_ObjectDigestInfo*
    pDstValue);

EXTERN void asn1Init_ATTRCERT_ObjectDigestInfo (
   ASN1T_ATTRCERT_ObjectDigestInfo* pvalue);

EXTERN void asn1Free_ATTRCERT_ObjectDigestInfo (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_ObjectDigestInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  Holder                                                    */
/*                                                            */
/**************************************************************/
/*
Holder ::= SEQUENCE {
   baseCertificateID [0] IssuerSerial OPTIONAL,
   entityName [1] GeneralNames OPTIONAL,
   objectDigestInfo [2] ObjectDigestInfo OPTIONAL
}
*/
#define TV_ATTRCERT_Holder	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_Holder;

struct EXTERN ASN1T_ATTRCERT_Holder : public ASN1TPDU {
   struct {
      unsigned baseCertificateIDPresent : 1;
      unsigned entityNamePresent : 1;
      unsigned objectDigestInfoPresent : 1;
   } m;
   ASN1T_ATTRCERT_IssuerSerial baseCertificateID;
   ASN1T_IMP_GeneralNames entityName;
   ASN1T_ATTRCERT_ObjectDigestInfo objectDigestInfo;
   ASN1T_ATTRCERT_Holder ();
   ASN1T_ATTRCERT_Holder (ASN1C_ATTRCERT_Holder& srcData);
   ~ASN1T_ATTRCERT_Holder ();
} ;

class EXTERN ASN1C_ATTRCERT_Holder :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_Holder& msgData;
public:
   ASN1C_ATTRCERT_Holder (ASN1T_ATTRCERT_Holder& data);
   ASN1C_ATTRCERT_Holder (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_Holder& data);
   ASN1C_ATTRCERT_Holder (OSRTContext &context, ASN1T_ATTRCERT_Holder& data);
   ASN1C_ATTRCERT_Holder (ASN1C_ATTRCERT_Holder& original);
   virtual ~ASN1C_ATTRCERT_Holder () {}
   inline ASN1T_ATTRCERT_Holder& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_Holder& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Holder");
   int toStream (const char* name = "Holder");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_Holder* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_Holder& getCopy (ASN1T_ATTRCERT_Holder* pDstData = 0);
   ASN1T_ATTRCERT_Holder* newCopy ();

   inline ASN1C_ATTRCERT_Holder& operator= (ASN1C_ATTRCERT_Holder& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_Holder (OSCTXT* pctxt,
   ASN1T_ATTRCERT_Holder *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_Holder (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Holder* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_Holder 
   (const char* name, const ASN1T_ATTRCERT_Holder* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_Holder (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_Holder* pvalue);

EXTERN ASN1T_ATTRCERT_Holder* new_ASN1T_ATTRCERT_Holder (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_Holder (const char* name, 
   ASN1T_ATTRCERT_Holder* pValue, ASN1T_ATTRCERT_Holder* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_Holder (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Holder* pSrcValue, ASN1T_ATTRCERT_Holder* pDstValue);

EXTERN void asn1Init_ATTRCERT_Holder (ASN1T_ATTRCERT_Holder* pvalue);

EXTERN void asn1Free_ATTRCERT_Holder (OSCTXT *pctxt, ASN1T_ATTRCERT_Holder* pvalue);

/**************************************************************/
/*                                                            */
/*  V2Form                                                    */
/*                                                            */
/**************************************************************/
/*
V2Form ::= SEQUENCE {
   issuerName GeneralNames OPTIONAL,
   baseCertificateID [0] IssuerSerial OPTIONAL,
   objectDigestInfo [1] ObjectDigestInfo OPTIONAL
}
*/
#define TV_ATTRCERT_V2Form	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_V2Form;

struct EXTERN ASN1T_ATTRCERT_V2Form : public ASN1TPDU {
   struct {
      unsigned issuerNamePresent : 1;
      unsigned baseCertificateIDPresent : 1;
      unsigned objectDigestInfoPresent : 1;
   } m;
   ASN1T_IMP_GeneralNames issuerName;
   ASN1T_ATTRCERT_IssuerSerial baseCertificateID;
   ASN1T_ATTRCERT_ObjectDigestInfo objectDigestInfo;
   ASN1T_ATTRCERT_V2Form ();
   ASN1T_ATTRCERT_V2Form (ASN1C_ATTRCERT_V2Form& srcData);
   ~ASN1T_ATTRCERT_V2Form ();
} ;

class EXTERN ASN1C_ATTRCERT_V2Form :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_V2Form& msgData;
public:
   ASN1C_ATTRCERT_V2Form (ASN1T_ATTRCERT_V2Form& data);
   ASN1C_ATTRCERT_V2Form (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_V2Form& data);
   ASN1C_ATTRCERT_V2Form (OSRTContext &context, ASN1T_ATTRCERT_V2Form& data);
   ASN1C_ATTRCERT_V2Form (ASN1C_ATTRCERT_V2Form& original);
   virtual ~ASN1C_ATTRCERT_V2Form () {}
   inline ASN1T_ATTRCERT_V2Form& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_V2Form& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "V2Form");
   int toStream (const char* name = "V2Form");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_V2Form* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_V2Form& getCopy (ASN1T_ATTRCERT_V2Form* pDstData = 0);
   ASN1T_ATTRCERT_V2Form* newCopy ();

   inline ASN1C_ATTRCERT_V2Form& operator= (ASN1C_ATTRCERT_V2Form& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_V2Form (OSCTXT* pctxt,
   ASN1T_ATTRCERT_V2Form *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_V2Form (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_V2Form* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_V2Form 
   (const char* name, const ASN1T_ATTRCERT_V2Form* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_V2Form (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_V2Form* pvalue);

EXTERN ASN1T_ATTRCERT_V2Form* new_ASN1T_ATTRCERT_V2Form (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_V2Form (const char* name, 
   ASN1T_ATTRCERT_V2Form* pValue, ASN1T_ATTRCERT_V2Form* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_V2Form (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_V2Form* pSrcValue, ASN1T_ATTRCERT_V2Form* pDstValue);

EXTERN void asn1Init_ATTRCERT_V2Form (ASN1T_ATTRCERT_V2Form* pvalue);

EXTERN void asn1Free_ATTRCERT_V2Form (OSCTXT *pctxt, ASN1T_ATTRCERT_V2Form* pvalue);

/**************************************************************/
/*                                                            */
/*  AttCertIssuer                                             */
/*                                                            */
/**************************************************************/
/*
AttCertIssuer ::= CHOICE {
   v1Form GeneralNames,
   v2Form [0] V2Form
}
*/
/* Choice context tags */

#define TVC_ATTRCERT_AttCertIssuer_v1Form	(TM_UNIV|TM_CONS|16)
#define TVC_ATTRCERT_AttCertIssuer_v2Form	(TM_CTXT|TM_CONS|0)

/* Choice tag constants */

#define T_ATTRCERT_AttCertIssuer_v1Form 1
#define T_ATTRCERT_AttCertIssuer_v2Form 2

class EXTERN ASN1C_ATTRCERT_AttCertIssuer;

struct EXTERN ASN1T_ATTRCERT_AttCertIssuer : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_IMP_GeneralNames *v1Form;
      /* t = 2 */
      ASN1T_ATTRCERT_V2Form *v2Form;
   } u;
   ASN1T_ATTRCERT_AttCertIssuer () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ATTRCERT_AttCertIssuer (ASN1C_ATTRCERT_AttCertIssuer& srcData);
   ~ASN1T_ATTRCERT_AttCertIssuer ();
} ;

class EXTERN ASN1C_ATTRCERT_AttCertIssuer :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttCertIssuer& msgData;
public:
   ASN1C_ATTRCERT_AttCertIssuer (ASN1T_ATTRCERT_AttCertIssuer& data);
   ASN1C_ATTRCERT_AttCertIssuer (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttCertIssuer& data);
   ASN1C_ATTRCERT_AttCertIssuer (OSRTContext &context
      , ASN1T_ATTRCERT_AttCertIssuer& data);
   ASN1C_ATTRCERT_AttCertIssuer (ASN1C_ATTRCERT_AttCertIssuer& original);
   virtual ~ASN1C_ATTRCERT_AttCertIssuer () {}
   inline ASN1T_ATTRCERT_AttCertIssuer& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttCertIssuer& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttCertIssuer");
   int toStream (const char* name = "AttCertIssuer");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttCertIssuer* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AttCertIssuer& getCopy (ASN1T_ATTRCERT_AttCertIssuer* pDstData = 0);
   ASN1T_ATTRCERT_AttCertIssuer* newCopy ();

   inline ASN1C_ATTRCERT_AttCertIssuer& operator= (ASN1C_ATTRCERT_AttCertIssuer& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_AttCertIssuer (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttCertIssuer *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttCertIssuer (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttCertIssuer* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_AttCertIssuer 
   (const char* name, const ASN1T_ATTRCERT_AttCertIssuer* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttCertIssuer (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttCertIssuer* pvalue);

EXTERN ASN1T_ATTRCERT_AttCertIssuer* 
   new_ASN1T_ATTRCERT_AttCertIssuer (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttCertIssuer (const char* name, 
   ASN1T_ATTRCERT_AttCertIssuer* pValue, 
   ASN1T_ATTRCERT_AttCertIssuer* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AttCertIssuer (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttCertIssuer* pSrcValue, ASN1T_ATTRCERT_AttCertIssuer*
    pDstValue);

EXTERN void asn1Init_ATTRCERT_AttCertIssuer (ASN1T_ATTRCERT_AttCertIssuer* pvalue);

EXTERN void asn1Free_ATTRCERT_AttCertIssuer (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AttCertIssuer* pvalue);

/**************************************************************/
/*                                                            */
/*  AttCertValidityPeriod                                     */
/*                                                            */
/**************************************************************/
/*
AttCertValidityPeriod ::= SEQUENCE {
   notBeforeTime GeneralizedTime,
   notAfterTime GeneralizedTime
}
*/
#define TV_ATTRCERT_AttCertValidityPeriod	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_AttCertValidityPeriod;

struct EXTERN ASN1T_ATTRCERT_AttCertValidityPeriod : public ASN1TPDU {
   const char* notBeforeTime;
   const char* notAfterTime;
   ASN1T_ATTRCERT_AttCertValidityPeriod ();
   ASN1T_ATTRCERT_AttCertValidityPeriod (ASN1C_ATTRCERT_AttCertValidityPeriod& srcData);
   ~ASN1T_ATTRCERT_AttCertValidityPeriod ();
} ;

class EXTERN ASN1C_ATTRCERT_AttCertValidityPeriod :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttCertValidityPeriod& msgData;
public:
   ASN1C_ATTRCERT_AttCertValidityPeriod
       (ASN1T_ATTRCERT_AttCertValidityPeriod& data);
   ASN1C_ATTRCERT_AttCertValidityPeriod (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttCertValidityPeriod& data);
   ASN1C_ATTRCERT_AttCertValidityPeriod (OSRTContext &context
      , ASN1T_ATTRCERT_AttCertValidityPeriod& data);
   ASN1C_ATTRCERT_AttCertValidityPeriod (ASN1C_ATTRCERT_AttCertValidityPeriod& original);
   virtual ~ASN1C_ATTRCERT_AttCertValidityPeriod () {}
   inline ASN1T_ATTRCERT_AttCertValidityPeriod& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttCertValidityPeriod& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttCertValidityPeriod");
   int toStream (const char* name = "AttCertValidityPeriod");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttCertValidityPeriod* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AttCertValidityPeriod& getCopy (ASN1T_ATTRCERT_AttCertValidityPeriod* pDstData = 0);
   ASN1T_ATTRCERT_AttCertValidityPeriod* newCopy ();

   inline ASN1C_ATTRCERT_AttCertValidityPeriod& operator= (ASN1C_ATTRCERT_AttCertValidityPeriod& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_AttCertValidityPeriod (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttCertValidityPeriod *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttCertValidityPeriod (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ATTRCERT_AttCertValidityPeriod 
   (const char* name, const ASN1T_ATTRCERT_AttCertValidityPeriod* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttCertValidityPeriod (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttCertValidityPeriod* pvalue);

EXTERN ASN1T_ATTRCERT_AttCertValidityPeriod* 
   new_ASN1T_ATTRCERT_AttCertValidityPeriod (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttCertValidityPeriod (const char* name, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pValue, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AttCertValidityPeriod (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pSrcValue, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pDstValue);

EXTERN void asn1Init_ATTRCERT_AttCertValidityPeriod (
   ASN1T_ATTRCERT_AttCertValidityPeriod* pvalue);

EXTERN void asn1Free_ATTRCERT_AttCertValidityPeriod (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfATTRCERT_Attribute                                  */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute;

/* List of ASN1T_EXP_Attribute */
typedef struct EXTERN ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute();
} ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute;

class EXTERN ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute :
public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& msgData;
public:
   ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute
       (ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& data);
   ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& data);
   ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute (ASN1CType& ccobj
      , ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& data);
   ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute (OSRTContext &context
      , ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& data);
   ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute (ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute& original);
   virtual ~ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute () {}
   inline ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& getData () { return msgData; }
   inline const ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfATTRCERT_Attribute");
   int toStream (const char* name = "_SeqOfATTRCERT_Attribute");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& getCopy (ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pDstData = 0);
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* newCopy ();

   ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute& operator= (ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute& srcData);
   void Append (ASN1T_EXP_Attribute* elem);
   ASN1T_EXP_Attribute* NewElement ();
   ASN1T_EXP_Attribute* AppendNewElement ();
} ;

EXTERN int asn1E_ATTRCERT__SeqOfATTRCERT_Attribute (OSCTXT* pctxt,
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT__SeqOfATTRCERT_Attribute (OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ATTRCERT__SeqOfATTRCERT_Attribute 
   (const char* name, const ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT__SeqOfATTRCERT_Attribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERT__SeqOfATTRCERT_Attribute (const char* name, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pValue, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT__SeqOfATTRCERT_Attribute (OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pSrcValue, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pDstValue);

EXTERN void asn1Init_ATTRCERT__SeqOfATTRCERT_Attribute (
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pvalue);

EXTERN void asn1Free_ATTRCERT__SeqOfATTRCERT_Attribute (OSCTXT *pctxt, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateInfo                                  */
/*                                                            */
/**************************************************************/
/*
AttributeCertificateInfo ::= SEQUENCE {
   version AttCertVersion,
   holder Holder,
   issuer AttCertIssuer,
   signature AlgorithmIdentifier,
   serialNumber CertificateSerialNumber,
   attrCertValidityPeriod AttCertValidityPeriod,
   attributes SEQUENCE OF Attribute,
   issuerUniqueID UniqueIdentifier OPTIONAL,
   extensions Extensions OPTIONAL
}
*/
#define TV_ATTRCERT_AttributeCertificateInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_AttributeCertificateInfo;

struct EXTERN ASN1T_ATTRCERT_AttributeCertificateInfo : public ASN1TPDU {
   struct {
      unsigned issuerUniqueIDPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_ATTRCERT_AttCertVersion version;
   ASN1T_ATTRCERT_Holder holder;
   ASN1T_ATTRCERT_AttCertIssuer issuer;
   ASN1T_EXP_AlgorithmIdentifier signature_;
   ASN1T_EXP_CertificateSerialNumber serialNumber;
   ASN1T_ATTRCERT_AttCertValidityPeriod attrCertValidityPeriod;
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute attributes;
   ASN1T_EXP_UniqueIdentifier issuerUniqueID;
   ASN1T_EXP_Extensions extensions;
   ASN1T_ATTRCERT_AttributeCertificateInfo ();
   ASN1T_ATTRCERT_AttributeCertificateInfo (ASN1C_ATTRCERT_AttributeCertificateInfo& srcData);
   ~ASN1T_ATTRCERT_AttributeCertificateInfo ();
} ;

class EXTERN ASN1C_ATTRCERT_AttributeCertificateInfo :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttributeCertificateInfo& msgData;
public:
   ASN1C_ATTRCERT_AttributeCertificateInfo
       (ASN1T_ATTRCERT_AttributeCertificateInfo& data);
   ASN1C_ATTRCERT_AttributeCertificateInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttributeCertificateInfo& data);
   ASN1C_ATTRCERT_AttributeCertificateInfo (OSRTContext &context
      , ASN1T_ATTRCERT_AttributeCertificateInfo& data);
   ASN1C_ATTRCERT_AttributeCertificateInfo (ASN1C_ATTRCERT_AttributeCertificateInfo& original);
   virtual ~ASN1C_ATTRCERT_AttributeCertificateInfo () {}
   inline ASN1T_ATTRCERT_AttributeCertificateInfo& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttributeCertificateInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeCertificateInfo");
   int toStream (const char* name = "AttributeCertificateInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttributeCertificateInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AttributeCertificateInfo& getCopy (ASN1T_ATTRCERT_AttributeCertificateInfo* pDstData = 0);
   ASN1T_ATTRCERT_AttributeCertificateInfo* newCopy ();

   inline ASN1C_ATTRCERT_AttributeCertificateInfo& operator= (ASN1C_ATTRCERT_AttributeCertificateInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_AttributeCertificateInfo (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttributeCertificateInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttributeCertificateInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ATTRCERT_AttributeCertificateInfo 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfo* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttributeCertificateInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfo* pvalue);

EXTERN ASN1T_ATTRCERT_AttributeCertificateInfo* 
   new_ASN1T_ATTRCERT_AttributeCertificateInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttributeCertificateInfo (const char* name, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AttributeCertificateInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pDstValue);

EXTERN void asn1Init_ATTRCERT_AttributeCertificateInfo (
   ASN1T_ATTRCERT_AttributeCertificateInfo* pvalue);

EXTERN void asn1Free_ATTRCERT_AttributeCertificateInfo (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificate                                      */
/*                                                            */
/**************************************************************/
/*
 Uncomment this if using a 1988 level ASN.1 compiler
 UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING

AttributeCertificate ::= SEQUENCE {
   acinfo AttributeCertificateInfo,
   signatureAlgorithm AlgorithmIdentifier,
   signatureValue BIT STRING 
}
*/
#define TV_ATTRCERT_AttributeCertificate	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_AttributeCertificate;

struct EXTERN ASN1T_ATTRCERT_AttributeCertificate : public ASN1TPDU {
   ASN1T_ATTRCERT_AttributeCertificateInfo acinfo;
   ASN1T_EXP_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signatureValue;
   ASN1T_ATTRCERT_AttributeCertificate ();
   ASN1T_ATTRCERT_AttributeCertificate (ASN1C_ATTRCERT_AttributeCertificate& srcData);
   ~ASN1T_ATTRCERT_AttributeCertificate ();
} ;

class EXTERN ASN1C_ATTRCERT_AttributeCertificate :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttributeCertificate& msgData;
public:
   ASN1C_ATTRCERT_AttributeCertificate
       (ASN1T_ATTRCERT_AttributeCertificate& data);
   ASN1C_ATTRCERT_AttributeCertificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttributeCertificate& data);
   ASN1C_ATTRCERT_AttributeCertificate (OSRTContext &context
      , ASN1T_ATTRCERT_AttributeCertificate& data);
   ASN1C_ATTRCERT_AttributeCertificate (ASN1C_ATTRCERT_AttributeCertificate& original);
   virtual ~ASN1C_ATTRCERT_AttributeCertificate () {}
   inline ASN1T_ATTRCERT_AttributeCertificate& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttributeCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeCertificate");
   int toStream (const char* name = "AttributeCertificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttributeCertificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AttributeCertificate& getCopy (ASN1T_ATTRCERT_AttributeCertificate* pDstData = 0);
   ASN1T_ATTRCERT_AttributeCertificate* newCopy ();

   inline ASN1C_ATTRCERT_AttributeCertificate& operator= (ASN1C_ATTRCERT_AttributeCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_AttributeCertificate (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttributeCertificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttributeCertificate (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificate* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ATTRCERT_AttributeCertificate 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificate* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttributeCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttributeCertificate* pvalue);

EXTERN ASN1T_ATTRCERT_AttributeCertificate* 
   new_ASN1T_ATTRCERT_AttributeCertificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttributeCertificate (const char* name, 
   ASN1T_ATTRCERT_AttributeCertificate* pValue, 
   ASN1T_ATTRCERT_AttributeCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AttributeCertificate (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificate* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificate* pDstValue);

EXTERN void asn1Init_ATTRCERT_AttributeCertificate (
   ASN1T_ATTRCERT_AttributeCertificate* pvalue);

EXTERN void asn1Free_ATTRCERT_AttributeCertificate (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AttributeCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  TargetCert                                                */
/*                                                            */
/**************************************************************/
/*
TargetCert ::= SEQUENCE {
   targetCertificate IssuerSerial,
   targetName GeneralName OPTIONAL,
   certDigestInfo ObjectDigestInfo OPTIONAL
}
*/
#define TV_ATTRCERT_TargetCert	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_TargetCert;

struct EXTERN ASN1T_ATTRCERT_TargetCert : public ASN1TPDU {
   struct {
      unsigned targetNamePresent : 1;
      unsigned certDigestInfoPresent : 1;
   } m;
   ASN1T_ATTRCERT_IssuerSerial targetCertificate;
   ASN1T_IMP_GeneralName targetName;
   ASN1T_ATTRCERT_ObjectDigestInfo certDigestInfo;
   ASN1T_ATTRCERT_TargetCert ();
   ASN1T_ATTRCERT_TargetCert (ASN1C_ATTRCERT_TargetCert& srcData);
   ~ASN1T_ATTRCERT_TargetCert ();
} ;

class EXTERN ASN1C_ATTRCERT_TargetCert :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_TargetCert& msgData;
public:
   ASN1C_ATTRCERT_TargetCert (ASN1T_ATTRCERT_TargetCert& data);
   ASN1C_ATTRCERT_TargetCert (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_TargetCert& data);
   ASN1C_ATTRCERT_TargetCert (OSRTContext &context
      , ASN1T_ATTRCERT_TargetCert& data);
   ASN1C_ATTRCERT_TargetCert (ASN1C_ATTRCERT_TargetCert& original);
   virtual ~ASN1C_ATTRCERT_TargetCert () {}
   inline ASN1T_ATTRCERT_TargetCert& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_TargetCert& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TargetCert");
   int toStream (const char* name = "TargetCert");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_TargetCert* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_TargetCert& getCopy (ASN1T_ATTRCERT_TargetCert* pDstData = 0);
   ASN1T_ATTRCERT_TargetCert* newCopy ();

   inline ASN1C_ATTRCERT_TargetCert& operator= (ASN1C_ATTRCERT_TargetCert& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_TargetCert (OSCTXT* pctxt,
   ASN1T_ATTRCERT_TargetCert *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_TargetCert (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_TargetCert* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_TargetCert 
   (const char* name, const ASN1T_ATTRCERT_TargetCert* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_TargetCert (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_TargetCert* pvalue);

EXTERN ASN1T_ATTRCERT_TargetCert* 
   new_ASN1T_ATTRCERT_TargetCert (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_TargetCert (const char* name, 
   ASN1T_ATTRCERT_TargetCert* pValue, ASN1T_ATTRCERT_TargetCert* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_TargetCert (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_TargetCert* pSrcValue, ASN1T_ATTRCERT_TargetCert* pDstValue);

EXTERN void asn1Init_ATTRCERT_TargetCert (ASN1T_ATTRCERT_TargetCert* pvalue);

EXTERN void asn1Free_ATTRCERT_TargetCert (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_TargetCert* pvalue);

/**************************************************************/
/*                                                            */
/*  Target                                                    */
/*                                                            */
/**************************************************************/
/*
Target ::= CHOICE {
   targetName [0] GeneralName,
   targetGroup [1] GeneralName,
   targetCert [2] TargetCert
}
*/
/* Choice context tags */

#define TVC_ATTRCERT_Target_targetName	(TM_CTXT|TM_CONS|0)
#define TVC_ATTRCERT_Target_targetGroup	(TM_CTXT|TM_CONS|1)
#define TVC_ATTRCERT_Target_targetCert	(TM_CTXT|TM_CONS|2)

/* Choice tag constants */

#define T_ATTRCERT_Target_targetName    1
#define T_ATTRCERT_Target_targetGroup   2
#define T_ATTRCERT_Target_targetCert    3

class EXTERN ASN1C_ATTRCERT_Target;

struct EXTERN ASN1T_ATTRCERT_Target : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_IMP_GeneralName *targetName;
      /* t = 2 */
      ASN1T_IMP_GeneralName *targetGroup;
      /* t = 3 */
      ASN1T_ATTRCERT_TargetCert *targetCert;
   } u;
   ASN1T_ATTRCERT_Target () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ATTRCERT_Target (ASN1C_ATTRCERT_Target& srcData);
   ~ASN1T_ATTRCERT_Target ();
} ;

class EXTERN ASN1C_ATTRCERT_Target :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_Target& msgData;
public:
   ASN1C_ATTRCERT_Target (ASN1T_ATTRCERT_Target& data);
   ASN1C_ATTRCERT_Target (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_Target& data);
   ASN1C_ATTRCERT_Target (OSRTContext &context, ASN1T_ATTRCERT_Target& data);
   ASN1C_ATTRCERT_Target (ASN1C_ATTRCERT_Target& original);
   virtual ~ASN1C_ATTRCERT_Target () {}
   inline ASN1T_ATTRCERT_Target& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_Target& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Target");
   int toStream (const char* name = "Target");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_Target* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_Target& getCopy (ASN1T_ATTRCERT_Target* pDstData = 0);
   ASN1T_ATTRCERT_Target* newCopy ();

   inline ASN1C_ATTRCERT_Target& operator= (ASN1C_ATTRCERT_Target& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_Target (OSCTXT* pctxt,
   ASN1T_ATTRCERT_Target *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_Target (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Target* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_Target 
   (const char* name, const ASN1T_ATTRCERT_Target* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_Target (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_Target* pvalue);

EXTERN ASN1T_ATTRCERT_Target* new_ASN1T_ATTRCERT_Target (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_Target (const char* name, 
   ASN1T_ATTRCERT_Target* pValue, ASN1T_ATTRCERT_Target* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_Target (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Target* pSrcValue, ASN1T_ATTRCERT_Target* pDstValue);

EXTERN void asn1Init_ATTRCERT_Target (ASN1T_ATTRCERT_Target* pvalue);

EXTERN void asn1Free_ATTRCERT_Target (OSCTXT *pctxt, ASN1T_ATTRCERT_Target* pvalue);

/**************************************************************/
/*                                                            */
/*  Targets                                                   */
/*                                                            */
/**************************************************************/
/*
Targets ::= SEQUENCE OF Target
*/
#define TV_ATTRCERT_Targets	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_Targets;

/* List of ASN1T_ATTRCERT_Target */
typedef struct EXTERN ASN1T_ATTRCERT_Targets : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERT_Targets();
} ASN1T_ATTRCERT_Targets;

class EXTERN ASN1C_ATTRCERT_Targets :
public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERT_Targets& msgData;
public:
   ASN1C_ATTRCERT_Targets (ASN1T_ATTRCERT_Targets& data);
   ASN1C_ATTRCERT_Targets (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_Targets& data);
   ASN1C_ATTRCERT_Targets (ASN1CType& ccobj, ASN1T_ATTRCERT_Targets& data);
   ASN1C_ATTRCERT_Targets (OSRTContext &context, ASN1T_ATTRCERT_Targets& data);
   ASN1C_ATTRCERT_Targets (ASN1C_ATTRCERT_Targets& original);
   virtual ~ASN1C_ATTRCERT_Targets () {}
   inline ASN1T_ATTRCERT_Targets& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_Targets& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Targets");
   int toStream (const char* name = "Targets");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_Targets* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_Targets& getCopy (ASN1T_ATTRCERT_Targets* pDstData = 0);
   ASN1T_ATTRCERT_Targets* newCopy ();

   ASN1C_ATTRCERT_Targets& operator= (ASN1C_ATTRCERT_Targets& srcData);
   void Append (ASN1T_ATTRCERT_Target* elem);
   ASN1T_ATTRCERT_Target* NewElement ();
   ASN1T_ATTRCERT_Target* AppendNewElement ();
} ;

EXTERN int asn1E_ATTRCERT_Targets (OSCTXT* pctxt,
   ASN1T_ATTRCERT_Targets *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_Targets (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Targets* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_Targets 
   (const char* name, const ASN1T_ATTRCERT_Targets* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_Targets (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_Targets* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERT_Targets (const char* name, 
   ASN1T_ATTRCERT_Targets* pValue, ASN1T_ATTRCERT_Targets* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_Targets (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Targets* pSrcValue, ASN1T_ATTRCERT_Targets* pDstValue);

EXTERN void asn1Init_ATTRCERT_Targets (ASN1T_ATTRCERT_Targets* pvalue);

EXTERN void asn1Free_ATTRCERT_Targets (OSCTXT *pctxt, ASN1T_ATTRCERT_Targets* pvalue);

/**************************************************************/
/*                                                            */
/*  IetfAttrSyntax_values_element                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IetfAttrSyntax'
*/
/* Choice context tags */

#define TVC_ATTRCERT_IetfAttrSyntax_values_element_octets	(TM_UNIV|TM_PRIM|4)
#define TVC_ATTRCERT_IetfAttrSyntax_values_element_oid	(TM_UNIV|TM_PRIM|6)
#define TVC_ATTRCERT_IetfAttrSyntax_values_element_string	(TM_UNIV|TM_PRIM|12)

/* Choice tag constants */

#define T_ATTRCERT_IetfAttrSyntax_values_element_octets 1
#define T_ATTRCERT_IetfAttrSyntax_values_element_oid 2
#define T_ATTRCERT_IetfAttrSyntax_values_element_string 3

class EXTERN ASN1C_ATTRCERT_IetfAttrSyntax_values_element;

struct EXTERN ASN1T_ATTRCERT_IetfAttrSyntax_values_element : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1TDynOctStr *octets;
      /* t = 2 */
      ASN1TObjId *oid;
      /* t = 3 */
      const OSUTF8CHAR* string;
   } u;
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element (ASN1C_ATTRCERT_IetfAttrSyntax_values_element& srcData);
   ~ASN1T_ATTRCERT_IetfAttrSyntax_values_element ();
} ;

class EXTERN ASN1C_ATTRCERT_IetfAttrSyntax_values_element :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element& msgData;
public:
   ASN1C_ATTRCERT_IetfAttrSyntax_values_element
       (ASN1T_ATTRCERT_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERT_IetfAttrSyntax_values_element (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERT_IetfAttrSyntax_values_element (OSRTContext &context
      , ASN1T_ATTRCERT_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERT_IetfAttrSyntax_values_element (ASN1C_ATTRCERT_IetfAttrSyntax_values_element& original);
   virtual ~ASN1C_ATTRCERT_IetfAttrSyntax_values_element () {}
   inline ASN1T_ATTRCERT_IetfAttrSyntax_values_element& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_IetfAttrSyntax_values_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "IetfAttrSyntax_values_element");
   int toStream (const char* name = "IetfAttrSyntax_values_element");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element& getCopy (ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pDstData = 0);
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* newCopy ();

   inline ASN1C_ATTRCERT_IetfAttrSyntax_values_element& operator= (ASN1C_ATTRCERT_IetfAttrSyntax_values_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_IetfAttrSyntax_values_element (OSCTXT* pctxt,
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_IetfAttrSyntax_values_element (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ATTRCERT_IetfAttrSyntax_values_element 
   (const char* name, const ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_IetfAttrSyntax_values_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pvalue);

EXTERN ASN1T_ATTRCERT_IetfAttrSyntax_values_element* 
   new_ASN1T_ATTRCERT_IetfAttrSyntax_values_element (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_IetfAttrSyntax_values_element (const char* name, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pValue, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_IetfAttrSyntax_values_element (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pSrcValue, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pDstValue);

EXTERN void asn1Init_ATTRCERT_IetfAttrSyntax_values_element (
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pvalue);

EXTERN void asn1Free_ATTRCERT_IetfAttrSyntax_values_element (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfATTRCERT_IetfAttrSyntax_values_element              */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element;

/* List of ASN1T_ATTRCERT_IetfAttrSyntax_values_element */
typedef struct EXTERN ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element();
} ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element;

class EXTERN ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element :
public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& msgData;
public:
   ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element
       (ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (ASN1CType& ccobj
      , ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (
      OSRTContext &context
      , ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& original);
   virtual ~ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element () {}
   inline ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& getData () { return msgData; }
   inline const ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfATTRCERT_IetfAttrSyntax_values_element");
   int toStream (const char* name = "_SeqOfATTRCERT_IetfAttrSyntax_values_element");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& getCopy (ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pDstData = 0);
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* newCopy ();

   ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& operator= (ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& srcData);
   void Append (ASN1T_ATTRCERT_IetfAttrSyntax_values_element* elem);
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* NewElement ();
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* AppendNewElement ();
} ;

EXTERN int asn1E_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (OSCTXT* pctxt,
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (
   OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element 
   (const char* name, const ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (
   const char* name, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pValue, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pSrcValue, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pDstValue);

EXTERN void asn1Init_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pvalue);

EXTERN void asn1Free_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (OSCTXT *pctxt, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pvalue);

/**************************************************************/
/*                                                            */
/*  IetfAttrSyntax                                            */
/*                                                            */
/**************************************************************/
/*
IetfAttrSyntax ::= SEQUENCE {
   policyAuthority [0] GeneralNames OPTIONAL,
   values SEQUENCE OF CHOICE {
      octets OCTET STRING,
      oid OBJECT IDENTIFIER,
      string UTF8String
   }
}
*/
#define TV_ATTRCERT_IetfAttrSyntax	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_IetfAttrSyntax;

struct EXTERN ASN1T_ATTRCERT_IetfAttrSyntax : public ASN1TPDU {
   struct {
      unsigned policyAuthorityPresent : 1;
   } m;
   ASN1T_IMP_GeneralNames policyAuthority;
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element values;
   ASN1T_ATTRCERT_IetfAttrSyntax ();
   ASN1T_ATTRCERT_IetfAttrSyntax (ASN1C_ATTRCERT_IetfAttrSyntax& srcData);
   ~ASN1T_ATTRCERT_IetfAttrSyntax ();
} ;

class EXTERN ASN1C_ATTRCERT_IetfAttrSyntax :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_IetfAttrSyntax& msgData;
public:
   ASN1C_ATTRCERT_IetfAttrSyntax (ASN1T_ATTRCERT_IetfAttrSyntax& data);
   ASN1C_ATTRCERT_IetfAttrSyntax (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_IetfAttrSyntax& data);
   ASN1C_ATTRCERT_IetfAttrSyntax (OSRTContext &context
      , ASN1T_ATTRCERT_IetfAttrSyntax& data);
   ASN1C_ATTRCERT_IetfAttrSyntax (ASN1C_ATTRCERT_IetfAttrSyntax& original);
   virtual ~ASN1C_ATTRCERT_IetfAttrSyntax () {}
   inline ASN1T_ATTRCERT_IetfAttrSyntax& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_IetfAttrSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "IetfAttrSyntax");
   int toStream (const char* name = "IetfAttrSyntax");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_IetfAttrSyntax* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_IetfAttrSyntax& getCopy (ASN1T_ATTRCERT_IetfAttrSyntax* pDstData = 0);
   ASN1T_ATTRCERT_IetfAttrSyntax* newCopy ();

   inline ASN1C_ATTRCERT_IetfAttrSyntax& operator= (ASN1C_ATTRCERT_IetfAttrSyntax& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_IetfAttrSyntax (OSCTXT* pctxt,
   ASN1T_ATTRCERT_IetfAttrSyntax *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_IetfAttrSyntax (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IetfAttrSyntax* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_IetfAttrSyntax 
   (const char* name, const ASN1T_ATTRCERT_IetfAttrSyntax* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_IetfAttrSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_IetfAttrSyntax* pvalue);

EXTERN ASN1T_ATTRCERT_IetfAttrSyntax* 
   new_ASN1T_ATTRCERT_IetfAttrSyntax (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_IetfAttrSyntax (const char* name, 
   ASN1T_ATTRCERT_IetfAttrSyntax* pValue, 
   ASN1T_ATTRCERT_IetfAttrSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_IetfAttrSyntax (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IetfAttrSyntax* pSrcValue, ASN1T_ATTRCERT_IetfAttrSyntax*
    pDstValue);

EXTERN void asn1Init_ATTRCERT_IetfAttrSyntax (ASN1T_ATTRCERT_IetfAttrSyntax* pvalue);

EXTERN void asn1Free_ATTRCERT_IetfAttrSyntax (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_IetfAttrSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  SvceAuthInfo                                              */
/*                                                            */
/**************************************************************/
/*
SvceAuthInfo ::= SEQUENCE {
   service GeneralName,
   ident GeneralName,
   authInfo OCTET STRING OPTIONAL
}
*/
#define TV_ATTRCERT_SvceAuthInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_SvceAuthInfo;

struct EXTERN ASN1T_ATTRCERT_SvceAuthInfo : public ASN1TPDU {
   struct {
      unsigned authInfoPresent : 1;
   } m;
   ASN1T_IMP_GeneralName service;
   ASN1T_IMP_GeneralName ident;
   ASN1TDynOctStr authInfo;
   ASN1T_ATTRCERT_SvceAuthInfo ();
   ASN1T_ATTRCERT_SvceAuthInfo (ASN1C_ATTRCERT_SvceAuthInfo& srcData);
   ~ASN1T_ATTRCERT_SvceAuthInfo ();
} ;

class EXTERN ASN1C_ATTRCERT_SvceAuthInfo :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_SvceAuthInfo& msgData;
public:
   ASN1C_ATTRCERT_SvceAuthInfo (ASN1T_ATTRCERT_SvceAuthInfo& data);
   ASN1C_ATTRCERT_SvceAuthInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_SvceAuthInfo& data);
   ASN1C_ATTRCERT_SvceAuthInfo (OSRTContext &context
      , ASN1T_ATTRCERT_SvceAuthInfo& data);
   ASN1C_ATTRCERT_SvceAuthInfo (ASN1C_ATTRCERT_SvceAuthInfo& original);
   virtual ~ASN1C_ATTRCERT_SvceAuthInfo () {}
   inline ASN1T_ATTRCERT_SvceAuthInfo& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_SvceAuthInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SvceAuthInfo");
   int toStream (const char* name = "SvceAuthInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_SvceAuthInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_SvceAuthInfo& getCopy (ASN1T_ATTRCERT_SvceAuthInfo* pDstData = 0);
   ASN1T_ATTRCERT_SvceAuthInfo* newCopy ();

   inline ASN1C_ATTRCERT_SvceAuthInfo& operator= (ASN1C_ATTRCERT_SvceAuthInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_SvceAuthInfo (OSCTXT* pctxt,
   ASN1T_ATTRCERT_SvceAuthInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_SvceAuthInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_SvceAuthInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_SvceAuthInfo 
   (const char* name, const ASN1T_ATTRCERT_SvceAuthInfo* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_SvceAuthInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_SvceAuthInfo* pvalue);

EXTERN ASN1T_ATTRCERT_SvceAuthInfo* 
   new_ASN1T_ATTRCERT_SvceAuthInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_SvceAuthInfo (const char* name, 
   ASN1T_ATTRCERT_SvceAuthInfo* pValue, 
   ASN1T_ATTRCERT_SvceAuthInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_SvceAuthInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_SvceAuthInfo* pSrcValue, ASN1T_ATTRCERT_SvceAuthInfo*
    pDstValue);

EXTERN void asn1Init_ATTRCERT_SvceAuthInfo (ASN1T_ATTRCERT_SvceAuthInfo* pvalue);

EXTERN void asn1Free_ATTRCERT_SvceAuthInfo (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_SvceAuthInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RoleSyntax                                                */
/*                                                            */
/**************************************************************/
/*
RoleSyntax ::= SEQUENCE {
   roleAuthority [0] GeneralNames OPTIONAL,
   roleName [1] GeneralName
}
*/
#define TV_ATTRCERT_RoleSyntax	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_RoleSyntax;

struct EXTERN ASN1T_ATTRCERT_RoleSyntax : public ASN1TPDU {
   struct {
      unsigned roleAuthorityPresent : 1;
   } m;
   ASN1T_IMP_GeneralNames roleAuthority;
   ASN1T_IMP_GeneralName roleName;
   ASN1T_ATTRCERT_RoleSyntax ();
   ASN1T_ATTRCERT_RoleSyntax (ASN1C_ATTRCERT_RoleSyntax& srcData);
   ~ASN1T_ATTRCERT_RoleSyntax ();
} ;

class EXTERN ASN1C_ATTRCERT_RoleSyntax :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_RoleSyntax& msgData;
public:
   ASN1C_ATTRCERT_RoleSyntax (ASN1T_ATTRCERT_RoleSyntax& data);
   ASN1C_ATTRCERT_RoleSyntax (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_RoleSyntax& data);
   ASN1C_ATTRCERT_RoleSyntax (OSRTContext &context
      , ASN1T_ATTRCERT_RoleSyntax& data);
   ASN1C_ATTRCERT_RoleSyntax (ASN1C_ATTRCERT_RoleSyntax& original);
   virtual ~ASN1C_ATTRCERT_RoleSyntax () {}
   inline ASN1T_ATTRCERT_RoleSyntax& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_RoleSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RoleSyntax");
   int toStream (const char* name = "RoleSyntax");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_RoleSyntax* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_RoleSyntax& getCopy (ASN1T_ATTRCERT_RoleSyntax* pDstData = 0);
   ASN1T_ATTRCERT_RoleSyntax* newCopy ();

   inline ASN1C_ATTRCERT_RoleSyntax& operator= (ASN1C_ATTRCERT_RoleSyntax& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_RoleSyntax (OSCTXT* pctxt,
   ASN1T_ATTRCERT_RoleSyntax *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_RoleSyntax (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_RoleSyntax* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_RoleSyntax 
   (const char* name, const ASN1T_ATTRCERT_RoleSyntax* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_RoleSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_RoleSyntax* pvalue);

EXTERN ASN1T_ATTRCERT_RoleSyntax* 
   new_ASN1T_ATTRCERT_RoleSyntax (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_RoleSyntax (const char* name, 
   ASN1T_ATTRCERT_RoleSyntax* pValue, ASN1T_ATTRCERT_RoleSyntax* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_RoleSyntax (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_RoleSyntax* pSrcValue, ASN1T_ATTRCERT_RoleSyntax* pDstValue);

EXTERN void asn1Init_ATTRCERT_RoleSyntax (ASN1T_ATTRCERT_RoleSyntax* pvalue);

EXTERN void asn1Free_ATTRCERT_RoleSyntax (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_RoleSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  SecurityCategory                                          */
/*                                                            */
/**************************************************************/
/*
SecurityCategory ::= SEQUENCE {
   type [0] OBJECT IDENTIFIER,
   value [1] ANY
}
*/
#define TV_ATTRCERT_SecurityCategory	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_SecurityCategory;

struct EXTERN ASN1T_ATTRCERT_SecurityCategory : public ASN1TPDU {
   ASN1TObjId type;
   ASN1TOpenType value;
   ASN1T_ATTRCERT_SecurityCategory ();
   ASN1T_ATTRCERT_SecurityCategory (ASN1C_ATTRCERT_SecurityCategory& srcData);
   ~ASN1T_ATTRCERT_SecurityCategory ();
} ;

class EXTERN ASN1C_ATTRCERT_SecurityCategory :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_SecurityCategory& msgData;
public:
   ASN1C_ATTRCERT_SecurityCategory (ASN1T_ATTRCERT_SecurityCategory& data);
   ASN1C_ATTRCERT_SecurityCategory (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_SecurityCategory& data);
   ASN1C_ATTRCERT_SecurityCategory (OSRTContext &context
      , ASN1T_ATTRCERT_SecurityCategory& data);
   ASN1C_ATTRCERT_SecurityCategory (ASN1C_ATTRCERT_SecurityCategory& original);
   virtual ~ASN1C_ATTRCERT_SecurityCategory () {}
   inline ASN1T_ATTRCERT_SecurityCategory& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_SecurityCategory& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SecurityCategory");
   int toStream (const char* name = "SecurityCategory");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_SecurityCategory* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_SecurityCategory& getCopy (ASN1T_ATTRCERT_SecurityCategory* pDstData = 0);
   ASN1T_ATTRCERT_SecurityCategory* newCopy ();

   inline ASN1C_ATTRCERT_SecurityCategory& operator= (ASN1C_ATTRCERT_SecurityCategory& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_SecurityCategory (OSCTXT* pctxt,
   ASN1T_ATTRCERT_SecurityCategory *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_SecurityCategory (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_SecurityCategory* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_SecurityCategory 
   (const char* name, const ASN1T_ATTRCERT_SecurityCategory* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_SecurityCategory (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_SecurityCategory* pvalue);

EXTERN ASN1T_ATTRCERT_SecurityCategory* 
   new_ASN1T_ATTRCERT_SecurityCategory (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_SecurityCategory (const char* name, 
   ASN1T_ATTRCERT_SecurityCategory* pValue, 
   ASN1T_ATTRCERT_SecurityCategory* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_SecurityCategory (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_SecurityCategory* pSrcValue, ASN1T_ATTRCERT_SecurityCategory*
    pDstValue);

EXTERN void asn1Init_ATTRCERT_SecurityCategory (
   ASN1T_ATTRCERT_SecurityCategory* pvalue);

EXTERN void asn1Free_ATTRCERT_SecurityCategory (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_SecurityCategory* pvalue);

/**************************************************************/
/*                                                            */
/*  _SetOfATTRCERT_SecurityCategory                           */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory;

/* List of ASN1T_ATTRCERT_SecurityCategory */
typedef struct EXTERN ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory();
} ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory;

class EXTERN ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory :
public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& msgData;
public:
   ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory
       (ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& data);
   ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& data);
   ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory (ASN1CType& ccobj
      , ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& data);
   ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory (OSRTContext &context
      , ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& data);
   ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory (ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory& original);
   virtual ~ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory () {}
   inline ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& getData () { return msgData; }
   inline const ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SetOfATTRCERT_SecurityCategory");
   int toStream (const char* name = "_SetOfATTRCERT_SecurityCategory");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& getCopy (ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pDstData = 0);
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* newCopy ();

   ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory& operator= (ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory& srcData);
   void Append (ASN1T_ATTRCERT_SecurityCategory* elem);
   ASN1T_ATTRCERT_SecurityCategory* NewElement ();
   ASN1T_ATTRCERT_SecurityCategory* AppendNewElement ();
} ;

EXTERN int asn1E_ATTRCERT__SetOfATTRCERT_SecurityCategory (OSCTXT* pctxt,
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT__SetOfATTRCERT_SecurityCategory (OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT__SetOfATTRCERT_SecurityCategory 
   (const char* name, const ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT__SetOfATTRCERT_SecurityCategory (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERT__SetOfATTRCERT_SecurityCategory (const char* name, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pValue, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT__SetOfATTRCERT_SecurityCategory (OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pSrcValue, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pDstValue);

EXTERN void asn1Init_ATTRCERT__SetOfATTRCERT_SecurityCategory (
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pvalue);

EXTERN void asn1Free_ATTRCERT__SetOfATTRCERT_SecurityCategory (OSCTXT *pctxt, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pvalue);

/**************************************************************/
/*                                                            */
/*  Clearance                                                 */
/*                                                            */
/**************************************************************/
/*
Clearance ::= SEQUENCE {
   policyId [0] OBJECT IDENTIFIER,
   classList [1] ClassList DEFAULT { unclassified },
   securityCategories [2] SET OF SecurityCategory OPTIONAL
}
*/
#define TV_ATTRCERT_Clearance	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_Clearance;

struct EXTERN ASN1T_ATTRCERT_Clearance : public ASN1TPDU {
   struct {
      unsigned classListPresent : 1;
      unsigned securityCategoriesPresent : 1;
   } m;
   ASN1TObjId policyId;
   ASN1T_ATTRCERT_ClassList classList;
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory securityCategories;
   ASN1T_ATTRCERT_Clearance ();
   ASN1T_ATTRCERT_Clearance (ASN1C_ATTRCERT_Clearance& srcData);
   ~ASN1T_ATTRCERT_Clearance ();
} ;

class EXTERN ASN1C_ATTRCERT_Clearance :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_Clearance& msgData;
public:
   ASN1C_ATTRCERT_Clearance (ASN1T_ATTRCERT_Clearance& data);
   ASN1C_ATTRCERT_Clearance (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_Clearance& data);
   ASN1C_ATTRCERT_Clearance (OSRTContext &context
      , ASN1T_ATTRCERT_Clearance& data);
   ASN1C_ATTRCERT_Clearance (ASN1C_ATTRCERT_Clearance& original);
   virtual ~ASN1C_ATTRCERT_Clearance () {}
   inline ASN1T_ATTRCERT_Clearance& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_Clearance& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Clearance");
   int toStream (const char* name = "Clearance");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_Clearance* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_Clearance& getCopy (ASN1T_ATTRCERT_Clearance* pDstData = 0);
   ASN1T_ATTRCERT_Clearance* newCopy ();

   inline ASN1C_ATTRCERT_Clearance& operator= (ASN1C_ATTRCERT_Clearance& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_Clearance (OSCTXT* pctxt,
   ASN1T_ATTRCERT_Clearance *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_Clearance (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Clearance* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_Clearance 
   (const char* name, const ASN1T_ATTRCERT_Clearance* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_Clearance (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_Clearance* pvalue);

EXTERN ASN1T_ATTRCERT_Clearance* 
   new_ASN1T_ATTRCERT_Clearance (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_Clearance (const char* name, 
   ASN1T_ATTRCERT_Clearance* pValue, ASN1T_ATTRCERT_Clearance* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_Clearance (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Clearance* pSrcValue, ASN1T_ATTRCERT_Clearance* pDstValue);

EXTERN void asn1Init_ATTRCERT_Clearance (ASN1T_ATTRCERT_Clearance* pvalue);

EXTERN void asn1Free_ATTRCERT_Clearance (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_Clearance* pvalue);

/**************************************************************/
/*                                                            */
/*  AttrSpec                                                  */
/*                                                            */
/**************************************************************/
/*
AttrSpec ::= SEQUENCE OF OBJECT IDENTIFIER
*/
#define TV_ATTRCERT_AttrSpec	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_AttrSpec;

/* List of ASN1TObjId */
typedef struct EXTERN ASN1T_ATTRCERT_AttrSpec : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERT_AttrSpec();
} ASN1T_ATTRCERT_AttrSpec;

class EXTERN ASN1C_ATTRCERT_AttrSpec :
public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERT_AttrSpec& msgData;
public:
   ASN1C_ATTRCERT_AttrSpec (ASN1T_ATTRCERT_AttrSpec& data);
   ASN1C_ATTRCERT_AttrSpec (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttrSpec& data);
   ASN1C_ATTRCERT_AttrSpec (ASN1CType& ccobj, ASN1T_ATTRCERT_AttrSpec& data);
   ASN1C_ATTRCERT_AttrSpec (OSRTContext &context, ASN1T_ATTRCERT_AttrSpec& data
      );
   ASN1C_ATTRCERT_AttrSpec (ASN1C_ATTRCERT_AttrSpec& original);
   virtual ~ASN1C_ATTRCERT_AttrSpec () {}
   inline ASN1T_ATTRCERT_AttrSpec& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttrSpec& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttrSpec");
   int toStream (const char* name = "AttrSpec");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttrSpec* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AttrSpec& getCopy (ASN1T_ATTRCERT_AttrSpec* pDstData = 0);
   ASN1T_ATTRCERT_AttrSpec* newCopy ();

   ASN1C_ATTRCERT_AttrSpec& operator= (ASN1C_ATTRCERT_AttrSpec& srcData);
   void Append (ASN1TObjId* elem);
   ASN1TObjId* NewElement ();
   ASN1TObjId* AppendNewElement ();
} ;

EXTERN int asn1E_ATTRCERT_AttrSpec (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttrSpec *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttrSpec (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttrSpec* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_AttrSpec 
   (const char* name, const ASN1T_ATTRCERT_AttrSpec* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttrSpec (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttrSpec* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttrSpec (const char* name, 
   ASN1T_ATTRCERT_AttrSpec* pValue, ASN1T_ATTRCERT_AttrSpec* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AttrSpec (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttrSpec* pSrcValue, ASN1T_ATTRCERT_AttrSpec* pDstValue);

EXTERN void asn1Init_ATTRCERT_AttrSpec (ASN1T_ATTRCERT_AttrSpec* pvalue);

EXTERN void asn1Free_ATTRCERT_AttrSpec (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AttrSpec* pvalue);

/**************************************************************/
/*                                                            */
/*  AAControls                                                */
/*                                                            */
/**************************************************************/
/*
AAControls ::= SEQUENCE {
   pathLenConstraint INTEGER (0..MAX) OPTIONAL,
   permittedAttrs [0] AttrSpec OPTIONAL,
   excludedAttrs [1] AttrSpec OPTIONAL,
   permitUnSpecified BOOLEAN DEFAULT TRUE
}
*/
#define TV_ATTRCERT_AAControls	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_AAControls;

struct EXTERN ASN1T_ATTRCERT_AAControls : public ASN1TPDU {
   struct {
      unsigned pathLenConstraintPresent : 1;
      unsigned permittedAttrsPresent : 1;
      unsigned excludedAttrsPresent : 1;
   } m;
   OSUINT32 pathLenConstraint;
   ASN1T_ATTRCERT_AttrSpec permittedAttrs;
   ASN1T_ATTRCERT_AttrSpec excludedAttrs;
   OSBOOL permitUnSpecified;
   ASN1T_ATTRCERT_AAControls ();
   ASN1T_ATTRCERT_AAControls (ASN1C_ATTRCERT_AAControls& srcData);
   ~ASN1T_ATTRCERT_AAControls ();
} ;

class EXTERN ASN1C_ATTRCERT_AAControls :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AAControls& msgData;
public:
   ASN1C_ATTRCERT_AAControls (ASN1T_ATTRCERT_AAControls& data);
   ASN1C_ATTRCERT_AAControls (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AAControls& data);
   ASN1C_ATTRCERT_AAControls (OSRTContext &context
      , ASN1T_ATTRCERT_AAControls& data);
   ASN1C_ATTRCERT_AAControls (ASN1C_ATTRCERT_AAControls& original);
   virtual ~ASN1C_ATTRCERT_AAControls () {}
   inline ASN1T_ATTRCERT_AAControls& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AAControls& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AAControls");
   int toStream (const char* name = "AAControls");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AAControls* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AAControls& getCopy (ASN1T_ATTRCERT_AAControls* pDstData = 0);
   ASN1T_ATTRCERT_AAControls* newCopy ();

   inline ASN1C_ATTRCERT_AAControls& operator= (ASN1C_ATTRCERT_AAControls& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_AAControls (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AAControls *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AAControls (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AAControls* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_AAControls 
   (const char* name, const ASN1T_ATTRCERT_AAControls* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AAControls (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AAControls* pvalue);

EXTERN ASN1T_ATTRCERT_AAControls* 
   new_ASN1T_ATTRCERT_AAControls (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AAControls (const char* name, 
   ASN1T_ATTRCERT_AAControls* pValue, ASN1T_ATTRCERT_AAControls* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AAControls (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AAControls* pSrcValue, ASN1T_ATTRCERT_AAControls* pDstValue);

EXTERN void asn1Init_ATTRCERT_AAControls (ASN1T_ATTRCERT_AAControls* pvalue);

EXTERN void asn1Free_ATTRCERT_AAControls (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AAControls* pvalue);

/**************************************************************/
/*                                                            */
/*  ACClearAttrs                                              */
/*                                                            */
/**************************************************************/
/*
ACClearAttrs ::= SEQUENCE {
   acIssuer GeneralName,
   acSerial INTEGER,
   attrs SEQUENCE OF Attribute
}
*/
#define TV_ATTRCERT_ACClearAttrs	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_ACClearAttrs;

struct EXTERN ASN1T_ATTRCERT_ACClearAttrs : public ASN1TPDU {
   ASN1T_IMP_GeneralName acIssuer;
   OSINT32 acSerial;
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute attrs;
   ASN1T_ATTRCERT_ACClearAttrs ();
   ASN1T_ATTRCERT_ACClearAttrs (ASN1C_ATTRCERT_ACClearAttrs& srcData);
   ~ASN1T_ATTRCERT_ACClearAttrs ();
} ;

class EXTERN ASN1C_ATTRCERT_ACClearAttrs :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_ACClearAttrs& msgData;
public:
   ASN1C_ATTRCERT_ACClearAttrs (ASN1T_ATTRCERT_ACClearAttrs& data);
   ASN1C_ATTRCERT_ACClearAttrs (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_ACClearAttrs& data);
   ASN1C_ATTRCERT_ACClearAttrs (OSRTContext &context
      , ASN1T_ATTRCERT_ACClearAttrs& data);
   ASN1C_ATTRCERT_ACClearAttrs (ASN1C_ATTRCERT_ACClearAttrs& original);
   virtual ~ASN1C_ATTRCERT_ACClearAttrs () {}
   inline ASN1T_ATTRCERT_ACClearAttrs& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_ACClearAttrs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ACClearAttrs");
   int toStream (const char* name = "ACClearAttrs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_ACClearAttrs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_ACClearAttrs& getCopy (ASN1T_ATTRCERT_ACClearAttrs* pDstData = 0);
   ASN1T_ATTRCERT_ACClearAttrs* newCopy ();

   inline ASN1C_ATTRCERT_ACClearAttrs& operator= (ASN1C_ATTRCERT_ACClearAttrs& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_ACClearAttrs (OSCTXT* pctxt,
   ASN1T_ATTRCERT_ACClearAttrs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_ACClearAttrs (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ACClearAttrs* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_ACClearAttrs 
   (const char* name, const ASN1T_ATTRCERT_ACClearAttrs* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_ACClearAttrs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_ACClearAttrs* pvalue);

EXTERN ASN1T_ATTRCERT_ACClearAttrs* 
   new_ASN1T_ATTRCERT_ACClearAttrs (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_ACClearAttrs (const char* name, 
   ASN1T_ATTRCERT_ACClearAttrs* pValue, 
   ASN1T_ATTRCERT_ACClearAttrs* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_ACClearAttrs (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ACClearAttrs* pSrcValue, ASN1T_ATTRCERT_ACClearAttrs*
    pDstValue);

EXTERN void asn1Init_ATTRCERT_ACClearAttrs (ASN1T_ATTRCERT_ACClearAttrs* pvalue);

EXTERN void asn1Free_ATTRCERT_ACClearAttrs (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_ACClearAttrs* pvalue);

/**************************************************************/
/*                                                            */
/*  ProxyInfo                                                 */
/*                                                            */
/**************************************************************/
/*
ProxyInfo ::= SEQUENCE OF Targets
*/
#define TV_ATTRCERT_ProxyInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_ProxyInfo;

/* List of ASN1T_ATTRCERT_Targets */
typedef struct EXTERN ASN1T_ATTRCERT_ProxyInfo : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERT_ProxyInfo();
} ASN1T_ATTRCERT_ProxyInfo;

class EXTERN ASN1C_ATTRCERT_ProxyInfo :
public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERT_ProxyInfo& msgData;
public:
   ASN1C_ATTRCERT_ProxyInfo (ASN1T_ATTRCERT_ProxyInfo& data);
   ASN1C_ATTRCERT_ProxyInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_ProxyInfo& data);
   ASN1C_ATTRCERT_ProxyInfo (ASN1CType& ccobj, ASN1T_ATTRCERT_ProxyInfo& data);
   ASN1C_ATTRCERT_ProxyInfo (OSRTContext &context
      , ASN1T_ATTRCERT_ProxyInfo& data);
   ASN1C_ATTRCERT_ProxyInfo (ASN1C_ATTRCERT_ProxyInfo& original);
   virtual ~ASN1C_ATTRCERT_ProxyInfo () {}
   inline ASN1T_ATTRCERT_ProxyInfo& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_ProxyInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ProxyInfo");
   int toStream (const char* name = "ProxyInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_ProxyInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_ProxyInfo& getCopy (ASN1T_ATTRCERT_ProxyInfo* pDstData = 0);
   ASN1T_ATTRCERT_ProxyInfo* newCopy ();

   ASN1C_ATTRCERT_ProxyInfo& operator= (ASN1C_ATTRCERT_ProxyInfo& srcData);
   void Append (ASN1T_ATTRCERT_Targets* elem);
   ASN1T_ATTRCERT_Targets* NewElement ();
   ASN1T_ATTRCERT_Targets* AppendNewElement ();
} ;

EXTERN int asn1E_ATTRCERT_ProxyInfo (OSCTXT* pctxt,
   ASN1T_ATTRCERT_ProxyInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_ProxyInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ProxyInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_ProxyInfo 
   (const char* name, const ASN1T_ATTRCERT_ProxyInfo* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_ProxyInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_ProxyInfo* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERT_ProxyInfo (const char* name, 
   ASN1T_ATTRCERT_ProxyInfo* pValue, ASN1T_ATTRCERT_ProxyInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_ProxyInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ProxyInfo* pSrcValue, ASN1T_ATTRCERT_ProxyInfo* pDstValue);

EXTERN void asn1Init_ATTRCERT_ProxyInfo (ASN1T_ATTRCERT_ProxyInfo* pvalue);

EXTERN void asn1Free_ATTRCERT_ProxyInfo (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_ProxyInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateInfoV1_subject                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'AttributeCertificateInfoV1'
*/
/* Choice context tags */

#define TVC_ATTRCERT_AttributeCertificateInfoV1_subject_baseCertificateID	(TM_CTXT|TM_CONS|0)
#define TVC_ATTRCERT_AttributeCertificateInfoV1_subject_subjectName	(TM_CTXT|TM_CONS|1)

/* Choice tag constants */

#define T_ATTRCERT_AttributeCertificateInfoV1_subject_baseCertificateID 1
#define T_ATTRCERT_AttributeCertificateInfoV1_subject_subjectName 2

class EXTERN ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject;

struct EXTERN ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_ATTRCERT_IssuerSerial *baseCertificateID;
      /* t = 2 */
      ASN1T_IMP_GeneralNames *subjectName;
   } u;
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject (ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject& srcData);
   ~ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject ();
} ;

class EXTERN ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject& msgData;
public:
   ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject
       (ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject& data);
   ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject& data);
   ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject (OSRTContext &context
      , ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject& data);
   ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject (ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject& original);
   virtual ~ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject () {}
   inline ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeCertificateInfoV1_subject");
   int toStream (const char* name = "AttributeCertificateInfoV1_subject");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject& getCopy (ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pDstData = 0);
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* newCopy ();

   inline ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject& operator= (ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_AttributeCertificateInfoV1_subject (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttributeCertificateInfoV1_subject (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ATTRCERT_AttributeCertificateInfoV1_subject 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttributeCertificateInfoV1_subject (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pvalue);

EXTERN ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* 
   new_ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttributeCertificateInfoV1_subject (
   const char* name, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AttributeCertificateInfoV1_subject (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pDstValue);

EXTERN void asn1Init_ATTRCERT_AttributeCertificateInfoV1_subject (
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pvalue);

EXTERN void asn1Free_ATTRCERT_AttributeCertificateInfoV1_subject (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateInfoV1                                */
/*                                                            */
/**************************************************************/
/*
AttributeCertificateInfoV1 ::= SEQUENCE {
   version AttCertVersionV1 DEFAULT v1,
   subject CHOICE {
      baseCertificateID [0] IssuerSerial,
      subjectName [1] GeneralNames
   },
   issuer GeneralNames,
   signature AlgorithmIdentifier,
   serialNumber CertificateSerialNumber,
   attCertValidityPeriod AttCertValidityPeriod,
   attributes SEQUENCE OF Attribute,
   issuerUniqueID UniqueIdentifier OPTIONAL,
   extensions Extensions OPTIONAL
}
*/
#define TV_ATTRCERT_AttributeCertificateInfoV1	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_AttributeCertificateInfoV1;

struct EXTERN ASN1T_ATTRCERT_AttributeCertificateInfoV1 : public ASN1TPDU {
   struct {
      unsigned issuerUniqueIDPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_ATTRCERT_AttCertVersionV1 version;
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject subject;
   ASN1T_IMP_GeneralNames issuer;
   ASN1T_EXP_AlgorithmIdentifier signature_;
   ASN1T_EXP_CertificateSerialNumber serialNumber;
   ASN1T_ATTRCERT_AttCertValidityPeriod attCertValidityPeriod;
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute attributes;
   ASN1T_EXP_UniqueIdentifier issuerUniqueID;
   ASN1T_EXP_Extensions extensions;
   ASN1T_ATTRCERT_AttributeCertificateInfoV1 ();
   ASN1T_ATTRCERT_AttributeCertificateInfoV1 (ASN1C_ATTRCERT_AttributeCertificateInfoV1& srcData);
   ~ASN1T_ATTRCERT_AttributeCertificateInfoV1 ();
} ;

class EXTERN ASN1C_ATTRCERT_AttributeCertificateInfoV1 :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttributeCertificateInfoV1& msgData;
public:
   ASN1C_ATTRCERT_AttributeCertificateInfoV1
       (ASN1T_ATTRCERT_AttributeCertificateInfoV1& data);
   ASN1C_ATTRCERT_AttributeCertificateInfoV1 (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttributeCertificateInfoV1& data);
   ASN1C_ATTRCERT_AttributeCertificateInfoV1 (OSRTContext &context
      , ASN1T_ATTRCERT_AttributeCertificateInfoV1& data);
   ASN1C_ATTRCERT_AttributeCertificateInfoV1 (ASN1C_ATTRCERT_AttributeCertificateInfoV1& original);
   virtual ~ASN1C_ATTRCERT_AttributeCertificateInfoV1 () {}
   inline ASN1T_ATTRCERT_AttributeCertificateInfoV1& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttributeCertificateInfoV1& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeCertificateInfoV1");
   int toStream (const char* name = "AttributeCertificateInfoV1");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttributeCertificateInfoV1* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AttributeCertificateInfoV1& getCopy (ASN1T_ATTRCERT_AttributeCertificateInfoV1* pDstData = 0);
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* newCopy ();

   inline ASN1C_ATTRCERT_AttributeCertificateInfoV1& operator= (ASN1C_ATTRCERT_AttributeCertificateInfoV1& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_AttributeCertificateInfoV1 (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttributeCertificateInfoV1 *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttributeCertificateInfoV1 (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ATTRCERT_AttributeCertificateInfoV1 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfoV1* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttributeCertificateInfoV1 (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttributeCertificateInfoV1* pvalue);

EXTERN ASN1T_ATTRCERT_AttributeCertificateInfoV1* 
   new_ASN1T_ATTRCERT_AttributeCertificateInfoV1 (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttributeCertificateInfoV1 (const char* name, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AttributeCertificateInfoV1 (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pDstValue);

EXTERN void asn1Init_ATTRCERT_AttributeCertificateInfoV1 (
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pvalue);

EXTERN void asn1Free_ATTRCERT_AttributeCertificateInfoV1 (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateV1                                    */
/*                                                            */
/**************************************************************/
/*
AttributeCertificateV1 ::= SEQUENCE {
   acInfo AttributeCertificateInfoV1,
   signatureAlgorithm AlgorithmIdentifier,
   signature BIT STRING 
}
*/
#define TV_ATTRCERT_AttributeCertificateV1	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ATTRCERT_AttributeCertificateV1;

struct EXTERN ASN1T_ATTRCERT_AttributeCertificateV1 : public ASN1TPDU {
   ASN1T_ATTRCERT_AttributeCertificateInfoV1 acInfo;
   ASN1T_EXP_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature_;
   ASN1T_ATTRCERT_AttributeCertificateV1 ();
   ASN1T_ATTRCERT_AttributeCertificateV1 (ASN1C_ATTRCERT_AttributeCertificateV1& srcData);
   ~ASN1T_ATTRCERT_AttributeCertificateV1 ();
} ;

class EXTERN ASN1C_ATTRCERT_AttributeCertificateV1 :
public ASN1CType
{
protected:
   ASN1T_ATTRCERT_AttributeCertificateV1& msgData;
public:
   ASN1C_ATTRCERT_AttributeCertificateV1
       (ASN1T_ATTRCERT_AttributeCertificateV1& data);
   ASN1C_ATTRCERT_AttributeCertificateV1 (OSRTMessageBufferIF& msgBuf
      , ASN1T_ATTRCERT_AttributeCertificateV1& data);
   ASN1C_ATTRCERT_AttributeCertificateV1 (OSRTContext &context
      , ASN1T_ATTRCERT_AttributeCertificateV1& data);
   ASN1C_ATTRCERT_AttributeCertificateV1 (ASN1C_ATTRCERT_AttributeCertificateV1& original);
   virtual ~ASN1C_ATTRCERT_AttributeCertificateV1 () {}
   inline ASN1T_ATTRCERT_AttributeCertificateV1& getData () { return msgData; }
   inline const ASN1T_ATTRCERT_AttributeCertificateV1& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeCertificateV1");
   int toStream (const char* name = "AttributeCertificateV1");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ATTRCERT_AttributeCertificateV1* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ATTRCERT_AttributeCertificateV1& getCopy (ASN1T_ATTRCERT_AttributeCertificateV1* pDstData = 0);
   ASN1T_ATTRCERT_AttributeCertificateV1* newCopy ();

   inline ASN1C_ATTRCERT_AttributeCertificateV1& operator= (ASN1C_ATTRCERT_AttributeCertificateV1& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ATTRCERT_AttributeCertificateV1 (OSCTXT* pctxt,
   ASN1T_ATTRCERT_AttributeCertificateV1 *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ATTRCERT_AttributeCertificateV1 (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ATTRCERT_AttributeCertificateV1 
   (const char* name, const ASN1T_ATTRCERT_AttributeCertificateV1* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERT_AttributeCertificateV1 (OSCTXT *pctxt, 
   const char* name, const ASN1T_ATTRCERT_AttributeCertificateV1* pvalue);

EXTERN ASN1T_ATTRCERT_AttributeCertificateV1* 
   new_ASN1T_ATTRCERT_AttributeCertificateV1 (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ATTRCERT_AttributeCertificateV1 (const char* name, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pValue, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ATTRCERT_AttributeCertificateV1 (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pDstValue);

EXTERN void asn1Init_ATTRCERT_AttributeCertificateV1 (
   ASN1T_ATTRCERT_AttributeCertificateV1* pvalue);

EXTERN void asn1Free_ATTRCERT_AttributeCertificateV1 (OSCTXT *pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ATTRCERT_id_pe_ac_auditIdentity;
extern EXTERN ASN1OBJID ATTRCERT_id_pe_aaControls;
extern EXTERN ASN1OBJID ATTRCERT_id_pe_ac_proxying;
extern EXTERN ASN1OBJID ATTRCERT_id_ce_targetInformation;
extern EXTERN ASN1OBJID ATTRCERT_id_aca;
extern EXTERN ASN1OBJID ATTRCERT_id_aca_authenticationInfo;
extern EXTERN ASN1OBJID ATTRCERT_id_aca_accessIdentity;
extern EXTERN ASN1OBJID ATTRCERT_id_aca_chargingIdentity;
extern EXTERN ASN1OBJID ATTRCERT_id_aca_group;
extern EXTERN ASN1OBJID ATTRCERT_id_aca_encAttrs;
extern EXTERN ASN1OBJID ATTRCERT_id_at_role;
extern EXTERN ASN1OBJID ATTRCERT_id_at_clearance;

#endif
