/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkixtsp.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_TSP_BIGINTEGER (const char* name, 
   ASN1T_TSP_BIGINTEGER* pValue, ASN1T_TSP_BIGINTEGER* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_TSP_BIGINTEGER::Equals (ASN1T_TSP_BIGINTEGER* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_BIGINTEGER ("BIGINTEGER", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_TSAPolicyId (const char* name, 
   ASN1T_TSP_TSAPolicyId* pValue, ASN1T_TSP_TSAPolicyId* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_TSP_TSAPolicyId::Equals (ASN1T_TSP_TSAPolicyId* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_TSAPolicyId ("TSAPolicyId", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_PKIStatus (const char* name, 
   ASN1T_TSP_PKIStatus* pValue, ASN1T_TSP_PKIStatus* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_TSP_PKIStatus::Equals (ASN1T_TSP_PKIStatus* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_PKIStatus ("PKIStatus", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_PKIFailureInfo (const char* name, 
   ASN1T_TSP_PKIFailureInfo* pValue, ASN1T_TSP_PKIFailureInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpBitStr (name, pValue->numbits, pValue->data, 
      pCmpValue->numbits, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_TSP_PKIFailureInfo::Equals (ASN1T_TSP_PKIFailureInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_PKIFailureInfo ("PKIFailureInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_TimeStampToken (const char* name, 
   ASN1T_TSP_TimeStampToken* pValue, ASN1T_TSP_TimeStampToken* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_CMS_ContentInfo (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_TSP_TimeStampToken::Equals (ASN1T_TSP_TimeStampToken* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_TimeStampToken ("TimeStampToken", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_TimeStampReq_version (const char* name, 
   ASN1T_TSP_TimeStampReq_version* pValue, 
   ASN1T_TSP_TimeStampReq_version* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_TSP_TimeStampReq_version::Equals (ASN1T_TSP_TimeStampReq_version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_TimeStampReq_version ("TimeStampReq_version", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_TSTInfo_version (const char* name, 
   ASN1T_TSP_TSTInfo_version* pValue, ASN1T_TSP_TSTInfo_version* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_TSP_TSTInfo_version::Equals (ASN1T_TSP_TSTInfo_version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_TSTInfo_version ("TSTInfo_version", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_MessageImprint (const char* name, 
   ASN1T_TSP_MessageImprint* pValue, ASN1T_TSP_MessageImprint* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".hashAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->hashAlgorithm, &pCmpValue->hashAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".hashedMessage", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->hashedMessage.numocts, 
      pValue->hashedMessage.data, pCmpValue->hashedMessage.numocts, 
      pCmpValue->hashedMessage.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_TSP_MessageImprint::Equals (ASN1T_TSP_MessageImprint* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_MessageImprint ("MessageImprint", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_TimeStampReq (const char* name, 
   ASN1T_TSP_TimeStampReq* pValue, ASN1T_TSP_TimeStampReq* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_TSP_TimeStampReq_version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".messageImprint", 0, 0, 0);
   if (! asn1Compare_TSP_MessageImprint (namebuf, &pValue->messageImprint, &pCmpValue->messageImprint, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".reqPolicy", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.reqPolicyPresent,
   pCmpValue->m.reqPolicyPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.reqPolicyPresent) 
   {
      if (! asn1Compare_TSP_TSAPolicyId (namebuf, &pValue->reqPolicy, &pCmpValue->reqPolicy, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".nonce", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.noncePresent,
   pCmpValue->m.noncePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.noncePresent) 
   {
      if (! asn1Compare_TSP_BIGINTEGER (namebuf, &pValue->nonce, &pCmpValue->nonce, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".certReq", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->certReq, pCmpValue->certReq, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".extensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.extensionsPresent,
   pCmpValue->m.extensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.extensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->extensions, &pCmpValue->extensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_TSP_TimeStampReq::Equals (ASN1T_TSP_TimeStampReq* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_TimeStampReq ("TimeStampReq", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_PKIStatusInfo (const char* name, 
   ASN1T_TSP_PKIStatusInfo* pValue, ASN1T_TSP_PKIStatusInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".status", 0, 0, 0);
   if (! asn1Compare_TSP_PKIStatus (namebuf, &pValue->status, &pCmpValue->status, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".statusString", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.statusStringPresent,
   pCmpValue->m.statusStringPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.statusStringPresent) 
   {
      if (! asn1Compare_CMP_PKIFreeText (namebuf, &pValue->statusString, &pCmpValue->statusString, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".failInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.failInfoPresent,
   pCmpValue->m.failInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.failInfoPresent) 
   {
      if (! asn1Compare_TSP_PKIFailureInfo (namebuf, &pValue->failInfo, &pCmpValue->failInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_TSP_PKIStatusInfo::Equals (ASN1T_TSP_PKIStatusInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_PKIStatusInfo ("PKIStatusInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_TimeStampResp (const char* name, 
   ASN1T_TSP_TimeStampResp* pValue, ASN1T_TSP_TimeStampResp* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".status", 0, 0, 0);
   if (! asn1Compare_TSP_PKIStatusInfo (namebuf, &pValue->status, &pCmpValue->status, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".timeStampToken", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.timeStampTokenPresent,
   pCmpValue->m.timeStampTokenPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.timeStampTokenPresent) 
   {
      if (! asn1Compare_TSP_TimeStampToken (namebuf, &pValue->timeStampToken, &pCmpValue->timeStampToken, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_TSP_TimeStampResp::Equals (ASN1T_TSP_TimeStampResp* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_TimeStampResp ("TimeStampResp", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_Accuracy (const char* name, ASN1T_TSP_Accuracy* pValue, 
   ASN1T_TSP_Accuracy* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".seconds", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.secondsPresent,
   pCmpValue->m.secondsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.secondsPresent) 
   {
      if ( !rtCmpInteger (namebuf, pValue->seconds, pCmpValue->seconds, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".millis", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.millisPresent,
   pCmpValue->m.millisPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.millisPresent) 
   {
      if ( !rtCmpUSInt (namebuf, pValue->millis, pCmpValue->millis, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".micros", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.microsPresent,
   pCmpValue->m.microsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.microsPresent) 
   {
      if ( !rtCmpUSInt (namebuf, pValue->micros, pCmpValue->micros, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_TSP_Accuracy::Equals (ASN1T_TSP_Accuracy* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_Accuracy ("Accuracy", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_TSTInfo (const char* name, ASN1T_TSP_TSTInfo* pValue, 
   ASN1T_TSP_TSTInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_TSP_TSTInfo_version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".policy", 0, 0, 0);
   if (! asn1Compare_TSP_TSAPolicyId (namebuf, &pValue->policy, &pCmpValue->policy, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".messageImprint", 0, 0, 0);
   if (! asn1Compare_TSP_MessageImprint (namebuf, &pValue->messageImprint, &pCmpValue->messageImprint, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".serialNumber", 0, 0, 0);
   if (! asn1Compare_TSP_BIGINTEGER (namebuf, &pValue->serialNumber, &pCmpValue->serialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".genTime", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->genTime, pCmpValue->genTime, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".accuracy", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.accuracyPresent,
   pCmpValue->m.accuracyPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.accuracyPresent) 
   {
      if (! asn1Compare_TSP_Accuracy (namebuf, &pValue->accuracy, &pCmpValue->accuracy, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".ordering", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->ordering, pCmpValue->ordering, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".nonce", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.noncePresent,
   pCmpValue->m.noncePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.noncePresent) 
   {
      if (! asn1Compare_TSP_BIGINTEGER (namebuf, &pValue->nonce, &pCmpValue->nonce, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".tsa", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.tsaPresent,
   pCmpValue->m.tsaPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.tsaPresent) 
   {
      if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->tsa, &pCmpValue->tsa, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".extensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.extensionsPresent,
   pCmpValue->m.extensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.extensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->extensions, &pCmpValue->extensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_TSP_TSTInfo::Equals (ASN1T_TSP_TSTInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_TSTInfo ("TSTInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_TSP_ESYAReqEx (const char* name, 
   ASN1T_TSP_ESYAReqEx* pValue, ASN1T_TSP_ESYAReqEx* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".userid", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->userid, pCmpValue->userid, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".salt", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->salt.numocts, pValue->salt.data, 
      pCmpValue->salt.numocts, pCmpValue->salt.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".iterationCount", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->iterationCount, pCmpValue->iterationCount, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".iv", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->iv.numocts, pValue->iv.data, 
      pCmpValue->iv.numocts, pCmpValue->iv.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedMessageImprint", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->encryptedMessageImprint.numocts, 
      pValue->encryptedMessageImprint.data, 
      pCmpValue->encryptedMessageImprint.numocts, 
      pCmpValue->encryptedMessageImprint.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_TSP_ESYAReqEx::Equals (ASN1T_TSP_ESYAReqEx* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_TSP_ESYAReqEx ("ESYAReqEx", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

