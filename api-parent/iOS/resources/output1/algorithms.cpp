/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "algorithms.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID ALGOS_id_dsa = {
   6,
   { 1, 2, 840, 10040, 4, 1 }
} ;
ASN1OBJID ALGOS_id_dsa_with_sha1 = {
   6,
   { 1, 2, 840, 10040, 4, 3 }
} ;
ASN1OBJID ALGOS_pkcs_1 = {
   6,
   { 1, 2, 840, 113549, 1, 1 }
} ;
ASN1OBJID ALGOS_rsaEncryption = {
   7,
   { 1, 2, 840, 113549, 1, 1, 1 }
} ;
ASN1OBJID ALGOS_md2WithRSAEncryption = {
   7,
   { 1, 2, 840, 113549, 1, 1, 2 }
} ;
ASN1OBJID ALGOS_md5WithRSAEncryption = {
   7,
   { 1, 2, 840, 113549, 1, 1, 4 }
} ;
ASN1OBJID ALGOS_sha1WithRSAEncryption = {
   7,
   { 1, 2, 840, 113549, 1, 1, 5 }
} ;
ASN1OBJID ALGOS_pbe_with_Sha_and_40Bit_RC2_CBC = {
   8,
   { 1, 2, 840, 113549, 1, 12, 1, 6 }
} ;
ASN1OBJID ALGOS_des_EDE3_CBC = {
   6,
   { 1, 2, 840, 113549, 3, 7 }
} ;
ASN1OBJID ALGOS_des_EDE3_ECB = {
   6,
   { 1, 3, 14, 3, 2, 17 }
} ;
ASN1OBJID ALGOS_arc4_Sim_Stream_Cypher = {
   4,
   { 1, 0, 9979, 7 }
} ;
ASN1OBJID ALGOS_dhpublicnumber = {
   6,
   { 1, 2, 840, 10046, 2, 1 }
} ;
ASN1OBJID ALGOS_id_keyExchangeAlgorithm = {
   9,
   { 2, 16, 840, 1, 101, 2, 1, 1, 22 }
} ;
ASN1OBJID ALGOS_ansi_X9_62 = {
   4,
   { 1, 2, 840, 10045 }
} ;
ASN1OBJID ALGOS_id_ecSigType = {
   5,
   { 1, 2, 840, 10045, 4 }
} ;
ASN1OBJID ALGOS_ecdsa_with_SHA1 = {
   6,
   { 1, 2, 840, 10045, 4, 1 }
} ;
ASN1OBJID ALGOS_id_fieldType = {
   5,
   { 1, 2, 840, 10045, 1 }
} ;
ASN1OBJID ALGOS_prime_field = {
   6,
   { 1, 2, 840, 10045, 1, 1 }
} ;
ASN1OBJID ALGOS_characteristic_two_field = {
   6,
   { 1, 2, 840, 10045, 1, 2 }
} ;
ASN1OBJID ALGOS_id_characteristic_two_basis = {
   7,
   { 1, 2, 840, 10045, 1, 2, 3 }
} ;
ASN1OBJID ALGOS_gnBasis = {
   8,
   { 1, 2, 840, 10045, 1, 2, 3, 1 }
} ;
ASN1OBJID ALGOS_tpBasis = {
   8,
   { 1, 2, 840, 10045, 1, 2, 3, 2 }
} ;
ASN1OBJID ALGOS_ppBasis = {
   8,
   { 1, 2, 840, 10045, 1, 2, 3, 3 }
} ;
ASN1OBJID ALGOS_id_publicKeyType = {
   5,
   { 1, 2, 840, 10045, 2 }
} ;
ASN1OBJID ALGOS_id_ecPublicKey = {
   6,
   { 1, 2, 840, 10045, 2, 1 }
} ;
ASN1OBJID ALGOS_ellipticCurve = {
   5,
   { 1, 2, 840, 10045, 3 }
} ;
ASN1OBJID ALGOS_c_TwoCurve = {
   6,
   { 1, 2, 840, 10045, 3, 0 }
} ;
ASN1OBJID ALGOS_primeCurve = {
   6,
   { 1, 2, 840, 10045, 3, 1 }
} ;
ASN1OBJID ALGOS_c2pnb163v1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 1 }
} ;
ASN1OBJID ALGOS_c2pnb163v2 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 2 }
} ;
ASN1OBJID ALGOS_c2pnb163v3 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 3 }
} ;
ASN1OBJID ALGOS_c2pnb176w1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 4 }
} ;
ASN1OBJID ALGOS_c2tnb191v1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 5 }
} ;
ASN1OBJID ALGOS_c2tnb191v2 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 6 }
} ;
ASN1OBJID ALGOS_c2tnb191v3 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 7 }
} ;
ASN1OBJID ALGOS_c2onb191v4 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 8 }
} ;
ASN1OBJID ALGOS_c2onb191v5 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 9 }
} ;
ASN1OBJID ALGOS_c2pnb208w1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 10 }
} ;
ASN1OBJID ALGOS_c2tnb239v1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 11 }
} ;
ASN1OBJID ALGOS_c2tnb239v2 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 12 }
} ;
ASN1OBJID ALGOS_c2tnb239v3 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 13 }
} ;
ASN1OBJID ALGOS_c2onb239v4 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 14 }
} ;
ASN1OBJID ALGOS_c2onb239v5 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 15 }
} ;
ASN1OBJID ALGOS_c2pnb272w1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 16 }
} ;
ASN1OBJID ALGOS_c2pnb304w1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 17 }
} ;
ASN1OBJID ALGOS_c2tnb359v1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 18 }
} ;
ASN1OBJID ALGOS_c2pnb368w1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 19 }
} ;
ASN1OBJID ALGOS_c2tnb431r1 = {
   7,
   { 1, 2, 840, 10045, 3, 0, 20 }
} ;
ASN1OBJID ALGOS_prime192v1 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 1 }
} ;
ASN1OBJID ALGOS_prime192v2 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 2 }
} ;
ASN1OBJID ALGOS_prime192v3 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 3 }
} ;
ASN1OBJID ALGOS_prime239v1 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 4 }
} ;
ASN1OBJID ALGOS_prime239v2 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 5 }
} ;
ASN1OBJID ALGOS_prime239v3 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 6 }
} ;
ASN1OBJID ALGOS_prime256v1 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 7 }
} ;
ASN1OBJID ALGOS_sha_1 = {
   6,
   { 1, 3, 14, 3, 2, 26 }
} ;
ASN1OBJID ALGOS_md5 = {
   6,
   { 1, 2, 840, 113549, 2, 5 }
} ;
ASN1OBJID ALGOS_ripemd_160 = {
   6,
   { 1, 3, 36, 3, 2, 1 }
} ;
ASN1OBJID ALGOS_id_sha224 = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 2, 4 }
} ;
ASN1OBJID ALGOS_id_sha256 = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 2, 1 }
} ;
ASN1OBJID ALGOS_id_sha384 = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 2, 2 }
} ;
ASN1OBJID ALGOS_id_sha512 = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 2, 3 }
} ;
ASN1OBJID ALGOS_sha224WithRSAEncryption = {
   7,
   { 1, 2, 840, 113549, 1, 1, 14 }
} ;
ASN1OBJID ALGOS_sha256WithRSAEncryption = {
   7,
   { 1, 2, 840, 113549, 1, 1, 11 }
} ;
ASN1OBJID ALGOS_sha384WithRSAEncryption = {
   7,
   { 1, 2, 840, 113549, 1, 1, 12 }
} ;
ASN1OBJID ALGOS_sha512WithRSAEncryption = {
   7,
   { 1, 2, 840, 113549, 1, 1, 13 }
} ;
ASN1OBJID ALGOS_id_RSASSA_PSS = {
   7,
   { 1, 2, 840, 113549, 1, 1, 10 }
} ;
ASN1OBJID ALGOS_id_mgf1 = {
   7,
   { 1, 2, 840, 113549, 1, 1, 8 }
} ;
ASN1OBJID ALGOS_ecdsa_with_Sha224 = {
   7,
   { 1, 2, 840, 10045, 4, 3, 1 }
} ;
ASN1OBJID ALGOS_ecdsa_with_Sha256 = {
   7,
   { 1, 2, 840, 10045, 4, 3, 2 }
} ;
ASN1OBJID ALGOS_ecdsa_with_Sha384 = {
   7,
   { 1, 2, 840, 10045, 4, 3, 3 }
} ;
ASN1OBJID ALGOS_ecdsa_with_Sha512 = {
   7,
   { 1, 2, 840, 10045, 4, 3, 4 }
} ;
ASN1OBJID ALGOS_des_ede3_cbc = {
   6,
   { 1, 2, 840, 113549, 3, 7 }
} ;
ASN1OBJID ALGOS_rc2_cbc = {
   6,
   { 1, 2, 840, 113549, 3, 2 }
} ;
ASN1OBJID ALGOS_certicom_arc = {
   3,
   { 1, 3, 132 }
} ;
ASN1OBJID ALGOS_secp192r1 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 1 }
} ;
ASN1OBJID ALGOS_sect163k1 = {
   5,
   { 1, 3, 132, 0, 1 }
} ;
ASN1OBJID ALGOS_sect163r2 = {
   5,
   { 1, 3, 132, 0, 15 }
} ;
ASN1OBJID ALGOS_secp224r1 = {
   5,
   { 1, 3, 132, 0, 33 }
} ;
ASN1OBJID ALGOS_sect233k1 = {
   5,
   { 1, 3, 132, 0, 26 }
} ;
ASN1OBJID ALGOS_sect233r1 = {
   5,
   { 1, 3, 132, 0, 27 }
} ;
ASN1OBJID ALGOS_secp256r1 = {
   7,
   { 1, 2, 840, 10045, 3, 1, 7 }
} ;
ASN1OBJID ALGOS_sect283k1 = {
   5,
   { 1, 3, 132, 0, 16 }
} ;
ASN1OBJID ALGOS_sect283r1 = {
   5,
   { 1, 3, 132, 0, 17 }
} ;
ASN1OBJID ALGOS_secp384r1 = {
   5,
   { 1, 3, 132, 0, 34 }
} ;
ASN1OBJID ALGOS_sect409k1 = {
   5,
   { 1, 3, 132, 0, 36 }
} ;
ASN1OBJID ALGOS_sect409r1 = {
   5,
   { 1, 3, 132, 0, 37 }
} ;
ASN1OBJID ALGOS_secp521r1 = {
   5,
   { 1, 3, 132, 0, 35 }
} ;
ASN1OBJID ALGOS_sect571k1 = {
   5,
   { 1, 3, 132, 0, 38 }
} ;
ASN1OBJID ALGOS_sect571r1 = {
   5,
   { 1, 3, 132, 0, 39 }
} ;
ASN1OBJID ALGOS_secg_scheme = {
   4,
   { 1, 3, 132, 1 }
} ;
ASN1OBJID ALGOS_aes128_keywrap = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 5 }
} ;
ASN1OBJID ALGOS_aes192_keywrap = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 25 }
} ;
ASN1OBJID ALGOS_aes256_keywrap = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 45 }
} ;
ASN1OBJID ALGOS_dhSinglePass_stdDH_sha1kdf_scheme = {
   8,
   { 1, 3, 133, 16, 840, 63, 0, 2 }
} ;
ASN1OBJID ALGOS_dhSinglePass_stdDH_sha224kdf_scheme = {
   6,
   { 1, 3, 132, 1, 11, 0 }
} ;
ASN1OBJID ALGOS_dhSinglePass_stdDH_sha256kdf_scheme = {
   6,
   { 1, 3, 132, 1, 11, 1 }
} ;
ASN1OBJID ALGOS_dhSinglePass_stdDH_sha384kdf_scheme = {
   6,
   { 1, 3, 132, 1, 11, 2 }
} ;
ASN1OBJID ALGOS_dhSinglePass_stdDH_sha512kdf_scheme = {
   6,
   { 1, 3, 132, 1, 11, 3 }
} ;

ASN1T_ALGOS_KEA_Parms_Id* new_ASN1T_ALGOS_KEA_Parms_Id (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_KEA_Parms_Id));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_KEA_Parms_Id;
}

ASN1C_ALGOS_KEA_Parms_Id::ASN1C_ALGOS_KEA_Parms_Id
    (ASN1T_ALGOS_KEA_Parms_Id& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_KEA_Parms_Id::ASN1C_ALGOS_KEA_Parms_Id (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_KEA_Parms_Id& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_KEA_Parms_Id::ASN1C_ALGOS_KEA_Parms_Id (OSRTContext &context
   , ASN1T_ALGOS_KEA_Parms_Id& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_KEA_Parms_Id::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_KEA_Parms_Id (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_KEA_Parms_Id::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ALGOS_KEA_Parms_Id (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_KEA_Parms_Id (ASN1T_ALGOS_KEA_Parms_Id* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_KEA_Parms_Id;
}

void asn1Free_ALGOS_KEA_Parms_Id (OSCTXT *pctxt, 
   ASN1T_ALGOS_KEA_Parms_Id* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_ALGOS_KEA_Parms_Id::MemFree ()
{
   asn1Free_ALGOS_KEA_Parms_Id (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_Prime_p* new_ASN1T_ALGOS_Prime_p (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_Prime_p));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_Prime_p;
}

ASN1C_ALGOS_Prime_p::ASN1C_ALGOS_Prime_p (ASN1T_ALGOS_Prime_p& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_Prime_p::ASN1C_ALGOS_Prime_p (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_Prime_p& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_Prime_p::ASN1C_ALGOS_Prime_p (OSRTContext &context
   , ASN1T_ALGOS_Prime_p& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_Prime_p::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_Prime_p (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_Prime_p::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ALGOS_Prime_p (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_Trinomial* new_ASN1T_ALGOS_Trinomial (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_Trinomial));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_Trinomial;
}

ASN1C_ALGOS_Trinomial::ASN1C_ALGOS_Trinomial (ASN1T_ALGOS_Trinomial& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_Trinomial::ASN1C_ALGOS_Trinomial (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_Trinomial& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_Trinomial::ASN1C_ALGOS_Trinomial (OSRTContext &context
   , ASN1T_ALGOS_Trinomial& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_Trinomial::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_Trinomial (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_Trinomial::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ALGOS_Trinomial (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_FieldElement* new_ASN1T_ALGOS_FieldElement (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_FieldElement));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_FieldElement;
}

ASN1C_ALGOS_FieldElement::ASN1C_ALGOS_FieldElement
    (ASN1T_ALGOS_FieldElement& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_FieldElement::ASN1C_ALGOS_FieldElement (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_FieldElement& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_FieldElement::ASN1C_ALGOS_FieldElement (OSRTContext &context
   , ASN1T_ALGOS_FieldElement& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_FieldElement::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_FieldElement (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_FieldElement::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ALGOS_FieldElement (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_FieldElement (ASN1T_ALGOS_FieldElement* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_FieldElement;
}

void asn1Free_ALGOS_FieldElement (OSCTXT *pctxt, 
   ASN1T_ALGOS_FieldElement* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_ALGOS_FieldElement::MemFree ()
{
   asn1Free_ALGOS_FieldElement (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_ECPoint* new_ASN1T_ALGOS_ECPoint (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_ECPoint));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_ECPoint;
}

ASN1C_ALGOS_ECPoint::ASN1C_ALGOS_ECPoint (ASN1T_ALGOS_ECPoint& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_ECPoint::ASN1C_ALGOS_ECPoint (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_ECPoint& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_ECPoint::ASN1C_ALGOS_ECPoint (OSRTContext &context
   , ASN1T_ALGOS_ECPoint& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_ECPoint::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_ECPoint (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_ECPoint::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ALGOS_ECPoint (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_ECPoint (ASN1T_ALGOS_ECPoint* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_ECPoint;
}

void asn1Free_ALGOS_ECPoint (OSCTXT *pctxt, ASN1T_ALGOS_ECPoint* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_ALGOS_ECPoint::MemFree ()
{
   asn1Free_ALGOS_ECPoint (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_HashAlgorithm* new_ASN1T_ALGOS_HashAlgorithm (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_HashAlgorithm));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_HashAlgorithm;
}

ASN1C_ALGOS_HashAlgorithm::ASN1C_ALGOS_HashAlgorithm
    (ASN1T_ALGOS_HashAlgorithm& data) : ASN1C_EXP_AlgorithmIdentifier (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_HashAlgorithm::ASN1C_ALGOS_HashAlgorithm (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_HashAlgorithm& data) : 
   ASN1C_EXP_AlgorithmIdentifier (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_HashAlgorithm::ASN1C_ALGOS_HashAlgorithm (OSRTContext &context
   , ASN1T_ALGOS_HashAlgorithm& data) : 
   ASN1C_EXP_AlgorithmIdentifier (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_HashAlgorithm::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_HashAlgorithm (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_HashAlgorithm::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_HashAlgorithm;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_HashAlgorithm (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_HashAlgorithm (ASN1T_ALGOS_HashAlgorithm* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_HashAlgorithm;
}

void asn1Free_ALGOS_HashAlgorithm (OSCTXT *pctxt, 
   ASN1T_ALGOS_HashAlgorithm* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, pvalue);
}

void ASN1C_ALGOS_HashAlgorithm::MemFree ()
{
   asn1Free_ALGOS_HashAlgorithm (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_SpecifiedECDomainVersion* 
   new_ASN1T_ALGOS_SpecifiedECDomainVersion (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_SpecifiedECDomainVersion));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_SpecifiedECDomainVersion;
}

ASN1C_ALGOS_SpecifiedECDomainVersion::ASN1C_ALGOS_SpecifiedECDomainVersion
    (ASN1T_ALGOS_SpecifiedECDomainVersion& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_SpecifiedECDomainVersion::ASN1C_ALGOS_SpecifiedECDomainVersion (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_SpecifiedECDomainVersion& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_SpecifiedECDomainVersion::ASN1C_ALGOS_SpecifiedECDomainVersion (
   OSRTContext &context, ASN1T_ALGOS_SpecifiedECDomainVersion& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_SpecifiedECDomainVersion::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_SpecifiedECDomainVersion (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_SpecifiedECDomainVersion::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ALGOS_SpecifiedECDomainVersion (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_ECPVer* new_ASN1T_ALGOS_ECPVer (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_ECPVer));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_ECPVer;
}

ASN1C_ALGOS_ECPVer::ASN1C_ALGOS_ECPVer (ASN1T_ALGOS_ECPVer& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_ECPVer::ASN1C_ALGOS_ECPVer (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_ECPVer& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_ECPVer::ASN1C_ALGOS_ECPVer (OSRTContext &context
   , ASN1T_ALGOS_ECPVer& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_ECPVer::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_ECPVer (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_ECPVer::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ALGOS_ECPVer (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_ECPrivateKey_version* 
   new_ASN1T_ALGOS_ECPrivateKey_version (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_ECPrivateKey_version));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_ECPrivateKey_version;
}

ASN1C_ALGOS_ECPrivateKey_version::ASN1C_ALGOS_ECPrivateKey_version
    (ASN1T_ALGOS_ECPrivateKey_version& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_ECPrivateKey_version::ASN1C_ALGOS_ECPrivateKey_version (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_ECPrivateKey_version& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_ECPrivateKey_version::ASN1C_ALGOS_ECPrivateKey_version (
   OSRTContext &context, ASN1T_ALGOS_ECPrivateKey_version& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ALGOS_ECPrivateKey_version::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_ECPrivateKey_version (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_ECPrivateKey_version::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ALGOS_ECPrivateKey_version (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_Dss_Parms* new_ASN1T_ALGOS_Dss_Parms (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_Dss_Parms));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_Dss_Parms;
}

ASN1C_ALGOS_Dss_Parms::ASN1C_ALGOS_Dss_Parms (ASN1T_ALGOS_Dss_Parms& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_Dss_Parms::ASN1C_ALGOS_Dss_Parms (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_Dss_Parms& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_Dss_Parms::ASN1C_ALGOS_Dss_Parms (OSRTContext &context
   , ASN1T_ALGOS_Dss_Parms& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_Dss_Parms::ASN1T_ALGOS_Dss_Parms ()
{
}

int ASN1C_ALGOS_Dss_Parms::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_Dss_Parms (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_Dss_Parms::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_Dss_Parms (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_DssSigValue* new_ASN1T_ALGOS_DssSigValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_DssSigValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_DssSigValue;
}

ASN1C_ALGOS_DssSigValue::ASN1C_ALGOS_DssSigValue
    (ASN1T_ALGOS_DssSigValue& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_DssSigValue::ASN1C_ALGOS_DssSigValue (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_DssSigValue& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_DssSigValue::ASN1C_ALGOS_DssSigValue (OSRTContext &context
   , ASN1T_ALGOS_DssSigValue& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_DssSigValue::ASN1T_ALGOS_DssSigValue ()
{
}

int ASN1C_ALGOS_DssSigValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_DssSigValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_DssSigValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_DssSigValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_ValidationParms* new_ASN1T_ALGOS_ValidationParms (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_ValidationParms));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_ValidationParms;
}

ASN1C_ALGOS_ValidationParms::ASN1C_ALGOS_ValidationParms
    (ASN1T_ALGOS_ValidationParms& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_ValidationParms::ASN1C_ALGOS_ValidationParms (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_ValidationParms& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_ValidationParms::ASN1C_ALGOS_ValidationParms (OSRTContext &context
   , ASN1T_ALGOS_ValidationParms& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_ValidationParms::ASN1T_ALGOS_ValidationParms ()
{
}

ASN1T_ALGOS_ValidationParms::~ASN1T_ALGOS_ValidationParms ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_ValidationParms (pctxt, this);
   }
}

int ASN1C_ALGOS_ValidationParms::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_ValidationParms (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_ValidationParms::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_ValidationParms;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_ValidationParms (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_ValidationParms (ASN1T_ALGOS_ValidationParms* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_ValidationParms;
}

void asn1Free_ALGOS_ValidationParms (OSCTXT *pctxt, 
   ASN1T_ALGOS_ValidationParms* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->seed.numbits > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->seed.data);
      pvalue->seed.numbits = 0;
      pvalue->seed.data = 0;
   }
}

void ASN1C_ALGOS_ValidationParms::MemFree ()
{
   asn1Free_ALGOS_ValidationParms (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_DomainParameters* 
   new_ASN1T_ALGOS_DomainParameters (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_DomainParameters));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_DomainParameters;
}

ASN1C_ALGOS_DomainParameters::ASN1C_ALGOS_DomainParameters
    (ASN1T_ALGOS_DomainParameters& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_DomainParameters::ASN1C_ALGOS_DomainParameters (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_DomainParameters& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_DomainParameters::ASN1C_ALGOS_DomainParameters (
   OSRTContext &context, ASN1T_ALGOS_DomainParameters& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_DomainParameters::ASN1T_ALGOS_DomainParameters ()
{
   m.jPresent = 0;
   m.validationParmsPresent = 0;
}

ASN1T_ALGOS_DomainParameters::~ASN1T_ALGOS_DomainParameters ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_DomainParameters (pctxt, this);
   }
}

int ASN1C_ALGOS_DomainParameters::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_DomainParameters (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_DomainParameters::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_DomainParameters;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_DomainParameters (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_DomainParameters (ASN1T_ALGOS_DomainParameters* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_DomainParameters;
}

void asn1Free_ALGOS_DomainParameters (OSCTXT *pctxt, 
   ASN1T_ALGOS_DomainParameters* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.validationParmsPresent) {
      asn1Free_ALGOS_ValidationParms (pctxt, &pvalue->validationParms);
   }
}

void ASN1C_ALGOS_DomainParameters::MemFree ()
{
   asn1Free_ALGOS_DomainParameters (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_FieldID* new_ASN1T_ALGOS_FieldID (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_FieldID));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_FieldID;
}

ASN1C_ALGOS_FieldID::ASN1C_ALGOS_FieldID (ASN1T_ALGOS_FieldID& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_FieldID::ASN1C_ALGOS_FieldID (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_FieldID& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_FieldID::ASN1C_ALGOS_FieldID (OSRTContext &context
   , ASN1T_ALGOS_FieldID& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_FieldID::ASN1T_ALGOS_FieldID ()
{
}

ASN1T_ALGOS_FieldID::~ASN1T_ALGOS_FieldID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_FieldID (pctxt, this);
   }
}

int ASN1C_ALGOS_FieldID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_FieldID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_FieldID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_FieldID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_FieldID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_FieldID (ASN1T_ALGOS_FieldID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_FieldID;
}

void asn1Free_ALGOS_FieldID (OSCTXT *pctxt, ASN1T_ALGOS_FieldID* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->parameters.data);
}

void ASN1C_ALGOS_FieldID::MemFree ()
{
   asn1Free_ALGOS_FieldID (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_ECDSASigValue* new_ASN1T_ALGOS_ECDSASigValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_ECDSASigValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_ECDSASigValue;
}

ASN1C_ALGOS_ECDSASigValue::ASN1C_ALGOS_ECDSASigValue
    (ASN1T_ALGOS_ECDSASigValue& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_ECDSASigValue::ASN1C_ALGOS_ECDSASigValue (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_ECDSASigValue& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_ECDSASigValue::ASN1C_ALGOS_ECDSASigValue (OSRTContext &context
   , ASN1T_ALGOS_ECDSASigValue& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_ECDSASigValue::ASN1T_ALGOS_ECDSASigValue ()
{
}

int ASN1C_ALGOS_ECDSASigValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_ECDSASigValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_ECDSASigValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_ECDSASigValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_Characteristic_two* 
   new_ASN1T_ALGOS_Characteristic_two (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_Characteristic_two));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_Characteristic_two;
}

ASN1C_ALGOS_Characteristic_two::ASN1C_ALGOS_Characteristic_two
    (ASN1T_ALGOS_Characteristic_two& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_Characteristic_two::ASN1C_ALGOS_Characteristic_two (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_Characteristic_two& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_Characteristic_two::ASN1C_ALGOS_Characteristic_two (
   OSRTContext &context, ASN1T_ALGOS_Characteristic_two& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_Characteristic_two::ASN1T_ALGOS_Characteristic_two ()
{
}

ASN1T_ALGOS_Characteristic_two::~ASN1T_ALGOS_Characteristic_two ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_Characteristic_two (pctxt, this);
   }
}

int ASN1C_ALGOS_Characteristic_two::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_Characteristic_two (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_Characteristic_two::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_Characteristic_two;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_Characteristic_two (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_Characteristic_two (ASN1T_ALGOS_Characteristic_two* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_Characteristic_two;
}

void asn1Free_ALGOS_Characteristic_two (OSCTXT *pctxt, 
   ASN1T_ALGOS_Characteristic_two* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->parameters.data);
}

void ASN1C_ALGOS_Characteristic_two::MemFree ()
{
   asn1Free_ALGOS_Characteristic_two (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_Pentanomial* new_ASN1T_ALGOS_Pentanomial (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_Pentanomial));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_Pentanomial;
}

ASN1C_ALGOS_Pentanomial::ASN1C_ALGOS_Pentanomial
    (ASN1T_ALGOS_Pentanomial& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_Pentanomial::ASN1C_ALGOS_Pentanomial (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_Pentanomial& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_Pentanomial::ASN1C_ALGOS_Pentanomial (OSRTContext &context
   , ASN1T_ALGOS_Pentanomial& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_Pentanomial::ASN1T_ALGOS_Pentanomial ()
{
}

int ASN1C_ALGOS_Pentanomial::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_Pentanomial (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_Pentanomial::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_Pentanomial (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_ALGOS_Curve* new_ASN1T_ALGOS_Curve (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_Curve));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_Curve;
}

ASN1C_ALGOS_Curve::ASN1C_ALGOS_Curve (ASN1T_ALGOS_Curve& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_Curve::ASN1C_ALGOS_Curve (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_Curve& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_Curve::ASN1C_ALGOS_Curve (OSRTContext &context
   , ASN1T_ALGOS_Curve& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_Curve::ASN1T_ALGOS_Curve ()
{
   m.seedPresent = 0;
}

ASN1T_ALGOS_Curve::~ASN1T_ALGOS_Curve ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_Curve (pctxt, this);
   }
}

int ASN1C_ALGOS_Curve::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_Curve (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_Curve::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_Curve;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_Curve (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_Curve (ASN1T_ALGOS_Curve* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_Curve;
}

void asn1Free_ALGOS_Curve (OSCTXT *pctxt, ASN1T_ALGOS_Curve* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ALGOS_FieldElement (pctxt, &pvalue->a);
   asn1Free_ALGOS_FieldElement (pctxt, &pvalue->b);
   if (pvalue->m.seedPresent) {
      if (pvalue->seed.numbits > 0) {
         rtxMemFreePtr (pctxt, (void*)pvalue->seed.data);
         pvalue->seed.numbits = 0;
         pvalue->seed.data = 0;
      }
   }
}

void ASN1C_ALGOS_Curve::MemFree ()
{
   asn1Free_ALGOS_Curve (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_SpecifiedECDomain* 
   new_ASN1T_ALGOS_SpecifiedECDomain (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_SpecifiedECDomain));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_SpecifiedECDomain;
}

ASN1C_ALGOS_SpecifiedECDomain::ASN1C_ALGOS_SpecifiedECDomain
    (ASN1T_ALGOS_SpecifiedECDomain& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_SpecifiedECDomain::ASN1C_ALGOS_SpecifiedECDomain (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_SpecifiedECDomain& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_SpecifiedECDomain::ASN1C_ALGOS_SpecifiedECDomain (
   OSRTContext &context, ASN1T_ALGOS_SpecifiedECDomain& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_SpecifiedECDomain::ASN1T_ALGOS_SpecifiedECDomain ()
{
   m.cofactorPresent = 0;
   m.hashPresent = 0;
}

ASN1T_ALGOS_SpecifiedECDomain::~ASN1T_ALGOS_SpecifiedECDomain ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_SpecifiedECDomain (pctxt, this);
   }
}

int ASN1C_ALGOS_SpecifiedECDomain::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_SpecifiedECDomain (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_SpecifiedECDomain::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_SpecifiedECDomain;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_SpecifiedECDomain (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_SpecifiedECDomain (ASN1T_ALGOS_SpecifiedECDomain* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_SpecifiedECDomain;
}

void asn1Free_ALGOS_SpecifiedECDomain (OSCTXT *pctxt, 
   ASN1T_ALGOS_SpecifiedECDomain* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ALGOS_FieldID (pctxt, &pvalue->fieldID);
   asn1Free_ALGOS_Curve (pctxt, &pvalue->curve);
   asn1Free_ALGOS_ECPoint (pctxt, &pvalue->base);
   if (pvalue->m.hashPresent) {
      asn1Free_ALGOS_HashAlgorithm (pctxt, &pvalue->hash);
   }
}

void ASN1C_ALGOS_SpecifiedECDomain::MemFree ()
{
   asn1Free_ALGOS_SpecifiedECDomain (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_ECParameters* new_ASN1T_ALGOS_ECParameters (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_ECParameters));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_ECParameters;
}

ASN1C_ALGOS_ECParameters::ASN1C_ALGOS_ECParameters
    (ASN1T_ALGOS_ECParameters& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_ECParameters::ASN1C_ALGOS_ECParameters (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_ECParameters& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_ECParameters::ASN1C_ALGOS_ECParameters (OSRTContext &context
   , ASN1T_ALGOS_ECParameters& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_ECParameters::~ASN1T_ALGOS_ECParameters ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_ECParameters (pctxt, this);
   }
}

int ASN1C_ALGOS_ECParameters::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_ECParameters (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_ECParameters::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_ECParameters;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_ECParameters (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_ECParameters (ASN1T_ALGOS_ECParameters* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_ECParameters;
}

void asn1Free_ALGOS_ECParameters (OSCTXT *pctxt, 
   ASN1T_ALGOS_ECParameters* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         break;

      case 2:
         if (0 != pvalue->u.namedCurve) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.namedCurve);
         }
         break;

      case 3:
         if (0 != pvalue->u.specifiedCurve) {
            asn1Free_ALGOS_SpecifiedECDomain (pctxt, pvalue->u.specifiedCurve);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.specifiedCurve);
         }
         break;

   }
}

void ASN1C_ALGOS_ECParameters::MemFree ()
{
   asn1Free_ALGOS_ECParameters (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_ECPrivateKey* new_ASN1T_ALGOS_ECPrivateKey (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_ECPrivateKey));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_ECPrivateKey;
}

ASN1C_ALGOS_ECPrivateKey::ASN1C_ALGOS_ECPrivateKey
    (ASN1T_ALGOS_ECPrivateKey& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_ECPrivateKey::ASN1C_ALGOS_ECPrivateKey (OSRTMessageBufferIF& msgBuf
   , ASN1T_ALGOS_ECPrivateKey& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_ECPrivateKey::ASN1C_ALGOS_ECPrivateKey (OSRTContext &context
   , ASN1T_ALGOS_ECPrivateKey& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_ECPrivateKey::ASN1T_ALGOS_ECPrivateKey ()
{
   m.parametersPresent = 0;
   m.publicKeyPresent = 0;
}

ASN1T_ALGOS_ECPrivateKey::~ASN1T_ALGOS_ECPrivateKey ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_ECPrivateKey (pctxt, this);
   }
}

int ASN1C_ALGOS_ECPrivateKey::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_ECPrivateKey (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_ECPrivateKey::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_ECPrivateKey;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_ECPrivateKey (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_ECPrivateKey (ASN1T_ALGOS_ECPrivateKey* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_ECPrivateKey;
}

void asn1Free_ALGOS_ECPrivateKey (OSCTXT *pctxt, 
   ASN1T_ALGOS_ECPrivateKey* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->privateKey.numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->privateKey.data);
      pvalue->privateKey.numocts = 0;
      pvalue->privateKey.data = 0;
   }
   if (pvalue->m.parametersPresent) {
      asn1Free_ALGOS_ECParameters (pctxt, &pvalue->parameters);
   }
   if (pvalue->m.publicKeyPresent) {
      if (pvalue->publicKey.numbits > 0) {
         rtxMemFreePtr (pctxt, (void*)pvalue->publicKey.data);
         pvalue->publicKey.numbits = 0;
         pvalue->publicKey.data = 0;
      }
   }
}

void ASN1C_ALGOS_ECPrivateKey::MemFree ()
{
   asn1Free_ALGOS_ECPrivateKey (getCtxtPtr(), &msgData);
}

ASN1T_ALGOS_RSASSA_PSS_params* 
   new_ASN1T_ALGOS_RSASSA_PSS_params (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ALGOS_RSASSA_PSS_params));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ALGOS_RSASSA_PSS_params;
}

ASN1C_ALGOS_RSASSA_PSS_params::ASN1C_ALGOS_RSASSA_PSS_params
    (ASN1T_ALGOS_RSASSA_PSS_params& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ALGOS_RSASSA_PSS_params::ASN1C_ALGOS_RSASSA_PSS_params (
   OSRTMessageBufferIF& msgBuf, ASN1T_ALGOS_RSASSA_PSS_params& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ALGOS_RSASSA_PSS_params::ASN1C_ALGOS_RSASSA_PSS_params (
   OSRTContext &context, ASN1T_ALGOS_RSASSA_PSS_params& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ALGOS_RSASSA_PSS_params::ASN1T_ALGOS_RSASSA_PSS_params ()
{
   m.hashAlgorithmPresent = 0;
   m.maskGenAlgorithmPresent = 0;
   saltLength = 20;
   trailerField = 1;
}

ASN1T_ALGOS_RSASSA_PSS_params::~ASN1T_ALGOS_RSASSA_PSS_params ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ALGOS_RSASSA_PSS_params (pctxt, this);
   }
}

int ASN1C_ALGOS_RSASSA_PSS_params::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ALGOS_RSASSA_PSS_params (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ALGOS_RSASSA_PSS_params::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ALGOS_RSASSA_PSS_params;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ALGOS_RSASSA_PSS_params (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ALGOS_RSASSA_PSS_params (ASN1T_ALGOS_RSASSA_PSS_params* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ALGOS_RSASSA_PSS_params;
}

void asn1Free_ALGOS_RSASSA_PSS_params (OSCTXT *pctxt, 
   ASN1T_ALGOS_RSASSA_PSS_params* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.hashAlgorithmPresent) {
      asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm);
   }
   if (pvalue->m.maskGenAlgorithmPresent) {
      asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->maskGenAlgorithm);
   }
}

void ASN1C_ALGOS_RSASSA_PSS_params::MemFree ()
{
   asn1Free_ALGOS_RSASSA_PSS_params (getCtxtPtr(), &msgData);
}

