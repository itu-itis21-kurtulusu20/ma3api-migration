/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "UsefulDefinitions.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID ds = {
   2,
   { 2, 5 }
} ;
ASN1OBJID module = {
   3,
   { 2, 5, 1 }
} ;
ASN1OBJID serviceElement = {
   3,
   { 2, 5, 2 }
} ;
ASN1OBJID applicationContext = {
   3,
   { 2, 5, 3 }
} ;
ASN1OBJID attributeType = {
   3,
   { 2, 5, 4 }
} ;
ASN1OBJID attributeSyntax = {
   3,
   { 2, 5, 5 }
} ;
ASN1OBJID objectClass = {
   3,
   { 2, 5, 6 }
} ;
ASN1OBJID algorithm = {
   3,
   { 2, 5, 8 }
} ;
ASN1OBJID abstractSyntax = {
   3,
   { 2, 5, 9 }
} ;
ASN1OBJID dsaOperationalAttribute = {
   3,
   { 2, 5, 12 }
} ;
ASN1OBJID matchingRule = {
   3,
   { 2, 5, 13 }
} ;
ASN1OBJID knowledgeMatchingRule = {
   3,
   { 2, 5, 14 }
} ;
ASN1OBJID nameForm = {
   3,
   { 2, 5, 15 }
} ;
ASN1OBJID group = {
   3,
   { 2, 5, 16 }
} ;
ASN1OBJID subentry = {
   3,
   { 2, 5, 17 }
} ;
ASN1OBJID operationalAttributeType = {
   3,
   { 2, 5, 18 }
} ;
ASN1OBJID operationalBinding = {
   3,
   { 2, 5, 19 }
} ;
ASN1OBJID schemaObjectClass = {
   3,
   { 2, 5, 20 }
} ;
ASN1OBJID schemaOperationalAttribute = {
   3,
   { 2, 5, 21 }
} ;
ASN1OBJID administrativeRoles = {
   3,
   { 2, 5, 23 }
} ;
ASN1OBJID accessControlAttribute = {
   3,
   { 2, 5, 24 }
} ;
ASN1OBJID rosObject = {
   3,
   { 2, 5, 25 }
} ;
ASN1OBJID contract = {
   3,
   { 2, 5, 26 }
} ;
ASN1OBJID package_ = {
   3,
   { 2, 5, 27 }
} ;
ASN1OBJID accessControlSchemes = {
   3,
   { 2, 5, 28 }
} ;
ASN1OBJID certificateExtension = {
   3,
   { 2, 5, 29 }
} ;
ASN1OBJID managementObject = {
   3,
   { 2, 5, 30 }
} ;
ASN1OBJID attributeValueContext = {
   3,
   { 2, 5, 31 }
} ;
ASN1OBJID securityExchange = {
   3,
   { 2, 5, 32 }
} ;
ASN1OBJID idmProtocol = {
   3,
   { 2, 5, 33 }
} ;
ASN1OBJID problem = {
   3,
   { 2, 5, 34 }
} ;
ASN1OBJID notification = {
   3,
   { 2, 5, 35 }
} ;
ASN1OBJID matchingRestriction = {
   3,
   { 2, 5, 36 }
} ;
ASN1OBJID controlAttributeType = {
   3,
   { 2, 5, 37 }
} ;
ASN1OBJID usefulDefinitions = {
   5,
   { 2, 5, 1, 0, 3 }
} ;
ASN1OBJID informationFramework = {
   5,
   { 2, 5, 1, 1, 3 }
} ;
ASN1OBJID directoryAbstractService = {
   5,
   { 2, 5, 1, 2, 3 }
} ;
ASN1OBJID distributedOperations = {
   5,
   { 2, 5, 1, 3, 3 }
} ;
ASN1OBJID protocolObjectIdentifiers = {
   5,
   { 2, 5, 1, 4, 3 }
} ;
ASN1OBJID selectedAttributeTypes = {
   5,
   { 2, 5, 1, 5, 3 }
} ;
ASN1OBJID selectedObjectClasses = {
   5,
   { 2, 5, 1, 6, 3 }
} ;
ASN1OBJID authenticationFramework = {
   5,
   { 2, 5, 1, 7, 3 }
} ;
ASN1OBJID algorithmObjectIdentifiers = {
   5,
   { 2, 5, 1, 8, 3 }
} ;
ASN1OBJID directoryObjectIdentifiers = {
   5,
   { 2, 5, 1, 9, 3 }
} ;
ASN1OBJID upperBounds = {
   5,
   { 2, 5, 1, 10, 3 }
} ;
ASN1OBJID dap = {
   5,
   { 2, 5, 1, 11, 3 }
} ;
ASN1OBJID dsp = {
   5,
   { 2, 5, 1, 12, 3 }
} ;
ASN1OBJID distributedDirectoryOIDs = {
   5,
   { 2, 5, 1, 13, 3 }
} ;
ASN1OBJID directoryShadowOIDs = {
   5,
   { 2, 5, 1, 14, 3 }
} ;
ASN1OBJID directoryShadowAbstractService = {
   5,
   { 2, 5, 1, 15, 3 }
} ;
ASN1OBJID disp = {
   5,
   { 2, 5, 1, 16, 3 }
} ;
ASN1OBJID dop = {
   5,
   { 2, 5, 1, 17, 3 }
} ;
ASN1OBJID opBindingManagement = {
   5,
   { 2, 5, 1, 18, 3 }
} ;
ASN1OBJID opBindingOIDs = {
   5,
   { 2, 5, 1, 19, 3 }
} ;
ASN1OBJID hierarchicalOperationalBindings = {
   5,
   { 2, 5, 1, 20, 3 }
} ;
ASN1OBJID dsaOperationalAttributeTypes = {
   5,
   { 2, 5, 1, 22, 3 }
} ;
ASN1OBJID schemaAdministration = {
   5,
   { 2, 5, 1, 23, 3 }
} ;
ASN1OBJID basicAccessControl = {
   5,
   { 2, 5, 1, 24, 3 }
} ;
ASN1OBJID directoryOperationalBindingTypes = {
   5,
   { 2, 5, 1, 25, 3 }
} ;
ASN1OBJID certificateExtensions = {
   5,
   { 2, 5, 1, 26, 0 }
} ;
ASN1OBJID directoryManagement = {
   5,
   { 2, 5, 1, 27, 1 }
} ;
ASN1OBJID enhancedSecurity = {
   5,
   { 2, 5, 1, 28, 1 }
} ;
ASN1OBJID directorySecurityExchanges = {
   5,
   { 2, 5, 1, 29, 1 }
} ;
ASN1OBJID iDMProtocolSpecification = {
   5,
   { 2, 5, 1, 30, 4 }
} ;
ASN1OBJID directoryIDMProtocols = {
   5,
   { 2, 5, 1, 31, 4 }
} ;
ASN1T_ID id_oc = objectClass;
ASN1T_ID id_at = attributeType;
ASN1T_ID id_as = abstractSyntax;
ASN1T_ID id_mr = matchingRule;
ASN1T_ID id_nf = nameForm;
ASN1T_ID id_sc = subentry;
ASN1T_ID id_oa = operationalAttributeType;
ASN1T_ID id_ob = operationalBinding;
ASN1T_ID id_doa = dsaOperationalAttribute;
ASN1T_ID id_kmr = knowledgeMatchingRule;
ASN1T_ID id_soc = schemaObjectClass;
ASN1T_ID id_soa = schemaOperationalAttribute;
ASN1T_ID id_ar = administrativeRoles;
ASN1T_ID id_aca = accessControlAttribute;
ASN1T_ID id_ac = applicationContext;
ASN1T_ID id_rosObject = rosObject;
ASN1T_ID id_contract = contract;
ASN1T_ID id_package = package_;
ASN1T_ID id_acScheme = accessControlSchemes;
ASN1T_ID id_ce = certificateExtension;
ASN1T_ID id_mgt = managementObject;
ASN1T_ID id_idm = idmProtocol;
ASN1T_ID id_avc = attributeValueContext;
ASN1T_ID id_se = securityExchange;
ASN1T_ID id_pr = problem;
ASN1T_ID id_not = notification;
ASN1T_ID id_mre = matchingRestriction;
ASN1T_ID id_cat = controlAttributeType;

ASN1T_ID* new_ASN1T_ID (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ID));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ID;
}

ASN1C_ID::ASN1C_ID (ASN1T_ID& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ID::ASN1C_ID (OSRTMessageBufferIF& msgBuf, ASN1T_ID& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ID::ASN1C_ID (OSRTContext &context, ASN1T_ID& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ID (ASN1T_ID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ID;
}

