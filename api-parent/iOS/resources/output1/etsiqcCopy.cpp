/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "etsiqc.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_ETSIQC_Iso4217CurrencyCode (OSCTXT* pctxt, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pSrcValue, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* numeric */
      case 1:
         pDstValue->u.numeric = pSrcValue->u.numeric;
         break;

      /* alphabetic */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.alphabetic, (char **)&pDstValue->u.alphabetic);
         break;

   }
}

ASN1C_ETSIQC_Iso4217CurrencyCode::ASN1C_ETSIQC_Iso4217CurrencyCode (ASN1C_ETSIQC_Iso4217CurrencyCode& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSIQC_Iso4217CurrencyCode::ASN1T_ETSIQC_Iso4217CurrencyCode (ASN1C_ETSIQC_Iso4217CurrencyCode& original)
{
   original.getCopy (this);
}

ASN1T_ETSIQC_Iso4217CurrencyCode& ASN1C_ETSIQC_Iso4217CurrencyCode::getCopy (ASN1T_ETSIQC_Iso4217CurrencyCode* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSIQC_Iso4217CurrencyCode);
      new (pDstData) ASN1T_ETSIQC_Iso4217CurrencyCode;
   }

   asn1Copy_ETSIQC_Iso4217CurrencyCode (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSIQC_Iso4217CurrencyCode* ASN1C_ETSIQC_Iso4217CurrencyCode::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSIQC_Iso4217CurrencyCode* pDstData = new ASN1T_ETSIQC_Iso4217CurrencyCode;

   asn1Copy_ETSIQC_Iso4217CurrencyCode (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSIQC_MonetaryValue (OSCTXT* pctxt, 
   ASN1T_ETSIQC_MonetaryValue* pSrcValue, ASN1T_ETSIQC_MonetaryValue*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ETSIQC_Iso4217CurrencyCode (pctxt, &pSrcValue->currency, &pDstValue->currency);

   pDstValue->amount = pSrcValue->amount;

   pDstValue->exponent = pSrcValue->exponent;

}

ASN1C_ETSIQC_MonetaryValue::ASN1C_ETSIQC_MonetaryValue (ASN1C_ETSIQC_MonetaryValue& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSIQC_MonetaryValue::ASN1T_ETSIQC_MonetaryValue (ASN1C_ETSIQC_MonetaryValue& original)
{
   original.getCopy (this);
}

ASN1T_ETSIQC_MonetaryValue& ASN1C_ETSIQC_MonetaryValue::getCopy (ASN1T_ETSIQC_MonetaryValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSIQC_MonetaryValue);
      new (pDstData) ASN1T_ETSIQC_MonetaryValue;
   }

   asn1Copy_ETSIQC_MonetaryValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSIQC_MonetaryValue* ASN1C_ETSIQC_MonetaryValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSIQC_MonetaryValue* pDstData = new ASN1T_ETSIQC_MonetaryValue;

   asn1Copy_ETSIQC_MonetaryValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSIQC_QcEuLimitValue (OSCTXT* pctxt, 
   ASN1T_ETSIQC_QcEuLimitValue* pSrcValue, ASN1T_ETSIQC_QcEuLimitValue*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ETSIQC_MonetaryValue (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSIQC_QcEuLimitValue::ASN1C_ETSIQC_QcEuLimitValue (ASN1C_ETSIQC_QcEuLimitValue& original) :
   ASN1C_ETSIQC_MonetaryValue (original)
{
}

ASN1T_ETSIQC_QcEuLimitValue& ASN1C_ETSIQC_QcEuLimitValue::getCopy (ASN1T_ETSIQC_QcEuLimitValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSIQC_QcEuLimitValue);
      new (pDstData) ASN1T_ETSIQC_QcEuLimitValue;
   }

   asn1Copy_ETSIQC_QcEuLimitValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSIQC_QcEuLimitValue* ASN1C_ETSIQC_QcEuLimitValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSIQC_QcEuLimitValue* pDstData = new ASN1T_ETSIQC_QcEuLimitValue;

   asn1Copy_ETSIQC_QcEuLimitValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

