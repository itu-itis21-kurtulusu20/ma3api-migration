/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkcs12.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_PKCS12_KeyBag (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_KeyBag* pvalue)
{
   asn1PrtToStrm_PKCS18_PrivateKeyInfo (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKCS12_KeyBag::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_KeyBag (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_KeyBag::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_PKCS8ShroudedKeyBag (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_PKCS8ShroudedKeyBag* pvalue)
{
   asn1PrtToStrm_PKCS18_EncryptedPrivateKeyInfo (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKCS12_PKCS8ShroudedKeyBag::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_PKCS8ShroudedKeyBag (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_PKCS8ShroudedKeyBag::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12__x509Certificate_Type (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12__x509Certificate_Type* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS12__x509Certificate_Type::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12__x509Certificate_Type (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12__x509Certificate_Type::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12__x509CRL_Type (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12__x509CRL_Type* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS12__x509CRL_Type::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12__x509CRL_Type (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12__x509CRL_Type::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_PFX_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_PFX_version* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 3: rtxStrcat (namebuf, 512, "v3\n");break;
         default:
            rtPrintToStreamUnsigned (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_PKCS12_PFX_version::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_PFX_version (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_PFX_version::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_MacData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_MacData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_DigestInfo (pctxt, "mac", &pvalue->mac);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "macSalt", pvalue->macSalt.numocts, pvalue->macSalt.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "iterations", pvalue->iterations);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS12_MacData::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_MacData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_MacData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_PFX (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_PFX* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS12_PFX_version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_PKCS7_ContentInfo (pctxt, "authSafe", &pvalue->authSafe);

   if (pvalue->m.macDataPresent) {
      asn1PrtToStrm_PKCS12_MacData (pctxt, "macData", &pvalue->macData);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS12_PFX::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_PFX (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_PFX::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_AuthenticatedSafe (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_AuthenticatedSafe* pvalue)
{
   ASN1T_PKCS7_ContentInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS7_ContentInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS7_ContentInfo (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS12_AuthenticatedSafe::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_AuthenticatedSafe (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_AuthenticatedSafe::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_PKCS12Attribute_attrValues (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_PKCS12Attribute_attrValues* pvalue)
{
   ASN1TOpenType* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1TOpenType*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, namebuf,
         pdata0->numocts, pdata0->data);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS12_PKCS12Attribute_attrValues::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_PKCS12Attribute_attrValues (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_PKCS12Attribute_attrValues::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_PKCS12Attribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_PKCS12Attribute* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "attrId", (ASN1OBJID*)&pvalue->attrId);

   asn1PrtToStrm_PKCS12_PKCS12Attribute_attrValues (pctxt, "attrValues", &pvalue->attrValues);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS12_PKCS12Attribute::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_PKCS12Attribute (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_PKCS12Attribute::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12__SetOfPKCS12_PKCS12Attribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pvalue)
{
   ASN1T_PKCS12_PKCS12Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS12_PKCS12Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS12_PKCS12Attribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12__SetOfPKCS12_PKCS12Attribute (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_SafeBag (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_SafeBag* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "bagId", (ASN1OBJID*)&pvalue->bagId);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "bagValue",
      pvalue->bagValue.numocts, pvalue->bagValue.data);

   if (pvalue->m.bagAttributesPresent) {
      asn1PrtToStrm_PKCS12__SetOfPKCS12_PKCS12Attribute (pctxt, "bagAttributes", &pvalue->bagAttributes);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS12_SafeBag::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_SafeBag (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_SafeBag::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_SafeContents (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_SafeContents* pvalue)
{
   ASN1T_PKCS12_SafeBag* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS12_SafeBag*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS12_SafeBag (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS12_SafeContents::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_SafeContents (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_SafeContents::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_CertBag (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_CertBag* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "certId", (ASN1OBJID*)&pvalue->certId);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "certValue",
      pvalue->certValue.numocts, pvalue->certValue.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS12_CertBag::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_CertBag (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_CertBag::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_CRLBag (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_CRLBag* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "crlId", (ASN1OBJID*)&pvalue->crlId);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "crltValue",
      pvalue->crltValue.numocts, pvalue->crltValue.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS12_CRLBag::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_CRLBag (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_CRLBag::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_SecretBag (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_SecretBag* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "secretTypeId", (ASN1OBJID*)&pvalue->secretTypeId);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "secretValue",
      pvalue->secretValue.numocts, pvalue->secretValue.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS12_SecretBag::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_SecretBag (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_SecretBag::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS12_PKCS12PbeParams (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS12_PKCS12PbeParams* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "salt", pvalue->salt.numocts, pvalue->salt.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "iterations", pvalue->iterations);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS12_PKCS12PbeParams::toStream (const char* name)

{
   asn1PrtToStrm_PKCS12_PKCS12PbeParams (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS12_PKCS12PbeParams::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

