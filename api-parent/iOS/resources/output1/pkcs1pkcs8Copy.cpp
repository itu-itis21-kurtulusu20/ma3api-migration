/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "pkcs1pkcs8.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_PKCS18_PrivateKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_PrivateKey* pSrcValue, ASN1T_PKCS18_PrivateKey* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS18_PrivateKey::ASN1C_PKCS18_PrivateKey (ASN1C_PKCS18_PrivateKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS18_PrivateKey& ASN1C_PKCS18_PrivateKey::getCopy (ASN1T_PKCS18_PrivateKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS18_PrivateKey);
      new (pDstData) ASN1T_PKCS18_PrivateKey;
   }

   asn1Copy_PKCS18_PrivateKey (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS18_PrivateKey* ASN1C_PKCS18_PrivateKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS18_PrivateKey* pDstData = new ASN1T_PKCS18_PrivateKey;

   asn1Copy_PKCS18_PrivateKey (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS18_EncryptedData (OSCTXT* pctxt, 
   ASN1T_PKCS18_EncryptedData* pSrcValue, ASN1T_PKCS18_EncryptedData*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS18_EncryptedData::ASN1C_PKCS18_EncryptedData (ASN1C_PKCS18_EncryptedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS18_EncryptedData& ASN1C_PKCS18_EncryptedData::getCopy (ASN1T_PKCS18_EncryptedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS18_EncryptedData);
      new (pDstData) ASN1T_PKCS18_EncryptedData;
   }

   asn1Copy_PKCS18_EncryptedData (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS18_EncryptedData* ASN1C_PKCS18_EncryptedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS18_EncryptedData* pDstData = new ASN1T_PKCS18_EncryptedData;

   asn1Copy_PKCS18_EncryptedData (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS18_PrivateKeyInfo (OSCTXT* pctxt, 
   ASN1T_PKCS18_PrivateKeyInfo* pSrcValue, ASN1T_PKCS18_PrivateKeyInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->privateKeyAlgorithm, &pDstValue->privateKeyAlgorithm);

   asn1Copy_PKCS18_PrivateKey (pctxt, &pSrcValue->privateKey, &pDstValue->privateKey);

   if (pSrcValue->m.attributesPresent) {
      asn1Copy_PKCS10_Attributes (pctxt, &pSrcValue->attributes, &pDstValue->attributes);
   }

}

ASN1C_PKCS18_PrivateKeyInfo::ASN1C_PKCS18_PrivateKeyInfo (ASN1C_PKCS18_PrivateKeyInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS18_PrivateKeyInfo::ASN1T_PKCS18_PrivateKeyInfo (ASN1C_PKCS18_PrivateKeyInfo& original)
{
   original.getCopy (this);
}

ASN1T_PKCS18_PrivateKeyInfo& ASN1C_PKCS18_PrivateKeyInfo::getCopy (ASN1T_PKCS18_PrivateKeyInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS18_PrivateKeyInfo);
      new (pDstData) ASN1T_PKCS18_PrivateKeyInfo;
   }

   asn1Copy_PKCS18_PrivateKeyInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS18_PrivateKeyInfo* ASN1C_PKCS18_PrivateKeyInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS18_PrivateKeyInfo* pDstData = new ASN1T_PKCS18_PrivateKeyInfo;

   asn1Copy_PKCS18_PrivateKeyInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS18_EncryptedPrivateKeyInfo (OSCTXT* pctxt, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pSrcValue, 
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->encryptionAlgorithm, &pDstValue->encryptionAlgorithm);

   asn1Copy_PKCS18_EncryptedData (pctxt, &pSrcValue->encryptedData, &pDstValue->encryptedData);

}

ASN1C_PKCS18_EncryptedPrivateKeyInfo::ASN1C_PKCS18_EncryptedPrivateKeyInfo (ASN1C_PKCS18_EncryptedPrivateKeyInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS18_EncryptedPrivateKeyInfo::ASN1T_PKCS18_EncryptedPrivateKeyInfo (ASN1C_PKCS18_EncryptedPrivateKeyInfo& original)
{
   original.getCopy (this);
}

ASN1T_PKCS18_EncryptedPrivateKeyInfo& ASN1C_PKCS18_EncryptedPrivateKeyInfo::getCopy (ASN1T_PKCS18_EncryptedPrivateKeyInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS18_EncryptedPrivateKeyInfo);
      new (pDstData) ASN1T_PKCS18_EncryptedPrivateKeyInfo;
   }

   asn1Copy_PKCS18_EncryptedPrivateKeyInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS18_EncryptedPrivateKeyInfo* ASN1C_PKCS18_EncryptedPrivateKeyInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS18_EncryptedPrivateKeyInfo* pDstData = new ASN1T_PKCS18_EncryptedPrivateKeyInfo;

   asn1Copy_PKCS18_EncryptedPrivateKeyInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS18_RSAPublicKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_RSAPublicKey* pSrcValue, ASN1T_PKCS18_RSAPublicKey* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->modulus, (char **)&pDstValue->modulus);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->publicExponent, (char **)&pDstValue->publicExponent);

}

ASN1C_PKCS18_RSAPublicKey::ASN1C_PKCS18_RSAPublicKey (ASN1C_PKCS18_RSAPublicKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS18_RSAPublicKey::ASN1T_PKCS18_RSAPublicKey (ASN1C_PKCS18_RSAPublicKey& original)
{
   original.getCopy (this);
}

ASN1T_PKCS18_RSAPublicKey& ASN1C_PKCS18_RSAPublicKey::getCopy (ASN1T_PKCS18_RSAPublicKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS18_RSAPublicKey);
      new (pDstData) ASN1T_PKCS18_RSAPublicKey;
   }

   asn1Copy_PKCS18_RSAPublicKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS18_RSAPublicKey* ASN1C_PKCS18_RSAPublicKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS18_RSAPublicKey* pDstData = new ASN1T_PKCS18_RSAPublicKey;

   asn1Copy_PKCS18_RSAPublicKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS18_RSAPrivateKey (OSCTXT* pctxt, 
   ASN1T_PKCS18_RSAPrivateKey* pSrcValue, ASN1T_PKCS18_RSAPrivateKey*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->version = pSrcValue->version;

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->modulus, (char **)&pDstValue->modulus);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->publicExponent, (char **)&pDstValue->publicExponent);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->privateExponent, (char **)&pDstValue->privateExponent);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->prime1, (char **)&pDstValue->prime1);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->prime2, (char **)&pDstValue->prime2);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->exponent1, (char **)&pDstValue->exponent1);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->exponent2, (char **)&pDstValue->exponent2);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->coefficient, (char **)&pDstValue->coefficient);

}

ASN1C_PKCS18_RSAPrivateKey::ASN1C_PKCS18_RSAPrivateKey (ASN1C_PKCS18_RSAPrivateKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS18_RSAPrivateKey::ASN1T_PKCS18_RSAPrivateKey (ASN1C_PKCS18_RSAPrivateKey& original)
{
   original.getCopy (this);
}

ASN1T_PKCS18_RSAPrivateKey& ASN1C_PKCS18_RSAPrivateKey::getCopy (ASN1T_PKCS18_RSAPrivateKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS18_RSAPrivateKey);
      new (pDstData) ASN1T_PKCS18_RSAPrivateKey;
   }

   asn1Copy_PKCS18_RSAPrivateKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS18_RSAPrivateKey* ASN1C_PKCS18_RSAPrivateKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS18_RSAPrivateKey* pDstData = new ASN1T_PKCS18_RSAPrivateKey;

   asn1Copy_PKCS18_RSAPrivateKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

