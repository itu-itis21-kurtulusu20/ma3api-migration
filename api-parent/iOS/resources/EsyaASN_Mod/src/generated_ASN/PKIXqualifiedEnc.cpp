/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "PKIXqualified.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_PKIXQUAL_DateOfBirth (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_DateOfBirth pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DateOfBirth");

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|24);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_PlaceOfBirth (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_PlaceOfBirth *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PlaceOfBirth");

   ll = asn1E_EXP_DirectoryString (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_Gender (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_Gender pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Gender");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!(nchars == 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_CountryOfCitizenship (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_CountryOfCitizenship pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CountryOfCitizenship");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!(nchars == 2)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_CountryOfResidence (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_CountryOfResidence pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CountryOfResidence");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!(nchars == 2)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_PredefinedBiometricType (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_PredefinedBiometricType *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PredefinedBiometricType");

   if (!((*pvalue == 0 || *pvalue == 1))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)*pvalue);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_uint8 (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_TypeOfBiometricData (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_TypeOfBiometricData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TypeOfBiometricData");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "predefinedBiometricType");

         ll = asn1E_PKIXQUAL_PredefinedBiometricType (pctxt, &pvalue->u.predefinedBiometricType, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "biometricDataOid");

         ll = xe_objid (pctxt, (ASN1OBJID*)pvalue->u.biometricDataOid, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_BiometricData (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_BiometricData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "BiometricData");

   /* encode sourceDataUri */

   if (pvalue->m.sourceDataUriPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "sourceDataUri");

      ll = xe_charstr (pctxt, pvalue->sourceDataUri, ASN1EXPL, TM_UNIV|TM_PRIM|22);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode biometricDataHash */

   RTXCTXTPUSHELEMNAME (pctxt, "biometricDataHash");

   ll = xe_octstr (pctxt, pvalue->biometricDataHash.data, pvalue->biometricDataHash.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode hashAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "hashAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode typeOfBiometricData */

   RTXCTXTPUSHELEMNAME (pctxt, "typeOfBiometricData");

   ll = asn1E_PKIXQUAL_TypeOfBiometricData (pctxt, &pvalue->typeOfBiometricData, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_BiometricSyntax (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_BiometricSyntax *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "BiometricSyntax");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "BiometricData", xx1);

      ll = asn1E_PKIXQUAL_BiometricData (pctxt, ((ASN1T_PKIXQUAL_BiometricData*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_QCStatement (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_QCStatement *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "QCStatement");

   /* encode statementInfo */

   if (pvalue->m.statementInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "statementInfo");

      ll = xe_OpenType (pctxt, pvalue->statementInfo.data, pvalue->statementInfo.numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode statementId */

   RTXCTXTPUSHELEMNAME (pctxt, "statementId");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->statementId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_QCStatements (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_QCStatements *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "QCStatements");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "QCStatement", xx1);

      ll = asn1E_PKIXQUAL_QCStatement (pctxt, ((ASN1T_PKIXQUAL_QCStatement*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_NameRegistrationAuthorities (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_NameRegistrationAuthorities *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "NameRegistrationAuthorities");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "GeneralName", xx1);

      ll = asn1E_IMP_GeneralName (pctxt, ((ASN1T_IMP_GeneralName*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKIXQUAL_SemanticsInformation (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_SemanticsInformation *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SemanticsInformation");

   /* encode nameRegistrationAuthorities */

   if (pvalue->m.nameRegistrationAuthoritiesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "nameRegistrationAuthorities");

      ll = asn1E_PKIXQUAL_NameRegistrationAuthorities (pctxt, &pvalue->nameRegistrationAuthorities, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode semanticsIndentifier */

   if (pvalue->m.semanticsIndentifierPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "semanticsIndentifier");

      ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->semanticsIndentifier, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

