/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "ocsp.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_OCSP_Version (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_Version* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 0: rtxStrcat (namebuf, 512, "v1\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_OCSP_Version::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_Version (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_Version::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_OCSPResponseStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_OCSPResponseStatus* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtxPrintToStream (pctxt, name);
   switch (*pvalue) {
      case 0:
         rtxPrintToStream (pctxt, " = successful\n");
         break;
      case 1:
         rtxPrintToStream (pctxt, " = malformedRequest\n");
         break;
      case 2:
         rtxPrintToStream (pctxt, " = internalError\n");
         break;
      case 3:
         rtxPrintToStream (pctxt, " = tryLater\n");
         break;
      case 5:
         rtxPrintToStream (pctxt, " = sigRequired\n");
         break;
      case 6:
         rtxPrintToStream (pctxt, " = unauthorized\n");
         break;
      default:
         rtxPrintToStream (pctxt," = ???\n");
   }

   return 0;
}

int ASN1C_OCSP_OCSPResponseStatus::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_OCSPResponseStatus (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_OCSPResponseStatus::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_KeyHash (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_KeyHash* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_OCSP_KeyHash::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_KeyHash (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_KeyHash::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_CRLReason (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_CRLReason* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtxPrintToStream (pctxt, name);
   switch (*pvalue) {
      case 0:
         rtxPrintToStream (pctxt, " = unspecified\n");
         break;
      case 1:
         rtxPrintToStream (pctxt, " = keyCompromise\n");
         break;
      case 2:
         rtxPrintToStream (pctxt, " = cACompromise\n");
         break;
      case 3:
         rtxPrintToStream (pctxt, " = affiliationChanged\n");
         break;
      case 4:
         rtxPrintToStream (pctxt, " = superseded\n");
         break;
      case 5:
         rtxPrintToStream (pctxt, " = cessationOfOperation\n");
         break;
      case 6:
         rtxPrintToStream (pctxt, " = certificateHold\n");
         break;
      case 8:
         rtxPrintToStream (pctxt, " = removeFromCRL\n");
         break;
      default:
         rtxPrintToStream (pctxt," = ???\n");
   }

   return 0;
}

int ASN1C_OCSP_CRLReason::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_CRLReason (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_CRLReason::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_CertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_CertID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "hashAlgorithm", &pvalue->hashAlgorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "issuerNameHash", pvalue->issuerNameHash.numocts, pvalue->issuerNameHash.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "issuerKeyHash", pvalue->issuerKeyHash.numocts, pvalue->issuerKeyHash.data);

   asn1PrtToStrm_EXP_CertificateSerialNumber (pctxt, "serialNumber", &pvalue->serialNumber);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_CertID::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_CertID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_CertID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_Request (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_Request* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_OCSP_CertID (pctxt, "reqCert", &pvalue->reqCert);

   if (pvalue->m.singleRequestExtensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "singleRequestExtensions", &pvalue->singleRequestExtensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_Request::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_Request (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_Request::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP__SeqOfOCSP_Request (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP__SeqOfOCSP_Request* pvalue)
{
   ASN1T_OCSP_Request* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_OCSP_Request*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_OCSP_Request (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_OCSP__SeqOfOCSP_Request::toStream (const char* name)

{
   asn1PrtToStrm_OCSP__SeqOfOCSP_Request (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP__SeqOfOCSP_Request::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_TBSRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_TBSRequest* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_OCSP_Version (pctxt, "version", &pvalue->version);

   if (pvalue->m.requestorNamePresent) {
      asn1PrtToStrm_IMP_GeneralName (pctxt, "requestorName", &pvalue->requestorName);
   }

   asn1PrtToStrm_OCSP__SeqOfOCSP_Request (pctxt, "requestList", &pvalue->requestList);

   if (pvalue->m.requestExtensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "requestExtensions", &pvalue->requestExtensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_TBSRequest::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_TBSRequest (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_TBSRequest::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP__SeqOfOCSP_Certificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP__SeqOfOCSP_Certificate* pvalue)
{
   ASN1T_EXP_Certificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_Certificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_Certificate (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_OCSP__SeqOfOCSP_Certificate::toStream (const char* name)

{
   asn1PrtToStrm_OCSP__SeqOfOCSP_Certificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP__SeqOfOCSP_Certificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_Signature (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_Signature* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "signatureAlgorithm", &pvalue->signatureAlgorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, "signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   if (pvalue->m.certsPresent) {
      asn1PrtToStrm_OCSP__SeqOfOCSP_Certificate (pctxt, "certs", &pvalue->certs);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_Signature::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_Signature (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_Signature::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_OCSPRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_OCSPRequest* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_OCSP_TBSRequest (pctxt, "tbsRequest", &pvalue->tbsRequest);

   if (pvalue->m.optionalSignaturePresent) {
      asn1PrtToStrm_OCSP_Signature (pctxt, "optionalSignature", &pvalue->optionalSignature);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_OCSPRequest::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_OCSPRequest (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_OCSPRequest::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_ResponseBytes (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_ResponseBytes* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "responseType", (ASN1OBJID*)&pvalue->responseType);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "response", pvalue->response.numocts, pvalue->response.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_ResponseBytes::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_ResponseBytes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_ResponseBytes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_OCSPResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_OCSPResponse* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_OCSP_OCSPResponseStatus (pctxt, "responseStatus", &pvalue->responseStatus);

   if (pvalue->m.responseBytesPresent) {
      asn1PrtToStrm_OCSP_ResponseBytes (pctxt, "responseBytes", &pvalue->responseBytes);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_OCSPResponse::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_OCSPResponse (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_OCSPResponse::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_ResponderID (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_ResponderID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* byName */
      case 1:
      {
         asn1PrtToStrm_EXP_Name (pctxt, "byName", pvalue->u.byName);
         break;
      }
      /* byKey */
      case 2:
      {
         asn1PrtToStrm_OCSP_KeyHash (pctxt, "byKey", pvalue->u.byKey);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_ResponderID::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_ResponderID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_ResponderID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_RevokedInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_RevokedInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "revocationTime", pvalue->revocationTime);

   if (pvalue->m.revocationReasonPresent) {
      asn1PrtToStrm_OCSP_CRLReason (pctxt, "revocationReason", &pvalue->revocationReason);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_RevokedInfo::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_RevokedInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_RevokedInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_CertStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_CertStatus* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* good */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamNull (pctxt, "good");
         break;
      }
      /* revoked */
      case 2:
      {
         asn1PrtToStrm_OCSP_RevokedInfo (pctxt, "revoked", pvalue->u.revoked);
         break;
      }
      /* unknown */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamNull (pctxt, "unknown");
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_CertStatus::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_CertStatus (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_CertStatus::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_SingleResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_SingleResponse* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_OCSP_CertID (pctxt, "certID", &pvalue->certID);

   asn1PrtToStrm_OCSP_CertStatus (pctxt, "certStatus", &pvalue->certStatus);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "thisUpdate", pvalue->thisUpdate);

   if (pvalue->m.nextUpdatePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "nextUpdate", pvalue->nextUpdate);
   }

   if (pvalue->m.singleExtensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "singleExtensions", &pvalue->singleExtensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_SingleResponse::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_SingleResponse (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_SingleResponse::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP__SeqOfOCSP_SingleResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP__SeqOfOCSP_SingleResponse* pvalue)
{
   ASN1T_OCSP_SingleResponse* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_OCSP_SingleResponse*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_OCSP_SingleResponse (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_OCSP__SeqOfOCSP_SingleResponse::toStream (const char* name)

{
   asn1PrtToStrm_OCSP__SeqOfOCSP_SingleResponse (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP__SeqOfOCSP_SingleResponse::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_ResponseData (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_ResponseData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_OCSP_Version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_OCSP_ResponderID (pctxt, "responderID", &pvalue->responderID);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "producedAt", pvalue->producedAt);

   asn1PrtToStrm_OCSP__SeqOfOCSP_SingleResponse (pctxt, "responses", &pvalue->responses);

   if (pvalue->m.responseExtensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "responseExtensions", &pvalue->responseExtensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_ResponseData::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_ResponseData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_ResponseData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_OCSP_BasicOCSPResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_BasicOCSPResponse* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_OCSP_ResponseData (pctxt, "tbsResponseData", &pvalue->tbsResponseData);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "signatureAlgorithm", &pvalue->signatureAlgorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, "signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   if (pvalue->m.certsPresent) {
      asn1PrtToStrm_OCSP__SeqOfOCSP_Certificate (pctxt, "certs", &pvalue->certs);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_OCSP_BasicOCSPResponse::toStream (const char* name)

{
   asn1PrtToStrm_OCSP_BasicOCSPResponse (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_OCSP_BasicOCSPResponse::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

