/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef ETSI101733_H
#define ETSI101733_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "cms.h"
#include "Explicit.h"
#include "ocsp.h"
#include "pkixtsp.h"
#include "Implicit.h"
#include "attrcert.h"

/**
 * Header file for ASN.1 module etsi101733
 */
/**************************************************************/
/*                                                            */
/*  OtherHashValue                                            */
/*                                                            */
/**************************************************************/
/*
OtherHashValue ::= OCTET STRING
*/
#define TV_ETSI101733_OtherHashValue	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_ETSI101733_OtherHashValue;

class EXTERN ASN1C_ETSI101733_OtherHashValue :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OtherHashValue& msgData;
public:
   ASN1C_ETSI101733_OtherHashValue (ASN1T_ETSI101733_OtherHashValue& data);
   ASN1C_ETSI101733_OtherHashValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherHashValue& data);
   ASN1C_ETSI101733_OtherHashValue (OSRTContext &context
      , ASN1T_ETSI101733_OtherHashValue& data);
   ASN1C_ETSI101733_OtherHashValue (ASN1C_ETSI101733_OtherHashValue& original);
   virtual ~ASN1C_ETSI101733_OtherHashValue () {}
   inline ASN1T_ETSI101733_OtherHashValue& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherHashValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherHashValue");
   int toStream (const char* name = "OtherHashValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherHashValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherHashValue& getCopy (ASN1T_ETSI101733_OtherHashValue* pDstData = 0);
   ASN1T_ETSI101733_OtherHashValue* newCopy ();

   inline ASN1C_ETSI101733_OtherHashValue& operator= (ASN1C_ETSI101733_OtherHashValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OtherHashValue (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherHashValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherHashValue (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHashValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_OtherHashValue 
   (const char* name, const ASN1T_ETSI101733_OtherHashValue* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherHashValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherHashValue* pvalue);

EXTERN ASN1T_ETSI101733_OtherHashValue* 
   new_ASN1T_ETSI101733_OtherHashValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherHashValue (const char* name, 
   ASN1T_ETSI101733_OtherHashValue* pValue, 
   ASN1T_ETSI101733_OtherHashValue* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherHashValue (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHashValue* pSrcValue, ASN1T_ETSI101733_OtherHashValue*
    pDstValue);

EXTERN void asn1Init_ETSI101733_OtherHashValue (
   ASN1T_ETSI101733_OtherHashValue* pvalue);

EXTERN void asn1Free_ETSI101733_OtherHashValue (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherHashValue* pvalue);

/**************************************************************/
/*                                                            */
/*  SignaturePolicyImplied                                    */
/*                                                            */
/**************************************************************/
/*
SignaturePolicyImplied ::= NULL
*/
#define TV_ETSI101733_SignaturePolicyImplied	(TM_UNIV|TM_PRIM|5)

class EXTERN ASN1C_ETSI101733_SignaturePolicyImplied :
public ASN1CType
{
protected:
public:
   ASN1C_ETSI101733_SignaturePolicyImplied ();
   ASN1C_ETSI101733_SignaturePolicyImplied (OSRTMessageBufferIF& msgBuf);
   ASN1C_ETSI101733_SignaturePolicyImplied (OSRTContext &context);
   ASN1C_ETSI101733_SignaturePolicyImplied (ASN1C_ETSI101733_SignaturePolicyImplied& original);
   virtual ~ASN1C_ETSI101733_SignaturePolicyImplied () {}
   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignaturePolicyImplied");
   int toStream (const char* name = "SignaturePolicyImplied");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals ();

   inline ASN1C_ETSI101733_SignaturePolicyImplied& operator= (ASN1C_ETSI101733_SignaturePolicyImplied& srcData) {
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SignaturePolicyImplied_ (OSCTXT* pctxt,
   void *pvalue, ASN1TagType tagging);
#define asn1E_ETSI101733_SignaturePolicyImplied(pctxt, tagging) \
asn1E_ETSI101733_SignaturePolicyImplied_(pctxt, NULL, tagging)

EXTERN int asn1D_ETSI101733_SignaturePolicyImplied_ (OSCTXT* pctxt, 
   void* pvalue, ASN1TagType tagging, int length);
#define asn1D_ETSI101733_SignaturePolicyImplied(pctxt, tagging, length) \
asn1D_ETSI101733_SignaturePolicyImplied_(pctxt, NULL, tagging, length)

EXTERN void asn1Print_ETSI101733_SignaturePolicyImplied_ 
   (const char* name, const void* pvalue);
#define asn1Print_ETSI101733_SignaturePolicyImplied(name) \
asn1Print_ETSI101733_SignaturePolicyImplied_(name, NULL)

EXTERN int asn1PrtToStrm_ETSI101733_SignaturePolicyImplied_ (OSCTXT *pctxt, 
   const char* name, const void* pvalue);
#define asn1PrtToStrm_ETSI101733_SignaturePolicyImplied(pctxt, name) \
asn1PrtToStrm_ETSI101733_SignaturePolicyImplied_(pctxt, name, NULL)

EXTERN OSBOOL asn1Compare_ETSI101733_SignaturePolicyImplied (const char* name);

/**************************************************************/
/*                                                            */
/*  SigPolicyId                                               */
/*                                                            */
/**************************************************************/
/*
SigPolicyId ::= OBJECT IDENTIFIER
*/
#define TV_ETSI101733_SigPolicyId	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_ETSI101733_SigPolicyId;

class EXTERN ASN1C_ETSI101733_SigPolicyId :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_SigPolicyId& msgData;
public:
   ASN1C_ETSI101733_SigPolicyId (ASN1T_ETSI101733_SigPolicyId& data);
   ASN1C_ETSI101733_SigPolicyId (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SigPolicyId& data);
   ASN1C_ETSI101733_SigPolicyId (OSRTContext &context
      , ASN1T_ETSI101733_SigPolicyId& data);
   ASN1C_ETSI101733_SigPolicyId (ASN1C_ETSI101733_SigPolicyId& original);
   virtual ~ASN1C_ETSI101733_SigPolicyId () {}
   inline ASN1T_ETSI101733_SigPolicyId& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SigPolicyId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SigPolicyId");
   int toStream (const char* name = "SigPolicyId");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SigPolicyId* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SigPolicyId& getCopy (ASN1T_ETSI101733_SigPolicyId* pDstData = 0);
   ASN1T_ETSI101733_SigPolicyId* newCopy ();

   inline ASN1C_ETSI101733_SigPolicyId& operator= (ASN1C_ETSI101733_SigPolicyId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SigPolicyId (OSCTXT* pctxt,
   ASN1T_ETSI101733_SigPolicyId *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SigPolicyId (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyId* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SigPolicyId 
   (const char* name, const ASN1T_ETSI101733_SigPolicyId* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SigPolicyId (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SigPolicyId* pvalue);

EXTERN ASN1T_ETSI101733_SigPolicyId* 
   new_ASN1T_ETSI101733_SigPolicyId (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SigPolicyId (const char* name, 
   ASN1T_ETSI101733_SigPolicyId* pValue, 
   ASN1T_ETSI101733_SigPolicyId* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SigPolicyId (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyId* pSrcValue, ASN1T_ETSI101733_SigPolicyId*
    pDstValue);

EXTERN void asn1Init_ETSI101733_SigPolicyId (ASN1T_ETSI101733_SigPolicyId* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherHashAlgAndValue                                      */
/*                                                            */
/**************************************************************/
/*
OtherHashAlgAndValue ::= SEQUENCE {
   hashAlgorithm AlgorithmIdentifier,
   hashValue OtherHashValue
}
*/
#define TV_ETSI101733_OtherHashAlgAndValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_OtherHashAlgAndValue;

struct EXTERN ASN1T_ETSI101733_OtherHashAlgAndValue : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier hashAlgorithm;
   ASN1T_ETSI101733_OtherHashValue hashValue;
   ASN1T_ETSI101733_OtherHashAlgAndValue ();
   ASN1T_ETSI101733_OtherHashAlgAndValue (ASN1C_ETSI101733_OtherHashAlgAndValue& srcData);
   ~ASN1T_ETSI101733_OtherHashAlgAndValue ();
} ;

class EXTERN ASN1C_ETSI101733_OtherHashAlgAndValue :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OtherHashAlgAndValue& msgData;
public:
   ASN1C_ETSI101733_OtherHashAlgAndValue
       (ASN1T_ETSI101733_OtherHashAlgAndValue& data);
   ASN1C_ETSI101733_OtherHashAlgAndValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherHashAlgAndValue& data);
   ASN1C_ETSI101733_OtherHashAlgAndValue (OSRTContext &context
      , ASN1T_ETSI101733_OtherHashAlgAndValue& data);
   ASN1C_ETSI101733_OtherHashAlgAndValue (ASN1C_ETSI101733_OtherHashAlgAndValue& original);
   virtual ~ASN1C_ETSI101733_OtherHashAlgAndValue () {}
   inline ASN1T_ETSI101733_OtherHashAlgAndValue& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherHashAlgAndValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherHashAlgAndValue");
   int toStream (const char* name = "OtherHashAlgAndValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherHashAlgAndValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherHashAlgAndValue& getCopy (ASN1T_ETSI101733_OtherHashAlgAndValue* pDstData = 0);
   ASN1T_ETSI101733_OtherHashAlgAndValue* newCopy ();

   inline ASN1C_ETSI101733_OtherHashAlgAndValue& operator= (ASN1C_ETSI101733_OtherHashAlgAndValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OtherHashAlgAndValue (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherHashAlgAndValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherHashAlgAndValue (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_OtherHashAlgAndValue 
   (const char* name, const ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherHashAlgAndValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue);

EXTERN ASN1T_ETSI101733_OtherHashAlgAndValue* 
   new_ASN1T_ETSI101733_OtherHashAlgAndValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherHashAlgAndValue (const char* name, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pValue, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherHashAlgAndValue (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pSrcValue, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pDstValue);

EXTERN void asn1Init_ETSI101733_OtherHashAlgAndValue (
   ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue);

EXTERN void asn1Free_ETSI101733_OtherHashAlgAndValue (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue);

/**************************************************************/
/*                                                            */
/*  SigPolicyHash                                             */
/*                                                            */
/**************************************************************/
/*
SigPolicyHash ::= OtherHashAlgAndValue
*/
#define TV_ETSI101733_SigPolicyHash	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_SigPolicyHash;

typedef ASN1T_ETSI101733_OtherHashAlgAndValue ASN1T_ETSI101733_SigPolicyHash;

class EXTERN ASN1C_ETSI101733_SigPolicyHash :
   public ASN1C_ETSI101733_OtherHashAlgAndValue
{
protected:
public:
   ASN1C_ETSI101733_SigPolicyHash (ASN1T_ETSI101733_SigPolicyHash& data);
   ASN1C_ETSI101733_SigPolicyHash (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SigPolicyHash& data);
   ASN1C_ETSI101733_SigPolicyHash (OSRTContext &context
      , ASN1T_ETSI101733_SigPolicyHash& data);
   ASN1C_ETSI101733_SigPolicyHash (ASN1C_ETSI101733_SigPolicyHash& original);
   virtual ~ASN1C_ETSI101733_SigPolicyHash () {}
   inline ASN1T_ETSI101733_SigPolicyHash& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SigPolicyHash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SigPolicyHash");
   int toStream (const char* name = "SigPolicyHash");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SigPolicyHash* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SigPolicyHash& getCopy (ASN1T_ETSI101733_SigPolicyHash* pDstData = 0);
   ASN1T_ETSI101733_SigPolicyHash* newCopy ();

   inline ASN1C_ETSI101733_SigPolicyHash& operator= (ASN1C_ETSI101733_SigPolicyHash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SigPolicyHash (OSCTXT* pctxt,
   ASN1T_ETSI101733_SigPolicyHash *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SigPolicyHash (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyHash* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SigPolicyHash 
   (const char* name, const ASN1T_ETSI101733_SigPolicyHash* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SigPolicyHash (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SigPolicyHash* pvalue);

EXTERN ASN1T_ETSI101733_SigPolicyHash* 
   new_ASN1T_ETSI101733_SigPolicyHash (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SigPolicyHash (const char* name, 
   ASN1T_ETSI101733_SigPolicyHash* pValue, 
   ASN1T_ETSI101733_SigPolicyHash* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SigPolicyHash (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyHash* pSrcValue, ASN1T_ETSI101733_SigPolicyHash*
    pDstValue);

EXTERN void asn1Init_ETSI101733_SigPolicyHash (ASN1T_ETSI101733_SigPolicyHash* pvalue);

EXTERN void asn1Free_ETSI101733_SigPolicyHash (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SigPolicyHash* pvalue);

/**************************************************************/
/*                                                            */
/*  SPuri                                                     */
/*                                                            */
/**************************************************************/
/*
SPuri ::= IA5String
*/
#define TV_ETSI101733_SPuri	(TM_UNIV|TM_PRIM|22)

typedef const char* ASN1T_ETSI101733_SPuri;

class EXTERN ASN1C_ETSI101733_SPuri :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_SPuri& msgData;
public:
   ASN1C_ETSI101733_SPuri (ASN1T_ETSI101733_SPuri& data);
   ASN1C_ETSI101733_SPuri (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SPuri& data);
   ASN1C_ETSI101733_SPuri (OSRTContext &context, ASN1T_ETSI101733_SPuri& data);
   ASN1C_ETSI101733_SPuri (ASN1C_ETSI101733_SPuri& original);
   virtual ~ASN1C_ETSI101733_SPuri () {}
   inline ASN1T_ETSI101733_SPuri& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SPuri& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SPuri");
   int toStream (const char* name = "SPuri");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SPuri* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SPuri& getCopy (ASN1T_ETSI101733_SPuri* pDstData = 0);
   ASN1T_ETSI101733_SPuri* newCopy ();

   inline ASN1C_ETSI101733_SPuri& operator= (ASN1C_ETSI101733_SPuri& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SPuri (OSCTXT* pctxt,
   ASN1T_ETSI101733_SPuri pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SPuri (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SPuri* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SPuri 
   (const char* name, const ASN1T_ETSI101733_SPuri pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SPuri (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SPuri pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_SPuri (const char* name, 
   ASN1T_ETSI101733_SPuri* pValue, ASN1T_ETSI101733_SPuri* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SPuri (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SPuri pSrcValue, ASN1T_ETSI101733_SPuri* pDstValue);

EXTERN void asn1Free_ETSI101733_SPuri (OSCTXT *pctxt, ASN1T_ETSI101733_SPuri pvalue);

/**************************************************************/
/*                                                            */
/*  ContentTimestamp                                          */
/*                                                            */
/**************************************************************/
/*
ContentTimestamp ::= TimeStampToken
*/
#define TV_ETSI101733_ContentTimestamp	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_ContentTimestamp;

typedef ASN1T_TSP_TimeStampToken ASN1T_ETSI101733_ContentTimestamp;

class EXTERN ASN1C_ETSI101733_ContentTimestamp :
   public ASN1C_TSP_TimeStampToken
{
protected:
public:
   ASN1C_ETSI101733_ContentTimestamp (ASN1T_ETSI101733_ContentTimestamp& data);
   ASN1C_ETSI101733_ContentTimestamp (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_ContentTimestamp& data);
   ASN1C_ETSI101733_ContentTimestamp (OSRTContext &context
      , ASN1T_ETSI101733_ContentTimestamp& data);
   ASN1C_ETSI101733_ContentTimestamp (ASN1C_ETSI101733_ContentTimestamp& original);
   virtual ~ASN1C_ETSI101733_ContentTimestamp () {}
   inline ASN1T_ETSI101733_ContentTimestamp& getData () { return msgData; }
   inline const ASN1T_ETSI101733_ContentTimestamp& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentTimestamp");
   int toStream (const char* name = "ContentTimestamp");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_ContentTimestamp* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_ContentTimestamp& getCopy (ASN1T_ETSI101733_ContentTimestamp* pDstData = 0);
   ASN1T_ETSI101733_ContentTimestamp* newCopy ();

   inline ASN1C_ETSI101733_ContentTimestamp& operator= (ASN1C_ETSI101733_ContentTimestamp& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_ContentTimestamp (OSCTXT* pctxt,
   ASN1T_ETSI101733_ContentTimestamp *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_ContentTimestamp (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentTimestamp* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_ContentTimestamp 
   (const char* name, const ASN1T_ETSI101733_ContentTimestamp* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_ContentTimestamp (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ContentTimestamp* pvalue);

EXTERN ASN1T_ETSI101733_ContentTimestamp* 
   new_ASN1T_ETSI101733_ContentTimestamp (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_ContentTimestamp (const char* name, 
   ASN1T_ETSI101733_ContentTimestamp* pValue, 
   ASN1T_ETSI101733_ContentTimestamp* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_ContentTimestamp (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentTimestamp* pSrcValue, 
   ASN1T_ETSI101733_ContentTimestamp* pDstValue);

EXTERN void asn1Init_ETSI101733_ContentTimestamp (
   ASN1T_ETSI101733_ContentTimestamp* pvalue);

EXTERN void asn1Free_ETSI101733_ContentTimestamp (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ContentTimestamp* pvalue);

/**************************************************************/
/*                                                            */
/*  SignatureTimeStampToken                                   */
/*                                                            */
/**************************************************************/
/*
SignatureTimeStampToken ::= TimeStampToken
*/
#define TV_ETSI101733_SignatureTimeStampToken	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_SignatureTimeStampToken;

typedef ASN1T_TSP_TimeStampToken ASN1T_ETSI101733_SignatureTimeStampToken;

class EXTERN ASN1C_ETSI101733_SignatureTimeStampToken :
   public ASN1C_TSP_TimeStampToken
{
protected:
public:
   ASN1C_ETSI101733_SignatureTimeStampToken
       (ASN1T_ETSI101733_SignatureTimeStampToken& data);
   ASN1C_ETSI101733_SignatureTimeStampToken (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SignatureTimeStampToken& data);
   ASN1C_ETSI101733_SignatureTimeStampToken (OSRTContext &context
      , ASN1T_ETSI101733_SignatureTimeStampToken& data);
   ASN1C_ETSI101733_SignatureTimeStampToken (ASN1C_ETSI101733_SignatureTimeStampToken& original);
   virtual ~ASN1C_ETSI101733_SignatureTimeStampToken () {}
   inline ASN1T_ETSI101733_SignatureTimeStampToken& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SignatureTimeStampToken& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignatureTimeStampToken");
   int toStream (const char* name = "SignatureTimeStampToken");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SignatureTimeStampToken* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SignatureTimeStampToken& getCopy (ASN1T_ETSI101733_SignatureTimeStampToken* pDstData = 0);
   ASN1T_ETSI101733_SignatureTimeStampToken* newCopy ();

   inline ASN1C_ETSI101733_SignatureTimeStampToken& operator= (ASN1C_ETSI101733_SignatureTimeStampToken& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SignatureTimeStampToken (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignatureTimeStampToken *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SignatureTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_SignatureTimeStampToken 
   (const char* name, const ASN1T_ETSI101733_SignatureTimeStampToken* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SignatureTimeStampToken (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignatureTimeStampToken* pvalue);

EXTERN ASN1T_ETSI101733_SignatureTimeStampToken* 
   new_ASN1T_ETSI101733_SignatureTimeStampToken (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SignatureTimeStampToken (const char* name, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pValue, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SignatureTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pSrcValue, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pDstValue);

EXTERN void asn1Init_ETSI101733_SignatureTimeStampToken (
   ASN1T_ETSI101733_SignatureTimeStampToken* pvalue);

EXTERN void asn1Free_ETSI101733_SignatureTimeStampToken (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pvalue);

/**************************************************************/
/*                                                            */
/*  ESCTimeStampToken                                         */
/*                                                            */
/**************************************************************/
/*
ESCTimeStampToken ::= TimeStampToken
*/
#define TV_ETSI101733_ESCTimeStampToken	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_ESCTimeStampToken;

typedef ASN1T_TSP_TimeStampToken ASN1T_ETSI101733_ESCTimeStampToken;

class EXTERN ASN1C_ETSI101733_ESCTimeStampToken :
   public ASN1C_TSP_TimeStampToken
{
protected:
public:
   ASN1C_ETSI101733_ESCTimeStampToken
       (ASN1T_ETSI101733_ESCTimeStampToken& data);
   ASN1C_ETSI101733_ESCTimeStampToken (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_ESCTimeStampToken& data);
   ASN1C_ETSI101733_ESCTimeStampToken (OSRTContext &context
      , ASN1T_ETSI101733_ESCTimeStampToken& data);
   ASN1C_ETSI101733_ESCTimeStampToken (ASN1C_ETSI101733_ESCTimeStampToken& original);
   virtual ~ASN1C_ETSI101733_ESCTimeStampToken () {}
   inline ASN1T_ETSI101733_ESCTimeStampToken& getData () { return msgData; }
   inline const ASN1T_ETSI101733_ESCTimeStampToken& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ESCTimeStampToken");
   int toStream (const char* name = "ESCTimeStampToken");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_ESCTimeStampToken* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_ESCTimeStampToken& getCopy (ASN1T_ETSI101733_ESCTimeStampToken* pDstData = 0);
   ASN1T_ETSI101733_ESCTimeStampToken* newCopy ();

   inline ASN1C_ETSI101733_ESCTimeStampToken& operator= (ASN1C_ETSI101733_ESCTimeStampToken& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_ESCTimeStampToken (OSCTXT* pctxt,
   ASN1T_ETSI101733_ESCTimeStampToken *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_ESCTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ESCTimeStampToken* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_ESCTimeStampToken 
   (const char* name, const ASN1T_ETSI101733_ESCTimeStampToken* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_ESCTimeStampToken (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ESCTimeStampToken* pvalue);

EXTERN ASN1T_ETSI101733_ESCTimeStampToken* 
   new_ASN1T_ETSI101733_ESCTimeStampToken (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_ESCTimeStampToken (const char* name, 
   ASN1T_ETSI101733_ESCTimeStampToken* pValue, 
   ASN1T_ETSI101733_ESCTimeStampToken* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_ESCTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ESCTimeStampToken* pSrcValue, 
   ASN1T_ETSI101733_ESCTimeStampToken* pDstValue);

EXTERN void asn1Init_ETSI101733_ESCTimeStampToken (
   ASN1T_ETSI101733_ESCTimeStampToken* pvalue);

EXTERN void asn1Free_ETSI101733_ESCTimeStampToken (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ESCTimeStampToken* pvalue);

/**************************************************************/
/*                                                            */
/*  TimestampedCertsCRLs                                      */
/*                                                            */
/**************************************************************/
/*
TimestampedCertsCRLs ::= TimeStampToken
*/
#define TV_ETSI101733_TimestampedCertsCRLs	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_TimestampedCertsCRLs;

typedef ASN1T_TSP_TimeStampToken ASN1T_ETSI101733_TimestampedCertsCRLs;

class EXTERN ASN1C_ETSI101733_TimestampedCertsCRLs :
   public ASN1C_TSP_TimeStampToken
{
protected:
public:
   ASN1C_ETSI101733_TimestampedCertsCRLs
       (ASN1T_ETSI101733_TimestampedCertsCRLs& data);
   ASN1C_ETSI101733_TimestampedCertsCRLs (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_TimestampedCertsCRLs& data);
   ASN1C_ETSI101733_TimestampedCertsCRLs (OSRTContext &context
      , ASN1T_ETSI101733_TimestampedCertsCRLs& data);
   ASN1C_ETSI101733_TimestampedCertsCRLs (ASN1C_ETSI101733_TimestampedCertsCRLs& original);
   virtual ~ASN1C_ETSI101733_TimestampedCertsCRLs () {}
   inline ASN1T_ETSI101733_TimestampedCertsCRLs& getData () { return msgData; }
   inline const ASN1T_ETSI101733_TimestampedCertsCRLs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TimestampedCertsCRLs");
   int toStream (const char* name = "TimestampedCertsCRLs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_TimestampedCertsCRLs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_TimestampedCertsCRLs& getCopy (ASN1T_ETSI101733_TimestampedCertsCRLs* pDstData = 0);
   ASN1T_ETSI101733_TimestampedCertsCRLs* newCopy ();

   inline ASN1C_ETSI101733_TimestampedCertsCRLs& operator= (ASN1C_ETSI101733_TimestampedCertsCRLs& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_TimestampedCertsCRLs (OSCTXT* pctxt,
   ASN1T_ETSI101733_TimestampedCertsCRLs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_TimestampedCertsCRLs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_TimestampedCertsCRLs 
   (const char* name, const ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_TimestampedCertsCRLs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue);

EXTERN ASN1T_ETSI101733_TimestampedCertsCRLs* 
   new_ASN1T_ETSI101733_TimestampedCertsCRLs (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_TimestampedCertsCRLs (const char* name, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pValue, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_TimestampedCertsCRLs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pSrcValue, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pDstValue);

EXTERN void asn1Init_ETSI101733_TimestampedCertsCRLs (
   ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue);

EXTERN void asn1Free_ETSI101733_TimestampedCertsCRLs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue);

/**************************************************************/
/*                                                            */
/*  ArchiveTimeStampToken                                     */
/*                                                            */
/**************************************************************/
/*
ArchiveTimeStampToken ::= TimeStampToken
*/
#define TV_ETSI101733_ArchiveTimeStampToken	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_ArchiveTimeStampToken;

typedef ASN1T_TSP_TimeStampToken ASN1T_ETSI101733_ArchiveTimeStampToken;

class EXTERN ASN1C_ETSI101733_ArchiveTimeStampToken :
   public ASN1C_TSP_TimeStampToken
{
protected:
public:
   ASN1C_ETSI101733_ArchiveTimeStampToken
       (ASN1T_ETSI101733_ArchiveTimeStampToken& data);
   ASN1C_ETSI101733_ArchiveTimeStampToken (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_ArchiveTimeStampToken& data);
   ASN1C_ETSI101733_ArchiveTimeStampToken (OSRTContext &context
      , ASN1T_ETSI101733_ArchiveTimeStampToken& data);
   ASN1C_ETSI101733_ArchiveTimeStampToken (ASN1C_ETSI101733_ArchiveTimeStampToken& original);
   virtual ~ASN1C_ETSI101733_ArchiveTimeStampToken () {}
   inline ASN1T_ETSI101733_ArchiveTimeStampToken& getData () { return msgData; }
   inline const ASN1T_ETSI101733_ArchiveTimeStampToken& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ArchiveTimeStampToken");
   int toStream (const char* name = "ArchiveTimeStampToken");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_ArchiveTimeStampToken* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_ArchiveTimeStampToken& getCopy (ASN1T_ETSI101733_ArchiveTimeStampToken* pDstData = 0);
   ASN1T_ETSI101733_ArchiveTimeStampToken* newCopy ();

   inline ASN1C_ETSI101733_ArchiveTimeStampToken& operator= (ASN1C_ETSI101733_ArchiveTimeStampToken& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_ArchiveTimeStampToken (OSCTXT* pctxt,
   ASN1T_ETSI101733_ArchiveTimeStampToken *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_ArchiveTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_ArchiveTimeStampToken 
   (const char* name, const ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_ArchiveTimeStampToken (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue);

EXTERN ASN1T_ETSI101733_ArchiveTimeStampToken* 
   new_ASN1T_ETSI101733_ArchiveTimeStampToken (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_ArchiveTimeStampToken (const char* name, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pValue, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_ArchiveTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pSrcValue, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pDstValue);

EXTERN void asn1Init_ETSI101733_ArchiveTimeStampToken (
   ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue);

EXTERN void asn1Free_ETSI101733_ArchiveTimeStampToken (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentIdentifier                                         */
/*                                                            */
/**************************************************************/
/*
ContentIdentifier

ContentIdentifier ::= OCTET STRING
*/
#define TV_ETSI101733_ContentIdentifier	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_ETSI101733_ContentIdentifier;

class EXTERN ASN1C_ETSI101733_ContentIdentifier :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_ContentIdentifier& msgData;
public:
   ASN1C_ETSI101733_ContentIdentifier
       (ASN1T_ETSI101733_ContentIdentifier& data);
   ASN1C_ETSI101733_ContentIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_ContentIdentifier& data);
   ASN1C_ETSI101733_ContentIdentifier (OSRTContext &context
      , ASN1T_ETSI101733_ContentIdentifier& data);
   ASN1C_ETSI101733_ContentIdentifier (ASN1C_ETSI101733_ContentIdentifier& original);
   virtual ~ASN1C_ETSI101733_ContentIdentifier () {}
   inline ASN1T_ETSI101733_ContentIdentifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733_ContentIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentIdentifier");
   int toStream (const char* name = "ContentIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_ContentIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_ContentIdentifier& getCopy (ASN1T_ETSI101733_ContentIdentifier* pDstData = 0);
   ASN1T_ETSI101733_ContentIdentifier* newCopy ();

   inline ASN1C_ETSI101733_ContentIdentifier& operator= (ASN1C_ETSI101733_ContentIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_ContentIdentifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_ContentIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_ContentIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_ContentIdentifier 
   (const char* name, const ASN1T_ETSI101733_ContentIdentifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_ContentIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ContentIdentifier* pvalue);

EXTERN ASN1T_ETSI101733_ContentIdentifier* 
   new_ASN1T_ETSI101733_ContentIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_ContentIdentifier (const char* name, 
   ASN1T_ETSI101733_ContentIdentifier* pValue, 
   ASN1T_ETSI101733_ContentIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_ContentIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentIdentifier* pSrcValue, 
   ASN1T_ETSI101733_ContentIdentifier* pDstValue);

EXTERN void asn1Init_ETSI101733_ContentIdentifier (
   ASN1T_ETSI101733_ContentIdentifier* pvalue);

EXTERN void asn1Free_ETSI101733_ContentIdentifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ContentIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CommitmentTypeIdentifier                                  */
/*                                                            */
/**************************************************************/
/*
CommitmentTypeIdentifier ::= OBJECT IDENTIFIER
*/
#define TV_ETSI101733_CommitmentTypeIdentifier	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_ETSI101733_CommitmentTypeIdentifier;

class EXTERN ASN1C_ETSI101733_CommitmentTypeIdentifier :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_CommitmentTypeIdentifier& msgData;
public:
   ASN1C_ETSI101733_CommitmentTypeIdentifier
       (ASN1T_ETSI101733_CommitmentTypeIdentifier& data);
   ASN1C_ETSI101733_CommitmentTypeIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CommitmentTypeIdentifier& data);
   ASN1C_ETSI101733_CommitmentTypeIdentifier (OSRTContext &context
      , ASN1T_ETSI101733_CommitmentTypeIdentifier& data);
   ASN1C_ETSI101733_CommitmentTypeIdentifier (ASN1C_ETSI101733_CommitmentTypeIdentifier& original);
   virtual ~ASN1C_ETSI101733_CommitmentTypeIdentifier () {}
   inline ASN1T_ETSI101733_CommitmentTypeIdentifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CommitmentTypeIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CommitmentTypeIdentifier");
   int toStream (const char* name = "CommitmentTypeIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CommitmentTypeIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CommitmentTypeIdentifier& getCopy (ASN1T_ETSI101733_CommitmentTypeIdentifier* pDstData = 0);
   ASN1T_ETSI101733_CommitmentTypeIdentifier* newCopy ();

   inline ASN1C_ETSI101733_CommitmentTypeIdentifier& operator= (ASN1C_ETSI101733_CommitmentTypeIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_CommitmentTypeIdentifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_CommitmentTypeIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CommitmentTypeIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_CommitmentTypeIdentifier 
   (const char* name, const ASN1T_ETSI101733_CommitmentTypeIdentifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CommitmentTypeIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CommitmentTypeIdentifier* pvalue);

EXTERN ASN1T_ETSI101733_CommitmentTypeIdentifier* 
   new_ASN1T_ETSI101733_CommitmentTypeIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_CommitmentTypeIdentifier (const char* name, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pValue, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CommitmentTypeIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pSrcValue, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pDstValue);

EXTERN void asn1Init_ETSI101733_CommitmentTypeIdentifier (
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CertifiedAttributes                                       */
/*                                                            */
/**************************************************************/
/*
CertifiedAttributes ::= AttributeCertificate
*/
#define TV_ETSI101733_CertifiedAttributes	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CertifiedAttributes;

typedef ASN1T_ATTRCERT_AttributeCertificate ASN1T_ETSI101733_CertifiedAttributes;

class EXTERN ASN1C_ETSI101733_CertifiedAttributes :
   public ASN1C_ATTRCERT_AttributeCertificate
{
protected:
public:
   ASN1C_ETSI101733_CertifiedAttributes
       (ASN1T_ETSI101733_CertifiedAttributes& data);
   ASN1C_ETSI101733_CertifiedAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CertifiedAttributes& data);
   ASN1C_ETSI101733_CertifiedAttributes (OSRTContext &context
      , ASN1T_ETSI101733_CertifiedAttributes& data);
   ASN1C_ETSI101733_CertifiedAttributes (ASN1C_ETSI101733_CertifiedAttributes& original);
   virtual ~ASN1C_ETSI101733_CertifiedAttributes () {}
   inline ASN1T_ETSI101733_CertifiedAttributes& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CertifiedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertifiedAttributes");
   int toStream (const char* name = "CertifiedAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CertifiedAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CertifiedAttributes& getCopy (ASN1T_ETSI101733_CertifiedAttributes* pDstData = 0);
   ASN1T_ETSI101733_CertifiedAttributes* newCopy ();

   inline ASN1C_ETSI101733_CertifiedAttributes& operator= (ASN1C_ETSI101733_CertifiedAttributes& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_CertifiedAttributes (OSCTXT* pctxt,
   ASN1T_ETSI101733_CertifiedAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CertifiedAttributes (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CertifiedAttributes* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_CertifiedAttributes 
   (const char* name, const ASN1T_ETSI101733_CertifiedAttributes* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CertifiedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CertifiedAttributes* pvalue);

EXTERN ASN1T_ETSI101733_CertifiedAttributes* 
   new_ASN1T_ETSI101733_CertifiedAttributes (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_CertifiedAttributes (const char* name, 
   ASN1T_ETSI101733_CertifiedAttributes* pValue, 
   ASN1T_ETSI101733_CertifiedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CertifiedAttributes (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CertifiedAttributes* pSrcValue, 
   ASN1T_ETSI101733_CertifiedAttributes* pDstValue);

EXTERN void asn1Init_ETSI101733_CertifiedAttributes (
   ASN1T_ETSI101733_CertifiedAttributes* pvalue);

EXTERN void asn1Free_ETSI101733_CertifiedAttributes (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CertifiedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherHash                                                 */
/*                                                            */
/**************************************************************/
/*
OtherHash ::= CHOICE {
   sha1Hash OtherHashValue,
   otherHash OtherHashAlgAndValue
}
*/
/* Choice context tags */

#define TVC_ETSI101733_OtherHash_sha1Hash	(TM_UNIV|TM_PRIM|4)
#define TVC_ETSI101733_OtherHash_otherHash	(TM_UNIV|TM_CONS|16)

/* Choice tag constants */

#define T_ETSI101733_OtherHash_sha1Hash 1
#define T_ETSI101733_OtherHash_otherHash 2

class EXTERN ASN1C_ETSI101733_OtherHash;

struct EXTERN ASN1T_ETSI101733_OtherHash : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_ETSI101733_OtherHashValue *sha1Hash;
      /* t = 2 */
      ASN1T_ETSI101733_OtherHashAlgAndValue *otherHash;
   } u;
   ASN1T_ETSI101733_OtherHash () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ETSI101733_OtherHash (ASN1C_ETSI101733_OtherHash& srcData);
   ~ASN1T_ETSI101733_OtherHash ();
} ;

class EXTERN ASN1C_ETSI101733_OtherHash :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OtherHash& msgData;
public:
   ASN1C_ETSI101733_OtherHash (ASN1T_ETSI101733_OtherHash& data);
   ASN1C_ETSI101733_OtherHash (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherHash& data);
   ASN1C_ETSI101733_OtherHash (OSRTContext &context
      , ASN1T_ETSI101733_OtherHash& data);
   ASN1C_ETSI101733_OtherHash (ASN1C_ETSI101733_OtherHash& original);
   virtual ~ASN1C_ETSI101733_OtherHash () {}
   inline ASN1T_ETSI101733_OtherHash& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherHash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherHash");
   int toStream (const char* name = "OtherHash");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherHash* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherHash& getCopy (ASN1T_ETSI101733_OtherHash* pDstData = 0);
   ASN1T_ETSI101733_OtherHash* newCopy ();

   inline ASN1C_ETSI101733_OtherHash& operator= (ASN1C_ETSI101733_OtherHash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OtherHash (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherHash *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherHash (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHash* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_OtherHash 
   (const char* name, const ASN1T_ETSI101733_OtherHash* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherHash (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherHash* pvalue);

EXTERN ASN1T_ETSI101733_OtherHash* 
   new_ASN1T_ETSI101733_OtherHash (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherHash (const char* name, 
   ASN1T_ETSI101733_OtherHash* pValue, ASN1T_ETSI101733_OtherHash* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherHash (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHash* pSrcValue, ASN1T_ETSI101733_OtherHash*
    pDstValue);

EXTERN void asn1Init_ETSI101733_OtherHash (ASN1T_ETSI101733_OtherHash* pvalue);

EXTERN void asn1Free_ETSI101733_OtherHash (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherHash* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherCertID                                               */
/*                                                            */
/**************************************************************/
/*
OtherCertID ::= SEQUENCE {
   otherCertHash OtherHash,
   issuerSerial IssuerSerial OPTIONAL
}
*/
#define TV_ETSI101733_OtherCertID	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_OtherCertID;

struct EXTERN ASN1T_ETSI101733_OtherCertID : public ASN1TPDU {
   struct {
      unsigned issuerSerialPresent : 1;
   } m;
   ASN1T_ETSI101733_OtherHash otherCertHash;
   ASN1T_ATTRCERT_IssuerSerial issuerSerial;
   ASN1T_ETSI101733_OtherCertID ();
   ASN1T_ETSI101733_OtherCertID (ASN1C_ETSI101733_OtherCertID& srcData);
   ~ASN1T_ETSI101733_OtherCertID ();
} ;

class EXTERN ASN1C_ETSI101733_OtherCertID :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OtherCertID& msgData;
public:
   ASN1C_ETSI101733_OtherCertID (ASN1T_ETSI101733_OtherCertID& data);
   ASN1C_ETSI101733_OtherCertID (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherCertID& data);
   ASN1C_ETSI101733_OtherCertID (OSRTContext &context
      , ASN1T_ETSI101733_OtherCertID& data);
   ASN1C_ETSI101733_OtherCertID (ASN1C_ETSI101733_OtherCertID& original);
   virtual ~ASN1C_ETSI101733_OtherCertID () {}
   inline ASN1T_ETSI101733_OtherCertID& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherCertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherCertID");
   int toStream (const char* name = "OtherCertID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherCertID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherCertID& getCopy (ASN1T_ETSI101733_OtherCertID* pDstData = 0);
   ASN1T_ETSI101733_OtherCertID* newCopy ();

   inline ASN1C_ETSI101733_OtherCertID& operator= (ASN1C_ETSI101733_OtherCertID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OtherCertID (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherCertID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherCertID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherCertID* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_OtherCertID 
   (const char* name, const ASN1T_ETSI101733_OtherCertID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherCertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherCertID* pvalue);

EXTERN ASN1T_ETSI101733_OtherCertID* 
   new_ASN1T_ETSI101733_OtherCertID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherCertID (const char* name, 
   ASN1T_ETSI101733_OtherCertID* pValue, 
   ASN1T_ETSI101733_OtherCertID* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherCertID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherCertID* pSrcValue, ASN1T_ETSI101733_OtherCertID*
    pDstValue);

EXTERN void asn1Init_ETSI101733_OtherCertID (ASN1T_ETSI101733_OtherCertID* pvalue);

EXTERN void asn1Free_ETSI101733_OtherCertID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherCertID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733_OtherCertID                              */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID;

/* List of ASN1T_ETSI101733_OtherCertID */
typedef struct EXTERN ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID();
} ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID;

class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& msgData;
public:
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID
       (ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID (ASN1CType& ccobj
      , ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID (OSRTContext &context
      , ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID (ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID& original);
   virtual ~ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID () {}
   inline ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& getData () { return msgData; }
   inline const ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfETSI101733_OtherCertID");
   int toStream (const char* name = "_SeqOfETSI101733_OtherCertID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& getCopy (ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pDstData = 0);
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* newCopy ();

   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID& operator= (ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID& srcData);
   void Append (ASN1T_ETSI101733_OtherCertID* elem);
   ASN1T_ETSI101733_OtherCertID* NewElement ();
   ASN1T_ETSI101733_OtherCertID* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733__SeqOfETSI101733_OtherCertID 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_OtherCertID (const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pDstValue);

EXTERN void asn1Init_ETSI101733__SeqOfETSI101733_OtherCertID (
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue);

EXTERN void asn1Free_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733_PolicyInformation                        */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation;

/* List of ASN1T_IMP_PolicyInformation */
typedef struct EXTERN ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation();
} ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation;

class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& msgData;
public:
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation
       (ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& data);
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& data);
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation (ASN1CType& ccobj
      , ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& data);
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation (OSRTContext &context
      , ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& data);
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation (ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation& original);
   virtual ~ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation () {}
   inline ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& getData () { return msgData; }
   inline const ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfETSI101733_PolicyInformation");
   int toStream (const char* name = "_SeqOfETSI101733_PolicyInformation");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& getCopy (ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pDstData = 0);
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* newCopy ();

   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation& operator= (ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation& srcData);
   void Append (ASN1T_IMP_PolicyInformation* elem);
   ASN1T_IMP_PolicyInformation* NewElement ();
   ASN1T_IMP_PolicyInformation* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733__SeqOfETSI101733_PolicyInformation 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_PolicyInformation (
   const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pDstValue);

EXTERN void asn1Init_ETSI101733__SeqOfETSI101733_PolicyInformation (
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue);

EXTERN void asn1Free_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherSigningCertificate                                   */
/*                                                            */
/**************************************************************/
/*
OtherSigningCertificate ::= SEQUENCE {
   certs SEQUENCE OF OtherCertID,
   policies SEQUENCE OF PolicyInformation OPTIONAL
}
*/
#define TV_ETSI101733_OtherSigningCertificate	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_OtherSigningCertificate;

struct EXTERN ASN1T_ETSI101733_OtherSigningCertificate : public ASN1TPDU {
   struct {
      unsigned policiesPresent : 1;
   } m;
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID certs;
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation policies;
   ASN1T_ETSI101733_OtherSigningCertificate ();
   ASN1T_ETSI101733_OtherSigningCertificate (ASN1C_ETSI101733_OtherSigningCertificate& srcData);
   ~ASN1T_ETSI101733_OtherSigningCertificate ();
} ;

class EXTERN ASN1C_ETSI101733_OtherSigningCertificate :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OtherSigningCertificate& msgData;
public:
   ASN1C_ETSI101733_OtherSigningCertificate
       (ASN1T_ETSI101733_OtherSigningCertificate& data);
   ASN1C_ETSI101733_OtherSigningCertificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherSigningCertificate& data);
   ASN1C_ETSI101733_OtherSigningCertificate (OSRTContext &context
      , ASN1T_ETSI101733_OtherSigningCertificate& data);
   ASN1C_ETSI101733_OtherSigningCertificate (ASN1C_ETSI101733_OtherSigningCertificate& original);
   virtual ~ASN1C_ETSI101733_OtherSigningCertificate () {}
   inline ASN1T_ETSI101733_OtherSigningCertificate& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherSigningCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherSigningCertificate");
   int toStream (const char* name = "OtherSigningCertificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherSigningCertificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherSigningCertificate& getCopy (ASN1T_ETSI101733_OtherSigningCertificate* pDstData = 0);
   ASN1T_ETSI101733_OtherSigningCertificate* newCopy ();

   inline ASN1C_ETSI101733_OtherSigningCertificate& operator= (ASN1C_ETSI101733_OtherSigningCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OtherSigningCertificate (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherSigningCertificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherSigningCertificate (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherSigningCertificate* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_OtherSigningCertificate 
   (const char* name, const ASN1T_ETSI101733_OtherSigningCertificate* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherSigningCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherSigningCertificate* pvalue);

EXTERN ASN1T_ETSI101733_OtherSigningCertificate* 
   new_ASN1T_ETSI101733_OtherSigningCertificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherSigningCertificate (const char* name, 
   ASN1T_ETSI101733_OtherSigningCertificate* pValue, 
   ASN1T_ETSI101733_OtherSigningCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherSigningCertificate (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherSigningCertificate* pSrcValue, 
   ASN1T_ETSI101733_OtherSigningCertificate* pDstValue);

EXTERN void asn1Init_ETSI101733_OtherSigningCertificate (
   ASN1T_ETSI101733_OtherSigningCertificate* pvalue);

EXTERN void asn1Free_ETSI101733_OtherSigningCertificate (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherSigningCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  SigPolicyQualifierInfo                                    */
/*                                                            */
/**************************************************************/
/*
SigPolicyQualifierInfo ::= SEQUENCE {
   sigPolicyQualifierId SIG-POLICY-QUALIFIER.&id ({SupportedSigPolicyQualifiers}),
   qualifier SIG-POLICY-QUALIFIER.&Qualifier ({SupportedSigPolicyQualifiers}{@sigPolicyQualifierId}) OPTIONAL
}
*/
#define TV_ETSI101733_SigPolicyQualifierInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_SigPolicyQualifierInfo;

struct EXTERN ASN1T_ETSI101733_SigPolicyQualifierInfo : public ASN1TPDU {
   struct {
      unsigned qualifierPresent : 1;
   } m;
   ASN1TObjId sigPolicyQualifierId;
   ASN1TOpenType qualifier;
   ASN1T_ETSI101733_SigPolicyQualifierInfo ();
   ASN1T_ETSI101733_SigPolicyQualifierInfo (ASN1C_ETSI101733_SigPolicyQualifierInfo& srcData);
   ~ASN1T_ETSI101733_SigPolicyQualifierInfo ();
} ;

class EXTERN ASN1C_ETSI101733_SigPolicyQualifierInfo :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_SigPolicyQualifierInfo& msgData;
public:
   ASN1C_ETSI101733_SigPolicyQualifierInfo
       (ASN1T_ETSI101733_SigPolicyQualifierInfo& data);
   ASN1C_ETSI101733_SigPolicyQualifierInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SigPolicyQualifierInfo& data);
   ASN1C_ETSI101733_SigPolicyQualifierInfo (OSRTContext &context
      , ASN1T_ETSI101733_SigPolicyQualifierInfo& data);
   ASN1C_ETSI101733_SigPolicyQualifierInfo (ASN1C_ETSI101733_SigPolicyQualifierInfo& original);
   virtual ~ASN1C_ETSI101733_SigPolicyQualifierInfo () {}
   inline ASN1T_ETSI101733_SigPolicyQualifierInfo& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SigPolicyQualifierInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SigPolicyQualifierInfo");
   int toStream (const char* name = "SigPolicyQualifierInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SigPolicyQualifierInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SigPolicyQualifierInfo& getCopy (ASN1T_ETSI101733_SigPolicyQualifierInfo* pDstData = 0);
   ASN1T_ETSI101733_SigPolicyQualifierInfo* newCopy ();

   inline ASN1C_ETSI101733_SigPolicyQualifierInfo& operator= (ASN1C_ETSI101733_SigPolicyQualifierInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SigPolicyQualifierInfo (OSCTXT* pctxt,
   ASN1T_ETSI101733_SigPolicyQualifierInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SigPolicyQualifierInfo (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_SigPolicyQualifierInfo 
   (const char* name, const ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SigPolicyQualifierInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue);

EXTERN ASN1T_ETSI101733_SigPolicyQualifierInfo* 
   new_ASN1T_ETSI101733_SigPolicyQualifierInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SigPolicyQualifierInfo (const char* name, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pValue, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SigPolicyQualifierInfo (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pSrcValue, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pDstValue);

EXTERN void asn1Init_ETSI101733_SigPolicyQualifierInfo (
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue);

EXTERN void asn1Free_ETSI101733_SigPolicyQualifierInfo (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  SignaturePolicyId_sigPolicyQualifiers                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignaturePolicyId'
*/
class EXTERN ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers;

/* List of ASN1T_ETSI101733_SigPolicyQualifierInfo */
typedef struct EXTERN ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers();
} ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers;

class EXTERN ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& msgData;
public:
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers
       (ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& data);
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& data);
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (ASN1CType& ccobj
      , ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& data);
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSRTContext &context
      , ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& data);
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& original);
   virtual ~ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers () {}
   inline ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignaturePolicyId_sigPolicyQualifiers");
   int toStream (const char* name = "SignaturePolicyId_sigPolicyQualifiers");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& getCopy (ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pDstData = 0);
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* newCopy ();

   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& operator= (ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& srcData);
   void Append (ASN1T_ETSI101733_SigPolicyQualifierInfo* elem);
   ASN1T_ETSI101733_SigPolicyQualifierInfo* NewElement ();
   ASN1T_ETSI101733_SigPolicyQualifierInfo* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (
   OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SignaturePolicyId_sigPolicyQualifiers 
   (const char* name, const ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (
   const char* name, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pValue, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pSrcValue, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pDstValue);

EXTERN void asn1Init_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue);

EXTERN void asn1Free_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue);

/**************************************************************/
/*                                                            */
/*  SignaturePolicyId                                         */
/*                                                            */
/**************************************************************/
/*
SignaturePolicyId ::= SEQUENCE {
   sigPolicyId SigPolicyId,
   sigPolicyHash SigPolicyHash,
   sigPolicyQualifiers SEQUENCE (SIZE (1..MAX)) OF SigPolicyQualifierInfo OPTIONAL
}
*/
#define TV_ETSI101733_SignaturePolicyId	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_SignaturePolicyId;

struct EXTERN ASN1T_ETSI101733_SignaturePolicyId : public ASN1TPDU {
   struct {
      unsigned sigPolicyQualifiersPresent : 1;
   } m;
   ASN1T_ETSI101733_SigPolicyId sigPolicyId;
   ASN1T_ETSI101733_SigPolicyHash sigPolicyHash;
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers sigPolicyQualifiers;
   ASN1T_ETSI101733_SignaturePolicyId ();
   ASN1T_ETSI101733_SignaturePolicyId (ASN1C_ETSI101733_SignaturePolicyId& srcData);
   ~ASN1T_ETSI101733_SignaturePolicyId ();
} ;

class EXTERN ASN1C_ETSI101733_SignaturePolicyId :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_SignaturePolicyId& msgData;
public:
   ASN1C_ETSI101733_SignaturePolicyId
       (ASN1T_ETSI101733_SignaturePolicyId& data);
   ASN1C_ETSI101733_SignaturePolicyId (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SignaturePolicyId& data);
   ASN1C_ETSI101733_SignaturePolicyId (OSRTContext &context
      , ASN1T_ETSI101733_SignaturePolicyId& data);
   ASN1C_ETSI101733_SignaturePolicyId (ASN1C_ETSI101733_SignaturePolicyId& original);
   virtual ~ASN1C_ETSI101733_SignaturePolicyId () {}
   inline ASN1T_ETSI101733_SignaturePolicyId& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SignaturePolicyId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignaturePolicyId");
   int toStream (const char* name = "SignaturePolicyId");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SignaturePolicyId* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SignaturePolicyId& getCopy (ASN1T_ETSI101733_SignaturePolicyId* pDstData = 0);
   ASN1T_ETSI101733_SignaturePolicyId* newCopy ();

   inline ASN1C_ETSI101733_SignaturePolicyId& operator= (ASN1C_ETSI101733_SignaturePolicyId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SignaturePolicyId (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignaturePolicyId *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SignaturePolicyId (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SignaturePolicyId 
   (const char* name, const ASN1T_ETSI101733_SignaturePolicyId* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SignaturePolicyId (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignaturePolicyId* pvalue);

EXTERN ASN1T_ETSI101733_SignaturePolicyId* 
   new_ASN1T_ETSI101733_SignaturePolicyId (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SignaturePolicyId (const char* name, 
   ASN1T_ETSI101733_SignaturePolicyId* pValue, 
   ASN1T_ETSI101733_SignaturePolicyId* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SignaturePolicyId (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId* pSrcValue, 
   ASN1T_ETSI101733_SignaturePolicyId* pDstValue);

EXTERN void asn1Init_ETSI101733_SignaturePolicyId (
   ASN1T_ETSI101733_SignaturePolicyId* pvalue);

EXTERN void asn1Free_ETSI101733_SignaturePolicyId (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId* pvalue);

/**************************************************************/
/*                                                            */
/*  SignaturePolicy                                           */
/*                                                            */
/**************************************************************/
/*
SignaturePolicy ::= CHOICE {
   signaturePolicyImplied SignaturePolicyImplied,
   signaturePolicyId SignaturePolicyId
}
*/
/* Choice context tags */

#define TVC_ETSI101733_SignaturePolicy_signaturePolicyImplied	(TM_UNIV|TM_PRIM|5)
#define TVC_ETSI101733_SignaturePolicy_signaturePolicyId	(TM_UNIV|TM_CONS|16)

/* Choice tag constants */

#define T_ETSI101733_SignaturePolicy_signaturePolicyImplied 1
#define T_ETSI101733_SignaturePolicy_signaturePolicyId 2

class EXTERN ASN1C_ETSI101733_SignaturePolicy;

struct EXTERN ASN1T_ETSI101733_SignaturePolicy : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      /* t = 2 */
      ASN1T_ETSI101733_SignaturePolicyId *signaturePolicyId;
   } u;
   ASN1T_ETSI101733_SignaturePolicy () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ETSI101733_SignaturePolicy (ASN1C_ETSI101733_SignaturePolicy& srcData);
   ~ASN1T_ETSI101733_SignaturePolicy ();
} ;

class EXTERN ASN1C_ETSI101733_SignaturePolicy :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_SignaturePolicy& msgData;
public:
   ASN1C_ETSI101733_SignaturePolicy (ASN1T_ETSI101733_SignaturePolicy& data);
   ASN1C_ETSI101733_SignaturePolicy (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SignaturePolicy& data);
   ASN1C_ETSI101733_SignaturePolicy (OSRTContext &context
      , ASN1T_ETSI101733_SignaturePolicy& data);
   ASN1C_ETSI101733_SignaturePolicy (ASN1C_ETSI101733_SignaturePolicy& original);
   virtual ~ASN1C_ETSI101733_SignaturePolicy () {}
   inline ASN1T_ETSI101733_SignaturePolicy& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SignaturePolicy& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignaturePolicy");
   int toStream (const char* name = "SignaturePolicy");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SignaturePolicy* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SignaturePolicy& getCopy (ASN1T_ETSI101733_SignaturePolicy* pDstData = 0);
   ASN1T_ETSI101733_SignaturePolicy* newCopy ();

   inline ASN1C_ETSI101733_SignaturePolicy& operator= (ASN1C_ETSI101733_SignaturePolicy& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SignaturePolicy (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignaturePolicy *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SignaturePolicy (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicy* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SignaturePolicy 
   (const char* name, const ASN1T_ETSI101733_SignaturePolicy* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SignaturePolicy (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignaturePolicy* pvalue);

EXTERN ASN1T_ETSI101733_SignaturePolicy* 
   new_ASN1T_ETSI101733_SignaturePolicy (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SignaturePolicy (const char* name, 
   ASN1T_ETSI101733_SignaturePolicy* pValue, 
   ASN1T_ETSI101733_SignaturePolicy* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SignaturePolicy (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicy* pSrcValue, 
   ASN1T_ETSI101733_SignaturePolicy* pDstValue);

EXTERN void asn1Init_ETSI101733_SignaturePolicy (
   ASN1T_ETSI101733_SignaturePolicy* pvalue);

EXTERN void asn1Free_ETSI101733_SignaturePolicy (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignaturePolicy* pvalue);

/**************************************************************/
/*                                                            */
/*  DisplayText                                               */
/*                                                            */
/**************************************************************/
/*
DisplayText ::= CHOICE {
   utf8String UTF8String (SIZE (1..200)),
   visibleString VisibleString (SIZE (1..200)),
   bmpString BMPString (SIZE (1..200))
}
*/
/* Choice context tags */

#define TVC_ETSI101733_DisplayText_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_ETSI101733_DisplayText_visibleString	(TM_UNIV|TM_PRIM|26)
#define TVC_ETSI101733_DisplayText_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_ETSI101733_DisplayText_utf8String 1
#define T_ETSI101733_DisplayText_visibleString 2
#define T_ETSI101733_DisplayText_bmpString 3

class EXTERN ASN1C_ETSI101733_DisplayText;

struct EXTERN ASN1T_ETSI101733_DisplayText : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* visibleString;
      /* t = 3 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_ETSI101733_DisplayText () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ETSI101733_DisplayText (ASN1C_ETSI101733_DisplayText& srcData);
   ~ASN1T_ETSI101733_DisplayText ();
} ;

class EXTERN ASN1C_ETSI101733_DisplayText :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_DisplayText& msgData;
public:
   ASN1C_ETSI101733_DisplayText (ASN1T_ETSI101733_DisplayText& data);
   ASN1C_ETSI101733_DisplayText (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_DisplayText& data);
   ASN1C_ETSI101733_DisplayText (OSRTContext &context
      , ASN1T_ETSI101733_DisplayText& data);
   ASN1C_ETSI101733_DisplayText (ASN1C_ETSI101733_DisplayText& original);
   virtual ~ASN1C_ETSI101733_DisplayText () {}
   inline ASN1T_ETSI101733_DisplayText& getData () { return msgData; }
   inline const ASN1T_ETSI101733_DisplayText& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DisplayText");
   int toStream (const char* name = "DisplayText");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_DisplayText* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_DisplayText& getCopy (ASN1T_ETSI101733_DisplayText* pDstData = 0);
   ASN1T_ETSI101733_DisplayText* newCopy ();

   inline ASN1C_ETSI101733_DisplayText& operator= (ASN1C_ETSI101733_DisplayText& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_DisplayText (OSCTXT* pctxt,
   ASN1T_ETSI101733_DisplayText *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_DisplayText (OSCTXT* pctxt, 
   ASN1T_ETSI101733_DisplayText* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_DisplayText 
   (const char* name, const ASN1T_ETSI101733_DisplayText* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_DisplayText (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_DisplayText* pvalue);

EXTERN ASN1T_ETSI101733_DisplayText* 
   new_ASN1T_ETSI101733_DisplayText (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_DisplayText (const char* name, 
   ASN1T_ETSI101733_DisplayText* pValue, 
   ASN1T_ETSI101733_DisplayText* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_DisplayText (OSCTXT* pctxt, 
   ASN1T_ETSI101733_DisplayText* pSrcValue, ASN1T_ETSI101733_DisplayText*
    pDstValue);

EXTERN void asn1Init_ETSI101733_DisplayText (ASN1T_ETSI101733_DisplayText* pvalue);

EXTERN void asn1Free_ETSI101733_DisplayText (OSCTXT *pctxt, 
   ASN1T_ETSI101733_DisplayText* pvalue);

/**************************************************************/
/*                                                            */
/*  NoticeReference_noticeNumbers                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NoticeReference'
*/
class EXTERN ASN1C_ETSI101733_NoticeReference_noticeNumbers;

/* List of OSINT32 */
typedef struct EXTERN ASN1T_ETSI101733_NoticeReference_noticeNumbers : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_NoticeReference_noticeNumbers();
} ASN1T_ETSI101733_NoticeReference_noticeNumbers;

class EXTERN ASN1C_ETSI101733_NoticeReference_noticeNumbers :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_NoticeReference_noticeNumbers& msgData;
public:
   ASN1C_ETSI101733_NoticeReference_noticeNumbers
       (ASN1T_ETSI101733_NoticeReference_noticeNumbers& data);
   ASN1C_ETSI101733_NoticeReference_noticeNumbers (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_NoticeReference_noticeNumbers& data);
   ASN1C_ETSI101733_NoticeReference_noticeNumbers (ASN1CType& ccobj
      , ASN1T_ETSI101733_NoticeReference_noticeNumbers& data);
   ASN1C_ETSI101733_NoticeReference_noticeNumbers (OSRTContext &context
      , ASN1T_ETSI101733_NoticeReference_noticeNumbers& data);
   ASN1C_ETSI101733_NoticeReference_noticeNumbers (ASN1C_ETSI101733_NoticeReference_noticeNumbers& original);
   virtual ~ASN1C_ETSI101733_NoticeReference_noticeNumbers () {}
   inline ASN1T_ETSI101733_NoticeReference_noticeNumbers& getData () { return msgData; }
   inline const ASN1T_ETSI101733_NoticeReference_noticeNumbers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NoticeReference_noticeNumbers");
   int toStream (const char* name = "NoticeReference_noticeNumbers");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_NoticeReference_noticeNumbers* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_NoticeReference_noticeNumbers& getCopy (ASN1T_ETSI101733_NoticeReference_noticeNumbers* pDstData = 0);
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* newCopy ();

   ASN1C_ETSI101733_NoticeReference_noticeNumbers& operator= (ASN1C_ETSI101733_NoticeReference_noticeNumbers& srcData);
   void Append (OSINT32* elem);
   OSINT32* NewElement ();
   OSINT32* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_NoticeReference_noticeNumbers (OSCTXT* pctxt,
   ASN1T_ETSI101733_NoticeReference_noticeNumbers *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_NoticeReference_noticeNumbers (OSCTXT* pctxt, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_NoticeReference_noticeNumbers 
   (const char* name, const ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_NoticeReference_noticeNumbers (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_NoticeReference_noticeNumbers (const char* name, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pValue, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_NoticeReference_noticeNumbers (OSCTXT* pctxt, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pSrcValue, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pDstValue);

EXTERN void asn1Init_ETSI101733_NoticeReference_noticeNumbers (
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue);

EXTERN void asn1Free_ETSI101733_NoticeReference_noticeNumbers (OSCTXT *pctxt, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue);

/**************************************************************/
/*                                                            */
/*  NoticeReference                                           */
/*                                                            */
/**************************************************************/
/*
NoticeReference ::= SEQUENCE {
   organization DisplayText,
   noticeNumbers SEQUENCE OF INTEGER
}
*/
#define TV_ETSI101733_NoticeReference	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_NoticeReference;

struct EXTERN ASN1T_ETSI101733_NoticeReference : public ASN1TPDU {
   ASN1T_ETSI101733_DisplayText organization;
   ASN1T_ETSI101733_NoticeReference_noticeNumbers noticeNumbers;
   ASN1T_ETSI101733_NoticeReference ();
   ASN1T_ETSI101733_NoticeReference (ASN1C_ETSI101733_NoticeReference& srcData);
   ~ASN1T_ETSI101733_NoticeReference ();
} ;

class EXTERN ASN1C_ETSI101733_NoticeReference :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_NoticeReference& msgData;
public:
   ASN1C_ETSI101733_NoticeReference (ASN1T_ETSI101733_NoticeReference& data);
   ASN1C_ETSI101733_NoticeReference (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_NoticeReference& data);
   ASN1C_ETSI101733_NoticeReference (OSRTContext &context
      , ASN1T_ETSI101733_NoticeReference& data);
   ASN1C_ETSI101733_NoticeReference (ASN1C_ETSI101733_NoticeReference& original);
   virtual ~ASN1C_ETSI101733_NoticeReference () {}
   inline ASN1T_ETSI101733_NoticeReference& getData () { return msgData; }
   inline const ASN1T_ETSI101733_NoticeReference& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NoticeReference");
   int toStream (const char* name = "NoticeReference");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_NoticeReference* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_NoticeReference& getCopy (ASN1T_ETSI101733_NoticeReference* pDstData = 0);
   ASN1T_ETSI101733_NoticeReference* newCopy ();

   inline ASN1C_ETSI101733_NoticeReference& operator= (ASN1C_ETSI101733_NoticeReference& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_NoticeReference (OSCTXT* pctxt,
   ASN1T_ETSI101733_NoticeReference *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_NoticeReference (OSCTXT* pctxt, 
   ASN1T_ETSI101733_NoticeReference* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_NoticeReference 
   (const char* name, const ASN1T_ETSI101733_NoticeReference* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_NoticeReference (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_NoticeReference* pvalue);

EXTERN ASN1T_ETSI101733_NoticeReference* 
   new_ASN1T_ETSI101733_NoticeReference (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_NoticeReference (const char* name, 
   ASN1T_ETSI101733_NoticeReference* pValue, 
   ASN1T_ETSI101733_NoticeReference* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_NoticeReference (OSCTXT* pctxt, 
   ASN1T_ETSI101733_NoticeReference* pSrcValue, 
   ASN1T_ETSI101733_NoticeReference* pDstValue);

EXTERN void asn1Init_ETSI101733_NoticeReference (
   ASN1T_ETSI101733_NoticeReference* pvalue);

EXTERN void asn1Free_ETSI101733_NoticeReference (OSCTXT *pctxt, 
   ASN1T_ETSI101733_NoticeReference* pvalue);

/**************************************************************/
/*                                                            */
/*  SPUserNotice                                              */
/*                                                            */
/**************************************************************/
/*
SPUserNotice ::= SEQUENCE {
   noticeRef NoticeReference OPTIONAL,
   explicitText DisplayText OPTIONAL
}
*/
#define TV_ETSI101733_SPUserNotice	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_SPUserNotice;

struct EXTERN ASN1T_ETSI101733_SPUserNotice : public ASN1TPDU {
   struct {
      unsigned noticeRefPresent : 1;
      unsigned explicitTextPresent : 1;
   } m;
   ASN1T_ETSI101733_NoticeReference noticeRef;
   ASN1T_ETSI101733_DisplayText explicitText;
   ASN1T_ETSI101733_SPUserNotice ();
   ASN1T_ETSI101733_SPUserNotice (ASN1C_ETSI101733_SPUserNotice& srcData);
   ~ASN1T_ETSI101733_SPUserNotice ();
} ;

class EXTERN ASN1C_ETSI101733_SPUserNotice :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_SPUserNotice& msgData;
public:
   ASN1C_ETSI101733_SPUserNotice (ASN1T_ETSI101733_SPUserNotice& data);
   ASN1C_ETSI101733_SPUserNotice (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SPUserNotice& data);
   ASN1C_ETSI101733_SPUserNotice (OSRTContext &context
      , ASN1T_ETSI101733_SPUserNotice& data);
   ASN1C_ETSI101733_SPUserNotice (ASN1C_ETSI101733_SPUserNotice& original);
   virtual ~ASN1C_ETSI101733_SPUserNotice () {}
   inline ASN1T_ETSI101733_SPUserNotice& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SPUserNotice& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SPUserNotice");
   int toStream (const char* name = "SPUserNotice");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SPUserNotice* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SPUserNotice& getCopy (ASN1T_ETSI101733_SPUserNotice* pDstData = 0);
   ASN1T_ETSI101733_SPUserNotice* newCopy ();

   inline ASN1C_ETSI101733_SPUserNotice& operator= (ASN1C_ETSI101733_SPUserNotice& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SPUserNotice (OSCTXT* pctxt,
   ASN1T_ETSI101733_SPUserNotice *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SPUserNotice (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SPUserNotice* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SPUserNotice 
   (const char* name, const ASN1T_ETSI101733_SPUserNotice* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SPUserNotice (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SPUserNotice* pvalue);

EXTERN ASN1T_ETSI101733_SPUserNotice* 
   new_ASN1T_ETSI101733_SPUserNotice (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SPUserNotice (const char* name, 
   ASN1T_ETSI101733_SPUserNotice* pValue, 
   ASN1T_ETSI101733_SPUserNotice* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SPUserNotice (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SPUserNotice* pSrcValue, ASN1T_ETSI101733_SPUserNotice*
    pDstValue);

EXTERN void asn1Init_ETSI101733_SPUserNotice (ASN1T_ETSI101733_SPUserNotice* pvalue);

EXTERN void asn1Free_ETSI101733_SPUserNotice (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SPUserNotice* pvalue);

/**************************************************************/
/*                                                            */
/*  CompleteCertificateRefs                                   */
/*                                                            */
/**************************************************************/
/*
CompleteCertificateRefs ::= SEQUENCE OF OtherCertID
*/
#define TV_ETSI101733_CompleteCertificateRefs	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CompleteCertificateRefs;

/* List of ASN1T_ETSI101733_OtherCertID */
typedef struct EXTERN ASN1T_ETSI101733_CompleteCertificateRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_CompleteCertificateRefs();
} ASN1T_ETSI101733_CompleteCertificateRefs;

class EXTERN ASN1C_ETSI101733_CompleteCertificateRefs :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_CompleteCertificateRefs& msgData;
public:
   ASN1C_ETSI101733_CompleteCertificateRefs
       (ASN1T_ETSI101733_CompleteCertificateRefs& data);
   ASN1C_ETSI101733_CompleteCertificateRefs (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CompleteCertificateRefs& data);
   ASN1C_ETSI101733_CompleteCertificateRefs (ASN1CType& ccobj
      , ASN1T_ETSI101733_CompleteCertificateRefs& data);
   ASN1C_ETSI101733_CompleteCertificateRefs (OSRTContext &context
      , ASN1T_ETSI101733_CompleteCertificateRefs& data);
   ASN1C_ETSI101733_CompleteCertificateRefs (ASN1C_ETSI101733_CompleteCertificateRefs& original);
   virtual ~ASN1C_ETSI101733_CompleteCertificateRefs () {}
   inline ASN1T_ETSI101733_CompleteCertificateRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CompleteCertificateRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CompleteCertificateRefs");
   int toStream (const char* name = "CompleteCertificateRefs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CompleteCertificateRefs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CompleteCertificateRefs& getCopy (ASN1T_ETSI101733_CompleteCertificateRefs* pDstData = 0);
   ASN1T_ETSI101733_CompleteCertificateRefs* newCopy ();

   ASN1C_ETSI101733_CompleteCertificateRefs& operator= (ASN1C_ETSI101733_CompleteCertificateRefs& srcData);
   void Append (ASN1T_ETSI101733_OtherCertID* elem);
   ASN1T_ETSI101733_OtherCertID* NewElement ();
   ASN1T_ETSI101733_OtherCertID* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_CompleteCertificateRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_CompleteCertificateRefs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CompleteCertificateRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_CompleteCertificateRefs 
   (const char* name, const ASN1T_ETSI101733_CompleteCertificateRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CompleteCertificateRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CompleteCertificateRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_CompleteCertificateRefs (const char* name, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pValue, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CompleteCertificateRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pSrcValue, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pDstValue);

EXTERN void asn1Init_ETSI101733_CompleteCertificateRefs (
   ASN1T_ETSI101733_CompleteCertificateRefs* pvalue);

EXTERN void asn1Free_ETSI101733_CompleteCertificateRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  CrlIdentifier                                             */
/*                                                            */
/**************************************************************/
/*
CrlIdentifier ::= SEQUENCE {
   crlissuer Name,
   crlIssuedTime UTCTime,
   crlNumber CRLNumber OPTIONAL
}
*/
#define TV_ETSI101733_CrlIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CrlIdentifier;

struct EXTERN ASN1T_ETSI101733_CrlIdentifier : public ASN1TPDU {
   struct {
      unsigned crlNumberPresent : 1;
   } m;
   ASN1T_EXP_Name crlissuer;
   const char* crlIssuedTime;
   ASN1T_IMP_CRLNumber crlNumber;
   ASN1T_ETSI101733_CrlIdentifier ();
   ASN1T_ETSI101733_CrlIdentifier (ASN1C_ETSI101733_CrlIdentifier& srcData);
   ~ASN1T_ETSI101733_CrlIdentifier ();
} ;

class EXTERN ASN1C_ETSI101733_CrlIdentifier :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_CrlIdentifier& msgData;
public:
   ASN1C_ETSI101733_CrlIdentifier (ASN1T_ETSI101733_CrlIdentifier& data);
   ASN1C_ETSI101733_CrlIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CrlIdentifier& data);
   ASN1C_ETSI101733_CrlIdentifier (OSRTContext &context
      , ASN1T_ETSI101733_CrlIdentifier& data);
   ASN1C_ETSI101733_CrlIdentifier (ASN1C_ETSI101733_CrlIdentifier& original);
   virtual ~ASN1C_ETSI101733_CrlIdentifier () {}
   inline ASN1T_ETSI101733_CrlIdentifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CrlIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CrlIdentifier");
   int toStream (const char* name = "CrlIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CrlIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CrlIdentifier& getCopy (ASN1T_ETSI101733_CrlIdentifier* pDstData = 0);
   ASN1T_ETSI101733_CrlIdentifier* newCopy ();

   inline ASN1C_ETSI101733_CrlIdentifier& operator= (ASN1C_ETSI101733_CrlIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_CrlIdentifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_CrlIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CrlIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_CrlIdentifier 
   (const char* name, const ASN1T_ETSI101733_CrlIdentifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CrlIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CrlIdentifier* pvalue);

EXTERN ASN1T_ETSI101733_CrlIdentifier* 
   new_ASN1T_ETSI101733_CrlIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_CrlIdentifier (const char* name, 
   ASN1T_ETSI101733_CrlIdentifier* pValue, 
   ASN1T_ETSI101733_CrlIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CrlIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlIdentifier* pSrcValue, ASN1T_ETSI101733_CrlIdentifier*
    pDstValue);

EXTERN void asn1Init_ETSI101733_CrlIdentifier (ASN1T_ETSI101733_CrlIdentifier* pvalue);

EXTERN void asn1Free_ETSI101733_CrlIdentifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CrlIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CrlValidatedID                                            */
/*                                                            */
/**************************************************************/
/*
CrlValidatedID ::= SEQUENCE {
   crlHash OtherHash,
   crlIdentifier CrlIdentifier OPTIONAL
}
*/
#define TV_ETSI101733_CrlValidatedID	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CrlValidatedID;

struct EXTERN ASN1T_ETSI101733_CrlValidatedID : public ASN1TPDU {
   struct {
      unsigned crlIdentifierPresent : 1;
   } m;
   ASN1T_ETSI101733_OtherHash crlHash;
   ASN1T_ETSI101733_CrlIdentifier crlIdentifier;
   ASN1T_ETSI101733_CrlValidatedID ();
   ASN1T_ETSI101733_CrlValidatedID (ASN1C_ETSI101733_CrlValidatedID& srcData);
   ~ASN1T_ETSI101733_CrlValidatedID ();
} ;

class EXTERN ASN1C_ETSI101733_CrlValidatedID :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_CrlValidatedID& msgData;
public:
   ASN1C_ETSI101733_CrlValidatedID (ASN1T_ETSI101733_CrlValidatedID& data);
   ASN1C_ETSI101733_CrlValidatedID (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CrlValidatedID& data);
   ASN1C_ETSI101733_CrlValidatedID (OSRTContext &context
      , ASN1T_ETSI101733_CrlValidatedID& data);
   ASN1C_ETSI101733_CrlValidatedID (ASN1C_ETSI101733_CrlValidatedID& original);
   virtual ~ASN1C_ETSI101733_CrlValidatedID () {}
   inline ASN1T_ETSI101733_CrlValidatedID& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CrlValidatedID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CrlValidatedID");
   int toStream (const char* name = "CrlValidatedID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CrlValidatedID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CrlValidatedID& getCopy (ASN1T_ETSI101733_CrlValidatedID* pDstData = 0);
   ASN1T_ETSI101733_CrlValidatedID* newCopy ();

   inline ASN1C_ETSI101733_CrlValidatedID& operator= (ASN1C_ETSI101733_CrlValidatedID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_CrlValidatedID (OSCTXT* pctxt,
   ASN1T_ETSI101733_CrlValidatedID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CrlValidatedID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlValidatedID* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_CrlValidatedID 
   (const char* name, const ASN1T_ETSI101733_CrlValidatedID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CrlValidatedID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CrlValidatedID* pvalue);

EXTERN ASN1T_ETSI101733_CrlValidatedID* 
   new_ASN1T_ETSI101733_CrlValidatedID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_CrlValidatedID (const char* name, 
   ASN1T_ETSI101733_CrlValidatedID* pValue, 
   ASN1T_ETSI101733_CrlValidatedID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CrlValidatedID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlValidatedID* pSrcValue, ASN1T_ETSI101733_CrlValidatedID*
    pDstValue);

EXTERN void asn1Init_ETSI101733_CrlValidatedID (
   ASN1T_ETSI101733_CrlValidatedID* pvalue);

EXTERN void asn1Free_ETSI101733_CrlValidatedID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CrlValidatedID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733_CrlValidatedID                           */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID;

/* List of ASN1T_ETSI101733_CrlValidatedID */
typedef struct EXTERN ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID();
} ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID;

class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& msgData;
public:
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID
       (ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID (ASN1CType& ccobj
      , ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSRTContext &context
      , ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID (ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID& original);
   virtual ~ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID () {}
   inline ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& getData () { return msgData; }
   inline const ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfETSI101733_CrlValidatedID");
   int toStream (const char* name = "_SeqOfETSI101733_CrlValidatedID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& getCopy (ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pDstData = 0);
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* newCopy ();

   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID& operator= (ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID& srcData);
   void Append (ASN1T_ETSI101733_CrlValidatedID* elem);
   ASN1T_ETSI101733_CrlValidatedID* NewElement ();
   ASN1T_ETSI101733_CrlValidatedID* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733__SeqOfETSI101733_CrlValidatedID 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_CrlValidatedID (
   const char* name, ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pDstValue);

EXTERN void asn1Init_ETSI101733__SeqOfETSI101733_CrlValidatedID (
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue);

EXTERN void asn1Free_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLListID                                                 */
/*                                                            */
/**************************************************************/
/*
CRLListID ::= SEQUENCE {
   crls SEQUENCE OF CrlValidatedID
}
*/
#define TV_ETSI101733_CRLListID	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CRLListID;

struct EXTERN ASN1T_ETSI101733_CRLListID : public ASN1TPDU {
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID crls;
   ASN1T_ETSI101733_CRLListID ();
   ASN1T_ETSI101733_CRLListID (ASN1C_ETSI101733_CRLListID& srcData);
   ~ASN1T_ETSI101733_CRLListID ();
} ;

class EXTERN ASN1C_ETSI101733_CRLListID :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_CRLListID& msgData;
public:
   ASN1C_ETSI101733_CRLListID (ASN1T_ETSI101733_CRLListID& data);
   ASN1C_ETSI101733_CRLListID (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CRLListID& data);
   ASN1C_ETSI101733_CRLListID (OSRTContext &context
      , ASN1T_ETSI101733_CRLListID& data);
   ASN1C_ETSI101733_CRLListID (ASN1C_ETSI101733_CRLListID& original);
   virtual ~ASN1C_ETSI101733_CRLListID () {}
   inline ASN1T_ETSI101733_CRLListID& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CRLListID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CRLListID");
   int toStream (const char* name = "CRLListID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CRLListID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CRLListID& getCopy (ASN1T_ETSI101733_CRLListID* pDstData = 0);
   ASN1T_ETSI101733_CRLListID* newCopy ();

   inline ASN1C_ETSI101733_CRLListID& operator= (ASN1C_ETSI101733_CRLListID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_CRLListID (OSCTXT* pctxt,
   ASN1T_ETSI101733_CRLListID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CRLListID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CRLListID* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_CRLListID 
   (const char* name, const ASN1T_ETSI101733_CRLListID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CRLListID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CRLListID* pvalue);

EXTERN ASN1T_ETSI101733_CRLListID* 
   new_ASN1T_ETSI101733_CRLListID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_CRLListID (const char* name, 
   ASN1T_ETSI101733_CRLListID* pValue, ASN1T_ETSI101733_CRLListID* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CRLListID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CRLListID* pSrcValue, ASN1T_ETSI101733_CRLListID*
    pDstValue);

EXTERN void asn1Init_ETSI101733_CRLListID (ASN1T_ETSI101733_CRLListID* pvalue);

EXTERN void asn1Free_ETSI101733_CRLListID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CRLListID* pvalue);

/**************************************************************/
/*                                                            */
/*  OcspIdentifier                                            */
/*                                                            */
/**************************************************************/
/*
OcspIdentifier ::= SEQUENCE {
   ocspResponderID ResponderID,
   producedAt GeneralizedTime
}
*/
#define TV_ETSI101733_OcspIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_OcspIdentifier;

struct EXTERN ASN1T_ETSI101733_OcspIdentifier : public ASN1TPDU {
   ASN1T_OCSP_ResponderID ocspResponderID;
   const char* producedAt;
   ASN1T_ETSI101733_OcspIdentifier ();
   ASN1T_ETSI101733_OcspIdentifier (ASN1C_ETSI101733_OcspIdentifier& srcData);
   ~ASN1T_ETSI101733_OcspIdentifier ();
} ;

class EXTERN ASN1C_ETSI101733_OcspIdentifier :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OcspIdentifier& msgData;
public:
   ASN1C_ETSI101733_OcspIdentifier (ASN1T_ETSI101733_OcspIdentifier& data);
   ASN1C_ETSI101733_OcspIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OcspIdentifier& data);
   ASN1C_ETSI101733_OcspIdentifier (OSRTContext &context
      , ASN1T_ETSI101733_OcspIdentifier& data);
   ASN1C_ETSI101733_OcspIdentifier (ASN1C_ETSI101733_OcspIdentifier& original);
   virtual ~ASN1C_ETSI101733_OcspIdentifier () {}
   inline ASN1T_ETSI101733_OcspIdentifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OcspIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OcspIdentifier");
   int toStream (const char* name = "OcspIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OcspIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OcspIdentifier& getCopy (ASN1T_ETSI101733_OcspIdentifier* pDstData = 0);
   ASN1T_ETSI101733_OcspIdentifier* newCopy ();

   inline ASN1C_ETSI101733_OcspIdentifier& operator= (ASN1C_ETSI101733_OcspIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OcspIdentifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_OcspIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OcspIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_OcspIdentifier 
   (const char* name, const ASN1T_ETSI101733_OcspIdentifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OcspIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OcspIdentifier* pvalue);

EXTERN ASN1T_ETSI101733_OcspIdentifier* 
   new_ASN1T_ETSI101733_OcspIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OcspIdentifier (const char* name, 
   ASN1T_ETSI101733_OcspIdentifier* pValue, 
   ASN1T_ETSI101733_OcspIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OcspIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspIdentifier* pSrcValue, ASN1T_ETSI101733_OcspIdentifier*
    pDstValue);

EXTERN void asn1Init_ETSI101733_OcspIdentifier (
   ASN1T_ETSI101733_OcspIdentifier* pvalue);

EXTERN void asn1Free_ETSI101733_OcspIdentifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OcspIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  OcspResponsesID                                           */
/*                                                            */
/**************************************************************/
/*
OcspResponsesID ::= SEQUENCE {
   ocspIdentifier OcspIdentifier,
   ocspRepHash OtherHash OPTIONAL
}
*/
#define TV_ETSI101733_OcspResponsesID	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_OcspResponsesID;

struct EXTERN ASN1T_ETSI101733_OcspResponsesID : public ASN1TPDU {
   struct {
      unsigned ocspRepHashPresent : 1;
   } m;
   ASN1T_ETSI101733_OcspIdentifier ocspIdentifier;
   ASN1T_ETSI101733_OtherHash ocspRepHash;
   ASN1T_ETSI101733_OcspResponsesID ();
   ASN1T_ETSI101733_OcspResponsesID (ASN1C_ETSI101733_OcspResponsesID& srcData);
   ~ASN1T_ETSI101733_OcspResponsesID ();
} ;

class EXTERN ASN1C_ETSI101733_OcspResponsesID :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OcspResponsesID& msgData;
public:
   ASN1C_ETSI101733_OcspResponsesID (ASN1T_ETSI101733_OcspResponsesID& data);
   ASN1C_ETSI101733_OcspResponsesID (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OcspResponsesID& data);
   ASN1C_ETSI101733_OcspResponsesID (OSRTContext &context
      , ASN1T_ETSI101733_OcspResponsesID& data);
   ASN1C_ETSI101733_OcspResponsesID (ASN1C_ETSI101733_OcspResponsesID& original);
   virtual ~ASN1C_ETSI101733_OcspResponsesID () {}
   inline ASN1T_ETSI101733_OcspResponsesID& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OcspResponsesID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OcspResponsesID");
   int toStream (const char* name = "OcspResponsesID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OcspResponsesID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OcspResponsesID& getCopy (ASN1T_ETSI101733_OcspResponsesID* pDstData = 0);
   ASN1T_ETSI101733_OcspResponsesID* newCopy ();

   inline ASN1C_ETSI101733_OcspResponsesID& operator= (ASN1C_ETSI101733_OcspResponsesID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OcspResponsesID (OSCTXT* pctxt,
   ASN1T_ETSI101733_OcspResponsesID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OcspResponsesID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspResponsesID* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_OcspResponsesID 
   (const char* name, const ASN1T_ETSI101733_OcspResponsesID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OcspResponsesID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OcspResponsesID* pvalue);

EXTERN ASN1T_ETSI101733_OcspResponsesID* 
   new_ASN1T_ETSI101733_OcspResponsesID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OcspResponsesID (const char* name, 
   ASN1T_ETSI101733_OcspResponsesID* pValue, 
   ASN1T_ETSI101733_OcspResponsesID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OcspResponsesID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspResponsesID* pSrcValue, 
   ASN1T_ETSI101733_OcspResponsesID* pDstValue);

EXTERN void asn1Init_ETSI101733_OcspResponsesID (
   ASN1T_ETSI101733_OcspResponsesID* pvalue);

EXTERN void asn1Free_ETSI101733_OcspResponsesID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OcspResponsesID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733_OcspResponsesID                          */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID;

/* List of ASN1T_ETSI101733_OcspResponsesID */
typedef struct EXTERN ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID();
} ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID;

class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& msgData;
public:
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID
       (ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID (ASN1CType& ccobj
      , ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSRTContext &context
      , ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& data);
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID (ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID& original);
   virtual ~ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID () {}
   inline ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& getData () { return msgData; }
   inline const ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfETSI101733_OcspResponsesID");
   int toStream (const char* name = "_SeqOfETSI101733_OcspResponsesID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& getCopy (ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pDstData = 0);
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* newCopy ();

   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID& operator= (ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID& srcData);
   void Append (ASN1T_ETSI101733_OcspResponsesID* elem);
   ASN1T_ETSI101733_OcspResponsesID* NewElement ();
   ASN1T_ETSI101733_OcspResponsesID* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733__SeqOfETSI101733_OcspResponsesID 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_OcspResponsesID (
   const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pDstValue);

EXTERN void asn1Init_ETSI101733__SeqOfETSI101733_OcspResponsesID (
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue);

EXTERN void asn1Free_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue);

/**************************************************************/
/*                                                            */
/*  OcspListID                                                */
/*                                                            */
/**************************************************************/
/*
OcspListID ::= SEQUENCE {
   ocspResponses SEQUENCE OF OcspResponsesID
}
*/
#define TV_ETSI101733_OcspListID	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_OcspListID;

struct EXTERN ASN1T_ETSI101733_OcspListID : public ASN1TPDU {
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID ocspResponses;
   ASN1T_ETSI101733_OcspListID ();
   ASN1T_ETSI101733_OcspListID (ASN1C_ETSI101733_OcspListID& srcData);
   ~ASN1T_ETSI101733_OcspListID ();
} ;

class EXTERN ASN1C_ETSI101733_OcspListID :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OcspListID& msgData;
public:
   ASN1C_ETSI101733_OcspListID (ASN1T_ETSI101733_OcspListID& data);
   ASN1C_ETSI101733_OcspListID (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OcspListID& data);
   ASN1C_ETSI101733_OcspListID (OSRTContext &context
      , ASN1T_ETSI101733_OcspListID& data);
   ASN1C_ETSI101733_OcspListID (ASN1C_ETSI101733_OcspListID& original);
   virtual ~ASN1C_ETSI101733_OcspListID () {}
   inline ASN1T_ETSI101733_OcspListID& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OcspListID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OcspListID");
   int toStream (const char* name = "OcspListID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OcspListID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OcspListID& getCopy (ASN1T_ETSI101733_OcspListID* pDstData = 0);
   ASN1T_ETSI101733_OcspListID* newCopy ();

   inline ASN1C_ETSI101733_OcspListID& operator= (ASN1C_ETSI101733_OcspListID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OcspListID (OSCTXT* pctxt,
   ASN1T_ETSI101733_OcspListID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OcspListID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspListID* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_OcspListID 
   (const char* name, const ASN1T_ETSI101733_OcspListID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OcspListID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OcspListID* pvalue);

EXTERN ASN1T_ETSI101733_OcspListID* 
   new_ASN1T_ETSI101733_OcspListID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OcspListID (const char* name, 
   ASN1T_ETSI101733_OcspListID* pValue, 
   ASN1T_ETSI101733_OcspListID* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OcspListID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspListID* pSrcValue, ASN1T_ETSI101733_OcspListID*
    pDstValue);

EXTERN void asn1Init_ETSI101733_OcspListID (ASN1T_ETSI101733_OcspListID* pvalue);

EXTERN void asn1Free_ETSI101733_OcspListID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OcspListID* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevRefs_otherRevRefs                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'OtherRevRefs'
*/
class EXTERN ASN1C_ETSI101733_OtherRevRefs_otherRevRefs;

/* List of ASN1TOpenType */
typedef struct EXTERN ASN1T_ETSI101733_OtherRevRefs_otherRevRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_OtherRevRefs_otherRevRefs();
} ASN1T_ETSI101733_OtherRevRefs_otherRevRefs;

class EXTERN ASN1C_ETSI101733_OtherRevRefs_otherRevRefs :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& msgData;
public:
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs
       (ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& data);
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& data);
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs (ASN1CType& ccobj
      , ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& data);
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs (OSRTContext &context
      , ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& data);
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs (ASN1C_ETSI101733_OtherRevRefs_otherRevRefs& original);
   virtual ~ASN1C_ETSI101733_OtherRevRefs_otherRevRefs () {}
   inline ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherRevRefs_otherRevRefs");
   int toStream (const char* name = "OtherRevRefs_otherRevRefs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& getCopy (ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pDstData = 0);
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* newCopy ();

   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs& operator= (ASN1C_ETSI101733_OtherRevRefs_otherRevRefs& srcData);
   void Append (ASN1TOpenType* elem);
   ASN1TOpenType* NewElement ();
   ASN1TOpenType* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_OtherRevRefs_otherRevRefs 
   (const char* name, const ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherRevRefs_otherRevRefs (const char* name, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pValue, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pSrcValue, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pDstValue);

EXTERN void asn1Init_ETSI101733_OtherRevRefs_otherRevRefs (
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue);

EXTERN void asn1Free_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevRefs                                              */
/*                                                            */
/**************************************************************/
/*
OtherRevRefs ::= SEQUENCE {
   otherRevRefType OTHER-REVOCATION-REF.&id,
   otherRevRefs SEQUENCE OF OTHER-REVOCATION-REF.&Type
}
*/
#define TV_ETSI101733_OtherRevRefs	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_OtherRevRefs;

struct EXTERN ASN1T_ETSI101733_OtherRevRefs : public ASN1TPDU {
   ASN1TObjId otherRevRefType;
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs otherRevRefs;
   ASN1T_ETSI101733_OtherRevRefs ();
   ASN1T_ETSI101733_OtherRevRefs (ASN1C_ETSI101733_OtherRevRefs& srcData);
   ~ASN1T_ETSI101733_OtherRevRefs ();
} ;

class EXTERN ASN1C_ETSI101733_OtherRevRefs :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OtherRevRefs& msgData;
public:
   ASN1C_ETSI101733_OtherRevRefs (ASN1T_ETSI101733_OtherRevRefs& data);
   ASN1C_ETSI101733_OtherRevRefs (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherRevRefs& data);
   ASN1C_ETSI101733_OtherRevRefs (OSRTContext &context
      , ASN1T_ETSI101733_OtherRevRefs& data);
   ASN1C_ETSI101733_OtherRevRefs (ASN1C_ETSI101733_OtherRevRefs& original);
   virtual ~ASN1C_ETSI101733_OtherRevRefs () {}
   inline ASN1T_ETSI101733_OtherRevRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherRevRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherRevRefs");
   int toStream (const char* name = "OtherRevRefs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherRevRefs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherRevRefs& getCopy (ASN1T_ETSI101733_OtherRevRefs* pDstData = 0);
   ASN1T_ETSI101733_OtherRevRefs* newCopy ();

   inline ASN1C_ETSI101733_OtherRevRefs& operator= (ASN1C_ETSI101733_OtherRevRefs& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OtherRevRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherRevRefs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherRevRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevRefs* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_OtherRevRefs 
   (const char* name, const ASN1T_ETSI101733_OtherRevRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherRevRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherRevRefs* pvalue);

EXTERN ASN1T_ETSI101733_OtherRevRefs* 
   new_ASN1T_ETSI101733_OtherRevRefs (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherRevRefs (const char* name, 
   ASN1T_ETSI101733_OtherRevRefs* pValue, 
   ASN1T_ETSI101733_OtherRevRefs* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherRevRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevRefs* pSrcValue, ASN1T_ETSI101733_OtherRevRefs*
    pDstValue);

EXTERN void asn1Init_ETSI101733_OtherRevRefs (ASN1T_ETSI101733_OtherRevRefs* pvalue);

EXTERN void asn1Free_ETSI101733_OtherRevRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherRevRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  CrlOcspRef                                                */
/*                                                            */
/**************************************************************/
/*
CrlOcspRef ::= SEQUENCE {
   crlids [0] CRLListID OPTIONAL,
   ocspids [1] OcspListID OPTIONAL,
   otherRev [2] OtherRevRefs OPTIONAL
}
*/
#define TV_ETSI101733_CrlOcspRef	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CrlOcspRef;

struct EXTERN ASN1T_ETSI101733_CrlOcspRef : public ASN1TPDU {
   struct {
      unsigned crlidsPresent : 1;
      unsigned ocspidsPresent : 1;
      unsigned otherRevPresent : 1;
   } m;
   ASN1T_ETSI101733_CRLListID crlids;
   ASN1T_ETSI101733_OcspListID ocspids;
   ASN1T_ETSI101733_OtherRevRefs otherRev;
   ASN1T_ETSI101733_CrlOcspRef ();
   ASN1T_ETSI101733_CrlOcspRef (ASN1C_ETSI101733_CrlOcspRef& srcData);
   ~ASN1T_ETSI101733_CrlOcspRef ();
} ;

class EXTERN ASN1C_ETSI101733_CrlOcspRef :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_CrlOcspRef& msgData;
public:
   ASN1C_ETSI101733_CrlOcspRef (ASN1T_ETSI101733_CrlOcspRef& data);
   ASN1C_ETSI101733_CrlOcspRef (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CrlOcspRef& data);
   ASN1C_ETSI101733_CrlOcspRef (OSRTContext &context
      , ASN1T_ETSI101733_CrlOcspRef& data);
   ASN1C_ETSI101733_CrlOcspRef (ASN1C_ETSI101733_CrlOcspRef& original);
   virtual ~ASN1C_ETSI101733_CrlOcspRef () {}
   inline ASN1T_ETSI101733_CrlOcspRef& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CrlOcspRef& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CrlOcspRef");
   int toStream (const char* name = "CrlOcspRef");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CrlOcspRef* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CrlOcspRef& getCopy (ASN1T_ETSI101733_CrlOcspRef* pDstData = 0);
   ASN1T_ETSI101733_CrlOcspRef* newCopy ();

   inline ASN1C_ETSI101733_CrlOcspRef& operator= (ASN1C_ETSI101733_CrlOcspRef& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_CrlOcspRef (OSCTXT* pctxt,
   ASN1T_ETSI101733_CrlOcspRef *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CrlOcspRef (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlOcspRef* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_CrlOcspRef 
   (const char* name, const ASN1T_ETSI101733_CrlOcspRef* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CrlOcspRef (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CrlOcspRef* pvalue);

EXTERN ASN1T_ETSI101733_CrlOcspRef* 
   new_ASN1T_ETSI101733_CrlOcspRef (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_CrlOcspRef (const char* name, 
   ASN1T_ETSI101733_CrlOcspRef* pValue, 
   ASN1T_ETSI101733_CrlOcspRef* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CrlOcspRef (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlOcspRef* pSrcValue, ASN1T_ETSI101733_CrlOcspRef*
    pDstValue);

EXTERN void asn1Init_ETSI101733_CrlOcspRef (ASN1T_ETSI101733_CrlOcspRef* pvalue);

EXTERN void asn1Free_ETSI101733_CrlOcspRef (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CrlOcspRef* pvalue);

/**************************************************************/
/*                                                            */
/*  CompleteRevocationRefs                                    */
/*                                                            */
/**************************************************************/
/*
CompleteRevocationRefs ::= SEQUENCE OF CrlOcspRef
*/
#define TV_ETSI101733_CompleteRevocationRefs	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CompleteRevocationRefs;

/* List of ASN1T_ETSI101733_CrlOcspRef */
typedef struct EXTERN ASN1T_ETSI101733_CompleteRevocationRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_CompleteRevocationRefs();
} ASN1T_ETSI101733_CompleteRevocationRefs;

class EXTERN ASN1C_ETSI101733_CompleteRevocationRefs :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_CompleteRevocationRefs& msgData;
public:
   ASN1C_ETSI101733_CompleteRevocationRefs
       (ASN1T_ETSI101733_CompleteRevocationRefs& data);
   ASN1C_ETSI101733_CompleteRevocationRefs (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CompleteRevocationRefs& data);
   ASN1C_ETSI101733_CompleteRevocationRefs (ASN1CType& ccobj
      , ASN1T_ETSI101733_CompleteRevocationRefs& data);
   ASN1C_ETSI101733_CompleteRevocationRefs (OSRTContext &context
      , ASN1T_ETSI101733_CompleteRevocationRefs& data);
   ASN1C_ETSI101733_CompleteRevocationRefs (ASN1C_ETSI101733_CompleteRevocationRefs& original);
   virtual ~ASN1C_ETSI101733_CompleteRevocationRefs () {}
   inline ASN1T_ETSI101733_CompleteRevocationRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CompleteRevocationRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CompleteRevocationRefs");
   int toStream (const char* name = "CompleteRevocationRefs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CompleteRevocationRefs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CompleteRevocationRefs& getCopy (ASN1T_ETSI101733_CompleteRevocationRefs* pDstData = 0);
   ASN1T_ETSI101733_CompleteRevocationRefs* newCopy ();

   ASN1C_ETSI101733_CompleteRevocationRefs& operator= (ASN1C_ETSI101733_CompleteRevocationRefs& srcData);
   void Append (ASN1T_ETSI101733_CrlOcspRef* elem);
   ASN1T_ETSI101733_CrlOcspRef* NewElement ();
   ASN1T_ETSI101733_CrlOcspRef* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_CompleteRevocationRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_CompleteRevocationRefs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CompleteRevocationRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_CompleteRevocationRefs 
   (const char* name, const ASN1T_ETSI101733_CompleteRevocationRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CompleteRevocationRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CompleteRevocationRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_CompleteRevocationRefs (const char* name, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pValue, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CompleteRevocationRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pSrcValue, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pDstValue);

EXTERN void asn1Init_ETSI101733_CompleteRevocationRefs (
   ASN1T_ETSI101733_CompleteRevocationRefs* pvalue);

EXTERN void asn1Free_ETSI101733_CompleteRevocationRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateValues                                         */
/*                                                            */
/**************************************************************/
/*
CertificateValues ::= SEQUENCE OF Certificate
*/
#define TV_ETSI101733_CertificateValues	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CertificateValues;

/* List of ASN1T_EXP_Certificate */
typedef struct EXTERN ASN1T_ETSI101733_CertificateValues : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_CertificateValues();
} ASN1T_ETSI101733_CertificateValues;

class EXTERN ASN1C_ETSI101733_CertificateValues :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_CertificateValues& msgData;
public:
   ASN1C_ETSI101733_CertificateValues
       (ASN1T_ETSI101733_CertificateValues& data);
   ASN1C_ETSI101733_CertificateValues (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CertificateValues& data);
   ASN1C_ETSI101733_CertificateValues (ASN1CType& ccobj
      , ASN1T_ETSI101733_CertificateValues& data);
   ASN1C_ETSI101733_CertificateValues (OSRTContext &context
      , ASN1T_ETSI101733_CertificateValues& data);
   ASN1C_ETSI101733_CertificateValues (ASN1C_ETSI101733_CertificateValues& original);
   virtual ~ASN1C_ETSI101733_CertificateValues () {}
   inline ASN1T_ETSI101733_CertificateValues& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CertificateValues& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertificateValues");
   int toStream (const char* name = "CertificateValues");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CertificateValues* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CertificateValues& getCopy (ASN1T_ETSI101733_CertificateValues* pDstData = 0);
   ASN1T_ETSI101733_CertificateValues* newCopy ();

   ASN1C_ETSI101733_CertificateValues& operator= (ASN1C_ETSI101733_CertificateValues& srcData);
   void Append (ASN1T_EXP_Certificate* elem);
   ASN1T_EXP_Certificate* NewElement ();
   ASN1T_EXP_Certificate* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_CertificateValues (OSCTXT* pctxt,
   ASN1T_ETSI101733_CertificateValues *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CertificateValues (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CertificateValues* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_CertificateValues 
   (const char* name, const ASN1T_ETSI101733_CertificateValues* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CertificateValues (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CertificateValues* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_CertificateValues (const char* name, 
   ASN1T_ETSI101733_CertificateValues* pValue, 
   ASN1T_ETSI101733_CertificateValues* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CertificateValues (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CertificateValues* pSrcValue, 
   ASN1T_ETSI101733_CertificateValues* pDstValue);

EXTERN void asn1Init_ETSI101733_CertificateValues (
   ASN1T_ETSI101733_CertificateValues* pvalue);

EXTERN void asn1Free_ETSI101733_CertificateValues (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CertificateValues* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733_CertificateList                          */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_CertificateList;

/* List of ASN1T_EXP_CertificateList */
typedef struct EXTERN ASN1T_ETSI101733__SeqOfETSI101733_CertificateList : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733__SeqOfETSI101733_CertificateList();
} ASN1T_ETSI101733__SeqOfETSI101733_CertificateList;

class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_CertificateList :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& msgData;
public:
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList
       (ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& data);
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& data);
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList (ASN1CType& ccobj
      , ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& data);
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList (OSRTContext &context
      , ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& data);
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList (ASN1C_ETSI101733__SeqOfETSI101733_CertificateList& original);
   virtual ~ASN1C_ETSI101733__SeqOfETSI101733_CertificateList () {}
   inline ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& getData () { return msgData; }
   inline const ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfETSI101733_CertificateList");
   int toStream (const char* name = "_SeqOfETSI101733_CertificateList");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& getCopy (ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pDstData = 0);
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* newCopy ();

   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList& operator= (ASN1C_ETSI101733__SeqOfETSI101733_CertificateList& srcData);
   void Append (ASN1T_EXP_CertificateList* elem);
   ASN1T_EXP_CertificateList* NewElement ();
   ASN1T_EXP_CertificateList* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733__SeqOfETSI101733_CertificateList 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_CertificateList (
   const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pDstValue);

EXTERN void asn1Init_ETSI101733__SeqOfETSI101733_CertificateList (
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue);

EXTERN void asn1Free_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733_BasicOCSPResponse                        */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse;

/* List of ASN1T_OCSP_BasicOCSPResponse */
typedef struct EXTERN ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse();
} ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse;

class EXTERN ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& msgData;
public:
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse
       (ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& data);
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& data);
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (ASN1CType& ccobj
      , ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& data);
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSRTContext &context
      , ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& data);
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& original);
   virtual ~ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse () {}
   inline ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& getData () { return msgData; }
   inline const ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfETSI101733_BasicOCSPResponse");
   int toStream (const char* name = "_SeqOfETSI101733_BasicOCSPResponse");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& getCopy (ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pDstData = 0);
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* newCopy ();

   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& operator= (ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& srcData);
   void Append (ASN1T_OCSP_BasicOCSPResponse* elem);
   ASN1T_OCSP_BasicOCSPResponse* NewElement ();
   ASN1T_OCSP_BasicOCSPResponse* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733__SeqOfETSI101733_BasicOCSPResponse 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (
   const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pDstValue);

EXTERN void asn1Init_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue);

EXTERN void asn1Free_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevVals_otherRevVals                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'OtherRevVals'
*/
class EXTERN ASN1C_ETSI101733_OtherRevVals_otherRevVals;

/* List of ASN1TOpenType */
typedef struct EXTERN ASN1T_ETSI101733_OtherRevVals_otherRevVals : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_OtherRevVals_otherRevVals();
} ASN1T_ETSI101733_OtherRevVals_otherRevVals;

class EXTERN ASN1C_ETSI101733_OtherRevVals_otherRevVals :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_OtherRevVals_otherRevVals& msgData;
public:
   ASN1C_ETSI101733_OtherRevVals_otherRevVals
       (ASN1T_ETSI101733_OtherRevVals_otherRevVals& data);
   ASN1C_ETSI101733_OtherRevVals_otherRevVals (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherRevVals_otherRevVals& data);
   ASN1C_ETSI101733_OtherRevVals_otherRevVals (ASN1CType& ccobj
      , ASN1T_ETSI101733_OtherRevVals_otherRevVals& data);
   ASN1C_ETSI101733_OtherRevVals_otherRevVals (OSRTContext &context
      , ASN1T_ETSI101733_OtherRevVals_otherRevVals& data);
   ASN1C_ETSI101733_OtherRevVals_otherRevVals (ASN1C_ETSI101733_OtherRevVals_otherRevVals& original);
   virtual ~ASN1C_ETSI101733_OtherRevVals_otherRevVals () {}
   inline ASN1T_ETSI101733_OtherRevVals_otherRevVals& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherRevVals_otherRevVals& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherRevVals_otherRevVals");
   int toStream (const char* name = "OtherRevVals_otherRevVals");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherRevVals_otherRevVals* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherRevVals_otherRevVals& getCopy (ASN1T_ETSI101733_OtherRevVals_otherRevVals* pDstData = 0);
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* newCopy ();

   ASN1C_ETSI101733_OtherRevVals_otherRevVals& operator= (ASN1C_ETSI101733_OtherRevVals_otherRevVals& srcData);
   void Append (ASN1TOpenType* elem);
   ASN1TOpenType* NewElement ();
   ASN1TOpenType* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_OtherRevVals_otherRevVals (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherRevVals_otherRevVals *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherRevVals_otherRevVals (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_OtherRevVals_otherRevVals 
   (const char* name, const ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherRevVals_otherRevVals (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherRevVals_otherRevVals (const char* name, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pValue, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherRevVals_otherRevVals (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pSrcValue, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pDstValue);

EXTERN void asn1Init_ETSI101733_OtherRevVals_otherRevVals (
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue);

EXTERN void asn1Free_ETSI101733_OtherRevVals_otherRevVals (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevVals                                              */
/*                                                            */
/**************************************************************/
/*
OtherRevVals ::= SEQUENCE {
   otherRevValType OTHER-REVOCATION-VAL.&id,
   otherRevVals SEQUENCE OF OTHER-REVOCATION-REF.&Type
}
*/
#define TV_ETSI101733_OtherRevVals	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_OtherRevVals;

struct EXTERN ASN1T_ETSI101733_OtherRevVals : public ASN1TPDU {
   ASN1TObjId otherRevValType;
   ASN1T_ETSI101733_OtherRevVals_otherRevVals otherRevVals;
   ASN1T_ETSI101733_OtherRevVals ();
   ASN1T_ETSI101733_OtherRevVals (ASN1C_ETSI101733_OtherRevVals& srcData);
   ~ASN1T_ETSI101733_OtherRevVals ();
} ;

class EXTERN ASN1C_ETSI101733_OtherRevVals :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_OtherRevVals& msgData;
public:
   ASN1C_ETSI101733_OtherRevVals (ASN1T_ETSI101733_OtherRevVals& data);
   ASN1C_ETSI101733_OtherRevVals (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_OtherRevVals& data);
   ASN1C_ETSI101733_OtherRevVals (OSRTContext &context
      , ASN1T_ETSI101733_OtherRevVals& data);
   ASN1C_ETSI101733_OtherRevVals (ASN1C_ETSI101733_OtherRevVals& original);
   virtual ~ASN1C_ETSI101733_OtherRevVals () {}
   inline ASN1T_ETSI101733_OtherRevVals& getData () { return msgData; }
   inline const ASN1T_ETSI101733_OtherRevVals& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherRevVals");
   int toStream (const char* name = "OtherRevVals");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_OtherRevVals* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_OtherRevVals& getCopy (ASN1T_ETSI101733_OtherRevVals* pDstData = 0);
   ASN1T_ETSI101733_OtherRevVals* newCopy ();

   inline ASN1C_ETSI101733_OtherRevVals& operator= (ASN1C_ETSI101733_OtherRevVals& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_OtherRevVals (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherRevVals *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_OtherRevVals (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevVals* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_OtherRevVals 
   (const char* name, const ASN1T_ETSI101733_OtherRevVals* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_OtherRevVals (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherRevVals* pvalue);

EXTERN ASN1T_ETSI101733_OtherRevVals* 
   new_ASN1T_ETSI101733_OtherRevVals (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_OtherRevVals (const char* name, 
   ASN1T_ETSI101733_OtherRevVals* pValue, 
   ASN1T_ETSI101733_OtherRevVals* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_OtherRevVals (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevVals* pSrcValue, ASN1T_ETSI101733_OtherRevVals*
    pDstValue);

EXTERN void asn1Init_ETSI101733_OtherRevVals (ASN1T_ETSI101733_OtherRevVals* pvalue);

EXTERN void asn1Free_ETSI101733_OtherRevVals (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherRevVals* pvalue);

/**************************************************************/
/*                                                            */
/*  RevocationValues                                          */
/*                                                            */
/**************************************************************/
/*
RevocationValues ::= SEQUENCE {
   crlVals [0] SEQUENCE OF CertificateList OPTIONAL,
   ocspVals [1] SEQUENCE OF BasicOCSPResponse OPTIONAL,
   otherRevVals [2] OtherRevVals OPTIONAL
}
*/
#define TV_ETSI101733_RevocationValues	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_RevocationValues;

struct EXTERN ASN1T_ETSI101733_RevocationValues : public ASN1TPDU {
   struct {
      unsigned crlValsPresent : 1;
      unsigned ocspValsPresent : 1;
      unsigned otherRevValsPresent : 1;
   } m;
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList crlVals;
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse ocspVals;
   ASN1T_ETSI101733_OtherRevVals otherRevVals;
   ASN1T_ETSI101733_RevocationValues ();
   ASN1T_ETSI101733_RevocationValues (ASN1C_ETSI101733_RevocationValues& srcData);
   ~ASN1T_ETSI101733_RevocationValues ();
} ;

class EXTERN ASN1C_ETSI101733_RevocationValues :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_RevocationValues& msgData;
public:
   ASN1C_ETSI101733_RevocationValues (ASN1T_ETSI101733_RevocationValues& data);
   ASN1C_ETSI101733_RevocationValues (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_RevocationValues& data);
   ASN1C_ETSI101733_RevocationValues (OSRTContext &context
      , ASN1T_ETSI101733_RevocationValues& data);
   ASN1C_ETSI101733_RevocationValues (ASN1C_ETSI101733_RevocationValues& original);
   virtual ~ASN1C_ETSI101733_RevocationValues () {}
   inline ASN1T_ETSI101733_RevocationValues& getData () { return msgData; }
   inline const ASN1T_ETSI101733_RevocationValues& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevocationValues");
   int toStream (const char* name = "RevocationValues");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_RevocationValues* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_RevocationValues& getCopy (ASN1T_ETSI101733_RevocationValues* pDstData = 0);
   ASN1T_ETSI101733_RevocationValues* newCopy ();

   inline ASN1C_ETSI101733_RevocationValues& operator= (ASN1C_ETSI101733_RevocationValues& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_RevocationValues (OSCTXT* pctxt,
   ASN1T_ETSI101733_RevocationValues *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_RevocationValues (OSCTXT* pctxt, 
   ASN1T_ETSI101733_RevocationValues* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_RevocationValues 
   (const char* name, const ASN1T_ETSI101733_RevocationValues* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_RevocationValues (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_RevocationValues* pvalue);

EXTERN ASN1T_ETSI101733_RevocationValues* 
   new_ASN1T_ETSI101733_RevocationValues (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_RevocationValues (const char* name, 
   ASN1T_ETSI101733_RevocationValues* pValue, 
   ASN1T_ETSI101733_RevocationValues* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_RevocationValues (OSCTXT* pctxt, 
   ASN1T_ETSI101733_RevocationValues* pSrcValue, 
   ASN1T_ETSI101733_RevocationValues* pDstValue);

EXTERN void asn1Init_ETSI101733_RevocationValues (
   ASN1T_ETSI101733_RevocationValues* pvalue);

EXTERN void asn1Free_ETSI101733_RevocationValues (OSCTXT *pctxt, 
   ASN1T_ETSI101733_RevocationValues* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateRefs                                  */
/*                                                            */
/**************************************************************/
/*
AttributeCertificateRefs ::= SEQUENCE OF OtherCertID
*/
#define TV_ETSI101733_AttributeCertificateRefs	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_AttributeCertificateRefs;

/* List of ASN1T_ETSI101733_OtherCertID */
typedef struct EXTERN ASN1T_ETSI101733_AttributeCertificateRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_AttributeCertificateRefs();
} ASN1T_ETSI101733_AttributeCertificateRefs;

class EXTERN ASN1C_ETSI101733_AttributeCertificateRefs :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_AttributeCertificateRefs& msgData;
public:
   ASN1C_ETSI101733_AttributeCertificateRefs
       (ASN1T_ETSI101733_AttributeCertificateRefs& data);
   ASN1C_ETSI101733_AttributeCertificateRefs (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_AttributeCertificateRefs& data);
   ASN1C_ETSI101733_AttributeCertificateRefs (ASN1CType& ccobj
      , ASN1T_ETSI101733_AttributeCertificateRefs& data);
   ASN1C_ETSI101733_AttributeCertificateRefs (OSRTContext &context
      , ASN1T_ETSI101733_AttributeCertificateRefs& data);
   ASN1C_ETSI101733_AttributeCertificateRefs (ASN1C_ETSI101733_AttributeCertificateRefs& original);
   virtual ~ASN1C_ETSI101733_AttributeCertificateRefs () {}
   inline ASN1T_ETSI101733_AttributeCertificateRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733_AttributeCertificateRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeCertificateRefs");
   int toStream (const char* name = "AttributeCertificateRefs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_AttributeCertificateRefs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_AttributeCertificateRefs& getCopy (ASN1T_ETSI101733_AttributeCertificateRefs* pDstData = 0);
   ASN1T_ETSI101733_AttributeCertificateRefs* newCopy ();

   ASN1C_ETSI101733_AttributeCertificateRefs& operator= (ASN1C_ETSI101733_AttributeCertificateRefs& srcData);
   void Append (ASN1T_ETSI101733_OtherCertID* elem);
   ASN1T_ETSI101733_OtherCertID* NewElement ();
   ASN1T_ETSI101733_OtherCertID* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_AttributeCertificateRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_AttributeCertificateRefs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_AttributeCertificateRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_AttributeCertificateRefs 
   (const char* name, const ASN1T_ETSI101733_AttributeCertificateRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_AttributeCertificateRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_AttributeCertificateRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_AttributeCertificateRefs (const char* name, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pValue, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_AttributeCertificateRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pSrcValue, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pDstValue);

EXTERN void asn1Init_ETSI101733_AttributeCertificateRefs (
   ASN1T_ETSI101733_AttributeCertificateRefs* pvalue);

EXTERN void asn1Free_ETSI101733_AttributeCertificateRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeRevocationRefs                                   */
/*                                                            */
/**************************************************************/
/*
AttributeRevocationRefs ::= SEQUENCE OF CrlOcspRef
*/
#define TV_ETSI101733_AttributeRevocationRefs	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_AttributeRevocationRefs;

/* List of ASN1T_ETSI101733_CrlOcspRef */
typedef struct EXTERN ASN1T_ETSI101733_AttributeRevocationRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_AttributeRevocationRefs();
} ASN1T_ETSI101733_AttributeRevocationRefs;

class EXTERN ASN1C_ETSI101733_AttributeRevocationRefs :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_AttributeRevocationRefs& msgData;
public:
   ASN1C_ETSI101733_AttributeRevocationRefs
       (ASN1T_ETSI101733_AttributeRevocationRefs& data);
   ASN1C_ETSI101733_AttributeRevocationRefs (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_AttributeRevocationRefs& data);
   ASN1C_ETSI101733_AttributeRevocationRefs (ASN1CType& ccobj
      , ASN1T_ETSI101733_AttributeRevocationRefs& data);
   ASN1C_ETSI101733_AttributeRevocationRefs (OSRTContext &context
      , ASN1T_ETSI101733_AttributeRevocationRefs& data);
   ASN1C_ETSI101733_AttributeRevocationRefs (ASN1C_ETSI101733_AttributeRevocationRefs& original);
   virtual ~ASN1C_ETSI101733_AttributeRevocationRefs () {}
   inline ASN1T_ETSI101733_AttributeRevocationRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733_AttributeRevocationRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeRevocationRefs");
   int toStream (const char* name = "AttributeRevocationRefs");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_AttributeRevocationRefs* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_AttributeRevocationRefs& getCopy (ASN1T_ETSI101733_AttributeRevocationRefs* pDstData = 0);
   ASN1T_ETSI101733_AttributeRevocationRefs* newCopy ();

   ASN1C_ETSI101733_AttributeRevocationRefs& operator= (ASN1C_ETSI101733_AttributeRevocationRefs& srcData);
   void Append (ASN1T_ETSI101733_CrlOcspRef* elem);
   ASN1T_ETSI101733_CrlOcspRef* NewElement ();
   ASN1T_ETSI101733_CrlOcspRef* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_AttributeRevocationRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_AttributeRevocationRefs *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_AttributeRevocationRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_AttributeRevocationRefs 
   (const char* name, const ASN1T_ETSI101733_AttributeRevocationRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_AttributeRevocationRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_AttributeRevocationRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_AttributeRevocationRefs (const char* name, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pValue, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_AttributeRevocationRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pSrcValue, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pDstValue);

EXTERN void asn1Init_ETSI101733_AttributeRevocationRefs (
   ASN1T_ETSI101733_AttributeRevocationRefs* pvalue);

EXTERN void asn1Free_ETSI101733_AttributeRevocationRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentReference                                          */
/*                                                            */
/**************************************************************/
/*
ContentReference

ContentReference ::= SEQUENCE {
   contentType ContentType,
   signedContentIdentifier ContentIdentifier,
   originatorSignatureValue OCTET STRING
}
*/
#define TV_ETSI101733_ContentReference	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_ContentReference;

struct EXTERN ASN1T_ETSI101733_ContentReference : public ASN1TPDU {
   ASN1T_CMS_ContentType contentType;
   ASN1T_ETSI101733_ContentIdentifier signedContentIdentifier;
   ASN1TDynOctStr originatorSignatureValue;
   ASN1T_ETSI101733_ContentReference ();
   ASN1T_ETSI101733_ContentReference (ASN1C_ETSI101733_ContentReference& srcData);
   ~ASN1T_ETSI101733_ContentReference ();
} ;

class EXTERN ASN1C_ETSI101733_ContentReference :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_ContentReference& msgData;
public:
   ASN1C_ETSI101733_ContentReference (ASN1T_ETSI101733_ContentReference& data);
   ASN1C_ETSI101733_ContentReference (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_ContentReference& data);
   ASN1C_ETSI101733_ContentReference (OSRTContext &context
      , ASN1T_ETSI101733_ContentReference& data);
   ASN1C_ETSI101733_ContentReference (ASN1C_ETSI101733_ContentReference& original);
   virtual ~ASN1C_ETSI101733_ContentReference () {}
   inline ASN1T_ETSI101733_ContentReference& getData () { return msgData; }
   inline const ASN1T_ETSI101733_ContentReference& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentReference");
   int toStream (const char* name = "ContentReference");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_ContentReference* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_ContentReference& getCopy (ASN1T_ETSI101733_ContentReference* pDstData = 0);
   ASN1T_ETSI101733_ContentReference* newCopy ();

   inline ASN1C_ETSI101733_ContentReference& operator= (ASN1C_ETSI101733_ContentReference& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_ContentReference (OSCTXT* pctxt,
   ASN1T_ETSI101733_ContentReference *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_ContentReference (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentReference* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_ContentReference 
   (const char* name, const ASN1T_ETSI101733_ContentReference* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_ContentReference (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ContentReference* pvalue);

EXTERN ASN1T_ETSI101733_ContentReference* 
   new_ASN1T_ETSI101733_ContentReference (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_ContentReference (const char* name, 
   ASN1T_ETSI101733_ContentReference* pValue, 
   ASN1T_ETSI101733_ContentReference* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_ContentReference (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentReference* pSrcValue, 
   ASN1T_ETSI101733_ContentReference* pDstValue);

EXTERN void asn1Init_ETSI101733_ContentReference (
   ASN1T_ETSI101733_ContentReference* pvalue);

EXTERN void asn1Free_ETSI101733_ContentReference (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ContentReference* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentHints                                              */
/*                                                            */
/**************************************************************/
/*
ContentHints

ContentHints ::= SEQUENCE {
   contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,
   contentType ContentType
}
*/
#define TV_ETSI101733_ContentHints	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_ContentHints;

struct EXTERN ASN1T_ETSI101733_ContentHints : public ASN1TPDU {
   struct {
      unsigned contentDescriptionPresent : 1;
   } m;
   const OSUTF8CHAR* contentDescription;
   ASN1T_CMS_ContentType contentType;
   ASN1T_ETSI101733_ContentHints ();
   ASN1T_ETSI101733_ContentHints (ASN1C_ETSI101733_ContentHints& srcData);
   ~ASN1T_ETSI101733_ContentHints ();
} ;

class EXTERN ASN1C_ETSI101733_ContentHints :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_ContentHints& msgData;
public:
   ASN1C_ETSI101733_ContentHints (ASN1T_ETSI101733_ContentHints& data);
   ASN1C_ETSI101733_ContentHints (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_ContentHints& data);
   ASN1C_ETSI101733_ContentHints (OSRTContext &context
      , ASN1T_ETSI101733_ContentHints& data);
   ASN1C_ETSI101733_ContentHints (ASN1C_ETSI101733_ContentHints& original);
   virtual ~ASN1C_ETSI101733_ContentHints () {}
   inline ASN1T_ETSI101733_ContentHints& getData () { return msgData; }
   inline const ASN1T_ETSI101733_ContentHints& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentHints");
   int toStream (const char* name = "ContentHints");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_ContentHints* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_ContentHints& getCopy (ASN1T_ETSI101733_ContentHints* pDstData = 0);
   ASN1T_ETSI101733_ContentHints* newCopy ();

   inline ASN1C_ETSI101733_ContentHints& operator= (ASN1C_ETSI101733_ContentHints& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_ContentHints (OSCTXT* pctxt,
   ASN1T_ETSI101733_ContentHints *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_ContentHints (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentHints* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_ContentHints 
   (const char* name, const ASN1T_ETSI101733_ContentHints* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_ContentHints (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ContentHints* pvalue);

EXTERN ASN1T_ETSI101733_ContentHints* 
   new_ASN1T_ETSI101733_ContentHints (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_ContentHints (const char* name, 
   ASN1T_ETSI101733_ContentHints* pValue, 
   ASN1T_ETSI101733_ContentHints* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_ContentHints (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentHints* pSrcValue, ASN1T_ETSI101733_ContentHints*
    pDstValue);

EXTERN void asn1Init_ETSI101733_ContentHints (ASN1T_ETSI101733_ContentHints* pvalue);

EXTERN void asn1Free_ETSI101733_ContentHints (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ContentHints* pvalue);

/**************************************************************/
/*                                                            */
/*  CommitmentTypeQualifier                                   */
/*                                                            */
/**************************************************************/
/*
CommitmentTypeQualifier ::= SEQUENCE {
   commitmentTypeIdentifier CommitmentTypeIdentifier,
   qualifier ANY
}
*/
#define TV_ETSI101733_CommitmentTypeQualifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CommitmentTypeQualifier;

struct EXTERN ASN1T_ETSI101733_CommitmentTypeQualifier : public ASN1TPDU {
   ASN1T_ETSI101733_CommitmentTypeIdentifier commitmentTypeIdentifier;
   ASN1TOpenType qualifier;
   ASN1T_ETSI101733_CommitmentTypeQualifier ();
   ASN1T_ETSI101733_CommitmentTypeQualifier (ASN1C_ETSI101733_CommitmentTypeQualifier& srcData);
   ~ASN1T_ETSI101733_CommitmentTypeQualifier ();
} ;

class EXTERN ASN1C_ETSI101733_CommitmentTypeQualifier :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_CommitmentTypeQualifier& msgData;
public:
   ASN1C_ETSI101733_CommitmentTypeQualifier
       (ASN1T_ETSI101733_CommitmentTypeQualifier& data);
   ASN1C_ETSI101733_CommitmentTypeQualifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CommitmentTypeQualifier& data);
   ASN1C_ETSI101733_CommitmentTypeQualifier (OSRTContext &context
      , ASN1T_ETSI101733_CommitmentTypeQualifier& data);
   ASN1C_ETSI101733_CommitmentTypeQualifier (ASN1C_ETSI101733_CommitmentTypeQualifier& original);
   virtual ~ASN1C_ETSI101733_CommitmentTypeQualifier () {}
   inline ASN1T_ETSI101733_CommitmentTypeQualifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CommitmentTypeQualifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CommitmentTypeQualifier");
   int toStream (const char* name = "CommitmentTypeQualifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CommitmentTypeQualifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CommitmentTypeQualifier& getCopy (ASN1T_ETSI101733_CommitmentTypeQualifier* pDstData = 0);
   ASN1T_ETSI101733_CommitmentTypeQualifier* newCopy ();

   inline ASN1C_ETSI101733_CommitmentTypeQualifier& operator= (ASN1C_ETSI101733_CommitmentTypeQualifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_CommitmentTypeQualifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_CommitmentTypeQualifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CommitmentTypeQualifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_CommitmentTypeQualifier 
   (const char* name, const ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CommitmentTypeQualifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue);

EXTERN ASN1T_ETSI101733_CommitmentTypeQualifier* 
   new_ASN1T_ETSI101733_CommitmentTypeQualifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_CommitmentTypeQualifier (const char* name, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pValue, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CommitmentTypeQualifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pSrcValue, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pDstValue);

EXTERN void asn1Init_ETSI101733_CommitmentTypeQualifier (
   ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue);

EXTERN void asn1Free_ETSI101733_CommitmentTypeQualifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CommitmentTypeIndication_commitmentTypeQualifier          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'CommitmentTypeIndication'
*/
class EXTERN ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier;

/* List of ASN1T_ETSI101733_CommitmentTypeQualifier */
typedef struct EXTERN ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier();
} ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier;

class EXTERN ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& msgData;
public:
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier
       (ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& data);
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& data
      );
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (ASN1CType& ccobj
      , ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& data
      );
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
      OSRTContext &context
      , ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& data
      );
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& original);
   virtual ~ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier () {}
   inline ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CommitmentTypeIndication_commitmentTypeQualifier");
   int toStream (const char* name = "CommitmentTypeIndication_commitmentTypeQualifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& getCopy (ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pDstData = 0);
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* newCopy ();

   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& operator= (ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& srcData);
   void Append (ASN1T_ETSI101733_CommitmentTypeQualifier* elem);
   ASN1T_ETSI101733_CommitmentTypeQualifier* NewElement ();
   ASN1T_ETSI101733_CommitmentTypeQualifier* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
   OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier 
   (const char* name, const ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
   const char* name, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pValue, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pSrcValue, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier*
    pDstValue);

EXTERN void asn1Init_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue);

EXTERN void asn1Free_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CommitmentTypeIndication                                  */
/*                                                            */
/**************************************************************/
/*
CommitmentTypeIndication

CommitmentTypeIndication ::= SEQUENCE {
   commitmentTypeId CommitmentTypeIdentifier,
   commitmentTypeQualifier SEQUENCE (SIZE (1..MAX)) OF CommitmentTypeQualifier OPTIONAL
}
*/
#define TV_ETSI101733_CommitmentTypeIndication	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_CommitmentTypeIndication;

struct EXTERN ASN1T_ETSI101733_CommitmentTypeIndication : public ASN1TPDU {
   struct {
      unsigned commitmentTypeQualifierPresent : 1;
   } m;
   ASN1T_ETSI101733_CommitmentTypeIdentifier commitmentTypeId;
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier commitmentTypeQualifier;
   ASN1T_ETSI101733_CommitmentTypeIndication ();
   ASN1T_ETSI101733_CommitmentTypeIndication (ASN1C_ETSI101733_CommitmentTypeIndication& srcData);
   ~ASN1T_ETSI101733_CommitmentTypeIndication ();
} ;

class EXTERN ASN1C_ETSI101733_CommitmentTypeIndication :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_CommitmentTypeIndication& msgData;
public:
   ASN1C_ETSI101733_CommitmentTypeIndication
       (ASN1T_ETSI101733_CommitmentTypeIndication& data);
   ASN1C_ETSI101733_CommitmentTypeIndication (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_CommitmentTypeIndication& data);
   ASN1C_ETSI101733_CommitmentTypeIndication (OSRTContext &context
      , ASN1T_ETSI101733_CommitmentTypeIndication& data);
   ASN1C_ETSI101733_CommitmentTypeIndication (ASN1C_ETSI101733_CommitmentTypeIndication& original);
   virtual ~ASN1C_ETSI101733_CommitmentTypeIndication () {}
   inline ASN1T_ETSI101733_CommitmentTypeIndication& getData () { return msgData; }
   inline const ASN1T_ETSI101733_CommitmentTypeIndication& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CommitmentTypeIndication");
   int toStream (const char* name = "CommitmentTypeIndication");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_CommitmentTypeIndication* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_CommitmentTypeIndication& getCopy (ASN1T_ETSI101733_CommitmentTypeIndication* pDstData = 0);
   ASN1T_ETSI101733_CommitmentTypeIndication* newCopy ();

   inline ASN1C_ETSI101733_CommitmentTypeIndication& operator= (ASN1C_ETSI101733_CommitmentTypeIndication& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_CommitmentTypeIndication (OSCTXT* pctxt,
   ASN1T_ETSI101733_CommitmentTypeIndication *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_CommitmentTypeIndication (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_CommitmentTypeIndication 
   (const char* name, const ASN1T_ETSI101733_CommitmentTypeIndication* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_CommitmentTypeIndication (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CommitmentTypeIndication* pvalue);

EXTERN ASN1T_ETSI101733_CommitmentTypeIndication* 
   new_ASN1T_ETSI101733_CommitmentTypeIndication (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_CommitmentTypeIndication (const char* name, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pValue, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_CommitmentTypeIndication (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pSrcValue, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pDstValue);

EXTERN void asn1Init_ETSI101733_CommitmentTypeIndication (
   ASN1T_ETSI101733_CommitmentTypeIndication* pvalue);

EXTERN void asn1Free_ETSI101733_CommitmentTypeIndication (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pvalue);

/**************************************************************/
/*                                                            */
/*  PostalAddress                                             */
/*                                                            */
/**************************************************************/
/*
PostalAddress ::= SEQUENCE (SIZE (1..6)) OF DirectoryString
*/
#define TV_ETSI101733_PostalAddress	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_PostalAddress;

/* List of ASN1T_EXP_DirectoryString */
typedef struct EXTERN ASN1T_ETSI101733_PostalAddress : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_PostalAddress();
} ASN1T_ETSI101733_PostalAddress;

class EXTERN ASN1C_ETSI101733_PostalAddress :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_PostalAddress& msgData;
public:
   ASN1C_ETSI101733_PostalAddress (ASN1T_ETSI101733_PostalAddress& data);
   ASN1C_ETSI101733_PostalAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_PostalAddress& data);
   ASN1C_ETSI101733_PostalAddress (ASN1CType& ccobj
      , ASN1T_ETSI101733_PostalAddress& data);
   ASN1C_ETSI101733_PostalAddress (OSRTContext &context
      , ASN1T_ETSI101733_PostalAddress& data);
   ASN1C_ETSI101733_PostalAddress (ASN1C_ETSI101733_PostalAddress& original);
   virtual ~ASN1C_ETSI101733_PostalAddress () {}
   inline ASN1T_ETSI101733_PostalAddress& getData () { return msgData; }
   inline const ASN1T_ETSI101733_PostalAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PostalAddress");
   int toStream (const char* name = "PostalAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_PostalAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_PostalAddress& getCopy (ASN1T_ETSI101733_PostalAddress* pDstData = 0);
   ASN1T_ETSI101733_PostalAddress* newCopy ();

   ASN1C_ETSI101733_PostalAddress& operator= (ASN1C_ETSI101733_PostalAddress& srcData);
   void Append (ASN1T_EXP_DirectoryString* elem);
   ASN1T_EXP_DirectoryString* NewElement ();
   ASN1T_EXP_DirectoryString* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_PostalAddress (OSCTXT* pctxt,
   ASN1T_ETSI101733_PostalAddress *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_PostalAddress (OSCTXT* pctxt, 
   ASN1T_ETSI101733_PostalAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_PostalAddress 
   (const char* name, const ASN1T_ETSI101733_PostalAddress* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_PostalAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_PostalAddress* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_PostalAddress (const char* name, 
   ASN1T_ETSI101733_PostalAddress* pValue, 
   ASN1T_ETSI101733_PostalAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_PostalAddress (OSCTXT* pctxt, 
   ASN1T_ETSI101733_PostalAddress* pSrcValue, ASN1T_ETSI101733_PostalAddress*
    pDstValue);

EXTERN void asn1Init_ETSI101733_PostalAddress (ASN1T_ETSI101733_PostalAddress* pvalue);

EXTERN void asn1Free_ETSI101733_PostalAddress (OSCTXT *pctxt, 
   ASN1T_ETSI101733_PostalAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerLocation                                            */
/*                                                            */
/**************************************************************/
/*
SignerLocation

SignerLocation ::= SEQUENCE {
   countryName [0] DirectoryString OPTIONAL,
   localityName [1] DirectoryString OPTIONAL,
   postalAdddress [2] PostalAddress OPTIONAL
}
*/
#define TV_ETSI101733_SignerLocation	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_SignerLocation;

struct EXTERN ASN1T_ETSI101733_SignerLocation : public ASN1TPDU {
   struct {
      unsigned countryNamePresent : 1;
      unsigned localityNamePresent : 1;
      unsigned postalAdddressPresent : 1;
   } m;
   ASN1T_EXP_DirectoryString countryName;
   ASN1T_EXP_DirectoryString localityName;
   ASN1T_ETSI101733_PostalAddress postalAdddress;
   ASN1T_ETSI101733_SignerLocation ();
   ASN1T_ETSI101733_SignerLocation (ASN1C_ETSI101733_SignerLocation& srcData);
   ~ASN1T_ETSI101733_SignerLocation ();
} ;

class EXTERN ASN1C_ETSI101733_SignerLocation :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_SignerLocation& msgData;
public:
   ASN1C_ETSI101733_SignerLocation (ASN1T_ETSI101733_SignerLocation& data);
   ASN1C_ETSI101733_SignerLocation (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SignerLocation& data);
   ASN1C_ETSI101733_SignerLocation (OSRTContext &context
      , ASN1T_ETSI101733_SignerLocation& data);
   ASN1C_ETSI101733_SignerLocation (ASN1C_ETSI101733_SignerLocation& original);
   virtual ~ASN1C_ETSI101733_SignerLocation () {}
   inline ASN1T_ETSI101733_SignerLocation& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SignerLocation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignerLocation");
   int toStream (const char* name = "SignerLocation");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SignerLocation* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SignerLocation& getCopy (ASN1T_ETSI101733_SignerLocation* pDstData = 0);
   ASN1T_ETSI101733_SignerLocation* newCopy ();

   inline ASN1C_ETSI101733_SignerLocation& operator= (ASN1C_ETSI101733_SignerLocation& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SignerLocation (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignerLocation *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SignerLocation (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerLocation* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SignerLocation 
   (const char* name, const ASN1T_ETSI101733_SignerLocation* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SignerLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignerLocation* pvalue);

EXTERN ASN1T_ETSI101733_SignerLocation* 
   new_ASN1T_ETSI101733_SignerLocation (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SignerLocation (const char* name, 
   ASN1T_ETSI101733_SignerLocation* pValue, 
   ASN1T_ETSI101733_SignerLocation* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SignerLocation (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerLocation* pSrcValue, ASN1T_ETSI101733_SignerLocation*
    pDstValue);

EXTERN void asn1Init_ETSI101733_SignerLocation (
   ASN1T_ETSI101733_SignerLocation* pvalue);

EXTERN void asn1Free_ETSI101733_SignerLocation (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignerLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  ClaimedAttributes                                         */
/*                                                            */
/**************************************************************/
/*
ClaimedAttributes ::= SEQUENCE OF Attribute
*/
#define TV_ETSI101733_ClaimedAttributes	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_ClaimedAttributes;

/* List of ASN1T_EXP_Attribute */
typedef struct EXTERN ASN1T_ETSI101733_ClaimedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_ClaimedAttributes();
} ASN1T_ETSI101733_ClaimedAttributes;

class EXTERN ASN1C_ETSI101733_ClaimedAttributes :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_ClaimedAttributes& msgData;
public:
   ASN1C_ETSI101733_ClaimedAttributes
       (ASN1T_ETSI101733_ClaimedAttributes& data);
   ASN1C_ETSI101733_ClaimedAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_ClaimedAttributes& data);
   ASN1C_ETSI101733_ClaimedAttributes (ASN1CType& ccobj
      , ASN1T_ETSI101733_ClaimedAttributes& data);
   ASN1C_ETSI101733_ClaimedAttributes (OSRTContext &context
      , ASN1T_ETSI101733_ClaimedAttributes& data);
   ASN1C_ETSI101733_ClaimedAttributes (ASN1C_ETSI101733_ClaimedAttributes& original);
   virtual ~ASN1C_ETSI101733_ClaimedAttributes () {}
   inline ASN1T_ETSI101733_ClaimedAttributes& getData () { return msgData; }
   inline const ASN1T_ETSI101733_ClaimedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ClaimedAttributes");
   int toStream (const char* name = "ClaimedAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_ClaimedAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_ClaimedAttributes& getCopy (ASN1T_ETSI101733_ClaimedAttributes* pDstData = 0);
   ASN1T_ETSI101733_ClaimedAttributes* newCopy ();

   ASN1C_ETSI101733_ClaimedAttributes& operator= (ASN1C_ETSI101733_ClaimedAttributes& srcData);
   void Append (ASN1T_EXP_Attribute* elem);
   ASN1T_EXP_Attribute* NewElement ();
   ASN1T_EXP_Attribute* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_ClaimedAttributes (OSCTXT* pctxt,
   ASN1T_ETSI101733_ClaimedAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_ClaimedAttributes (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ClaimedAttributes* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_ClaimedAttributes 
   (const char* name, const ASN1T_ETSI101733_ClaimedAttributes* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_ClaimedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ClaimedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_ClaimedAttributes (const char* name, 
   ASN1T_ETSI101733_ClaimedAttributes* pValue, 
   ASN1T_ETSI101733_ClaimedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_ClaimedAttributes (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ClaimedAttributes* pSrcValue, 
   ASN1T_ETSI101733_ClaimedAttributes* pDstValue);

EXTERN void asn1Init_ETSI101733_ClaimedAttributes (
   ASN1T_ETSI101733_ClaimedAttributes* pvalue);

EXTERN void asn1Free_ETSI101733_ClaimedAttributes (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ClaimedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerAttribute_element                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignerAttribute'
*/
/* Choice context tags */

#define TVC_ETSI101733_SignerAttribute_element_claimedAttributes	(TM_CTXT|TM_CONS|0)
#define TVC_ETSI101733_SignerAttribute_element_certifiedAttributes	(TM_CTXT|TM_CONS|1)

/* Choice tag constants */

#define T_ETSI101733_SignerAttribute_element_claimedAttributes 1
#define T_ETSI101733_SignerAttribute_element_certifiedAttributes 2

class EXTERN ASN1C_ETSI101733_SignerAttribute_element;

struct EXTERN ASN1T_ETSI101733_SignerAttribute_element : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_ETSI101733_ClaimedAttributes *claimedAttributes;
      /* t = 2 */
      ASN1T_ETSI101733_CertifiedAttributes *certifiedAttributes;
   } u;
   ASN1T_ETSI101733_SignerAttribute_element () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ETSI101733_SignerAttribute_element (ASN1C_ETSI101733_SignerAttribute_element& srcData);
   ~ASN1T_ETSI101733_SignerAttribute_element ();
} ;

class EXTERN ASN1C_ETSI101733_SignerAttribute_element :
public ASN1CType
{
protected:
   ASN1T_ETSI101733_SignerAttribute_element& msgData;
public:
   ASN1C_ETSI101733_SignerAttribute_element
       (ASN1T_ETSI101733_SignerAttribute_element& data);
   ASN1C_ETSI101733_SignerAttribute_element (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SignerAttribute_element& data);
   ASN1C_ETSI101733_SignerAttribute_element (OSRTContext &context
      , ASN1T_ETSI101733_SignerAttribute_element& data);
   ASN1C_ETSI101733_SignerAttribute_element (ASN1C_ETSI101733_SignerAttribute_element& original);
   virtual ~ASN1C_ETSI101733_SignerAttribute_element () {}
   inline ASN1T_ETSI101733_SignerAttribute_element& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SignerAttribute_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignerAttribute_element");
   int toStream (const char* name = "SignerAttribute_element");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SignerAttribute_element* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SignerAttribute_element& getCopy (ASN1T_ETSI101733_SignerAttribute_element* pDstData = 0);
   ASN1T_ETSI101733_SignerAttribute_element* newCopy ();

   inline ASN1C_ETSI101733_SignerAttribute_element& operator= (ASN1C_ETSI101733_SignerAttribute_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSI101733_SignerAttribute_element (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignerAttribute_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SignerAttribute_element (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerAttribute_element* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_ETSI101733_SignerAttribute_element 
   (const char* name, const ASN1T_ETSI101733_SignerAttribute_element* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SignerAttribute_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignerAttribute_element* pvalue);

EXTERN ASN1T_ETSI101733_SignerAttribute_element* 
   new_ASN1T_ETSI101733_SignerAttribute_element (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSI101733_SignerAttribute_element (const char* name, 
   ASN1T_ETSI101733_SignerAttribute_element* pValue, 
   ASN1T_ETSI101733_SignerAttribute_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SignerAttribute_element (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerAttribute_element* pSrcValue, 
   ASN1T_ETSI101733_SignerAttribute_element* pDstValue);

EXTERN void asn1Init_ETSI101733_SignerAttribute_element (
   ASN1T_ETSI101733_SignerAttribute_element* pvalue);

EXTERN void asn1Free_ETSI101733_SignerAttribute_element (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignerAttribute_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerAttribute                                           */
/*                                                            */
/**************************************************************/
/*
SignerAttribute

SignerAttribute ::= SEQUENCE OF CHOICE {
   claimedAttributes [0] ClaimedAttributes,
   certifiedAttributes [1] CertifiedAttributes
}
*/
#define TV_ETSI101733_SignerAttribute	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSI101733_SignerAttribute;

/* List of ASN1T_ETSI101733_SignerAttribute_element */
typedef struct EXTERN ASN1T_ETSI101733_SignerAttribute : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733_SignerAttribute();
} ASN1T_ETSI101733_SignerAttribute;

class EXTERN ASN1C_ETSI101733_SignerAttribute :
public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733_SignerAttribute& msgData;
public:
   ASN1C_ETSI101733_SignerAttribute (ASN1T_ETSI101733_SignerAttribute& data);
   ASN1C_ETSI101733_SignerAttribute (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSI101733_SignerAttribute& data);
   ASN1C_ETSI101733_SignerAttribute (ASN1CType& ccobj
      , ASN1T_ETSI101733_SignerAttribute& data);
   ASN1C_ETSI101733_SignerAttribute (OSRTContext &context
      , ASN1T_ETSI101733_SignerAttribute& data);
   ASN1C_ETSI101733_SignerAttribute (ASN1C_ETSI101733_SignerAttribute& original);
   virtual ~ASN1C_ETSI101733_SignerAttribute () {}
   inline ASN1T_ETSI101733_SignerAttribute& getData () { return msgData; }
   inline const ASN1T_ETSI101733_SignerAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignerAttribute");
   int toStream (const char* name = "SignerAttribute");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSI101733_SignerAttribute* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSI101733_SignerAttribute& getCopy (ASN1T_ETSI101733_SignerAttribute* pDstData = 0);
   ASN1T_ETSI101733_SignerAttribute* newCopy ();

   ASN1C_ETSI101733_SignerAttribute& operator= (ASN1C_ETSI101733_SignerAttribute& srcData);
   void Append (ASN1T_ETSI101733_SignerAttribute_element* elem);
   ASN1T_ETSI101733_SignerAttribute_element* NewElement ();
   ASN1T_ETSI101733_SignerAttribute_element* AppendNewElement ();
} ;

EXTERN int asn1E_ETSI101733_SignerAttribute (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignerAttribute *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSI101733_SignerAttribute (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerAttribute* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSI101733_SignerAttribute 
   (const char* name, const ASN1T_ETSI101733_SignerAttribute* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733_SignerAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignerAttribute* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733_SignerAttribute (const char* name, 
   ASN1T_ETSI101733_SignerAttribute* pValue, 
   ASN1T_ETSI101733_SignerAttribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSI101733_SignerAttribute (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerAttribute* pSrcValue, 
   ASN1T_ETSI101733_SignerAttribute* pDstValue);

EXTERN void asn1Init_ETSI101733_SignerAttribute (
   ASN1T_ETSI101733_SignerAttribute* pvalue);

EXTERN void asn1Free_ETSI101733_SignerAttribute (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignerAttribute* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_otherSigCert;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_sigPolicyId;
extern EXTERN ASN1OBJID ETSI101733_id_spq_ets_uri;
extern EXTERN ASN1OBJID ETSI101733_id_spq_ets_unotice;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_contentTimestamp;
extern EXTERN ASN1OBJID ETSI101733_id_aa_signatureTimeStampToken;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_certificateRefs;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_revocationRefs;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_certValues;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_revocationValues;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_escTimeStamp;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_certCRLTimestamp;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_archiveTimestamp;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_attrCertificateRefs;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_attrRevocationRefs;
extern EXTERN ASN1OBJID ETSI101733_id_aa_contentIdentifier;
extern EXTERN ASN1OBJID ETSI101733_id_aa_contentReference;
extern EXTERN ASN1OBJID ETSI101733_id_aa_contentHint;
extern EXTERN ASN1OBJID ETSI101733_id_cti_ets_proofOfOrigin;
extern EXTERN ASN1OBJID ETSI101733_id_cti_ets_proofOfReceipt;
extern EXTERN ASN1OBJID ETSI101733_id_cti_ets_proofOfDelivery;
extern EXTERN ASN1OBJID ETSI101733_id_cti_ets_proofOfSender;
extern EXTERN ASN1OBJID ETSI101733_id_cti_ets_proofOfApproval;
extern EXTERN ASN1OBJID ETSI101733_id_cti_ets_proofOfCreation;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_commitmentType;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_signerLocation;
extern EXTERN ASN1OBJID ETSI101733_id_aa_ets_signerAttr;

#endif
