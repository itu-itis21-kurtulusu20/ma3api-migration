/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "etsi101733.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_ETSI101733_OtherHashValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherHashValue* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_ETSI101733_OtherHashValue::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherHashValue (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherHashValue::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SignaturePolicyImplied_ (OSCTXT *pctxt, 
   const char* name, const void* pvalue)
{
   OS_UNUSED_ARG (pvalue);
   rtPrintToStreamIndent (pctxt);
   rtxPrintToStreamNull (pctxt, name);
   return 0;
}

int ASN1C_ETSI101733_SignaturePolicyImplied::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SignaturePolicyImplied (getCtxtPtr(), name);
   return 0;
}

int ASN1C_ETSI101733_SignaturePolicyImplied::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SigPolicyId (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SigPolicyId* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_ETSI101733_SigPolicyId::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SigPolicyId (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SigPolicyId::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OtherHashAlgAndValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "hashAlgorithm", &pvalue->hashAlgorithm);

   asn1PrtToStrm_ETSI101733_OtherHashValue (pctxt, "hashValue", &pvalue->hashValue);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OtherHashAlgAndValue::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherHashAlgAndValue (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherHashAlgAndValue::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SigPolicyHash (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SigPolicyHash* pvalue)
{
   asn1PrtToStrm_ETSI101733_OtherHashAlgAndValue (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ETSI101733_SigPolicyHash::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SigPolicyHash (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SigPolicyHash::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SPuri (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SPuri pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ETSI101733_SPuri::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SPuri (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_ETSI101733_SPuri::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_ContentTimestamp (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ContentTimestamp* pvalue)
{
   asn1PrtToStrm_TSP_TimeStampToken (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ETSI101733_ContentTimestamp::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_ContentTimestamp (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_ContentTimestamp::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SignatureTimeStampToken (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignatureTimeStampToken* pvalue)
{
   asn1PrtToStrm_TSP_TimeStampToken (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ETSI101733_SignatureTimeStampToken::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SignatureTimeStampToken (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SignatureTimeStampToken::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_ESCTimeStampToken (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ESCTimeStampToken* pvalue)
{
   asn1PrtToStrm_TSP_TimeStampToken (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ETSI101733_ESCTimeStampToken::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_ESCTimeStampToken (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_ESCTimeStampToken::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_TimestampedCertsCRLs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue)
{
   asn1PrtToStrm_TSP_TimeStampToken (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ETSI101733_TimestampedCertsCRLs::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_TimestampedCertsCRLs (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_TimestampedCertsCRLs::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_ArchiveTimeStampToken (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue)
{
   asn1PrtToStrm_TSP_TimeStampToken (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ETSI101733_ArchiveTimeStampToken::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_ArchiveTimeStampToken (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_ArchiveTimeStampToken::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_ContentIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ContentIdentifier* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_ETSI101733_ContentIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_ContentIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_ContentIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CommitmentTypeIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CommitmentTypeIdentifier* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_ETSI101733_CommitmentTypeIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CommitmentTypeIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CommitmentTypeIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CertifiedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CertifiedAttributes* pvalue)
{
   asn1PrtToStrm_ATTRCERT_AttributeCertificate (pctxt, name, pvalue);
   return 0;
}

int ASN1C_ETSI101733_CertifiedAttributes::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CertifiedAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CertifiedAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OtherHash (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherHash* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* sha1Hash */
      case 1:
      {
         asn1PrtToStrm_ETSI101733_OtherHashValue (pctxt, "sha1Hash", pvalue->u.sha1Hash);
         break;
      }
      /* otherHash */
      case 2:
      {
         asn1PrtToStrm_ETSI101733_OtherHashAlgAndValue (pctxt, "otherHash", pvalue->u.otherHash);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OtherHash::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherHash (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherHash::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OtherCertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherCertID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733_OtherHash (pctxt, "otherCertHash", &pvalue->otherCertHash);

   if (pvalue->m.issuerSerialPresent) {
      asn1PrtToStrm_ATTRCERT_IssuerSerial (pctxt, "issuerSerial", &pvalue->issuerSerial);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OtherCertID::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherCertID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherCertID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue)
{
   ASN1T_ETSI101733_OtherCertID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_OtherCertID (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_OtherCertID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue)
{
   ASN1T_IMP_PolicyInformation* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_PolicyInformation*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_PolicyInformation (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_PolicyInformation (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OtherSigningCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherSigningCertificate* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_OtherCertID (pctxt, "certs", &pvalue->certs);

   if (pvalue->m.policiesPresent) {
      asn1PrtToStrm_ETSI101733__SeqOfETSI101733_PolicyInformation (pctxt, "policies", &pvalue->policies);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OtherSigningCertificate::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherSigningCertificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherSigningCertificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SigPolicyQualifierInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "sigPolicyQualifierId", (ASN1OBJID*)&pvalue->sigPolicyQualifierId);

   if (pvalue->m.qualifierPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "qualifier",
         pvalue->qualifier.numocts, pvalue->qualifier.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_SigPolicyQualifierInfo::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SigPolicyQualifierInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SigPolicyQualifierInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue)
{
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_SigPolicyQualifierInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_SigPolicyQualifierInfo (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SignaturePolicyId (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignaturePolicyId* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733_SigPolicyId (pctxt, "sigPolicyId", &pvalue->sigPolicyId);

   asn1PrtToStrm_ETSI101733_SigPolicyHash (pctxt, "sigPolicyHash", &pvalue->sigPolicyHash);

   if (pvalue->m.sigPolicyQualifiersPresent) {
      asn1PrtToStrm_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (pctxt, "sigPolicyQualifiers", &pvalue->sigPolicyQualifiers);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_SignaturePolicyId::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SignaturePolicyId (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SignaturePolicyId::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SignaturePolicy (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignaturePolicy* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* signaturePolicyImplied */
      case 1:
      {
         break;
      }
      /* signaturePolicyId */
      case 2:
      {
         asn1PrtToStrm_ETSI101733_SignaturePolicyId (pctxt, "signaturePolicyId", pvalue->u.signaturePolicyId);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_SignaturePolicy::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SignaturePolicy (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SignaturePolicy::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_DisplayText (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_DisplayText* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* visibleString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "visibleString", pvalue->u.visibleString);
         break;
      }
      /* bmpString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_DisplayText::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_DisplayText (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_DisplayText::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_NoticeReference_noticeNumbers (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue)
{
   OSINT32* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (OSINT32*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamInteger (pctxt, namebuf, *pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_NoticeReference_noticeNumbers::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_NoticeReference_noticeNumbers (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_NoticeReference_noticeNumbers::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_NoticeReference (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_NoticeReference* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733_DisplayText (pctxt, "organization", &pvalue->organization);

   asn1PrtToStrm_ETSI101733_NoticeReference_noticeNumbers (pctxt, "noticeNumbers", &pvalue->noticeNumbers);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_NoticeReference::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_NoticeReference (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_NoticeReference::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SPUserNotice (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SPUserNotice* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.noticeRefPresent) {
      asn1PrtToStrm_ETSI101733_NoticeReference (pctxt, "noticeRef", &pvalue->noticeRef);
   }

   if (pvalue->m.explicitTextPresent) {
      asn1PrtToStrm_ETSI101733_DisplayText (pctxt, "explicitText", &pvalue->explicitText);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_SPUserNotice::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SPUserNotice (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SPUserNotice::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CompleteCertificateRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CompleteCertificateRefs* pvalue)
{
   ASN1T_ETSI101733_OtherCertID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_OtherCertID (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_CompleteCertificateRefs::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CompleteCertificateRefs (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CompleteCertificateRefs::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CrlIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CrlIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_Name (pctxt, "crlissuer", &pvalue->crlissuer);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "crlIssuedTime", pvalue->crlIssuedTime);

   if (pvalue->m.crlNumberPresent) {
      asn1PrtToStrm_IMP_CRLNumber (pctxt, "crlNumber", &pvalue->crlNumber);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_CrlIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CrlIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CrlIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CrlValidatedID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CrlValidatedID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733_OtherHash (pctxt, "crlHash", &pvalue->crlHash);

   if (pvalue->m.crlIdentifierPresent) {
      asn1PrtToStrm_ETSI101733_CrlIdentifier (pctxt, "crlIdentifier", &pvalue->crlIdentifier);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_CrlValidatedID::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CrlValidatedID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CrlValidatedID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue)
{
   ASN1T_ETSI101733_CrlValidatedID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_CrlValidatedID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_CrlValidatedID (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_CrlValidatedID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CRLListID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CRLListID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_CrlValidatedID (pctxt, "crls", &pvalue->crls);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_CRLListID::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CRLListID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CRLListID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OcspIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OcspIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_OCSP_ResponderID (pctxt, "ocspResponderID", &pvalue->ocspResponderID);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "producedAt", pvalue->producedAt);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OcspIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OcspIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OcspIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OcspResponsesID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OcspResponsesID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733_OcspIdentifier (pctxt, "ocspIdentifier", &pvalue->ocspIdentifier);

   if (pvalue->m.ocspRepHashPresent) {
      asn1PrtToStrm_ETSI101733_OtherHash (pctxt, "ocspRepHash", &pvalue->ocspRepHash);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OcspResponsesID::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OcspResponsesID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OcspResponsesID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue)
{
   ASN1T_ETSI101733_OcspResponsesID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_OcspResponsesID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_OcspResponsesID (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_OcspResponsesID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OcspListID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OcspListID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_OcspResponsesID (pctxt, "ocspResponses", &pvalue->ocspResponses);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OcspListID::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OcspListID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OcspListID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue)
{
   ASN1TOpenType* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1TOpenType*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, namebuf,
         pdata0->numocts, pdata0->data);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherRevRefs_otherRevRefs (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OtherRevRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherRevRefs* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "otherRevRefType", (ASN1OBJID*)&pvalue->otherRevRefType);

   asn1PrtToStrm_ETSI101733_OtherRevRefs_otherRevRefs (pctxt, "otherRevRefs", &pvalue->otherRevRefs);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OtherRevRefs::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherRevRefs (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherRevRefs::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CrlOcspRef (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CrlOcspRef* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.crlidsPresent) {
      asn1PrtToStrm_ETSI101733_CRLListID (pctxt, "crlids", &pvalue->crlids);
   }

   if (pvalue->m.ocspidsPresent) {
      asn1PrtToStrm_ETSI101733_OcspListID (pctxt, "ocspids", &pvalue->ocspids);
   }

   if (pvalue->m.otherRevPresent) {
      asn1PrtToStrm_ETSI101733_OtherRevRefs (pctxt, "otherRev", &pvalue->otherRev);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_CrlOcspRef::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CrlOcspRef (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CrlOcspRef::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CompleteRevocationRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CompleteRevocationRefs* pvalue)
{
   ASN1T_ETSI101733_CrlOcspRef* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_CrlOcspRef*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_CrlOcspRef (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_CompleteRevocationRefs::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CompleteRevocationRefs (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CompleteRevocationRefs::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CertificateValues (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CertificateValues* pvalue)
{
   ASN1T_EXP_Certificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_Certificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_Certificate (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_CertificateValues::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CertificateValues (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CertificateValues::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue)
{
   ASN1T_EXP_CertificateList* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_CertificateList*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_CertificateList (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_CertificateList (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue)
{
   ASN1T_OCSP_BasicOCSPResponse* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_OCSP_BasicOCSPResponse*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_OCSP_BasicOCSPResponse (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OtherRevVals_otherRevVals (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue)
{
   ASN1TOpenType* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1TOpenType*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, namebuf,
         pdata0->numocts, pdata0->data);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_OtherRevVals_otherRevVals::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherRevVals_otherRevVals (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherRevVals_otherRevVals::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_OtherRevVals (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_OtherRevVals* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "otherRevValType", (ASN1OBJID*)&pvalue->otherRevValType);

   asn1PrtToStrm_ETSI101733_OtherRevVals_otherRevVals (pctxt, "otherRevVals", &pvalue->otherRevVals);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_OtherRevVals::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_OtherRevVals (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_OtherRevVals::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_RevocationValues (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_RevocationValues* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.crlValsPresent) {
      asn1PrtToStrm_ETSI101733__SeqOfETSI101733_CertificateList (pctxt, "crlVals", &pvalue->crlVals);
   }

   if (pvalue->m.ocspValsPresent) {
      asn1PrtToStrm_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (pctxt, "ocspVals", &pvalue->ocspVals);
   }

   if (pvalue->m.otherRevValsPresent) {
      asn1PrtToStrm_ETSI101733_OtherRevVals (pctxt, "otherRevVals", &pvalue->otherRevVals);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_RevocationValues::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_RevocationValues (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_RevocationValues::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_AttributeCertificateRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_AttributeCertificateRefs* pvalue)
{
   ASN1T_ETSI101733_OtherCertID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_OtherCertID (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_AttributeCertificateRefs::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_AttributeCertificateRefs (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_AttributeCertificateRefs::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_AttributeRevocationRefs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_AttributeRevocationRefs* pvalue)
{
   ASN1T_ETSI101733_CrlOcspRef* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_CrlOcspRef*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_CrlOcspRef (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_AttributeRevocationRefs::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_AttributeRevocationRefs (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_AttributeRevocationRefs::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_ContentReference (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ContentReference* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_ContentType (pctxt, "contentType", &pvalue->contentType);

   asn1PrtToStrm_ETSI101733_ContentIdentifier (pctxt, "signedContentIdentifier", &pvalue->signedContentIdentifier);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "originatorSignatureValue", pvalue->originatorSignatureValue.numocts, pvalue->originatorSignatureValue.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_ContentReference::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_ContentReference (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_ContentReference::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_ContentHints (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ContentHints* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.contentDescriptionPresent) {
      rtPrintToStreamIndent (pctxt);
      rtxPrintToStreamUTF8CharStr (pctxt, "contentDescription", pvalue->contentDescription);
   }

   asn1PrtToStrm_CMS_ContentType (pctxt, "contentType", &pvalue->contentType);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_ContentHints::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_ContentHints (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_ContentHints::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CommitmentTypeQualifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733_CommitmentTypeIdentifier (pctxt, "commitmentTypeIdentifier", &pvalue->commitmentTypeIdentifier);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "qualifier",
      pvalue->qualifier.numocts, pvalue->qualifier.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_CommitmentTypeQualifier::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CommitmentTypeQualifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CommitmentTypeQualifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue)
{
   ASN1T_ETSI101733_CommitmentTypeQualifier* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_CommitmentTypeQualifier*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_CommitmentTypeQualifier (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_CommitmentTypeIndication (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_CommitmentTypeIndication* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_ETSI101733_CommitmentTypeIdentifier (pctxt, "commitmentTypeId", &pvalue->commitmentTypeId);

   if (pvalue->m.commitmentTypeQualifierPresent) {
      asn1PrtToStrm_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (pctxt, "commitmentTypeQualifier", &pvalue->commitmentTypeQualifier);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_CommitmentTypeIndication::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_CommitmentTypeIndication (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_CommitmentTypeIndication::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_PostalAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_PostalAddress* pvalue)
{
   ASN1T_EXP_DirectoryString* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_DirectoryString*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_DirectoryString (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_PostalAddress::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_PostalAddress (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_PostalAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SignerLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignerLocation* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.countryNamePresent) {
      asn1PrtToStrm_EXP_DirectoryString (pctxt, "countryName", &pvalue->countryName);
   }

   if (pvalue->m.localityNamePresent) {
      asn1PrtToStrm_EXP_DirectoryString (pctxt, "localityName", &pvalue->localityName);
   }

   if (pvalue->m.postalAdddressPresent) {
      asn1PrtToStrm_ETSI101733_PostalAddress (pctxt, "postalAdddress", &pvalue->postalAdddress);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_SignerLocation::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SignerLocation (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SignerLocation::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_ClaimedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_ClaimedAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_Attribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_ClaimedAttributes::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_ClaimedAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_ClaimedAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SignerAttribute_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignerAttribute_element* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* claimedAttributes */
      case 1:
      {
         asn1PrtToStrm_ETSI101733_ClaimedAttributes (pctxt, "claimedAttributes", pvalue->u.claimedAttributes);
         break;
      }
      /* certifiedAttributes */
      case 2:
      {
         asn1PrtToStrm_ETSI101733_CertifiedAttributes (pctxt, "certifiedAttributes", pvalue->u.certifiedAttributes);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_ETSI101733_SignerAttribute_element::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SignerAttribute_element (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SignerAttribute_element::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_ETSI101733_SignerAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSI101733_SignerAttribute* pvalue)
{
   ASN1T_ETSI101733_SignerAttribute_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_ETSI101733_SignerAttribute_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_ETSI101733_SignerAttribute_element (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_ETSI101733_SignerAttribute::toStream (const char* name)

{
   asn1PrtToStrm_ETSI101733_SignerAttribute (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_ETSI101733_SignerAttribute::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

