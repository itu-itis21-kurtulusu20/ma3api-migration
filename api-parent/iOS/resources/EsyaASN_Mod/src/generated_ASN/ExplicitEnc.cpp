/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "Explicit.h"
#include "UsefulDefinitions.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_EXP_Version (OSCTXT* pctxt,
   ASN1T_EXP_Version *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Version");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_CertificateSerialNumber (OSCTXT* pctxt,
   ASN1T_EXP_CertificateSerialNumber *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertificateSerialNumber");

   ll = xe_bigint (pctxt, *pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_AttributeType (OSCTXT* pctxt,
   ASN1T_EXP_AttributeType *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AttributeType");

   ll = xe_objid (pctxt, (ASN1OBJID*)pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_AttributeValue (OSCTXT* pctxt,
   ASN1T_EXP_AttributeValue *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AttributeValue");

   ll = xe_OpenType (pctxt, pvalue->data, pvalue->numocts);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_UniqueIdentifier (OSCTXT* pctxt,
   ASN1T_EXP_UniqueIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "UniqueIdentifier");

   ll = xe_bitstr (pctxt, pvalue->data, pvalue->numbits, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X121Address (OSCTXT* pctxt,
   ASN1T_EXP_X121Address pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X121Address");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 16))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   { char c = (char) rtValidateStr (18, pvalue);
   if (c != 0) {
      char lbuf[2];
      lbuf[0] = c;
      lbuf[1] = 0;

      rtxErrAddElemNameParm (pctxt);
      rtxErrAddStrParm (pctxt, lbuf);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }
   }
   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|18);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_NetworkAddress (OSCTXT* pctxt,
   ASN1T_EXP_NetworkAddress pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "NetworkAddress");

   { char c = (char) rtValidateStr (18, pvalue);
   if (c != 0) {
      char lbuf[2];
      lbuf[0] = c;
      lbuf[1] = 0;

      rtxErrAddElemNameParm (pctxt);
      rtxErrAddStrParm (pctxt, lbuf);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }
   }
   ll = asn1E_EXP_X121Address (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TerminalIdentifier (OSCTXT* pctxt,
   ASN1T_EXP_TerminalIdentifier pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TerminalIdentifier");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 24))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_OrganizationName (OSCTXT* pctxt,
   ASN1T_EXP_OrganizationName pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OrganizationName");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_NumericUserIdentifier (OSCTXT* pctxt,
   ASN1T_EXP_NumericUserIdentifier pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "NumericUserIdentifier");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 32))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   { char c = (char) rtValidateStr (18, pvalue);
   if (c != 0) {
      char lbuf[2];
      lbuf[0] = c;
      lbuf[1] = 0;

      rtxErrAddElemNameParm (pctxt);
      rtxErrAddStrParm (pctxt, lbuf);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }
   }
   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|18);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_OrganizationalUnitName (OSCTXT* pctxt,
   ASN1T_EXP_OrganizationalUnitName pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OrganizationalUnitName");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_CommonName (OSCTXT* pctxt,
   ASN1T_EXP_CommonName pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CommonName");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TeletexCommonName (OSCTXT* pctxt,
   ASN1T_EXP_TeletexCommonName pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TeletexCommonName");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|20);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TeletexOrganizationName (OSCTXT* pctxt,
   ASN1T_EXP_TeletexOrganizationName pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TeletexOrganizationName");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|20);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TeletexOrganizationalUnitName (OSCTXT* pctxt,
   ASN1T_EXP_TeletexOrganizationalUnitName pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TeletexOrganizationalUnitName");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|20);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PDSName (OSCTXT* pctxt,
   ASN1T_EXP_PDSName pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PDSName");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 16))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PDSParameter (OSCTXT* pctxt,
   ASN1T_EXP_PDSParameter *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PDSParameter");

   /* encode teletex_string */

   if (pvalue->m.teletex_stringPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "teletex-string");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->teletex_string);
      if (!((nchars >= 1 && nchars <= 30))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_charstr (pctxt, pvalue->teletex_string, ASN1EXPL, TM_UNIV|TM_PRIM|20);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode printable_string */

   if (pvalue->m.printable_stringPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "printable-string");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->printable_string);
      if (!((nchars >= 1 && nchars <= 30))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_charstr (pctxt, pvalue->printable_string, ASN1EXPL, TM_UNIV|TM_PRIM|19);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PhysicalDeliveryOfficeName (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryOfficeName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PhysicalDeliveryOfficeName");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PhysicalDeliveryOfficeNumber (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryOfficeNumber *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PhysicalDeliveryOfficeNumber");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_ExtensionORAddressComponents (OSCTXT* pctxt,
   ASN1T_EXP_ExtensionORAddressComponents *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtensionORAddressComponents");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PhysicalDeliveryPersonalName (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryPersonalName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PhysicalDeliveryPersonalName");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PhysicalDeliveryOrganizationName (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryOrganizationName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PhysicalDeliveryOrganizationName");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_ExtensionPhysicalDeliveryAddressComponents (OSCTXT* pctxt,
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtensionPhysicalDeliveryAddressComponents");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_StreetAddress (OSCTXT* pctxt,
   ASN1T_EXP_StreetAddress *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "StreetAddress");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PostOfficeBoxAddress (OSCTXT* pctxt,
   ASN1T_EXP_PostOfficeBoxAddress *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PostOfficeBoxAddress");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PosteRestanteAddress (OSCTXT* pctxt,
   ASN1T_EXP_PosteRestanteAddress *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PosteRestanteAddress");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_UniquePostalName (OSCTXT* pctxt,
   ASN1T_EXP_UniquePostalName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "UniquePostalName");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_LocalPostalAttributes (OSCTXT* pctxt,
   ASN1T_EXP_LocalPostalAttributes *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "LocalPostalAttributes");

   ll = asn1E_EXP_PDSParameter (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TerminalType (OSCTXT* pctxt,
   ASN1T_EXP_TerminalType *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TerminalType");

   if (!((*pvalue <= OSUINTCONST(256)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)*pvalue);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_uint16 (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520countryName (OSCTXT* pctxt,
   ASN1T_EXP_X520countryName pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520countryName");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!(nchars == 2)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520SerialNumber (OSCTXT* pctxt,
   ASN1T_EXP_X520SerialNumber pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520SerialNumber");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 64))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_DomainComponent (OSCTXT* pctxt,
   ASN1T_EXP_DomainComponent pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DomainComponent");

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|22);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_EmailAddress (OSCTXT* pctxt,
   ASN1T_EXP_EmailAddress pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EmailAddress");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|22);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_AlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_EXP_AlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AlgorithmIdentifier");

   /* encode parameters */

   if (pvalue->m.parametersPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "parameters");

      ll = xe_OpenType (pctxt, pvalue->parameters.data, pvalue->parameters.numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode algorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "algorithm");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->algorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_AttributeTypeAndValue (OSCTXT* pctxt,
   ASN1T_EXP_AttributeTypeAndValue *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AttributeTypeAndValue");

   /* encode value */

   RTXCTXTPUSHELEMNAME (pctxt, "value");

   ll = asn1E_EXP_AttributeValue (pctxt, &pvalue->value, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode type */

   RTXCTXTPUSHELEMNAME (pctxt, "type");

   ll = asn1E_EXP_AttributeType (pctxt, &pvalue->type, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_RelativeDistinguishedName (OSCTXT* pctxt,
   ASN1T_EXP_RelativeDistinguishedName *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   Asn1BufLocDescr* pbuf;
   OSRTSList elemList;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RelativeDistinguishedName");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   rtxSListInitEx (pctxt, &elemList);

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "AttributeTypeAndValue", xx1);

      ll = asn1E_EXP_AttributeTypeAndValue (pctxt, ((ASN1T_EXP_AttributeTypeAndValue*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pbuf = rtxMemAllocType (pctxt, Asn1BufLocDescr);
      xe_getBufLocDescr (pctxt, ll, pbuf);
      rtxSListAppend (&elemList, pbuf);

      pnode = pnode->prev;
   }

   ll1 = xe_derCanonicalSort (pctxt, &elemList);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_RDNSequence (OSCTXT* pctxt,
   ASN1T_EXP_RDNSequence *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RDNSequence");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "RelativeDistinguishedName", xx1);

      ll = asn1E_EXP_RelativeDistinguishedName (pctxt, ((ASN1T_EXP_RelativeDistinguishedName*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_Name (OSCTXT* pctxt,
   ASN1T_EXP_Name *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Name");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "rdnSequence");

         ll = asn1E_EXP_RDNSequence (pctxt, pvalue->u.rdnSequence, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_Time (OSCTXT* pctxt,
   ASN1T_EXP_Time *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Time");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utcTime");

         ll = xe_charstr (pctxt, pvalue->u.utcTime, ASN1EXPL, TM_UNIV|TM_PRIM|23);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "generalTime");

         ll = xe_charstr (pctxt, pvalue->u.generalTime, ASN1EXPL, TM_UNIV|TM_PRIM|24);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_Validity (OSCTXT* pctxt,
   ASN1T_EXP_Validity *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Validity");

   /* encode notAfter */

   RTXCTXTPUSHELEMNAME (pctxt, "notAfter");

   ll = asn1E_EXP_Time (pctxt, &pvalue->notAfter, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode notBefore */

   RTXCTXTPUSHELEMNAME (pctxt, "notBefore");

   ll = asn1E_EXP_Time (pctxt, &pvalue->notBefore, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_SubjectPublicKeyInfo (OSCTXT* pctxt,
   ASN1T_EXP_SubjectPublicKeyInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SubjectPublicKeyInfo");

   /* encode subjectPublicKey */

   RTXCTXTPUSHELEMNAME (pctxt, "subjectPublicKey");

   ll = xe_bitstr (pctxt, pvalue->subjectPublicKey.data, pvalue->subjectPublicKey.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode algorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "algorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->algorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_Extension (OSCTXT* pctxt,
   ASN1T_EXP_Extension *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Extension");

   /* encode extnValue */

   RTXCTXTPUSHELEMNAME (pctxt, "extnValue");

   ll = xe_octstr (pctxt, pvalue->extnValue.data, pvalue->extnValue.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode critical */

   if (pvalue->critical != FALSE) {
      RTXCTXTPUSHELEMNAME (pctxt, "critical");

      ll = xe_boolean (pctxt, &pvalue->critical, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode extnID */

   RTXCTXTPUSHELEMNAME (pctxt, "extnID");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->extnID, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_Extensions (OSCTXT* pctxt,
   ASN1T_EXP_Extensions *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Extensions");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Extension", xx1);

      ll = asn1E_EXP_Extension (pctxt, ((ASN1T_EXP_Extension*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TBSCertificate (OSCTXT* pctxt,
   ASN1T_EXP_TBSCertificate *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TBSCertificate");

   /* encode extensions */

   if (pvalue->m.extensionsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "extensions");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
         asn1E_EXP_Extensions (pctxt, &pvalue->extensions, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode subjectUniqueID */

   if (pvalue->m.subjectUniqueIDPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "subjectUniqueID");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|2,
         asn1E_EXP_UniqueIdentifier (pctxt, &pvalue->subjectUniqueID, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode issuerUniqueID */

   if (pvalue->m.issuerUniqueIDPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "issuerUniqueID");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|1,
         asn1E_EXP_UniqueIdentifier (pctxt, &pvalue->issuerUniqueID, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode subjectPublicKeyInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "subjectPublicKeyInfo");

   ll = asn1E_EXP_SubjectPublicKeyInfo (pctxt, &pvalue->subjectPublicKeyInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode subject */

   RTXCTXTPUSHELEMNAME (pctxt, "subject");

   ll = asn1E_EXP_Name (pctxt, &pvalue->subject, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode validity */

   RTXCTXTPUSHELEMNAME (pctxt, "validity");

   ll = asn1E_EXP_Validity (pctxt, &pvalue->validity, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode issuer */

   RTXCTXTPUSHELEMNAME (pctxt, "issuer");

   ll = asn1E_EXP_Name (pctxt, &pvalue->issuer, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->signature_, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode serialNumber */

   RTXCTXTPUSHELEMNAME (pctxt, "serialNumber");

   ll = asn1E_EXP_CertificateSerialNumber (pctxt, &pvalue->serialNumber, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   if (pvalue->version != EXP_Version::v1) {
      RTXCTXTPUSHELEMNAME (pctxt, "version");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_EXP_Version (pctxt, &pvalue->version, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_Certificate (OSCTXT* pctxt,
   ASN1T_EXP_Certificate *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Certificate");

   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = xe_bitstr (pctxt, pvalue->signature_.data, pvalue->signature_.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signatureAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "signatureAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode tbsCertificate */

   RTXCTXTPUSHELEMNAME (pctxt, "tbsCertificate");

   ll = asn1E_EXP_TBSCertificate (pctxt, &pvalue->tbsCertificate, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP__SetOfEXP_AttributeValue (OSCTXT* pctxt,
   ASN1T_EXP__SetOfEXP_AttributeValue *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   Asn1BufLocDescr* pbuf;
   OSRTSList elemList;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   rtxSListInitEx (pctxt, &elemList);

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "AttributeValue", xx1);

      ll = asn1E_EXP_AttributeValue (pctxt, ((ASN1T_EXP_AttributeValue*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pbuf = rtxMemAllocType (pctxt, Asn1BufLocDescr);
      xe_getBufLocDescr (pctxt, ll, pbuf);
      rtxSListAppend (&elemList, pbuf);

      pnode = pnode->prev;
   }

   ll1 = xe_derCanonicalSort (pctxt, &elemList);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   return (ll0);
}

EXTERN int asn1E_EXP_Attribute (OSCTXT* pctxt,
   ASN1T_EXP_Attribute *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Attribute");

   /* encode values */

   RTXCTXTPUSHELEMNAME (pctxt, "values");

   ll = asn1E_EXP__SetOfEXP_AttributeValue (pctxt, &pvalue->values, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode type */

   RTXCTXTPUSHELEMNAME (pctxt, "type");

   ll = asn1E_EXP_AttributeType (pctxt, &pvalue->type, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt,
   ASN1T_EXP_TBSCertList_revokedCertificates_element *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   /* encode crlEntryExtensions */

   if (pvalue->m.crlEntryExtensionsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crlEntryExtensions");

      ll = asn1E_EXP_Extensions (pctxt, &pvalue->crlEntryExtensions, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode revocationDate */

   RTXCTXTPUSHELEMNAME (pctxt, "revocationDate");

   ll = asn1E_EXP_Time (pctxt, &pvalue->revocationDate, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode userCertificate */

   RTXCTXTPUSHELEMNAME (pctxt, "userCertificate");

   ll = asn1E_EXP_CertificateSerialNumber (pctxt, &pvalue->userCertificate, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt,
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SEQUENCE", xx1);

      ll = asn1E_EXP_TBSCertList_revokedCertificates_element (pctxt, ((ASN1T_EXP_TBSCertList_revokedCertificates_element*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_EXP_TBSCertList (OSCTXT* pctxt,
   ASN1T_EXP_TBSCertList *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TBSCertList");

   /* encode crlExtensions */

   if (pvalue->m.crlExtensionsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crlExtensions");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_EXP_Extensions (pctxt, &pvalue->crlExtensions, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode revokedCertificates */

   if (pvalue->m.revokedCertificatesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "revokedCertificates");

      ll = asn1E_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (pctxt, &pvalue->revokedCertificates, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode nextUpdate */

   if (pvalue->m.nextUpdatePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "nextUpdate");

      ll = asn1E_EXP_Time (pctxt, &pvalue->nextUpdate, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode thisUpdate */

   RTXCTXTPUSHELEMNAME (pctxt, "thisUpdate");

   ll = asn1E_EXP_Time (pctxt, &pvalue->thisUpdate, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode issuer */

   RTXCTXTPUSHELEMNAME (pctxt, "issuer");

   ll = asn1E_EXP_Name (pctxt, &pvalue->issuer, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->signature_, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   if (pvalue->m.versionPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "version");

      ll = asn1E_EXP_Version (pctxt, &pvalue->version, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_CertificateList (OSCTXT* pctxt,
   ASN1T_EXP_CertificateList *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertificateList");

   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = xe_bitstr (pctxt, pvalue->signature_.data, pvalue->signature_.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signatureAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "signatureAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode tbsCertList */

   RTXCTXTPUSHELEMNAME (pctxt, "tbsCertList");

   ll = asn1E_EXP_TBSCertList (pctxt, &pvalue->tbsCertList, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_CountryName (OSCTXT* pctxt,
   ASN1T_EXP_CountryName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CountryName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "x121-dcc-code");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.x121_dcc_code);
         if (!(nchars == 3)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         { char c = (char) rtValidateStr (18, pvalue->u.x121_dcc_code);
         if (c != 0) {
            char lbuf[2];
            lbuf[0] = c;
            lbuf[1] = 0;

            rtxErrAddElemNameParm (pctxt);
            rtxErrAddStrParm (pctxt, lbuf);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }
         }
         ll = xe_charstr (pctxt, pvalue->u.x121_dcc_code, ASN1EXPL, TM_UNIV|TM_PRIM|18);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "iso-3166-alpha2-code");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.iso_3166_alpha2_code);
         if (!(nchars == 2)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.iso_3166_alpha2_code, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_APPL|TM_CONS|1, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_AdministrationDomainName (OSCTXT* pctxt,
   ASN1T_EXP_AdministrationDomainName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AdministrationDomainName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "numeric");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.numeric);
         if (!(nchars <= 16)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         { char c = (char) rtValidateStr (18, pvalue->u.numeric);
         if (c != 0) {
            char lbuf[2];
            lbuf[0] = c;
            lbuf[1] = 0;

            rtxErrAddElemNameParm (pctxt);
            rtxErrAddStrParm (pctxt, lbuf);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }
         }
         ll = xe_charstr (pctxt, pvalue->u.numeric, ASN1EXPL, TM_UNIV|TM_PRIM|18);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printable");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printable);
         if (!(nchars <= 16)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printable, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_APPL|TM_CONS|2, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PrivateDomainName (OSCTXT* pctxt,
   ASN1T_EXP_PrivateDomainName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PrivateDomainName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "numeric");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.numeric);
         if (!((nchars >= 1 && nchars <= 16))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         { char c = (char) rtValidateStr (18, pvalue->u.numeric);
         if (c != 0) {
            char lbuf[2];
            lbuf[0] = c;
            lbuf[1] = 0;

            rtxErrAddElemNameParm (pctxt);
            rtxErrAddStrParm (pctxt, lbuf);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }
         }
         ll = xe_charstr (pctxt, pvalue->u.numeric, ASN1EXPL, TM_UNIV|TM_PRIM|18);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printable");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printable);
         if (!((nchars >= 1 && nchars <= 16))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printable, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PersonalName (OSCTXT* pctxt,
   ASN1T_EXP_PersonalName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PersonalName");

   /* encode generation_qualifier */

   if (pvalue->m.generation_qualifierPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "generation-qualifier");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->generation_qualifier);
      if (!((nchars >= 1 && nchars <= 3))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|3,
         xe_charstr (pctxt, pvalue->generation_qualifier, ASN1IMPL, TM_UNIV|TM_PRIM|19));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode initials */

   if (pvalue->m.initialsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "initials");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->initials);
      if (!((nchars >= 1 && nchars <= 5))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|2,
         xe_charstr (pctxt, pvalue->initials, ASN1IMPL, TM_UNIV|TM_PRIM|19));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode given_name */

   if (pvalue->m.given_namePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "given-name");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->given_name);
      if (!((nchars >= 1 && nchars <= 16))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|1,
         xe_charstr (pctxt, pvalue->given_name, ASN1IMPL, TM_UNIV|TM_PRIM|19));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode surname */

   RTXCTXTPUSHELEMNAME (pctxt, "surname");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue->surname);
   if (!((nchars >= 1 && nchars <= 40))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
      xe_charstr (pctxt, pvalue->surname, ASN1IMPL, TM_UNIV|TM_PRIM|19));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_OrganizationalUnitNames (OSCTXT* pctxt,
   ASN1T_EXP_OrganizationalUnitNames *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OrganizationalUnitNames");

   if (!((pvalue->count >= OSUINTCONST(1) && pvalue->count <= OSUINTCONST(4)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OrganizationalUnitName", xx1);

      ll = asn1E_EXP_OrganizationalUnitName (pctxt, ((ASN1T_EXP_OrganizationalUnitName)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_BuiltInStandardAttributes (OSCTXT* pctxt,
   ASN1T_EXP_BuiltInStandardAttributes *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "BuiltInStandardAttributes");

   /* encode organizational_unit_names */

   if (pvalue->m.organizational_unit_namesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "organizational-unit-names");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|6,
         asn1E_EXP_OrganizationalUnitNames (pctxt, &pvalue->organizational_unit_names, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode personal_name */

   if (pvalue->m.personal_namePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "personal-name");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|5,
         asn1E_EXP_PersonalName (pctxt, &pvalue->personal_name, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode numeric_user_identifier */

   if (pvalue->m.numeric_user_identifierPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "numeric-user-identifier");

      { char c = (char) rtValidateStr (18, pvalue->numeric_user_identifier);
      if (c != 0) {
         char lbuf[2];
         lbuf[0] = c;
         lbuf[1] = 0;

         rtxErrAddElemNameParm (pctxt);
         rtxErrAddStrParm (pctxt, lbuf);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }
      }
      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|4,
         asn1E_EXP_NumericUserIdentifier (pctxt, pvalue->numeric_user_identifier, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode organization_name */

   if (pvalue->m.organization_namePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "organization-name");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|3,
         asn1E_EXP_OrganizationName (pctxt, pvalue->organization_name, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode private_domain_name */

   if (pvalue->m.private_domain_namePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "private-domain-name");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         asn1E_EXP_PrivateDomainName (pctxt, &pvalue->private_domain_name, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode terminal_identifier */

   if (pvalue->m.terminal_identifierPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "terminal-identifier");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|1,
         asn1E_EXP_TerminalIdentifier (pctxt, pvalue->terminal_identifier, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode network_address */

   if (pvalue->m.network_addressPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "network-address");

      { char c = (char) rtValidateStr (18, pvalue->network_address);
      if (c != 0) {
         char lbuf[2];
         lbuf[0] = c;
         lbuf[1] = 0;

         rtxErrAddElemNameParm (pctxt);
         rtxErrAddStrParm (pctxt, lbuf);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }
      }
      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
         asn1E_EXP_NetworkAddress (pctxt, pvalue->network_address, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode administration_domain_name */

   if (pvalue->m.administration_domain_namePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "administration-domain-name");

      ll = asn1E_EXP_AdministrationDomainName (pctxt, &pvalue->administration_domain_name, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode country_name */

   if (pvalue->m.country_namePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "country-name");

      ll = asn1E_EXP_CountryName (pctxt, &pvalue->country_name, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_BuiltInDomainDefinedAttribute (OSCTXT* pctxt,
   ASN1T_EXP_BuiltInDomainDefinedAttribute *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "BuiltInDomainDefinedAttribute");

   /* encode value */

   RTXCTXTPUSHELEMNAME (pctxt, "value");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue->value);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue->value, ASN1EXPL, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode type */

   RTXCTXTPUSHELEMNAME (pctxt, "type");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue->type);
   if (!((nchars >= 1 && nchars <= 8))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue->type, ASN1EXPL, TM_UNIV|TM_PRIM|19);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_BuiltInDomainDefinedAttributes (OSCTXT* pctxt,
   ASN1T_EXP_BuiltInDomainDefinedAttributes *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "BuiltInDomainDefinedAttributes");

   if (!((pvalue->count >= OSUINTCONST(1) && pvalue->count <= OSUINTCONST(4)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "BuiltInDomainDefinedAttribute", xx1);

      ll = asn1E_EXP_BuiltInDomainDefinedAttribute (pctxt, ((ASN1T_EXP_BuiltInDomainDefinedAttribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_ExtensionAttribute (OSCTXT* pctxt,
   ASN1T_EXP_ExtensionAttribute *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtensionAttribute");

   /* encode extension_attribute_value */

   RTXCTXTPUSHELEMNAME (pctxt, "extension-attribute-value");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
      xe_OpenType (pctxt, pvalue->extension_attribute_value.data, pvalue->extension_attribute_value.numocts));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode extension_attribute_type */

   RTXCTXTPUSHELEMNAME (pctxt, "extension-attribute-type");

   if (!((pvalue->extension_attribute_type <= OSUINTCONST(256)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->extension_attribute_type);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
      xe_uint16 (pctxt, &pvalue->extension_attribute_type, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_ExtensionAttributes (OSCTXT* pctxt,
   ASN1T_EXP_ExtensionAttributes *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   Asn1BufLocDescr* pbuf;
   OSRTSList elemList;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtensionAttributes");

   if (!((pvalue->count >= 1 && pvalue->count <= 256))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   rtxSListInitEx (pctxt, &elemList);

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "ExtensionAttribute", xx1);

      ll = asn1E_EXP_ExtensionAttribute (pctxt, ((ASN1T_EXP_ExtensionAttribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pbuf = rtxMemAllocType (pctxt, Asn1BufLocDescr);
      xe_getBufLocDescr (pctxt, ll, pbuf);
      rtxSListAppend (&elemList, pbuf);

      pnode = pnode->prev;
   }

   ll1 = xe_derCanonicalSort (pctxt, &elemList);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_ORAddress (OSCTXT* pctxt,
   ASN1T_EXP_ORAddress *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ORAddress");

   /* encode extension_attributes */

   if (pvalue->m.extension_attributesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "extension-attributes");

      ll = asn1E_EXP_ExtensionAttributes (pctxt, &pvalue->extension_attributes, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode built_in_domain_defined_attributes */

   if (pvalue->m.built_in_domain_defined_attributesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "built-in-domain-defined-attributes");

      ll = asn1E_EXP_BuiltInDomainDefinedAttributes (pctxt, &pvalue->built_in_domain_defined_attributes, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode built_in_standard_attributes */

   RTXCTXTPUSHELEMNAME (pctxt, "built-in-standard-attributes");

   ll = asn1E_EXP_BuiltInStandardAttributes (pctxt, &pvalue->built_in_standard_attributes, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TeletexPersonalName (OSCTXT* pctxt,
   ASN1T_EXP_TeletexPersonalName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TeletexPersonalName");

   /* encode generation_qualifier */

   if (pvalue->m.generation_qualifierPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "generation-qualifier");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->generation_qualifier);
      if (!((nchars >= 1 && nchars <= 3))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|3,
         xe_charstr (pctxt, pvalue->generation_qualifier, ASN1IMPL, TM_UNIV|TM_PRIM|20));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode initials */

   if (pvalue->m.initialsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "initials");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->initials);
      if (!((nchars >= 1 && nchars <= 5))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|2,
         xe_charstr (pctxt, pvalue->initials, ASN1IMPL, TM_UNIV|TM_PRIM|20));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode given_name */

   if (pvalue->m.given_namePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "given-name");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->given_name);
      if (!((nchars >= 1 && nchars <= 16))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|1,
         xe_charstr (pctxt, pvalue->given_name, ASN1IMPL, TM_UNIV|TM_PRIM|20));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode surname */

   RTXCTXTPUSHELEMNAME (pctxt, "surname");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue->surname);
   if (!((nchars >= 1 && nchars <= 40))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
      xe_charstr (pctxt, pvalue->surname, ASN1IMPL, TM_UNIV|TM_PRIM|20));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TeletexOrganizationalUnitNames (OSCTXT* pctxt,
   ASN1T_EXP_TeletexOrganizationalUnitNames *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TeletexOrganizationalUnitNames");

   if (!((pvalue->count >= OSUINTCONST(1) && pvalue->count <= OSUINTCONST(4)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "TeletexOrganizationalUnitName", xx1);

      ll = asn1E_EXP_TeletexOrganizationalUnitName (pctxt, ((ASN1T_EXP_TeletexOrganizationalUnitName)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PhysicalDeliveryCountryName (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryCountryName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PhysicalDeliveryCountryName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "x121-dcc-code");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.x121_dcc_code);
         if (!(nchars == 3)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         { char c = (char) rtValidateStr (18, pvalue->u.x121_dcc_code);
         if (c != 0) {
            char lbuf[2];
            lbuf[0] = c;
            lbuf[1] = 0;

            rtxErrAddElemNameParm (pctxt);
            rtxErrAddStrParm (pctxt, lbuf);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }
         }
         ll = xe_charstr (pctxt, pvalue->u.x121_dcc_code, ASN1EXPL, TM_UNIV|TM_PRIM|18);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "iso-3166-alpha2-code");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.iso_3166_alpha2_code);
         if (!(nchars == 2)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.iso_3166_alpha2_code, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_PostalCode (OSCTXT* pctxt,
   ASN1T_EXP_PostalCode *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PostalCode");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "numeric-code");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.numeric_code);
         if (!((nchars >= 1 && nchars <= 16))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         { char c = (char) rtValidateStr (18, pvalue->u.numeric_code);
         if (c != 0) {
            char lbuf[2];
            lbuf[0] = c;
            lbuf[1] = 0;

            rtxErrAddElemNameParm (pctxt);
            rtxErrAddStrParm (pctxt, lbuf);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }
         }
         ll = xe_charstr (pctxt, pvalue->u.numeric_code, ASN1EXPL, TM_UNIV|TM_PRIM|18);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printable-code");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printable_code);
         if (!((nchars >= 1 && nchars <= 16))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printable_code, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_UnformattedPostalAddress_printable_address (OSCTXT* pctxt,
   ASN1T_EXP_UnformattedPostalAddress_printable_address *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!((pvalue->count >= OSUINTCONST(1) && pvalue->count <= OSUINTCONST(6)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "PrintableString", xx1);

      { OSSIZE nchars = OSCRTLSTRLEN (((const char*)pnode->data));
      if (!((nchars >= 1 && nchars <= 30))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_charstr (pctxt, ((const char*)pnode->data), ASN1EXPL, TM_UNIV|TM_PRIM|19);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_EXP_UnformattedPostalAddress (OSCTXT* pctxt,
   ASN1T_EXP_UnformattedPostalAddress *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "UnformattedPostalAddress");

   /* encode teletex_string */

   if (pvalue->m.teletex_stringPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "teletex-string");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->teletex_string);
      if (!((nchars >= 1 && nchars <= 180))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      ll = xe_charstr (pctxt, pvalue->teletex_string, ASN1EXPL, TM_UNIV|TM_PRIM|20);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode printable_address */

   if (pvalue->m.printable_addressPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "printable-address");

      ll = asn1E_EXP_UnformattedPostalAddress_printable_address (pctxt, &pvalue->printable_address, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT* pctxt,
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   /* encode sub_address */

   if (pvalue->m.sub_addressPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "sub-address");

      { OSSIZE nchars = OSCRTLSTRLEN (pvalue->sub_address);
      if (!((nchars >= 1 && nchars <= 40))) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }

      { char c = (char) rtValidateStr (18, pvalue->sub_address);
      if (c != 0) {
         char lbuf[2];
         lbuf[0] = c;
         lbuf[1] = 0;

         rtxErrAddElemNameParm (pctxt);
         rtxErrAddStrParm (pctxt, lbuf);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }
      }
      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|1,
         xe_charstr (pctxt, pvalue->sub_address, ASN1IMPL, TM_UNIV|TM_PRIM|18));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode number */

   RTXCTXTPUSHELEMNAME (pctxt, "number");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue->number);
   if (!((nchars >= 1 && nchars <= 15))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   { char c = (char) rtValidateStr (18, pvalue->number);
   if (c != 0) {
      char lbuf[2];
      lbuf[0] = c;
      lbuf[1] = 0;

      rtxErrAddElemNameParm (pctxt);
      rtxErrAddStrParm (pctxt, lbuf);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }
   }
   ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
      xe_charstr (pctxt, pvalue->number, ASN1IMPL, TM_UNIV|TM_PRIM|18));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_EXP_PresentationAddress_nAddresses (OSCTXT* pctxt,
   ASN1T_EXP_PresentationAddress_nAddresses *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   Asn1BufLocDescr* pbuf;
   OSRTSList elemList;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   rtxSListInitEx (pctxt, &elemList);

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OCTET_STRING", xx1);

      ll = xe_octstr (pctxt, ((ASN1TDynOctStr*)pnode->data)->data, ((ASN1TDynOctStr*)pnode->data)->numocts, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pbuf = rtxMemAllocType (pctxt, Asn1BufLocDescr);
      xe_getBufLocDescr (pctxt, ll, pbuf);
      rtxSListAppend (&elemList, pbuf);

      pnode = pnode->prev;
   }

   ll1 = xe_derCanonicalSort (pctxt, &elemList);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll1 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll1);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3, ll0);

   return (ll0);
}

EXTERN int asn1E_EXP_PresentationAddress (OSCTXT* pctxt,
   ASN1T_EXP_PresentationAddress *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PresentationAddress");

   /* encode nAddresses */

   RTXCTXTPUSHELEMNAME (pctxt, "nAddresses");

   ll = asn1E_EXP_PresentationAddress_nAddresses (pctxt, &pvalue->nAddresses, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode tSelector */

   if (pvalue->m.tSelectorPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "tSelector");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         xe_octstr (pctxt, pvalue->tSelector.data, pvalue->tSelector.numocts, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode sSelector */

   if (pvalue->m.sSelectorPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "sSelector");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         xe_octstr (pctxt, pvalue->sSelector.data, pvalue->sSelector.numocts, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode pSelector */

   if (pvalue->m.pSelectorPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "pSelector");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         xe_octstr (pctxt, pvalue->pSelector.data, pvalue->pSelector.numocts, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_ExtendedNetworkAddress (OSCTXT* pctxt,
   ASN1T_EXP_ExtendedNetworkAddress *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtendedNetworkAddress");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "e163-4-address");

         ll = asn1E_EXP_ExtendedNetworkAddress_e163_4_address (pctxt, pvalue->u.e163_4_address, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "psap-address");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_EXP_PresentationAddress (pctxt, pvalue->u.psap_address, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TeletexDomainDefinedAttribute (OSCTXT* pctxt,
   ASN1T_EXP_TeletexDomainDefinedAttribute *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TeletexDomainDefinedAttribute");

   /* encode value */

   RTXCTXTPUSHELEMNAME (pctxt, "value");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue->value);
   if (!((nchars >= 1 && nchars <= 128))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue->value, ASN1EXPL, TM_UNIV|TM_PRIM|20);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode type */

   RTXCTXTPUSHELEMNAME (pctxt, "type");

   { OSSIZE nchars = OSCRTLSTRLEN (pvalue->type);
   if (!((nchars >= 1 && nchars <= 8))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)nchars);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   }

   ll = xe_charstr (pctxt, pvalue->type, ASN1EXPL, TM_UNIV|TM_PRIM|20);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_TeletexDomainDefinedAttributes (OSCTXT* pctxt,
   ASN1T_EXP_TeletexDomainDefinedAttributes *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TeletexDomainDefinedAttributes");

   if (!((pvalue->count >= OSUINTCONST(1) && pvalue->count <= OSUINTCONST(4)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "TeletexDomainDefinedAttribute", xx1);

      ll = asn1E_EXP_TeletexDomainDefinedAttribute (pctxt, ((ASN1T_EXP_TeletexDomainDefinedAttribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_DirectoryString (OSCTXT* pctxt,
   ASN1T_EXP_DirectoryString *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DirectoryString");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!(nchars >= 1)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!(nchars >= 1)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!(nchars >= 1)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!(pvalue->u.universalString->nchars >= 1)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!(pvalue->u.bmpString->nchars >= 1)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520name (OSCTXT* pctxt,
   ASN1T_EXP_X520name *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520name");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 32768))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 32768))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 32768))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 32768))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars
             <= 32768))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520CommonName (OSCTXT* pctxt,
   ASN1T_EXP_X520CommonName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520CommonName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 128
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520LocalityName (OSCTXT* pctxt,
   ASN1T_EXP_X520LocalityName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520LocalityName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 128
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520StateOrProvinceName (OSCTXT* pctxt,
   ASN1T_EXP_X520StateOrProvinceName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520StateOrProvinceName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 128
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520OrganizationName (OSCTXT* pctxt,
   ASN1T_EXP_X520OrganizationName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520OrganizationName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 128
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520OrganizationalUnitName (OSCTXT* pctxt,
   ASN1T_EXP_X520OrganizationalUnitName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520OrganizationalUnitName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 128
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520Title (OSCTXT* pctxt,
   ASN1T_EXP_X520Title *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520Title");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 128
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT* pctxt,
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520CountrySerialUTF8liUcubeName");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 128
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_EXP_X520Pseudonym (OSCTXT* pctxt,
   ASN1T_EXP_X520Pseudonym *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "X520Pseudonym");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "printableString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.printableString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.printableString, ASN1EXPL, TM_UNIV|TM_PRIM|19);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "teletexString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.teletexString);
         if (!((nchars >= 1 && nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.teletexString, ASN1EXPL, TM_UNIV|TM_PRIM|20);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "universalString");

         if (!((pvalue->u.universalString->nchars >= 1 && pvalue->u.universalString->
            nchars <= 128))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.universalString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_32BitCharStr (pctxt, pvalue->u.universalString, ASN1EXPL, TM_UNIV|TM_PRIM|28);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 128
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

