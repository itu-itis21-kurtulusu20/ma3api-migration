/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "PKIXqualified.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_PKIXQUAL_DateOfBirth (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_DateOfBirth pSrcValue, ASN1T_PKIXQUAL_DateOfBirth* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_PKIXQUAL_DateOfBirth::ASN1C_PKIXQUAL_DateOfBirth (ASN1C_PKIXQUAL_DateOfBirth& original) :
   ASN1CGeneralizedTime (original), msgData (original.getCopy())
{
}

ASN1C_PKIXQUAL_DateOfBirth& ASN1C_PKIXQUAL_DateOfBirth::operator= (ASN1C_PKIXQUAL_DateOfBirth& srcData)
{
   ASN1CGeneralizedTime::operator= (srcData);
   return *this;
}

ASN1T_PKIXQUAL_DateOfBirth& ASN1C_PKIXQUAL_DateOfBirth::getCopy (ASN1T_PKIXQUAL_DateOfBirth* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_DateOfBirth);
      new (pDstData) ASN1T_PKIXQUAL_DateOfBirth;
   }

   asn1Copy_PKIXQUAL_DateOfBirth (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_PKIXQUAL_DateOfBirth* ASN1C_PKIXQUAL_DateOfBirth::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_DateOfBirth* pDstData = new ASN1T_PKIXQUAL_DateOfBirth;

   asn1Copy_PKIXQUAL_DateOfBirth (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKIXQUAL_PlaceOfBirth (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pSrcValue, ASN1T_PKIXQUAL_PlaceOfBirth*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_DirectoryString (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKIXQUAL_PlaceOfBirth::ASN1C_PKIXQUAL_PlaceOfBirth (ASN1C_PKIXQUAL_PlaceOfBirth& original) :
   ASN1C_EXP_DirectoryString (original)
{
}

ASN1T_PKIXQUAL_PlaceOfBirth& ASN1C_PKIXQUAL_PlaceOfBirth::getCopy (ASN1T_PKIXQUAL_PlaceOfBirth* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_PlaceOfBirth);
      new (pDstData) ASN1T_PKIXQUAL_PlaceOfBirth;
   }

   asn1Copy_PKIXQUAL_PlaceOfBirth (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKIXQUAL_PlaceOfBirth* ASN1C_PKIXQUAL_PlaceOfBirth::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_PlaceOfBirth* pDstData = new ASN1T_PKIXQUAL_PlaceOfBirth;

   asn1Copy_PKIXQUAL_PlaceOfBirth (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKIXQUAL_Gender (OSCTXT* pctxt, ASN1T_PKIXQUAL_Gender pSrcValue, 
   ASN1T_PKIXQUAL_Gender* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_PKIXQUAL_Gender::ASN1C_PKIXQUAL_Gender (ASN1C_PKIXQUAL_Gender& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKIXQUAL_Gender& ASN1C_PKIXQUAL_Gender::getCopy (ASN1T_PKIXQUAL_Gender* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_Gender);
      new (pDstData) ASN1T_PKIXQUAL_Gender;
   }

   asn1Copy_PKIXQUAL_Gender (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_PKIXQUAL_Gender* ASN1C_PKIXQUAL_Gender::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_Gender* pDstData = new ASN1T_PKIXQUAL_Gender;

   asn1Copy_PKIXQUAL_Gender (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKIXQUAL_CountryOfCitizenship (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_CountryOfCitizenship pSrcValue, 
   ASN1T_PKIXQUAL_CountryOfCitizenship* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_PKIXQUAL_CountryOfCitizenship::ASN1C_PKIXQUAL_CountryOfCitizenship (ASN1C_PKIXQUAL_CountryOfCitizenship& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKIXQUAL_CountryOfCitizenship& ASN1C_PKIXQUAL_CountryOfCitizenship::getCopy (ASN1T_PKIXQUAL_CountryOfCitizenship* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_CountryOfCitizenship);
      new (pDstData) ASN1T_PKIXQUAL_CountryOfCitizenship;
   }

   asn1Copy_PKIXQUAL_CountryOfCitizenship (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_PKIXQUAL_CountryOfCitizenship* ASN1C_PKIXQUAL_CountryOfCitizenship::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_CountryOfCitizenship* pDstData = new ASN1T_PKIXQUAL_CountryOfCitizenship;

   asn1Copy_PKIXQUAL_CountryOfCitizenship (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKIXQUAL_CountryOfResidence (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_CountryOfResidence pSrcValue, 
   ASN1T_PKIXQUAL_CountryOfResidence* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_PKIXQUAL_CountryOfResidence::ASN1C_PKIXQUAL_CountryOfResidence (ASN1C_PKIXQUAL_CountryOfResidence& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKIXQUAL_CountryOfResidence& ASN1C_PKIXQUAL_CountryOfResidence::getCopy (ASN1T_PKIXQUAL_CountryOfResidence* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_CountryOfResidence);
      new (pDstData) ASN1T_PKIXQUAL_CountryOfResidence;
   }

   asn1Copy_PKIXQUAL_CountryOfResidence (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_PKIXQUAL_CountryOfResidence* ASN1C_PKIXQUAL_CountryOfResidence::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_CountryOfResidence* pDstData = new ASN1T_PKIXQUAL_CountryOfResidence;

   asn1Copy_PKIXQUAL_CountryOfResidence (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKIXQUAL_TypeOfBiometricData (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pSrcValue, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* predefinedBiometricType */
      case 1:
         pDstValue->u.predefinedBiometricType = pSrcValue->u.predefinedBiometricType;
         break;

      /* biometricDataOid */
      case 2:
         pDstValue->u.biometricDataOid = rtxMemAllocType (pctxt, ASN1TObjId);
         new (pDstValue->u.biometricDataOid) ASN1TObjId;
         rtCopyOID ((ASN1OBJID*)pSrcValue->u.biometricDataOid, (ASN1OBJID*)pDstValue->u.biometricDataOid);
         break;

   }
}

ASN1C_PKIXQUAL_TypeOfBiometricData::ASN1C_PKIXQUAL_TypeOfBiometricData (ASN1C_PKIXQUAL_TypeOfBiometricData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKIXQUAL_TypeOfBiometricData::ASN1T_PKIXQUAL_TypeOfBiometricData (ASN1C_PKIXQUAL_TypeOfBiometricData& original)
{
   original.getCopy (this);
}

ASN1T_PKIXQUAL_TypeOfBiometricData& ASN1C_PKIXQUAL_TypeOfBiometricData::getCopy (ASN1T_PKIXQUAL_TypeOfBiometricData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_TypeOfBiometricData);
      new (pDstData) ASN1T_PKIXQUAL_TypeOfBiometricData;
   }

   asn1Copy_PKIXQUAL_TypeOfBiometricData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKIXQUAL_TypeOfBiometricData* ASN1C_PKIXQUAL_TypeOfBiometricData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_TypeOfBiometricData* pDstData = new ASN1T_PKIXQUAL_TypeOfBiometricData;

   asn1Copy_PKIXQUAL_TypeOfBiometricData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKIXQUAL_BiometricData (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_BiometricData* pSrcValue, ASN1T_PKIXQUAL_BiometricData*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_PKIXQUAL_TypeOfBiometricData (pctxt, &pSrcValue->typeOfBiometricData, &pDstValue->typeOfBiometricData);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->hashAlgorithm, &pDstValue->hashAlgorithm);

   rtCopyDynOctStr (pctxt, &pSrcValue->biometricDataHash, &pDstValue->
      biometricDataHash);

   if (pSrcValue->m.sourceDataUriPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->sourceDataUri, (char **)&pDstValue->sourceDataUri);
   }

}

ASN1C_PKIXQUAL_BiometricData::ASN1C_PKIXQUAL_BiometricData (ASN1C_PKIXQUAL_BiometricData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKIXQUAL_BiometricData::ASN1T_PKIXQUAL_BiometricData (ASN1C_PKIXQUAL_BiometricData& original)
{
   original.getCopy (this);
}

ASN1T_PKIXQUAL_BiometricData& ASN1C_PKIXQUAL_BiometricData::getCopy (ASN1T_PKIXQUAL_BiometricData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_BiometricData);
      new (pDstData) ASN1T_PKIXQUAL_BiometricData;
   }

   asn1Copy_PKIXQUAL_BiometricData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKIXQUAL_BiometricData* ASN1C_PKIXQUAL_BiometricData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_BiometricData* pDstData = new ASN1T_PKIXQUAL_BiometricData;

   asn1Copy_PKIXQUAL_BiometricData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKIXQUAL_BiometricSyntax (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_BiometricSyntax* pSrcValue, ASN1T_PKIXQUAL_BiometricSyntax*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKIXQUAL_BiometricData* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKIXQUAL_BiometricData* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKIXQUAL_BiometricData);
         pSrcData = (ASN1T_PKIXQUAL_BiometricData*) pnode->data;

         asn1Copy_PKIXQUAL_BiometricData (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKIXQUAL_BiometricSyntax::ASN1C_PKIXQUAL_BiometricSyntax (ASN1C_PKIXQUAL_BiometricSyntax& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKIXQUAL_BiometricSyntax*)pList)
{
}

ASN1C_PKIXQUAL_BiometricSyntax& ASN1C_PKIXQUAL_BiometricSyntax::operator= (ASN1C_PKIXQUAL_BiometricSyntax& srcData)
{
   clear ();
   asn1Copy_PKIXQUAL_BiometricSyntax (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKIXQUAL_BiometricSyntax& ASN1C_PKIXQUAL_BiometricSyntax::getCopy (ASN1T_PKIXQUAL_BiometricSyntax* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_BiometricSyntax);
      new (pDstData) ASN1T_PKIXQUAL_BiometricSyntax;
   }

   asn1Copy_PKIXQUAL_BiometricSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKIXQUAL_BiometricSyntax* ASN1C_PKIXQUAL_BiometricSyntax::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_BiometricSyntax* pDstData = new ASN1T_PKIXQUAL_BiometricSyntax;

   asn1Copy_PKIXQUAL_BiometricSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKIXQUAL_QCStatement (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_QCStatement* pSrcValue, ASN1T_PKIXQUAL_QCStatement*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   rtCopyOID ((ASN1OBJID*)&pSrcValue->statementId, (ASN1OBJID*)&pDstValue->statementId);

   if (pSrcValue->m.statementInfoPresent) {
      rtCopyOpenType (pctxt, &pSrcValue->statementInfo, &pDstValue->statementInfo);
   }

}

ASN1C_PKIXQUAL_QCStatement::ASN1C_PKIXQUAL_QCStatement (ASN1C_PKIXQUAL_QCStatement& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKIXQUAL_QCStatement::ASN1T_PKIXQUAL_QCStatement (ASN1C_PKIXQUAL_QCStatement& original)
{
   original.getCopy (this);
}

ASN1T_PKIXQUAL_QCStatement& ASN1C_PKIXQUAL_QCStatement::getCopy (ASN1T_PKIXQUAL_QCStatement* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_QCStatement);
      new (pDstData) ASN1T_PKIXQUAL_QCStatement;
   }

   asn1Copy_PKIXQUAL_QCStatement (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKIXQUAL_QCStatement* ASN1C_PKIXQUAL_QCStatement::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_QCStatement* pDstData = new ASN1T_PKIXQUAL_QCStatement;

   asn1Copy_PKIXQUAL_QCStatement (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKIXQUAL_QCStatements (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_QCStatements* pSrcValue, ASN1T_PKIXQUAL_QCStatements*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKIXQUAL_QCStatement* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKIXQUAL_QCStatement* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKIXQUAL_QCStatement);
         pSrcData = (ASN1T_PKIXQUAL_QCStatement*) pnode->data;

         asn1Copy_PKIXQUAL_QCStatement (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKIXQUAL_QCStatements::ASN1C_PKIXQUAL_QCStatements (ASN1C_PKIXQUAL_QCStatements& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKIXQUAL_QCStatements*)pList)
{
}

ASN1C_PKIXQUAL_QCStatements& ASN1C_PKIXQUAL_QCStatements::operator= (ASN1C_PKIXQUAL_QCStatements& srcData)
{
   clear ();
   asn1Copy_PKIXQUAL_QCStatements (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKIXQUAL_QCStatements& ASN1C_PKIXQUAL_QCStatements::getCopy (ASN1T_PKIXQUAL_QCStatements* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_QCStatements);
      new (pDstData) ASN1T_PKIXQUAL_QCStatements;
   }

   asn1Copy_PKIXQUAL_QCStatements (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKIXQUAL_QCStatements* ASN1C_PKIXQUAL_QCStatements::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_QCStatements* pDstData = new ASN1T_PKIXQUAL_QCStatements;

   asn1Copy_PKIXQUAL_QCStatements (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKIXQUAL_NameRegistrationAuthorities (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pSrcValue, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_GeneralName* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_GeneralName* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_GeneralName);
         pSrcData = (ASN1T_IMP_GeneralName*) pnode->data;

         asn1Copy_IMP_GeneralName (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKIXQUAL_NameRegistrationAuthorities::ASN1C_PKIXQUAL_NameRegistrationAuthorities (ASN1C_PKIXQUAL_NameRegistrationAuthorities& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKIXQUAL_NameRegistrationAuthorities*)pList)
{
}

ASN1C_PKIXQUAL_NameRegistrationAuthorities& ASN1C_PKIXQUAL_NameRegistrationAuthorities::operator= (ASN1C_PKIXQUAL_NameRegistrationAuthorities& srcData)
{
   clear ();
   asn1Copy_PKIXQUAL_NameRegistrationAuthorities (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKIXQUAL_NameRegistrationAuthorities& ASN1C_PKIXQUAL_NameRegistrationAuthorities::getCopy (ASN1T_PKIXQUAL_NameRegistrationAuthorities* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_NameRegistrationAuthorities);
      new (pDstData) ASN1T_PKIXQUAL_NameRegistrationAuthorities;
   }

   asn1Copy_PKIXQUAL_NameRegistrationAuthorities (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKIXQUAL_NameRegistrationAuthorities* ASN1C_PKIXQUAL_NameRegistrationAuthorities::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pDstData = new ASN1T_PKIXQUAL_NameRegistrationAuthorities;

   asn1Copy_PKIXQUAL_NameRegistrationAuthorities (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKIXQUAL_SemanticsInformation (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_SemanticsInformation* pSrcValue, 
   ASN1T_PKIXQUAL_SemanticsInformation* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.semanticsIndentifierPresent) {
      rtCopyOID ((ASN1OBJID*)&pSrcValue->semanticsIndentifier, (ASN1OBJID*)&pDstValue->semanticsIndentifier);
   }

   if (pSrcValue->m.nameRegistrationAuthoritiesPresent) {
      asn1Copy_PKIXQUAL_NameRegistrationAuthorities (pctxt, &pSrcValue->nameRegistrationAuthorities, &pDstValue->nameRegistrationAuthorities);
   }

}

ASN1C_PKIXQUAL_SemanticsInformation::ASN1C_PKIXQUAL_SemanticsInformation (ASN1C_PKIXQUAL_SemanticsInformation& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKIXQUAL_SemanticsInformation::ASN1T_PKIXQUAL_SemanticsInformation (ASN1C_PKIXQUAL_SemanticsInformation& original)
{
   original.getCopy (this);
}

ASN1T_PKIXQUAL_SemanticsInformation& ASN1C_PKIXQUAL_SemanticsInformation::getCopy (ASN1T_PKIXQUAL_SemanticsInformation* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKIXQUAL_SemanticsInformation);
      new (pDstData) ASN1T_PKIXQUAL_SemanticsInformation;
   }

   asn1Copy_PKIXQUAL_SemanticsInformation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKIXQUAL_SemanticsInformation* ASN1C_PKIXQUAL_SemanticsInformation::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKIXQUAL_SemanticsInformation* pDstData = new ASN1T_PKIXQUAL_SemanticsInformation;

   asn1Copy_PKIXQUAL_SemanticsInformation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

