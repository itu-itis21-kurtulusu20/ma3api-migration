/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "pkcs1pkcs8.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_PKCS18_PrivateKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_PrivateKey* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS18_PrivateKey::toStream (const char* name)

{
   asn1PrtToStrm_PKCS18_PrivateKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS18_PrivateKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS18_EncryptedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_EncryptedData* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS18_EncryptedData::toStream (const char* name)

{
   asn1PrtToStrm_PKCS18_EncryptedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS18_EncryptedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS18_PrivateKeyInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_PrivateKeyInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_Version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "privateKeyAlgorithm", &pvalue->privateKeyAlgorithm);

   asn1PrtToStrm_PKCS18_PrivateKey (pctxt, "privateKey", &pvalue->privateKey);

   if (pvalue->m.attributesPresent) {
      asn1PrtToStrm_PKCS10_Attributes (pctxt, "attributes", &pvalue->attributes);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS18_PrivateKeyInfo::toStream (const char* name)

{
   asn1PrtToStrm_PKCS18_PrivateKeyInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS18_PrivateKeyInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS18_EncryptedPrivateKeyInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_EncryptedPrivateKeyInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "encryptionAlgorithm", &pvalue->encryptionAlgorithm);

   asn1PrtToStrm_PKCS18_EncryptedData (pctxt, "encryptedData", &pvalue->encryptedData);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS18_EncryptedPrivateKeyInfo::toStream (const char* name)

{
   asn1PrtToStrm_PKCS18_EncryptedPrivateKeyInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS18_EncryptedPrivateKeyInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS18_RSAPublicKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_RSAPublicKey* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "modulus", pvalue->modulus);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "publicExponent", pvalue->publicExponent);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS18_RSAPublicKey::toStream (const char* name)

{
   asn1PrtToStrm_PKCS18_RSAPublicKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS18_RSAPublicKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS18_RSAPrivateKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS18_RSAPrivateKey* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_Version (pctxt, "version", &pvalue->version);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "modulus", pvalue->modulus);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "publicExponent", pvalue->publicExponent);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "privateExponent", pvalue->privateExponent);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "prime1", pvalue->prime1);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "prime2", pvalue->prime2);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "exponent1", pvalue->exponent1);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "exponent2", pvalue->exponent2);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "coefficient", pvalue->coefficient);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS18_RSAPrivateKey::toStream (const char* name)

{
   asn1PrtToStrm_PKCS18_RSAPrivateKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS18_RSAPrivateKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

