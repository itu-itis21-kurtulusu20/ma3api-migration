/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "cms.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_CMS_ContentType (const char* name, 
   ASN1T_CMS_ContentType* pValue, ASN1T_CMS_ContentType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_ContentType::Equals (ASN1T_CMS_ContentType* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_ContentType ("ContentType", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_EncryptedKey (const char* name, 
   ASN1T_CMS_EncryptedKey* pValue, ASN1T_CMS_EncryptedKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_EncryptedKey::Equals (ASN1T_CMS_EncryptedKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_EncryptedKey ("EncryptedKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SubjectKeyIdentifier (const char* name, 
   ASN1T_CMS_SubjectKeyIdentifier* pValue, 
   ASN1T_CMS_SubjectKeyIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_SubjectKeyIdentifier::Equals (ASN1T_CMS_SubjectKeyIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SubjectKeyIdentifier ("SubjectKeyIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_Digest (const char* name, ASN1T_CMS_Digest* pValue, 
   ASN1T_CMS_Digest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_Digest::Equals (ASN1T_CMS_Digest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_Digest ("Digest", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_MessageAuthenticationCode (const char* name, 
   ASN1T_CMS_MessageAuthenticationCode* pValue, 
   ASN1T_CMS_MessageAuthenticationCode* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_MessageAuthenticationCode::Equals (ASN1T_CMS_MessageAuthenticationCode* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_MessageAuthenticationCode ("MessageAuthenticationCode", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_DigestAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pValue, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_DigestAlgorithmIdentifier::Equals (ASN1T_CMS_DigestAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_DigestAlgorithmIdentifier ("DigestAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SignatureAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pValue, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_SignatureAlgorithmIdentifier::Equals (ASN1T_CMS_SignatureAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SignatureAlgorithmIdentifier ("SignatureAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_KeyEncryptionAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_KeyEncryptionAlgorithmIdentifier::Equals (ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_KeyEncryptionAlgorithmIdentifier ("KeyEncryptionAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_ContentEncryptionAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_ContentEncryptionAlgorithmIdentifier::Equals (ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_ContentEncryptionAlgorithmIdentifier ("ContentEncryptionAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_MessageAuthenticationCodeAlgorithm (const char* name, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pValue, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_MessageAuthenticationCodeAlgorithm::Equals (ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_MessageAuthenticationCodeAlgorithm ("MessageAuthenticationCodeAlgorithm", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_KeyDerivationAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pValue, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_KeyDerivationAlgorithmIdentifier::Equals (ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_KeyDerivationAlgorithmIdentifier ("KeyDerivationAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_AttributeCertificateV2 (const char* name, 
   ASN1T_CMS_AttributeCertificateV2* pValue, 
   ASN1T_CMS_AttributeCertificateV2* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_ATTRCERT_AttributeCertificate (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_AttributeCertificateV2::Equals (ASN1T_CMS_AttributeCertificateV2* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_AttributeCertificateV2 ("AttributeCertificateV2", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_CMSVersion (const char* name, 
   ASN1T_CMS_CMSVersion* pValue, ASN1T_CMS_CMSVersion* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_CMSVersion::Equals (ASN1T_CMS_CMSVersion* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_CMSVersion ("CMSVersion", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_UserKeyingMaterial (const char* name, 
   ASN1T_CMS_UserKeyingMaterial* pValue, 
   ASN1T_CMS_UserKeyingMaterial* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_UserKeyingMaterial::Equals (ASN1T_CMS_UserKeyingMaterial* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_UserKeyingMaterial ("UserKeyingMaterial", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_MessageDigest (const char* name, 
   ASN1T_CMS_MessageDigest* pValue, ASN1T_CMS_MessageDigest* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_MessageDigest::Equals (ASN1T_CMS_MessageDigest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_MessageDigest ("MessageDigest", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SignerIdentifier (const char* name, 
   ASN1T_CMS_SignerIdentifier* pValue, ASN1T_CMS_SignerIdentifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.issuerAndSerialNumber", 0, 0, 0);
         if (! asn1Compare_PKCS7_IssuerAndSerialNumber (namebuf, pValue->u.issuerAndSerialNumber, pCmpValue->u.issuerAndSerialNumber, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* subjectKeyIdentifier */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.subjectKeyIdentifier", 0, 0, 0);
         if (! asn1Compare_CMS_SubjectKeyIdentifier (namebuf, pValue->u.subjectKeyIdentifier, pCmpValue->u.subjectKeyIdentifier, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_SignerIdentifier::Equals (ASN1T_CMS_SignerIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SignerIdentifier ("SignerIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_UnsignedAttributes (const char* name, 
   ASN1T_CMS_UnsignedAttributes* pValue, 
   ASN1T_CMS_UnsignedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_Attribute* pdata;
   ASN1T_EXP_Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Attribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_UnsignedAttributes::Equals (ASN1T_CMS_UnsignedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_UnsignedAttributes ("UnsignedAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SignerInfo (const char* name, 
   ASN1T_CMS_SignerInfo* pValue, ASN1T_CMS_SignerInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".sid", 0, 0, 0);
   if (! asn1Compare_CMS_SignerIdentifier (namebuf, &pValue->sid, &pCmpValue->sid, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_DigestAlgorithmIdentifier (namebuf, &pValue->digestAlgorithm, &pCmpValue->digestAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signedAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.signedAttrsPresent,
   pCmpValue->m.signedAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.signedAttrsPresent) 
   {
      if (! asn1Compare_DERCMS_SignedAttributes (namebuf, &pValue->signedAttrs, &pCmpValue->signedAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".signatureAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_SignatureAlgorithmIdentifier (namebuf, &pValue->signatureAlgorithm, &pCmpValue->signatureAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (! asn1Compare_DERCMS_SignatureValue (namebuf, &pValue->signature_, &pCmpValue->signature_, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".unsignedAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.unsignedAttrsPresent,
   pCmpValue->m.unsignedAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.unsignedAttrsPresent) 
   {
      if (! asn1Compare_CMS_UnsignedAttributes (namebuf, &pValue->unsignedAttrs, &pCmpValue->unsignedAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_SignerInfo::Equals (ASN1T_CMS_SignerInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SignerInfo ("SignerInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_Countersignature (const char* name, 
   ASN1T_CMS_Countersignature* pValue, ASN1T_CMS_Countersignature* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_CMS_SignerInfo (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_Countersignature::Equals (ASN1T_CMS_Countersignature* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_Countersignature ("Countersignature", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_Signature (const char* name, 
   ASN1T_CMS_Signature* pValue, ASN1T_CMS_Signature* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpBitStr (name, pValue->numbits, pValue->data, 
      pCmpValue->numbits, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_CMS_Signature::Equals (ASN1T_CMS_Signature* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_Signature ("Signature", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_ContentInfo (const char* name, 
   ASN1T_CMS_ContentInfo* pValue, ASN1T_CMS_ContentInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".contentType", 0, 0, 0);
   if (! asn1Compare_CMS_ContentType (namebuf, &pValue->contentType, &pCmpValue->contentType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".content", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->content.numocts,
   pValue->content.data,
   pCmpValue->content.numocts,
   pCmpValue->content.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_ContentInfo::Equals (ASN1T_CMS_ContentInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_ContentInfo ("ContentInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_EncapsulatedContentInfo (const char* name, 
   ASN1T_CMS_EncapsulatedContentInfo* pValue, 
   ASN1T_CMS_EncapsulatedContentInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".eContentType", 0, 0, 0);
   if (! asn1Compare_CMS_ContentType (namebuf, &pValue->eContentType, &pCmpValue->eContentType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".eContent", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.eContentPresent,
   pCmpValue->m.eContentPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.eContentPresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->eContent.numocts, 
         pValue->eContent.data, pCmpValue->eContent.numocts, 
         pCmpValue->eContent.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_EncapsulatedContentInfo::Equals (ASN1T_CMS_EncapsulatedContentInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_EncapsulatedContentInfo ("EncapsulatedContentInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_UnauthAttributes (const char* name, 
   ASN1T_CMS_UnauthAttributes* pValue, ASN1T_CMS_UnauthAttributes* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_Attribute* pdata;
   ASN1T_EXP_Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Attribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_UnauthAttributes::Equals (ASN1T_CMS_UnauthAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_UnauthAttributes ("UnauthAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_ExtendedCertificateInfo (const char* name, 
   ASN1T_CMS_ExtendedCertificateInfo* pValue, 
   ASN1T_CMS_ExtendedCertificateInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certificate", 0, 0, 0);
   if (! asn1Compare_EXP_Certificate (namebuf, &pValue->certificate, &pCmpValue->certificate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".attributes", 0, 0, 0);
   if (! asn1Compare_CMS_UnauthAttributes (namebuf, &pValue->attributes, &pCmpValue->attributes, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_ExtendedCertificateInfo::Equals (ASN1T_CMS_ExtendedCertificateInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_ExtendedCertificateInfo ("ExtendedCertificateInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_ExtendedCertificate (const char* name, 
   ASN1T_CMS_ExtendedCertificate* pValue, 
   ASN1T_CMS_ExtendedCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".extendedCertificateInfo", 0, 0, 0);
   if (! asn1Compare_CMS_ExtendedCertificateInfo (namebuf, &pValue->extendedCertificateInfo, &pCmpValue->extendedCertificateInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signatureAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_SignatureAlgorithmIdentifier (namebuf, &pValue->signatureAlgorithm, &pCmpValue->signatureAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (! asn1Compare_CMS_Signature (namebuf, &pValue->signature_, &pCmpValue->signature_, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_ExtendedCertificate::Equals (ASN1T_CMS_ExtendedCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_ExtendedCertificate ("ExtendedCertificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_OtherCertificateFormat (const char* name, 
   ASN1T_CMS_OtherCertificateFormat* pValue, 
   ASN1T_CMS_OtherCertificateFormat* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".otherCertFormat", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->otherCertFormat, (ASN1OBJID*)&pCmpValue->otherCertFormat, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".otherCert", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->otherCert.numocts,
   pValue->otherCert.data,
   pCmpValue->otherCert.numocts,
   pCmpValue->otherCert.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_OtherCertificateFormat::Equals (ASN1T_CMS_OtherCertificateFormat* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_OtherCertificateFormat ("OtherCertificateFormat", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_CertificateChoices (const char* name, 
   ASN1T_CMS_CertificateChoices* pValue, 
   ASN1T_CMS_CertificateChoices* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* certificate */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.certificate", 0, 0, 0);
         if (! asn1Compare_EXP_Certificate (namebuf, pValue->u.certificate, pCmpValue->u.certificate, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* extendedCertificate */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.extendedCertificate", 0, 0, 0);
         if (! asn1Compare_CMS_ExtendedCertificate (namebuf, pValue->u.extendedCertificate, pCmpValue->u.extendedCertificate, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* v1AttrCert */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.v1AttrCert", 0, 0, 0);
         if (! asn1Compare_ATTRCERT_AttributeCertificateV1 (namebuf, pValue->u.v1AttrCert, pCmpValue->u.v1AttrCert, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* v2AttrCert */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.v2AttrCert", 0, 0, 0);
         if (! asn1Compare_CMS_AttributeCertificateV2 (namebuf, pValue->u.v2AttrCert, pCmpValue->u.v2AttrCert, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* other */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.other", 0, 0, 0);
         if (! asn1Compare_CMS_OtherCertificateFormat (namebuf, pValue->u.other, pCmpValue->u.other, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_CertificateChoices::Equals (ASN1T_CMS_CertificateChoices* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_CertificateChoices ("CertificateChoices", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_CertificateSet (const char* name, 
   ASN1T_CMS_CertificateSet* pValue, ASN1T_CMS_CertificateSet* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMS_CertificateChoices* pdata;
   ASN1T_CMS_CertificateChoices* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMS_CertificateChoices*) pnode->data;
      pCmpdata = (ASN1T_CMS_CertificateChoices*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMS_CertificateChoices (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_CertificateSet::Equals (ASN1T_CMS_CertificateSet* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_CertificateSet ("CertificateSet", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_OtherRevocationInfoFormat (const char* name, 
   ASN1T_CMS_OtherRevocationInfoFormat* pValue, 
   ASN1T_CMS_OtherRevocationInfoFormat* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".otherRevInfoFormat", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->otherRevInfoFormat, (ASN1OBJID*)&pCmpValue->otherRevInfoFormat, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".otherRevInfo", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->otherRevInfo.numocts,
   pValue->otherRevInfo.data,
   pCmpValue->otherRevInfo.numocts,
   pCmpValue->otherRevInfo.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_OtherRevocationInfoFormat::Equals (ASN1T_CMS_OtherRevocationInfoFormat* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_OtherRevocationInfoFormat ("OtherRevocationInfoFormat", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_RevocationInfoChoice (const char* name, 
   ASN1T_CMS_RevocationInfoChoice* pValue, 
   ASN1T_CMS_RevocationInfoChoice* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* crl */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.crl", 0, 0, 0);
         if (! asn1Compare_EXP_CertificateList (namebuf, pValue->u.crl, pCmpValue->u.crl, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* other */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.other", 0, 0, 0);
         if (! asn1Compare_CMS_OtherRevocationInfoFormat (namebuf, pValue->u.other, pCmpValue->u.other, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_RevocationInfoChoice::Equals (ASN1T_CMS_RevocationInfoChoice* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_RevocationInfoChoice ("RevocationInfoChoice", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_RevocationInfoChoices (const char* name, 
   ASN1T_CMS_RevocationInfoChoices* pValue, 
   ASN1T_CMS_RevocationInfoChoices* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMS_RevocationInfoChoice* pdata;
   ASN1T_CMS_RevocationInfoChoice* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMS_RevocationInfoChoice*) pnode->data;
      pCmpdata = (ASN1T_CMS_RevocationInfoChoice*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMS_RevocationInfoChoice (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_RevocationInfoChoices::Equals (ASN1T_CMS_RevocationInfoChoices* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_RevocationInfoChoices ("RevocationInfoChoices", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SignerInfos (const char* name, 
   ASN1T_CMS_SignerInfos* pValue, ASN1T_CMS_SignerInfos* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMS_SignerInfo* pdata;
   ASN1T_CMS_SignerInfo* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMS_SignerInfo*) pnode->data;
      pCmpdata = (ASN1T_CMS_SignerInfo*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMS_SignerInfo (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_SignerInfos::Equals (ASN1T_CMS_SignerInfos* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SignerInfos ("SignerInfos", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SignedData (const char* name, 
   ASN1T_CMS_SignedData* pValue, ASN1T_CMS_SignedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithms", 0, 0, 0);
   if (! asn1Compare_PKCS7_DigestAlgorithmIdentifiers (namebuf, &pValue->digestAlgorithms, &pCmpValue->digestAlgorithms, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encapContentInfo", 0, 0, 0);
   if (! asn1Compare_CMS_EncapsulatedContentInfo (namebuf, &pValue->encapContentInfo, &pCmpValue->encapContentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certificates", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certificatesPresent,
   pCmpValue->m.certificatesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certificatesPresent) 
   {
      if (! asn1Compare_CMS_CertificateSet (namebuf, &pValue->certificates, &pCmpValue->certificates, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".crls", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlsPresent,
   pCmpValue->m.crlsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlsPresent) 
   {
      if (! asn1Compare_CMS_RevocationInfoChoices (namebuf, &pValue->crls, &pCmpValue->crls, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".signerInfos", 0, 0, 0);
   if (! asn1Compare_CMS_SignerInfos (namebuf, &pValue->signerInfos, &pCmpValue->signerInfos, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_SignedData::Equals (ASN1T_CMS_SignedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SignedData ("SignedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_OriginatorInfo (const char* name, 
   ASN1T_CMS_OriginatorInfo* pValue, ASN1T_CMS_OriginatorInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certsPresent,
   pCmpValue->m.certsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certsPresent) 
   {
      if (! asn1Compare_CMS_CertificateSet (namebuf, &pValue->certs, &pCmpValue->certs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".crls", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlsPresent,
   pCmpValue->m.crlsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlsPresent) 
   {
      if (! asn1Compare_CMS_RevocationInfoChoices (namebuf, &pValue->crls, &pCmpValue->crls, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_OriginatorInfo::Equals (ASN1T_CMS_OriginatorInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_OriginatorInfo ("OriginatorInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_RecipientIdentifier (const char* name, 
   ASN1T_CMS_RecipientIdentifier* pValue, 
   ASN1T_CMS_RecipientIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.issuerAndSerialNumber", 0, 0, 0);
         if (! asn1Compare_PKCS7_IssuerAndSerialNumber (namebuf, pValue->u.issuerAndSerialNumber, pCmpValue->u.issuerAndSerialNumber, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* subjectKeyIdentifier */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.subjectKeyIdentifier", 0, 0, 0);
         if (! asn1Compare_CMS_SubjectKeyIdentifier (namebuf, pValue->u.subjectKeyIdentifier, pCmpValue->u.subjectKeyIdentifier, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_RecipientIdentifier::Equals (ASN1T_CMS_RecipientIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_RecipientIdentifier ("RecipientIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_KeyTransRecipientInfo (const char* name, 
   ASN1T_CMS_KeyTransRecipientInfo* pValue, 
   ASN1T_CMS_KeyTransRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".rid", 0, 0, 0);
   if (! asn1Compare_CMS_RecipientIdentifier (namebuf, &pValue->rid, &pCmpValue->rid, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".keyEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_KeyEncryptionAlgorithmIdentifier (namebuf, &pValue->keyEncryptionAlgorithm, &pCmpValue->keyEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedKey", 0, 0, 0);
   if (! asn1Compare_CMS_EncryptedKey (namebuf, &pValue->encryptedKey, &pCmpValue->encryptedKey, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_KeyTransRecipientInfo::Equals (ASN1T_CMS_KeyTransRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_KeyTransRecipientInfo ("KeyTransRecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_OriginatorPublicKey (const char* name, 
   ASN1T_CMS_OriginatorPublicKey* pValue, 
   ASN1T_CMS_OriginatorPublicKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".algorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->algorithm, &pCmpValue->algorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".publicKey", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->publicKey.numbits, 
      pValue->publicKey.data, pCmpValue->publicKey.numbits, 
      pCmpValue->publicKey.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_OriginatorPublicKey::Equals (ASN1T_CMS_OriginatorPublicKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_OriginatorPublicKey ("OriginatorPublicKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_OriginatorIdentifierOrKey (const char* name, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pValue, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.issuerAndSerialNumber", 0, 0, 0);
         if (! asn1Compare_PKCS7_IssuerAndSerialNumber (namebuf, pValue->u.issuerAndSerialNumber, pCmpValue->u.issuerAndSerialNumber, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* subjectKeyIdentifier */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.subjectKeyIdentifier", 0, 0, 0);
         if (! asn1Compare_CMS_SubjectKeyIdentifier (namebuf, pValue->u.subjectKeyIdentifier, pCmpValue->u.subjectKeyIdentifier, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* originatorKey */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.originatorKey", 0, 0, 0);
         if (! asn1Compare_CMS_OriginatorPublicKey (namebuf, pValue->u.originatorKey, pCmpValue->u.originatorKey, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_OriginatorIdentifierOrKey::Equals (ASN1T_CMS_OriginatorIdentifierOrKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_OriginatorIdentifierOrKey ("OriginatorIdentifierOrKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_OtherKeyAttribute (const char* name, 
   ASN1T_CMS_OtherKeyAttribute* pValue, 
   ASN1T_CMS_OtherKeyAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".keyAttrId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->keyAttrId, (ASN1OBJID*)&pCmpValue->keyAttrId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".keyAttr", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.keyAttrPresent,
   pCmpValue->m.keyAttrPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.keyAttrPresent) 
   {
      if ( !rtCmpOpenType (namebuf,
      pValue->keyAttr.numocts,
      pValue->keyAttr.data,
      pCmpValue->keyAttr.numocts,
      pCmpValue->keyAttr.data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_OtherKeyAttribute::Equals (ASN1T_CMS_OtherKeyAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_OtherKeyAttribute ("OtherKeyAttribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_RecipientKeyIdentifier (const char* name, 
   ASN1T_CMS_RecipientKeyIdentifier* pValue, 
   ASN1T_CMS_RecipientKeyIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".subjectKeyIdentifier", 0, 0, 0);
   if (! asn1Compare_CMS_SubjectKeyIdentifier (namebuf, &pValue->subjectKeyIdentifier, &pCmpValue->subjectKeyIdentifier, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".date", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.datePresent,
   pCmpValue->m.datePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.datePresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->date, pCmpValue->date, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".other", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.otherPresent,
   pCmpValue->m.otherPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.otherPresent) 
   {
      if (! asn1Compare_CMS_OtherKeyAttribute (namebuf, &pValue->other, &pCmpValue->other, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_RecipientKeyIdentifier::Equals (ASN1T_CMS_RecipientKeyIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_RecipientKeyIdentifier ("RecipientKeyIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_KeyAgreeRecipientIdentifier (const char* name, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pValue, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.issuerAndSerialNumber", 0, 0, 0);
         if (! asn1Compare_PKCS7_IssuerAndSerialNumber (namebuf, pValue->u.issuerAndSerialNumber, pCmpValue->u.issuerAndSerialNumber, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* rKeyId */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.rKeyId", 0, 0, 0);
         if (! asn1Compare_CMS_RecipientKeyIdentifier (namebuf, pValue->u.rKeyId, pCmpValue->u.rKeyId, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_KeyAgreeRecipientIdentifier::Equals (ASN1T_CMS_KeyAgreeRecipientIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_KeyAgreeRecipientIdentifier ("KeyAgreeRecipientIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_RecipientEncryptedKey (const char* name, 
   ASN1T_CMS_RecipientEncryptedKey* pValue, 
   ASN1T_CMS_RecipientEncryptedKey* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".rid", 0, 0, 0);
   if (! asn1Compare_CMS_KeyAgreeRecipientIdentifier (namebuf, &pValue->rid, &pCmpValue->rid, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedKey", 0, 0, 0);
   if (! asn1Compare_CMS_EncryptedKey (namebuf, &pValue->encryptedKey, &pCmpValue->encryptedKey, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_RecipientEncryptedKey::Equals (ASN1T_CMS_RecipientEncryptedKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_RecipientEncryptedKey ("RecipientEncryptedKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_RecipientEncryptedKeys (const char* name, 
   ASN1T_CMS_RecipientEncryptedKeys* pValue, 
   ASN1T_CMS_RecipientEncryptedKeys* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_CMS_RecipientEncryptedKey* pdata;
   ASN1T_CMS_RecipientEncryptedKey* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMS_RecipientEncryptedKey*) pnode->data;
      pCmpdata = (ASN1T_CMS_RecipientEncryptedKey*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMS_RecipientEncryptedKey (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_RecipientEncryptedKeys::Equals (ASN1T_CMS_RecipientEncryptedKeys* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_RecipientEncryptedKeys ("RecipientEncryptedKeys", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_KeyAgreeRecipientInfo (const char* name, 
   ASN1T_CMS_KeyAgreeRecipientInfo* pValue, 
   ASN1T_CMS_KeyAgreeRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".originator", 0, 0, 0);
   if (! asn1Compare_CMS_OriginatorIdentifierOrKey (namebuf, &pValue->originator, &pCmpValue->originator, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".ukm", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.ukmPresent,
   pCmpValue->m.ukmPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.ukmPresent) 
   {
      if (! asn1Compare_CMS_UserKeyingMaterial (namebuf, &pValue->ukm, &pCmpValue->ukm, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".keyEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_KeyEncryptionAlgorithmIdentifier (namebuf, &pValue->keyEncryptionAlgorithm, &pCmpValue->keyEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".recipientEncryptedKeys", 0, 0, 0);
   if (! asn1Compare_CMS_RecipientEncryptedKeys (namebuf, &pValue->recipientEncryptedKeys, &pCmpValue->recipientEncryptedKeys, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_KeyAgreeRecipientInfo::Equals (ASN1T_CMS_KeyAgreeRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_KeyAgreeRecipientInfo ("KeyAgreeRecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_KEKIdentifier (const char* name, 
   ASN1T_CMS_KEKIdentifier* pValue, ASN1T_CMS_KEKIdentifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".keyIdentifier", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->keyIdentifier.numocts, 
      pValue->keyIdentifier.data, pCmpValue->keyIdentifier.numocts, 
      pCmpValue->keyIdentifier.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".date", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.datePresent,
   pCmpValue->m.datePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.datePresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->date, pCmpValue->date, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".other", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.otherPresent,
   pCmpValue->m.otherPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.otherPresent) 
   {
      if (! asn1Compare_CMS_OtherKeyAttribute (namebuf, &pValue->other, &pCmpValue->other, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_KEKIdentifier::Equals (ASN1T_CMS_KEKIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_KEKIdentifier ("KEKIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_KEKRecipientInfo (const char* name, 
   ASN1T_CMS_KEKRecipientInfo* pValue, ASN1T_CMS_KEKRecipientInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".kekid", 0, 0, 0);
   if (! asn1Compare_CMS_KEKIdentifier (namebuf, &pValue->kekid, &pCmpValue->kekid, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".keyEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_KeyEncryptionAlgorithmIdentifier (namebuf, &pValue->keyEncryptionAlgorithm, &pCmpValue->keyEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedKey", 0, 0, 0);
   if (! asn1Compare_CMS_EncryptedKey (namebuf, &pValue->encryptedKey, &pCmpValue->encryptedKey, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_KEKRecipientInfo::Equals (ASN1T_CMS_KEKRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_KEKRecipientInfo ("KEKRecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_PasswordRecipientInfo (const char* name, 
   ASN1T_CMS_PasswordRecipientInfo* pValue, 
   ASN1T_CMS_PasswordRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".keyDerivationAlgorithm", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.keyDerivationAlgorithmPresent,
   pCmpValue->m.keyDerivationAlgorithmPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.keyDerivationAlgorithmPresent) 
   {
      if (! asn1Compare_CMS_KeyDerivationAlgorithmIdentifier (namebuf, &pValue->keyDerivationAlgorithm, &pCmpValue->keyDerivationAlgorithm, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".keyEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_KeyEncryptionAlgorithmIdentifier (namebuf, &pValue->keyEncryptionAlgorithm, &pCmpValue->keyEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedKey", 0, 0, 0);
   if (! asn1Compare_CMS_EncryptedKey (namebuf, &pValue->encryptedKey, &pCmpValue->encryptedKey, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_PasswordRecipientInfo::Equals (ASN1T_CMS_PasswordRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_PasswordRecipientInfo ("PasswordRecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_OtherRecipientInfo (const char* name, 
   ASN1T_CMS_OtherRecipientInfo* pValue, 
   ASN1T_CMS_OtherRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".oriType", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->oriType, (ASN1OBJID*)&pCmpValue->oriType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".oriValue", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->oriValue.numocts,
   pValue->oriValue.data,
   pCmpValue->oriValue.numocts,
   pCmpValue->oriValue.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_OtherRecipientInfo::Equals (ASN1T_CMS_OtherRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_OtherRecipientInfo ("OtherRecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_RecipientInfo (const char* name, 
   ASN1T_CMS_RecipientInfo* pValue, ASN1T_CMS_RecipientInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* ktri */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.ktri", 0, 0, 0);
         if (! asn1Compare_CMS_KeyTransRecipientInfo (namebuf, pValue->u.ktri, pCmpValue->u.ktri, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* kari */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.kari", 0, 0, 0);
         if (! asn1Compare_CMS_KeyAgreeRecipientInfo (namebuf, pValue->u.kari, pCmpValue->u.kari, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* kekri */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.kekri", 0, 0, 0);
         if (! asn1Compare_CMS_KEKRecipientInfo (namebuf, pValue->u.kekri, pCmpValue->u.kekri, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* pwri */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.pwri", 0, 0, 0);
         if (! asn1Compare_CMS_PasswordRecipientInfo (namebuf, pValue->u.pwri, pCmpValue->u.pwri, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* ori */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.ori", 0, 0, 0);
         if (! asn1Compare_CMS_OtherRecipientInfo (namebuf, pValue->u.ori, pCmpValue->u.ori, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_RecipientInfo::Equals (ASN1T_CMS_RecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_RecipientInfo ("RecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_RecipientInfos (const char* name, 
   ASN1T_CMS_RecipientInfos* pValue, ASN1T_CMS_RecipientInfos* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMS_RecipientInfo* pdata;
   ASN1T_CMS_RecipientInfo* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMS_RecipientInfo*) pnode->data;
      pCmpdata = (ASN1T_CMS_RecipientInfo*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMS_RecipientInfo (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_RecipientInfos::Equals (ASN1T_CMS_RecipientInfos* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_RecipientInfos ("RecipientInfos", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_UnprotectedAttributes (const char* name, 
   ASN1T_CMS_UnprotectedAttributes* pValue, 
   ASN1T_CMS_UnprotectedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_Attribute* pdata;
   ASN1T_EXP_Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Attribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_UnprotectedAttributes::Equals (ASN1T_CMS_UnprotectedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_UnprotectedAttributes ("UnprotectedAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_EnvelopedData (const char* name, 
   ASN1T_CMS_EnvelopedData* pValue, ASN1T_CMS_EnvelopedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".originatorInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.originatorInfoPresent,
   pCmpValue->m.originatorInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.originatorInfoPresent) 
   {
      if (! asn1Compare_CMS_OriginatorInfo (namebuf, &pValue->originatorInfo, &pCmpValue->originatorInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".recipientInfos", 0, 0, 0);
   if (! asn1Compare_CMS_RecipientInfos (namebuf, &pValue->recipientInfos, &pCmpValue->recipientInfos, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedContentInfo", 0, 0, 0);
   if (! asn1Compare_PKCS7_EncryptedContentInfo (namebuf, &pValue->encryptedContentInfo, &pCmpValue->encryptedContentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".unprotectedAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.unprotectedAttrsPresent,
   pCmpValue->m.unprotectedAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.unprotectedAttrsPresent) 
   {
      if (! asn1Compare_CMS_UnprotectedAttributes (namebuf, &pValue->unprotectedAttrs, &pCmpValue->unprotectedAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_EnvelopedData::Equals (ASN1T_CMS_EnvelopedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_EnvelopedData ("EnvelopedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_DigestedData (const char* name, 
   ASN1T_CMS_DigestedData* pValue, ASN1T_CMS_DigestedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_DigestAlgorithmIdentifier (namebuf, &pValue->digestAlgorithm, &pCmpValue->digestAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encapContentInfo", 0, 0, 0);
   if (! asn1Compare_CMS_EncapsulatedContentInfo (namebuf, &pValue->encapContentInfo, &pCmpValue->encapContentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digest", 0, 0, 0);
   if (! asn1Compare_CMS_Digest (namebuf, &pValue->digest, &pCmpValue->digest, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_CMS_DigestedData::Equals (ASN1T_CMS_DigestedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_DigestedData ("DigestedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_EncryptedData (const char* name, 
   ASN1T_CMS_EncryptedData* pValue, ASN1T_CMS_EncryptedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedContentInfo", 0, 0, 0);
   if (! asn1Compare_PKCS7_EncryptedContentInfo (namebuf, &pValue->encryptedContentInfo, &pCmpValue->encryptedContentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".unprotectedAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.unprotectedAttrsPresent,
   pCmpValue->m.unprotectedAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.unprotectedAttrsPresent) 
   {
      if (! asn1Compare_CMS_UnprotectedAttributes (namebuf, &pValue->unprotectedAttrs, &pCmpValue->unprotectedAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_EncryptedData::Equals (ASN1T_CMS_EncryptedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_EncryptedData ("EncryptedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_AuthenticatedData (const char* name, 
   ASN1T_CMS_AuthenticatedData* pValue, 
   ASN1T_CMS_AuthenticatedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".originatorInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.originatorInfoPresent,
   pCmpValue->m.originatorInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.originatorInfoPresent) 
   {
      if (! asn1Compare_CMS_OriginatorInfo (namebuf, &pValue->originatorInfo, &pCmpValue->originatorInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".recipientInfos", 0, 0, 0);
   if (! asn1Compare_CMS_RecipientInfos (namebuf, &pValue->recipientInfos, &pCmpValue->recipientInfos, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".macAlgorithm", 0, 0, 0);
   if (! asn1Compare_CMS_MessageAuthenticationCodeAlgorithm (namebuf, &pValue->macAlgorithm, &pCmpValue->macAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithm", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.digestAlgorithmPresent,
   pCmpValue->m.digestAlgorithmPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.digestAlgorithmPresent) 
   {
      if (! asn1Compare_CMS_DigestAlgorithmIdentifier (namebuf, &pValue->digestAlgorithm, &pCmpValue->digestAlgorithm, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".encapContentInfo", 0, 0, 0);
   if (! asn1Compare_CMS_EncapsulatedContentInfo (namebuf, &pValue->encapContentInfo, &pCmpValue->encapContentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".authAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.authAttrsPresent,
   pCmpValue->m.authAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.authAttrsPresent) 
   {
      if (! asn1Compare_DERCMS_AuthAttributes (namebuf, &pValue->authAttrs, &pCmpValue->authAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".mac", 0, 0, 0);
   if (! asn1Compare_CMS_MessageAuthenticationCode (namebuf, &pValue->mac, &pCmpValue->mac, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".unauthAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.unauthAttrsPresent,
   pCmpValue->m.unauthAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.unauthAttrsPresent) 
   {
      if (! asn1Compare_CMS_UnauthAttributes (namebuf, &pValue->unauthAttrs, &pCmpValue->unauthAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_AuthenticatedData::Equals (ASN1T_CMS_AuthenticatedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_AuthenticatedData ("AuthenticatedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_ExtendedCertificateOrCertificate (const char* name, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pValue, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* certificate */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.certificate", 0, 0, 0);
         if (! asn1Compare_EXP_Certificate (namebuf, pValue->u.certificate, pCmpValue->u.certificate, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* extendedCertificate */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.extendedCertificate", 0, 0, 0);
         if (! asn1Compare_CMS_ExtendedCertificate (namebuf, pValue->u.extendedCertificate, pCmpValue->u.extendedCertificate, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_ExtendedCertificateOrCertificate::Equals (ASN1T_CMS_ExtendedCertificateOrCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_ExtendedCertificateOrCertificate ("ExtendedCertificateOrCertificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SMIMECapability (const char* name, 
   ASN1T_CMS_SMIMECapability* pValue, ASN1T_CMS_SMIMECapability* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".capabilityID", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->capabilityID, (ASN1OBJID*)&pCmpValue->capabilityID, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".parameters", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.parametersPresent,
   pCmpValue->m.parametersPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.parametersPresent) 
   {
      if ( !rtCmpOpenType (namebuf,
      pValue->parameters.numocts,
      pValue->parameters.data,
      pCmpValue->parameters.numocts,
      pCmpValue->parameters.data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_SMIMECapability::Equals (ASN1T_CMS_SMIMECapability* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SMIMECapability ("SMIMECapability", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SMIMECapabilities (const char* name, 
   ASN1T_CMS_SMIMECapabilities* pValue, 
   ASN1T_CMS_SMIMECapabilities* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_CMS_SMIMECapability* pdata;
   ASN1T_CMS_SMIMECapability* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_CMS_SMIMECapability*) pnode->data;
      pCmpdata = (ASN1T_CMS_SMIMECapability*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_CMS_SMIMECapability (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_CMS_SMIMECapabilities::Equals (ASN1T_CMS_SMIMECapabilities* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SMIMECapabilities ("SMIMECapabilities", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_SMIMEEncryptionKeyPreference (const char* name, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pValue, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.issuerAndSerialNumber", 0, 0, 0);
         if (! asn1Compare_PKCS7_IssuerAndSerialNumber (namebuf, pValue->u.issuerAndSerialNumber, pCmpValue->u.issuerAndSerialNumber, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* receipentKeyId */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.receipentKeyId", 0, 0, 0);
         if (! asn1Compare_CMS_RecipientKeyIdentifier (namebuf, pValue->u.receipentKeyId, pCmpValue->u.receipentKeyId, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* subjectAltKeyIdentifier */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.subjectAltKeyIdentifier", 0, 0, 0);
         if (! asn1Compare_CMS_SubjectKeyIdentifier (namebuf, pValue->u.subjectAltKeyIdentifier, pCmpValue->u.subjectAltKeyIdentifier, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_CMS_SMIMEEncryptionKeyPreference::Equals (ASN1T_CMS_SMIMEEncryptionKeyPreference* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_SMIMEEncryptionKeyPreference ("SMIMEEncryptionKeyPreference", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_MQVuserKeyingMaterial (const char* name, 
   ASN1T_CMS_MQVuserKeyingMaterial* pValue, 
   ASN1T_CMS_MQVuserKeyingMaterial* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".ephemeralPublicKey", 0, 0, 0);
   if (! asn1Compare_CMS_OriginatorPublicKey (namebuf, &pValue->ephemeralPublicKey, &pCmpValue->ephemeralPublicKey, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".addedukm", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.addedukmPresent,
   pCmpValue->m.addedukmPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.addedukmPresent) 
   {
      if (! asn1Compare_CMS_UserKeyingMaterial (namebuf, &pValue->addedukm, &pCmpValue->addedukm, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_MQVuserKeyingMaterial::Equals (ASN1T_CMS_MQVuserKeyingMaterial* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_MQVuserKeyingMaterial ("MQVuserKeyingMaterial", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_CMS_AuthEnvelopedData (const char* name, 
   ASN1T_CMS_AuthEnvelopedData* pValue, 
   ASN1T_CMS_AuthEnvelopedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_CMS_CMSVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".originatorInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.originatorInfoPresent,
   pCmpValue->m.originatorInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.originatorInfoPresent) 
   {
      if (! asn1Compare_CMS_OriginatorInfo (namebuf, &pValue->originatorInfo, &pCmpValue->originatorInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".recipientInfos", 0, 0, 0);
   if (! asn1Compare_CMS_RecipientInfos (namebuf, &pValue->recipientInfos, &pCmpValue->recipientInfos, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".authEncryptedContentInfo", 0, 0, 0);
   if (! asn1Compare_PKCS7_EncryptedContentInfo (namebuf, &pValue->authEncryptedContentInfo, &pCmpValue->authEncryptedContentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".authAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.authAttrsPresent,
   pCmpValue->m.authAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.authAttrsPresent) 
   {
      if (! asn1Compare_DERCMS_AuthAttributes (namebuf, &pValue->authAttrs, &pCmpValue->authAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".mac", 0, 0, 0);
   if (! asn1Compare_CMS_MessageAuthenticationCode (namebuf, &pValue->mac, &pCmpValue->mac, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".unauthAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.unauthAttrsPresent,
   pCmpValue->m.unauthAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.unauthAttrsPresent) 
   {
      if (! asn1Compare_CMS_UnauthAttributes (namebuf, &pValue->unauthAttrs, &pCmpValue->unauthAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_CMS_AuthEnvelopedData::Equals (ASN1T_CMS_AuthEnvelopedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_CMS_AuthEnvelopedData ("AuthEnvelopedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

