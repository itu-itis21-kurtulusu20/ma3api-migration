/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "cmp.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_CMP_PKIProtection (OSCTXT* pctxt,
   ASN1T_CMP_PKIProtection *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIProtection");

   ll = xe_bitstr (pctxt, pvalue->data, pvalue->numbits, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIHeader_pvno (OSCTXT* pctxt,
   ASN1T_CMP_PKIHeader_pvno *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   return (ll0);
}

EXTERN int asn1E_CMP_PKIFreeText (OSCTXT* pctxt,
   ASN1T_CMP_PKIFreeText *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIFreeText");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "UTF8String", xx1);

      ll = xe_utf8str (pctxt, ((const OSUTF8CHAR*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_InfoTypeAndValue (OSCTXT* pctxt,
   ASN1T_CMP_InfoTypeAndValue *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "InfoTypeAndValue");

   /* encode infoValue */

   if (pvalue->m.infoValuePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "infoValue");

      ll = xe_OpenType (pctxt, pvalue->infoValue.data, pvalue->infoValue.numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode infoType */

   RTXCTXTPUSHELEMNAME (pctxt, "infoType");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->infoType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIHeader_generalInfo (OSCTXT* pctxt,
   ASN1T_CMP_PKIHeader_generalInfo *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "InfoTypeAndValue", xx1);

      ll = asn1E_CMP_InfoTypeAndValue (pctxt, ((ASN1T_CMP_InfoTypeAndValue*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll1 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll1);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_CTXT|TM_CONS|8, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIHeader (OSCTXT* pctxt,
   ASN1T_CMP_PKIHeader *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIHeader");

   /* encode generalInfo */

   if (pvalue->m.generalInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "generalInfo");

      ll = asn1E_CMP_PKIHeader_generalInfo (pctxt, &pvalue->generalInfo, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode freeText */

   if (pvalue->m.freeTextPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "freeText");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|7,
         asn1E_CMP_PKIFreeText (pctxt, &pvalue->freeText, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode recipNonce */

   if (pvalue->m.recipNoncePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "recipNonce");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|6,
         xe_octstr (pctxt, pvalue->recipNonce.data, pvalue->recipNonce.numocts, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode senderNonce */

   if (pvalue->m.senderNoncePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "senderNonce");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|5,
         xe_octstr (pctxt, pvalue->senderNonce.data, pvalue->senderNonce.numocts, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode transactionID */

   if (pvalue->m.transactionIDPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "transactionID");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|4,
         xe_octstr (pctxt, pvalue->transactionID.data, pvalue->transactionID.numocts, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode recipKID */

   if (pvalue->m.recipKIDPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "recipKID");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
         asn1E_IMP_KeyIdentifier (pctxt, &pvalue->recipKID, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode senderKID */

   if (pvalue->m.senderKIDPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "senderKID");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         asn1E_IMP_KeyIdentifier (pctxt, &pvalue->senderKID, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode protectionAlg */

   if (pvalue->m.protectionAlgPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "protectionAlg");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->protectionAlg, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode messageTime */

   if (pvalue->m.messageTimePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "messageTime");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         xe_charstr (pctxt, pvalue->messageTime, ASN1EXPL, TM_UNIV|TM_PRIM|24));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode recipient */

   RTXCTXTPUSHELEMNAME (pctxt, "recipient");

   ll = asn1E_IMP_GeneralName (pctxt, &pvalue->recipient, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode sender */

   RTXCTXTPUSHELEMNAME (pctxt, "sender");

   ll = asn1E_IMP_GeneralName (pctxt, &pvalue->sender, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode pvno */

   RTXCTXTPUSHELEMNAME (pctxt, "pvno");

   ll = asn1E_CMP_PKIHeader_pvno (pctxt, &pvalue->pvno, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CMPCertificate (OSCTXT* pctxt,
   ASN1T_CMP_CMPCertificate *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CMPCertificate");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "x509v3PKCert");

         ll = asn1E_EXP_Certificate (pctxt, pvalue->u.x509v3PKCert, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CertRepMessage_caPubs (OSCTXT* pctxt,
   ASN1T_CMP_CertRepMessage_caPubs *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CMPCertificate", xx1);

      ll = asn1E_CMP_CMPCertificate (pctxt, ((ASN1T_CMP_CMPCertificate*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll1 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll1);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIStatus (OSCTXT* pctxt,
   ASN1T_CMP_PKIStatus *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIStatus");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIFailureInfo (OSCTXT* pctxt,
   ASN1T_CMP_PKIFailureInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIFailureInfo");

   ll = derEncBitString (pctxt, pvalue->data, pvalue->numbits, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIStatusInfo (OSCTXT* pctxt,
   ASN1T_CMP_PKIStatusInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIStatusInfo");

   /* encode failInfo */

   if (pvalue->m.failInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "failInfo");

      ll = asn1E_CMP_PKIFailureInfo (pctxt, &pvalue->failInfo, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode statusString */

   if (pvalue->m.statusStringPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "statusString");

      ll = asn1E_CMP_PKIFreeText (pctxt, &pvalue->statusString, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode status */

   RTXCTXTPUSHELEMNAME (pctxt, "status");

   ll = asn1E_CMP_PKIStatus (pctxt, &pvalue->status, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CertOrEncCert (OSCTXT* pctxt,
   ASN1T_CMP_CertOrEncCert *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertOrEncCert");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "certificate");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_CMP_CMPCertificate (pctxt, pvalue->u.certificate, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "encryptedCert");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_CRMF_EncryptedValue (pctxt, pvalue->u.encryptedCert, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CertifiedKeyPair (OSCTXT* pctxt,
   ASN1T_CMP_CertifiedKeyPair *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertifiedKeyPair");

   /* encode publicationInfo */

   if (pvalue->m.publicationInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "publicationInfo");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CRMF_PKIPublicationInfo (pctxt, &pvalue->publicationInfo, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode privateKey */

   if (pvalue->m.privateKeyPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "privateKey");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CRMF_EncryptedValue (pctxt, &pvalue->privateKey, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certOrEncCert */

   RTXCTXTPUSHELEMNAME (pctxt, "certOrEncCert");

   ll = asn1E_CMP_CertOrEncCert (pctxt, &pvalue->certOrEncCert, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CertResponse (OSCTXT* pctxt,
   ASN1T_CMP_CertResponse *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertResponse");

   /* encode rspInfo */

   if (pvalue->m.rspInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "rspInfo");

      ll = xe_octstr (pctxt, pvalue->rspInfo.data, pvalue->rspInfo.numocts, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certifiedKeyPair */

   if (pvalue->m.certifiedKeyPairPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "certifiedKeyPair");

      ll = asn1E_CMP_CertifiedKeyPair (pctxt, &pvalue->certifiedKeyPair, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode status */

   RTXCTXTPUSHELEMNAME (pctxt, "status");

   ll = asn1E_CMP_PKIStatusInfo (pctxt, &pvalue->status, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certReqId */

   RTXCTXTPUSHELEMNAME (pctxt, "certReqId");

   ll = xe_integer (pctxt, &pvalue->certReqId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP__SeqOfCMP_CertResponse (OSCTXT* pctxt,
   ASN1T_CMP__SeqOfCMP_CertResponse *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertResponse", xx1);

      ll = asn1E_CMP_CertResponse (pctxt, ((ASN1T_CMP_CertResponse*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_CertRepMessage (OSCTXT* pctxt,
   ASN1T_CMP_CertRepMessage *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertRepMessage");

   /* encode response */

   RTXCTXTPUSHELEMNAME (pctxt, "response");

   ll = asn1E_CMP__SeqOfCMP_CertResponse (pctxt, &pvalue->response, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode caPubs */

   if (pvalue->m.caPubsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "caPubs");

      ll = asn1E_CMP_CertRepMessage_caPubs (pctxt, &pvalue->caPubs, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_Challenge (OSCTXT* pctxt,
   ASN1T_CMP_Challenge *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Challenge");

   /* encode challenge */

   RTXCTXTPUSHELEMNAME (pctxt, "challenge");

   ll = xe_octstr (pctxt, pvalue->challenge.data, pvalue->challenge.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode witness */

   RTXCTXTPUSHELEMNAME (pctxt, "witness");

   ll = xe_octstr (pctxt, pvalue->witness.data, pvalue->witness.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode owf */

   if (pvalue->m.owfPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "owf");

      ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->owf, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_POPODecKeyChallContent (OSCTXT* pctxt,
   ASN1T_CMP_POPODecKeyChallContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "POPODecKeyChallContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Challenge", xx1);

      ll = asn1E_CMP_Challenge (pctxt, ((ASN1T_CMP_Challenge*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_POPODecKeyRespContent (OSCTXT* pctxt,
   ASN1T_CMP_POPODecKeyRespContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "POPODecKeyRespContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "INTEGER", xx1);

      ll = xe_integer (pctxt, ((OSINT32*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_KeyRecRepContent_caCerts (OSCTXT* pctxt,
   ASN1T_CMP_KeyRecRepContent_caCerts *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CMPCertificate", xx1);

      ll = asn1E_CMP_CMPCertificate (pctxt, ((ASN1T_CMP_CMPCertificate*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll1 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll1);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_KeyRecRepContent_keyPairHist (OSCTXT* pctxt,
   ASN1T_CMP_KeyRecRepContent_keyPairHist *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertifiedKeyPair", xx1);

      ll = asn1E_CMP_CertifiedKeyPair (pctxt, ((ASN1T_CMP_CertifiedKeyPair*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll1 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll1);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_KeyRecRepContent (OSCTXT* pctxt,
   ASN1T_CMP_KeyRecRepContent *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyRecRepContent");

   /* encode keyPairHist */

   if (pvalue->m.keyPairHistPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "keyPairHist");

      ll = asn1E_CMP_KeyRecRepContent_keyPairHist (pctxt, &pvalue->keyPairHist, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode caCerts */

   if (pvalue->m.caCertsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "caCerts");

      ll = asn1E_CMP_KeyRecRepContent_caCerts (pctxt, &pvalue->caCerts, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode newSigCert */

   if (pvalue->m.newSigCertPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "newSigCert");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMP_CMPCertificate (pctxt, &pvalue->newSigCert, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode status */

   RTXCTXTPUSHELEMNAME (pctxt, "status");

   ll = asn1E_CMP_PKIStatusInfo (pctxt, &pvalue->status, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_RevDetails (OSCTXT* pctxt,
   ASN1T_CMP_RevDetails *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RevDetails");

   /* encode crlEntryDetails */

   if (pvalue->m.crlEntryDetailsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crlEntryDetails");

      ll = asn1E_EXP_Extensions (pctxt, &pvalue->crlEntryDetails, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certDetails */

   RTXCTXTPUSHELEMNAME (pctxt, "certDetails");

   ll = asn1E_CRMF_CertTemplate (pctxt, &pvalue->certDetails, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_RevReqContent (OSCTXT* pctxt,
   ASN1T_CMP_RevReqContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RevReqContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "RevDetails", xx1);

      ll = asn1E_CMP_RevDetails (pctxt, ((ASN1T_CMP_RevDetails*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_RevRepContent_status (OSCTXT* pctxt,
   ASN1T_CMP_RevRepContent_status *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "PKIStatusInfo", xx1);

      ll = asn1E_CMP_PKIStatusInfo (pctxt, ((ASN1T_CMP_PKIStatusInfo*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_RevRepContent_revCerts (OSCTXT* pctxt,
   ASN1T_CMP_RevRepContent_revCerts *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertId", xx1);

      ll = asn1E_CRMF_CertId (pctxt, ((ASN1T_CRMF_CertId*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll1 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll1);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_RevRepContent_crls (OSCTXT* pctxt,
   ASN1T_CMP_RevRepContent_crls *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertificateList", xx1);

      ll = asn1E_EXP_CertificateList (pctxt, ((ASN1T_EXP_CertificateList*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll1 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll1);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_RevRepContent (OSCTXT* pctxt,
   ASN1T_CMP_RevRepContent *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RevRepContent");

   /* encode crls */

   if (pvalue->m.crlsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crls");

      ll = asn1E_CMP_RevRepContent_crls (pctxt, &pvalue->crls, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode revCerts */

   if (pvalue->m.revCertsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "revCerts");

      ll = asn1E_CMP_RevRepContent_revCerts (pctxt, &pvalue->revCerts, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode status */

   RTXCTXTPUSHELEMNAME (pctxt, "status");

   ll = asn1E_CMP_RevRepContent_status (pctxt, &pvalue->status, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CAKeyUpdAnnContent (OSCTXT* pctxt,
   ASN1T_CMP_CAKeyUpdAnnContent *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CAKeyUpdAnnContent");

   /* encode newWithNew */

   RTXCTXTPUSHELEMNAME (pctxt, "newWithNew");

   ll = asn1E_CMP_CMPCertificate (pctxt, &pvalue->newWithNew, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode newWithOld */

   RTXCTXTPUSHELEMNAME (pctxt, "newWithOld");

   ll = asn1E_CMP_CMPCertificate (pctxt, &pvalue->newWithOld, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode oldWithNew */

   RTXCTXTPUSHELEMNAME (pctxt, "oldWithNew");

   ll = asn1E_CMP_CMPCertificate (pctxt, &pvalue->oldWithNew, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CertAnnContent (OSCTXT* pctxt,
   ASN1T_CMP_CertAnnContent *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertAnnContent");

   ll = asn1E_CMP_CMPCertificate (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_RevAnnContent (OSCTXT* pctxt,
   ASN1T_CMP_RevAnnContent *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RevAnnContent");

   /* encode crlDetails */

   if (pvalue->m.crlDetailsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crlDetails");

      ll = asn1E_EXP_Extensions (pctxt, &pvalue->crlDetails, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode badSinceDate */

   RTXCTXTPUSHELEMNAME (pctxt, "badSinceDate");

   ll = xe_charstr (pctxt, pvalue->badSinceDate, ASN1EXPL, TM_UNIV|TM_PRIM|24);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode willBeRevokedAt */

   RTXCTXTPUSHELEMNAME (pctxt, "willBeRevokedAt");

   ll = xe_charstr (pctxt, pvalue->willBeRevokedAt, ASN1EXPL, TM_UNIV|TM_PRIM|24);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certId */

   RTXCTXTPUSHELEMNAME (pctxt, "certId");

   ll = asn1E_CRMF_CertId (pctxt, &pvalue->certId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode status */

   RTXCTXTPUSHELEMNAME (pctxt, "status");

   ll = asn1E_CMP_PKIStatus (pctxt, &pvalue->status, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CRLAnnContent (OSCTXT* pctxt,
   ASN1T_CMP_CRLAnnContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CRLAnnContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertificateList", xx1);

      ll = asn1E_EXP_CertificateList (pctxt, ((ASN1T_EXP_CertificateList*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIConfirmContent_ (OSCTXT* pctxt,
   void *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   OS_UNUSED_ARG (pvalue) ;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIConfirmContent");

   ll = xe_null (pctxt, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_GenMsgContent (OSCTXT* pctxt,
   ASN1T_CMP_GenMsgContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "GenMsgContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "InfoTypeAndValue", xx1);

      ll = asn1E_CMP_InfoTypeAndValue (pctxt, ((ASN1T_CMP_InfoTypeAndValue*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_GenRepContent (OSCTXT* pctxt,
   ASN1T_CMP_GenRepContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "GenRepContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "InfoTypeAndValue", xx1);

      ll = asn1E_CMP_InfoTypeAndValue (pctxt, ((ASN1T_CMP_InfoTypeAndValue*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_ErrorMsgContent (OSCTXT* pctxt,
   ASN1T_CMP_ErrorMsgContent *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ErrorMsgContent");

   /* encode errorDetails */

   if (pvalue->m.errorDetailsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "errorDetails");

      ll = asn1E_CMP_PKIFreeText (pctxt, &pvalue->errorDetails, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode errorCode */

   if (pvalue->m.errorCodePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "errorCode");

      ll = xe_integer (pctxt, &pvalue->errorCode, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode pKIStatusInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "pKIStatusInfo");

   ll = asn1E_CMP_PKIStatusInfo (pctxt, &pvalue->pKIStatusInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CertStatus (OSCTXT* pctxt,
   ASN1T_CMP_CertStatus *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertStatus");

   /* encode statusInfo */

   if (pvalue->m.statusInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "statusInfo");

      ll = asn1E_CMP_PKIStatusInfo (pctxt, &pvalue->statusInfo, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certReqId */

   RTXCTXTPUSHELEMNAME (pctxt, "certReqId");

   ll = xe_integer (pctxt, &pvalue->certReqId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certHash */

   RTXCTXTPUSHELEMNAME (pctxt, "certHash");

   ll = xe_octstr (pctxt, pvalue->certHash.data, pvalue->certHash.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_CertConfirmContent (OSCTXT* pctxt,
   ASN1T_CMP_CertConfirmContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertConfirmContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertStatus", xx1);

      ll = asn1E_CMP_CertStatus (pctxt, ((ASN1T_CMP_CertStatus*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PollReqContent_element (OSCTXT* pctxt,
   ASN1T_CMP_PollReqContent_element *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   /* encode certReqId */

   RTXCTXTPUSHELEMNAME (pctxt, "certReqId");

   ll = xe_integer (pctxt, &pvalue->certReqId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_PollReqContent (OSCTXT* pctxt,
   ASN1T_CMP_PollReqContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PollReqContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SEQUENCE", xx1);

      ll = asn1E_CMP_PollReqContent_element (pctxt, ((ASN1T_CMP_PollReqContent_element*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PollRepContent_element (OSCTXT* pctxt,
   ASN1T_CMP_PollRepContent_element *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   /* encode reason */

   if (pvalue->m.reasonPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "reason");

      ll = asn1E_CMP_PKIFreeText (pctxt, &pvalue->reason, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode checkAfter */

   RTXCTXTPUSHELEMNAME (pctxt, "checkAfter");

   ll = xe_integer (pctxt, &pvalue->checkAfter, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certReqId */

   RTXCTXTPUSHELEMNAME (pctxt, "certReqId");

   ll = xe_integer (pctxt, &pvalue->certReqId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_PollRepContent (OSCTXT* pctxt,
   ASN1T_CMP_PollRepContent *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PollRepContent");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SEQUENCE", xx1);

      ll = asn1E_CMP_PollRepContent_element (pctxt, ((ASN1T_CMP_PollRepContent_element*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIBody (OSCTXT* pctxt,
   ASN1T_CMP_PKIBody *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;
   OS_UNUSED_ARG (pvalue) ;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIBody");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "ir");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_CRMF_CertReqMessages (pctxt, pvalue->u.ir, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "ip");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_CMP_CertRepMessage (pctxt, pvalue->u.ip, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "cr");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
            asn1E_CRMF_CertReqMessages (pctxt, pvalue->u.cr, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "cp");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
            asn1E_CMP_CertRepMessage (pctxt, pvalue->u.cp, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "p10cr");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|4,
            asn1E_PKCS10_CertificationRequest (pctxt, pvalue->u.p10cr, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 6:
         RTXCTXTPUSHELEMNAME (pctxt, "popdecc");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|5,
            asn1E_CMP_POPODecKeyChallContent (pctxt, pvalue->u.popdecc, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 7:
         RTXCTXTPUSHELEMNAME (pctxt, "popdecr");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|6,
            asn1E_CMP_POPODecKeyRespContent (pctxt, pvalue->u.popdecr, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 8:
         RTXCTXTPUSHELEMNAME (pctxt, "kur");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|7,
            asn1E_CRMF_CertReqMessages (pctxt, pvalue->u.kur, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 9:
         RTXCTXTPUSHELEMNAME (pctxt, "kup");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|8,
            asn1E_CMP_CertRepMessage (pctxt, pvalue->u.kup, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 10:
         RTXCTXTPUSHELEMNAME (pctxt, "krr");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|9,
            asn1E_CRMF_CertReqMessages (pctxt, pvalue->u.krr, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 11:
         RTXCTXTPUSHELEMNAME (pctxt, "krp");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|10,
            asn1E_CMP_KeyRecRepContent (pctxt, pvalue->u.krp, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 12:
         RTXCTXTPUSHELEMNAME (pctxt, "rr");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|11,
            asn1E_CMP_RevReqContent (pctxt, pvalue->u.rr, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 13:
         RTXCTXTPUSHELEMNAME (pctxt, "rp");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|12,
            asn1E_CMP_RevRepContent (pctxt, pvalue->u.rp, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 14:
         RTXCTXTPUSHELEMNAME (pctxt, "ccr");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|13,
            asn1E_CRMF_CertReqMessages (pctxt, pvalue->u.ccr, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 15:
         RTXCTXTPUSHELEMNAME (pctxt, "ccp");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|14,
            asn1E_CMP_CertRepMessage (pctxt, pvalue->u.ccp, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 16:
         RTXCTXTPUSHELEMNAME (pctxt, "ckuann");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|15,
            asn1E_CMP_CAKeyUpdAnnContent (pctxt, pvalue->u.ckuann, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 17:
         RTXCTXTPUSHELEMNAME (pctxt, "cann");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|16,
            asn1E_CMP_CertAnnContent (pctxt, pvalue->u.cann, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 18:
         RTXCTXTPUSHELEMNAME (pctxt, "rann");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|17,
            asn1E_CMP_RevAnnContent (pctxt, pvalue->u.rann, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 19:
         RTXCTXTPUSHELEMNAME (pctxt, "crlann");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|18,
            asn1E_CMP_CRLAnnContent (pctxt, pvalue->u.crlann, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 20:
         RTXCTXTPUSHELEMNAME (pctxt, "pkiconf");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|19,
            asn1E_CMP_PKIConfirmContent (pctxt, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 21:
         RTXCTXTPUSHELEMNAME (pctxt, "nested");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|20,
            asn1E_CMP_NestedMessageContent (pctxt, (ASN1T_CMP_NestedMessageContent*)pvalue->u.nested, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 22:
         RTXCTXTPUSHELEMNAME (pctxt, "genm");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|21,
            asn1E_CMP_GenMsgContent (pctxt, pvalue->u.genm, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 23:
         RTXCTXTPUSHELEMNAME (pctxt, "genp");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|22,
            asn1E_CMP_GenRepContent (pctxt, pvalue->u.genp, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 24:
         RTXCTXTPUSHELEMNAME (pctxt, "error");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|23,
            asn1E_CMP_ErrorMsgContent (pctxt, pvalue->u.error, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 25:
         RTXCTXTPUSHELEMNAME (pctxt, "certConf");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|24,
            asn1E_CMP_CertConfirmContent (pctxt, pvalue->u.certConf, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 26:
         RTXCTXTPUSHELEMNAME (pctxt, "pollReq");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|25,
            asn1E_CMP_PollReqContent (pctxt, pvalue->u.pollReq, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 27:
         RTXCTXTPUSHELEMNAME (pctxt, "pollRep");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|26,
            asn1E_CMP_PollRepContent (pctxt, pvalue->u.pollRep, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 28:
         RTXCTXTPUSHELEMNAME (pctxt, "bcr");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|27,
            asn1E_CRMF_CertReqMessages (pctxt, pvalue->u.bcr, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIMessage_extraCerts (OSCTXT* pctxt,
   ASN1T_CMP_PKIMessage_extraCerts *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CMPCertificate", xx1);

      ll = asn1E_CMP_CMPCertificate (pctxt, ((ASN1T_CMP_CMPCertificate*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll1 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll1);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1, ll0);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIMessage (OSCTXT* pctxt,
   ASN1T_CMP_PKIMessage *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIMessage");

   /* encode extraCerts */

   if (pvalue->m.extraCertsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "extraCerts");

      ll = asn1E_CMP_PKIMessage_extraCerts (pctxt, &pvalue->extraCerts, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode protection */

   if (pvalue->m.protectionPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "protection");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMP_PKIProtection (pctxt, &pvalue->protection, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode body */

   RTXCTXTPUSHELEMNAME (pctxt, "body");

   ll = asn1E_CMP_PKIBody (pctxt, &pvalue->body, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode header */

   RTXCTXTPUSHELEMNAME (pctxt, "header");

   ll = asn1E_CMP_PKIHeader (pctxt, &pvalue->header, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PKIMessages (OSCTXT* pctxt,
   ASN1T_CMP_PKIMessages *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PKIMessages");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "PKIMessage", xx1);

      ll = asn1E_CMP_PKIMessage (pctxt, ((ASN1T_CMP_PKIMessage*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_NestedMessageContent (OSCTXT* pctxt,
   ASN1T_CMP_NestedMessageContent *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "NestedMessageContent");

   ll = asn1E_CMP_PKIMessages (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_OOBCert (OSCTXT* pctxt,
   ASN1T_CMP_OOBCert *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OOBCert");

   ll = asn1E_CMP_CMPCertificate (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_ProtectedPart (OSCTXT* pctxt,
   ASN1T_CMP_ProtectedPart *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ProtectedPart");

   /* encode body */

   RTXCTXTPUSHELEMNAME (pctxt, "body");

   ll = asn1E_CMP_PKIBody (pctxt, &pvalue->body, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode header */

   RTXCTXTPUSHELEMNAME (pctxt, "header");

   ll = asn1E_CMP_PKIHeader (pctxt, &pvalue->header, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_PBMParameter (OSCTXT* pctxt,
   ASN1T_CMP_PBMParameter *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PBMParameter");

   /* encode mac */

   RTXCTXTPUSHELEMNAME (pctxt, "mac");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->mac, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode iterationCount */

   RTXCTXTPUSHELEMNAME (pctxt, "iterationCount");

   ll = xe_integer (pctxt, &pvalue->iterationCount, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode owf */

   RTXCTXTPUSHELEMNAME (pctxt, "owf");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->owf, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode salt */

   RTXCTXTPUSHELEMNAME (pctxt, "salt");

   ll = xe_octstr (pctxt, pvalue->salt.data, pvalue->salt.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_DHBMParameter (OSCTXT* pctxt,
   ASN1T_CMP_DHBMParameter *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DHBMParameter");

   /* encode mac */

   RTXCTXTPUSHELEMNAME (pctxt, "mac");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->mac, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode owf */

   RTXCTXTPUSHELEMNAME (pctxt, "owf");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->owf, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMP_OOBCertHash (OSCTXT* pctxt,
   ASN1T_CMP_OOBCertHash *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OOBCertHash");

   /* encode hashVal */

   RTXCTXTPUSHELEMNAME (pctxt, "hashVal");

   ll = xe_bitstr (pctxt, pvalue->hashVal.data, pvalue->hashVal.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certId */

   if (pvalue->m.certIdPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "certId");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CRMF_CertId (pctxt, &pvalue->certId, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode hashAlg */

   if (pvalue->m.hashAlgPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "hashAlg");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlg, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

