/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "esya.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_ESYA_ESYAGizlilikBilgisi (const char* name, 
   ASN1T_ESYA_ESYAGizlilikBilgisi* pValue, 
   ASN1T_ESYA_ESYAGizlilikBilgisi* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ESYA_ESYAGizlilikBilgisi::Equals (ASN1T_ESYA_ESYAGizlilikBilgisi* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_ESYAGizlilikBilgisi ("ESYAGizlilikBilgisi", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ESYA_ESYASifreliVeri (const char* name, 
   ASN1T_ESYA_ESYASifreliVeri* pValue, ASN1T_ESYA_ESYASifreliVeri* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".sifreliAnahtar", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->sifreliAnahtar.numocts, 
      pValue->sifreliAnahtar.data, pCmpValue->sifreliAnahtar.numocts, 
      pCmpValue->sifreliAnahtar.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".sifreliVeri", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->sifreliVeri.numocts, 
      pValue->sifreliVeri.data, pCmpValue->sifreliVeri.numocts, 
      pCmpValue->sifreliVeri.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ESYA_ESYASifreliVeri::Equals (ASN1T_ESYA_ESYASifreliVeri* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_ESYASifreliVeri ("ESYASifreliVeri", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ESYA_ESYASimetrikAnahtar (const char* name, 
   ASN1T_ESYA_ESYASimetrikAnahtar* pValue, 
   ASN1T_ESYA_ESYASimetrikAnahtar* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".algorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->algorithm, &pCmpValue->algorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".simetrikAnahtar", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->simetrikAnahtar.numocts, 
      pValue->simetrikAnahtar.data, pCmpValue->simetrikAnahtar.numocts, 
      pCmpValue->simetrikAnahtar.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ESYA_ESYASimetrikAnahtar::Equals (ASN1T_ESYA_ESYASimetrikAnahtar* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_ESYASimetrikAnahtar ("ESYASimetrikAnahtar", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ESYA_ESYASimImzAnahtari (const char* name, 
   ASN1T_ESYA_ESYASimImzAnahtari* pValue, 
   ASN1T_ESYA_ESYASimImzAnahtari* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".anahNo", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->anahNo, pCmpValue->anahNo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".hashAlg", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->hashAlg, &pCmpValue->hashAlg, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".simetrikAlg", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->simetrikAlg, &pCmpValue->simetrikAlg, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".anahtarBytes", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->anahtarBytes.numocts, 
      pValue->anahtarBytes.data, pCmpValue->anahtarBytes.numocts, 
      pCmpValue->anahtarBytes.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ESYA_ESYASimImzAnahtari::Equals (ASN1T_ESYA_ESYASimImzAnahtari* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_ESYASimImzAnahtari ("ESYASimImzAnahtari", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ESYA_ESYASimImzAnahtarlari (const char* name, 
   ASN1T_ESYA_ESYASimImzAnahtarlari* pValue, 
   ASN1T_ESYA_ESYASimImzAnahtarlari* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ESYA_ESYASimImzAnahtari* pdata;
   ASN1T_ESYA_ESYASimImzAnahtari* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ESYA_ESYASimImzAnahtari*) pnode->data;
      pCmpdata = (ASN1T_ESYA_ESYASimImzAnahtari*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ESYA_ESYASimImzAnahtari (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ESYA_ESYASimImzAnahtarlari::Equals (ASN1T_ESYA_ESYASimImzAnahtarlari* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_ESYASimImzAnahtarlari ("ESYASimImzAnahtarlari", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ESYA_ESYAVTImza (const char* name, 
   ASN1T_ESYA_ESYAVTImza* pValue, ASN1T_ESYA_ESYAVTImza* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".anahNo", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->anahNo, pCmpValue->anahNo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".imzaliVeri", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->imzaliVeri.numocts, 
      pValue->imzaliVeri.data, pCmpValue->imzaliVeri.numocts, 
      pCmpValue->imzaliVeri.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ESYA_ESYAVTImza::Equals (ASN1T_ESYA_ESYAVTImza* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_ESYAVTImza ("ESYAVTImza", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ESYA_ESYAPasswordRecipientInfo (const char* name, 
   ASN1T_ESYA_ESYAPasswordRecipientInfo* pValue, 
   ASN1T_ESYA_ESYAPasswordRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->version, pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".keyDerivationAlgorithm", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.keyDerivationAlgorithmPresent,
   pCmpValue->m.keyDerivationAlgorithmPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.keyDerivationAlgorithmPresent) 
   {
      if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->keyDerivationAlgorithm, &pCmpValue->keyDerivationAlgorithm, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".keyEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->keyEncryptionAlgorithm, &pCmpValue->keyEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedKey", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->encryptedKey.numocts, 
      pValue->encryptedKey.data, pCmpValue->encryptedKey.numocts, 
      pCmpValue->encryptedKey.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".keyHash", 0, 0, 0);
   if (! asn1Compare_PKCS7_DigestInfo (namebuf, &pValue->keyHash, &pCmpValue->keyHash, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ESYA_ESYAPasswordRecipientInfo::Equals (ASN1T_ESYA_ESYAPasswordRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_ESYAPasswordRecipientInfo ("ESYAPasswordRecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ESYA_EsyaGroupRecipientInfo (const char* name, 
   ASN1T_ESYA_EsyaGroupRecipientInfo* pValue, 
   ASN1T_ESYA_EsyaGroupRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".gid", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->gid, pCmpValue->gid, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".groupIndex", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->groupIndex, pCmpValue->groupIndex, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".groupSize", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->groupSize, pCmpValue->groupSize, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".rid", 0, 0, 0);
   if (! asn1Compare_CMS_RecipientIdentifier (namebuf, &pValue->rid, &pCmpValue->rid, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".keyEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_PKCS7_KeyEncryptionAlgorithmIdentifier (namebuf, &pValue->keyEncryptionAlgorithm, &pCmpValue->keyEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedKey", 0, 0, 0);
   if (! asn1Compare_PKCS7_EncryptedKey (namebuf, &pValue->encryptedKey, &pCmpValue->encryptedKey, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ESYA_EsyaGroupRecipientInfo::Equals (ASN1T_ESYA_EsyaGroupRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_EsyaGroupRecipientInfo ("EsyaGroupRecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ESYA_ESYAFileInfoRecipientInfo (const char* name, 
   ASN1T_ESYA_ESYAFileInfoRecipientInfo* pValue, 
   ASN1T_ESYA_ESYAFileInfoRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".gizlilikBilgisi", 0, 0, 0);
   if (! asn1Compare_ESYA_ESYAGizlilikBilgisi (namebuf, &pValue->gizlilikBilgisi, &pCmpValue->gizlilikBilgisi, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ESYA_ESYAFileInfoRecipientInfo::Equals (ASN1T_ESYA_ESYAFileInfoRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ESYA_ESYAFileInfoRecipientInfo ("ESYAFileInfoRecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

