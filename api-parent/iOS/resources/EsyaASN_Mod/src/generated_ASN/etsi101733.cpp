/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "etsi101733.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID ETSI101733_id_aa_ets_otherSigCert = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 19 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_sigPolicyId = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 15 }
} ;
ASN1OBJID ETSI101733_id_spq_ets_uri = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 5, 1 }
} ;
ASN1OBJID ETSI101733_id_spq_ets_unotice = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 5, 2 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_contentTimestamp = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 20 }
} ;
ASN1OBJID ETSI101733_id_aa_signatureTimeStampToken = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 14 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_certificateRefs = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 21 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_revocationRefs = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 22 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_certValues = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 23 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_revocationValues = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 24 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_escTimeStamp = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 25 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_certCRLTimestamp = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 26 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_archiveTimestamp = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 27 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_attrCertificateRefs = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 28 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_attrRevocationRefs = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 29 }
} ;
ASN1OBJID ETSI101733_id_aa_contentIdentifier = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 7 }
} ;
ASN1OBJID ETSI101733_id_aa_contentReference = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 10 }
} ;
ASN1OBJID ETSI101733_id_aa_contentHint = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 4 }
} ;
ASN1OBJID ETSI101733_id_cti_ets_proofOfOrigin = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 6, 1 }
} ;
ASN1OBJID ETSI101733_id_cti_ets_proofOfReceipt = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 6, 2 }
} ;
ASN1OBJID ETSI101733_id_cti_ets_proofOfDelivery = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 6, 3 }
} ;
ASN1OBJID ETSI101733_id_cti_ets_proofOfSender = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 6, 4 }
} ;
ASN1OBJID ETSI101733_id_cti_ets_proofOfApproval = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 6, 5 }
} ;
ASN1OBJID ETSI101733_id_cti_ets_proofOfCreation = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 6, 6 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_commitmentType = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 16 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_signerLocation = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 17 }
} ;
ASN1OBJID ETSI101733_id_aa_ets_signerAttr = {
   9,
   { 1, 2, 840, 113549, 1, 9, 16, 2, 18 }
} ;

ASN1T_ETSI101733_OtherHashValue* 
   new_ASN1T_ETSI101733_OtherHashValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OtherHashValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherHashValue;
}

ASN1C_ETSI101733_OtherHashValue::ASN1C_ETSI101733_OtherHashValue
    (ASN1T_ETSI101733_OtherHashValue& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherHashValue::ASN1C_ETSI101733_OtherHashValue (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OtherHashValue& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherHashValue::ASN1C_ETSI101733_OtherHashValue (
   OSRTContext &context, ASN1T_ETSI101733_OtherHashValue& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_OtherHashValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherHashValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherHashValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ETSI101733_OtherHashValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherHashValue (
   ASN1T_ETSI101733_OtherHashValue* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherHashValue;
}

void asn1Free_ETSI101733_OtherHashValue (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherHashValue* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_ETSI101733_OtherHashValue::MemFree ()
{
   asn1Free_ETSI101733_OtherHashValue (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_SignaturePolicyImplied::
   ASN1C_ETSI101733_SignaturePolicyImplied () : ASN1CType()
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SignaturePolicyImplied::
   ASN1C_ETSI101733_SignaturePolicyImplied (OSRTMessageBufferIF& msgBuf) : 
   ASN1CType (msgBuf)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SignaturePolicyImplied::
   ASN1C_ETSI101733_SignaturePolicyImplied (OSRTContext &context) : 
   ASN1CType (context)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_SignaturePolicyImplied::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SignaturePolicyImplied (msgBuf.getCtxtPtr(), ASN1EXPL);
}

int ASN1C_ETSI101733_SignaturePolicyImplied::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ETSI101733_SignaturePolicyImplied (msgBuf.getCtxtPtr(), ASN1EXPL, 0);
}

ASN1T_ETSI101733_SigPolicyId* 
   new_ASN1T_ETSI101733_SigPolicyId (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SigPolicyId));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SigPolicyId;
}

ASN1C_ETSI101733_SigPolicyId::ASN1C_ETSI101733_SigPolicyId
    (ASN1T_ETSI101733_SigPolicyId& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SigPolicyId::ASN1C_ETSI101733_SigPolicyId (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_SigPolicyId& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SigPolicyId::ASN1C_ETSI101733_SigPolicyId (
   OSRTContext &context, ASN1T_ETSI101733_SigPolicyId& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_SigPolicyId::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SigPolicyId (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SigPolicyId::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ETSI101733_SigPolicyId (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SigPolicyId (ASN1T_ETSI101733_SigPolicyId* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SigPolicyId;
}

ASN1T_ETSI101733_OtherHashAlgAndValue* 
   new_ASN1T_ETSI101733_OtherHashAlgAndValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OtherHashAlgAndValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherHashAlgAndValue;
}

ASN1C_ETSI101733_OtherHashAlgAndValue::ASN1C_ETSI101733_OtherHashAlgAndValue
    (ASN1T_ETSI101733_OtherHashAlgAndValue& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherHashAlgAndValue::ASN1C_ETSI101733_OtherHashAlgAndValue (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OtherHashAlgAndValue& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherHashAlgAndValue::ASN1C_ETSI101733_OtherHashAlgAndValue (
   OSRTContext &context, ASN1T_ETSI101733_OtherHashAlgAndValue& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OtherHashAlgAndValue::ASN1T_ETSI101733_OtherHashAlgAndValue ()
{
}

ASN1T_ETSI101733_OtherHashAlgAndValue::~ASN1T_ETSI101733_OtherHashAlgAndValue ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OtherHashAlgAndValue (pctxt, this);
   }
}

int ASN1C_ETSI101733_OtherHashAlgAndValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherHashAlgAndValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherHashAlgAndValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OtherHashAlgAndValue;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OtherHashAlgAndValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherHashAlgAndValue (
   ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherHashAlgAndValue;
}

void asn1Free_ETSI101733_OtherHashAlgAndValue (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm);
   asn1Free_ETSI101733_OtherHashValue (pctxt, &pvalue->hashValue);
}

void ASN1C_ETSI101733_OtherHashAlgAndValue::MemFree ()
{
   asn1Free_ETSI101733_OtherHashAlgAndValue (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_SigPolicyHash* 
   new_ASN1T_ETSI101733_SigPolicyHash (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SigPolicyHash));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SigPolicyHash;
}

ASN1C_ETSI101733_SigPolicyHash::ASN1C_ETSI101733_SigPolicyHash
    (ASN1T_ETSI101733_SigPolicyHash& data) : 
   ASN1C_ETSI101733_OtherHashAlgAndValue (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SigPolicyHash::ASN1C_ETSI101733_SigPolicyHash (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_SigPolicyHash& data) : 
   ASN1C_ETSI101733_OtherHashAlgAndValue (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SigPolicyHash::ASN1C_ETSI101733_SigPolicyHash (
   OSRTContext &context, ASN1T_ETSI101733_SigPolicyHash& data) : 
   ASN1C_ETSI101733_OtherHashAlgAndValue (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_SigPolicyHash::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SigPolicyHash (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SigPolicyHash::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SigPolicyHash;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SigPolicyHash (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SigPolicyHash (ASN1T_ETSI101733_SigPolicyHash* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SigPolicyHash;
}

void asn1Free_ETSI101733_SigPolicyHash (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SigPolicyHash* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_OtherHashAlgAndValue (pctxt, pvalue);
}

void ASN1C_ETSI101733_SigPolicyHash::MemFree ()
{
   asn1Free_ETSI101733_SigPolicyHash (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_SPuri::ASN1C_ETSI101733_SPuri (ASN1T_ETSI101733_SPuri& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SPuri::ASN1C_ETSI101733_SPuri (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_SPuri& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SPuri::ASN1C_ETSI101733_SPuri (OSRTContext &context
   , ASN1T_ETSI101733_SPuri& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_SPuri::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SPuri (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SPuri::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ETSI101733_SPuri (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_ETSI101733_SPuri (OSCTXT *pctxt, ASN1T_ETSI101733_SPuri pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_ETSI101733_SPuri::MemFree ()
{
   asn1Free_ETSI101733_SPuri (getCtxtPtr(), msgData);
}

ASN1T_ETSI101733_ContentTimestamp* 
   new_ASN1T_ETSI101733_ContentTimestamp (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_ContentTimestamp));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_ContentTimestamp;
}

ASN1C_ETSI101733_ContentTimestamp::ASN1C_ETSI101733_ContentTimestamp
    (ASN1T_ETSI101733_ContentTimestamp& data) : ASN1C_TSP_TimeStampToken (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_ContentTimestamp::ASN1C_ETSI101733_ContentTimestamp (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_ContentTimestamp& data) : 
   ASN1C_TSP_TimeStampToken (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_ContentTimestamp::ASN1C_ETSI101733_ContentTimestamp (
   OSRTContext &context, ASN1T_ETSI101733_ContentTimestamp& data) : 
   ASN1C_TSP_TimeStampToken (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_ContentTimestamp::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_ContentTimestamp (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_ContentTimestamp::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_ContentTimestamp;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_ContentTimestamp (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_ContentTimestamp (
   ASN1T_ETSI101733_ContentTimestamp* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_ContentTimestamp;
}

void asn1Free_ETSI101733_ContentTimestamp (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ContentTimestamp* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_TSP_TimeStampToken (pctxt, pvalue);
}

void ASN1C_ETSI101733_ContentTimestamp::MemFree ()
{
   asn1Free_ETSI101733_ContentTimestamp (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_SignatureTimeStampToken* 
   new_ASN1T_ETSI101733_SignatureTimeStampToken (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SignatureTimeStampToken));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SignatureTimeStampToken;
}

ASN1C_ETSI101733_SignatureTimeStampToken::
   ASN1C_ETSI101733_SignatureTimeStampToken
    (ASN1T_ETSI101733_SignatureTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SignatureTimeStampToken::
   ASN1C_ETSI101733_SignatureTimeStampToken (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_SignatureTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SignatureTimeStampToken::
   ASN1C_ETSI101733_SignatureTimeStampToken (OSRTContext &context
   , ASN1T_ETSI101733_SignatureTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_SignatureTimeStampToken::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SignatureTimeStampToken (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SignatureTimeStampToken::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SignatureTimeStampToken;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SignatureTimeStampToken (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SignatureTimeStampToken (
   ASN1T_ETSI101733_SignatureTimeStampToken* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SignatureTimeStampToken;
}

void asn1Free_ETSI101733_SignatureTimeStampToken (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_TSP_TimeStampToken (pctxt, pvalue);
}

void ASN1C_ETSI101733_SignatureTimeStampToken::MemFree ()
{
   asn1Free_ETSI101733_SignatureTimeStampToken (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_ESCTimeStampToken* 
   new_ASN1T_ETSI101733_ESCTimeStampToken (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_ESCTimeStampToken));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_ESCTimeStampToken;
}

ASN1C_ETSI101733_ESCTimeStampToken::ASN1C_ETSI101733_ESCTimeStampToken
    (ASN1T_ETSI101733_ESCTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_ESCTimeStampToken::ASN1C_ETSI101733_ESCTimeStampToken (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_ESCTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_ESCTimeStampToken::ASN1C_ETSI101733_ESCTimeStampToken (
   OSRTContext &context, ASN1T_ETSI101733_ESCTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_ESCTimeStampToken::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_ESCTimeStampToken (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_ESCTimeStampToken::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_ESCTimeStampToken;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_ESCTimeStampToken (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_ESCTimeStampToken (
   ASN1T_ETSI101733_ESCTimeStampToken* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_ESCTimeStampToken;
}

void asn1Free_ETSI101733_ESCTimeStampToken (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ESCTimeStampToken* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_TSP_TimeStampToken (pctxt, pvalue);
}

void ASN1C_ETSI101733_ESCTimeStampToken::MemFree ()
{
   asn1Free_ETSI101733_ESCTimeStampToken (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_TimestampedCertsCRLs* 
   new_ASN1T_ETSI101733_TimestampedCertsCRLs (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_TimestampedCertsCRLs));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_TimestampedCertsCRLs;
}

ASN1C_ETSI101733_TimestampedCertsCRLs::ASN1C_ETSI101733_TimestampedCertsCRLs
    (ASN1T_ETSI101733_TimestampedCertsCRLs& data) : 
   ASN1C_TSP_TimeStampToken (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_TimestampedCertsCRLs::ASN1C_ETSI101733_TimestampedCertsCRLs (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_TimestampedCertsCRLs& data) : 
   ASN1C_TSP_TimeStampToken (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_TimestampedCertsCRLs::ASN1C_ETSI101733_TimestampedCertsCRLs (
   OSRTContext &context, ASN1T_ETSI101733_TimestampedCertsCRLs& data) : 
   ASN1C_TSP_TimeStampToken (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_TimestampedCertsCRLs::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_TimestampedCertsCRLs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_TimestampedCertsCRLs::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_TimestampedCertsCRLs;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_TimestampedCertsCRLs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_TimestampedCertsCRLs (
   ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_TimestampedCertsCRLs;
}

void asn1Free_ETSI101733_TimestampedCertsCRLs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_TSP_TimeStampToken (pctxt, pvalue);
}

void ASN1C_ETSI101733_TimestampedCertsCRLs::MemFree ()
{
   asn1Free_ETSI101733_TimestampedCertsCRLs (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_ArchiveTimeStampToken* 
   new_ASN1T_ETSI101733_ArchiveTimeStampToken (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_ArchiveTimeStampToken));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_ArchiveTimeStampToken;
}

ASN1C_ETSI101733_ArchiveTimeStampToken::ASN1C_ETSI101733_ArchiveTimeStampToken
    (ASN1T_ETSI101733_ArchiveTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_ArchiveTimeStampToken::
   ASN1C_ETSI101733_ArchiveTimeStampToken (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_ArchiveTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_ArchiveTimeStampToken::
   ASN1C_ETSI101733_ArchiveTimeStampToken (OSRTContext &context
   , ASN1T_ETSI101733_ArchiveTimeStampToken& data) : 
   ASN1C_TSP_TimeStampToken (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_ArchiveTimeStampToken::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_ArchiveTimeStampToken (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_ArchiveTimeStampToken::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_ArchiveTimeStampToken;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_ArchiveTimeStampToken (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_ArchiveTimeStampToken (
   ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_ArchiveTimeStampToken;
}

void asn1Free_ETSI101733_ArchiveTimeStampToken (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_TSP_TimeStampToken (pctxt, pvalue);
}

void ASN1C_ETSI101733_ArchiveTimeStampToken::MemFree ()
{
   asn1Free_ETSI101733_ArchiveTimeStampToken (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_ContentIdentifier* 
   new_ASN1T_ETSI101733_ContentIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_ContentIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_ContentIdentifier;
}

ASN1C_ETSI101733_ContentIdentifier::ASN1C_ETSI101733_ContentIdentifier
    (ASN1T_ETSI101733_ContentIdentifier& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_ContentIdentifier::ASN1C_ETSI101733_ContentIdentifier (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_ContentIdentifier& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_ContentIdentifier::ASN1C_ETSI101733_ContentIdentifier (
   OSRTContext &context, ASN1T_ETSI101733_ContentIdentifier& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_ContentIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_ContentIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_ContentIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ETSI101733_ContentIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_ContentIdentifier (
   ASN1T_ETSI101733_ContentIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_ContentIdentifier;
}

void asn1Free_ETSI101733_ContentIdentifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ContentIdentifier* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_ETSI101733_ContentIdentifier::MemFree ()
{
   asn1Free_ETSI101733_ContentIdentifier (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_CommitmentTypeIdentifier* 
   new_ASN1T_ETSI101733_CommitmentTypeIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_CommitmentTypeIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CommitmentTypeIdentifier;
}

ASN1C_ETSI101733_CommitmentTypeIdentifier::
   ASN1C_ETSI101733_CommitmentTypeIdentifier
    (ASN1T_ETSI101733_CommitmentTypeIdentifier& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CommitmentTypeIdentifier::
   ASN1C_ETSI101733_CommitmentTypeIdentifier (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_CommitmentTypeIdentifier& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CommitmentTypeIdentifier::
   ASN1C_ETSI101733_CommitmentTypeIdentifier (OSRTContext &context
   , ASN1T_ETSI101733_CommitmentTypeIdentifier& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_CommitmentTypeIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CommitmentTypeIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CommitmentTypeIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_ETSI101733_CommitmentTypeIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CommitmentTypeIdentifier (
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CommitmentTypeIdentifier;
}

ASN1T_ETSI101733_CertifiedAttributes* 
   new_ASN1T_ETSI101733_CertifiedAttributes (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_CertifiedAttributes));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CertifiedAttributes;
}

ASN1C_ETSI101733_CertifiedAttributes::ASN1C_ETSI101733_CertifiedAttributes
    (ASN1T_ETSI101733_CertifiedAttributes& data) : 
   ASN1C_ATTRCERT_AttributeCertificate (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CertifiedAttributes::ASN1C_ETSI101733_CertifiedAttributes (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_CertifiedAttributes& data) : 
   ASN1C_ATTRCERT_AttributeCertificate (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CertifiedAttributes::ASN1C_ETSI101733_CertifiedAttributes (
   OSRTContext &context, ASN1T_ETSI101733_CertifiedAttributes& data) : 
   ASN1C_ATTRCERT_AttributeCertificate (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSI101733_CertifiedAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CertifiedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CertifiedAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CertifiedAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CertifiedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CertifiedAttributes (
   ASN1T_ETSI101733_CertifiedAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CertifiedAttributes;
}

void asn1Free_ETSI101733_CertifiedAttributes (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CertifiedAttributes* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ATTRCERT_AttributeCertificate (pctxt, pvalue);
}

void ASN1C_ETSI101733_CertifiedAttributes::MemFree ()
{
   asn1Free_ETSI101733_CertifiedAttributes (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_OtherHash* new_ASN1T_ETSI101733_OtherHash (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OtherHash));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherHash;
}

ASN1C_ETSI101733_OtherHash::ASN1C_ETSI101733_OtherHash
    (ASN1T_ETSI101733_OtherHash& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherHash::ASN1C_ETSI101733_OtherHash (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OtherHash& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherHash::ASN1C_ETSI101733_OtherHash (OSRTContext &context
   , ASN1T_ETSI101733_OtherHash& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OtherHash::~ASN1T_ETSI101733_OtherHash ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OtherHash (pctxt, this);
   }
}

int ASN1C_ETSI101733_OtherHash::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherHash (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherHash::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OtherHash;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OtherHash (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherHash (ASN1T_ETSI101733_OtherHash* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherHash;
}

void asn1Free_ETSI101733_OtherHash (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherHash* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != pvalue->u.sha1Hash) {
            asn1Free_ETSI101733_OtherHashValue (pctxt, pvalue->u.sha1Hash);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.sha1Hash);
         }
         break;

      case 2:
         if (0 != pvalue->u.otherHash) {
            asn1Free_ETSI101733_OtherHashAlgAndValue (pctxt, pvalue->u.otherHash);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.otherHash);
         }
         break;

   }
}

void ASN1C_ETSI101733_OtherHash::MemFree ()
{
   asn1Free_ETSI101733_OtherHash (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_OtherCertID* 
   new_ASN1T_ETSI101733_OtherCertID (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OtherCertID));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherCertID;
}

ASN1C_ETSI101733_OtherCertID::ASN1C_ETSI101733_OtherCertID
    (ASN1T_ETSI101733_OtherCertID& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherCertID::ASN1C_ETSI101733_OtherCertID (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OtherCertID& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherCertID::ASN1C_ETSI101733_OtherCertID (
   OSRTContext &context, ASN1T_ETSI101733_OtherCertID& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OtherCertID::ASN1T_ETSI101733_OtherCertID ()
{
   m.issuerSerialPresent = 0;
}

ASN1T_ETSI101733_OtherCertID::~ASN1T_ETSI101733_OtherCertID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OtherCertID (pctxt, this);
   }
}

int ASN1C_ETSI101733_OtherCertID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherCertID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherCertID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OtherCertID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OtherCertID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherCertID (ASN1T_ETSI101733_OtherCertID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherCertID;
}

void asn1Free_ETSI101733_OtherCertID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherCertID* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_OtherHash (pctxt, &pvalue->otherCertHash);
   if (pvalue->m.issuerSerialPresent) {
      asn1Free_ATTRCERT_IssuerSerial (pctxt, &pvalue->issuerSerial);
   }
}

void ASN1C_ETSI101733_OtherCertID::MemFree ()
{
   asn1Free_ETSI101733_OtherCertID (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID
    (ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID (OSRTContext &context
   , ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::
   ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID (ASN1CType& ccobj
   , ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::Append (ASN1T_ETSI101733_OtherCertID* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_OtherCertID* ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_OtherCertID));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherCertID;
}

ASN1T_ETSI101733_OtherCertID* ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::AppendNewElement ()
{
   ASN1T_ETSI101733_OtherCertID* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID::~ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733__SeqOfETSI101733_OtherCertID (pctxt, this);
   }
}

int ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733__SeqOfETSI101733_OtherCertID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733__SeqOfETSI101733_OtherCertID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733__SeqOfETSI101733_OtherCertID (
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_OtherCertID* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_OtherCertID*)pnode->data;
      asn1Free_ETSI101733_OtherCertID (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::MemFree ()
{
   asn1Free_ETSI101733__SeqOfETSI101733_OtherCertID (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation
    (ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation (OSRTContext &context
   , ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::
   ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation (ASN1CType& ccobj
   , ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::Append (ASN1T_IMP_PolicyInformation* elem)
{
   append ((void*)elem);
}

ASN1T_IMP_PolicyInformation* ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_IMP_PolicyInformation));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_IMP_PolicyInformation;
}

ASN1T_IMP_PolicyInformation* ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::AppendNewElement ()
{
   ASN1T_IMP_PolicyInformation* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation::~ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733__SeqOfETSI101733_PolicyInformation (pctxt, this);
   }
}

int ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733__SeqOfETSI101733_PolicyInformation (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733__SeqOfETSI101733_PolicyInformation (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733__SeqOfETSI101733_PolicyInformation (
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_IMP_PolicyInformation* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_IMP_PolicyInformation*)pnode->data;
      asn1Free_IMP_PolicyInformation (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::MemFree ()
{
   asn1Free_ETSI101733__SeqOfETSI101733_PolicyInformation (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_OtherSigningCertificate* 
   new_ASN1T_ETSI101733_OtherSigningCertificate (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OtherSigningCertificate));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherSigningCertificate;
}

ASN1C_ETSI101733_OtherSigningCertificate::
   ASN1C_ETSI101733_OtherSigningCertificate
    (ASN1T_ETSI101733_OtherSigningCertificate& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherSigningCertificate::
   ASN1C_ETSI101733_OtherSigningCertificate (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_OtherSigningCertificate& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherSigningCertificate::
   ASN1C_ETSI101733_OtherSigningCertificate (OSRTContext &context
   , ASN1T_ETSI101733_OtherSigningCertificate& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OtherSigningCertificate::ASN1T_ETSI101733_OtherSigningCertificate ()
{
   m.policiesPresent = 0;
}

ASN1T_ETSI101733_OtherSigningCertificate::~ASN1T_ETSI101733_OtherSigningCertificate ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OtherSigningCertificate (pctxt, this);
   }
}

int ASN1C_ETSI101733_OtherSigningCertificate::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherSigningCertificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherSigningCertificate::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OtherSigningCertificate;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OtherSigningCertificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherSigningCertificate (
   ASN1T_ETSI101733_OtherSigningCertificate* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherSigningCertificate;
}

void asn1Free_ETSI101733_OtherSigningCertificate (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherSigningCertificate* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733__SeqOfETSI101733_OtherCertID (pctxt, &pvalue->certs);
   if (pvalue->m.policiesPresent) {
      asn1Free_ETSI101733__SeqOfETSI101733_PolicyInformation (pctxt, &pvalue->policies);
   }
}

void ASN1C_ETSI101733_OtherSigningCertificate::MemFree ()
{
   asn1Free_ETSI101733_OtherSigningCertificate (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_SigPolicyQualifierInfo* 
   new_ASN1T_ETSI101733_SigPolicyQualifierInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SigPolicyQualifierInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SigPolicyQualifierInfo;
}

ASN1C_ETSI101733_SigPolicyQualifierInfo::
   ASN1C_ETSI101733_SigPolicyQualifierInfo
    (ASN1T_ETSI101733_SigPolicyQualifierInfo& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SigPolicyQualifierInfo::
   ASN1C_ETSI101733_SigPolicyQualifierInfo (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_SigPolicyQualifierInfo& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SigPolicyQualifierInfo::
   ASN1C_ETSI101733_SigPolicyQualifierInfo (OSRTContext &context
   , ASN1T_ETSI101733_SigPolicyQualifierInfo& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_SigPolicyQualifierInfo::ASN1T_ETSI101733_SigPolicyQualifierInfo ()
{
   m.qualifierPresent = 0;
}

ASN1T_ETSI101733_SigPolicyQualifierInfo::~ASN1T_ETSI101733_SigPolicyQualifierInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_SigPolicyQualifierInfo (pctxt, this);
   }
}

int ASN1C_ETSI101733_SigPolicyQualifierInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SigPolicyQualifierInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SigPolicyQualifierInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SigPolicyQualifierInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SigPolicyQualifierInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SigPolicyQualifierInfo (
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SigPolicyQualifierInfo;
}

void asn1Free_ETSI101733_SigPolicyQualifierInfo (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.qualifierPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->qualifier.data);
   }
}

void ASN1C_ETSI101733_SigPolicyQualifierInfo::MemFree ()
{
   asn1Free_ETSI101733_SigPolicyQualifierInfo (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers
    (ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSRTContext &context
   , ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::
   ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (ASN1CType& ccobj
   , ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::Append (ASN1T_ETSI101733_SigPolicyQualifierInfo* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_SigPolicyQualifierInfo* ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_SigPolicyQualifierInfo));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SigPolicyQualifierInfo;
}

ASN1T_ETSI101733_SigPolicyQualifierInfo* ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::AppendNewElement ()
{
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::~ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (pctxt, this);
   }
}

int ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_SigPolicyQualifierInfo* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_SigPolicyQualifierInfo*)pnode->data;
      asn1Free_ETSI101733_SigPolicyQualifierInfo (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::MemFree ()
{
   asn1Free_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_SignaturePolicyId* 
   new_ASN1T_ETSI101733_SignaturePolicyId (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SignaturePolicyId));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SignaturePolicyId;
}

ASN1C_ETSI101733_SignaturePolicyId::ASN1C_ETSI101733_SignaturePolicyId
    (ASN1T_ETSI101733_SignaturePolicyId& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SignaturePolicyId::ASN1C_ETSI101733_SignaturePolicyId (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_SignaturePolicyId& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SignaturePolicyId::ASN1C_ETSI101733_SignaturePolicyId (
   OSRTContext &context, ASN1T_ETSI101733_SignaturePolicyId& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_SignaturePolicyId::ASN1T_ETSI101733_SignaturePolicyId ()
{
   m.sigPolicyQualifiersPresent = 0;
}

ASN1T_ETSI101733_SignaturePolicyId::~ASN1T_ETSI101733_SignaturePolicyId ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_SignaturePolicyId (pctxt, this);
   }
}

int ASN1C_ETSI101733_SignaturePolicyId::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SignaturePolicyId (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SignaturePolicyId::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SignaturePolicyId;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SignaturePolicyId (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SignaturePolicyId (
   ASN1T_ETSI101733_SignaturePolicyId* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SignaturePolicyId;
}

void asn1Free_ETSI101733_SignaturePolicyId (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_SigPolicyHash (pctxt, &pvalue->sigPolicyHash);
   if (pvalue->m.sigPolicyQualifiersPresent) {
      asn1Free_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (pctxt, &pvalue->sigPolicyQualifiers);
   }
}

void ASN1C_ETSI101733_SignaturePolicyId::MemFree ()
{
   asn1Free_ETSI101733_SignaturePolicyId (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_SignaturePolicy* 
   new_ASN1T_ETSI101733_SignaturePolicy (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SignaturePolicy));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SignaturePolicy;
}

ASN1C_ETSI101733_SignaturePolicy::ASN1C_ETSI101733_SignaturePolicy
    (ASN1T_ETSI101733_SignaturePolicy& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SignaturePolicy::ASN1C_ETSI101733_SignaturePolicy (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_SignaturePolicy& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SignaturePolicy::ASN1C_ETSI101733_SignaturePolicy (
   OSRTContext &context, ASN1T_ETSI101733_SignaturePolicy& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_SignaturePolicy::~ASN1T_ETSI101733_SignaturePolicy ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_SignaturePolicy (pctxt, this);
   }
}

int ASN1C_ETSI101733_SignaturePolicy::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SignaturePolicy (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SignaturePolicy::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SignaturePolicy;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SignaturePolicy (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SignaturePolicy (
   ASN1T_ETSI101733_SignaturePolicy* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SignaturePolicy;
}

void asn1Free_ETSI101733_SignaturePolicy (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignaturePolicy* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         break;

      case 2:
         if (0 != pvalue->u.signaturePolicyId) {
            asn1Free_ETSI101733_SignaturePolicyId (pctxt, pvalue->u.signaturePolicyId);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.signaturePolicyId);
         }
         break;

   }
}

void ASN1C_ETSI101733_SignaturePolicy::MemFree ()
{
   asn1Free_ETSI101733_SignaturePolicy (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_DisplayText* 
   new_ASN1T_ETSI101733_DisplayText (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_DisplayText));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_DisplayText;
}

ASN1C_ETSI101733_DisplayText::ASN1C_ETSI101733_DisplayText
    (ASN1T_ETSI101733_DisplayText& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_DisplayText::ASN1C_ETSI101733_DisplayText (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_DisplayText& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_DisplayText::ASN1C_ETSI101733_DisplayText (
   OSRTContext &context, ASN1T_ETSI101733_DisplayText& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_DisplayText::~ASN1T_ETSI101733_DisplayText ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_DisplayText (pctxt, this);
   }
}

int ASN1C_ETSI101733_DisplayText::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_DisplayText (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_DisplayText::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_DisplayText;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_DisplayText (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_DisplayText (ASN1T_ETSI101733_DisplayText* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_DisplayText;
}

void asn1Free_ETSI101733_DisplayText (OSCTXT *pctxt, 
   ASN1T_ETSI101733_DisplayText* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.visibleString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.visibleString);
         }
         break;

      case 3:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_ETSI101733_DisplayText::MemFree ()
{
   asn1Free_ETSI101733_DisplayText (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_NoticeReference_noticeNumbers::
   ASN1C_ETSI101733_NoticeReference_noticeNumbers
    (ASN1T_ETSI101733_NoticeReference_noticeNumbers& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_NoticeReference_noticeNumbers::
   ASN1C_ETSI101733_NoticeReference_noticeNumbers (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_NoticeReference_noticeNumbers& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_NoticeReference_noticeNumbers::
   ASN1C_ETSI101733_NoticeReference_noticeNumbers (OSRTContext &context
   , ASN1T_ETSI101733_NoticeReference_noticeNumbers& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_NoticeReference_noticeNumbers::
   ASN1C_ETSI101733_NoticeReference_noticeNumbers (ASN1CType& ccobj
   , ASN1T_ETSI101733_NoticeReference_noticeNumbers& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_NoticeReference_noticeNumbers::Append (OSINT32* elem)
{
   append ((void*)elem);
}

OSINT32* ASN1C_ETSI101733_NoticeReference_noticeNumbers::NewElement ()
{
   void* pdata = memAlloc (sizeof(OSINT32));

   if (0 == pdata) return 0;
   else return new (pdata) OSINT32;
}

OSINT32* ASN1C_ETSI101733_NoticeReference_noticeNumbers::AppendNewElement ()
{
   OSINT32* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_NoticeReference_noticeNumbers::~ASN1T_ETSI101733_NoticeReference_noticeNumbers ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_NoticeReference_noticeNumbers (pctxt, this);
   }
}

int ASN1C_ETSI101733_NoticeReference_noticeNumbers::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_NoticeReference_noticeNumbers (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_NoticeReference_noticeNumbers::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_NoticeReference_noticeNumbers;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_NoticeReference_noticeNumbers (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_NoticeReference_noticeNumbers (
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_NoticeReference_noticeNumbers;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_NoticeReference_noticeNumbers (OSCTXT *pctxt, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue)
{
   if (0 == pvalue) return;
   { OSINT32* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (OSINT32*)pnode->data;
      OS_UNUSED_ARG(pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_NoticeReference_noticeNumbers::MemFree ()
{
   asn1Free_ETSI101733_NoticeReference_noticeNumbers (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_NoticeReference* 
   new_ASN1T_ETSI101733_NoticeReference (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_NoticeReference));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_NoticeReference;
}

ASN1C_ETSI101733_NoticeReference::ASN1C_ETSI101733_NoticeReference
    (ASN1T_ETSI101733_NoticeReference& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_NoticeReference::ASN1C_ETSI101733_NoticeReference (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_NoticeReference& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_NoticeReference::ASN1C_ETSI101733_NoticeReference (
   OSRTContext &context, ASN1T_ETSI101733_NoticeReference& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_NoticeReference::ASN1T_ETSI101733_NoticeReference ()
{
}

ASN1T_ETSI101733_NoticeReference::~ASN1T_ETSI101733_NoticeReference ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_NoticeReference (pctxt, this);
   }
}

int ASN1C_ETSI101733_NoticeReference::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_NoticeReference (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_NoticeReference::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_NoticeReference;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_NoticeReference (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_NoticeReference (
   ASN1T_ETSI101733_NoticeReference* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_NoticeReference;
}

void asn1Free_ETSI101733_NoticeReference (OSCTXT *pctxt, 
   ASN1T_ETSI101733_NoticeReference* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_DisplayText (pctxt, &pvalue->organization);
   asn1Free_ETSI101733_NoticeReference_noticeNumbers (pctxt, &pvalue->noticeNumbers);
}

void ASN1C_ETSI101733_NoticeReference::MemFree ()
{
   asn1Free_ETSI101733_NoticeReference (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_SPUserNotice* 
   new_ASN1T_ETSI101733_SPUserNotice (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SPUserNotice));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SPUserNotice;
}

ASN1C_ETSI101733_SPUserNotice::ASN1C_ETSI101733_SPUserNotice
    (ASN1T_ETSI101733_SPUserNotice& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SPUserNotice::ASN1C_ETSI101733_SPUserNotice (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_SPUserNotice& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SPUserNotice::ASN1C_ETSI101733_SPUserNotice (
   OSRTContext &context, ASN1T_ETSI101733_SPUserNotice& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_SPUserNotice::ASN1T_ETSI101733_SPUserNotice ()
{
   m.noticeRefPresent = 0;
   m.explicitTextPresent = 0;
}

ASN1T_ETSI101733_SPUserNotice::~ASN1T_ETSI101733_SPUserNotice ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_SPUserNotice (pctxt, this);
   }
}

int ASN1C_ETSI101733_SPUserNotice::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SPUserNotice (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SPUserNotice::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SPUserNotice;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SPUserNotice (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SPUserNotice (ASN1T_ETSI101733_SPUserNotice* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SPUserNotice;
}

void asn1Free_ETSI101733_SPUserNotice (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SPUserNotice* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.noticeRefPresent) {
      asn1Free_ETSI101733_NoticeReference (pctxt, &pvalue->noticeRef);
   }
   if (pvalue->m.explicitTextPresent) {
      asn1Free_ETSI101733_DisplayText (pctxt, &pvalue->explicitText);
   }
}

void ASN1C_ETSI101733_SPUserNotice::MemFree ()
{
   asn1Free_ETSI101733_SPUserNotice (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_CompleteCertificateRefs::
   ASN1C_ETSI101733_CompleteCertificateRefs
    (ASN1T_ETSI101733_CompleteCertificateRefs& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CompleteCertificateRefs::
   ASN1C_ETSI101733_CompleteCertificateRefs (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_CompleteCertificateRefs& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CompleteCertificateRefs::
   ASN1C_ETSI101733_CompleteCertificateRefs (OSRTContext &context
   , ASN1T_ETSI101733_CompleteCertificateRefs& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_CompleteCertificateRefs::
   ASN1C_ETSI101733_CompleteCertificateRefs (ASN1CType& ccobj
   , ASN1T_ETSI101733_CompleteCertificateRefs& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_CompleteCertificateRefs::Append (ASN1T_ETSI101733_OtherCertID* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_OtherCertID* ASN1C_ETSI101733_CompleteCertificateRefs::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_OtherCertID));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherCertID;
}

ASN1T_ETSI101733_OtherCertID* ASN1C_ETSI101733_CompleteCertificateRefs::AppendNewElement ()
{
   ASN1T_ETSI101733_OtherCertID* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_CompleteCertificateRefs::~ASN1T_ETSI101733_CompleteCertificateRefs ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CompleteCertificateRefs (pctxt, this);
   }
}

int ASN1C_ETSI101733_CompleteCertificateRefs::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CompleteCertificateRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CompleteCertificateRefs::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CompleteCertificateRefs;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CompleteCertificateRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CompleteCertificateRefs (
   ASN1T_ETSI101733_CompleteCertificateRefs* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CompleteCertificateRefs;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_CompleteCertificateRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_OtherCertID* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_OtherCertID*)pnode->data;
      asn1Free_ETSI101733_OtherCertID (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_CompleteCertificateRefs::MemFree ()
{
   asn1Free_ETSI101733_CompleteCertificateRefs (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_CrlIdentifier* 
   new_ASN1T_ETSI101733_CrlIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_CrlIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CrlIdentifier;
}

ASN1C_ETSI101733_CrlIdentifier::ASN1C_ETSI101733_CrlIdentifier
    (ASN1T_ETSI101733_CrlIdentifier& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CrlIdentifier::ASN1C_ETSI101733_CrlIdentifier (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_CrlIdentifier& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CrlIdentifier::ASN1C_ETSI101733_CrlIdentifier (
   OSRTContext &context, ASN1T_ETSI101733_CrlIdentifier& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_CrlIdentifier::ASN1T_ETSI101733_CrlIdentifier ()
{
   crlIssuedTime = 0;
   m.crlNumberPresent = 0;
}

ASN1T_ETSI101733_CrlIdentifier::~ASN1T_ETSI101733_CrlIdentifier ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CrlIdentifier (pctxt, this);
   }
}

int ASN1C_ETSI101733_CrlIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CrlIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CrlIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CrlIdentifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CrlIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CrlIdentifier (ASN1T_ETSI101733_CrlIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CrlIdentifier;
}

void asn1Free_ETSI101733_CrlIdentifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CrlIdentifier* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_Name (pctxt, &pvalue->crlissuer);
   rtxMemFreePtr (pctxt, (void*)pvalue->crlIssuedTime);
}

void ASN1C_ETSI101733_CrlIdentifier::MemFree ()
{
   asn1Free_ETSI101733_CrlIdentifier (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_CrlValidatedID* 
   new_ASN1T_ETSI101733_CrlValidatedID (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_CrlValidatedID));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CrlValidatedID;
}

ASN1C_ETSI101733_CrlValidatedID::ASN1C_ETSI101733_CrlValidatedID
    (ASN1T_ETSI101733_CrlValidatedID& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CrlValidatedID::ASN1C_ETSI101733_CrlValidatedID (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_CrlValidatedID& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CrlValidatedID::ASN1C_ETSI101733_CrlValidatedID (
   OSRTContext &context, ASN1T_ETSI101733_CrlValidatedID& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_CrlValidatedID::ASN1T_ETSI101733_CrlValidatedID ()
{
   m.crlIdentifierPresent = 0;
}

ASN1T_ETSI101733_CrlValidatedID::~ASN1T_ETSI101733_CrlValidatedID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CrlValidatedID (pctxt, this);
   }
}

int ASN1C_ETSI101733_CrlValidatedID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CrlValidatedID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CrlValidatedID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CrlValidatedID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CrlValidatedID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CrlValidatedID (
   ASN1T_ETSI101733_CrlValidatedID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CrlValidatedID;
}

void asn1Free_ETSI101733_CrlValidatedID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CrlValidatedID* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_OtherHash (pctxt, &pvalue->crlHash);
   if (pvalue->m.crlIdentifierPresent) {
      asn1Free_ETSI101733_CrlIdentifier (pctxt, &pvalue->crlIdentifier);
   }
}

void ASN1C_ETSI101733_CrlValidatedID::MemFree ()
{
   asn1Free_ETSI101733_CrlValidatedID (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID
    (ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSRTContext &context
   , ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::
   ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID (ASN1CType& ccobj
   , ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::Append (ASN1T_ETSI101733_CrlValidatedID* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_CrlValidatedID* ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_CrlValidatedID));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CrlValidatedID;
}

ASN1T_ETSI101733_CrlValidatedID* ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::AppendNewElement ()
{
   ASN1T_ETSI101733_CrlValidatedID* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID::~ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733__SeqOfETSI101733_CrlValidatedID (pctxt, this);
   }
}

int ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733__SeqOfETSI101733_CrlValidatedID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733__SeqOfETSI101733_CrlValidatedID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733__SeqOfETSI101733_CrlValidatedID (
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_CrlValidatedID* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_CrlValidatedID*)pnode->data;
      asn1Free_ETSI101733_CrlValidatedID (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::MemFree ()
{
   asn1Free_ETSI101733__SeqOfETSI101733_CrlValidatedID (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_CRLListID* new_ASN1T_ETSI101733_CRLListID (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_CRLListID));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CRLListID;
}

ASN1C_ETSI101733_CRLListID::ASN1C_ETSI101733_CRLListID
    (ASN1T_ETSI101733_CRLListID& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CRLListID::ASN1C_ETSI101733_CRLListID (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_CRLListID& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CRLListID::ASN1C_ETSI101733_CRLListID (OSRTContext &context
   , ASN1T_ETSI101733_CRLListID& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_CRLListID::ASN1T_ETSI101733_CRLListID ()
{
}

ASN1T_ETSI101733_CRLListID::~ASN1T_ETSI101733_CRLListID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CRLListID (pctxt, this);
   }
}

int ASN1C_ETSI101733_CRLListID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CRLListID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CRLListID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CRLListID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CRLListID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CRLListID (ASN1T_ETSI101733_CRLListID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CRLListID;
}

void asn1Free_ETSI101733_CRLListID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CRLListID* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733__SeqOfETSI101733_CrlValidatedID (pctxt, &pvalue->crls);
}

void ASN1C_ETSI101733_CRLListID::MemFree ()
{
   asn1Free_ETSI101733_CRLListID (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_OcspIdentifier* 
   new_ASN1T_ETSI101733_OcspIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OcspIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OcspIdentifier;
}

ASN1C_ETSI101733_OcspIdentifier::ASN1C_ETSI101733_OcspIdentifier
    (ASN1T_ETSI101733_OcspIdentifier& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OcspIdentifier::ASN1C_ETSI101733_OcspIdentifier (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OcspIdentifier& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OcspIdentifier::ASN1C_ETSI101733_OcspIdentifier (
   OSRTContext &context, ASN1T_ETSI101733_OcspIdentifier& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OcspIdentifier::ASN1T_ETSI101733_OcspIdentifier ()
{
   producedAt = 0;
}

ASN1T_ETSI101733_OcspIdentifier::~ASN1T_ETSI101733_OcspIdentifier ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OcspIdentifier (pctxt, this);
   }
}

int ASN1C_ETSI101733_OcspIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OcspIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OcspIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OcspIdentifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OcspIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OcspIdentifier (
   ASN1T_ETSI101733_OcspIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OcspIdentifier;
}

void asn1Free_ETSI101733_OcspIdentifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OcspIdentifier* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_OCSP_ResponderID (pctxt, &pvalue->ocspResponderID);
   rtxMemFreePtr (pctxt, (void*)pvalue->producedAt);
}

void ASN1C_ETSI101733_OcspIdentifier::MemFree ()
{
   asn1Free_ETSI101733_OcspIdentifier (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_OcspResponsesID* 
   new_ASN1T_ETSI101733_OcspResponsesID (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OcspResponsesID));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OcspResponsesID;
}

ASN1C_ETSI101733_OcspResponsesID::ASN1C_ETSI101733_OcspResponsesID
    (ASN1T_ETSI101733_OcspResponsesID& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OcspResponsesID::ASN1C_ETSI101733_OcspResponsesID (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OcspResponsesID& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OcspResponsesID::ASN1C_ETSI101733_OcspResponsesID (
   OSRTContext &context, ASN1T_ETSI101733_OcspResponsesID& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OcspResponsesID::ASN1T_ETSI101733_OcspResponsesID ()
{
   m.ocspRepHashPresent = 0;
}

ASN1T_ETSI101733_OcspResponsesID::~ASN1T_ETSI101733_OcspResponsesID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OcspResponsesID (pctxt, this);
   }
}

int ASN1C_ETSI101733_OcspResponsesID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OcspResponsesID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OcspResponsesID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OcspResponsesID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OcspResponsesID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OcspResponsesID (
   ASN1T_ETSI101733_OcspResponsesID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OcspResponsesID;
}

void asn1Free_ETSI101733_OcspResponsesID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OcspResponsesID* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_OcspIdentifier (pctxt, &pvalue->ocspIdentifier);
   if (pvalue->m.ocspRepHashPresent) {
      asn1Free_ETSI101733_OtherHash (pctxt, &pvalue->ocspRepHash);
   }
}

void ASN1C_ETSI101733_OcspResponsesID::MemFree ()
{
   asn1Free_ETSI101733_OcspResponsesID (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID
    (ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSRTContext &context
   , ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::
   ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID (ASN1CType& ccobj
   , ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::Append (ASN1T_ETSI101733_OcspResponsesID* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_OcspResponsesID* ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_OcspResponsesID));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OcspResponsesID;
}

ASN1T_ETSI101733_OcspResponsesID* ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::AppendNewElement ()
{
   ASN1T_ETSI101733_OcspResponsesID* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID::~ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733__SeqOfETSI101733_OcspResponsesID (pctxt, this);
   }
}

int ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733__SeqOfETSI101733_OcspResponsesID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733__SeqOfETSI101733_OcspResponsesID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733__SeqOfETSI101733_OcspResponsesID (
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_OcspResponsesID* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_OcspResponsesID*)pnode->data;
      asn1Free_ETSI101733_OcspResponsesID (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::MemFree ()
{
   asn1Free_ETSI101733__SeqOfETSI101733_OcspResponsesID (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_OcspListID* new_ASN1T_ETSI101733_OcspListID (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OcspListID));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OcspListID;
}

ASN1C_ETSI101733_OcspListID::ASN1C_ETSI101733_OcspListID
    (ASN1T_ETSI101733_OcspListID& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OcspListID::ASN1C_ETSI101733_OcspListID (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OcspListID& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OcspListID::ASN1C_ETSI101733_OcspListID (OSRTContext &context
   , ASN1T_ETSI101733_OcspListID& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OcspListID::ASN1T_ETSI101733_OcspListID ()
{
}

ASN1T_ETSI101733_OcspListID::~ASN1T_ETSI101733_OcspListID ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OcspListID (pctxt, this);
   }
}

int ASN1C_ETSI101733_OcspListID::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OcspListID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OcspListID::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OcspListID;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OcspListID (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OcspListID (ASN1T_ETSI101733_OcspListID* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OcspListID;
}

void asn1Free_ETSI101733_OcspListID (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OcspListID* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733__SeqOfETSI101733_OcspResponsesID (pctxt, &pvalue->ocspResponses);
}

void ASN1C_ETSI101733_OcspListID::MemFree ()
{
   asn1Free_ETSI101733_OcspListID (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs
    (ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs (OSRTContext &context
   , ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::
   ASN1C_ETSI101733_OtherRevRefs_otherRevRefs (ASN1CType& ccobj
   , ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::Append (ASN1TOpenType* elem)
{
   append ((void*)elem);
}

ASN1TOpenType* ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1TOpenType));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1TOpenType;
}

ASN1TOpenType* ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::AppendNewElement ()
{
   ASN1TOpenType* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_OtherRevRefs_otherRevRefs::~ASN1T_ETSI101733_OtherRevRefs_otherRevRefs ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OtherRevRefs_otherRevRefs (pctxt, this);
   }
}

int ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherRevRefs_otherRevRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OtherRevRefs_otherRevRefs;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OtherRevRefs_otherRevRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherRevRefs_otherRevRefs (
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherRevRefs_otherRevRefs;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue)
{
   if (0 == pvalue) return;
   { ASN1TOpenType* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1TOpenType*)pnode->data;
      rtxMemFreePtr (pctxt, (void*)pdata->data);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::MemFree ()
{
   asn1Free_ETSI101733_OtherRevRefs_otherRevRefs (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_OtherRevRefs* 
   new_ASN1T_ETSI101733_OtherRevRefs (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OtherRevRefs));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherRevRefs;
}

ASN1C_ETSI101733_OtherRevRefs::ASN1C_ETSI101733_OtherRevRefs
    (ASN1T_ETSI101733_OtherRevRefs& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherRevRefs::ASN1C_ETSI101733_OtherRevRefs (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OtherRevRefs& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherRevRefs::ASN1C_ETSI101733_OtherRevRefs (
   OSRTContext &context, ASN1T_ETSI101733_OtherRevRefs& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OtherRevRefs::ASN1T_ETSI101733_OtherRevRefs ()
{
}

ASN1T_ETSI101733_OtherRevRefs::~ASN1T_ETSI101733_OtherRevRefs ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OtherRevRefs (pctxt, this);
   }
}

int ASN1C_ETSI101733_OtherRevRefs::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherRevRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherRevRefs::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OtherRevRefs;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OtherRevRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherRevRefs (ASN1T_ETSI101733_OtherRevRefs* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherRevRefs;
}

void asn1Free_ETSI101733_OtherRevRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherRevRefs* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_OtherRevRefs_otherRevRefs (pctxt, &pvalue->otherRevRefs);
}

void ASN1C_ETSI101733_OtherRevRefs::MemFree ()
{
   asn1Free_ETSI101733_OtherRevRefs (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_CrlOcspRef* new_ASN1T_ETSI101733_CrlOcspRef (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_CrlOcspRef));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CrlOcspRef;
}

ASN1C_ETSI101733_CrlOcspRef::ASN1C_ETSI101733_CrlOcspRef
    (ASN1T_ETSI101733_CrlOcspRef& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CrlOcspRef::ASN1C_ETSI101733_CrlOcspRef (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_CrlOcspRef& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CrlOcspRef::ASN1C_ETSI101733_CrlOcspRef (OSRTContext &context
   , ASN1T_ETSI101733_CrlOcspRef& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_CrlOcspRef::ASN1T_ETSI101733_CrlOcspRef ()
{
   m.crlidsPresent = 0;
   m.ocspidsPresent = 0;
   m.otherRevPresent = 0;
}

ASN1T_ETSI101733_CrlOcspRef::~ASN1T_ETSI101733_CrlOcspRef ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CrlOcspRef (pctxt, this);
   }
}

int ASN1C_ETSI101733_CrlOcspRef::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CrlOcspRef (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CrlOcspRef::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CrlOcspRef;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CrlOcspRef (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CrlOcspRef (ASN1T_ETSI101733_CrlOcspRef* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CrlOcspRef;
}

void asn1Free_ETSI101733_CrlOcspRef (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CrlOcspRef* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.crlidsPresent) {
      asn1Free_ETSI101733_CRLListID (pctxt, &pvalue->crlids);
   }
   if (pvalue->m.ocspidsPresent) {
      asn1Free_ETSI101733_OcspListID (pctxt, &pvalue->ocspids);
   }
   if (pvalue->m.otherRevPresent) {
      asn1Free_ETSI101733_OtherRevRefs (pctxt, &pvalue->otherRev);
   }
}

void ASN1C_ETSI101733_CrlOcspRef::MemFree ()
{
   asn1Free_ETSI101733_CrlOcspRef (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_CompleteRevocationRefs::
   ASN1C_ETSI101733_CompleteRevocationRefs
    (ASN1T_ETSI101733_CompleteRevocationRefs& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CompleteRevocationRefs::
   ASN1C_ETSI101733_CompleteRevocationRefs (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_CompleteRevocationRefs& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CompleteRevocationRefs::
   ASN1C_ETSI101733_CompleteRevocationRefs (OSRTContext &context
   , ASN1T_ETSI101733_CompleteRevocationRefs& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_CompleteRevocationRefs::
   ASN1C_ETSI101733_CompleteRevocationRefs (ASN1CType& ccobj
   , ASN1T_ETSI101733_CompleteRevocationRefs& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_CompleteRevocationRefs::Append (ASN1T_ETSI101733_CrlOcspRef* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_CrlOcspRef* ASN1C_ETSI101733_CompleteRevocationRefs::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_CrlOcspRef));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CrlOcspRef;
}

ASN1T_ETSI101733_CrlOcspRef* ASN1C_ETSI101733_CompleteRevocationRefs::AppendNewElement ()
{
   ASN1T_ETSI101733_CrlOcspRef* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_CompleteRevocationRefs::~ASN1T_ETSI101733_CompleteRevocationRefs ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CompleteRevocationRefs (pctxt, this);
   }
}

int ASN1C_ETSI101733_CompleteRevocationRefs::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CompleteRevocationRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CompleteRevocationRefs::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CompleteRevocationRefs;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CompleteRevocationRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CompleteRevocationRefs (
   ASN1T_ETSI101733_CompleteRevocationRefs* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CompleteRevocationRefs;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_CompleteRevocationRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_CrlOcspRef* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_CrlOcspRef*)pnode->data;
      asn1Free_ETSI101733_CrlOcspRef (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_CompleteRevocationRefs::MemFree ()
{
   asn1Free_ETSI101733_CompleteRevocationRefs (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_CertificateValues::ASN1C_ETSI101733_CertificateValues
    (ASN1T_ETSI101733_CertificateValues& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CertificateValues::ASN1C_ETSI101733_CertificateValues (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_CertificateValues& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CertificateValues::ASN1C_ETSI101733_CertificateValues (
   OSRTContext &context, ASN1T_ETSI101733_CertificateValues& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_CertificateValues::
   ASN1C_ETSI101733_CertificateValues (ASN1CType& ccobj
   , ASN1T_ETSI101733_CertificateValues& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_CertificateValues::Append (ASN1T_EXP_Certificate* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_Certificate* ASN1C_ETSI101733_CertificateValues::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_Certificate));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Certificate;
}

ASN1T_EXP_Certificate* ASN1C_ETSI101733_CertificateValues::AppendNewElement ()
{
   ASN1T_EXP_Certificate* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_CertificateValues::~ASN1T_ETSI101733_CertificateValues ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CertificateValues (pctxt, this);
   }
}

int ASN1C_ETSI101733_CertificateValues::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CertificateValues (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CertificateValues::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CertificateValues;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CertificateValues (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CertificateValues (
   ASN1T_ETSI101733_CertificateValues* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CertificateValues;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_CertificateValues (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CertificateValues* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_Certificate* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_Certificate*)pnode->data;
      asn1Free_EXP_Certificate (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_CertificateValues::MemFree ()
{
   asn1Free_ETSI101733_CertificateValues (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList
    (ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList (OSRTContext &context
   , ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::
   ASN1C_ETSI101733__SeqOfETSI101733_CertificateList (ASN1CType& ccobj
   , ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::Append (ASN1T_EXP_CertificateList* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_CertificateList* ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_CertificateList));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_CertificateList;
}

ASN1T_EXP_CertificateList* ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::AppendNewElement ()
{
   ASN1T_EXP_CertificateList* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733__SeqOfETSI101733_CertificateList::~ASN1T_ETSI101733__SeqOfETSI101733_CertificateList ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733__SeqOfETSI101733_CertificateList (pctxt, this);
   }
}

int ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733__SeqOfETSI101733_CertificateList (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733__SeqOfETSI101733_CertificateList;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733__SeqOfETSI101733_CertificateList (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733__SeqOfETSI101733_CertificateList (
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733__SeqOfETSI101733_CertificateList;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_CertificateList* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_CertificateList*)pnode->data;
      asn1Free_EXP_CertificateList (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::MemFree ()
{
   asn1Free_ETSI101733__SeqOfETSI101733_CertificateList (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse
    (ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSRTContext &context
   , ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::
   ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (ASN1CType& ccobj
   , ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::Append (ASN1T_OCSP_BasicOCSPResponse* elem)
{
   append ((void*)elem);
}

ASN1T_OCSP_BasicOCSPResponse* ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_OCSP_BasicOCSPResponse));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_OCSP_BasicOCSPResponse;
}

ASN1T_OCSP_BasicOCSPResponse* ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::AppendNewElement ()
{
   ASN1T_OCSP_BasicOCSPResponse* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::~ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (pctxt, this);
   }
}

int ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT *pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_OCSP_BasicOCSPResponse* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_OCSP_BasicOCSPResponse*)pnode->data;
      asn1Free_OCSP_BasicOCSPResponse (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::MemFree ()
{
   asn1Free_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_OtherRevVals_otherRevVals::
   ASN1C_ETSI101733_OtherRevVals_otherRevVals
    (ASN1T_ETSI101733_OtherRevVals_otherRevVals& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherRevVals_otherRevVals::
   ASN1C_ETSI101733_OtherRevVals_otherRevVals (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_OtherRevVals_otherRevVals& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherRevVals_otherRevVals::
   ASN1C_ETSI101733_OtherRevVals_otherRevVals (OSRTContext &context
   , ASN1T_ETSI101733_OtherRevVals_otherRevVals& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_OtherRevVals_otherRevVals::
   ASN1C_ETSI101733_OtherRevVals_otherRevVals (ASN1CType& ccobj
   , ASN1T_ETSI101733_OtherRevVals_otherRevVals& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_OtherRevVals_otherRevVals::Append (ASN1TOpenType* elem)
{
   append ((void*)elem);
}

ASN1TOpenType* ASN1C_ETSI101733_OtherRevVals_otherRevVals::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1TOpenType));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1TOpenType;
}

ASN1TOpenType* ASN1C_ETSI101733_OtherRevVals_otherRevVals::AppendNewElement ()
{
   ASN1TOpenType* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_OtherRevVals_otherRevVals::~ASN1T_ETSI101733_OtherRevVals_otherRevVals ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OtherRevVals_otherRevVals (pctxt, this);
   }
}

int ASN1C_ETSI101733_OtherRevVals_otherRevVals::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherRevVals_otherRevVals (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherRevVals_otherRevVals::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OtherRevVals_otherRevVals;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OtherRevVals_otherRevVals (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherRevVals_otherRevVals (
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherRevVals_otherRevVals;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_OtherRevVals_otherRevVals (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue)
{
   if (0 == pvalue) return;
   { ASN1TOpenType* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1TOpenType*)pnode->data;
      rtxMemFreePtr (pctxt, (void*)pdata->data);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_OtherRevVals_otherRevVals::MemFree ()
{
   asn1Free_ETSI101733_OtherRevVals_otherRevVals (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_OtherRevVals* 
   new_ASN1T_ETSI101733_OtherRevVals (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_OtherRevVals));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherRevVals;
}

ASN1C_ETSI101733_OtherRevVals::ASN1C_ETSI101733_OtherRevVals
    (ASN1T_ETSI101733_OtherRevVals& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_OtherRevVals::ASN1C_ETSI101733_OtherRevVals (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_OtherRevVals& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_OtherRevVals::ASN1C_ETSI101733_OtherRevVals (
   OSRTContext &context, ASN1T_ETSI101733_OtherRevVals& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_OtherRevVals::ASN1T_ETSI101733_OtherRevVals ()
{
}

ASN1T_ETSI101733_OtherRevVals::~ASN1T_ETSI101733_OtherRevVals ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_OtherRevVals (pctxt, this);
   }
}

int ASN1C_ETSI101733_OtherRevVals::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_OtherRevVals (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_OtherRevVals::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_OtherRevVals;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_OtherRevVals (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_OtherRevVals (ASN1T_ETSI101733_OtherRevVals* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_OtherRevVals;
}

void asn1Free_ETSI101733_OtherRevVals (OSCTXT *pctxt, 
   ASN1T_ETSI101733_OtherRevVals* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_OtherRevVals_otherRevVals (pctxt, &pvalue->otherRevVals);
}

void ASN1C_ETSI101733_OtherRevVals::MemFree ()
{
   asn1Free_ETSI101733_OtherRevVals (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_RevocationValues* 
   new_ASN1T_ETSI101733_RevocationValues (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_RevocationValues));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_RevocationValues;
}

ASN1C_ETSI101733_RevocationValues::ASN1C_ETSI101733_RevocationValues
    (ASN1T_ETSI101733_RevocationValues& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_RevocationValues::ASN1C_ETSI101733_RevocationValues (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_RevocationValues& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_RevocationValues::ASN1C_ETSI101733_RevocationValues (
   OSRTContext &context, ASN1T_ETSI101733_RevocationValues& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_RevocationValues::ASN1T_ETSI101733_RevocationValues ()
{
   m.crlValsPresent = 0;
   m.ocspValsPresent = 0;
   m.otherRevValsPresent = 0;
}

ASN1T_ETSI101733_RevocationValues::~ASN1T_ETSI101733_RevocationValues ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_RevocationValues (pctxt, this);
   }
}

int ASN1C_ETSI101733_RevocationValues::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_RevocationValues (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_RevocationValues::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_RevocationValues;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_RevocationValues (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_RevocationValues (
   ASN1T_ETSI101733_RevocationValues* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_RevocationValues;
}

void asn1Free_ETSI101733_RevocationValues (OSCTXT *pctxt, 
   ASN1T_ETSI101733_RevocationValues* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.crlValsPresent) {
      asn1Free_ETSI101733__SeqOfETSI101733_CertificateList (pctxt, &pvalue->crlVals);
   }
   if (pvalue->m.ocspValsPresent) {
      asn1Free_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (pctxt, &pvalue->ocspVals);
   }
   if (pvalue->m.otherRevValsPresent) {
      asn1Free_ETSI101733_OtherRevVals (pctxt, &pvalue->otherRevVals);
   }
}

void ASN1C_ETSI101733_RevocationValues::MemFree ()
{
   asn1Free_ETSI101733_RevocationValues (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_AttributeCertificateRefs::
   ASN1C_ETSI101733_AttributeCertificateRefs
    (ASN1T_ETSI101733_AttributeCertificateRefs& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_AttributeCertificateRefs::
   ASN1C_ETSI101733_AttributeCertificateRefs (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_AttributeCertificateRefs& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_AttributeCertificateRefs::
   ASN1C_ETSI101733_AttributeCertificateRefs (OSRTContext &context
   , ASN1T_ETSI101733_AttributeCertificateRefs& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_AttributeCertificateRefs::
   ASN1C_ETSI101733_AttributeCertificateRefs (ASN1CType& ccobj
   , ASN1T_ETSI101733_AttributeCertificateRefs& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_AttributeCertificateRefs::Append (ASN1T_ETSI101733_OtherCertID* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_OtherCertID* ASN1C_ETSI101733_AttributeCertificateRefs::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_OtherCertID));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_OtherCertID;
}

ASN1T_ETSI101733_OtherCertID* ASN1C_ETSI101733_AttributeCertificateRefs::AppendNewElement ()
{
   ASN1T_ETSI101733_OtherCertID* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_AttributeCertificateRefs::~ASN1T_ETSI101733_AttributeCertificateRefs ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_AttributeCertificateRefs (pctxt, this);
   }
}

int ASN1C_ETSI101733_AttributeCertificateRefs::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_AttributeCertificateRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_AttributeCertificateRefs::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_AttributeCertificateRefs;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_AttributeCertificateRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_AttributeCertificateRefs (
   ASN1T_ETSI101733_AttributeCertificateRefs* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_AttributeCertificateRefs;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_AttributeCertificateRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_OtherCertID* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_OtherCertID*)pnode->data;
      asn1Free_ETSI101733_OtherCertID (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_AttributeCertificateRefs::MemFree ()
{
   asn1Free_ETSI101733_AttributeCertificateRefs (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_AttributeRevocationRefs::
   ASN1C_ETSI101733_AttributeRevocationRefs
    (ASN1T_ETSI101733_AttributeRevocationRefs& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_AttributeRevocationRefs::
   ASN1C_ETSI101733_AttributeRevocationRefs (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_AttributeRevocationRefs& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_AttributeRevocationRefs::
   ASN1C_ETSI101733_AttributeRevocationRefs (OSRTContext &context
   , ASN1T_ETSI101733_AttributeRevocationRefs& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_AttributeRevocationRefs::
   ASN1C_ETSI101733_AttributeRevocationRefs (ASN1CType& ccobj
   , ASN1T_ETSI101733_AttributeRevocationRefs& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_AttributeRevocationRefs::Append (ASN1T_ETSI101733_CrlOcspRef* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_CrlOcspRef* ASN1C_ETSI101733_AttributeRevocationRefs::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_CrlOcspRef));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CrlOcspRef;
}

ASN1T_ETSI101733_CrlOcspRef* ASN1C_ETSI101733_AttributeRevocationRefs::AppendNewElement ()
{
   ASN1T_ETSI101733_CrlOcspRef* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_AttributeRevocationRefs::~ASN1T_ETSI101733_AttributeRevocationRefs ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_AttributeRevocationRefs (pctxt, this);
   }
}

int ASN1C_ETSI101733_AttributeRevocationRefs::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_AttributeRevocationRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_AttributeRevocationRefs::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_AttributeRevocationRefs;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_AttributeRevocationRefs (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_AttributeRevocationRefs (
   ASN1T_ETSI101733_AttributeRevocationRefs* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_AttributeRevocationRefs;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_AttributeRevocationRefs (OSCTXT *pctxt, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_CrlOcspRef* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_CrlOcspRef*)pnode->data;
      asn1Free_ETSI101733_CrlOcspRef (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_AttributeRevocationRefs::MemFree ()
{
   asn1Free_ETSI101733_AttributeRevocationRefs (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_ContentReference* 
   new_ASN1T_ETSI101733_ContentReference (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_ContentReference));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_ContentReference;
}

ASN1C_ETSI101733_ContentReference::ASN1C_ETSI101733_ContentReference
    (ASN1T_ETSI101733_ContentReference& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_ContentReference::ASN1C_ETSI101733_ContentReference (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_ContentReference& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_ContentReference::ASN1C_ETSI101733_ContentReference (
   OSRTContext &context, ASN1T_ETSI101733_ContentReference& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_ContentReference::ASN1T_ETSI101733_ContentReference ()
{
}

ASN1T_ETSI101733_ContentReference::~ASN1T_ETSI101733_ContentReference ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_ContentReference (pctxt, this);
   }
}

int ASN1C_ETSI101733_ContentReference::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_ContentReference (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_ContentReference::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_ContentReference;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_ContentReference (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_ContentReference (
   ASN1T_ETSI101733_ContentReference* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_ContentReference;
}

void asn1Free_ETSI101733_ContentReference (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ContentReference* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSI101733_ContentIdentifier (pctxt, &pvalue->signedContentIdentifier);
   if (pvalue->originatorSignatureValue.numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->originatorSignatureValue.data);
      pvalue->originatorSignatureValue.numocts = 0;
      pvalue->originatorSignatureValue.data = 0;
   }
}

void ASN1C_ETSI101733_ContentReference::MemFree ()
{
   asn1Free_ETSI101733_ContentReference (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_ContentHints* 
   new_ASN1T_ETSI101733_ContentHints (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_ContentHints));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_ContentHints;
}

ASN1C_ETSI101733_ContentHints::ASN1C_ETSI101733_ContentHints
    (ASN1T_ETSI101733_ContentHints& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_ContentHints::ASN1C_ETSI101733_ContentHints (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_ContentHints& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_ContentHints::ASN1C_ETSI101733_ContentHints (
   OSRTContext &context, ASN1T_ETSI101733_ContentHints& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_ContentHints::ASN1T_ETSI101733_ContentHints ()
{
   m.contentDescriptionPresent = 0;
   contentDescription = 0;
}

ASN1T_ETSI101733_ContentHints::~ASN1T_ETSI101733_ContentHints ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_ContentHints (pctxt, this);
   }
}

int ASN1C_ETSI101733_ContentHints::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_ContentHints (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_ContentHints::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_ContentHints;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_ContentHints (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_ContentHints (ASN1T_ETSI101733_ContentHints* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_ContentHints;
}

void asn1Free_ETSI101733_ContentHints (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ContentHints* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.contentDescriptionPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->contentDescription);
   }
}

void ASN1C_ETSI101733_ContentHints::MemFree ()
{
   asn1Free_ETSI101733_ContentHints (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_CommitmentTypeQualifier* 
   new_ASN1T_ETSI101733_CommitmentTypeQualifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_CommitmentTypeQualifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CommitmentTypeQualifier;
}

ASN1C_ETSI101733_CommitmentTypeQualifier::
   ASN1C_ETSI101733_CommitmentTypeQualifier
    (ASN1T_ETSI101733_CommitmentTypeQualifier& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CommitmentTypeQualifier::
   ASN1C_ETSI101733_CommitmentTypeQualifier (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_CommitmentTypeQualifier& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CommitmentTypeQualifier::
   ASN1C_ETSI101733_CommitmentTypeQualifier (OSRTContext &context
   , ASN1T_ETSI101733_CommitmentTypeQualifier& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_CommitmentTypeQualifier::ASN1T_ETSI101733_CommitmentTypeQualifier ()
{
}

ASN1T_ETSI101733_CommitmentTypeQualifier::~ASN1T_ETSI101733_CommitmentTypeQualifier ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CommitmentTypeQualifier (pctxt, this);
   }
}

int ASN1C_ETSI101733_CommitmentTypeQualifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CommitmentTypeQualifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CommitmentTypeQualifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CommitmentTypeQualifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CommitmentTypeQualifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CommitmentTypeQualifier (
   ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CommitmentTypeQualifier;
}

void asn1Free_ETSI101733_CommitmentTypeQualifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->qualifier.data);
}

void ASN1C_ETSI101733_CommitmentTypeQualifier::MemFree ()
{
   asn1Free_ETSI101733_CommitmentTypeQualifier (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier
    (ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& data)
    : ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& data)
    : ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
   OSRTContext &context
   , ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& data)
    : ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::
   ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (ASN1CType& ccobj
   , ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& data)
    :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::Append (ASN1T_ETSI101733_CommitmentTypeQualifier* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_CommitmentTypeQualifier* ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_CommitmentTypeQualifier));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CommitmentTypeQualifier;
}

ASN1T_ETSI101733_CommitmentTypeQualifier* ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::AppendNewElement ()
{
   ASN1T_ETSI101733_CommitmentTypeQualifier* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::~ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (pctxt, this);
   }
}

int ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_CommitmentTypeQualifier* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_CommitmentTypeQualifier*)pnode->data;
      asn1Free_ETSI101733_CommitmentTypeQualifier (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::MemFree ()
{
   asn1Free_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_CommitmentTypeIndication* 
   new_ASN1T_ETSI101733_CommitmentTypeIndication (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_CommitmentTypeIndication));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_CommitmentTypeIndication;
}

ASN1C_ETSI101733_CommitmentTypeIndication::
   ASN1C_ETSI101733_CommitmentTypeIndication
    (ASN1T_ETSI101733_CommitmentTypeIndication& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_CommitmentTypeIndication::
   ASN1C_ETSI101733_CommitmentTypeIndication (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_CommitmentTypeIndication& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_CommitmentTypeIndication::
   ASN1C_ETSI101733_CommitmentTypeIndication (OSRTContext &context
   , ASN1T_ETSI101733_CommitmentTypeIndication& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_CommitmentTypeIndication::ASN1T_ETSI101733_CommitmentTypeIndication ()
{
   m.commitmentTypeQualifierPresent = 0;
}

ASN1T_ETSI101733_CommitmentTypeIndication::~ASN1T_ETSI101733_CommitmentTypeIndication ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_CommitmentTypeIndication (pctxt, this);
   }
}

int ASN1C_ETSI101733_CommitmentTypeIndication::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_CommitmentTypeIndication (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_CommitmentTypeIndication::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_CommitmentTypeIndication;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_CommitmentTypeIndication (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_CommitmentTypeIndication (
   ASN1T_ETSI101733_CommitmentTypeIndication* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_CommitmentTypeIndication;
}

void asn1Free_ETSI101733_CommitmentTypeIndication (OSCTXT *pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.commitmentTypeQualifierPresent) {
      asn1Free_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (pctxt, &pvalue->commitmentTypeQualifier);
   }
}

void ASN1C_ETSI101733_CommitmentTypeIndication::MemFree ()
{
   asn1Free_ETSI101733_CommitmentTypeIndication (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_PostalAddress::ASN1C_ETSI101733_PostalAddress
    (ASN1T_ETSI101733_PostalAddress& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_PostalAddress::ASN1C_ETSI101733_PostalAddress (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_PostalAddress& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_PostalAddress::ASN1C_ETSI101733_PostalAddress (
   OSRTContext &context, ASN1T_ETSI101733_PostalAddress& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_PostalAddress::
   ASN1C_ETSI101733_PostalAddress (ASN1CType& ccobj
   , ASN1T_ETSI101733_PostalAddress& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_PostalAddress::Append (ASN1T_EXP_DirectoryString* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_DirectoryString* ASN1C_ETSI101733_PostalAddress::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_DirectoryString));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_DirectoryString;
}

ASN1T_EXP_DirectoryString* ASN1C_ETSI101733_PostalAddress::AppendNewElement ()
{
   ASN1T_EXP_DirectoryString* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_PostalAddress::~ASN1T_ETSI101733_PostalAddress ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_PostalAddress (pctxt, this);
   }
}

int ASN1C_ETSI101733_PostalAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_PostalAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_PostalAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_PostalAddress;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_PostalAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_PostalAddress (ASN1T_ETSI101733_PostalAddress* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_PostalAddress;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_PostalAddress (OSCTXT *pctxt, 
   ASN1T_ETSI101733_PostalAddress* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_DirectoryString* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_DirectoryString*)pnode->data;
      asn1Free_EXP_DirectoryString (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_PostalAddress::MemFree ()
{
   asn1Free_ETSI101733_PostalAddress (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_SignerLocation* 
   new_ASN1T_ETSI101733_SignerLocation (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SignerLocation));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SignerLocation;
}

ASN1C_ETSI101733_SignerLocation::ASN1C_ETSI101733_SignerLocation
    (ASN1T_ETSI101733_SignerLocation& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SignerLocation::ASN1C_ETSI101733_SignerLocation (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_SignerLocation& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SignerLocation::ASN1C_ETSI101733_SignerLocation (
   OSRTContext &context, ASN1T_ETSI101733_SignerLocation& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_SignerLocation::ASN1T_ETSI101733_SignerLocation ()
{
   m.countryNamePresent = 0;
   m.localityNamePresent = 0;
   m.postalAdddressPresent = 0;
}

ASN1T_ETSI101733_SignerLocation::~ASN1T_ETSI101733_SignerLocation ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_SignerLocation (pctxt, this);
   }
}

int ASN1C_ETSI101733_SignerLocation::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SignerLocation (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SignerLocation::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SignerLocation;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SignerLocation (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SignerLocation (
   ASN1T_ETSI101733_SignerLocation* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SignerLocation;
}

void asn1Free_ETSI101733_SignerLocation (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignerLocation* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.countryNamePresent) {
      asn1Free_EXP_DirectoryString (pctxt, &pvalue->countryName);
   }
   if (pvalue->m.localityNamePresent) {
      asn1Free_EXP_DirectoryString (pctxt, &pvalue->localityName);
   }
   if (pvalue->m.postalAdddressPresent) {
      asn1Free_ETSI101733_PostalAddress (pctxt, &pvalue->postalAdddress);
   }
}

void ASN1C_ETSI101733_SignerLocation::MemFree ()
{
   asn1Free_ETSI101733_SignerLocation (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_ClaimedAttributes::ASN1C_ETSI101733_ClaimedAttributes
    (ASN1T_ETSI101733_ClaimedAttributes& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_ClaimedAttributes::ASN1C_ETSI101733_ClaimedAttributes (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_ClaimedAttributes& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_ClaimedAttributes::ASN1C_ETSI101733_ClaimedAttributes (
   OSRTContext &context, ASN1T_ETSI101733_ClaimedAttributes& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_ClaimedAttributes::
   ASN1C_ETSI101733_ClaimedAttributes (ASN1CType& ccobj
   , ASN1T_ETSI101733_ClaimedAttributes& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_ClaimedAttributes::Append (ASN1T_EXP_Attribute* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_Attribute* ASN1C_ETSI101733_ClaimedAttributes::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_Attribute));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Attribute;
}

ASN1T_EXP_Attribute* ASN1C_ETSI101733_ClaimedAttributes::AppendNewElement ()
{
   ASN1T_EXP_Attribute* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_ClaimedAttributes::~ASN1T_ETSI101733_ClaimedAttributes ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_ClaimedAttributes (pctxt, this);
   }
}

int ASN1C_ETSI101733_ClaimedAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_ClaimedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_ClaimedAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_ClaimedAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_ClaimedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_ClaimedAttributes (
   ASN1T_ETSI101733_ClaimedAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_ClaimedAttributes;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_ClaimedAttributes (OSCTXT *pctxt, 
   ASN1T_ETSI101733_ClaimedAttributes* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_Attribute* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_Attribute*)pnode->data;
      asn1Free_EXP_Attribute (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_ClaimedAttributes::MemFree ()
{
   asn1Free_ETSI101733_ClaimedAttributes (getCtxtPtr(), &msgData);
}

ASN1T_ETSI101733_SignerAttribute_element* 
   new_ASN1T_ETSI101733_SignerAttribute_element (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSI101733_SignerAttribute_element));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SignerAttribute_element;
}

ASN1C_ETSI101733_SignerAttribute_element::
   ASN1C_ETSI101733_SignerAttribute_element
    (ASN1T_ETSI101733_SignerAttribute_element& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SignerAttribute_element::
   ASN1C_ETSI101733_SignerAttribute_element (OSRTMessageBufferIF& msgBuf
   , ASN1T_ETSI101733_SignerAttribute_element& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SignerAttribute_element::
   ASN1C_ETSI101733_SignerAttribute_element (OSRTContext &context
   , ASN1T_ETSI101733_SignerAttribute_element& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSI101733_SignerAttribute_element::~ASN1T_ETSI101733_SignerAttribute_element ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_SignerAttribute_element (pctxt, this);
   }
}

int ASN1C_ETSI101733_SignerAttribute_element::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SignerAttribute_element (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SignerAttribute_element::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SignerAttribute_element;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SignerAttribute_element (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SignerAttribute_element (
   ASN1T_ETSI101733_SignerAttribute_element* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SignerAttribute_element;
}

void asn1Free_ETSI101733_SignerAttribute_element (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignerAttribute_element* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != pvalue->u.claimedAttributes) {
            asn1Free_ETSI101733_ClaimedAttributes (pctxt, pvalue->u.claimedAttributes);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.claimedAttributes);
         }
         break;

      case 2:
         if (0 != pvalue->u.certifiedAttributes) {
            asn1Free_ETSI101733_CertifiedAttributes (pctxt, pvalue->u.certifiedAttributes);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.certifiedAttributes);
         }
         break;

   }
}

void ASN1C_ETSI101733_SignerAttribute_element::MemFree ()
{
   asn1Free_ETSI101733_SignerAttribute_element (getCtxtPtr(), &msgData);
}

ASN1C_ETSI101733_SignerAttribute::ASN1C_ETSI101733_SignerAttribute
    (ASN1T_ETSI101733_SignerAttribute& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSI101733_SignerAttribute::ASN1C_ETSI101733_SignerAttribute (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSI101733_SignerAttribute& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSI101733_SignerAttribute::ASN1C_ETSI101733_SignerAttribute (
   OSRTContext &context, ASN1T_ETSI101733_SignerAttribute& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_ETSI101733_SignerAttribute::
   ASN1C_ETSI101733_SignerAttribute (ASN1CType& ccobj
   , ASN1T_ETSI101733_SignerAttribute& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_ETSI101733_SignerAttribute::Append (ASN1T_ETSI101733_SignerAttribute_element* elem)
{
   append ((void*)elem);
}

ASN1T_ETSI101733_SignerAttribute_element* ASN1C_ETSI101733_SignerAttribute::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_ETSI101733_SignerAttribute_element));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSI101733_SignerAttribute_element;
}

ASN1T_ETSI101733_SignerAttribute_element* ASN1C_ETSI101733_SignerAttribute::AppendNewElement ()
{
   ASN1T_ETSI101733_SignerAttribute_element* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_ETSI101733_SignerAttribute::~ASN1T_ETSI101733_SignerAttribute ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSI101733_SignerAttribute (pctxt, this);
   }
}

int ASN1C_ETSI101733_SignerAttribute::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSI101733_SignerAttribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSI101733_SignerAttribute::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSI101733_SignerAttribute;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSI101733_SignerAttribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSI101733_SignerAttribute (
   ASN1T_ETSI101733_SignerAttribute* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSI101733_SignerAttribute;
   rtxDListFastInit (pvalue);
}

void asn1Free_ETSI101733_SignerAttribute (OSCTXT *pctxt, 
   ASN1T_ETSI101733_SignerAttribute* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_ETSI101733_SignerAttribute_element* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_ETSI101733_SignerAttribute_element*)pnode->data;
      asn1Free_ETSI101733_SignerAttribute_element (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_ETSI101733_SignerAttribute::MemFree ()
{
   asn1Free_ETSI101733_SignerAttribute (getCtxtPtr(), &msgData);
}

