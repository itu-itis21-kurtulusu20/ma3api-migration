/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "esya.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_ESYA_ESYAGizlilikBilgisi (OSCTXT* pctxt,
   ASN1T_ESYA_ESYAGizlilikBilgisi *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESYAGizlilikBilgisi");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ESYA_ESYASifreliVeri (OSCTXT* pctxt,
   ASN1T_ESYA_ESYASifreliVeri *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESYASifreliVeri");

   /* encode sifreliVeri */

   RTXCTXTPUSHELEMNAME (pctxt, "sifreliVeri");

   ll = xe_octstr (pctxt, pvalue->sifreliVeri.data, pvalue->sifreliVeri.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode sifreliAnahtar */

   RTXCTXTPUSHELEMNAME (pctxt, "sifreliAnahtar");

   ll = xe_octstr (pctxt, pvalue->sifreliAnahtar.data, pvalue->sifreliAnahtar.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ESYA_ESYASimetrikAnahtar (OSCTXT* pctxt,
   ASN1T_ESYA_ESYASimetrikAnahtar *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESYASimetrikAnahtar");

   /* encode simetrikAnahtar */

   RTXCTXTPUSHELEMNAME (pctxt, "simetrikAnahtar");

   ll = xe_octstr (pctxt, pvalue->simetrikAnahtar.data, pvalue->simetrikAnahtar.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode algorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "algorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->algorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ESYA_ESYASimImzAnahtari (OSCTXT* pctxt,
   ASN1T_ESYA_ESYASimImzAnahtari *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESYASimImzAnahtari");

   /* encode anahtarBytes */

   RTXCTXTPUSHELEMNAME (pctxt, "anahtarBytes");

   ll = xe_octstr (pctxt, pvalue->anahtarBytes.data, pvalue->anahtarBytes.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode simetrikAlg */

   RTXCTXTPUSHELEMNAME (pctxt, "simetrikAlg");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->simetrikAlg, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode hashAlg */

   RTXCTXTPUSHELEMNAME (pctxt, "hashAlg");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlg, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode anahNo */

   RTXCTXTPUSHELEMNAME (pctxt, "anahNo");

   ll = xe_integer (pctxt, &pvalue->anahNo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ESYA_ESYASimImzAnahtarlari (OSCTXT* pctxt,
   ASN1T_ESYA_ESYASimImzAnahtarlari *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESYASimImzAnahtarlari");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "ESYASimImzAnahtari", xx1);

      ll = asn1E_ESYA_ESYASimImzAnahtari (pctxt, ((ASN1T_ESYA_ESYASimImzAnahtari*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ESYA_ESYAVTImza (OSCTXT* pctxt,
   ASN1T_ESYA_ESYAVTImza *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESYAVTImza");

   /* encode imzaliVeri */

   RTXCTXTPUSHELEMNAME (pctxt, "imzaliVeri");

   ll = xe_octstr (pctxt, pvalue->imzaliVeri.data, pvalue->imzaliVeri.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode anahNo */

   RTXCTXTPUSHELEMNAME (pctxt, "anahNo");

   ll = xe_integer (pctxt, &pvalue->anahNo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ESYA_ESYAPasswordRecipientInfo (OSCTXT* pctxt,
   ASN1T_ESYA_ESYAPasswordRecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESYAPasswordRecipientInfo");

   /* encode keyHash */

   RTXCTXTPUSHELEMNAME (pctxt, "keyHash");

   ll = asn1E_PKCS7_DigestInfo (pctxt, &pvalue->keyHash, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode encryptedKey */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedKey");

   ll = xe_octstr (pctxt, pvalue->encryptedKey.data, pvalue->encryptedKey.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "keyEncryptionAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->keyEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyDerivationAlgorithm */

   if (pvalue->m.keyDerivationAlgorithmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "keyDerivationAlgorithm");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->keyDerivationAlgorithm, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = xe_integer (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ESYA_EsyaGroupRecipientInfo (OSCTXT* pctxt,
   ASN1T_ESYA_EsyaGroupRecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EsyaGroupRecipientInfo");

   /* encode encryptedKey */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedKey");

   ll = asn1E_PKCS7_EncryptedKey (pctxt, &pvalue->encryptedKey, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "keyEncryptionAlgorithm");

   ll = asn1E_PKCS7_KeyEncryptionAlgorithmIdentifier (pctxt, &pvalue->keyEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode rid */

   RTXCTXTPUSHELEMNAME (pctxt, "rid");

   ll = asn1E_CMS_RecipientIdentifier (pctxt, &pvalue->rid, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode groupSize */

   RTXCTXTPUSHELEMNAME (pctxt, "groupSize");

   ll = xe_integer (pctxt, &pvalue->groupSize, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode groupIndex */

   RTXCTXTPUSHELEMNAME (pctxt, "groupIndex");

   ll = xe_integer (pctxt, &pvalue->groupIndex, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode gid */

   RTXCTXTPUSHELEMNAME (pctxt, "gid");

   ll = xe_integer (pctxt, &pvalue->gid, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ESYA_ESYAFileInfoRecipientInfo (OSCTXT* pctxt,
   ASN1T_ESYA_ESYAFileInfoRecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESYAFileInfoRecipientInfo");

   /* encode gizlilikBilgisi */

   RTXCTXTPUSHELEMNAME (pctxt, "gizlilikBilgisi");

   ll = asn1E_ESYA_ESYAGizlilikBilgisi (pctxt, &pvalue->gizlilikBilgisi, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

