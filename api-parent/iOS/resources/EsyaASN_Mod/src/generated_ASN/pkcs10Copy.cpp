/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "pkcs10.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_PKCS10_Attributes (OSCTXT* pctxt, 
   ASN1T_PKCS10_Attributes* pSrcValue, ASN1T_PKCS10_Attributes* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Attribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Attribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Attribute);
         pSrcData = (ASN1T_EXP_Attribute*) pnode->data;

         asn1Copy_EXP_Attribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS10_Attributes::ASN1C_PKCS10_Attributes (ASN1C_PKCS10_Attributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS10_Attributes*)pList)
{
}

ASN1C_PKCS10_Attributes& ASN1C_PKCS10_Attributes::operator= (ASN1C_PKCS10_Attributes& srcData)
{
   clear ();
   asn1Copy_PKCS10_Attributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS10_Attributes& ASN1C_PKCS10_Attributes::getCopy (ASN1T_PKCS10_Attributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS10_Attributes);
      new (pDstData) ASN1T_PKCS10_Attributes;
   }

   asn1Copy_PKCS10_Attributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS10_Attributes* ASN1C_PKCS10_Attributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS10_Attributes* pDstData = new ASN1T_PKCS10_Attributes;

   asn1Copy_PKCS10_Attributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS10_CertificationRequestInfo (OSCTXT* pctxt, 
   ASN1T_PKCS10_CertificationRequestInfo* pSrcValue, 
   ASN1T_PKCS10_CertificationRequestInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->version = pSrcValue->version;

   asn1Copy_EXP_Name (pctxt, &pSrcValue->subject, &pDstValue->subject);

   asn1Copy_EXP_SubjectPublicKeyInfo (pctxt, &pSrcValue->subjectPKInfo, &pDstValue->subjectPKInfo);

   asn1Copy_PKCS10_Attributes (pctxt, &pSrcValue->attributes, &pDstValue->attributes);

}

ASN1C_PKCS10_CertificationRequestInfo::ASN1C_PKCS10_CertificationRequestInfo (ASN1C_PKCS10_CertificationRequestInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS10_CertificationRequestInfo::ASN1T_PKCS10_CertificationRequestInfo (ASN1C_PKCS10_CertificationRequestInfo& original)
{
   original.getCopy (this);
}

ASN1T_PKCS10_CertificationRequestInfo& ASN1C_PKCS10_CertificationRequestInfo::getCopy (ASN1T_PKCS10_CertificationRequestInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS10_CertificationRequestInfo);
      new (pDstData) ASN1T_PKCS10_CertificationRequestInfo;
   }

   asn1Copy_PKCS10_CertificationRequestInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS10_CertificationRequestInfo* ASN1C_PKCS10_CertificationRequestInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS10_CertificationRequestInfo* pDstData = new ASN1T_PKCS10_CertificationRequestInfo;

   asn1Copy_PKCS10_CertificationRequestInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS10_CertificationRequest (OSCTXT* pctxt, 
   ASN1T_PKCS10_CertificationRequest* pSrcValue, 
   ASN1T_PKCS10_CertificationRequest* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_PKCS10_CertificationRequestInfo (pctxt, &pSrcValue->certificationRequestInfo, &pDstValue->certificationRequestInfo);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

}

ASN1C_PKCS10_CertificationRequest::ASN1C_PKCS10_CertificationRequest (ASN1C_PKCS10_CertificationRequest& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS10_CertificationRequest::ASN1T_PKCS10_CertificationRequest (ASN1C_PKCS10_CertificationRequest& original)
{
   original.getCopy (this);
}

ASN1T_PKCS10_CertificationRequest& ASN1C_PKCS10_CertificationRequest::getCopy (ASN1T_PKCS10_CertificationRequest* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS10_CertificationRequest);
      new (pDstData) ASN1T_PKCS10_CertificationRequest;
   }

   asn1Copy_PKCS10_CertificationRequest (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS10_CertificationRequest* ASN1C_PKCS10_CertificationRequest::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS10_CertificationRequest* pDstData = new ASN1T_PKCS10_CertificationRequest;

   asn1Copy_PKCS10_CertificationRequest (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

