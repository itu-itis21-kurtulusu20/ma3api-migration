/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef PKCS7_H
#define PKCS7_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "Explicit.h"
#include "pkcs10.h"
#include "Implicit.h"

/**
 * Header file for ASN.1 module pkcs7
 */
/**************************************************************/
/*                                                            */
/*  ContentType                                               */
/*                                                            */
/**************************************************************/
/*
ContentType ::= OBJECT IDENTIFIER
*/
#define TV_PKCS7_ContentType	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_PKCS7_ContentType;

class EXTERN ASN1C_PKCS7_ContentType :
public ASN1CType
{
protected:
   ASN1T_PKCS7_ContentType& msgData;
public:
   ASN1C_PKCS7_ContentType (ASN1T_PKCS7_ContentType& data);
   ASN1C_PKCS7_ContentType (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_ContentType& data);
   ASN1C_PKCS7_ContentType (OSRTContext &context, ASN1T_PKCS7_ContentType& data
      );
   ASN1C_PKCS7_ContentType (ASN1C_PKCS7_ContentType& original);
   virtual ~ASN1C_PKCS7_ContentType () {}
   inline ASN1T_PKCS7_ContentType& getData () { return msgData; }
   inline const ASN1T_PKCS7_ContentType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentType");
   int toStream (const char* name = "ContentType");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_ContentType* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_ContentType& getCopy (ASN1T_PKCS7_ContentType* pDstData = 0);
   ASN1T_PKCS7_ContentType* newCopy ();

   inline ASN1C_PKCS7_ContentType& operator= (ASN1C_PKCS7_ContentType& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_ContentType (OSCTXT* pctxt,
   ASN1T_PKCS7_ContentType *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_ContentType (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentType* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_ContentType 
   (const char* name, const ASN1T_PKCS7_ContentType* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_ContentType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ContentType* pvalue);

EXTERN ASN1T_PKCS7_ContentType* new_ASN1T_PKCS7_ContentType (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_PKCS7_ContentType (const char* name, 
   ASN1T_PKCS7_ContentType* pValue, ASN1T_PKCS7_ContentType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_ContentType (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentType* pSrcValue, ASN1T_PKCS7_ContentType* pDstValue);

EXTERN void asn1Init_PKCS7_ContentType (ASN1T_PKCS7_ContentType* pvalue);

/**************************************************************/
/*                                                            */
/*  Data                                                      */
/*                                                            */
/**************************************************************/
/*
Data ::= OCTET STRING
*/
#define TV_PKCS7_Data	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_PKCS7_Data;

class EXTERN ASN1C_PKCS7_Data :
public ASN1CType
{
protected:
   ASN1T_PKCS7_Data& msgData;
public:
   ASN1C_PKCS7_Data (ASN1T_PKCS7_Data& data);
   ASN1C_PKCS7_Data (OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_Data& data);
   ASN1C_PKCS7_Data (OSRTContext &context, ASN1T_PKCS7_Data& data);
   ASN1C_PKCS7_Data (ASN1C_PKCS7_Data& original);
   virtual ~ASN1C_PKCS7_Data () {}
   inline ASN1T_PKCS7_Data& getData () { return msgData; }
   inline const ASN1T_PKCS7_Data& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Data");
   int toStream (const char* name = "Data");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_Data* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_Data& getCopy (ASN1T_PKCS7_Data* pDstData = 0);
   ASN1T_PKCS7_Data* newCopy ();

   inline ASN1C_PKCS7_Data& operator= (ASN1C_PKCS7_Data& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_Data (OSCTXT* pctxt,
   ASN1T_PKCS7_Data *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_Data (OSCTXT* pctxt, ASN1T_PKCS7_Data* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_Data (const char* name, const ASN1T_PKCS7_Data* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_Data (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_Data* pvalue);

EXTERN ASN1T_PKCS7_Data* new_ASN1T_PKCS7_Data (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_Data (const char* name, ASN1T_PKCS7_Data* pValue, 
   ASN1T_PKCS7_Data* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_Data (OSCTXT* pctxt, ASN1T_PKCS7_Data* pSrcValue, 
   ASN1T_PKCS7_Data* pDstValue);

EXTERN void asn1Init_PKCS7_Data (ASN1T_PKCS7_Data* pvalue);

EXTERN void asn1Free_PKCS7_Data (OSCTXT *pctxt, ASN1T_PKCS7_Data* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentEncryptionAlgorithmIdentifier                      */
/*                                                            */
/**************************************************************/
/*
ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_PKCS7_ContentEncryptionAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier
       (ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier (OSRTContext &context
      , ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier (ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier& original);
   virtual ~ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier () {}
   inline ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentEncryptionAlgorithmIdentifier");
   int toStream (const char* name = "ContentEncryptionAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& getCopy (ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier& operator= (ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_ContentEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* 
   new_ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_ContentEncryptionAlgorithmIdentifier (
   const char* name, ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_PKCS7_ContentEncryptionAlgorithmIdentifier (
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestAlgorithmIdentifier                                 */
/*                                                            */
/**************************************************************/
/*
DigestAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_PKCS7_DigestAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_DigestAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_PKCS7_DigestAlgorithmIdentifier;

class EXTERN ASN1C_PKCS7_DigestAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_PKCS7_DigestAlgorithmIdentifier
       (ASN1T_PKCS7_DigestAlgorithmIdentifier& data);
   ASN1C_PKCS7_DigestAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_DigestAlgorithmIdentifier& data);
   ASN1C_PKCS7_DigestAlgorithmIdentifier (OSRTContext &context
      , ASN1T_PKCS7_DigestAlgorithmIdentifier& data);
   ASN1C_PKCS7_DigestAlgorithmIdentifier (ASN1C_PKCS7_DigestAlgorithmIdentifier& original);
   virtual ~ASN1C_PKCS7_DigestAlgorithmIdentifier () {}
   inline ASN1T_PKCS7_DigestAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_PKCS7_DigestAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DigestAlgorithmIdentifier");
   int toStream (const char* name = "DigestAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_DigestAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_DigestAlgorithmIdentifier& getCopy (ASN1T_PKCS7_DigestAlgorithmIdentifier* pDstData = 0);
   ASN1T_PKCS7_DigestAlgorithmIdentifier* newCopy ();

   inline ASN1C_PKCS7_DigestAlgorithmIdentifier& operator= (ASN1C_PKCS7_DigestAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_DigestAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_PKCS7_DigestAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_DigestAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS7_DigestAlgorithmIdentifier 
   (const char* name, const ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue);

EXTERN ASN1T_PKCS7_DigestAlgorithmIdentifier* 
   new_ASN1T_PKCS7_DigestAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_DigestAlgorithmIdentifier (const char* name, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pValue, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_DigestAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pSrcValue, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_PKCS7_DigestAlgorithmIdentifier (
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_PKCS7_DigestAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestEncryptionAlgorithmIdentifier                       */
/*                                                            */
/**************************************************************/
/*
DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_PKCS7_DigestEncryptionAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier
       (ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier (OSRTContext &context
      , ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier (ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier& original);
   virtual ~ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier () {}
   inline ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DigestEncryptionAlgorithmIdentifier");
   int toStream (const char* name = "DigestEncryptionAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& getCopy (ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier& operator= (ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_DigestEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue);

EXTERN ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* 
   new_ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_DigestEncryptionAlgorithmIdentifier (
   const char* name, ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_PKCS7_DigestEncryptionAlgorithmIdentifier (
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyEncryptionAlgorithmIdentifier                          */
/*                                                            */
/**************************************************************/
/*
KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_PKCS7_KeyEncryptionAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier
       (ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier (OSRTContext &context
      , ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier (ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier& original);
   virtual ~ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier () {}
   inline ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyEncryptionAlgorithmIdentifier");
   int toStream (const char* name = "KeyEncryptionAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& getCopy (ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier& operator= (ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS7_KeyEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* 
   new_ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_KeyEncryptionAlgorithmIdentifier (const char* name, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_PKCS7_KeyEncryptionAlgorithmIdentifier (
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  Version                                                   */
/*                                                            */
/**************************************************************/
/*
Version ::= INTEGER
*/
#define TV_PKCS7_Version	(TM_UNIV|TM_PRIM|2)

typedef OSINT32 ASN1T_PKCS7_Version;

class EXTERN ASN1C_PKCS7_Version :
public ASN1CType
{
protected:
   ASN1T_PKCS7_Version& msgData;
public:
   ASN1C_PKCS7_Version (ASN1T_PKCS7_Version& data);
   ASN1C_PKCS7_Version (OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_Version& data);
   ASN1C_PKCS7_Version (OSRTContext &context, ASN1T_PKCS7_Version& data);
   virtual ~ASN1C_PKCS7_Version () {}
   inline ASN1T_PKCS7_Version& getData () { return msgData; }
   inline const ASN1T_PKCS7_Version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Version");
   int toStream (const char* name = "Version");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_Version* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_PKCS7_Version (OSCTXT* pctxt,
   ASN1T_PKCS7_Version *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_Version (OSCTXT* pctxt, ASN1T_PKCS7_Version* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_Version 
   (const char* name, const ASN1T_PKCS7_Version* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_Version (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_Version* pvalue);

EXTERN ASN1T_PKCS7_Version* new_ASN1T_PKCS7_Version (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_Version (const char* name, 
   ASN1T_PKCS7_Version* pValue, ASN1T_PKCS7_Version* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  EncryptedDigest                                           */
/*                                                            */
/**************************************************************/
/*
EncryptedDigest ::= OCTET STRING
*/
#define TV_PKCS7_EncryptedDigest	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_PKCS7_EncryptedDigest;

class EXTERN ASN1C_PKCS7_EncryptedDigest :
public ASN1CType
{
protected:
   ASN1T_PKCS7_EncryptedDigest& msgData;
public:
   ASN1C_PKCS7_EncryptedDigest (ASN1T_PKCS7_EncryptedDigest& data);
   ASN1C_PKCS7_EncryptedDigest (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_EncryptedDigest& data);
   ASN1C_PKCS7_EncryptedDigest (OSRTContext &context
      , ASN1T_PKCS7_EncryptedDigest& data);
   ASN1C_PKCS7_EncryptedDigest (ASN1C_PKCS7_EncryptedDigest& original);
   virtual ~ASN1C_PKCS7_EncryptedDigest () {}
   inline ASN1T_PKCS7_EncryptedDigest& getData () { return msgData; }
   inline const ASN1T_PKCS7_EncryptedDigest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedDigest");
   int toStream (const char* name = "EncryptedDigest");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_EncryptedDigest* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_EncryptedDigest& getCopy (ASN1T_PKCS7_EncryptedDigest* pDstData = 0);
   ASN1T_PKCS7_EncryptedDigest* newCopy ();

   inline ASN1C_PKCS7_EncryptedDigest& operator= (ASN1C_PKCS7_EncryptedDigest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_EncryptedDigest (OSCTXT* pctxt,
   ASN1T_PKCS7_EncryptedDigest *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_EncryptedDigest (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedDigest* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_EncryptedDigest 
   (const char* name, const ASN1T_PKCS7_EncryptedDigest* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_EncryptedDigest (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EncryptedDigest* pvalue);

EXTERN ASN1T_PKCS7_EncryptedDigest* 
   new_ASN1T_PKCS7_EncryptedDigest (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_EncryptedDigest (const char* name, 
   ASN1T_PKCS7_EncryptedDigest* pValue, 
   ASN1T_PKCS7_EncryptedDigest* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_EncryptedDigest (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedDigest* pSrcValue, ASN1T_PKCS7_EncryptedDigest*
    pDstValue);

EXTERN void asn1Init_PKCS7_EncryptedDigest (ASN1T_PKCS7_EncryptedDigest* pvalue);

EXTERN void asn1Free_PKCS7_EncryptedDigest (OSCTXT *pctxt, 
   ASN1T_PKCS7_EncryptedDigest* pvalue);

/**************************************************************/
/*                                                            */
/*  Digest                                                    */
/*                                                            */
/**************************************************************/
/*
Digest ::= OCTET STRING
*/
#define TV_PKCS7_Digest	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_PKCS7_Digest;

class EXTERN ASN1C_PKCS7_Digest :
public ASN1CType
{
protected:
   ASN1T_PKCS7_Digest& msgData;
public:
   ASN1C_PKCS7_Digest (ASN1T_PKCS7_Digest& data);
   ASN1C_PKCS7_Digest (OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_Digest& data);
   ASN1C_PKCS7_Digest (OSRTContext &context, ASN1T_PKCS7_Digest& data);
   ASN1C_PKCS7_Digest (ASN1C_PKCS7_Digest& original);
   virtual ~ASN1C_PKCS7_Digest () {}
   inline ASN1T_PKCS7_Digest& getData () { return msgData; }
   inline const ASN1T_PKCS7_Digest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Digest");
   int toStream (const char* name = "Digest");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_Digest* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_Digest& getCopy (ASN1T_PKCS7_Digest* pDstData = 0);
   ASN1T_PKCS7_Digest* newCopy ();

   inline ASN1C_PKCS7_Digest& operator= (ASN1C_PKCS7_Digest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_Digest (OSCTXT* pctxt,
   ASN1T_PKCS7_Digest *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_Digest (OSCTXT* pctxt, ASN1T_PKCS7_Digest* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_Digest 
   (const char* name, const ASN1T_PKCS7_Digest* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_Digest (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_Digest* pvalue);

EXTERN ASN1T_PKCS7_Digest* new_ASN1T_PKCS7_Digest (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_Digest (const char* name, ASN1T_PKCS7_Digest* pValue, 
   ASN1T_PKCS7_Digest* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_Digest (OSCTXT* pctxt, ASN1T_PKCS7_Digest* pSrcValue, 
   ASN1T_PKCS7_Digest* pDstValue);

EXTERN void asn1Init_PKCS7_Digest (ASN1T_PKCS7_Digest* pvalue);

EXTERN void asn1Free_PKCS7_Digest (OSCTXT *pctxt, ASN1T_PKCS7_Digest* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedContent                                          */
/*                                                            */
/**************************************************************/
/*
EncryptedContent ::= OCTET STRING
*/
#define TV_PKCS7_EncryptedContent	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_PKCS7_EncryptedContent;

class EXTERN ASN1C_PKCS7_EncryptedContent :
public ASN1CType
{
protected:
   ASN1T_PKCS7_EncryptedContent& msgData;
public:
   ASN1C_PKCS7_EncryptedContent (ASN1T_PKCS7_EncryptedContent& data);
   ASN1C_PKCS7_EncryptedContent (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_EncryptedContent& data);
   ASN1C_PKCS7_EncryptedContent (OSRTContext &context
      , ASN1T_PKCS7_EncryptedContent& data);
   ASN1C_PKCS7_EncryptedContent (ASN1C_PKCS7_EncryptedContent& original);
   virtual ~ASN1C_PKCS7_EncryptedContent () {}
   inline ASN1T_PKCS7_EncryptedContent& getData () { return msgData; }
   inline const ASN1T_PKCS7_EncryptedContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedContent");
   int toStream (const char* name = "EncryptedContent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_EncryptedContent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_EncryptedContent& getCopy (ASN1T_PKCS7_EncryptedContent* pDstData = 0);
   ASN1T_PKCS7_EncryptedContent* newCopy ();

   inline ASN1C_PKCS7_EncryptedContent& operator= (ASN1C_PKCS7_EncryptedContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_EncryptedContent (OSCTXT* pctxt,
   ASN1T_PKCS7_EncryptedContent *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_EncryptedContent (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedContent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_EncryptedContent 
   (const char* name, const ASN1T_PKCS7_EncryptedContent* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_EncryptedContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EncryptedContent* pvalue);

EXTERN ASN1T_PKCS7_EncryptedContent* 
   new_ASN1T_PKCS7_EncryptedContent (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_EncryptedContent (const char* name, 
   ASN1T_PKCS7_EncryptedContent* pValue, 
   ASN1T_PKCS7_EncryptedContent* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_EncryptedContent (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedContent* pSrcValue, ASN1T_PKCS7_EncryptedContent*
    pDstValue);

EXTERN void asn1Init_PKCS7_EncryptedContent (ASN1T_PKCS7_EncryptedContent* pvalue);

EXTERN void asn1Free_PKCS7_EncryptedContent (OSCTXT *pctxt, 
   ASN1T_PKCS7_EncryptedContent* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedKey                                              */
/*                                                            */
/**************************************************************/
/*
EncryptedKey ::= OCTET STRING
*/
#define TV_PKCS7_EncryptedKey	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_PKCS7_EncryptedKey;

class EXTERN ASN1C_PKCS7_EncryptedKey :
public ASN1CType
{
protected:
   ASN1T_PKCS7_EncryptedKey& msgData;
public:
   ASN1C_PKCS7_EncryptedKey (ASN1T_PKCS7_EncryptedKey& data);
   ASN1C_PKCS7_EncryptedKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_EncryptedKey& data);
   ASN1C_PKCS7_EncryptedKey (OSRTContext &context
      , ASN1T_PKCS7_EncryptedKey& data);
   ASN1C_PKCS7_EncryptedKey (ASN1C_PKCS7_EncryptedKey& original);
   virtual ~ASN1C_PKCS7_EncryptedKey () {}
   inline ASN1T_PKCS7_EncryptedKey& getData () { return msgData; }
   inline const ASN1T_PKCS7_EncryptedKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedKey");
   int toStream (const char* name = "EncryptedKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_EncryptedKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_EncryptedKey& getCopy (ASN1T_PKCS7_EncryptedKey* pDstData = 0);
   ASN1T_PKCS7_EncryptedKey* newCopy ();

   inline ASN1C_PKCS7_EncryptedKey& operator= (ASN1C_PKCS7_EncryptedKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_EncryptedKey (OSCTXT* pctxt,
   ASN1T_PKCS7_EncryptedKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_EncryptedKey (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_EncryptedKey 
   (const char* name, const ASN1T_PKCS7_EncryptedKey* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_EncryptedKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EncryptedKey* pvalue);

EXTERN ASN1T_PKCS7_EncryptedKey* 
   new_ASN1T_PKCS7_EncryptedKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_EncryptedKey (const char* name, 
   ASN1T_PKCS7_EncryptedKey* pValue, ASN1T_PKCS7_EncryptedKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_EncryptedKey (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedKey* pSrcValue, ASN1T_PKCS7_EncryptedKey* pDstValue);

EXTERN void asn1Init_PKCS7_EncryptedKey (ASN1T_PKCS7_EncryptedKey* pvalue);

EXTERN void asn1Free_PKCS7_EncryptedKey (OSCTXT *pctxt, 
   ASN1T_PKCS7_EncryptedKey* pvalue);

/**************************************************************/
/*                                                            */
/*  Hash                                                      */
/*                                                            */
/**************************************************************/
/*
Hash ::= OCTET STRING
*/
#define TV_PKCS7_Hash	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_PKCS7_Hash;

class EXTERN ASN1C_PKCS7_Hash :
public ASN1CType
{
protected:
   ASN1T_PKCS7_Hash& msgData;
public:
   ASN1C_PKCS7_Hash (ASN1T_PKCS7_Hash& data);
   ASN1C_PKCS7_Hash (OSRTMessageBufferIF& msgBuf, ASN1T_PKCS7_Hash& data);
   ASN1C_PKCS7_Hash (OSRTContext &context, ASN1T_PKCS7_Hash& data);
   ASN1C_PKCS7_Hash (ASN1C_PKCS7_Hash& original);
   virtual ~ASN1C_PKCS7_Hash () {}
   inline ASN1T_PKCS7_Hash& getData () { return msgData; }
   inline const ASN1T_PKCS7_Hash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Hash");
   int toStream (const char* name = "Hash");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_Hash* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_Hash& getCopy (ASN1T_PKCS7_Hash* pDstData = 0);
   ASN1T_PKCS7_Hash* newCopy ();

   inline ASN1C_PKCS7_Hash& operator= (ASN1C_PKCS7_Hash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_Hash (OSCTXT* pctxt,
   ASN1T_PKCS7_Hash *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_Hash (OSCTXT* pctxt, ASN1T_PKCS7_Hash* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_Hash (const char* name, const ASN1T_PKCS7_Hash* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_Hash (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_Hash* pvalue);

EXTERN ASN1T_PKCS7_Hash* new_ASN1T_PKCS7_Hash (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_Hash (const char* name, ASN1T_PKCS7_Hash* pValue, 
   ASN1T_PKCS7_Hash* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_Hash (OSCTXT* pctxt, ASN1T_PKCS7_Hash* pSrcValue, 
   ASN1T_PKCS7_Hash* pDstValue);

EXTERN void asn1Init_PKCS7_Hash (ASN1T_PKCS7_Hash* pvalue);

EXTERN void asn1Free_PKCS7_Hash (OSCTXT *pctxt, ASN1T_PKCS7_Hash* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentInfo                                               */
/*                                                            */
/**************************************************************/
/*
ContentInfo ::= SEQUENCE {
   contentType ContentType,
   content [0] EXPLICIT ANY OPTIONAL
}
*/
#define TV_PKCS7_ContentInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_ContentInfo;

struct EXTERN ASN1T_PKCS7_ContentInfo : public ASN1TPDU {
   struct {
      unsigned contentPresent : 1;
   } m;
   ASN1T_PKCS7_ContentType contentType;
   ASN1TOpenType content;
   ASN1T_PKCS7_ContentInfo ();
   ASN1T_PKCS7_ContentInfo (ASN1C_PKCS7_ContentInfo& srcData);
   ~ASN1T_PKCS7_ContentInfo ();
} ;

class EXTERN ASN1C_PKCS7_ContentInfo :
public ASN1CType
{
protected:
   ASN1T_PKCS7_ContentInfo& msgData;
public:
   ASN1C_PKCS7_ContentInfo (ASN1T_PKCS7_ContentInfo& data);
   ASN1C_PKCS7_ContentInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_ContentInfo& data);
   ASN1C_PKCS7_ContentInfo (OSRTContext &context, ASN1T_PKCS7_ContentInfo& data
      );
   ASN1C_PKCS7_ContentInfo (ASN1C_PKCS7_ContentInfo& original);
   virtual ~ASN1C_PKCS7_ContentInfo () {}
   inline ASN1T_PKCS7_ContentInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7_ContentInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentInfo");
   int toStream (const char* name = "ContentInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_ContentInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_ContentInfo& getCopy (ASN1T_PKCS7_ContentInfo* pDstData = 0);
   ASN1T_PKCS7_ContentInfo* newCopy ();

   inline ASN1C_PKCS7_ContentInfo& operator= (ASN1C_PKCS7_ContentInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_ContentInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_ContentInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_ContentInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_ContentInfo 
   (const char* name, const ASN1T_PKCS7_ContentInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_ContentInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ContentInfo* pvalue);

EXTERN ASN1T_PKCS7_ContentInfo* new_ASN1T_PKCS7_ContentInfo (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_PKCS7_ContentInfo (const char* name, 
   ASN1T_PKCS7_ContentInfo* pValue, ASN1T_PKCS7_ContentInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_ContentInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentInfo* pSrcValue, ASN1T_PKCS7_ContentInfo* pDstValue);

EXTERN void asn1Init_PKCS7_ContentInfo (ASN1T_PKCS7_ContentInfo* pvalue);

EXTERN void asn1Free_PKCS7_ContentInfo (OSCTXT *pctxt, 
   ASN1T_PKCS7_ContentInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateRevocationLists                                */
/*                                                            */
/**************************************************************/
/*
 useful definitions

CertificateRevocationLists ::= SET OF CertificateList
*/
#define TV_PKCS7_CertificateRevocationLists	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_PKCS7_CertificateRevocationLists;

/* List of ASN1T_EXP_CertificateList */
typedef struct EXTERN ASN1T_PKCS7_CertificateRevocationLists : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7_CertificateRevocationLists();
} ASN1T_PKCS7_CertificateRevocationLists;

class EXTERN ASN1C_PKCS7_CertificateRevocationLists :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7_CertificateRevocationLists& msgData;
public:
   ASN1C_PKCS7_CertificateRevocationLists
       (ASN1T_PKCS7_CertificateRevocationLists& data);
   ASN1C_PKCS7_CertificateRevocationLists (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_CertificateRevocationLists& data);
   ASN1C_PKCS7_CertificateRevocationLists (ASN1CType& ccobj
      , ASN1T_PKCS7_CertificateRevocationLists& data);
   ASN1C_PKCS7_CertificateRevocationLists (OSRTContext &context
      , ASN1T_PKCS7_CertificateRevocationLists& data);
   ASN1C_PKCS7_CertificateRevocationLists (ASN1C_PKCS7_CertificateRevocationLists& original);
   virtual ~ASN1C_PKCS7_CertificateRevocationLists () {}
   inline ASN1T_PKCS7_CertificateRevocationLists& getData () { return msgData; }
   inline const ASN1T_PKCS7_CertificateRevocationLists& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertificateRevocationLists");
   int toStream (const char* name = "CertificateRevocationLists");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_CertificateRevocationLists* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_CertificateRevocationLists& getCopy (ASN1T_PKCS7_CertificateRevocationLists* pDstData = 0);
   ASN1T_PKCS7_CertificateRevocationLists* newCopy ();

   ASN1C_PKCS7_CertificateRevocationLists& operator= (ASN1C_PKCS7_CertificateRevocationLists& srcData);
   void Append (ASN1T_EXP_CertificateList* elem);
   ASN1T_EXP_CertificateList* NewElement ();
   ASN1T_EXP_CertificateList* AppendNewElement ();
} ;

EXTERN int asn1E_PKCS7_CertificateRevocationLists (OSCTXT* pctxt,
   ASN1T_PKCS7_CertificateRevocationLists *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_CertificateRevocationLists (OSCTXT* pctxt, 
   ASN1T_PKCS7_CertificateRevocationLists* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS7_CertificateRevocationLists 
   (const char* name, const ASN1T_PKCS7_CertificateRevocationLists* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_CertificateRevocationLists (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_CertificateRevocationLists* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7_CertificateRevocationLists (const char* name, 
   ASN1T_PKCS7_CertificateRevocationLists* pValue, 
   ASN1T_PKCS7_CertificateRevocationLists* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_CertificateRevocationLists (OSCTXT* pctxt, 
   ASN1T_PKCS7_CertificateRevocationLists* pSrcValue, 
   ASN1T_PKCS7_CertificateRevocationLists* pDstValue);

EXTERN void asn1Init_PKCS7_CertificateRevocationLists (
   ASN1T_PKCS7_CertificateRevocationLists* pvalue);

EXTERN void asn1Free_PKCS7_CertificateRevocationLists (OSCTXT *pctxt, 
   ASN1T_PKCS7_CertificateRevocationLists* pvalue);

/**************************************************************/
/*                                                            */
/*  IssuerAndSerialNumber                                     */
/*                                                            */
/**************************************************************/
/*
IssuerAndSerialNumber ::= SEQUENCE {
   issuer Name,
   serialNumber CertificateSerialNumber
}
*/
#define TV_PKCS7_IssuerAndSerialNumber	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_IssuerAndSerialNumber;

struct EXTERN ASN1T_PKCS7_IssuerAndSerialNumber : public ASN1TPDU {
   ASN1T_EXP_Name issuer;
   ASN1T_EXP_CertificateSerialNumber serialNumber;
   ASN1T_PKCS7_IssuerAndSerialNumber ();
   ASN1T_PKCS7_IssuerAndSerialNumber (ASN1C_PKCS7_IssuerAndSerialNumber& srcData);
   ~ASN1T_PKCS7_IssuerAndSerialNumber ();
} ;

class EXTERN ASN1C_PKCS7_IssuerAndSerialNumber :
public ASN1CType
{
protected:
   ASN1T_PKCS7_IssuerAndSerialNumber& msgData;
public:
   ASN1C_PKCS7_IssuerAndSerialNumber (ASN1T_PKCS7_IssuerAndSerialNumber& data);
   ASN1C_PKCS7_IssuerAndSerialNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_IssuerAndSerialNumber& data);
   ASN1C_PKCS7_IssuerAndSerialNumber (OSRTContext &context
      , ASN1T_PKCS7_IssuerAndSerialNumber& data);
   ASN1C_PKCS7_IssuerAndSerialNumber (ASN1C_PKCS7_IssuerAndSerialNumber& original);
   virtual ~ASN1C_PKCS7_IssuerAndSerialNumber () {}
   inline ASN1T_PKCS7_IssuerAndSerialNumber& getData () { return msgData; }
   inline const ASN1T_PKCS7_IssuerAndSerialNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "IssuerAndSerialNumber");
   int toStream (const char* name = "IssuerAndSerialNumber");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_IssuerAndSerialNumber* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_IssuerAndSerialNumber& getCopy (ASN1T_PKCS7_IssuerAndSerialNumber* pDstData = 0);
   ASN1T_PKCS7_IssuerAndSerialNumber* newCopy ();

   inline ASN1C_PKCS7_IssuerAndSerialNumber& operator= (ASN1C_PKCS7_IssuerAndSerialNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_IssuerAndSerialNumber (OSCTXT* pctxt,
   ASN1T_PKCS7_IssuerAndSerialNumber *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_IssuerAndSerialNumber (OSCTXT* pctxt, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_IssuerAndSerialNumber 
   (const char* name, const ASN1T_PKCS7_IssuerAndSerialNumber* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_IssuerAndSerialNumber* pvalue);

EXTERN ASN1T_PKCS7_IssuerAndSerialNumber* 
   new_ASN1T_PKCS7_IssuerAndSerialNumber (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_IssuerAndSerialNumber (const char* name, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pValue, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_IssuerAndSerialNumber (OSCTXT* pctxt, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pSrcValue, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pDstValue);

EXTERN void asn1Init_PKCS7_IssuerAndSerialNumber (
   ASN1T_PKCS7_IssuerAndSerialNumber* pvalue);

EXTERN void asn1Free_PKCS7_IssuerAndSerialNumber (OSCTXT *pctxt, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificateOrCertificate                          */
/*                                                            */
/**************************************************************/
/*
ExtendedCertificateOrCertificate ::= CHOICE {
   certificate Certificate
}
*/
/* Choice context tags */

#define TVC_PKCS7_ExtendedCertificateOrCertificate_certificate	(TM_UNIV|TM_CONS|16)

/* Choice tag constants */

#define T_PKCS7_ExtendedCertificateOrCertificate_certificate 1

class EXTERN ASN1C_PKCS7_ExtendedCertificateOrCertificate;

struct EXTERN ASN1T_PKCS7_ExtendedCertificateOrCertificate : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_EXP_Certificate *certificate;
   } u;
   ASN1T_PKCS7_ExtendedCertificateOrCertificate () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_PKCS7_ExtendedCertificateOrCertificate (ASN1C_PKCS7_ExtendedCertificateOrCertificate& srcData);
   ~ASN1T_PKCS7_ExtendedCertificateOrCertificate ();
} ;

class EXTERN ASN1C_PKCS7_ExtendedCertificateOrCertificate :
public ASN1CType
{
protected:
   ASN1T_PKCS7_ExtendedCertificateOrCertificate& msgData;
public:
   ASN1C_PKCS7_ExtendedCertificateOrCertificate
       (ASN1T_PKCS7_ExtendedCertificateOrCertificate& data);
   ASN1C_PKCS7_ExtendedCertificateOrCertificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_ExtendedCertificateOrCertificate& data);
   ASN1C_PKCS7_ExtendedCertificateOrCertificate (OSRTContext &context
      , ASN1T_PKCS7_ExtendedCertificateOrCertificate& data);
   ASN1C_PKCS7_ExtendedCertificateOrCertificate (ASN1C_PKCS7_ExtendedCertificateOrCertificate& original);
   virtual ~ASN1C_PKCS7_ExtendedCertificateOrCertificate () {}
   inline ASN1T_PKCS7_ExtendedCertificateOrCertificate& getData () { return msgData; }
   inline const ASN1T_PKCS7_ExtendedCertificateOrCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtendedCertificateOrCertificate");
   int toStream (const char* name = "ExtendedCertificateOrCertificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_ExtendedCertificateOrCertificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_ExtendedCertificateOrCertificate& getCopy (ASN1T_PKCS7_ExtendedCertificateOrCertificate* pDstData = 0);
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* newCopy ();

   inline ASN1C_PKCS7_ExtendedCertificateOrCertificate& operator= (ASN1C_PKCS7_ExtendedCertificateOrCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_ExtendedCertificateOrCertificate (OSCTXT* pctxt,
   ASN1T_PKCS7_ExtendedCertificateOrCertificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_ExtendedCertificateOrCertificate (OSCTXT* pctxt, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS7_ExtendedCertificateOrCertificate 
   (const char* name, const ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_ExtendedCertificateOrCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue);

EXTERN ASN1T_PKCS7_ExtendedCertificateOrCertificate* 
   new_ASN1T_PKCS7_ExtendedCertificateOrCertificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_ExtendedCertificateOrCertificate (const char* name, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pValue, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_ExtendedCertificateOrCertificate (OSCTXT* pctxt, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pSrcValue, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pDstValue);

EXTERN void asn1Init_PKCS7_ExtendedCertificateOrCertificate (
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue);

EXTERN void asn1Free_PKCS7_ExtendedCertificateOrCertificate (OSCTXT *pctxt, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificatesAndCertificates                       */
/*                                                            */
/**************************************************************/
/*
ExtendedCertificatesAndCertificates ::= SET OF ExtendedCertificateOrCertificate
*/
#define TV_PKCS7_ExtendedCertificatesAndCertificates	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_PKCS7_ExtendedCertificatesAndCertificates;

/* List of ASN1T_PKCS7_ExtendedCertificateOrCertificate */
typedef struct EXTERN ASN1T_PKCS7_ExtendedCertificatesAndCertificates : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7_ExtendedCertificatesAndCertificates();
} ASN1T_PKCS7_ExtendedCertificatesAndCertificates;

class EXTERN ASN1C_PKCS7_ExtendedCertificatesAndCertificates :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates& msgData;
public:
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates
       (ASN1T_PKCS7_ExtendedCertificatesAndCertificates& data);
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_ExtendedCertificatesAndCertificates& data);
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates (ASN1CType& ccobj
      , ASN1T_PKCS7_ExtendedCertificatesAndCertificates& data);
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates (OSRTContext &context
      , ASN1T_PKCS7_ExtendedCertificatesAndCertificates& data);
   ASN1C_PKCS7_ExtendedCertificatesAndCertificates (ASN1C_PKCS7_ExtendedCertificatesAndCertificates& original);
   virtual ~ASN1C_PKCS7_ExtendedCertificatesAndCertificates () {}
   inline ASN1T_PKCS7_ExtendedCertificatesAndCertificates& getData () { return msgData; }
   inline const ASN1T_PKCS7_ExtendedCertificatesAndCertificates& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtendedCertificatesAndCertificates");
   int toStream (const char* name = "ExtendedCertificatesAndCertificates");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates& getCopy (ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pDstData = 0);
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* newCopy ();

   ASN1C_PKCS7_ExtendedCertificatesAndCertificates& operator= (ASN1C_PKCS7_ExtendedCertificatesAndCertificates& srcData);
   void Append (ASN1T_PKCS7_ExtendedCertificateOrCertificate* elem);
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* NewElement ();
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* AppendNewElement ();
} ;

EXTERN int asn1E_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT* pctxt,
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT* pctxt, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_ExtendedCertificatesAndCertificates 
   (const char* name, const ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7_ExtendedCertificatesAndCertificates (
   const char* name, ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pValue, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT* pctxt, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pSrcValue, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pDstValue);

EXTERN void asn1Init_PKCS7_ExtendedCertificatesAndCertificates (
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue);

EXTERN void asn1Free_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT *pctxt, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestAlgorithmIdentifiers                                */
/*                                                            */
/**************************************************************/
/*
DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier
*/
#define TV_PKCS7_DigestAlgorithmIdentifiers	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_PKCS7_DigestAlgorithmIdentifiers;

/* List of ASN1T_PKCS7_DigestAlgorithmIdentifier */
typedef struct EXTERN ASN1T_PKCS7_DigestAlgorithmIdentifiers : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7_DigestAlgorithmIdentifiers();
} ASN1T_PKCS7_DigestAlgorithmIdentifiers;

class EXTERN ASN1C_PKCS7_DigestAlgorithmIdentifiers :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7_DigestAlgorithmIdentifiers& msgData;
public:
   ASN1C_PKCS7_DigestAlgorithmIdentifiers
       (ASN1T_PKCS7_DigestAlgorithmIdentifiers& data);
   ASN1C_PKCS7_DigestAlgorithmIdentifiers (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_DigestAlgorithmIdentifiers& data);
   ASN1C_PKCS7_DigestAlgorithmIdentifiers (ASN1CType& ccobj
      , ASN1T_PKCS7_DigestAlgorithmIdentifiers& data);
   ASN1C_PKCS7_DigestAlgorithmIdentifiers (OSRTContext &context
      , ASN1T_PKCS7_DigestAlgorithmIdentifiers& data);
   ASN1C_PKCS7_DigestAlgorithmIdentifiers (ASN1C_PKCS7_DigestAlgorithmIdentifiers& original);
   virtual ~ASN1C_PKCS7_DigestAlgorithmIdentifiers () {}
   inline ASN1T_PKCS7_DigestAlgorithmIdentifiers& getData () { return msgData; }
   inline const ASN1T_PKCS7_DigestAlgorithmIdentifiers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DigestAlgorithmIdentifiers");
   int toStream (const char* name = "DigestAlgorithmIdentifiers");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_DigestAlgorithmIdentifiers* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_DigestAlgorithmIdentifiers& getCopy (ASN1T_PKCS7_DigestAlgorithmIdentifiers* pDstData = 0);
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* newCopy ();

   ASN1C_PKCS7_DigestAlgorithmIdentifiers& operator= (ASN1C_PKCS7_DigestAlgorithmIdentifiers& srcData);
   void Append (ASN1T_PKCS7_DigestAlgorithmIdentifier* elem);
   ASN1T_PKCS7_DigestAlgorithmIdentifier* NewElement ();
   ASN1T_PKCS7_DigestAlgorithmIdentifier* AppendNewElement ();
} ;

EXTERN int asn1E_PKCS7_DigestAlgorithmIdentifiers (OSCTXT* pctxt,
   ASN1T_PKCS7_DigestAlgorithmIdentifiers *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_DigestAlgorithmIdentifiers (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS7_DigestAlgorithmIdentifiers 
   (const char* name, const ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifiers (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7_DigestAlgorithmIdentifiers (const char* name, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pValue, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_DigestAlgorithmIdentifiers (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pSrcValue, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pDstValue);

EXTERN void asn1Init_PKCS7_DigestAlgorithmIdentifiers (
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue);

EXTERN void asn1Free_PKCS7_DigestAlgorithmIdentifiers (OSCTXT *pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerInfo                                                */
/*                                                            */
/**************************************************************/
/*
SignerInfo ::= SEQUENCE {
   version Version,
   issuerAndSerialNumber IssuerAndSerialNumber,
   digestAlgorithm DigestAlgorithmIdentifier,
   authenticatedAttributes [0] Attributes OPTIONAL,
   digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
   encryptedDigest EncryptedDigest,
   unauthenticatedAttributes [1] Attributes OPTIONAL
}
*/
#define TV_PKCS7_SignerInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_SignerInfo;

struct EXTERN ASN1T_PKCS7_SignerInfo : public ASN1TPDU {
   struct {
      unsigned authenticatedAttributesPresent : 1;
      unsigned unauthenticatedAttributesPresent : 1;
   } m;
   ASN1T_PKCS7_Version version;
   ASN1T_PKCS7_IssuerAndSerialNumber issuerAndSerialNumber;
   ASN1T_PKCS7_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_PKCS10_Attributes authenticatedAttributes;
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier digestEncryptionAlgorithm;
   ASN1T_PKCS7_EncryptedDigest encryptedDigest;
   ASN1T_PKCS10_Attributes unauthenticatedAttributes;
   ASN1T_PKCS7_SignerInfo ();
   ASN1T_PKCS7_SignerInfo (ASN1C_PKCS7_SignerInfo& srcData);
   ~ASN1T_PKCS7_SignerInfo ();
} ;

class EXTERN ASN1C_PKCS7_SignerInfo :
public ASN1CType
{
protected:
   ASN1T_PKCS7_SignerInfo& msgData;
public:
   ASN1C_PKCS7_SignerInfo (ASN1T_PKCS7_SignerInfo& data);
   ASN1C_PKCS7_SignerInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_SignerInfo& data);
   ASN1C_PKCS7_SignerInfo (OSRTContext &context, ASN1T_PKCS7_SignerInfo& data);
   ASN1C_PKCS7_SignerInfo (ASN1C_PKCS7_SignerInfo& original);
   virtual ~ASN1C_PKCS7_SignerInfo () {}
   inline ASN1T_PKCS7_SignerInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7_SignerInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignerInfo");
   int toStream (const char* name = "SignerInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_SignerInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_SignerInfo& getCopy (ASN1T_PKCS7_SignerInfo* pDstData = 0);
   ASN1T_PKCS7_SignerInfo* newCopy ();

   inline ASN1C_PKCS7_SignerInfo& operator= (ASN1C_PKCS7_SignerInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_SignerInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_SignerInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_SignerInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignerInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_SignerInfo 
   (const char* name, const ASN1T_PKCS7_SignerInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_SignerInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SignerInfo* pvalue);

EXTERN ASN1T_PKCS7_SignerInfo* new_ASN1T_PKCS7_SignerInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_SignerInfo (const char* name, 
   ASN1T_PKCS7_SignerInfo* pValue, ASN1T_PKCS7_SignerInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_SignerInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignerInfo* pSrcValue, ASN1T_PKCS7_SignerInfo* pDstValue);

EXTERN void asn1Init_PKCS7_SignerInfo (ASN1T_PKCS7_SignerInfo* pvalue);

EXTERN void asn1Free_PKCS7_SignerInfo (OSCTXT *pctxt, ASN1T_PKCS7_SignerInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerInfos                                               */
/*                                                            */
/**************************************************************/
/*
SignerInfos ::= SET OF SignerInfo
*/
#define TV_PKCS7_SignerInfos	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_PKCS7_SignerInfos;

/* List of ASN1T_PKCS7_SignerInfo */
typedef struct EXTERN ASN1T_PKCS7_SignerInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7_SignerInfos();
} ASN1T_PKCS7_SignerInfos;

class EXTERN ASN1C_PKCS7_SignerInfos :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7_SignerInfos& msgData;
public:
   ASN1C_PKCS7_SignerInfos (ASN1T_PKCS7_SignerInfos& data);
   ASN1C_PKCS7_SignerInfos (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_SignerInfos& data);
   ASN1C_PKCS7_SignerInfos (ASN1CType& ccobj, ASN1T_PKCS7_SignerInfos& data);
   ASN1C_PKCS7_SignerInfos (OSRTContext &context, ASN1T_PKCS7_SignerInfos& data
      );
   ASN1C_PKCS7_SignerInfos (ASN1C_PKCS7_SignerInfos& original);
   virtual ~ASN1C_PKCS7_SignerInfos () {}
   inline ASN1T_PKCS7_SignerInfos& getData () { return msgData; }
   inline const ASN1T_PKCS7_SignerInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignerInfos");
   int toStream (const char* name = "SignerInfos");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_SignerInfos* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_SignerInfos& getCopy (ASN1T_PKCS7_SignerInfos* pDstData = 0);
   ASN1T_PKCS7_SignerInfos* newCopy ();

   ASN1C_PKCS7_SignerInfos& operator= (ASN1C_PKCS7_SignerInfos& srcData);
   void Append (ASN1T_PKCS7_SignerInfo* elem);
   ASN1T_PKCS7_SignerInfo* NewElement ();
   ASN1T_PKCS7_SignerInfo* AppendNewElement ();
} ;

EXTERN int asn1E_PKCS7_SignerInfos (OSCTXT* pctxt,
   ASN1T_PKCS7_SignerInfos *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_SignerInfos (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignerInfos* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_SignerInfos 
   (const char* name, const ASN1T_PKCS7_SignerInfos* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_SignerInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SignerInfos* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7_SignerInfos (const char* name, 
   ASN1T_PKCS7_SignerInfos* pValue, ASN1T_PKCS7_SignerInfos* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_SignerInfos (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignerInfos* pSrcValue, ASN1T_PKCS7_SignerInfos* pDstValue);

EXTERN void asn1Init_PKCS7_SignerInfos (ASN1T_PKCS7_SignerInfos* pvalue);

EXTERN void asn1Free_PKCS7_SignerInfos (OSCTXT *pctxt, 
   ASN1T_PKCS7_SignerInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  SignedData                                                */
/*                                                            */
/**************************************************************/
/*
 SignedData type

SignedData ::= SEQUENCE {
   version Version,
   digestAlgorithms DigestAlgorithmIdentifiers,
   contentInfo ContentInfo,
   certificates [0] ExtendedCertificatesAndCertificates OPTIONAL,
   crls [1] CertificateRevocationLists OPTIONAL,
   signerInfos SignerInfos
}
*/
#define TV_PKCS7_SignedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_SignedData;

struct EXTERN ASN1T_PKCS7_SignedData : public ASN1TPDU {
   struct {
      unsigned certificatesPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_PKCS7_Version version;
   ASN1T_PKCS7_DigestAlgorithmIdentifiers digestAlgorithms;
   ASN1T_PKCS7_ContentInfo contentInfo;
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates certificates;
   ASN1T_PKCS7_CertificateRevocationLists crls;
   ASN1T_PKCS7_SignerInfos signerInfos;
   ASN1T_PKCS7_SignedData ();
   ASN1T_PKCS7_SignedData (ASN1C_PKCS7_SignedData& srcData);
   ~ASN1T_PKCS7_SignedData ();
} ;

class EXTERN ASN1C_PKCS7_SignedData :
public ASN1CType
{
protected:
   ASN1T_PKCS7_SignedData& msgData;
public:
   ASN1C_PKCS7_SignedData (ASN1T_PKCS7_SignedData& data);
   ASN1C_PKCS7_SignedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_SignedData& data);
   ASN1C_PKCS7_SignedData (OSRTContext &context, ASN1T_PKCS7_SignedData& data);
   ASN1C_PKCS7_SignedData (ASN1C_PKCS7_SignedData& original);
   virtual ~ASN1C_PKCS7_SignedData () {}
   inline ASN1T_PKCS7_SignedData& getData () { return msgData; }
   inline const ASN1T_PKCS7_SignedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignedData");
   int toStream (const char* name = "SignedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_SignedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_SignedData& getCopy (ASN1T_PKCS7_SignedData* pDstData = 0);
   ASN1T_PKCS7_SignedData* newCopy ();

   inline ASN1C_PKCS7_SignedData& operator= (ASN1C_PKCS7_SignedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_SignedData (OSCTXT* pctxt,
   ASN1T_PKCS7_SignedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_SignedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_SignedData 
   (const char* name, const ASN1T_PKCS7_SignedData* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_SignedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SignedData* pvalue);

EXTERN ASN1T_PKCS7_SignedData* new_ASN1T_PKCS7_SignedData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_SignedData (const char* name, 
   ASN1T_PKCS7_SignedData* pValue, ASN1T_PKCS7_SignedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_SignedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignedData* pSrcValue, ASN1T_PKCS7_SignedData* pDstValue);

EXTERN void asn1Init_PKCS7_SignedData (ASN1T_PKCS7_SignedData* pvalue);

EXTERN void asn1Free_PKCS7_SignedData (OSCTXT *pctxt, ASN1T_PKCS7_SignedData* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestInfo                                                */
/*                                                            */
/**************************************************************/
/*
DigestInfo ::= SEQUENCE {
   digestAlgorithm DigestAlgorithmIdentifier,
   digest Digest
}
*/
#define TV_PKCS7_DigestInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_DigestInfo;

struct EXTERN ASN1T_PKCS7_DigestInfo : public ASN1TPDU {
   ASN1T_PKCS7_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_PKCS7_Digest digest;
   ASN1T_PKCS7_DigestInfo ();
   ASN1T_PKCS7_DigestInfo (ASN1C_PKCS7_DigestInfo& srcData);
   ~ASN1T_PKCS7_DigestInfo ();
} ;

class EXTERN ASN1C_PKCS7_DigestInfo :
public ASN1CType
{
protected:
   ASN1T_PKCS7_DigestInfo& msgData;
public:
   ASN1C_PKCS7_DigestInfo (ASN1T_PKCS7_DigestInfo& data);
   ASN1C_PKCS7_DigestInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_DigestInfo& data);
   ASN1C_PKCS7_DigestInfo (OSRTContext &context, ASN1T_PKCS7_DigestInfo& data);
   ASN1C_PKCS7_DigestInfo (ASN1C_PKCS7_DigestInfo& original);
   virtual ~ASN1C_PKCS7_DigestInfo () {}
   inline ASN1T_PKCS7_DigestInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7_DigestInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DigestInfo");
   int toStream (const char* name = "DigestInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_DigestInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_DigestInfo& getCopy (ASN1T_PKCS7_DigestInfo* pDstData = 0);
   ASN1T_PKCS7_DigestInfo* newCopy ();

   inline ASN1C_PKCS7_DigestInfo& operator= (ASN1C_PKCS7_DigestInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_DigestInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_DigestInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_DigestInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_DigestInfo 
   (const char* name, const ASN1T_PKCS7_DigestInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_DigestInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_DigestInfo* pvalue);

EXTERN ASN1T_PKCS7_DigestInfo* new_ASN1T_PKCS7_DigestInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_DigestInfo (const char* name, 
   ASN1T_PKCS7_DigestInfo* pValue, ASN1T_PKCS7_DigestInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_DigestInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestInfo* pSrcValue, ASN1T_PKCS7_DigestInfo* pDstValue);

EXTERN void asn1Init_PKCS7_DigestInfo (ASN1T_PKCS7_DigestInfo* pvalue);

EXTERN void asn1Free_PKCS7_DigestInfo (OSCTXT *pctxt, ASN1T_PKCS7_DigestInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientInfo                                             */
/*                                                            */
/**************************************************************/
/*
RecipientInfo ::= SEQUENCE {
   version Version,
   issuerAndSerialNumber IssuerAndSerialNumber,
   keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
   encryptedKey EncryptedKey
}
*/
#define TV_PKCS7_RecipientInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_RecipientInfo;

struct EXTERN ASN1T_PKCS7_RecipientInfo : public ASN1TPDU {
   ASN1T_PKCS7_Version version;
   ASN1T_PKCS7_IssuerAndSerialNumber issuerAndSerialNumber;
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_PKCS7_EncryptedKey encryptedKey;
   ASN1T_PKCS7_RecipientInfo ();
   ASN1T_PKCS7_RecipientInfo (ASN1C_PKCS7_RecipientInfo& srcData);
   ~ASN1T_PKCS7_RecipientInfo ();
} ;

class EXTERN ASN1C_PKCS7_RecipientInfo :
public ASN1CType
{
protected:
   ASN1T_PKCS7_RecipientInfo& msgData;
public:
   ASN1C_PKCS7_RecipientInfo (ASN1T_PKCS7_RecipientInfo& data);
   ASN1C_PKCS7_RecipientInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_RecipientInfo& data);
   ASN1C_PKCS7_RecipientInfo (OSRTContext &context
      , ASN1T_PKCS7_RecipientInfo& data);
   ASN1C_PKCS7_RecipientInfo (ASN1C_PKCS7_RecipientInfo& original);
   virtual ~ASN1C_PKCS7_RecipientInfo () {}
   inline ASN1T_PKCS7_RecipientInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7_RecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RecipientInfo");
   int toStream (const char* name = "RecipientInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_RecipientInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_RecipientInfo& getCopy (ASN1T_PKCS7_RecipientInfo* pDstData = 0);
   ASN1T_PKCS7_RecipientInfo* newCopy ();

   inline ASN1C_PKCS7_RecipientInfo& operator= (ASN1C_PKCS7_RecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_RecipientInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_RecipientInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_RecipientInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_RecipientInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_RecipientInfo 
   (const char* name, const ASN1T_PKCS7_RecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_RecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_RecipientInfo* pvalue);

EXTERN ASN1T_PKCS7_RecipientInfo* 
   new_ASN1T_PKCS7_RecipientInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_RecipientInfo (const char* name, 
   ASN1T_PKCS7_RecipientInfo* pValue, ASN1T_PKCS7_RecipientInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_RecipientInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_RecipientInfo* pSrcValue, ASN1T_PKCS7_RecipientInfo* pDstValue);

EXTERN void asn1Init_PKCS7_RecipientInfo (ASN1T_PKCS7_RecipientInfo* pvalue);

EXTERN void asn1Free_PKCS7_RecipientInfo (OSCTXT *pctxt, 
   ASN1T_PKCS7_RecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientInfos                                            */
/*                                                            */
/**************************************************************/
/*
RecipientInfos ::= SET OF RecipientInfo
*/
#define TV_PKCS7_RecipientInfos	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_PKCS7_RecipientInfos;

/* List of ASN1T_PKCS7_RecipientInfo */
typedef struct EXTERN ASN1T_PKCS7_RecipientInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7_RecipientInfos();
} ASN1T_PKCS7_RecipientInfos;

class EXTERN ASN1C_PKCS7_RecipientInfos :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7_RecipientInfos& msgData;
public:
   ASN1C_PKCS7_RecipientInfos (ASN1T_PKCS7_RecipientInfos& data);
   ASN1C_PKCS7_RecipientInfos (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_RecipientInfos& data);
   ASN1C_PKCS7_RecipientInfos (ASN1CType& ccobj
      , ASN1T_PKCS7_RecipientInfos& data);
   ASN1C_PKCS7_RecipientInfos (OSRTContext &context
      , ASN1T_PKCS7_RecipientInfos& data);
   ASN1C_PKCS7_RecipientInfos (ASN1C_PKCS7_RecipientInfos& original);
   virtual ~ASN1C_PKCS7_RecipientInfos () {}
   inline ASN1T_PKCS7_RecipientInfos& getData () { return msgData; }
   inline const ASN1T_PKCS7_RecipientInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RecipientInfos");
   int toStream (const char* name = "RecipientInfos");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_RecipientInfos* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_RecipientInfos& getCopy (ASN1T_PKCS7_RecipientInfos* pDstData = 0);
   ASN1T_PKCS7_RecipientInfos* newCopy ();

   ASN1C_PKCS7_RecipientInfos& operator= (ASN1C_PKCS7_RecipientInfos& srcData);
   void Append (ASN1T_PKCS7_RecipientInfo* elem);
   ASN1T_PKCS7_RecipientInfo* NewElement ();
   ASN1T_PKCS7_RecipientInfo* AppendNewElement ();
} ;

EXTERN int asn1E_PKCS7_RecipientInfos (OSCTXT* pctxt,
   ASN1T_PKCS7_RecipientInfos *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_RecipientInfos (OSCTXT* pctxt, 
   ASN1T_PKCS7_RecipientInfos* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_RecipientInfos 
   (const char* name, const ASN1T_PKCS7_RecipientInfos* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_RecipientInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_RecipientInfos* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7_RecipientInfos (const char* name, 
   ASN1T_PKCS7_RecipientInfos* pValue, ASN1T_PKCS7_RecipientInfos* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_RecipientInfos (OSCTXT* pctxt, 
   ASN1T_PKCS7_RecipientInfos* pSrcValue, ASN1T_PKCS7_RecipientInfos*
    pDstValue);

EXTERN void asn1Init_PKCS7_RecipientInfos (ASN1T_PKCS7_RecipientInfos* pvalue);

EXTERN void asn1Free_PKCS7_RecipientInfos (OSCTXT *pctxt, 
   ASN1T_PKCS7_RecipientInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedContentInfo                                      */
/*                                                            */
/**************************************************************/
/*
EncryptedContentInfo ::= SEQUENCE {
   contentType ContentType,
   contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
   encryptedContent [0] EncryptedContent OPTIONAL
}
*/
#define TV_PKCS7_EncryptedContentInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_EncryptedContentInfo;

struct EXTERN ASN1T_PKCS7_EncryptedContentInfo : public ASN1TPDU {
   struct {
      unsigned encryptedContentPresent : 1;
   } m;
   ASN1T_PKCS7_ContentType contentType;
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier contentEncryptionAlgorithm;
   ASN1T_PKCS7_EncryptedContent encryptedContent;
   ASN1T_PKCS7_EncryptedContentInfo ();
   ASN1T_PKCS7_EncryptedContentInfo (ASN1C_PKCS7_EncryptedContentInfo& srcData);
   ~ASN1T_PKCS7_EncryptedContentInfo ();
} ;

class EXTERN ASN1C_PKCS7_EncryptedContentInfo :
public ASN1CType
{
protected:
   ASN1T_PKCS7_EncryptedContentInfo& msgData;
public:
   ASN1C_PKCS7_EncryptedContentInfo (ASN1T_PKCS7_EncryptedContentInfo& data);
   ASN1C_PKCS7_EncryptedContentInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_EncryptedContentInfo& data);
   ASN1C_PKCS7_EncryptedContentInfo (OSRTContext &context
      , ASN1T_PKCS7_EncryptedContentInfo& data);
   ASN1C_PKCS7_EncryptedContentInfo (ASN1C_PKCS7_EncryptedContentInfo& original);
   virtual ~ASN1C_PKCS7_EncryptedContentInfo () {}
   inline ASN1T_PKCS7_EncryptedContentInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7_EncryptedContentInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedContentInfo");
   int toStream (const char* name = "EncryptedContentInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_EncryptedContentInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_EncryptedContentInfo& getCopy (ASN1T_PKCS7_EncryptedContentInfo* pDstData = 0);
   ASN1T_PKCS7_EncryptedContentInfo* newCopy ();

   inline ASN1C_PKCS7_EncryptedContentInfo& operator= (ASN1C_PKCS7_EncryptedContentInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_EncryptedContentInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_EncryptedContentInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_EncryptedContentInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedContentInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_EncryptedContentInfo 
   (const char* name, const ASN1T_PKCS7_EncryptedContentInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_EncryptedContentInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EncryptedContentInfo* pvalue);

EXTERN ASN1T_PKCS7_EncryptedContentInfo* 
   new_ASN1T_PKCS7_EncryptedContentInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_EncryptedContentInfo (const char* name, 
   ASN1T_PKCS7_EncryptedContentInfo* pValue, 
   ASN1T_PKCS7_EncryptedContentInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_EncryptedContentInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedContentInfo* pSrcValue, 
   ASN1T_PKCS7_EncryptedContentInfo* pDstValue);

EXTERN void asn1Init_PKCS7_EncryptedContentInfo (
   ASN1T_PKCS7_EncryptedContentInfo* pvalue);

EXTERN void asn1Free_PKCS7_EncryptedContentInfo (OSCTXT *pctxt, 
   ASN1T_PKCS7_EncryptedContentInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  EnvelopedData                                             */
/*                                                            */
/**************************************************************/
/*
 EnvelopedData type

EnvelopedData ::= SEQUENCE {
   version Version,
   recipientInfos RecipientInfos,
   encryptedContentInfo EncryptedContentInfo
}
*/
#define TV_PKCS7_EnvelopedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_EnvelopedData;

struct EXTERN ASN1T_PKCS7_EnvelopedData : public ASN1TPDU {
   ASN1T_PKCS7_Version version;
   ASN1T_PKCS7_RecipientInfos recipientInfos;
   ASN1T_PKCS7_EncryptedContentInfo encryptedContentInfo;
   ASN1T_PKCS7_EnvelopedData ();
   ASN1T_PKCS7_EnvelopedData (ASN1C_PKCS7_EnvelopedData& srcData);
   ~ASN1T_PKCS7_EnvelopedData ();
} ;

class EXTERN ASN1C_PKCS7_EnvelopedData :
public ASN1CType
{
protected:
   ASN1T_PKCS7_EnvelopedData& msgData;
public:
   ASN1C_PKCS7_EnvelopedData (ASN1T_PKCS7_EnvelopedData& data);
   ASN1C_PKCS7_EnvelopedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_EnvelopedData& data);
   ASN1C_PKCS7_EnvelopedData (OSRTContext &context
      , ASN1T_PKCS7_EnvelopedData& data);
   ASN1C_PKCS7_EnvelopedData (ASN1C_PKCS7_EnvelopedData& original);
   virtual ~ASN1C_PKCS7_EnvelopedData () {}
   inline ASN1T_PKCS7_EnvelopedData& getData () { return msgData; }
   inline const ASN1T_PKCS7_EnvelopedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EnvelopedData");
   int toStream (const char* name = "EnvelopedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_EnvelopedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_EnvelopedData& getCopy (ASN1T_PKCS7_EnvelopedData* pDstData = 0);
   ASN1T_PKCS7_EnvelopedData* newCopy ();

   inline ASN1C_PKCS7_EnvelopedData& operator= (ASN1C_PKCS7_EnvelopedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_EnvelopedData (OSCTXT* pctxt,
   ASN1T_PKCS7_EnvelopedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_EnvelopedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_EnvelopedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_EnvelopedData 
   (const char* name, const ASN1T_PKCS7_EnvelopedData* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_EnvelopedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EnvelopedData* pvalue);

EXTERN ASN1T_PKCS7_EnvelopedData* 
   new_ASN1T_PKCS7_EnvelopedData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_EnvelopedData (const char* name, 
   ASN1T_PKCS7_EnvelopedData* pValue, ASN1T_PKCS7_EnvelopedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_EnvelopedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_EnvelopedData* pSrcValue, ASN1T_PKCS7_EnvelopedData* pDstValue);

EXTERN void asn1Init_PKCS7_EnvelopedData (ASN1T_PKCS7_EnvelopedData* pvalue);

EXTERN void asn1Free_PKCS7_EnvelopedData (OSCTXT *pctxt, 
   ASN1T_PKCS7_EnvelopedData* pvalue);

/**************************************************************/
/*                                                            */
/*  SignedAndEnvelopedData                                    */
/*                                                            */
/**************************************************************/
/*
 SignedAndEnvelopedData type

SignedAndEnvelopedData ::= SEQUENCE {
   version Version,
   recipientInfos RecipientInfos,
   digestAlgorithms DigestAlgorithmIdentifiers,
   encryptedContentInfo EncryptedContentInfo,
   certificates [0] ExtendedCertificatesAndCertificates OPTIONAL,
   crls [1] CertificateRevocationLists OPTIONAL,
   signerInfos SignerInfos
}
*/
#define TV_PKCS7_SignedAndEnvelopedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_SignedAndEnvelopedData;

struct EXTERN ASN1T_PKCS7_SignedAndEnvelopedData : public ASN1TPDU {
   struct {
      unsigned certificatesPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_PKCS7_Version version;
   ASN1T_PKCS7_RecipientInfos recipientInfos;
   ASN1T_PKCS7_DigestAlgorithmIdentifiers digestAlgorithms;
   ASN1T_PKCS7_EncryptedContentInfo encryptedContentInfo;
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates certificates;
   ASN1T_PKCS7_CertificateRevocationLists crls;
   ASN1T_PKCS7_SignerInfos signerInfos;
   ASN1T_PKCS7_SignedAndEnvelopedData ();
   ASN1T_PKCS7_SignedAndEnvelopedData (ASN1C_PKCS7_SignedAndEnvelopedData& srcData);
   ~ASN1T_PKCS7_SignedAndEnvelopedData ();
} ;

class EXTERN ASN1C_PKCS7_SignedAndEnvelopedData :
public ASN1CType
{
protected:
   ASN1T_PKCS7_SignedAndEnvelopedData& msgData;
public:
   ASN1C_PKCS7_SignedAndEnvelopedData
       (ASN1T_PKCS7_SignedAndEnvelopedData& data);
   ASN1C_PKCS7_SignedAndEnvelopedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_SignedAndEnvelopedData& data);
   ASN1C_PKCS7_SignedAndEnvelopedData (OSRTContext &context
      , ASN1T_PKCS7_SignedAndEnvelopedData& data);
   ASN1C_PKCS7_SignedAndEnvelopedData (ASN1C_PKCS7_SignedAndEnvelopedData& original);
   virtual ~ASN1C_PKCS7_SignedAndEnvelopedData () {}
   inline ASN1T_PKCS7_SignedAndEnvelopedData& getData () { return msgData; }
   inline const ASN1T_PKCS7_SignedAndEnvelopedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignedAndEnvelopedData");
   int toStream (const char* name = "SignedAndEnvelopedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_SignedAndEnvelopedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_SignedAndEnvelopedData& getCopy (ASN1T_PKCS7_SignedAndEnvelopedData* pDstData = 0);
   ASN1T_PKCS7_SignedAndEnvelopedData* newCopy ();

   inline ASN1C_PKCS7_SignedAndEnvelopedData& operator= (ASN1C_PKCS7_SignedAndEnvelopedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_SignedAndEnvelopedData (OSCTXT* pctxt,
   ASN1T_PKCS7_SignedAndEnvelopedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_SignedAndEnvelopedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_SignedAndEnvelopedData 
   (const char* name, const ASN1T_PKCS7_SignedAndEnvelopedData* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_SignedAndEnvelopedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SignedAndEnvelopedData* pvalue);

EXTERN ASN1T_PKCS7_SignedAndEnvelopedData* 
   new_ASN1T_PKCS7_SignedAndEnvelopedData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_SignedAndEnvelopedData (const char* name, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pValue, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_SignedAndEnvelopedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pSrcValue, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pDstValue);

EXTERN void asn1Init_PKCS7_SignedAndEnvelopedData (
   ASN1T_PKCS7_SignedAndEnvelopedData* pvalue);

EXTERN void asn1Free_PKCS7_SignedAndEnvelopedData (OSCTXT *pctxt, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pvalue);

/**************************************************************/
/*                                                            */
/*  IssuerSerial                                              */
/*                                                            */
/**************************************************************/
/*
 ***

IssuerSerial ::= SEQUENCE {
   issuer GeneralNames,
   serialNumber CertificateSerialNumber
}
*/
#define TV_PKCS7_IssuerSerial	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_IssuerSerial;

struct EXTERN ASN1T_PKCS7_IssuerSerial : public ASN1TPDU {
   ASN1T_IMP_GeneralNames issuer;
   ASN1T_EXP_CertificateSerialNumber serialNumber;
   ASN1T_PKCS7_IssuerSerial ();
   ASN1T_PKCS7_IssuerSerial (ASN1C_PKCS7_IssuerSerial& srcData);
   ~ASN1T_PKCS7_IssuerSerial ();
} ;

class EXTERN ASN1C_PKCS7_IssuerSerial :
public ASN1CType
{
protected:
   ASN1T_PKCS7_IssuerSerial& msgData;
public:
   ASN1C_PKCS7_IssuerSerial (ASN1T_PKCS7_IssuerSerial& data);
   ASN1C_PKCS7_IssuerSerial (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_IssuerSerial& data);
   ASN1C_PKCS7_IssuerSerial (OSRTContext &context
      , ASN1T_PKCS7_IssuerSerial& data);
   ASN1C_PKCS7_IssuerSerial (ASN1C_PKCS7_IssuerSerial& original);
   virtual ~ASN1C_PKCS7_IssuerSerial () {}
   inline ASN1T_PKCS7_IssuerSerial& getData () { return msgData; }
   inline const ASN1T_PKCS7_IssuerSerial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "IssuerSerial");
   int toStream (const char* name = "IssuerSerial");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_IssuerSerial* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_IssuerSerial& getCopy (ASN1T_PKCS7_IssuerSerial* pDstData = 0);
   ASN1T_PKCS7_IssuerSerial* newCopy ();

   inline ASN1C_PKCS7_IssuerSerial& operator= (ASN1C_PKCS7_IssuerSerial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_IssuerSerial (OSCTXT* pctxt,
   ASN1T_PKCS7_IssuerSerial *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_IssuerSerial (OSCTXT* pctxt, 
   ASN1T_PKCS7_IssuerSerial* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_IssuerSerial 
   (const char* name, const ASN1T_PKCS7_IssuerSerial* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_IssuerSerial (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_IssuerSerial* pvalue);

EXTERN ASN1T_PKCS7_IssuerSerial* 
   new_ASN1T_PKCS7_IssuerSerial (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_IssuerSerial (const char* name, 
   ASN1T_PKCS7_IssuerSerial* pValue, ASN1T_PKCS7_IssuerSerial* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_IssuerSerial (OSCTXT* pctxt, 
   ASN1T_PKCS7_IssuerSerial* pSrcValue, ASN1T_PKCS7_IssuerSerial* pDstValue);

EXTERN void asn1Init_PKCS7_IssuerSerial (ASN1T_PKCS7_IssuerSerial* pvalue);

EXTERN void asn1Free_PKCS7_IssuerSerial (OSCTXT *pctxt, 
   ASN1T_PKCS7_IssuerSerial* pvalue);

/**************************************************************/
/*                                                            */
/*  ESSCertID                                                 */
/*                                                            */
/**************************************************************/
/*
ESSCertID ::= SEQUENCE {
   certHash Hash,
   issuerSerial IssuerSerial OPTIONAL
}
*/
#define TV_PKCS7_ESSCertID	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_ESSCertID;

struct EXTERN ASN1T_PKCS7_ESSCertID : public ASN1TPDU {
   struct {
      unsigned issuerSerialPresent : 1;
   } m;
   ASN1T_PKCS7_Hash certHash;
   ASN1T_PKCS7_IssuerSerial issuerSerial;
   ASN1T_PKCS7_ESSCertID ();
   ASN1T_PKCS7_ESSCertID (ASN1C_PKCS7_ESSCertID& srcData);
   ~ASN1T_PKCS7_ESSCertID ();
} ;

class EXTERN ASN1C_PKCS7_ESSCertID :
public ASN1CType
{
protected:
   ASN1T_PKCS7_ESSCertID& msgData;
public:
   ASN1C_PKCS7_ESSCertID (ASN1T_PKCS7_ESSCertID& data);
   ASN1C_PKCS7_ESSCertID (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_ESSCertID& data);
   ASN1C_PKCS7_ESSCertID (OSRTContext &context, ASN1T_PKCS7_ESSCertID& data);
   ASN1C_PKCS7_ESSCertID (ASN1C_PKCS7_ESSCertID& original);
   virtual ~ASN1C_PKCS7_ESSCertID () {}
   inline ASN1T_PKCS7_ESSCertID& getData () { return msgData; }
   inline const ASN1T_PKCS7_ESSCertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ESSCertID");
   int toStream (const char* name = "ESSCertID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_ESSCertID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_ESSCertID& getCopy (ASN1T_PKCS7_ESSCertID* pDstData = 0);
   ASN1T_PKCS7_ESSCertID* newCopy ();

   inline ASN1C_PKCS7_ESSCertID& operator= (ASN1C_PKCS7_ESSCertID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_ESSCertID (OSCTXT* pctxt,
   ASN1T_PKCS7_ESSCertID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_ESSCertID (OSCTXT* pctxt, 
   ASN1T_PKCS7_ESSCertID* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_ESSCertID 
   (const char* name, const ASN1T_PKCS7_ESSCertID* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_ESSCertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ESSCertID* pvalue);

EXTERN ASN1T_PKCS7_ESSCertID* new_ASN1T_PKCS7_ESSCertID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_ESSCertID (const char* name, 
   ASN1T_PKCS7_ESSCertID* pValue, ASN1T_PKCS7_ESSCertID* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_ESSCertID (OSCTXT* pctxt, 
   ASN1T_PKCS7_ESSCertID* pSrcValue, ASN1T_PKCS7_ESSCertID* pDstValue);

EXTERN void asn1Init_PKCS7_ESSCertID (ASN1T_PKCS7_ESSCertID* pvalue);

EXTERN void asn1Free_PKCS7_ESSCertID (OSCTXT *pctxt, ASN1T_PKCS7_ESSCertID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfPKCS7_ESSCertID                                     */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_PKCS7__SeqOfPKCS7_ESSCertID;

/* List of ASN1T_PKCS7_ESSCertID */
typedef struct EXTERN ASN1T_PKCS7__SeqOfPKCS7_ESSCertID : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7__SeqOfPKCS7_ESSCertID();
} ASN1T_PKCS7__SeqOfPKCS7_ESSCertID;

class EXTERN ASN1C_PKCS7__SeqOfPKCS7_ESSCertID :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& msgData;
public:
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& data);
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& data);
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (ASN1CType& ccobj
      , ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& data);
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (OSRTContext &context
      , ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& data);
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (ASN1C_PKCS7__SeqOfPKCS7_ESSCertID& original);
   virtual ~ASN1C_PKCS7__SeqOfPKCS7_ESSCertID () {}
   inline ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& getData () { return msgData; }
   inline const ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfPKCS7_ESSCertID");
   int toStream (const char* name = "_SeqOfPKCS7_ESSCertID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& getCopy (ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pDstData = 0);
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* newCopy ();

   ASN1C_PKCS7__SeqOfPKCS7_ESSCertID& operator= (ASN1C_PKCS7__SeqOfPKCS7_ESSCertID& srcData);
   void Append (ASN1T_PKCS7_ESSCertID* elem);
   ASN1T_PKCS7_ESSCertID* NewElement ();
   ASN1T_PKCS7_ESSCertID* AppendNewElement ();
} ;

EXTERN int asn1E_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT* pctxt,
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT* pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7__SeqOfPKCS7_ESSCertID 
   (const char* name, const ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue);

EXTERN int asn1PrtToStrm_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7__SeqOfPKCS7_ESSCertID (const char* name, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pValue, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT* pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pSrcValue, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pDstValue);

EXTERN void asn1Init_PKCS7__SeqOfPKCS7_ESSCertID (
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue);

EXTERN void asn1Free_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT *pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfPKCS7_PolicyInformation                             */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation;

/* List of ASN1T_IMP_PolicyInformation */
typedef struct EXTERN ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation();
} ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation;

class EXTERN ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& msgData;
public:
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation
       (ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& data);
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& data);
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation (ASN1CType& ccobj
      , ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& data);
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation (OSRTContext &context
      , ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& data);
   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation (ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation& original);
   virtual ~ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation () {}
   inline ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& getData () { return msgData; }
   inline const ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfPKCS7_PolicyInformation");
   int toStream (const char* name = "_SeqOfPKCS7_PolicyInformation");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& getCopy (ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pDstData = 0);
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* newCopy ();

   ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation& operator= (ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation& srcData);
   void Append (ASN1T_IMP_PolicyInformation* elem);
   ASN1T_IMP_PolicyInformation* NewElement ();
   ASN1T_IMP_PolicyInformation* AppendNewElement ();
} ;

EXTERN int asn1E_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT* pctxt,
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS7__SeqOfPKCS7_PolicyInformation 
   (const char* name, const ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue);

EXTERN int asn1PrtToStrm_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7__SeqOfPKCS7_PolicyInformation (const char* name, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pValue, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pSrcValue, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pDstValue);

EXTERN void asn1Init_PKCS7__SeqOfPKCS7_PolicyInformation (
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue);

EXTERN void asn1Free_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT *pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  SigningCertificate                                        */
/*                                                            */
/**************************************************************/
/*
SigningCertificate ::= SEQUENCE {
   certs SEQUENCE OF ESSCertID,
   policies SEQUENCE OF PolicyInformation OPTIONAL
}
*/
#define TV_PKCS7_SigningCertificate	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_SigningCertificate;

struct EXTERN ASN1T_PKCS7_SigningCertificate : public ASN1TPDU {
   struct {
      unsigned policiesPresent : 1;
   } m;
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID certs;
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation policies;
   ASN1T_PKCS7_SigningCertificate ();
   ASN1T_PKCS7_SigningCertificate (ASN1C_PKCS7_SigningCertificate& srcData);
   ~ASN1T_PKCS7_SigningCertificate ();
} ;

class EXTERN ASN1C_PKCS7_SigningCertificate :
public ASN1CType
{
protected:
   ASN1T_PKCS7_SigningCertificate& msgData;
public:
   ASN1C_PKCS7_SigningCertificate (ASN1T_PKCS7_SigningCertificate& data);
   ASN1C_PKCS7_SigningCertificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_SigningCertificate& data);
   ASN1C_PKCS7_SigningCertificate (OSRTContext &context
      , ASN1T_PKCS7_SigningCertificate& data);
   ASN1C_PKCS7_SigningCertificate (ASN1C_PKCS7_SigningCertificate& original);
   virtual ~ASN1C_PKCS7_SigningCertificate () {}
   inline ASN1T_PKCS7_SigningCertificate& getData () { return msgData; }
   inline const ASN1T_PKCS7_SigningCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SigningCertificate");
   int toStream (const char* name = "SigningCertificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_SigningCertificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_SigningCertificate& getCopy (ASN1T_PKCS7_SigningCertificate* pDstData = 0);
   ASN1T_PKCS7_SigningCertificate* newCopy ();

   inline ASN1C_PKCS7_SigningCertificate& operator= (ASN1C_PKCS7_SigningCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_SigningCertificate (OSCTXT* pctxt,
   ASN1T_PKCS7_SigningCertificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_SigningCertificate (OSCTXT* pctxt, 
   ASN1T_PKCS7_SigningCertificate* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_SigningCertificate 
   (const char* name, const ASN1T_PKCS7_SigningCertificate* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_SigningCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SigningCertificate* pvalue);

EXTERN ASN1T_PKCS7_SigningCertificate* 
   new_ASN1T_PKCS7_SigningCertificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_SigningCertificate (const char* name, 
   ASN1T_PKCS7_SigningCertificate* pValue, 
   ASN1T_PKCS7_SigningCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_SigningCertificate (OSCTXT* pctxt, 
   ASN1T_PKCS7_SigningCertificate* pSrcValue, ASN1T_PKCS7_SigningCertificate*
    pDstValue);

EXTERN void asn1Init_PKCS7_SigningCertificate (ASN1T_PKCS7_SigningCertificate* pvalue);

EXTERN void asn1Free_PKCS7_SigningCertificate (OSCTXT *pctxt, 
   ASN1T_PKCS7_SigningCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  ESSCertIDv2                                               */
/*                                                            */
/**************************************************************/
/*
ESSCertIDv2 ::= SEQUENCE {
   hashAlgorithm AlgorithmIdentifier DEFAULT {
      algorithm id-sha256
   }
   ,
   certHash Hash,
   issuerSerial IssuerSerial OPTIONAL
}
*/
#define TV_PKCS7_ESSCertIDv2	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_ESSCertIDv2;

struct EXTERN ASN1T_PKCS7_ESSCertIDv2 : public ASN1TPDU {
   struct {
      unsigned hashAlgorithmPresent : 1;
      unsigned issuerSerialPresent : 1;
   } m;
   ASN1T_EXP_AlgorithmIdentifier hashAlgorithm;
   ASN1T_PKCS7_Hash certHash;
   ASN1T_PKCS7_IssuerSerial issuerSerial;
   ASN1T_PKCS7_ESSCertIDv2 ();
   ASN1T_PKCS7_ESSCertIDv2 (ASN1C_PKCS7_ESSCertIDv2& srcData);
   ~ASN1T_PKCS7_ESSCertIDv2 ();
} ;

class EXTERN ASN1C_PKCS7_ESSCertIDv2 :
public ASN1CType
{
protected:
   ASN1T_PKCS7_ESSCertIDv2& msgData;
public:
   ASN1C_PKCS7_ESSCertIDv2 (ASN1T_PKCS7_ESSCertIDv2& data);
   ASN1C_PKCS7_ESSCertIDv2 (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_ESSCertIDv2& data);
   ASN1C_PKCS7_ESSCertIDv2 (OSRTContext &context, ASN1T_PKCS7_ESSCertIDv2& data
      );
   ASN1C_PKCS7_ESSCertIDv2 (ASN1C_PKCS7_ESSCertIDv2& original);
   virtual ~ASN1C_PKCS7_ESSCertIDv2 () {}
   inline ASN1T_PKCS7_ESSCertIDv2& getData () { return msgData; }
   inline const ASN1T_PKCS7_ESSCertIDv2& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ESSCertIDv2");
   int toStream (const char* name = "ESSCertIDv2");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_ESSCertIDv2* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_ESSCertIDv2& getCopy (ASN1T_PKCS7_ESSCertIDv2* pDstData = 0);
   ASN1T_PKCS7_ESSCertIDv2* newCopy ();

   inline ASN1C_PKCS7_ESSCertIDv2& operator= (ASN1C_PKCS7_ESSCertIDv2& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_ESSCertIDv2 (OSCTXT* pctxt,
   ASN1T_PKCS7_ESSCertIDv2 *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_ESSCertIDv2 (OSCTXT* pctxt, 
   ASN1T_PKCS7_ESSCertIDv2* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_ESSCertIDv2 
   (const char* name, const ASN1T_PKCS7_ESSCertIDv2* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_ESSCertIDv2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ESSCertIDv2* pvalue);

EXTERN ASN1T_PKCS7_ESSCertIDv2* new_ASN1T_PKCS7_ESSCertIDv2 (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_PKCS7_ESSCertIDv2 (const char* name, 
   ASN1T_PKCS7_ESSCertIDv2* pValue, ASN1T_PKCS7_ESSCertIDv2* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_ESSCertIDv2 (OSCTXT* pctxt, 
   ASN1T_PKCS7_ESSCertIDv2* pSrcValue, ASN1T_PKCS7_ESSCertIDv2* pDstValue);

EXTERN void asn1Init_PKCS7_ESSCertIDv2 (ASN1T_PKCS7_ESSCertIDv2* pvalue);

EXTERN void asn1Free_PKCS7_ESSCertIDv2 (OSCTXT *pctxt, 
   ASN1T_PKCS7_ESSCertIDv2* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfPKCS7_ESSCertIDv2                                   */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2;

/* List of ASN1T_PKCS7_ESSCertIDv2 */
typedef struct EXTERN ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2 : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2();
} ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2;

class EXTERN ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2 :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2& msgData;
public:
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2
       (ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2& data);
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2& data);
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2 (ASN1CType& ccobj
      , ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2& data);
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSRTContext &context
      , ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2& data);
   ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2 (ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2& original);
   virtual ~ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2 () {}
   inline ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2& getData () { return msgData; }
   inline const ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfPKCS7_ESSCertIDv2");
   int toStream (const char* name = "_SeqOfPKCS7_ESSCertIDv2");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2& getCopy (ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pDstData = 0);
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* newCopy ();

   ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2& operator= (ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2& srcData);
   void Append (ASN1T_PKCS7_ESSCertIDv2* elem);
   ASN1T_PKCS7_ESSCertIDv2* NewElement ();
   ASN1T_PKCS7_ESSCertIDv2* AppendNewElement ();
} ;

EXTERN int asn1E_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSCTXT* pctxt,
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2 *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSCTXT* pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS7__SeqOfPKCS7_ESSCertIDv2 
   (const char* name, const ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pvalue);

EXTERN int asn1PrtToStrm_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7__SeqOfPKCS7_ESSCertIDv2 (const char* name, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pValue, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSCTXT* pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pSrcValue, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pDstValue);

EXTERN void asn1Init_PKCS7__SeqOfPKCS7_ESSCertIDv2 (
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pvalue);

EXTERN void asn1Free_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSCTXT *pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pvalue);

/**************************************************************/
/*                                                            */
/*  SigningCertificateV2                                      */
/*                                                            */
/**************************************************************/
/*
 ***

SigningCertificateV2 ::= SEQUENCE {
   certs SEQUENCE OF ESSCertIDv2,
   policies SEQUENCE OF PolicyInformation OPTIONAL
}
*/
#define TV_PKCS7_SigningCertificateV2	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS7_SigningCertificateV2;

struct EXTERN ASN1T_PKCS7_SigningCertificateV2 : public ASN1TPDU {
   struct {
      unsigned policiesPresent : 1;
   } m;
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2 certs;
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation policies;
   ASN1T_PKCS7_SigningCertificateV2 ();
   ASN1T_PKCS7_SigningCertificateV2 (ASN1C_PKCS7_SigningCertificateV2& srcData);
   ~ASN1T_PKCS7_SigningCertificateV2 ();
} ;

class EXTERN ASN1C_PKCS7_SigningCertificateV2 :
public ASN1CType
{
protected:
   ASN1T_PKCS7_SigningCertificateV2& msgData;
public:
   ASN1C_PKCS7_SigningCertificateV2 (ASN1T_PKCS7_SigningCertificateV2& data);
   ASN1C_PKCS7_SigningCertificateV2 (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS7_SigningCertificateV2& data);
   ASN1C_PKCS7_SigningCertificateV2 (OSRTContext &context
      , ASN1T_PKCS7_SigningCertificateV2& data);
   ASN1C_PKCS7_SigningCertificateV2 (ASN1C_PKCS7_SigningCertificateV2& original);
   virtual ~ASN1C_PKCS7_SigningCertificateV2 () {}
   inline ASN1T_PKCS7_SigningCertificateV2& getData () { return msgData; }
   inline const ASN1T_PKCS7_SigningCertificateV2& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SigningCertificateV2");
   int toStream (const char* name = "SigningCertificateV2");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS7_SigningCertificateV2* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS7_SigningCertificateV2& getCopy (ASN1T_PKCS7_SigningCertificateV2* pDstData = 0);
   ASN1T_PKCS7_SigningCertificateV2* newCopy ();

   inline ASN1C_PKCS7_SigningCertificateV2& operator= (ASN1C_PKCS7_SigningCertificateV2& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS7_SigningCertificateV2 (OSCTXT* pctxt,
   ASN1T_PKCS7_SigningCertificateV2 *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS7_SigningCertificateV2 (OSCTXT* pctxt, 
   ASN1T_PKCS7_SigningCertificateV2* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS7_SigningCertificateV2 
   (const char* name, const ASN1T_PKCS7_SigningCertificateV2* pvalue);

EXTERN int asn1PrtToStrm_PKCS7_SigningCertificateV2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SigningCertificateV2* pvalue);

EXTERN ASN1T_PKCS7_SigningCertificateV2* 
   new_ASN1T_PKCS7_SigningCertificateV2 (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS7_SigningCertificateV2 (const char* name, 
   ASN1T_PKCS7_SigningCertificateV2* pValue, 
   ASN1T_PKCS7_SigningCertificateV2* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS7_SigningCertificateV2 (OSCTXT* pctxt, 
   ASN1T_PKCS7_SigningCertificateV2* pSrcValue, 
   ASN1T_PKCS7_SigningCertificateV2* pDstValue);

EXTERN void asn1Init_PKCS7_SigningCertificateV2 (
   ASN1T_PKCS7_SigningCertificateV2* pvalue);

EXTERN void asn1Free_PKCS7_SigningCertificateV2 (OSCTXT *pctxt, 
   ASN1T_PKCS7_SigningCertificateV2* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID PKCS7_pkcs_7;
extern EXTERN ASN1OBJID PKCS7_data;
extern EXTERN ASN1OBJID PKCS7_signedData;
extern EXTERN ASN1OBJID PKCS7_envelopedData;
extern EXTERN ASN1OBJID PKCS7_signedAndEnvelopedData;
extern EXTERN ASN1OBJID PKCS7_digestedData;
extern EXTERN ASN1OBJID PKCS7_encryptedData;
extern EXTERN ASN1OBJID PKCS7_id_aa_signingCertificate;
extern EXTERN ASN1OBJID PKCS7_id_aa_timeStampToken;
extern EXTERN ASN1OBJID PKCS7_id_aa_signingCertificateV2;

#endif
