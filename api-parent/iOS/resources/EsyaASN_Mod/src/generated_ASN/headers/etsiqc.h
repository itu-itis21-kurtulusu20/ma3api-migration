/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef ETSIQC_H
#define ETSIQC_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

/**
 * Header file for ASN.1 module etsiqc
 */
/**************************************************************/
/*                                                            */
/*  Iso4217CurrencyCode                                       */
/*                                                            */
/**************************************************************/
/*
 value = amount * 10^exponent

Iso4217CurrencyCode ::= CHOICE {
   numeric INTEGER (1..999),
   alphabetic PrintableString (SIZE (3))
}
*/
/* Choice context tags */

#define TVC_ETSIQC_Iso4217CurrencyCode_numeric	(TM_UNIV|TM_PRIM|2)
#define TVC_ETSIQC_Iso4217CurrencyCode_alphabetic	(TM_UNIV|TM_PRIM|19)

/* Choice tag constants */

#define T_ETSIQC_Iso4217CurrencyCode_numeric 1
#define T_ETSIQC_Iso4217CurrencyCode_alphabetic 2

class EXTERN ASN1C_ETSIQC_Iso4217CurrencyCode;

struct EXTERN ASN1T_ETSIQC_Iso4217CurrencyCode : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      OSUINT16 numeric;
      /* t = 2 */
      const char* alphabetic;
   } u;
   ASN1T_ETSIQC_Iso4217CurrencyCode () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_ETSIQC_Iso4217CurrencyCode (ASN1C_ETSIQC_Iso4217CurrencyCode& srcData);
   ~ASN1T_ETSIQC_Iso4217CurrencyCode ();
} ;

class EXTERN ASN1C_ETSIQC_Iso4217CurrencyCode :
public ASN1CType
{
protected:
   ASN1T_ETSIQC_Iso4217CurrencyCode& msgData;
public:
   ASN1C_ETSIQC_Iso4217CurrencyCode (ASN1T_ETSIQC_Iso4217CurrencyCode& data);
   ASN1C_ETSIQC_Iso4217CurrencyCode (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSIQC_Iso4217CurrencyCode& data);
   ASN1C_ETSIQC_Iso4217CurrencyCode (OSRTContext &context
      , ASN1T_ETSIQC_Iso4217CurrencyCode& data);
   ASN1C_ETSIQC_Iso4217CurrencyCode (ASN1C_ETSIQC_Iso4217CurrencyCode& original);
   virtual ~ASN1C_ETSIQC_Iso4217CurrencyCode () {}
   inline ASN1T_ETSIQC_Iso4217CurrencyCode& getData () { return msgData; }
   inline const ASN1T_ETSIQC_Iso4217CurrencyCode& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Iso4217CurrencyCode");
   int toStream (const char* name = "Iso4217CurrencyCode");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSIQC_Iso4217CurrencyCode* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSIQC_Iso4217CurrencyCode& getCopy (ASN1T_ETSIQC_Iso4217CurrencyCode* pDstData = 0);
   ASN1T_ETSIQC_Iso4217CurrencyCode* newCopy ();

   inline ASN1C_ETSIQC_Iso4217CurrencyCode& operator= (ASN1C_ETSIQC_Iso4217CurrencyCode& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSIQC_Iso4217CurrencyCode (OSCTXT* pctxt,
   ASN1T_ETSIQC_Iso4217CurrencyCode *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSIQC_Iso4217CurrencyCode (OSCTXT* pctxt, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSIQC_Iso4217CurrencyCode 
   (const char* name, const ASN1T_ETSIQC_Iso4217CurrencyCode* pvalue);

EXTERN int asn1PrtToStrm_ETSIQC_Iso4217CurrencyCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSIQC_Iso4217CurrencyCode* pvalue);

EXTERN ASN1T_ETSIQC_Iso4217CurrencyCode* 
   new_ASN1T_ETSIQC_Iso4217CurrencyCode (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSIQC_Iso4217CurrencyCode (const char* name, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pValue, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSIQC_Iso4217CurrencyCode (OSCTXT* pctxt, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pSrcValue, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pDstValue);

EXTERN void asn1Init_ETSIQC_Iso4217CurrencyCode (
   ASN1T_ETSIQC_Iso4217CurrencyCode* pvalue);

EXTERN void asn1Free_ETSIQC_Iso4217CurrencyCode (OSCTXT *pctxt, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pvalue);

/**************************************************************/
/*                                                            */
/*  MonetaryValue                                             */
/*                                                            */
/**************************************************************/
/*
MonetaryValue ::= SEQUENCE {
   currency Iso4217CurrencyCode,
   amount INTEGER,
   exponent INTEGER
}
*/
#define TV_ETSIQC_MonetaryValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSIQC_MonetaryValue;

struct EXTERN ASN1T_ETSIQC_MonetaryValue : public ASN1TPDU {
   ASN1T_ETSIQC_Iso4217CurrencyCode currency;
   OSINT32 amount;
   OSINT32 exponent;
   ASN1T_ETSIQC_MonetaryValue ();
   ASN1T_ETSIQC_MonetaryValue (ASN1C_ETSIQC_MonetaryValue& srcData);
   ~ASN1T_ETSIQC_MonetaryValue ();
} ;

class EXTERN ASN1C_ETSIQC_MonetaryValue :
public ASN1CType
{
protected:
   ASN1T_ETSIQC_MonetaryValue& msgData;
public:
   ASN1C_ETSIQC_MonetaryValue (ASN1T_ETSIQC_MonetaryValue& data);
   ASN1C_ETSIQC_MonetaryValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSIQC_MonetaryValue& data);
   ASN1C_ETSIQC_MonetaryValue (OSRTContext &context
      , ASN1T_ETSIQC_MonetaryValue& data);
   ASN1C_ETSIQC_MonetaryValue (ASN1C_ETSIQC_MonetaryValue& original);
   virtual ~ASN1C_ETSIQC_MonetaryValue () {}
   inline ASN1T_ETSIQC_MonetaryValue& getData () { return msgData; }
   inline const ASN1T_ETSIQC_MonetaryValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "MonetaryValue");
   int toStream (const char* name = "MonetaryValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSIQC_MonetaryValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSIQC_MonetaryValue& getCopy (ASN1T_ETSIQC_MonetaryValue* pDstData = 0);
   ASN1T_ETSIQC_MonetaryValue* newCopy ();

   inline ASN1C_ETSIQC_MonetaryValue& operator= (ASN1C_ETSIQC_MonetaryValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSIQC_MonetaryValue (OSCTXT* pctxt,
   ASN1T_ETSIQC_MonetaryValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSIQC_MonetaryValue (OSCTXT* pctxt, 
   ASN1T_ETSIQC_MonetaryValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSIQC_MonetaryValue 
   (const char* name, const ASN1T_ETSIQC_MonetaryValue* pvalue);

EXTERN int asn1PrtToStrm_ETSIQC_MonetaryValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSIQC_MonetaryValue* pvalue);

EXTERN ASN1T_ETSIQC_MonetaryValue* 
   new_ASN1T_ETSIQC_MonetaryValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSIQC_MonetaryValue (const char* name, 
   ASN1T_ETSIQC_MonetaryValue* pValue, ASN1T_ETSIQC_MonetaryValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSIQC_MonetaryValue (OSCTXT* pctxt, 
   ASN1T_ETSIQC_MonetaryValue* pSrcValue, ASN1T_ETSIQC_MonetaryValue*
    pDstValue);

EXTERN void asn1Init_ETSIQC_MonetaryValue (ASN1T_ETSIQC_MonetaryValue* pvalue);

EXTERN void asn1Free_ETSIQC_MonetaryValue (OSCTXT *pctxt, 
   ASN1T_ETSIQC_MonetaryValue* pvalue);

/**************************************************************/
/*                                                            */
/*  QcEuLimitValue                                            */
/*                                                            */
/**************************************************************/
/*
esi4-qcStatement-2 QC-STATEMENT ::= { SYNTAX QcEuLimitValue IDENTIFIED
BY id-etsi-qcs-QcLimitValue }
 This statement is a statement by the issuer which impose a
 limitation on the value of transaction for which this certificate
 can be used to the specified amount (MonetaryValue), according to
 the Directive 1999/93/EC of the European Parliament and of the
 Council of 13 December 1999 on a Community framework for
 electronic signatures, as implemented in the law of the country
 specified in the issuer field of this certificate.

QcEuLimitValue ::= MonetaryValue
*/
#define TV_ETSIQC_QcEuLimitValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_ETSIQC_QcEuLimitValue;

typedef ASN1T_ETSIQC_MonetaryValue ASN1T_ETSIQC_QcEuLimitValue;

class EXTERN ASN1C_ETSIQC_QcEuLimitValue :
   public ASN1C_ETSIQC_MonetaryValue
{
protected:
public:
   ASN1C_ETSIQC_QcEuLimitValue (ASN1T_ETSIQC_QcEuLimitValue& data);
   ASN1C_ETSIQC_QcEuLimitValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_ETSIQC_QcEuLimitValue& data);
   ASN1C_ETSIQC_QcEuLimitValue (OSRTContext &context
      , ASN1T_ETSIQC_QcEuLimitValue& data);
   ASN1C_ETSIQC_QcEuLimitValue (ASN1C_ETSIQC_QcEuLimitValue& original);
   virtual ~ASN1C_ETSIQC_QcEuLimitValue () {}
   inline ASN1T_ETSIQC_QcEuLimitValue& getData () { return msgData; }
   inline const ASN1T_ETSIQC_QcEuLimitValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "QcEuLimitValue");
   int toStream (const char* name = "QcEuLimitValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_ETSIQC_QcEuLimitValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_ETSIQC_QcEuLimitValue& getCopy (ASN1T_ETSIQC_QcEuLimitValue* pDstData = 0);
   ASN1T_ETSIQC_QcEuLimitValue* newCopy ();

   inline ASN1C_ETSIQC_QcEuLimitValue& operator= (ASN1C_ETSIQC_QcEuLimitValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_ETSIQC_QcEuLimitValue (OSCTXT* pctxt,
   ASN1T_ETSIQC_QcEuLimitValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_ETSIQC_QcEuLimitValue (OSCTXT* pctxt, 
   ASN1T_ETSIQC_QcEuLimitValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_ETSIQC_QcEuLimitValue 
   (const char* name, const ASN1T_ETSIQC_QcEuLimitValue* pvalue);

EXTERN int asn1PrtToStrm_ETSIQC_QcEuLimitValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_ETSIQC_QcEuLimitValue* pvalue);

EXTERN ASN1T_ETSIQC_QcEuLimitValue* 
   new_ASN1T_ETSIQC_QcEuLimitValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_ETSIQC_QcEuLimitValue (const char* name, 
   ASN1T_ETSIQC_QcEuLimitValue* pValue, 
   ASN1T_ETSIQC_QcEuLimitValue* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_ETSIQC_QcEuLimitValue (OSCTXT* pctxt, 
   ASN1T_ETSIQC_QcEuLimitValue* pSrcValue, ASN1T_ETSIQC_QcEuLimitValue*
    pDstValue);

EXTERN void asn1Init_ETSIQC_QcEuLimitValue (ASN1T_ETSIQC_QcEuLimitValue* pvalue);

EXTERN void asn1Free_ETSIQC_QcEuLimitValue (OSCTXT *pctxt, 
   ASN1T_ETSIQC_QcEuLimitValue* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ETSIQC_id_etsi_qcs;
extern EXTERN ASN1OBJID ETSIQC_id_etsi_qcs_QcCompliance;
extern EXTERN ASN1OBJID ETSIQC_id_etsi_qcs_QcLimitValue;
extern EXTERN ASN1OBJID ETSIQC_id_etsi_qcs_QcRetentionPeriod;

#endif
