/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "Explicit.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_EXP_Version (const char* name, ASN1T_EXP_Version* pValue, 
   ASN1T_EXP_Version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_Version::Equals (ASN1T_EXP_Version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_Version ("Version", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_CertificateSerialNumber (const char* name, 
   ASN1T_EXP_CertificateSerialNumber* pValue, 
   ASN1T_EXP_CertificateSerialNumber* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_CertificateSerialNumber::Equals (ASN1T_EXP_CertificateSerialNumber* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_CertificateSerialNumber ("CertificateSerialNumber", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_AttributeType (const char* name, 
   ASN1T_EXP_AttributeType* pValue, ASN1T_EXP_AttributeType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_AttributeType::Equals (ASN1T_EXP_AttributeType* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_AttributeType ("AttributeType", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_AttributeValue (const char* name, 
   ASN1T_EXP_AttributeValue* pValue, ASN1T_EXP_AttributeValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOpenType (name,
   pValue->numocts,
   pValue->data,
   pCmpValue->numocts,
   pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_AttributeValue::Equals (ASN1T_EXP_AttributeValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_AttributeValue ("AttributeValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_UniqueIdentifier (const char* name, 
   ASN1T_EXP_UniqueIdentifier* pValue, ASN1T_EXP_UniqueIdentifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpBitStr (name, pValue->numbits, pValue->data, 
      pCmpValue->numbits, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_UniqueIdentifier::Equals (ASN1T_EXP_UniqueIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_UniqueIdentifier ("UniqueIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X121Address (const char* name, 
   ASN1T_EXP_X121Address* pValue, ASN1T_EXP_X121Address* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_X121Address::Equals (ASN1T_EXP_X121Address* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X121Address ("X121Address", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_NetworkAddress (const char* name, 
   ASN1T_EXP_NetworkAddress* pValue, ASN1T_EXP_NetworkAddress* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_EXP_X121Address (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_NetworkAddress::Equals (ASN1T_EXP_NetworkAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_NetworkAddress ("NetworkAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TerminalIdentifier (const char* name, 
   ASN1T_EXP_TerminalIdentifier* pValue, 
   ASN1T_EXP_TerminalIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_TerminalIdentifier::Equals (ASN1T_EXP_TerminalIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TerminalIdentifier ("TerminalIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_OrganizationName (const char* name, 
   ASN1T_EXP_OrganizationName* pValue, ASN1T_EXP_OrganizationName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_OrganizationName::Equals (ASN1T_EXP_OrganizationName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_OrganizationName ("OrganizationName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_NumericUserIdentifier (const char* name, 
   ASN1T_EXP_NumericUserIdentifier* pValue, 
   ASN1T_EXP_NumericUserIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_NumericUserIdentifier::Equals (ASN1T_EXP_NumericUserIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_NumericUserIdentifier ("NumericUserIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_OrganizationalUnitName (const char* name, 
   ASN1T_EXP_OrganizationalUnitName* pValue, 
   ASN1T_EXP_OrganizationalUnitName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_OrganizationalUnitName::Equals (ASN1T_EXP_OrganizationalUnitName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_OrganizationalUnitName ("OrganizationalUnitName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_CommonName (const char* name, 
   ASN1T_EXP_CommonName* pValue, ASN1T_EXP_CommonName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_CommonName::Equals (ASN1T_EXP_CommonName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_CommonName ("CommonName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TeletexCommonName (const char* name, 
   ASN1T_EXP_TeletexCommonName* pValue, 
   ASN1T_EXP_TeletexCommonName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_TeletexCommonName::Equals (ASN1T_EXP_TeletexCommonName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TeletexCommonName ("TeletexCommonName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TeletexOrganizationName (const char* name, 
   ASN1T_EXP_TeletexOrganizationName* pValue, 
   ASN1T_EXP_TeletexOrganizationName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_TeletexOrganizationName::Equals (ASN1T_EXP_TeletexOrganizationName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TeletexOrganizationName ("TeletexOrganizationName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TeletexOrganizationalUnitName (const char* name, 
   ASN1T_EXP_TeletexOrganizationalUnitName* pValue, 
   ASN1T_EXP_TeletexOrganizationalUnitName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_TeletexOrganizationalUnitName::Equals (ASN1T_EXP_TeletexOrganizationalUnitName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TeletexOrganizationalUnitName ("TeletexOrganizationalUnitName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PDSName (const char* name, ASN1T_EXP_PDSName* pValue, 
   ASN1T_EXP_PDSName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_PDSName::Equals (ASN1T_EXP_PDSName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PDSName ("PDSName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PDSParameter (const char* name, 
   ASN1T_EXP_PDSParameter* pValue, ASN1T_EXP_PDSParameter* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".printable_string", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.printable_stringPresent,
   pCmpValue->m.printable_stringPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.printable_stringPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->printable_string, pCmpValue->printable_string, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".teletex_string", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.teletex_stringPresent,
   pCmpValue->m.teletex_stringPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.teletex_stringPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->teletex_string, pCmpValue->teletex_string, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_PDSParameter::Equals (ASN1T_EXP_PDSParameter* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PDSParameter ("PDSParameter", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PhysicalDeliveryOfficeName (const char* name, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pValue, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_PhysicalDeliveryOfficeName::Equals (ASN1T_EXP_PhysicalDeliveryOfficeName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PhysicalDeliveryOfficeName ("PhysicalDeliveryOfficeName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PhysicalDeliveryOfficeNumber (const char* name, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pValue, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_PhysicalDeliveryOfficeNumber::Equals (ASN1T_EXP_PhysicalDeliveryOfficeNumber* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PhysicalDeliveryOfficeNumber ("PhysicalDeliveryOfficeNumber", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_ExtensionORAddressComponents (const char* name, 
   ASN1T_EXP_ExtensionORAddressComponents* pValue, 
   ASN1T_EXP_ExtensionORAddressComponents* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_ExtensionORAddressComponents::Equals (ASN1T_EXP_ExtensionORAddressComponents* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_ExtensionORAddressComponents ("ExtensionORAddressComponents", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PhysicalDeliveryPersonalName (const char* name, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pValue, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_PhysicalDeliveryPersonalName::Equals (ASN1T_EXP_PhysicalDeliveryPersonalName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PhysicalDeliveryPersonalName ("PhysicalDeliveryPersonalName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PhysicalDeliveryOrganizationName (const char* name, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pValue, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_PhysicalDeliveryOrganizationName::Equals (ASN1T_EXP_PhysicalDeliveryOrganizationName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PhysicalDeliveryOrganizationName ("PhysicalDeliveryOrganizationName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_ExtensionPhysicalDeliveryAddressComponents (
   const char* name, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pValue, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::Equals (ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_ExtensionPhysicalDeliveryAddressComponents ("ExtensionPhysicalDeliveryAddressComponents", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_StreetAddress (const char* name, 
   ASN1T_EXP_StreetAddress* pValue, ASN1T_EXP_StreetAddress* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_StreetAddress::Equals (ASN1T_EXP_StreetAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_StreetAddress ("StreetAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PostOfficeBoxAddress (const char* name, 
   ASN1T_EXP_PostOfficeBoxAddress* pValue, 
   ASN1T_EXP_PostOfficeBoxAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_PostOfficeBoxAddress::Equals (ASN1T_EXP_PostOfficeBoxAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PostOfficeBoxAddress ("PostOfficeBoxAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PosteRestanteAddress (const char* name, 
   ASN1T_EXP_PosteRestanteAddress* pValue, 
   ASN1T_EXP_PosteRestanteAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_PosteRestanteAddress::Equals (ASN1T_EXP_PosteRestanteAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PosteRestanteAddress ("PosteRestanteAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_UniquePostalName (const char* name, 
   ASN1T_EXP_UniquePostalName* pValue, ASN1T_EXP_UniquePostalName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_UniquePostalName::Equals (ASN1T_EXP_UniquePostalName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_UniquePostalName ("UniquePostalName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_LocalPostalAttributes (const char* name, 
   ASN1T_EXP_LocalPostalAttributes* pValue, 
   ASN1T_EXP_LocalPostalAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_PDSParameter (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_LocalPostalAttributes::Equals (ASN1T_EXP_LocalPostalAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_LocalPostalAttributes ("LocalPostalAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TerminalType (const char* name, 
   ASN1T_EXP_TerminalType* pValue, ASN1T_EXP_TerminalType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpUSInt (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_TerminalType::Equals (ASN1T_EXP_TerminalType* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TerminalType ("TerminalType", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520countryName (const char* name, 
   ASN1T_EXP_X520countryName* pValue, ASN1T_EXP_X520countryName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_X520countryName::Equals (ASN1T_EXP_X520countryName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520countryName ("X520countryName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520SerialNumber (const char* name, 
   ASN1T_EXP_X520SerialNumber* pValue, ASN1T_EXP_X520SerialNumber* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_X520SerialNumber::Equals (ASN1T_EXP_X520SerialNumber* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520SerialNumber ("X520SerialNumber", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_DomainComponent (const char* name, 
   ASN1T_EXP_DomainComponent* pValue, ASN1T_EXP_DomainComponent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_DomainComponent::Equals (ASN1T_EXP_DomainComponent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_DomainComponent ("DomainComponent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_EmailAddress (const char* name, 
   ASN1T_EXP_EmailAddress* pValue, ASN1T_EXP_EmailAddress* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_EXP_EmailAddress::Equals (ASN1T_EXP_EmailAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_EmailAddress ("EmailAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_AlgorithmIdentifier (const char* name, 
   ASN1T_EXP_AlgorithmIdentifier* pValue, 
   ASN1T_EXP_AlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".algorithm", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->algorithm, (ASN1OBJID*)&pCmpValue->algorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".parameters", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.parametersPresent,
   pCmpValue->m.parametersPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.parametersPresent) 
   {
      if ( !rtCmpOpenType (namebuf,
      pValue->parameters.numocts,
      pValue->parameters.data,
      pCmpValue->parameters.numocts,
      pCmpValue->parameters.data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_AlgorithmIdentifier::Equals (ASN1T_EXP_AlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_AlgorithmIdentifier ("AlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_AttributeTypeAndValue (const char* name, 
   ASN1T_EXP_AttributeTypeAndValue* pValue, 
   ASN1T_EXP_AttributeTypeAndValue* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".type", 0, 0, 0);
   if (! asn1Compare_EXP_AttributeType (namebuf, &pValue->type, &pCmpValue->type, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".value", 0, 0, 0);
   if (! asn1Compare_EXP_AttributeValue (namebuf, &pValue->value, &pCmpValue->value, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_AttributeTypeAndValue::Equals (ASN1T_EXP_AttributeTypeAndValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_AttributeTypeAndValue ("AttributeTypeAndValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_RelativeDistinguishedName (const char* name, 
   ASN1T_EXP_RelativeDistinguishedName* pValue, 
   ASN1T_EXP_RelativeDistinguishedName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_AttributeTypeAndValue* pdata;
   ASN1T_EXP_AttributeTypeAndValue* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_AttributeTypeAndValue*) pnode->data;
      pCmpdata = (ASN1T_EXP_AttributeTypeAndValue*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_AttributeTypeAndValue (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_RelativeDistinguishedName::Equals (ASN1T_EXP_RelativeDistinguishedName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_RelativeDistinguishedName ("RelativeDistinguishedName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_RDNSequence (const char* name, 
   ASN1T_EXP_RDNSequence* pValue, ASN1T_EXP_RDNSequence* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_RelativeDistinguishedName* pdata;
   ASN1T_EXP_RelativeDistinguishedName* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_RelativeDistinguishedName*) pnode->data;
      pCmpdata = (ASN1T_EXP_RelativeDistinguishedName*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_RelativeDistinguishedName (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_RDNSequence::Equals (ASN1T_EXP_RDNSequence* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_RDNSequence ("RDNSequence", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_Name (const char* name, ASN1T_EXP_Name* pValue, 
   ASN1T_EXP_Name* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* rdnSequence */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.rdnSequence", 0, 0, 0);
         if (! asn1Compare_EXP_RDNSequence (namebuf, pValue->u.rdnSequence, pCmpValue->u.rdnSequence, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_Name::Equals (ASN1T_EXP_Name* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_Name ("Name", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_Time (const char* name, ASN1T_EXP_Time* pValue, 
   ASN1T_EXP_Time* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utcTime */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utcTime", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.utcTime, pCmpValue->u.utcTime, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* generalTime */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.generalTime", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.generalTime, pCmpValue->u.generalTime, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_Time::Equals (ASN1T_EXP_Time* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_Time ("Time", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_Validity (const char* name, ASN1T_EXP_Validity* pValue, 
   ASN1T_EXP_Validity* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".notBefore", 0, 0, 0);
   if (! asn1Compare_EXP_Time (namebuf, &pValue->notBefore, &pCmpValue->notBefore, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".notAfter", 0, 0, 0);
   if (! asn1Compare_EXP_Time (namebuf, &pValue->notAfter, &pCmpValue->notAfter, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_Validity::Equals (ASN1T_EXP_Validity* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_Validity ("Validity", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_SubjectPublicKeyInfo (const char* name, 
   ASN1T_EXP_SubjectPublicKeyInfo* pValue, 
   ASN1T_EXP_SubjectPublicKeyInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".algorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->algorithm, &pCmpValue->algorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".subjectPublicKey", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->subjectPublicKey.numbits, 
      pValue->subjectPublicKey.data, pCmpValue->subjectPublicKey.numbits, 
      pCmpValue->subjectPublicKey.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_SubjectPublicKeyInfo::Equals (ASN1T_EXP_SubjectPublicKeyInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_SubjectPublicKeyInfo ("SubjectPublicKeyInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_Extension (const char* name, 
   ASN1T_EXP_Extension* pValue, ASN1T_EXP_Extension* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".extnID", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->extnID, (ASN1OBJID*)&pCmpValue->extnID, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".critical", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->critical, pCmpValue->critical, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".extnValue", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->extnValue.numocts, 
      pValue->extnValue.data, pCmpValue->extnValue.numocts, 
      pCmpValue->extnValue.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_Extension::Equals (ASN1T_EXP_Extension* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_Extension ("Extension", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_Extensions (const char* name, 
   ASN1T_EXP_Extensions* pValue, ASN1T_EXP_Extensions* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_Extension* pdata;
   ASN1T_EXP_Extension* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Extension*) pnode->data;
      pCmpdata = (ASN1T_EXP_Extension*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Extension (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_Extensions::Equals (ASN1T_EXP_Extensions* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_Extensions ("Extensions", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TBSCertificate (const char* name, 
   ASN1T_EXP_TBSCertificate* pValue, ASN1T_EXP_TBSCertificate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_EXP_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".serialNumber", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->serialNumber, &pCmpValue->serialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signature_, &pCmpValue->signature_, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuer", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->issuer, &pCmpValue->issuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".validity", 0, 0, 0);
   if (! asn1Compare_EXP_Validity (namebuf, &pValue->validity, &pCmpValue->validity, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".subject", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->subject, &pCmpValue->subject, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".subjectPublicKeyInfo", 0, 0, 0);
   if (! asn1Compare_EXP_SubjectPublicKeyInfo (namebuf, &pValue->subjectPublicKeyInfo, &pCmpValue->subjectPublicKeyInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerUniqueID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.issuerUniqueIDPresent,
   pCmpValue->m.issuerUniqueIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.issuerUniqueIDPresent) 
   {
      if (! asn1Compare_EXP_UniqueIdentifier (namebuf, &pValue->issuerUniqueID, &pCmpValue->issuerUniqueID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".subjectUniqueID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.subjectUniqueIDPresent,
   pCmpValue->m.subjectUniqueIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.subjectUniqueIDPresent) 
   {
      if (! asn1Compare_EXP_UniqueIdentifier (namebuf, &pValue->subjectUniqueID, &pCmpValue->subjectUniqueID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".extensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.extensionsPresent,
   pCmpValue->m.extensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.extensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->extensions, &pCmpValue->extensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_TBSCertificate::Equals (ASN1T_EXP_TBSCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TBSCertificate ("TBSCertificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_Certificate (const char* name, 
   ASN1T_EXP_Certificate* pValue, ASN1T_EXP_Certificate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".tbsCertificate", 0, 0, 0);
   if (! asn1Compare_EXP_TBSCertificate (namebuf, &pValue->tbsCertificate, &pCmpValue->tbsCertificate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signatureAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signatureAlgorithm, &pCmpValue->signatureAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->signature_.numbits, 
      pValue->signature_.data, pCmpValue->signature_.numbits, 
      pCmpValue->signature_.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_Certificate::Equals (ASN1T_EXP_Certificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_Certificate ("Certificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP__SetOfEXP_AttributeValue (const char* name, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pValue, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_AttributeValue* pdata;
   ASN1T_EXP_AttributeValue* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_AttributeValue*) pnode->data;
      pCmpdata = (ASN1T_EXP_AttributeValue*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_AttributeValue (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP__SetOfEXP_AttributeValue::Equals (ASN1T_EXP__SetOfEXP_AttributeValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP__SetOfEXP_AttributeValue ("_SetOfEXP_AttributeValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_Attribute (const char* name, 
   ASN1T_EXP_Attribute* pValue, ASN1T_EXP_Attribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".type", 0, 0, 0);
   if (! asn1Compare_EXP_AttributeType (namebuf, &pValue->type, &pCmpValue->type, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".values", 0, 0, 0);
   if (! asn1Compare_EXP__SetOfEXP_AttributeValue (namebuf, &pValue->values, &pCmpValue->values, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_Attribute::Equals (ASN1T_EXP_Attribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_Attribute ("Attribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TBSCertList_revokedCertificates_element (
   const char* name, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pValue, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".userCertificate", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->userCertificate, &pCmpValue->userCertificate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".revocationDate", 0, 0, 0);
   if (! asn1Compare_EXP_Time (namebuf, &pValue->revocationDate, &pCmpValue->revocationDate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".crlEntryExtensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlEntryExtensionsPresent,
   pCmpValue->m.crlEntryExtensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlEntryExtensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->crlEntryExtensions, &pCmpValue->crlEntryExtensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_TBSCertList_revokedCertificates_element::Equals (ASN1T_EXP_TBSCertList_revokedCertificates_element* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TBSCertList_revokedCertificates_element ("TBSCertList_revokedCertificates_element", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
   const char* name, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pValue, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pdata;
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_TBSCertList_revokedCertificates_element*) pnode->data;
      pCmpdata = (ASN1T_EXP_TBSCertList_revokedCertificates_element*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_TBSCertList_revokedCertificates_element (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::Equals (ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element ("_SeqOfEXP_TBSCertList_revokedCertificates_element", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TBSCertList (const char* name, 
   ASN1T_EXP_TBSCertList* pValue, ASN1T_EXP_TBSCertList* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.versionPresent,
   pCmpValue->m.versionPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.versionPresent) 
   {
      if (! asn1Compare_EXP_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signature_, &pCmpValue->signature_, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuer", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->issuer, &pCmpValue->issuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".thisUpdate", 0, 0, 0);
   if (! asn1Compare_EXP_Time (namebuf, &pValue->thisUpdate, &pCmpValue->thisUpdate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".nextUpdate", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.nextUpdatePresent,
   pCmpValue->m.nextUpdatePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.nextUpdatePresent) 
   {
      if (! asn1Compare_EXP_Time (namebuf, &pValue->nextUpdate, &pCmpValue->nextUpdate, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".revokedCertificates", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.revokedCertificatesPresent,
   pCmpValue->m.revokedCertificatesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.revokedCertificatesPresent) 
   {
      if (! asn1Compare_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (namebuf, &pValue->revokedCertificates, &pCmpValue->revokedCertificates, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".crlExtensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlExtensionsPresent,
   pCmpValue->m.crlExtensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlExtensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->crlExtensions, &pCmpValue->crlExtensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_TBSCertList::Equals (ASN1T_EXP_TBSCertList* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TBSCertList ("TBSCertList", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_CertificateList (const char* name, 
   ASN1T_EXP_CertificateList* pValue, ASN1T_EXP_CertificateList* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".tbsCertList", 0, 0, 0);
   if (! asn1Compare_EXP_TBSCertList (namebuf, &pValue->tbsCertList, &pCmpValue->tbsCertList, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signatureAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signatureAlgorithm, &pCmpValue->signatureAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->signature_.numbits, 
      pValue->signature_.data, pCmpValue->signature_.numbits, 
      pCmpValue->signature_.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_CertificateList::Equals (ASN1T_EXP_CertificateList* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_CertificateList ("CertificateList", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_CountryName (const char* name, 
   ASN1T_EXP_CountryName* pValue, ASN1T_EXP_CountryName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* x121-dcc-code */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.x121_dcc_code", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.x121_dcc_code, pCmpValue->u.x121_dcc_code, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* iso-3166-alpha2-code */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.iso_3166_alpha2_code", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.iso_3166_alpha2_code, pCmpValue->u.iso_3166_alpha2_code, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_CountryName::Equals (ASN1T_EXP_CountryName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_CountryName ("CountryName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_AdministrationDomainName (const char* name, 
   ASN1T_EXP_AdministrationDomainName* pValue, 
   ASN1T_EXP_AdministrationDomainName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* numeric */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.numeric", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.numeric, pCmpValue->u.numeric, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printable */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printable", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printable, pCmpValue->u.printable, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_AdministrationDomainName::Equals (ASN1T_EXP_AdministrationDomainName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_AdministrationDomainName ("AdministrationDomainName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PrivateDomainName (const char* name, 
   ASN1T_EXP_PrivateDomainName* pValue, 
   ASN1T_EXP_PrivateDomainName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* numeric */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.numeric", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.numeric, pCmpValue->u.numeric, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printable */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printable", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printable, pCmpValue->u.printable, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_PrivateDomainName::Equals (ASN1T_EXP_PrivateDomainName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PrivateDomainName ("PrivateDomainName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PersonalName (const char* name, 
   ASN1T_EXP_PersonalName* pValue, ASN1T_EXP_PersonalName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".surname", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->surname, pCmpValue->surname, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".given_name", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.given_namePresent,
   pCmpValue->m.given_namePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.given_namePresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->given_name, pCmpValue->given_name, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".initials", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.initialsPresent,
   pCmpValue->m.initialsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.initialsPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->initials, pCmpValue->initials, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".generation_qualifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.generation_qualifierPresent,
   pCmpValue->m.generation_qualifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.generation_qualifierPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->generation_qualifier, pCmpValue->generation_qualifier, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_PersonalName::Equals (ASN1T_EXP_PersonalName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PersonalName ("PersonalName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_OrganizationalUnitNames (const char* name, 
   ASN1T_EXP_OrganizationalUnitNames* pValue, 
   ASN1T_EXP_OrganizationalUnitNames* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_OrganizationalUnitName* pdata;
   ASN1T_EXP_OrganizationalUnitName* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_OrganizationalUnitName*) pnode->data;
      pCmpdata = (ASN1T_EXP_OrganizationalUnitName*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_OrganizationalUnitName (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_OrganizationalUnitNames::Equals (ASN1T_EXP_OrganizationalUnitNames* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_OrganizationalUnitNames ("OrganizationalUnitNames", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_BuiltInStandardAttributes (const char* name, 
   ASN1T_EXP_BuiltInStandardAttributes* pValue, 
   ASN1T_EXP_BuiltInStandardAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".country_name", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.country_namePresent,
   pCmpValue->m.country_namePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.country_namePresent) 
   {
      if (! asn1Compare_EXP_CountryName (namebuf, &pValue->country_name, &pCmpValue->country_name, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".administration_domain_name", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.administration_domain_namePresent,
   pCmpValue->m.administration_domain_namePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.administration_domain_namePresent) 
   {
      if (! asn1Compare_EXP_AdministrationDomainName (namebuf, &pValue->administration_domain_name, &pCmpValue->administration_domain_name, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".network_address", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.network_addressPresent,
   pCmpValue->m.network_addressPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.network_addressPresent) 
   {
      if (! asn1Compare_EXP_NetworkAddress (namebuf, &pValue->network_address, &pCmpValue->network_address, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".terminal_identifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.terminal_identifierPresent,
   pCmpValue->m.terminal_identifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.terminal_identifierPresent) 
   {
      if (! asn1Compare_EXP_TerminalIdentifier (namebuf, &pValue->terminal_identifier, &pCmpValue->terminal_identifier, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".private_domain_name", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.private_domain_namePresent,
   pCmpValue->m.private_domain_namePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.private_domain_namePresent) 
   {
      if (! asn1Compare_EXP_PrivateDomainName (namebuf, &pValue->private_domain_name, &pCmpValue->private_domain_name, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".organization_name", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.organization_namePresent,
   pCmpValue->m.organization_namePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.organization_namePresent) 
   {
      if (! asn1Compare_EXP_OrganizationName (namebuf, &pValue->organization_name, &pCmpValue->organization_name, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".numeric_user_identifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.numeric_user_identifierPresent,
   pCmpValue->m.numeric_user_identifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.numeric_user_identifierPresent) 
   {
      if (! asn1Compare_EXP_NumericUserIdentifier (namebuf, &pValue->numeric_user_identifier, &pCmpValue->numeric_user_identifier, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".personal_name", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.personal_namePresent,
   pCmpValue->m.personal_namePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.personal_namePresent) 
   {
      if (! asn1Compare_EXP_PersonalName (namebuf, &pValue->personal_name, &pCmpValue->personal_name, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".organizational_unit_names", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.organizational_unit_namesPresent,
   pCmpValue->m.organizational_unit_namesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.organizational_unit_namesPresent) 
   {
      if (! asn1Compare_EXP_OrganizationalUnitNames (namebuf, &pValue->organizational_unit_names, &pCmpValue->organizational_unit_names, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_BuiltInStandardAttributes::Equals (ASN1T_EXP_BuiltInStandardAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_BuiltInStandardAttributes ("BuiltInStandardAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_BuiltInDomainDefinedAttribute (const char* name, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pValue, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".type", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->type, pCmpValue->type, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".value", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->value, pCmpValue->value, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_BuiltInDomainDefinedAttribute::Equals (ASN1T_EXP_BuiltInDomainDefinedAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_BuiltInDomainDefinedAttribute ("BuiltInDomainDefinedAttribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_BuiltInDomainDefinedAttributes (const char* name, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pValue, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pdata;
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_BuiltInDomainDefinedAttribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_BuiltInDomainDefinedAttribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_BuiltInDomainDefinedAttribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_BuiltInDomainDefinedAttributes::Equals (ASN1T_EXP_BuiltInDomainDefinedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_BuiltInDomainDefinedAttributes ("BuiltInDomainDefinedAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_ExtensionAttribute (const char* name, 
   ASN1T_EXP_ExtensionAttribute* pValue, 
   ASN1T_EXP_ExtensionAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".extension_attribute_type", 0, 0, 0);
   if ( !rtCmpUSInt (namebuf, pValue->extension_attribute_type, pCmpValue->extension_attribute_type, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".extension_attribute_value", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->extension_attribute_value.numocts,
   pValue->extension_attribute_value.data,
   pCmpValue->extension_attribute_value.numocts,
   pCmpValue->extension_attribute_value.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_ExtensionAttribute::Equals (ASN1T_EXP_ExtensionAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_ExtensionAttribute ("ExtensionAttribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_ExtensionAttributes (const char* name, 
   ASN1T_EXP_ExtensionAttributes* pValue, 
   ASN1T_EXP_ExtensionAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_ExtensionAttribute* pdata;
   ASN1T_EXP_ExtensionAttribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_ExtensionAttribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_ExtensionAttribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_ExtensionAttribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_ExtensionAttributes::Equals (ASN1T_EXP_ExtensionAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_ExtensionAttributes ("ExtensionAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_ORAddress (const char* name, 
   ASN1T_EXP_ORAddress* pValue, ASN1T_EXP_ORAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".built_in_standard_attributes", 0, 0, 0);
   if (! asn1Compare_EXP_BuiltInStandardAttributes (namebuf, &pValue->built_in_standard_attributes, &pCmpValue->built_in_standard_attributes, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".built_in_domain_defined_attributes", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.built_in_domain_defined_attributesPresent,
   pCmpValue->m.built_in_domain_defined_attributesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.built_in_domain_defined_attributesPresent) 
   {
      if (! asn1Compare_EXP_BuiltInDomainDefinedAttributes (namebuf, &pValue->built_in_domain_defined_attributes, &pCmpValue->built_in_domain_defined_attributes, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".extension_attributes", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.extension_attributesPresent,
   pCmpValue->m.extension_attributesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.extension_attributesPresent) 
   {
      if (! asn1Compare_EXP_ExtensionAttributes (namebuf, &pValue->extension_attributes, &pCmpValue->extension_attributes, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_ORAddress::Equals (ASN1T_EXP_ORAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_ORAddress ("ORAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TeletexPersonalName (const char* name, 
   ASN1T_EXP_TeletexPersonalName* pValue, 
   ASN1T_EXP_TeletexPersonalName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".surname", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->surname, pCmpValue->surname, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".given_name", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.given_namePresent,
   pCmpValue->m.given_namePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.given_namePresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->given_name, pCmpValue->given_name, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".initials", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.initialsPresent,
   pCmpValue->m.initialsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.initialsPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->initials, pCmpValue->initials, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".generation_qualifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.generation_qualifierPresent,
   pCmpValue->m.generation_qualifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.generation_qualifierPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->generation_qualifier, pCmpValue->generation_qualifier, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_TeletexPersonalName::Equals (ASN1T_EXP_TeletexPersonalName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TeletexPersonalName ("TeletexPersonalName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TeletexOrganizationalUnitNames (const char* name, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pValue, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_TeletexOrganizationalUnitName* pdata;
   ASN1T_EXP_TeletexOrganizationalUnitName* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_TeletexOrganizationalUnitName*) pnode->data;
      pCmpdata = (ASN1T_EXP_TeletexOrganizationalUnitName*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_TeletexOrganizationalUnitName (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_TeletexOrganizationalUnitNames::Equals (ASN1T_EXP_TeletexOrganizationalUnitNames* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TeletexOrganizationalUnitNames ("TeletexOrganizationalUnitNames", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PhysicalDeliveryCountryName (const char* name, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pValue, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* x121-dcc-code */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.x121_dcc_code", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.x121_dcc_code, pCmpValue->u.x121_dcc_code, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* iso-3166-alpha2-code */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.iso_3166_alpha2_code", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.iso_3166_alpha2_code, pCmpValue->u.iso_3166_alpha2_code, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_PhysicalDeliveryCountryName::Equals (ASN1T_EXP_PhysicalDeliveryCountryName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PhysicalDeliveryCountryName ("PhysicalDeliveryCountryName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PostalCode (const char* name, 
   ASN1T_EXP_PostalCode* pValue, ASN1T_EXP_PostalCode* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* numeric-code */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.numeric_code", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.numeric_code, pCmpValue->u.numeric_code, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printable-code */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printable_code", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printable_code, pCmpValue->u.printable_code, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_PostalCode::Equals (ASN1T_EXP_PostalCode* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PostalCode ("PostalCode", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_UnformattedPostalAddress_printable_address (
   const char* name, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pValue, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   const char** pdata;
   const char** pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (const char**) pnode->data;
      pCmpdata = (const char**) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpCharStr (namebuf, *pdata, *pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_UnformattedPostalAddress_printable_address::Equals (ASN1T_EXP_UnformattedPostalAddress_printable_address* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_UnformattedPostalAddress_printable_address ("UnformattedPostalAddress_printable_address", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_UnformattedPostalAddress (const char* name, 
   ASN1T_EXP_UnformattedPostalAddress* pValue, 
   ASN1T_EXP_UnformattedPostalAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".printable_address", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.printable_addressPresent,
   pCmpValue->m.printable_addressPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.printable_addressPresent) 
   {
      if (! asn1Compare_EXP_UnformattedPostalAddress_printable_address (namebuf, &pValue->printable_address, &pCmpValue->printable_address, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".teletex_string", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.teletex_stringPresent,
   pCmpValue->m.teletex_stringPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.teletex_stringPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->teletex_string, pCmpValue->teletex_string, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_UnformattedPostalAddress::Equals (ASN1T_EXP_UnformattedPostalAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_UnformattedPostalAddress ("UnformattedPostalAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_ExtendedNetworkAddress_e163_4_address (
   const char* name, ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pValue, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".number", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->number, pCmpValue->number, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".sub_address", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.sub_addressPresent,
   pCmpValue->m.sub_addressPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.sub_addressPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->sub_address, pCmpValue->sub_address, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::Equals (ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_ExtendedNetworkAddress_e163_4_address ("ExtendedNetworkAddress_e163_4_address", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PresentationAddress_nAddresses (const char* name, 
   ASN1T_EXP_PresentationAddress_nAddresses* pValue, 
   ASN1T_EXP_PresentationAddress_nAddresses* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1TDynOctStr* pdata;
   ASN1TDynOctStr* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1TDynOctStr*) pnode->data;
      pCmpdata = (ASN1TDynOctStr*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpOctStr (namebuf, pdata->numocts, pdata->data, 
         pCmpdata->numocts, pCmpdata->data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_PresentationAddress_nAddresses::Equals (ASN1T_EXP_PresentationAddress_nAddresses* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PresentationAddress_nAddresses ("PresentationAddress_nAddresses", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_PresentationAddress (const char* name, 
   ASN1T_EXP_PresentationAddress* pValue, 
   ASN1T_EXP_PresentationAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".pSelector", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.pSelectorPresent,
   pCmpValue->m.pSelectorPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.pSelectorPresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->pSelector.numocts, 
         pValue->pSelector.data, pCmpValue->pSelector.numocts, 
         pCmpValue->pSelector.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".sSelector", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.sSelectorPresent,
   pCmpValue->m.sSelectorPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.sSelectorPresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->sSelector.numocts, 
         pValue->sSelector.data, pCmpValue->sSelector.numocts, 
         pCmpValue->sSelector.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".tSelector", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.tSelectorPresent,
   pCmpValue->m.tSelectorPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.tSelectorPresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->tSelector.numocts, 
         pValue->tSelector.data, pCmpValue->tSelector.numocts, 
         pCmpValue->tSelector.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".nAddresses", 0, 0, 0);
   if (! asn1Compare_EXP_PresentationAddress_nAddresses (namebuf, &pValue->nAddresses, &pCmpValue->nAddresses, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_PresentationAddress::Equals (ASN1T_EXP_PresentationAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_PresentationAddress ("PresentationAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_ExtendedNetworkAddress (const char* name, 
   ASN1T_EXP_ExtendedNetworkAddress* pValue, 
   ASN1T_EXP_ExtendedNetworkAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* e163-4-address */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.e163_4_address", 0, 0, 0);
         if (! asn1Compare_EXP_ExtendedNetworkAddress_e163_4_address (namebuf, pValue->u.e163_4_address, pCmpValue->u.e163_4_address, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* psap-address */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.psap_address", 0, 0, 0);
         if (! asn1Compare_EXP_PresentationAddress (namebuf, pValue->u.psap_address, pCmpValue->u.psap_address, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_ExtendedNetworkAddress::Equals (ASN1T_EXP_ExtendedNetworkAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_ExtendedNetworkAddress ("ExtendedNetworkAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TeletexDomainDefinedAttribute (const char* name, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pValue, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".type", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->type, pCmpValue->type, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".value", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->value, pCmpValue->value, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_EXP_TeletexDomainDefinedAttribute::Equals (ASN1T_EXP_TeletexDomainDefinedAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TeletexDomainDefinedAttribute ("TeletexDomainDefinedAttribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_TeletexDomainDefinedAttributes (const char* name, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pValue, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_TeletexDomainDefinedAttribute* pdata;
   ASN1T_EXP_TeletexDomainDefinedAttribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_TeletexDomainDefinedAttribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_TeletexDomainDefinedAttribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_TeletexDomainDefinedAttribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_EXP_TeletexDomainDefinedAttributes::Equals (ASN1T_EXP_TeletexDomainDefinedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_TeletexDomainDefinedAttributes ("TeletexDomainDefinedAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_DirectoryString (const char* name, 
   ASN1T_EXP_DirectoryString* pValue, ASN1T_EXP_DirectoryString* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_DirectoryString::Equals (ASN1T_EXP_DirectoryString* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_DirectoryString ("DirectoryString", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520name (const char* name, ASN1T_EXP_X520name* pValue, 
   ASN1T_EXP_X520name* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520name::Equals (ASN1T_EXP_X520name* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520name ("X520name", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520CommonName (const char* name, 
   ASN1T_EXP_X520CommonName* pValue, ASN1T_EXP_X520CommonName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520CommonName::Equals (ASN1T_EXP_X520CommonName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520CommonName ("X520CommonName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520LocalityName (const char* name, 
   ASN1T_EXP_X520LocalityName* pValue, ASN1T_EXP_X520LocalityName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520LocalityName::Equals (ASN1T_EXP_X520LocalityName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520LocalityName ("X520LocalityName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520StateOrProvinceName (const char* name, 
   ASN1T_EXP_X520StateOrProvinceName* pValue, 
   ASN1T_EXP_X520StateOrProvinceName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520StateOrProvinceName::Equals (ASN1T_EXP_X520StateOrProvinceName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520StateOrProvinceName ("X520StateOrProvinceName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520OrganizationName (const char* name, 
   ASN1T_EXP_X520OrganizationName* pValue, 
   ASN1T_EXP_X520OrganizationName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520OrganizationName::Equals (ASN1T_EXP_X520OrganizationName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520OrganizationName ("X520OrganizationName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520OrganizationalUnitName (const char* name, 
   ASN1T_EXP_X520OrganizationalUnitName* pValue, 
   ASN1T_EXP_X520OrganizationalUnitName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520OrganizationalUnitName::Equals (ASN1T_EXP_X520OrganizationalUnitName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520OrganizationalUnitName ("X520OrganizationalUnitName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520Title (const char* name, 
   ASN1T_EXP_X520Title* pValue, ASN1T_EXP_X520Title* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520Title::Equals (ASN1T_EXP_X520Title* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520Title ("X520Title", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520CountrySerialUTF8liUcubeName (const char* name, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pValue, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520CountrySerialUTF8liUcubeName::Equals (ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520CountrySerialUTF8liUcubeName ("X520CountrySerialUTF8liUcubeName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_EXP_X520Pseudonym (const char* name, 
   ASN1T_EXP_X520Pseudonym* pValue, ASN1T_EXP_X520Pseudonym* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* printableString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.printableString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.printableString, pCmpValue->u.printableString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* teletexString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.teletexString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.teletexString, pCmpValue->u.teletexString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* universalString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.universalString", 0, 0, 0);
         if ( !rtCmp32BitCharStr (namebuf, pValue->u.universalString, pCmpValue->u.universalString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_EXP_X520Pseudonym::Equals (ASN1T_EXP_X520Pseudonym* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_EXP_X520Pseudonym ("X520Pseudonym", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

