/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef PKIXTSP_H
#define PKIXTSP_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CBitStr.h"
#include "Explicit.h"
#include "Implicit.h"
#include "cms.h"
#include "cmp.h"

/**
 * Header file for ASN.1 module pkixtsp
 */
/**************************************************************/
/*                                                            */
/*  BIGINTEGER                                                */
/*                                                            */
/**************************************************************/
/*
 2.4.1

BIGINTEGER ::= INTEGER
*/
#define TV_TSP_BIGINTEGER	(TM_UNIV|TM_PRIM|2)

typedef const char* ASN1T_TSP_BIGINTEGER;

class EXTERN ASN1C_TSP_BIGINTEGER :
public ASN1CType
{
protected:
   ASN1T_TSP_BIGINTEGER& msgData;
public:
   ASN1C_TSP_BIGINTEGER (ASN1T_TSP_BIGINTEGER& data);
   ASN1C_TSP_BIGINTEGER (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_BIGINTEGER& data);
   ASN1C_TSP_BIGINTEGER (OSRTContext &context, ASN1T_TSP_BIGINTEGER& data);
   ASN1C_TSP_BIGINTEGER (ASN1C_TSP_BIGINTEGER& original);
   virtual ~ASN1C_TSP_BIGINTEGER () {}
   inline ASN1T_TSP_BIGINTEGER& getData () { return msgData; }
   inline const ASN1T_TSP_BIGINTEGER& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BIGINTEGER");
   int toStream (const char* name = "BIGINTEGER");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_BIGINTEGER* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_BIGINTEGER& getCopy (ASN1T_TSP_BIGINTEGER* pDstData = 0);
   ASN1T_TSP_BIGINTEGER* newCopy ();

   inline ASN1C_TSP_BIGINTEGER& operator= (ASN1C_TSP_BIGINTEGER& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_BIGINTEGER (OSCTXT* pctxt,
   ASN1T_TSP_BIGINTEGER *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_BIGINTEGER (OSCTXT* pctxt, ASN1T_TSP_BIGINTEGER* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_BIGINTEGER 
   (const char* name, const ASN1T_TSP_BIGINTEGER* pvalue);

EXTERN int asn1PrtToStrm_TSP_BIGINTEGER (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_BIGINTEGER* pvalue);

EXTERN ASN1T_TSP_BIGINTEGER* new_ASN1T_TSP_BIGINTEGER (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_BIGINTEGER (const char* name, 
   ASN1T_TSP_BIGINTEGER* pValue, ASN1T_TSP_BIGINTEGER* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_BIGINTEGER (OSCTXT* pctxt, ASN1T_TSP_BIGINTEGER* pSrcValue, 
   ASN1T_TSP_BIGINTEGER* pDstValue);

/**************************************************************/
/*                                                            */
/*  TSAPolicyId                                               */
/*                                                            */
/**************************************************************/
/*
TSAPolicyId ::= OBJECT IDENTIFIER
*/
#define TV_TSP_TSAPolicyId	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_TSP_TSAPolicyId;

class EXTERN ASN1C_TSP_TSAPolicyId :
public ASN1CType
{
protected:
   ASN1T_TSP_TSAPolicyId& msgData;
public:
   ASN1C_TSP_TSAPolicyId (ASN1T_TSP_TSAPolicyId& data);
   ASN1C_TSP_TSAPolicyId (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_TSAPolicyId& data);
   ASN1C_TSP_TSAPolicyId (OSRTContext &context, ASN1T_TSP_TSAPolicyId& data);
   ASN1C_TSP_TSAPolicyId (ASN1C_TSP_TSAPolicyId& original);
   virtual ~ASN1C_TSP_TSAPolicyId () {}
   inline ASN1T_TSP_TSAPolicyId& getData () { return msgData; }
   inline const ASN1T_TSP_TSAPolicyId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TSAPolicyId");
   int toStream (const char* name = "TSAPolicyId");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_TSAPolicyId* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_TSAPolicyId& getCopy (ASN1T_TSP_TSAPolicyId* pDstData = 0);
   ASN1T_TSP_TSAPolicyId* newCopy ();

   inline ASN1C_TSP_TSAPolicyId& operator= (ASN1C_TSP_TSAPolicyId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_TSAPolicyId (OSCTXT* pctxt,
   ASN1T_TSP_TSAPolicyId *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_TSAPolicyId (OSCTXT* pctxt, 
   ASN1T_TSP_TSAPolicyId* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_TSAPolicyId 
   (const char* name, const ASN1T_TSP_TSAPolicyId* pvalue);

EXTERN int asn1PrtToStrm_TSP_TSAPolicyId (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TSAPolicyId* pvalue);

EXTERN ASN1T_TSP_TSAPolicyId* new_ASN1T_TSP_TSAPolicyId (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_TSAPolicyId (const char* name, 
   ASN1T_TSP_TSAPolicyId* pValue, ASN1T_TSP_TSAPolicyId* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_TSAPolicyId (OSCTXT* pctxt, 
   ASN1T_TSP_TSAPolicyId* pSrcValue, ASN1T_TSP_TSAPolicyId* pDstValue);

EXTERN void asn1Init_TSP_TSAPolicyId (ASN1T_TSP_TSAPolicyId* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIStatus                                                 */
/*                                                            */
/**************************************************************/
/*
PKIStatus ::= INTEGER { granted(0), grantedWithMods(1), rejection(2), waiting(3), revocationWarning(4), revocationNotification(5) }
*/
#define TV_TSP_PKIStatus	(TM_UNIV|TM_PRIM|2)

struct EXTERN TSP_PKIStatus {
   enum Root {
      granted = 0,
      grantedWithMods = 1,
      rejection = 2,
      waiting = 3,
      revocationWarning = 4,
      revocationNotification = 5
   } ;
} ;

typedef OSINT32 ASN1T_TSP_PKIStatus;

class EXTERN ASN1C_TSP_PKIStatus :
public ASN1CType
{
protected:
   ASN1T_TSP_PKIStatus& msgData;
public:
   ASN1C_TSP_PKIStatus (ASN1T_TSP_PKIStatus& data);
   ASN1C_TSP_PKIStatus (OSRTMessageBufferIF& msgBuf, ASN1T_TSP_PKIStatus& data);
   ASN1C_TSP_PKIStatus (OSRTContext &context, ASN1T_TSP_PKIStatus& data);
   virtual ~ASN1C_TSP_PKIStatus () {}
   inline ASN1T_TSP_PKIStatus& getData () { return msgData; }
   inline const ASN1T_TSP_PKIStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIStatus");
   int toStream (const char* name = "PKIStatus");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_PKIStatus* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_TSP_PKIStatus (OSCTXT* pctxt,
   ASN1T_TSP_PKIStatus *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_PKIStatus (OSCTXT* pctxt, ASN1T_TSP_PKIStatus* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_PKIStatus 
   (const char* name, const ASN1T_TSP_PKIStatus* pvalue);

EXTERN int asn1PrtToStrm_TSP_PKIStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_PKIStatus* pvalue);

EXTERN ASN1T_TSP_PKIStatus* new_ASN1T_TSP_PKIStatus (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_PKIStatus (const char* name, 
   ASN1T_TSP_PKIStatus* pValue, ASN1T_TSP_PKIStatus* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  PKIFailureInfo                                            */
/*                                                            */
/**************************************************************/
/*
 When the TimeStampToken is not present
 failInfo indicates the reason why the
 time-stamp request was rejected and
 may be one of the following values.

PKIFailureInfo ::= BIT STRING  { badAlg(0), badRequest(2), badDataFormat(5), timeNotAvailable(14), unacceptedPolicy(15), unacceptedExtension(16), addInfoNotAvailable(17), systemFailure(25) }
*/
#define TV_TSP_PKIFailureInfo	(TM_UNIV|TM_PRIM|3)

class EXTERN ASN1C_TSP_PKIFailureInfo;

struct EXTERN ASN1T_TSP_PKIFailureInfo {
   OSUINT32 numbits;
   OSOCTET data[4];
   // ctors
   ASN1T_TSP_PKIFailureInfo () : numbits(0) {}
   ASN1T_TSP_PKIFailureInfo (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits (_numbits) {
      OSCRTLMEMCPY (data, _data, sizeof(data));
   }
   ASN1T_TSP_PKIFailureInfo (ASN1C_TSP_PKIFailureInfo& srcData);
} ;

class EXTERN ASN1C_TSP_PKIFailureInfo :
public ASN1CBitStr
{
protected:
   ASN1T_TSP_PKIFailureInfo& msgData;
public:
   // named bits
   enum { badAlg = 0, badRequest = 2, badDataFormat = 5, timeNotAvailable = 14, unacceptedPolicy = 15, unacceptedExtension = 16, addInfoNotAvailable = 17, systemFailure = 25 };

   ASN1C_TSP_PKIFailureInfo (ASN1T_TSP_PKIFailureInfo& data);
   ASN1C_TSP_PKIFailureInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_PKIFailureInfo& data);
   ASN1C_TSP_PKIFailureInfo (OSRTContext &context
      , ASN1T_TSP_PKIFailureInfo& data);
   ASN1C_TSP_PKIFailureInfo (ASN1C_TSP_PKIFailureInfo& original);
   virtual ~ASN1C_TSP_PKIFailureInfo () {}
   inline ASN1T_TSP_PKIFailureInfo& getData () { return msgData; }
   inline const ASN1T_TSP_PKIFailureInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIFailureInfo");
   int toStream (const char* name = "PKIFailureInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_PKIFailureInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_PKIFailureInfo& getCopy (ASN1T_TSP_PKIFailureInfo* pDstData = 0);
   ASN1T_TSP_PKIFailureInfo* newCopy ();

   ASN1C_TSP_PKIFailureInfo& operator= (ASN1C_TSP_PKIFailureInfo& srcData);
} ;

EXTERN int asn1E_TSP_PKIFailureInfo (OSCTXT* pctxt,
   ASN1T_TSP_PKIFailureInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_PKIFailureInfo (OSCTXT* pctxt, 
   ASN1T_TSP_PKIFailureInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_PKIFailureInfo 
   (const char* name, const ASN1T_TSP_PKIFailureInfo* pvalue);

EXTERN int asn1PrtToStrm_TSP_PKIFailureInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_PKIFailureInfo* pvalue);

EXTERN ASN1T_TSP_PKIFailureInfo* 
   new_ASN1T_TSP_PKIFailureInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_PKIFailureInfo (const char* name, 
   ASN1T_TSP_PKIFailureInfo* pValue, ASN1T_TSP_PKIFailureInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_PKIFailureInfo (OSCTXT* pctxt, 
   ASN1T_TSP_PKIFailureInfo* pSrcValue, ASN1T_TSP_PKIFailureInfo* pDstValue);

EXTERN void asn1Init_TSP_PKIFailureInfo (ASN1T_TSP_PKIFailureInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeStampToken                                            */
/*                                                            */
/**************************************************************/
/*
TimeStampToken ::= ContentInfo
*/
#define TV_TSP_TimeStampToken	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_TSP_TimeStampToken;

typedef ASN1T_CMS_ContentInfo ASN1T_TSP_TimeStampToken;

class EXTERN ASN1C_TSP_TimeStampToken :
   public ASN1C_CMS_ContentInfo
{
protected:
public:
   ASN1C_TSP_TimeStampToken (ASN1T_TSP_TimeStampToken& data);
   ASN1C_TSP_TimeStampToken (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_TimeStampToken& data);
   ASN1C_TSP_TimeStampToken (OSRTContext &context
      , ASN1T_TSP_TimeStampToken& data);
   ASN1C_TSP_TimeStampToken (ASN1C_TSP_TimeStampToken& original);
   virtual ~ASN1C_TSP_TimeStampToken () {}
   inline ASN1T_TSP_TimeStampToken& getData () { return msgData; }
   inline const ASN1T_TSP_TimeStampToken& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TimeStampToken");
   int toStream (const char* name = "TimeStampToken");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_TimeStampToken* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_TimeStampToken& getCopy (ASN1T_TSP_TimeStampToken* pDstData = 0);
   ASN1T_TSP_TimeStampToken* newCopy ();

   inline ASN1C_TSP_TimeStampToken& operator= (ASN1C_TSP_TimeStampToken& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_TimeStampToken (OSCTXT* pctxt,
   ASN1T_TSP_TimeStampToken *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_TimeStampToken (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampToken* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_TimeStampToken 
   (const char* name, const ASN1T_TSP_TimeStampToken* pvalue);

EXTERN int asn1PrtToStrm_TSP_TimeStampToken (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TimeStampToken* pvalue);

EXTERN ASN1T_TSP_TimeStampToken* 
   new_ASN1T_TSP_TimeStampToken (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_TimeStampToken (const char* name, 
   ASN1T_TSP_TimeStampToken* pValue, ASN1T_TSP_TimeStampToken* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_TimeStampToken (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampToken* pSrcValue, ASN1T_TSP_TimeStampToken* pDstValue);

EXTERN void asn1Init_TSP_TimeStampToken (ASN1T_TSP_TimeStampToken* pvalue);

EXTERN void asn1Free_TSP_TimeStampToken (OSCTXT *pctxt, 
   ASN1T_TSP_TimeStampToken* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeStampReq_version                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TimeStampReq'
*/
struct EXTERN TSP_TimeStampReq_version {
   enum Root {
      v1 = 1
   } ;
} ;

typedef OSINT32 ASN1T_TSP_TimeStampReq_version;

class EXTERN ASN1C_TSP_TimeStampReq_version :
public ASN1CType
{
protected:
   ASN1T_TSP_TimeStampReq_version& msgData;
public:
   ASN1C_TSP_TimeStampReq_version (ASN1T_TSP_TimeStampReq_version& data);
   ASN1C_TSP_TimeStampReq_version (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_TimeStampReq_version& data);
   ASN1C_TSP_TimeStampReq_version (OSRTContext &context
      , ASN1T_TSP_TimeStampReq_version& data);
   virtual ~ASN1C_TSP_TimeStampReq_version () {}
   inline ASN1T_TSP_TimeStampReq_version& getData () { return msgData; }
   inline const ASN1T_TSP_TimeStampReq_version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TimeStampReq_version");
   int toStream (const char* name = "TimeStampReq_version");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_TimeStampReq_version* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_TSP_TimeStampReq_version (OSCTXT* pctxt,
   ASN1T_TSP_TimeStampReq_version *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_TimeStampReq_version (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampReq_version* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_TimeStampReq_version 
   (const char* name, const ASN1T_TSP_TimeStampReq_version* pvalue);

EXTERN int asn1PrtToStrm_TSP_TimeStampReq_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TimeStampReq_version* pvalue);

EXTERN ASN1T_TSP_TimeStampReq_version* 
   new_ASN1T_TSP_TimeStampReq_version (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_TimeStampReq_version (const char* name, 
   ASN1T_TSP_TimeStampReq_version* pValue, 
   ASN1T_TSP_TimeStampReq_version* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  TSTInfo_version                                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TSTInfo'
*/
struct EXTERN TSP_TSTInfo_version {
   enum Root {
      v1 = 1
   } ;
} ;

typedef OSINT32 ASN1T_TSP_TSTInfo_version;

class EXTERN ASN1C_TSP_TSTInfo_version :
public ASN1CType
{
protected:
   ASN1T_TSP_TSTInfo_version& msgData;
public:
   ASN1C_TSP_TSTInfo_version (ASN1T_TSP_TSTInfo_version& data);
   ASN1C_TSP_TSTInfo_version (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_TSTInfo_version& data);
   ASN1C_TSP_TSTInfo_version (OSRTContext &context
      , ASN1T_TSP_TSTInfo_version& data);
   virtual ~ASN1C_TSP_TSTInfo_version () {}
   inline ASN1T_TSP_TSTInfo_version& getData () { return msgData; }
   inline const ASN1T_TSP_TSTInfo_version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TSTInfo_version");
   int toStream (const char* name = "TSTInfo_version");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_TSTInfo_version* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_TSP_TSTInfo_version (OSCTXT* pctxt,
   ASN1T_TSP_TSTInfo_version *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_TSTInfo_version (OSCTXT* pctxt, 
   ASN1T_TSP_TSTInfo_version* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_TSTInfo_version 
   (const char* name, const ASN1T_TSP_TSTInfo_version* pvalue);

EXTERN int asn1PrtToStrm_TSP_TSTInfo_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TSTInfo_version* pvalue);

EXTERN ASN1T_TSP_TSTInfo_version* 
   new_ASN1T_TSP_TSTInfo_version (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_TSTInfo_version (const char* name, 
   ASN1T_TSP_TSTInfo_version* pValue, ASN1T_TSP_TSTInfo_version* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  MessageImprint                                            */
/*                                                            */
/**************************************************************/
/*
MessageImprint ::= SEQUENCE {
   hashAlgorithm AlgorithmIdentifier,
   hashedMessage OCTET STRING
}
*/
#define TV_TSP_MessageImprint	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_TSP_MessageImprint;

struct EXTERN ASN1T_TSP_MessageImprint : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier hashAlgorithm;
   ASN1TDynOctStr hashedMessage;
   ASN1T_TSP_MessageImprint ();
   ASN1T_TSP_MessageImprint (ASN1C_TSP_MessageImprint& srcData);
   ~ASN1T_TSP_MessageImprint ();
} ;

class EXTERN ASN1C_TSP_MessageImprint :
public ASN1CType
{
protected:
   ASN1T_TSP_MessageImprint& msgData;
public:
   ASN1C_TSP_MessageImprint (ASN1T_TSP_MessageImprint& data);
   ASN1C_TSP_MessageImprint (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_MessageImprint& data);
   ASN1C_TSP_MessageImprint (OSRTContext &context
      , ASN1T_TSP_MessageImprint& data);
   ASN1C_TSP_MessageImprint (ASN1C_TSP_MessageImprint& original);
   virtual ~ASN1C_TSP_MessageImprint () {}
   inline ASN1T_TSP_MessageImprint& getData () { return msgData; }
   inline const ASN1T_TSP_MessageImprint& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "MessageImprint");
   int toStream (const char* name = "MessageImprint");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_MessageImprint* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_MessageImprint& getCopy (ASN1T_TSP_MessageImprint* pDstData = 0);
   ASN1T_TSP_MessageImprint* newCopy ();

   inline ASN1C_TSP_MessageImprint& operator= (ASN1C_TSP_MessageImprint& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_MessageImprint (OSCTXT* pctxt,
   ASN1T_TSP_MessageImprint *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_MessageImprint (OSCTXT* pctxt, 
   ASN1T_TSP_MessageImprint* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_MessageImprint 
   (const char* name, const ASN1T_TSP_MessageImprint* pvalue);

EXTERN int asn1PrtToStrm_TSP_MessageImprint (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_MessageImprint* pvalue);

EXTERN ASN1T_TSP_MessageImprint* 
   new_ASN1T_TSP_MessageImprint (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_MessageImprint (const char* name, 
   ASN1T_TSP_MessageImprint* pValue, ASN1T_TSP_MessageImprint* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_MessageImprint (OSCTXT* pctxt, 
   ASN1T_TSP_MessageImprint* pSrcValue, ASN1T_TSP_MessageImprint* pDstValue);

EXTERN void asn1Init_TSP_MessageImprint (ASN1T_TSP_MessageImprint* pvalue);

EXTERN void asn1Free_TSP_MessageImprint (OSCTXT *pctxt, 
   ASN1T_TSP_MessageImprint* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeStampReq                                              */
/*                                                            */
/**************************************************************/
/*
TimeStampReq ::= SEQUENCE {
   version INTEGER { v1(1) },
   messageImprint MessageImprint,
   reqPolicy TSAPolicyId OPTIONAL,
   nonce BIGINTEGER OPTIONAL,
   certReq BOOLEAN DEFAULT FALSE,
   extensions [0] Extensions OPTIONAL
}
*/
#define TV_TSP_TimeStampReq	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_TSP_TimeStampReq;

struct EXTERN ASN1T_TSP_TimeStampReq : public ASN1TPDU {
   struct {
      unsigned reqPolicyPresent : 1;
      unsigned noncePresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_TSP_TimeStampReq_version version;
   ASN1T_TSP_MessageImprint messageImprint;
   ASN1T_TSP_TSAPolicyId reqPolicy;
   ASN1T_TSP_BIGINTEGER nonce;
   OSBOOL certReq;
   ASN1T_EXP_Extensions extensions;
   ASN1T_TSP_TimeStampReq ();
   ASN1T_TSP_TimeStampReq (ASN1C_TSP_TimeStampReq& srcData);
   ~ASN1T_TSP_TimeStampReq ();
} ;

class EXTERN ASN1C_TSP_TimeStampReq :
public ASN1CType
{
protected:
   ASN1T_TSP_TimeStampReq& msgData;
public:
   ASN1C_TSP_TimeStampReq (ASN1T_TSP_TimeStampReq& data);
   ASN1C_TSP_TimeStampReq (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_TimeStampReq& data);
   ASN1C_TSP_TimeStampReq (OSRTContext &context, ASN1T_TSP_TimeStampReq& data);
   ASN1C_TSP_TimeStampReq (ASN1C_TSP_TimeStampReq& original);
   virtual ~ASN1C_TSP_TimeStampReq () {}
   inline ASN1T_TSP_TimeStampReq& getData () { return msgData; }
   inline const ASN1T_TSP_TimeStampReq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TimeStampReq");
   int toStream (const char* name = "TimeStampReq");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_TimeStampReq* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_TimeStampReq& getCopy (ASN1T_TSP_TimeStampReq* pDstData = 0);
   ASN1T_TSP_TimeStampReq* newCopy ();

   inline ASN1C_TSP_TimeStampReq& operator= (ASN1C_TSP_TimeStampReq& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_TimeStampReq (OSCTXT* pctxt,
   ASN1T_TSP_TimeStampReq *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_TimeStampReq (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampReq* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_TimeStampReq 
   (const char* name, const ASN1T_TSP_TimeStampReq* pvalue);

EXTERN int asn1PrtToStrm_TSP_TimeStampReq (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TimeStampReq* pvalue);

EXTERN ASN1T_TSP_TimeStampReq* new_ASN1T_TSP_TimeStampReq (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_TimeStampReq (const char* name, 
   ASN1T_TSP_TimeStampReq* pValue, ASN1T_TSP_TimeStampReq* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_TimeStampReq (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampReq* pSrcValue, ASN1T_TSP_TimeStampReq* pDstValue);

EXTERN void asn1Init_TSP_TimeStampReq (ASN1T_TSP_TimeStampReq* pvalue);

EXTERN void asn1Free_TSP_TimeStampReq (OSCTXT *pctxt, ASN1T_TSP_TimeStampReq* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIStatusInfo                                             */
/*                                                            */
/**************************************************************/
/*
 The status is based on the definition of status
 in section 3.2.3 of [RFC2510]

PKIStatusInfo ::= SEQUENCE {
   status PKIStatus,
   statusString PKIFreeText OPTIONAL,
   failInfo PKIFailureInfo OPTIONAL
}
*/
#define TV_TSP_PKIStatusInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_TSP_PKIStatusInfo;

struct EXTERN ASN1T_TSP_PKIStatusInfo : public ASN1TPDU {
   struct {
      unsigned statusStringPresent : 1;
      unsigned failInfoPresent : 1;
   } m;
   ASN1T_TSP_PKIStatus status;
   ASN1T_CMP_PKIFreeText statusString;
   ASN1T_TSP_PKIFailureInfo failInfo;
   ASN1T_TSP_PKIStatusInfo ();
   ASN1T_TSP_PKIStatusInfo (ASN1C_TSP_PKIStatusInfo& srcData);
   ~ASN1T_TSP_PKIStatusInfo ();
} ;

class EXTERN ASN1C_TSP_PKIStatusInfo :
public ASN1CType
{
protected:
   ASN1T_TSP_PKIStatusInfo& msgData;
public:
   ASN1C_TSP_PKIStatusInfo (ASN1T_TSP_PKIStatusInfo& data);
   ASN1C_TSP_PKIStatusInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_PKIStatusInfo& data);
   ASN1C_TSP_PKIStatusInfo (OSRTContext &context, ASN1T_TSP_PKIStatusInfo& data
      );
   ASN1C_TSP_PKIStatusInfo (ASN1C_TSP_PKIStatusInfo& original);
   virtual ~ASN1C_TSP_PKIStatusInfo () {}
   inline ASN1T_TSP_PKIStatusInfo& getData () { return msgData; }
   inline const ASN1T_TSP_PKIStatusInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIStatusInfo");
   int toStream (const char* name = "PKIStatusInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_PKIStatusInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_PKIStatusInfo& getCopy (ASN1T_TSP_PKIStatusInfo* pDstData = 0);
   ASN1T_TSP_PKIStatusInfo* newCopy ();

   inline ASN1C_TSP_PKIStatusInfo& operator= (ASN1C_TSP_PKIStatusInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_PKIStatusInfo (OSCTXT* pctxt,
   ASN1T_TSP_PKIStatusInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_PKIStatusInfo (OSCTXT* pctxt, 
   ASN1T_TSP_PKIStatusInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_PKIStatusInfo 
   (const char* name, const ASN1T_TSP_PKIStatusInfo* pvalue);

EXTERN int asn1PrtToStrm_TSP_PKIStatusInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_PKIStatusInfo* pvalue);

EXTERN ASN1T_TSP_PKIStatusInfo* new_ASN1T_TSP_PKIStatusInfo (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_TSP_PKIStatusInfo (const char* name, 
   ASN1T_TSP_PKIStatusInfo* pValue, ASN1T_TSP_PKIStatusInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_PKIStatusInfo (OSCTXT* pctxt, 
   ASN1T_TSP_PKIStatusInfo* pSrcValue, ASN1T_TSP_PKIStatusInfo* pDstValue);

EXTERN void asn1Init_TSP_PKIStatusInfo (ASN1T_TSP_PKIStatusInfo* pvalue);

EXTERN void asn1Free_TSP_PKIStatusInfo (OSCTXT *pctxt, 
   ASN1T_TSP_PKIStatusInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeStampResp                                             */
/*                                                            */
/**************************************************************/
/*
 2.4.2

TimeStampResp ::= SEQUENCE {
   status PKIStatusInfo,
   timeStampToken TimeStampToken OPTIONAL
}
*/
#define TV_TSP_TimeStampResp	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_TSP_TimeStampResp;

struct EXTERN ASN1T_TSP_TimeStampResp : public ASN1TPDU {
   struct {
      unsigned timeStampTokenPresent : 1;
   } m;
   ASN1T_TSP_PKIStatusInfo status;
   ASN1T_TSP_TimeStampToken timeStampToken;
   ASN1T_TSP_TimeStampResp ();
   ASN1T_TSP_TimeStampResp (ASN1C_TSP_TimeStampResp& srcData);
   ~ASN1T_TSP_TimeStampResp ();
} ;

class EXTERN ASN1C_TSP_TimeStampResp :
public ASN1CType
{
protected:
   ASN1T_TSP_TimeStampResp& msgData;
public:
   ASN1C_TSP_TimeStampResp (ASN1T_TSP_TimeStampResp& data);
   ASN1C_TSP_TimeStampResp (OSRTMessageBufferIF& msgBuf
      , ASN1T_TSP_TimeStampResp& data);
   ASN1C_TSP_TimeStampResp (OSRTContext &context, ASN1T_TSP_TimeStampResp& data
      );
   ASN1C_TSP_TimeStampResp (ASN1C_TSP_TimeStampResp& original);
   virtual ~ASN1C_TSP_TimeStampResp () {}
   inline ASN1T_TSP_TimeStampResp& getData () { return msgData; }
   inline const ASN1T_TSP_TimeStampResp& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TimeStampResp");
   int toStream (const char* name = "TimeStampResp");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_TimeStampResp* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_TimeStampResp& getCopy (ASN1T_TSP_TimeStampResp* pDstData = 0);
   ASN1T_TSP_TimeStampResp* newCopy ();

   inline ASN1C_TSP_TimeStampResp& operator= (ASN1C_TSP_TimeStampResp& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_TimeStampResp (OSCTXT* pctxt,
   ASN1T_TSP_TimeStampResp *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_TimeStampResp (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampResp* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_TimeStampResp 
   (const char* name, const ASN1T_TSP_TimeStampResp* pvalue);

EXTERN int asn1PrtToStrm_TSP_TimeStampResp (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TimeStampResp* pvalue);

EXTERN ASN1T_TSP_TimeStampResp* new_ASN1T_TSP_TimeStampResp (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_TSP_TimeStampResp (const char* name, 
   ASN1T_TSP_TimeStampResp* pValue, ASN1T_TSP_TimeStampResp* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_TimeStampResp (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampResp* pSrcValue, ASN1T_TSP_TimeStampResp* pDstValue);

EXTERN void asn1Init_TSP_TimeStampResp (ASN1T_TSP_TimeStampResp* pvalue);

EXTERN void asn1Free_TSP_TimeStampResp (OSCTXT *pctxt, 
   ASN1T_TSP_TimeStampResp* pvalue);

/**************************************************************/
/*                                                            */
/*  Accuracy                                                  */
/*                                                            */
/**************************************************************/
/*
Accuracy ::= SEQUENCE {
   seconds INTEGER OPTIONAL,
   millis [0] INTEGER (1..999) OPTIONAL,
   micros [1] INTEGER (1..999) OPTIONAL
}
*/
#define TV_TSP_Accuracy	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_TSP_Accuracy;

struct EXTERN ASN1T_TSP_Accuracy : public ASN1TPDU {
   struct {
      unsigned secondsPresent : 1;
      unsigned millisPresent : 1;
      unsigned microsPresent : 1;
   } m;
   OSINT32 seconds;
   OSUINT16 millis;
   OSUINT16 micros;
   ASN1T_TSP_Accuracy ();
   ASN1T_TSP_Accuracy (ASN1C_TSP_Accuracy& srcData);
} ;

class EXTERN ASN1C_TSP_Accuracy :
public ASN1CType
{
protected:
   ASN1T_TSP_Accuracy& msgData;
public:
   ASN1C_TSP_Accuracy (ASN1T_TSP_Accuracy& data);
   ASN1C_TSP_Accuracy (OSRTMessageBufferIF& msgBuf, ASN1T_TSP_Accuracy& data);
   ASN1C_TSP_Accuracy (OSRTContext &context, ASN1T_TSP_Accuracy& data);
   ASN1C_TSP_Accuracy (ASN1C_TSP_Accuracy& original);
   virtual ~ASN1C_TSP_Accuracy () {}
   inline ASN1T_TSP_Accuracy& getData () { return msgData; }
   inline const ASN1T_TSP_Accuracy& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Accuracy");
   int toStream (const char* name = "Accuracy");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_Accuracy* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_Accuracy& getCopy (ASN1T_TSP_Accuracy* pDstData = 0);
   ASN1T_TSP_Accuracy* newCopy ();

   inline ASN1C_TSP_Accuracy& operator= (ASN1C_TSP_Accuracy& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_Accuracy (OSCTXT* pctxt,
   ASN1T_TSP_Accuracy *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_Accuracy (OSCTXT* pctxt, ASN1T_TSP_Accuracy* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_Accuracy 
   (const char* name, const ASN1T_TSP_Accuracy* pvalue);

EXTERN int asn1PrtToStrm_TSP_Accuracy (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_Accuracy* pvalue);

EXTERN ASN1T_TSP_Accuracy* new_ASN1T_TSP_Accuracy (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_Accuracy (const char* name, ASN1T_TSP_Accuracy* pValue, 
   ASN1T_TSP_Accuracy* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_Accuracy (OSCTXT* pctxt, ASN1T_TSP_Accuracy* pSrcValue, 
   ASN1T_TSP_Accuracy* pDstValue);

EXTERN void asn1Init_TSP_Accuracy (ASN1T_TSP_Accuracy* pvalue);

/**************************************************************/
/*                                                            */
/*  TSTInfo                                                   */
/*                                                            */
/**************************************************************/
/*
 contentType is id-signedData as defined in [CMS]
 content is SignedData as defined in([CMS])
 eContentType within SignedData is id-ct-TSTInfo
 eContent within SignedData is TSTInfo

TSTInfo ::= SEQUENCE {
   version INTEGER { v1(1) },
   policy TSAPolicyId,
   messageImprint MessageImprint,
   serialNumber BIGINTEGER,
   genTime GeneralizedTime,
   accuracy Accuracy OPTIONAL,
   ordering BOOLEAN DEFAULT FALSE,
   nonce BIGINTEGER OPTIONAL,
   tsa [0] GeneralName OPTIONAL,
   extensions [1] Extensions OPTIONAL
}
*/
#define TV_TSP_TSTInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_TSP_TSTInfo;

struct EXTERN ASN1T_TSP_TSTInfo : public ASN1TPDU {
   struct {
      unsigned accuracyPresent : 1;
      unsigned noncePresent : 1;
      unsigned tsaPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_TSP_TSTInfo_version version;
   ASN1T_TSP_TSAPolicyId policy;
   ASN1T_TSP_MessageImprint messageImprint;
   ASN1T_TSP_BIGINTEGER serialNumber;
   const char* genTime;
   ASN1T_TSP_Accuracy accuracy;
   OSBOOL ordering;
   ASN1T_TSP_BIGINTEGER nonce;
   ASN1T_IMP_GeneralName tsa;
   ASN1T_EXP_Extensions extensions;
   ASN1T_TSP_TSTInfo ();
   ASN1T_TSP_TSTInfo (ASN1C_TSP_TSTInfo& srcData);
   ~ASN1T_TSP_TSTInfo ();
} ;

class EXTERN ASN1C_TSP_TSTInfo :
public ASN1CType
{
protected:
   ASN1T_TSP_TSTInfo& msgData;
public:
   ASN1C_TSP_TSTInfo (ASN1T_TSP_TSTInfo& data);
   ASN1C_TSP_TSTInfo (OSRTMessageBufferIF& msgBuf, ASN1T_TSP_TSTInfo& data);
   ASN1C_TSP_TSTInfo (OSRTContext &context, ASN1T_TSP_TSTInfo& data);
   ASN1C_TSP_TSTInfo (ASN1C_TSP_TSTInfo& original);
   virtual ~ASN1C_TSP_TSTInfo () {}
   inline ASN1T_TSP_TSTInfo& getData () { return msgData; }
   inline const ASN1T_TSP_TSTInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TSTInfo");
   int toStream (const char* name = "TSTInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_TSTInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_TSTInfo& getCopy (ASN1T_TSP_TSTInfo* pDstData = 0);
   ASN1T_TSP_TSTInfo* newCopy ();

   inline ASN1C_TSP_TSTInfo& operator= (ASN1C_TSP_TSTInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_TSTInfo (OSCTXT* pctxt,
   ASN1T_TSP_TSTInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_TSTInfo (OSCTXT* pctxt, ASN1T_TSP_TSTInfo* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_TSTInfo (const char* name, const ASN1T_TSP_TSTInfo* pvalue);

EXTERN int asn1PrtToStrm_TSP_TSTInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_TSTInfo* pvalue);

EXTERN ASN1T_TSP_TSTInfo* new_ASN1T_TSP_TSTInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_TSTInfo (const char* name, ASN1T_TSP_TSTInfo* pValue, 
   ASN1T_TSP_TSTInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_TSTInfo (OSCTXT* pctxt, ASN1T_TSP_TSTInfo* pSrcValue, 
   ASN1T_TSP_TSTInfo* pDstValue);

EXTERN void asn1Init_TSP_TSTInfo (ASN1T_TSP_TSTInfo* pvalue);

EXTERN void asn1Free_TSP_TSTInfo (OSCTXT *pctxt, ASN1T_TSP_TSTInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  ESYAReqEx                                                 */
/*                                                            */
/**************************************************************/
/*
ESYAReqEx ::= SEQUENCE {
   userid INTEGER,
   salt OCTET STRING,
   iterationCount INTEGER,
   iv OCTET STRING,
   encryptedMessageImprint OCTET STRING
}
*/
#define TV_TSP_ESYAReqEx	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_TSP_ESYAReqEx;

struct EXTERN ASN1T_TSP_ESYAReqEx : public ASN1TPDU {
   OSINT32 userid;
   ASN1TDynOctStr salt;
   OSINT32 iterationCount;
   ASN1TDynOctStr iv;
   ASN1TDynOctStr encryptedMessageImprint;
   ASN1T_TSP_ESYAReqEx ();
   ASN1T_TSP_ESYAReqEx (ASN1C_TSP_ESYAReqEx& srcData);
   ~ASN1T_TSP_ESYAReqEx ();
} ;

class EXTERN ASN1C_TSP_ESYAReqEx :
public ASN1CType
{
protected:
   ASN1T_TSP_ESYAReqEx& msgData;
public:
   ASN1C_TSP_ESYAReqEx (ASN1T_TSP_ESYAReqEx& data);
   ASN1C_TSP_ESYAReqEx (OSRTMessageBufferIF& msgBuf, ASN1T_TSP_ESYAReqEx& data);
   ASN1C_TSP_ESYAReqEx (OSRTContext &context, ASN1T_TSP_ESYAReqEx& data);
   ASN1C_TSP_ESYAReqEx (ASN1C_TSP_ESYAReqEx& original);
   virtual ~ASN1C_TSP_ESYAReqEx () {}
   inline ASN1T_TSP_ESYAReqEx& getData () { return msgData; }
   inline const ASN1T_TSP_ESYAReqEx& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ESYAReqEx");
   int toStream (const char* name = "ESYAReqEx");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_TSP_ESYAReqEx* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_TSP_ESYAReqEx& getCopy (ASN1T_TSP_ESYAReqEx* pDstData = 0);
   ASN1T_TSP_ESYAReqEx* newCopy ();

   inline ASN1C_TSP_ESYAReqEx& operator= (ASN1C_TSP_ESYAReqEx& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_TSP_ESYAReqEx (OSCTXT* pctxt,
   ASN1T_TSP_ESYAReqEx *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TSP_ESYAReqEx (OSCTXT* pctxt, ASN1T_TSP_ESYAReqEx* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_TSP_ESYAReqEx 
   (const char* name, const ASN1T_TSP_ESYAReqEx* pvalue);

EXTERN int asn1PrtToStrm_TSP_ESYAReqEx (OSCTXT *pctxt, 
   const char* name, const ASN1T_TSP_ESYAReqEx* pvalue);

EXTERN ASN1T_TSP_ESYAReqEx* new_ASN1T_TSP_ESYAReqEx (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_TSP_ESYAReqEx (const char* name, 
   ASN1T_TSP_ESYAReqEx* pValue, ASN1T_TSP_ESYAReqEx* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_TSP_ESYAReqEx (OSCTXT* pctxt, ASN1T_TSP_ESYAReqEx* pSrcValue, 
   ASN1T_TSP_ESYAReqEx* pDstValue);

EXTERN void asn1Init_TSP_ESYAReqEx (ASN1T_TSP_ESYAReqEx* pvalue);

EXTERN void asn1Free_TSP_ESYAReqEx (OSCTXT *pctxt, ASN1T_TSP_ESYAReqEx* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID TSP_id_ct_TSTInfo;
extern EXTERN ASN1OBJID TSP_id_esya_ts_reqex;
extern EXTERN ASN1OBJID TSP_id_ts_policy;

#endif
