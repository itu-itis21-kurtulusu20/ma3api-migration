/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "pkcs7.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_PKCS7_ContentType (const char* name, 
   ASN1T_PKCS7_ContentType* pValue, ASN1T_PKCS7_ContentType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_ContentType::Equals (ASN1T_PKCS7_ContentType* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_ContentType ("ContentType", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_Data (const char* name, ASN1T_PKCS7_Data* pValue, 
   ASN1T_PKCS7_Data* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_Data::Equals (ASN1T_PKCS7_Data* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_Data ("Data", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_ContentEncryptionAlgorithmIdentifier (
   const char* name, ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::Equals (ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_ContentEncryptionAlgorithmIdentifier ("ContentEncryptionAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_DigestAlgorithmIdentifier (const char* name, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pValue, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_DigestAlgorithmIdentifier::Equals (ASN1T_PKCS7_DigestAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_DigestAlgorithmIdentifier ("DigestAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_DigestEncryptionAlgorithmIdentifier (
   const char* name, ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::Equals (ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_DigestEncryptionAlgorithmIdentifier ("DigestEncryptionAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_KeyEncryptionAlgorithmIdentifier (const char* name, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::Equals (ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_KeyEncryptionAlgorithmIdentifier ("KeyEncryptionAlgorithmIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_Version (const char* name, 
   ASN1T_PKCS7_Version* pValue, ASN1T_PKCS7_Version* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_Version::Equals (ASN1T_PKCS7_Version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_Version ("Version", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_EncryptedDigest (const char* name, 
   ASN1T_PKCS7_EncryptedDigest* pValue, 
   ASN1T_PKCS7_EncryptedDigest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_EncryptedDigest::Equals (ASN1T_PKCS7_EncryptedDigest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_EncryptedDigest ("EncryptedDigest", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_Digest (const char* name, ASN1T_PKCS7_Digest* pValue, 
   ASN1T_PKCS7_Digest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_Digest::Equals (ASN1T_PKCS7_Digest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_Digest ("Digest", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_EncryptedContent (const char* name, 
   ASN1T_PKCS7_EncryptedContent* pValue, 
   ASN1T_PKCS7_EncryptedContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_EncryptedContent::Equals (ASN1T_PKCS7_EncryptedContent* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_EncryptedContent ("EncryptedContent", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_EncryptedKey (const char* name, 
   ASN1T_PKCS7_EncryptedKey* pValue, ASN1T_PKCS7_EncryptedKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_EncryptedKey::Equals (ASN1T_PKCS7_EncryptedKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_EncryptedKey ("EncryptedKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_Hash (const char* name, ASN1T_PKCS7_Hash* pValue, 
   ASN1T_PKCS7_Hash* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS7_Hash::Equals (ASN1T_PKCS7_Hash* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_Hash ("Hash", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_ContentInfo (const char* name, 
   ASN1T_PKCS7_ContentInfo* pValue, ASN1T_PKCS7_ContentInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".contentType", 0, 0, 0);
   if (! asn1Compare_PKCS7_ContentType (namebuf, &pValue->contentType, &pCmpValue->contentType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".content", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.contentPresent,
   pCmpValue->m.contentPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.contentPresent) 
   {
      if ( !rtCmpOpenType (namebuf,
      pValue->content.numocts,
      pValue->content.data,
      pCmpValue->content.numocts,
      pCmpValue->content.data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_ContentInfo::Equals (ASN1T_PKCS7_ContentInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_ContentInfo ("ContentInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_CertificateRevocationLists (const char* name, 
   ASN1T_PKCS7_CertificateRevocationLists* pValue, 
   ASN1T_PKCS7_CertificateRevocationLists* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_CertificateList* pdata;
   ASN1T_EXP_CertificateList* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_CertificateList*) pnode->data;
      pCmpdata = (ASN1T_EXP_CertificateList*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_CertificateList (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_CertificateRevocationLists::Equals (ASN1T_PKCS7_CertificateRevocationLists* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_CertificateRevocationLists ("CertificateRevocationLists", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_IssuerAndSerialNumber (const char* name, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pValue, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".issuer", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->issuer, &pCmpValue->issuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".serialNumber", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->serialNumber, &pCmpValue->serialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_IssuerAndSerialNumber::Equals (ASN1T_PKCS7_IssuerAndSerialNumber* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_IssuerAndSerialNumber ("IssuerAndSerialNumber", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_ExtendedCertificateOrCertificate (const char* name, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pValue, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* certificate */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.certificate", 0, 0, 0);
         if (! asn1Compare_EXP_Certificate (namebuf, pValue->u.certificate, pCmpValue->u.certificate, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_PKCS7_ExtendedCertificateOrCertificate::Equals (ASN1T_PKCS7_ExtendedCertificateOrCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_ExtendedCertificateOrCertificate ("ExtendedCertificateOrCertificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_ExtendedCertificatesAndCertificates (
   const char* name, ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pValue, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pdata;
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS7_ExtendedCertificateOrCertificate*) pnode->data;
      pCmpdata = (ASN1T_PKCS7_ExtendedCertificateOrCertificate*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS7_ExtendedCertificateOrCertificate (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_ExtendedCertificatesAndCertificates::Equals (ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_ExtendedCertificatesAndCertificates ("ExtendedCertificatesAndCertificates", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_DigestAlgorithmIdentifiers (const char* name, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pValue, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pdata;
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS7_DigestAlgorithmIdentifier*) pnode->data;
      pCmpdata = (ASN1T_PKCS7_DigestAlgorithmIdentifier*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS7_DigestAlgorithmIdentifier (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_DigestAlgorithmIdentifiers::Equals (ASN1T_PKCS7_DigestAlgorithmIdentifiers* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_DigestAlgorithmIdentifiers ("DigestAlgorithmIdentifiers", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_SignerInfo (const char* name, 
   ASN1T_PKCS7_SignerInfo* pValue, ASN1T_PKCS7_SignerInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_PKCS7_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerAndSerialNumber", 0, 0, 0);
   if (! asn1Compare_PKCS7_IssuerAndSerialNumber (namebuf, &pValue->issuerAndSerialNumber, &pCmpValue->issuerAndSerialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithm", 0, 0, 0);
   if (! asn1Compare_PKCS7_DigestAlgorithmIdentifier (namebuf, &pValue->digestAlgorithm, &pCmpValue->digestAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".authenticatedAttributes", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.authenticatedAttributesPresent,
   pCmpValue->m.authenticatedAttributesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.authenticatedAttributesPresent) 
   {
      if (! asn1Compare_PKCS10_Attributes (namebuf, &pValue->authenticatedAttributes, &pCmpValue->authenticatedAttributes, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".digestEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_PKCS7_DigestEncryptionAlgorithmIdentifier (namebuf, &pValue->digestEncryptionAlgorithm, &pCmpValue->digestEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedDigest", 0, 0, 0);
   if (! asn1Compare_PKCS7_EncryptedDigest (namebuf, &pValue->encryptedDigest, &pCmpValue->encryptedDigest, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".unauthenticatedAttributes", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.unauthenticatedAttributesPresent,
   pCmpValue->m.unauthenticatedAttributesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.unauthenticatedAttributesPresent) 
   {
      if (! asn1Compare_PKCS10_Attributes (namebuf, &pValue->unauthenticatedAttributes, &pCmpValue->unauthenticatedAttributes, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_SignerInfo::Equals (ASN1T_PKCS7_SignerInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_SignerInfo ("SignerInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_SignerInfos (const char* name, 
   ASN1T_PKCS7_SignerInfos* pValue, ASN1T_PKCS7_SignerInfos* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_PKCS7_SignerInfo* pdata;
   ASN1T_PKCS7_SignerInfo* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS7_SignerInfo*) pnode->data;
      pCmpdata = (ASN1T_PKCS7_SignerInfo*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS7_SignerInfo (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_SignerInfos::Equals (ASN1T_PKCS7_SignerInfos* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_SignerInfos ("SignerInfos", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_SignedData (const char* name, 
   ASN1T_PKCS7_SignedData* pValue, ASN1T_PKCS7_SignedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_PKCS7_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithms", 0, 0, 0);
   if (! asn1Compare_PKCS7_DigestAlgorithmIdentifiers (namebuf, &pValue->digestAlgorithms, &pCmpValue->digestAlgorithms, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".contentInfo", 0, 0, 0);
   if (! asn1Compare_PKCS7_ContentInfo (namebuf, &pValue->contentInfo, &pCmpValue->contentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certificates", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certificatesPresent,
   pCmpValue->m.certificatesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certificatesPresent) 
   {
      if (! asn1Compare_PKCS7_ExtendedCertificatesAndCertificates (namebuf, &pValue->certificates, &pCmpValue->certificates, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".crls", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlsPresent,
   pCmpValue->m.crlsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlsPresent) 
   {
      if (! asn1Compare_PKCS7_CertificateRevocationLists (namebuf, &pValue->crls, &pCmpValue->crls, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".signerInfos", 0, 0, 0);
   if (! asn1Compare_PKCS7_SignerInfos (namebuf, &pValue->signerInfos, &pCmpValue->signerInfos, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_SignedData::Equals (ASN1T_PKCS7_SignedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_SignedData ("SignedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_DigestInfo (const char* name, 
   ASN1T_PKCS7_DigestInfo* pValue, ASN1T_PKCS7_DigestInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithm", 0, 0, 0);
   if (! asn1Compare_PKCS7_DigestAlgorithmIdentifier (namebuf, &pValue->digestAlgorithm, &pCmpValue->digestAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digest", 0, 0, 0);
   if (! asn1Compare_PKCS7_Digest (namebuf, &pValue->digest, &pCmpValue->digest, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_DigestInfo::Equals (ASN1T_PKCS7_DigestInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_DigestInfo ("DigestInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_RecipientInfo (const char* name, 
   ASN1T_PKCS7_RecipientInfo* pValue, ASN1T_PKCS7_RecipientInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_PKCS7_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerAndSerialNumber", 0, 0, 0);
   if (! asn1Compare_PKCS7_IssuerAndSerialNumber (namebuf, &pValue->issuerAndSerialNumber, &pCmpValue->issuerAndSerialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".keyEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_PKCS7_KeyEncryptionAlgorithmIdentifier (namebuf, &pValue->keyEncryptionAlgorithm, &pCmpValue->keyEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedKey", 0, 0, 0);
   if (! asn1Compare_PKCS7_EncryptedKey (namebuf, &pValue->encryptedKey, &pCmpValue->encryptedKey, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_RecipientInfo::Equals (ASN1T_PKCS7_RecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_RecipientInfo ("RecipientInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_RecipientInfos (const char* name, 
   ASN1T_PKCS7_RecipientInfos* pValue, ASN1T_PKCS7_RecipientInfos* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_PKCS7_RecipientInfo* pdata;
   ASN1T_PKCS7_RecipientInfo* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS7_RecipientInfo*) pnode->data;
      pCmpdata = (ASN1T_PKCS7_RecipientInfo*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS7_RecipientInfo (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_RecipientInfos::Equals (ASN1T_PKCS7_RecipientInfos* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_RecipientInfos ("RecipientInfos", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_EncryptedContentInfo (const char* name, 
   ASN1T_PKCS7_EncryptedContentInfo* pValue, 
   ASN1T_PKCS7_EncryptedContentInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".contentType", 0, 0, 0);
   if (! asn1Compare_PKCS7_ContentType (namebuf, &pValue->contentType, &pCmpValue->contentType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".contentEncryptionAlgorithm", 0, 0, 0);
   if (! asn1Compare_PKCS7_ContentEncryptionAlgorithmIdentifier (namebuf, &pValue->contentEncryptionAlgorithm, &pCmpValue->contentEncryptionAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedContent", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.encryptedContentPresent,
   pCmpValue->m.encryptedContentPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.encryptedContentPresent) 
   {
      if (! asn1Compare_PKCS7_EncryptedContent (namebuf, &pValue->encryptedContent, &pCmpValue->encryptedContent, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_EncryptedContentInfo::Equals (ASN1T_PKCS7_EncryptedContentInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_EncryptedContentInfo ("EncryptedContentInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_EnvelopedData (const char* name, 
   ASN1T_PKCS7_EnvelopedData* pValue, ASN1T_PKCS7_EnvelopedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_PKCS7_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".recipientInfos", 0, 0, 0);
   if (! asn1Compare_PKCS7_RecipientInfos (namebuf, &pValue->recipientInfos, &pCmpValue->recipientInfos, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedContentInfo", 0, 0, 0);
   if (! asn1Compare_PKCS7_EncryptedContentInfo (namebuf, &pValue->encryptedContentInfo, &pCmpValue->encryptedContentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_EnvelopedData::Equals (ASN1T_PKCS7_EnvelopedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_EnvelopedData ("EnvelopedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_SignedAndEnvelopedData (const char* name, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pValue, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_PKCS7_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".recipientInfos", 0, 0, 0);
   if (! asn1Compare_PKCS7_RecipientInfos (namebuf, &pValue->recipientInfos, &pCmpValue->recipientInfos, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithms", 0, 0, 0);
   if (! asn1Compare_PKCS7_DigestAlgorithmIdentifiers (namebuf, &pValue->digestAlgorithms, &pCmpValue->digestAlgorithms, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".encryptedContentInfo", 0, 0, 0);
   if (! asn1Compare_PKCS7_EncryptedContentInfo (namebuf, &pValue->encryptedContentInfo, &pCmpValue->encryptedContentInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certificates", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certificatesPresent,
   pCmpValue->m.certificatesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certificatesPresent) 
   {
      if (! asn1Compare_PKCS7_ExtendedCertificatesAndCertificates (namebuf, &pValue->certificates, &pCmpValue->certificates, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".crls", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlsPresent,
   pCmpValue->m.crlsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlsPresent) 
   {
      if (! asn1Compare_PKCS7_CertificateRevocationLists (namebuf, &pValue->crls, &pCmpValue->crls, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".signerInfos", 0, 0, 0);
   if (! asn1Compare_PKCS7_SignerInfos (namebuf, &pValue->signerInfos, &pCmpValue->signerInfos, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_SignedAndEnvelopedData::Equals (ASN1T_PKCS7_SignedAndEnvelopedData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_SignedAndEnvelopedData ("SignedAndEnvelopedData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_IssuerSerial (const char* name, 
   ASN1T_PKCS7_IssuerSerial* pValue, ASN1T_PKCS7_IssuerSerial* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".issuer", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->issuer, &pCmpValue->issuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".serialNumber", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->serialNumber, &pCmpValue->serialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_IssuerSerial::Equals (ASN1T_PKCS7_IssuerSerial* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_IssuerSerial ("IssuerSerial", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_ESSCertID (const char* name, 
   ASN1T_PKCS7_ESSCertID* pValue, ASN1T_PKCS7_ESSCertID* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certHash", 0, 0, 0);
   if (! asn1Compare_PKCS7_Hash (namebuf, &pValue->certHash, &pCmpValue->certHash, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerSerial", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.issuerSerialPresent,
   pCmpValue->m.issuerSerialPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.issuerSerialPresent) 
   {
      if (! asn1Compare_PKCS7_IssuerSerial (namebuf, &pValue->issuerSerial, &pCmpValue->issuerSerial, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_ESSCertID::Equals (ASN1T_PKCS7_ESSCertID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_ESSCertID ("ESSCertID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7__SeqOfPKCS7_ESSCertID (const char* name, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pValue, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_PKCS7_ESSCertID* pdata;
   ASN1T_PKCS7_ESSCertID* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS7_ESSCertID*) pnode->data;
      pCmpdata = (ASN1T_PKCS7_ESSCertID*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS7_ESSCertID (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::Equals (ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7__SeqOfPKCS7_ESSCertID ("_SeqOfPKCS7_ESSCertID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7__SeqOfPKCS7_PolicyInformation (const char* name, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pValue, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_IMP_PolicyInformation* pdata;
   ASN1T_IMP_PolicyInformation* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_PolicyInformation*) pnode->data;
      pCmpdata = (ASN1T_IMP_PolicyInformation*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_PolicyInformation (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::Equals (ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7__SeqOfPKCS7_PolicyInformation ("_SeqOfPKCS7_PolicyInformation", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_SigningCertificate (const char* name, 
   ASN1T_PKCS7_SigningCertificate* pValue, 
   ASN1T_PKCS7_SigningCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certs", 0, 0, 0);
   if (! asn1Compare_PKCS7__SeqOfPKCS7_ESSCertID (namebuf, &pValue->certs, &pCmpValue->certs, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".policies", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.policiesPresent,
   pCmpValue->m.policiesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.policiesPresent) 
   {
      if (! asn1Compare_PKCS7__SeqOfPKCS7_PolicyInformation (namebuf, &pValue->policies, &pCmpValue->policies, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_SigningCertificate::Equals (ASN1T_PKCS7_SigningCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_SigningCertificate ("SigningCertificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_ESSCertIDv2 (const char* name, 
   ASN1T_PKCS7_ESSCertIDv2* pValue, ASN1T_PKCS7_ESSCertIDv2* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".hashAlgorithm", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.hashAlgorithmPresent,
   pCmpValue->m.hashAlgorithmPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.hashAlgorithmPresent) 
   {
      if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->hashAlgorithm, &pCmpValue->hashAlgorithm, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".certHash", 0, 0, 0);
   if (! asn1Compare_PKCS7_Hash (namebuf, &pValue->certHash, &pCmpValue->certHash, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerSerial", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.issuerSerialPresent,
   pCmpValue->m.issuerSerialPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.issuerSerialPresent) 
   {
      if (! asn1Compare_PKCS7_IssuerSerial (namebuf, &pValue->issuerSerial, &pCmpValue->issuerSerial, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_ESSCertIDv2::Equals (ASN1T_PKCS7_ESSCertIDv2* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_ESSCertIDv2 ("ESSCertIDv2", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7__SeqOfPKCS7_ESSCertIDv2 (const char* name, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pValue, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_PKCS7_ESSCertIDv2* pdata;
   ASN1T_PKCS7_ESSCertIDv2* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS7_ESSCertIDv2*) pnode->data;
      pCmpdata = (ASN1T_PKCS7_ESSCertIDv2*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS7_ESSCertIDv2 (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2::Equals (ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7__SeqOfPKCS7_ESSCertIDv2 ("_SeqOfPKCS7_ESSCertIDv2", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS7_SigningCertificateV2 (const char* name, 
   ASN1T_PKCS7_SigningCertificateV2* pValue, 
   ASN1T_PKCS7_SigningCertificateV2* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certs", 0, 0, 0);
   if (! asn1Compare_PKCS7__SeqOfPKCS7_ESSCertIDv2 (namebuf, &pValue->certs, &pCmpValue->certs, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".policies", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.policiesPresent,
   pCmpValue->m.policiesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.policiesPresent) 
   {
      if (! asn1Compare_PKCS7__SeqOfPKCS7_PolicyInformation (namebuf, &pValue->policies, &pCmpValue->policies, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS7_SigningCertificateV2::Equals (ASN1T_PKCS7_SigningCertificateV2* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS7_SigningCertificateV2 ("SigningCertificateV2", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

