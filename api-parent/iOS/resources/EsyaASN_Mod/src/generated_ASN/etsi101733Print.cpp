/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "etsi101733.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_ETSI101733_OtherHashValue 
   (const char* name, const ASN1T_ETSI101733_OtherHashValue* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_ETSI101733_OtherHashValue::Print (const char* name)
{
   asn1Print_ETSI101733_OtherHashValue (name, &msgData);
}

void asn1Print_ETSI101733_SignaturePolicyImplied_ 
   (const char* name, const void* pvalue)
{
   OS_UNUSED_ARG (pvalue);

   rtxPrintIndent();
   rtxPrintNull (name);
}

void ASN1C_ETSI101733_SignaturePolicyImplied::Print (const char* name)
{
   asn1Print_ETSI101733_SignaturePolicyImplied (name);
}

void asn1Print_ETSI101733_SigPolicyId 
   (const char* name, const ASN1T_ETSI101733_SigPolicyId* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_ETSI101733_SigPolicyId::Print (const char* name)
{
   asn1Print_ETSI101733_SigPolicyId (name, &msgData);
}

void asn1Print_ETSI101733_OtherHashAlgAndValue 
   (const char* name, const ASN1T_ETSI101733_OtherHashAlgAndValue* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("hashAlgorithm", &pvalue->hashAlgorithm
      );

   asn1Print_ETSI101733_OtherHashValue ("hashValue", &pvalue->hashValue);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OtherHashAlgAndValue::Print (const char* name)
{
   asn1Print_ETSI101733_OtherHashAlgAndValue (name, &msgData);
}

void asn1Print_ETSI101733_SigPolicyHash 
   (const char* name, const ASN1T_ETSI101733_SigPolicyHash* pvalue)
{
   asn1Print_ETSI101733_OtherHashAlgAndValue (name, pvalue);
}

void ASN1C_ETSI101733_SigPolicyHash::Print (const char* name)
{
   asn1Print_ETSI101733_SigPolicyHash (name, &msgData);
}

void asn1Print_ETSI101733_SPuri 
   (const char* name, const ASN1T_ETSI101733_SPuri pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_ETSI101733_SPuri::Print (const char* name)
{
   asn1Print_ETSI101733_SPuri (name, msgData);
}

void asn1Print_ETSI101733_ContentTimestamp 
   (const char* name, const ASN1T_ETSI101733_ContentTimestamp* pvalue)
{
   asn1Print_TSP_TimeStampToken (name, pvalue);
}

void ASN1C_ETSI101733_ContentTimestamp::Print (const char* name)
{
   asn1Print_ETSI101733_ContentTimestamp (name, &msgData);
}

void asn1Print_ETSI101733_SignatureTimeStampToken 
   (const char* name, const ASN1T_ETSI101733_SignatureTimeStampToken* pvalue)
{
   asn1Print_TSP_TimeStampToken (name, pvalue);
}

void ASN1C_ETSI101733_SignatureTimeStampToken::Print (const char* name)
{
   asn1Print_ETSI101733_SignatureTimeStampToken (name, &msgData);
}

void asn1Print_ETSI101733_ESCTimeStampToken 
   (const char* name, const ASN1T_ETSI101733_ESCTimeStampToken* pvalue)
{
   asn1Print_TSP_TimeStampToken (name, pvalue);
}

void ASN1C_ETSI101733_ESCTimeStampToken::Print (const char* name)
{
   asn1Print_ETSI101733_ESCTimeStampToken (name, &msgData);
}

void asn1Print_ETSI101733_TimestampedCertsCRLs 
   (const char* name, const ASN1T_ETSI101733_TimestampedCertsCRLs* pvalue)
{
   asn1Print_TSP_TimeStampToken (name, pvalue);
}

void ASN1C_ETSI101733_TimestampedCertsCRLs::Print (const char* name)
{
   asn1Print_ETSI101733_TimestampedCertsCRLs (name, &msgData);
}

void asn1Print_ETSI101733_ArchiveTimeStampToken 
   (const char* name, const ASN1T_ETSI101733_ArchiveTimeStampToken* pvalue)
{
   asn1Print_TSP_TimeStampToken (name, pvalue);
}

void ASN1C_ETSI101733_ArchiveTimeStampToken::Print (const char* name)
{
   asn1Print_ETSI101733_ArchiveTimeStampToken (name, &msgData);
}

void asn1Print_ETSI101733_ContentIdentifier 
   (const char* name, const ASN1T_ETSI101733_ContentIdentifier* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_ETSI101733_ContentIdentifier::Print (const char* name)
{
   asn1Print_ETSI101733_ContentIdentifier (name, &msgData);
}

void asn1Print_ETSI101733_CommitmentTypeIdentifier 
   (const char* name, const ASN1T_ETSI101733_CommitmentTypeIdentifier* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_ETSI101733_CommitmentTypeIdentifier::Print (const char* name)
{
   asn1Print_ETSI101733_CommitmentTypeIdentifier (name, &msgData);
}

void asn1Print_ETSI101733_CertifiedAttributes 
   (const char* name, const ASN1T_ETSI101733_CertifiedAttributes* pvalue)
{
   asn1Print_ATTRCERT_AttributeCertificate (name, pvalue);
}

void ASN1C_ETSI101733_CertifiedAttributes::Print (const char* name)
{
   asn1Print_ETSI101733_CertifiedAttributes (name, &msgData);
}

void asn1Print_ETSI101733_OtherHash 
   (const char* name, const ASN1T_ETSI101733_OtherHash* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* sha1Hash */
      case 1:
      {
         asn1Print_ETSI101733_OtherHashValue ("sha1Hash", pvalue->u.sha1Hash);
         break;
      }
      /* otherHash */
      case 2:
      {
         asn1Print_ETSI101733_OtherHashAlgAndValue ("otherHash", pvalue->
            u.otherHash);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OtherHash::Print (const char* name)
{
   asn1Print_ETSI101733_OtherHash (name, &msgData);
}

void asn1Print_ETSI101733_OtherCertID 
   (const char* name, const ASN1T_ETSI101733_OtherCertID* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733_OtherHash ("otherCertHash", &pvalue->otherCertHash);

   if (pvalue->m.issuerSerialPresent) {
      asn1Print_ATTRCERT_IssuerSerial ("issuerSerial", &pvalue->issuerSerial);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OtherCertID::Print (const char* name)
{
   asn1Print_ETSI101733_OtherCertID (name, &msgData);
}

void asn1Print_ETSI101733__SeqOfETSI101733_OtherCertID 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pvalue)
{
   ASN1T_ETSI101733_OtherCertID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_OtherCertID (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::Print (const char* name)
{
   asn1Print_ETSI101733__SeqOfETSI101733_OtherCertID (name, &msgData);
}

void asn1Print_ETSI101733__SeqOfETSI101733_PolicyInformation 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pvalue)
{
   ASN1T_IMP_PolicyInformation* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_PolicyInformation*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_PolicyInformation (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::Print (const char* name)
{
   asn1Print_ETSI101733__SeqOfETSI101733_PolicyInformation (name, &msgData);
}

void asn1Print_ETSI101733_OtherSigningCertificate 
   (const char* name, const ASN1T_ETSI101733_OtherSigningCertificate* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733__SeqOfETSI101733_OtherCertID ("certs", &pvalue->certs
      );

   if (pvalue->m.policiesPresent) {
      asn1Print_ETSI101733__SeqOfETSI101733_PolicyInformation ("policies", &
         pvalue->policies);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OtherSigningCertificate::Print (const char* name)
{
   asn1Print_ETSI101733_OtherSigningCertificate (name, &msgData);
}

void asn1Print_ETSI101733_SigPolicyQualifierInfo 
   (const char* name, const ASN1T_ETSI101733_SigPolicyQualifierInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("sigPolicyQualifierId", (ASN1OBJID*)&pvalue->sigPolicyQualifierId);

   if (pvalue->m.qualifierPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("qualifier", pvalue->qualifier.numocts,
      pvalue->qualifier.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_SigPolicyQualifierInfo::Print (const char* name)
{
   asn1Print_ETSI101733_SigPolicyQualifierInfo (name, &msgData);
}

void asn1Print_ETSI101733_SignaturePolicyId_sigPolicyQualifiers 
   (const char* name, const ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pvalue)
{
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_SigPolicyQualifierInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_SigPolicyQualifierInfo (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::Print (const char* name)
{
   asn1Print_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (name, &msgData);
}

void asn1Print_ETSI101733_SignaturePolicyId 
   (const char* name, const ASN1T_ETSI101733_SignaturePolicyId* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733_SigPolicyId ("sigPolicyId", &pvalue->sigPolicyId);

   asn1Print_ETSI101733_SigPolicyHash ("sigPolicyHash", &pvalue->sigPolicyHash
      );

   if (pvalue->m.sigPolicyQualifiersPresent) {
      asn1Print_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (
         "sigPolicyQualifiers", &pvalue->sigPolicyQualifiers);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_SignaturePolicyId::Print (const char* name)
{
   asn1Print_ETSI101733_SignaturePolicyId (name, &msgData);
}

void asn1Print_ETSI101733_SignaturePolicy 
   (const char* name, const ASN1T_ETSI101733_SignaturePolicy* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* signaturePolicyImplied */
      case 1:
      {
         asn1Print_ETSI101733_SignaturePolicyImplied ("signaturePolicyImplied");
         break;
      }
      /* signaturePolicyId */
      case 2:
      {
         asn1Print_ETSI101733_SignaturePolicyId ("signaturePolicyId", pvalue->
            u.signaturePolicyId);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_SignaturePolicy::Print (const char* name)
{
   asn1Print_ETSI101733_SignaturePolicy (name, &msgData);
}

void asn1Print_ETSI101733_DisplayText 
   (const char* name, const ASN1T_ETSI101733_DisplayText* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* visibleString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("visibleString", pvalue->u.visibleString);
         break;
      }
      /* bmpString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_DisplayText::Print (const char* name)
{
   asn1Print_ETSI101733_DisplayText (name, &msgData);
}

void asn1Print_ETSI101733_NoticeReference_noticeNumbers 
   (const char* name, const ASN1T_ETSI101733_NoticeReference_noticeNumbers* pvalue)
{
   OSINT32* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (OSINT32*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintInteger (namebuf, *pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_NoticeReference_noticeNumbers::Print (const char* name)
{
   asn1Print_ETSI101733_NoticeReference_noticeNumbers (name, &msgData);
}

void asn1Print_ETSI101733_NoticeReference 
   (const char* name, const ASN1T_ETSI101733_NoticeReference* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733_DisplayText ("organization", &pvalue->organization);

   asn1Print_ETSI101733_NoticeReference_noticeNumbers ("noticeNumbers", &pvalue
      ->noticeNumbers);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_NoticeReference::Print (const char* name)
{
   asn1Print_ETSI101733_NoticeReference (name, &msgData);
}

void asn1Print_ETSI101733_SPUserNotice 
   (const char* name, const ASN1T_ETSI101733_SPUserNotice* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.noticeRefPresent) {
      asn1Print_ETSI101733_NoticeReference ("noticeRef", &pvalue->noticeRef);
   }

   if (pvalue->m.explicitTextPresent) {
      asn1Print_ETSI101733_DisplayText ("explicitText", &pvalue->explicitText
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_SPUserNotice::Print (const char* name)
{
   asn1Print_ETSI101733_SPUserNotice (name, &msgData);
}

void asn1Print_ETSI101733_CompleteCertificateRefs 
   (const char* name, const ASN1T_ETSI101733_CompleteCertificateRefs* pvalue)
{
   ASN1T_ETSI101733_OtherCertID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_OtherCertID (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_CompleteCertificateRefs::Print (const char* name)
{
   asn1Print_ETSI101733_CompleteCertificateRefs (name, &msgData);
}

void asn1Print_ETSI101733_CrlIdentifier 
   (const char* name, const ASN1T_ETSI101733_CrlIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_Name ("crlissuer", &pvalue->crlissuer);

   rtxPrintIndent ();
   rtxPrintCharStr ("crlIssuedTime", pvalue->crlIssuedTime);

   if (pvalue->m.crlNumberPresent) {
      asn1Print_IMP_CRLNumber ("crlNumber", &pvalue->crlNumber);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_CrlIdentifier::Print (const char* name)
{
   asn1Print_ETSI101733_CrlIdentifier (name, &msgData);
}

void asn1Print_ETSI101733_CrlValidatedID 
   (const char* name, const ASN1T_ETSI101733_CrlValidatedID* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733_OtherHash ("crlHash", &pvalue->crlHash);

   if (pvalue->m.crlIdentifierPresent) {
      asn1Print_ETSI101733_CrlIdentifier ("crlIdentifier", &pvalue->
         crlIdentifier);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_CrlValidatedID::Print (const char* name)
{
   asn1Print_ETSI101733_CrlValidatedID (name, &msgData);
}

void asn1Print_ETSI101733__SeqOfETSI101733_CrlValidatedID 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pvalue)
{
   ASN1T_ETSI101733_CrlValidatedID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_CrlValidatedID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_CrlValidatedID (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::Print (const char* name)
{
   asn1Print_ETSI101733__SeqOfETSI101733_CrlValidatedID (name, &msgData);
}

void asn1Print_ETSI101733_CRLListID 
   (const char* name, const ASN1T_ETSI101733_CRLListID* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733__SeqOfETSI101733_CrlValidatedID ("crls", &pvalue->crls
      );

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_CRLListID::Print (const char* name)
{
   asn1Print_ETSI101733_CRLListID (name, &msgData);
}

void asn1Print_ETSI101733_OcspIdentifier 
   (const char* name, const ASN1T_ETSI101733_OcspIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_OCSP_ResponderID ("ocspResponderID", &pvalue->ocspResponderID);

   rtxPrintIndent ();
   rtxPrintCharStr ("producedAt", pvalue->producedAt);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OcspIdentifier::Print (const char* name)
{
   asn1Print_ETSI101733_OcspIdentifier (name, &msgData);
}

void asn1Print_ETSI101733_OcspResponsesID 
   (const char* name, const ASN1T_ETSI101733_OcspResponsesID* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733_OcspIdentifier ("ocspIdentifier", &pvalue->
      ocspIdentifier);

   if (pvalue->m.ocspRepHashPresent) {
      asn1Print_ETSI101733_OtherHash ("ocspRepHash", &pvalue->ocspRepHash);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OcspResponsesID::Print (const char* name)
{
   asn1Print_ETSI101733_OcspResponsesID (name, &msgData);
}

void asn1Print_ETSI101733__SeqOfETSI101733_OcspResponsesID 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pvalue)
{
   ASN1T_ETSI101733_OcspResponsesID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_OcspResponsesID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_OcspResponsesID (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::Print (const char* name)
{
   asn1Print_ETSI101733__SeqOfETSI101733_OcspResponsesID (name, &msgData);
}

void asn1Print_ETSI101733_OcspListID 
   (const char* name, const ASN1T_ETSI101733_OcspListID* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733__SeqOfETSI101733_OcspResponsesID ("ocspResponses", &
      pvalue->ocspResponses);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OcspListID::Print (const char* name)
{
   asn1Print_ETSI101733_OcspListID (name, &msgData);
}

void asn1Print_ETSI101733_OtherRevRefs_otherRevRefs 
   (const char* name, const ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pvalue)
{
   ASN1TOpenType* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1TOpenType*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintHexStr (namebuf, pdata0->numocts,
      pdata0->data);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::Print (const char* name)
{
   asn1Print_ETSI101733_OtherRevRefs_otherRevRefs (name, &msgData);
}

void asn1Print_ETSI101733_OtherRevRefs 
   (const char* name, const ASN1T_ETSI101733_OtherRevRefs* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("otherRevRefType", (ASN1OBJID*)&pvalue->otherRevRefType);

   asn1Print_ETSI101733_OtherRevRefs_otherRevRefs ("otherRevRefs", &pvalue->
      otherRevRefs);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OtherRevRefs::Print (const char* name)
{
   asn1Print_ETSI101733_OtherRevRefs (name, &msgData);
}

void asn1Print_ETSI101733_CrlOcspRef 
   (const char* name, const ASN1T_ETSI101733_CrlOcspRef* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.crlidsPresent) {
      asn1Print_ETSI101733_CRLListID ("crlids", &pvalue->crlids);
   }

   if (pvalue->m.ocspidsPresent) {
      asn1Print_ETSI101733_OcspListID ("ocspids", &pvalue->ocspids);
   }

   if (pvalue->m.otherRevPresent) {
      asn1Print_ETSI101733_OtherRevRefs ("otherRev", &pvalue->otherRev);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_CrlOcspRef::Print (const char* name)
{
   asn1Print_ETSI101733_CrlOcspRef (name, &msgData);
}

void asn1Print_ETSI101733_CompleteRevocationRefs 
   (const char* name, const ASN1T_ETSI101733_CompleteRevocationRefs* pvalue)
{
   ASN1T_ETSI101733_CrlOcspRef* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_CrlOcspRef*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_CrlOcspRef (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_CompleteRevocationRefs::Print (const char* name)
{
   asn1Print_ETSI101733_CompleteRevocationRefs (name, &msgData);
}

void asn1Print_ETSI101733_CertificateValues 
   (const char* name, const ASN1T_ETSI101733_CertificateValues* pvalue)
{
   ASN1T_EXP_Certificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Certificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Certificate (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_CertificateValues::Print (const char* name)
{
   asn1Print_ETSI101733_CertificateValues (name, &msgData);
}

void asn1Print_ETSI101733__SeqOfETSI101733_CertificateList 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pvalue)
{
   ASN1T_EXP_CertificateList* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_CertificateList*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_CertificateList (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::Print (const char* name)
{
   asn1Print_ETSI101733__SeqOfETSI101733_CertificateList (name, &msgData);
}

void asn1Print_ETSI101733__SeqOfETSI101733_BasicOCSPResponse 
   (const char* name, const ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pvalue)
{
   ASN1T_OCSP_BasicOCSPResponse* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_OCSP_BasicOCSPResponse*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_OCSP_BasicOCSPResponse (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::Print (const char* name)
{
   asn1Print_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (name, &msgData);
}

void asn1Print_ETSI101733_OtherRevVals_otherRevVals 
   (const char* name, const ASN1T_ETSI101733_OtherRevVals_otherRevVals* pvalue)
{
   ASN1TOpenType* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1TOpenType*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintHexStr (namebuf, pdata0->numocts,
      pdata0->data);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_OtherRevVals_otherRevVals::Print (const char* name)
{
   asn1Print_ETSI101733_OtherRevVals_otherRevVals (name, &msgData);
}

void asn1Print_ETSI101733_OtherRevVals 
   (const char* name, const ASN1T_ETSI101733_OtherRevVals* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("otherRevValType", (ASN1OBJID*)&pvalue->otherRevValType);

   asn1Print_ETSI101733_OtherRevVals_otherRevVals ("otherRevVals", &pvalue->
      otherRevVals);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_OtherRevVals::Print (const char* name)
{
   asn1Print_ETSI101733_OtherRevVals (name, &msgData);
}

void asn1Print_ETSI101733_RevocationValues 
   (const char* name, const ASN1T_ETSI101733_RevocationValues* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.crlValsPresent) {
      asn1Print_ETSI101733__SeqOfETSI101733_CertificateList ("crlVals", &pvalue
         ->crlVals);
   }

   if (pvalue->m.ocspValsPresent) {
      asn1Print_ETSI101733__SeqOfETSI101733_BasicOCSPResponse ("ocspVals", &
         pvalue->ocspVals);
   }

   if (pvalue->m.otherRevValsPresent) {
      asn1Print_ETSI101733_OtherRevVals ("otherRevVals", &pvalue->otherRevVals
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_RevocationValues::Print (const char* name)
{
   asn1Print_ETSI101733_RevocationValues (name, &msgData);
}

void asn1Print_ETSI101733_AttributeCertificateRefs 
   (const char* name, const ASN1T_ETSI101733_AttributeCertificateRefs* pvalue)
{
   ASN1T_ETSI101733_OtherCertID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_OtherCertID (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_AttributeCertificateRefs::Print (const char* name)
{
   asn1Print_ETSI101733_AttributeCertificateRefs (name, &msgData);
}

void asn1Print_ETSI101733_AttributeRevocationRefs 
   (const char* name, const ASN1T_ETSI101733_AttributeRevocationRefs* pvalue)
{
   ASN1T_ETSI101733_CrlOcspRef* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_CrlOcspRef*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_CrlOcspRef (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_AttributeRevocationRefs::Print (const char* name)
{
   asn1Print_ETSI101733_AttributeRevocationRefs (name, &msgData);
}

void asn1Print_ETSI101733_ContentReference 
   (const char* name, const ASN1T_ETSI101733_ContentReference* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMS_ContentType ("contentType", &pvalue->contentType);

   asn1Print_ETSI101733_ContentIdentifier ("signedContentIdentifier", &pvalue->
      signedContentIdentifier);

   rtxPrintIndent ();
   rtxPrintHexStr ("originatorSignatureValue", pvalue->originatorSignatureValue.numocts, pvalue->originatorSignatureValue.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_ContentReference::Print (const char* name)
{
   asn1Print_ETSI101733_ContentReference (name, &msgData);
}

void asn1Print_ETSI101733_ContentHints 
   (const char* name, const ASN1T_ETSI101733_ContentHints* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.contentDescriptionPresent) {
      rtxPrintIndent ();
      rtxPrintUTF8CharStr ("contentDescription", pvalue->contentDescription);
   }

   asn1Print_CMS_ContentType ("contentType", &pvalue->contentType);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_ContentHints::Print (const char* name)
{
   asn1Print_ETSI101733_ContentHints (name, &msgData);
}

void asn1Print_ETSI101733_CommitmentTypeQualifier 
   (const char* name, const ASN1T_ETSI101733_CommitmentTypeQualifier* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733_CommitmentTypeIdentifier ("commitmentTypeIdentifier", &
      pvalue->commitmentTypeIdentifier);

   rtxPrintIndent ();
   rtxPrintHexStr ("qualifier", pvalue->qualifier.numocts,
   pvalue->qualifier.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_CommitmentTypeQualifier::Print (const char* name)
{
   asn1Print_ETSI101733_CommitmentTypeQualifier (name, &msgData);
}

void asn1Print_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier 
   (const char* name, const ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pvalue)
{
   ASN1T_ETSI101733_CommitmentTypeQualifier* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_CommitmentTypeQualifier*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_CommitmentTypeQualifier (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::Print (const char* name)
{
   asn1Print_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (name, &msgData);
}

void asn1Print_ETSI101733_CommitmentTypeIndication 
   (const char* name, const ASN1T_ETSI101733_CommitmentTypeIndication* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ETSI101733_CommitmentTypeIdentifier ("commitmentTypeId", &pvalue->
      commitmentTypeId);

   if (pvalue->m.commitmentTypeQualifierPresent) {
      asn1Print_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
         "commitmentTypeQualifier", &pvalue->commitmentTypeQualifier);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_CommitmentTypeIndication::Print (const char* name)
{
   asn1Print_ETSI101733_CommitmentTypeIndication (name, &msgData);
}

void asn1Print_ETSI101733_PostalAddress 
   (const char* name, const ASN1T_ETSI101733_PostalAddress* pvalue)
{
   ASN1T_EXP_DirectoryString* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_DirectoryString*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_DirectoryString (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_PostalAddress::Print (const char* name)
{
   asn1Print_ETSI101733_PostalAddress (name, &msgData);
}

void asn1Print_ETSI101733_SignerLocation 
   (const char* name, const ASN1T_ETSI101733_SignerLocation* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.countryNamePresent) {
      asn1Print_EXP_DirectoryString ("countryName", &pvalue->countryName);
   }

   if (pvalue->m.localityNamePresent) {
      asn1Print_EXP_DirectoryString ("localityName", &pvalue->localityName);
   }

   if (pvalue->m.postalAdddressPresent) {
      asn1Print_ETSI101733_PostalAddress ("postalAdddress", &pvalue->
         postalAdddress);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_SignerLocation::Print (const char* name)
{
   asn1Print_ETSI101733_SignerLocation (name, &msgData);
}

void asn1Print_ETSI101733_ClaimedAttributes 
   (const char* name, const ASN1T_ETSI101733_ClaimedAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Attribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_ClaimedAttributes::Print (const char* name)
{
   asn1Print_ETSI101733_ClaimedAttributes (name, &msgData);
}

void asn1Print_ETSI101733_SignerAttribute_element 
   (const char* name, const ASN1T_ETSI101733_SignerAttribute_element* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* claimedAttributes */
      case 1:
      {
         asn1Print_ETSI101733_ClaimedAttributes ("claimedAttributes", pvalue->
            u.claimedAttributes);
         break;
      }
      /* certifiedAttributes */
      case 2:
      {
         asn1Print_ETSI101733_CertifiedAttributes ("certifiedAttributes", 
            pvalue->u.certifiedAttributes);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ETSI101733_SignerAttribute_element::Print (const char* name)
{
   asn1Print_ETSI101733_SignerAttribute_element (name, &msgData);
}

void asn1Print_ETSI101733_SignerAttribute 
   (const char* name, const ASN1T_ETSI101733_SignerAttribute* pvalue)
{
   ASN1T_ETSI101733_SignerAttribute_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ETSI101733_SignerAttribute_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ETSI101733_SignerAttribute_element (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ETSI101733_SignerAttribute::Print (const char* name)
{
   asn1Print_ETSI101733_SignerAttribute (name, &msgData);
}

