/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "algorithms.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_ALGOS_KEA_Parms_Id (OSCTXT* pctxt, 
   ASN1T_ALGOS_KEA_Parms_Id* pSrcValue, ASN1T_ALGOS_KEA_Parms_Id* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_ALGOS_KEA_Parms_Id::ASN1C_ALGOS_KEA_Parms_Id (ASN1C_ALGOS_KEA_Parms_Id& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_KEA_Parms_Id& ASN1C_ALGOS_KEA_Parms_Id::getCopy (ASN1T_ALGOS_KEA_Parms_Id* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_KEA_Parms_Id);
      new (pDstData) ASN1T_ALGOS_KEA_Parms_Id;
   }

   asn1Copy_ALGOS_KEA_Parms_Id (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_ALGOS_KEA_Parms_Id* ASN1C_ALGOS_KEA_Parms_Id::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_KEA_Parms_Id* pDstData = new ASN1T_ALGOS_KEA_Parms_Id;

   asn1Copy_ALGOS_KEA_Parms_Id (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_ALGOS_FieldElement (OSCTXT* pctxt, 
   ASN1T_ALGOS_FieldElement* pSrcValue, ASN1T_ALGOS_FieldElement* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_ALGOS_FieldElement::ASN1C_ALGOS_FieldElement (ASN1C_ALGOS_FieldElement& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_FieldElement& ASN1C_ALGOS_FieldElement::getCopy (ASN1T_ALGOS_FieldElement* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_FieldElement);
      new (pDstData) ASN1T_ALGOS_FieldElement;
   }

   asn1Copy_ALGOS_FieldElement (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_ALGOS_FieldElement* ASN1C_ALGOS_FieldElement::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_FieldElement* pDstData = new ASN1T_ALGOS_FieldElement;

   asn1Copy_ALGOS_FieldElement (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_ALGOS_ECPoint (OSCTXT* pctxt, ASN1T_ALGOS_ECPoint* pSrcValue, 
   ASN1T_ALGOS_ECPoint* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_ALGOS_ECPoint::ASN1C_ALGOS_ECPoint (ASN1C_ALGOS_ECPoint& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_ECPoint& ASN1C_ALGOS_ECPoint::getCopy (ASN1T_ALGOS_ECPoint* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_ECPoint);
      new (pDstData) ASN1T_ALGOS_ECPoint;
   }

   asn1Copy_ALGOS_ECPoint (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_ALGOS_ECPoint* ASN1C_ALGOS_ECPoint::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_ECPoint* pDstData = new ASN1T_ALGOS_ECPoint;

   asn1Copy_ALGOS_ECPoint (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_ALGOS_HashAlgorithm (OSCTXT* pctxt, 
   ASN1T_ALGOS_HashAlgorithm* pSrcValue, ASN1T_ALGOS_HashAlgorithm* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_ALGOS_HashAlgorithm::ASN1C_ALGOS_HashAlgorithm (ASN1C_ALGOS_HashAlgorithm& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_ALGOS_HashAlgorithm& ASN1C_ALGOS_HashAlgorithm::getCopy (ASN1T_ALGOS_HashAlgorithm* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_HashAlgorithm);
      new (pDstData) ASN1T_ALGOS_HashAlgorithm;
   }

   asn1Copy_ALGOS_HashAlgorithm (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_HashAlgorithm* ASN1C_ALGOS_HashAlgorithm::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_HashAlgorithm* pDstData = new ASN1T_ALGOS_HashAlgorithm;

   asn1Copy_ALGOS_HashAlgorithm (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_Dss_Parms (OSCTXT* pctxt, 
   ASN1T_ALGOS_Dss_Parms* pSrcValue, ASN1T_ALGOS_Dss_Parms* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->p = pSrcValue->p;

   pDstValue->q = pSrcValue->q;

   pDstValue->g = pSrcValue->g;

}

ASN1C_ALGOS_Dss_Parms::ASN1C_ALGOS_Dss_Parms (ASN1C_ALGOS_Dss_Parms& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_Dss_Parms::ASN1T_ALGOS_Dss_Parms (ASN1C_ALGOS_Dss_Parms& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_Dss_Parms& ASN1C_ALGOS_Dss_Parms::getCopy (ASN1T_ALGOS_Dss_Parms* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_Dss_Parms);
      new (pDstData) ASN1T_ALGOS_Dss_Parms;
   }

   asn1Copy_ALGOS_Dss_Parms (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_Dss_Parms* ASN1C_ALGOS_Dss_Parms::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_Dss_Parms* pDstData = new ASN1T_ALGOS_Dss_Parms;

   asn1Copy_ALGOS_Dss_Parms (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_DssSigValue (OSCTXT* pctxt, 
   ASN1T_ALGOS_DssSigValue* pSrcValue, ASN1T_ALGOS_DssSigValue* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->r, (char **)&pDstValue->r);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->s, (char **)&pDstValue->s);

}

ASN1C_ALGOS_DssSigValue::ASN1C_ALGOS_DssSigValue (ASN1C_ALGOS_DssSigValue& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_DssSigValue::ASN1T_ALGOS_DssSigValue (ASN1C_ALGOS_DssSigValue& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_DssSigValue& ASN1C_ALGOS_DssSigValue::getCopy (ASN1T_ALGOS_DssSigValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_DssSigValue);
      new (pDstData) ASN1T_ALGOS_DssSigValue;
   }

   asn1Copy_ALGOS_DssSigValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_DssSigValue* ASN1C_ALGOS_DssSigValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_DssSigValue* pDstData = new ASN1T_ALGOS_DssSigValue;

   asn1Copy_ALGOS_DssSigValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_ValidationParms (OSCTXT* pctxt, 
   ASN1T_ALGOS_ValidationParms* pSrcValue, ASN1T_ALGOS_ValidationParms*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynBitStr (pctxt, &pSrcValue->seed, &pDstValue->seed);

   pDstValue->pgenCounter = pSrcValue->pgenCounter;

}

ASN1C_ALGOS_ValidationParms::ASN1C_ALGOS_ValidationParms (ASN1C_ALGOS_ValidationParms& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_ValidationParms::ASN1T_ALGOS_ValidationParms (ASN1C_ALGOS_ValidationParms& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_ValidationParms& ASN1C_ALGOS_ValidationParms::getCopy (ASN1T_ALGOS_ValidationParms* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_ValidationParms);
      new (pDstData) ASN1T_ALGOS_ValidationParms;
   }

   asn1Copy_ALGOS_ValidationParms (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_ValidationParms* ASN1C_ALGOS_ValidationParms::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_ValidationParms* pDstData = new ASN1T_ALGOS_ValidationParms;

   asn1Copy_ALGOS_ValidationParms (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_DomainParameters (OSCTXT* pctxt, 
   ASN1T_ALGOS_DomainParameters* pSrcValue, ASN1T_ALGOS_DomainParameters*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->p = pSrcValue->p;

   pDstValue->g = pSrcValue->g;

   pDstValue->q = pSrcValue->q;

   if (pSrcValue->m.jPresent) {
      pDstValue->j = pSrcValue->j;
   }

   if (pSrcValue->m.validationParmsPresent) {
      asn1Copy_ALGOS_ValidationParms (pctxt, &pSrcValue->validationParms, &pDstValue->validationParms);
   }

}

ASN1C_ALGOS_DomainParameters::ASN1C_ALGOS_DomainParameters (ASN1C_ALGOS_DomainParameters& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_DomainParameters::ASN1T_ALGOS_DomainParameters (ASN1C_ALGOS_DomainParameters& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_DomainParameters& ASN1C_ALGOS_DomainParameters::getCopy (ASN1T_ALGOS_DomainParameters* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_DomainParameters);
      new (pDstData) ASN1T_ALGOS_DomainParameters;
   }

   asn1Copy_ALGOS_DomainParameters (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_DomainParameters* ASN1C_ALGOS_DomainParameters::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_DomainParameters* pDstData = new ASN1T_ALGOS_DomainParameters;

   asn1Copy_ALGOS_DomainParameters (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_FieldID (OSCTXT* pctxt, ASN1T_ALGOS_FieldID* pSrcValue, 
   ASN1T_ALGOS_FieldID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->fieldType, (ASN1OBJID*)&pDstValue->fieldType);

   rtCopyOpenType (pctxt, &pSrcValue->parameters, &pDstValue->parameters);

}

ASN1C_ALGOS_FieldID::ASN1C_ALGOS_FieldID (ASN1C_ALGOS_FieldID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_FieldID::ASN1T_ALGOS_FieldID (ASN1C_ALGOS_FieldID& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_FieldID& ASN1C_ALGOS_FieldID::getCopy (ASN1T_ALGOS_FieldID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_FieldID);
      new (pDstData) ASN1T_ALGOS_FieldID;
   }

   asn1Copy_ALGOS_FieldID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_FieldID* ASN1C_ALGOS_FieldID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_FieldID* pDstData = new ASN1T_ALGOS_FieldID;

   asn1Copy_ALGOS_FieldID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_ECDSASigValue (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECDSASigValue* pSrcValue, ASN1T_ALGOS_ECDSASigValue* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->r, (char **)&pDstValue->r);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->s, (char **)&pDstValue->s);

}

ASN1C_ALGOS_ECDSASigValue::ASN1C_ALGOS_ECDSASigValue (ASN1C_ALGOS_ECDSASigValue& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_ECDSASigValue::ASN1T_ALGOS_ECDSASigValue (ASN1C_ALGOS_ECDSASigValue& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_ECDSASigValue& ASN1C_ALGOS_ECDSASigValue::getCopy (ASN1T_ALGOS_ECDSASigValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_ECDSASigValue);
      new (pDstData) ASN1T_ALGOS_ECDSASigValue;
   }

   asn1Copy_ALGOS_ECDSASigValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_ECDSASigValue* ASN1C_ALGOS_ECDSASigValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_ECDSASigValue* pDstData = new ASN1T_ALGOS_ECDSASigValue;

   asn1Copy_ALGOS_ECDSASigValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_Characteristic_two (OSCTXT* pctxt, 
   ASN1T_ALGOS_Characteristic_two* pSrcValue, ASN1T_ALGOS_Characteristic_two*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->m_ = pSrcValue->m_;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->basis, (ASN1OBJID*)&pDstValue->basis);

   rtCopyOpenType (pctxt, &pSrcValue->parameters, &pDstValue->parameters);

}

ASN1C_ALGOS_Characteristic_two::ASN1C_ALGOS_Characteristic_two (ASN1C_ALGOS_Characteristic_two& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_Characteristic_two::ASN1T_ALGOS_Characteristic_two (ASN1C_ALGOS_Characteristic_two& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_Characteristic_two& ASN1C_ALGOS_Characteristic_two::getCopy (ASN1T_ALGOS_Characteristic_two* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_Characteristic_two);
      new (pDstData) ASN1T_ALGOS_Characteristic_two;
   }

   asn1Copy_ALGOS_Characteristic_two (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_Characteristic_two* ASN1C_ALGOS_Characteristic_two::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_Characteristic_two* pDstData = new ASN1T_ALGOS_Characteristic_two;

   asn1Copy_ALGOS_Characteristic_two (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_Pentanomial (OSCTXT* pctxt, 
   ASN1T_ALGOS_Pentanomial* pSrcValue, ASN1T_ALGOS_Pentanomial* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->k1 = pSrcValue->k1;

   pDstValue->k2 = pSrcValue->k2;

   pDstValue->k3 = pSrcValue->k3;

}

ASN1C_ALGOS_Pentanomial::ASN1C_ALGOS_Pentanomial (ASN1C_ALGOS_Pentanomial& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_Pentanomial::ASN1T_ALGOS_Pentanomial (ASN1C_ALGOS_Pentanomial& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_Pentanomial& ASN1C_ALGOS_Pentanomial::getCopy (ASN1T_ALGOS_Pentanomial* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_Pentanomial);
      new (pDstData) ASN1T_ALGOS_Pentanomial;
   }

   asn1Copy_ALGOS_Pentanomial (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_Pentanomial* ASN1C_ALGOS_Pentanomial::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_Pentanomial* pDstData = new ASN1T_ALGOS_Pentanomial;

   asn1Copy_ALGOS_Pentanomial (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_Curve (OSCTXT* pctxt, ASN1T_ALGOS_Curve* pSrcValue, 
   ASN1T_ALGOS_Curve* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_ALGOS_FieldElement (pctxt, &pSrcValue->a, &pDstValue->a);

   asn1Copy_ALGOS_FieldElement (pctxt, &pSrcValue->b, &pDstValue->b);

   if (pSrcValue->m.seedPresent) {
      rtCopyDynBitStr (pctxt, &pSrcValue->seed, &pDstValue->seed);
   }

}

ASN1C_ALGOS_Curve::ASN1C_ALGOS_Curve (ASN1C_ALGOS_Curve& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_Curve::ASN1T_ALGOS_Curve (ASN1C_ALGOS_Curve& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_Curve& ASN1C_ALGOS_Curve::getCopy (ASN1T_ALGOS_Curve* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_Curve);
      new (pDstData) ASN1T_ALGOS_Curve;
   }

   asn1Copy_ALGOS_Curve (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_Curve* ASN1C_ALGOS_Curve::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_Curve* pDstData = new ASN1T_ALGOS_Curve;

   asn1Copy_ALGOS_Curve (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_SpecifiedECDomain (OSCTXT* pctxt, 
   ASN1T_ALGOS_SpecifiedECDomain* pSrcValue, ASN1T_ALGOS_SpecifiedECDomain*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_ALGOS_FieldID (pctxt, &pSrcValue->fieldID, &pDstValue->fieldID);

   asn1Copy_ALGOS_Curve (pctxt, &pSrcValue->curve, &pDstValue->curve);

   asn1Copy_ALGOS_ECPoint (pctxt, &pSrcValue->base, &pDstValue->base);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->order, (char **)&pDstValue->order);

   if (pSrcValue->m.cofactorPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->cofactor, (char **)&pDstValue->cofactor);
   }

   if (pSrcValue->m.hashPresent) {
      asn1Copy_ALGOS_HashAlgorithm (pctxt, &pSrcValue->hash, &pDstValue->hash);
   }

}

ASN1C_ALGOS_SpecifiedECDomain::ASN1C_ALGOS_SpecifiedECDomain (ASN1C_ALGOS_SpecifiedECDomain& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_SpecifiedECDomain::ASN1T_ALGOS_SpecifiedECDomain (ASN1C_ALGOS_SpecifiedECDomain& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_SpecifiedECDomain& ASN1C_ALGOS_SpecifiedECDomain::getCopy (ASN1T_ALGOS_SpecifiedECDomain* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_SpecifiedECDomain);
      new (pDstData) ASN1T_ALGOS_SpecifiedECDomain;
   }

   asn1Copy_ALGOS_SpecifiedECDomain (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_SpecifiedECDomain* ASN1C_ALGOS_SpecifiedECDomain::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_SpecifiedECDomain* pDstData = new ASN1T_ALGOS_SpecifiedECDomain;

   asn1Copy_ALGOS_SpecifiedECDomain (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_ECParameters (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECParameters* pSrcValue, ASN1T_ALGOS_ECParameters* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* implicitCurve */
      case 1:
         break;

      /* namedCurve */
      case 2:
         pDstValue->u.namedCurve = rtxMemAllocType (pctxt, ASN1TObjId);
         new (pDstValue->u.namedCurve) ASN1TObjId;
         rtCopyOID ((ASN1OBJID*)pSrcValue->u.namedCurve, (ASN1OBJID*)pDstValue->u.namedCurve);
         break;

      /* specifiedCurve */
      case 3:
         pDstValue->u.specifiedCurve = rtxMemAllocType (pctxt, ASN1T_ALGOS_SpecifiedECDomain);
         new (pDstValue->u.specifiedCurve) ASN1T_ALGOS_SpecifiedECDomain;
         asn1Copy_ALGOS_SpecifiedECDomain (pctxt, pSrcValue->u.specifiedCurve, pDstValue->u.specifiedCurve);
         break;

   }
}

ASN1C_ALGOS_ECParameters::ASN1C_ALGOS_ECParameters (ASN1C_ALGOS_ECParameters& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_ECParameters::ASN1T_ALGOS_ECParameters (ASN1C_ALGOS_ECParameters& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_ECParameters& ASN1C_ALGOS_ECParameters::getCopy (ASN1T_ALGOS_ECParameters* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_ECParameters);
      new (pDstData) ASN1T_ALGOS_ECParameters;
   }

   asn1Copy_ALGOS_ECParameters (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_ECParameters* ASN1C_ALGOS_ECParameters::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_ECParameters* pDstData = new ASN1T_ALGOS_ECParameters;

   asn1Copy_ALGOS_ECParameters (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_ECPrivateKey (OSCTXT* pctxt, 
   ASN1T_ALGOS_ECPrivateKey* pSrcValue, ASN1T_ALGOS_ECPrivateKey* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   rtCopyDynOctStr (pctxt, &pSrcValue->privateKey, &pDstValue->privateKey);

   if (pSrcValue->m.parametersPresent) {
      asn1Copy_ALGOS_ECParameters (pctxt, &pSrcValue->parameters, &pDstValue->parameters);
   }

   if (pSrcValue->m.publicKeyPresent) {
      rtCopyDynBitStr (pctxt, &pSrcValue->publicKey, &pDstValue->publicKey);
   }

}

ASN1C_ALGOS_ECPrivateKey::ASN1C_ALGOS_ECPrivateKey (ASN1C_ALGOS_ECPrivateKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_ECPrivateKey::ASN1T_ALGOS_ECPrivateKey (ASN1C_ALGOS_ECPrivateKey& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_ECPrivateKey& ASN1C_ALGOS_ECPrivateKey::getCopy (ASN1T_ALGOS_ECPrivateKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_ECPrivateKey);
      new (pDstData) ASN1T_ALGOS_ECPrivateKey;
   }

   asn1Copy_ALGOS_ECPrivateKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_ECPrivateKey* ASN1C_ALGOS_ECPrivateKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_ECPrivateKey* pDstData = new ASN1T_ALGOS_ECPrivateKey;

   asn1Copy_ALGOS_ECPrivateKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ALGOS_RSASSA_PSS_params (OSCTXT* pctxt, 
   ASN1T_ALGOS_RSASSA_PSS_params* pSrcValue, ASN1T_ALGOS_RSASSA_PSS_params*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.hashAlgorithmPresent) {
      asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->hashAlgorithm, &pDstValue->hashAlgorithm);
   }

   if (pSrcValue->m.maskGenAlgorithmPresent) {
      asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->maskGenAlgorithm, &pDstValue->maskGenAlgorithm);
   }

   pDstValue->saltLength = pSrcValue->saltLength;

   pDstValue->trailerField = pSrcValue->trailerField;

}

ASN1C_ALGOS_RSASSA_PSS_params::ASN1C_ALGOS_RSASSA_PSS_params (ASN1C_ALGOS_RSASSA_PSS_params& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ALGOS_RSASSA_PSS_params::ASN1T_ALGOS_RSASSA_PSS_params (ASN1C_ALGOS_RSASSA_PSS_params& original)
{
   original.getCopy (this);
}

ASN1T_ALGOS_RSASSA_PSS_params& ASN1C_ALGOS_RSASSA_PSS_params::getCopy (ASN1T_ALGOS_RSASSA_PSS_params* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ALGOS_RSASSA_PSS_params);
      new (pDstData) ASN1T_ALGOS_RSASSA_PSS_params;
   }

   asn1Copy_ALGOS_RSASSA_PSS_params (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ALGOS_RSASSA_PSS_params* ASN1C_ALGOS_RSASSA_PSS_params::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ALGOS_RSASSA_PSS_params* pDstData = new ASN1T_ALGOS_RSASSA_PSS_params;

   asn1Copy_ALGOS_RSASSA_PSS_params (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

