/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "ocsp.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_OCSP_Version (const char* name, ASN1T_OCSP_Version* pValue, 
   ASN1T_OCSP_Version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_OCSP_Version::Equals (ASN1T_OCSP_Version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_Version ("Version", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_OCSPResponseStatus (const char* name, 
   ASN1T_OCSP_OCSPResponseStatus* pValue, 
   ASN1T_OCSP_OCSPResponseStatus* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_OCSP_OCSPResponseStatus::Equals (ASN1T_OCSP_OCSPResponseStatus* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_OCSPResponseStatus ("OCSPResponseStatus", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_KeyHash (const char* name, ASN1T_OCSP_KeyHash* pValue, 
   ASN1T_OCSP_KeyHash* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_OCSP_KeyHash::Equals (ASN1T_OCSP_KeyHash* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_KeyHash ("KeyHash", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_CRLReason (const char* name, 
   ASN1T_OCSP_CRLReason* pValue, ASN1T_OCSP_CRLReason* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_OCSP_CRLReason::Equals (ASN1T_OCSP_CRLReason* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_CRLReason ("CRLReason", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_CertID (const char* name, ASN1T_OCSP_CertID* pValue, 
   ASN1T_OCSP_CertID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".hashAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->hashAlgorithm, &pCmpValue->hashAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerNameHash", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->issuerNameHash.numocts, 
      pValue->issuerNameHash.data, pCmpValue->issuerNameHash.numocts, 
      pCmpValue->issuerNameHash.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerKeyHash", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->issuerKeyHash.numocts, 
      pValue->issuerKeyHash.data, pCmpValue->issuerKeyHash.numocts, 
      pCmpValue->issuerKeyHash.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".serialNumber", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->serialNumber, &pCmpValue->serialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_OCSP_CertID::Equals (ASN1T_OCSP_CertID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_CertID ("CertID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_Request (const char* name, ASN1T_OCSP_Request* pValue, 
   ASN1T_OCSP_Request* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".reqCert", 0, 0, 0);
   if (! asn1Compare_OCSP_CertID (namebuf, &pValue->reqCert, &pCmpValue->reqCert, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".singleRequestExtensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.singleRequestExtensionsPresent,
   pCmpValue->m.singleRequestExtensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.singleRequestExtensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->singleRequestExtensions, &pCmpValue->singleRequestExtensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_Request::Equals (ASN1T_OCSP_Request* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_Request ("Request", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP__SeqOfOCSP_Request (const char* name, 
   ASN1T_OCSP__SeqOfOCSP_Request* pValue, 
   ASN1T_OCSP__SeqOfOCSP_Request* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_OCSP_Request* pdata;
   ASN1T_OCSP_Request* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_OCSP_Request*) pnode->data;
      pCmpdata = (ASN1T_OCSP_Request*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_OCSP_Request (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_OCSP__SeqOfOCSP_Request::Equals (ASN1T_OCSP__SeqOfOCSP_Request* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP__SeqOfOCSP_Request ("_SeqOfOCSP_Request", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_TBSRequest (const char* name, 
   ASN1T_OCSP_TBSRequest* pValue, ASN1T_OCSP_TBSRequest* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_OCSP_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".requestorName", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.requestorNamePresent,
   pCmpValue->m.requestorNamePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.requestorNamePresent) 
   {
      if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->requestorName, &pCmpValue->requestorName, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".requestList", 0, 0, 0);
   if (! asn1Compare_OCSP__SeqOfOCSP_Request (namebuf, &pValue->requestList, &pCmpValue->requestList, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".requestExtensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.requestExtensionsPresent,
   pCmpValue->m.requestExtensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.requestExtensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->requestExtensions, &pCmpValue->requestExtensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_TBSRequest::Equals (ASN1T_OCSP_TBSRequest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_TBSRequest ("TBSRequest", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP__SeqOfOCSP_Certificate (const char* name, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pValue, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_Certificate* pdata;
   ASN1T_EXP_Certificate* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Certificate*) pnode->data;
      pCmpdata = (ASN1T_EXP_Certificate*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Certificate (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_OCSP__SeqOfOCSP_Certificate::Equals (ASN1T_OCSP__SeqOfOCSP_Certificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP__SeqOfOCSP_Certificate ("_SeqOfOCSP_Certificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_Signature (const char* name, 
   ASN1T_OCSP_Signature* pValue, ASN1T_OCSP_Signature* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".signatureAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signatureAlgorithm, &pCmpValue->signatureAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->signature_.numbits, 
      pValue->signature_.data, pCmpValue->signature_.numbits, 
      pCmpValue->signature_.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certsPresent,
   pCmpValue->m.certsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certsPresent) 
   {
      if (! asn1Compare_OCSP__SeqOfOCSP_Certificate (namebuf, &pValue->certs, &pCmpValue->certs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_Signature::Equals (ASN1T_OCSP_Signature* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_Signature ("Signature", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_OCSPRequest (const char* name, 
   ASN1T_OCSP_OCSPRequest* pValue, ASN1T_OCSP_OCSPRequest* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".tbsRequest", 0, 0, 0);
   if (! asn1Compare_OCSP_TBSRequest (namebuf, &pValue->tbsRequest, &pCmpValue->tbsRequest, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".optionalSignature", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.optionalSignaturePresent,
   pCmpValue->m.optionalSignaturePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.optionalSignaturePresent) 
   {
      if (! asn1Compare_OCSP_Signature (namebuf, &pValue->optionalSignature, &pCmpValue->optionalSignature, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_OCSPRequest::Equals (ASN1T_OCSP_OCSPRequest* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_OCSPRequest ("OCSPRequest", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_ResponseBytes (const char* name, 
   ASN1T_OCSP_ResponseBytes* pValue, ASN1T_OCSP_ResponseBytes* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".responseType", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->responseType, (ASN1OBJID*)&pCmpValue->responseType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".response", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->response.numocts, 
      pValue->response.data, pCmpValue->response.numocts, 
      pCmpValue->response.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_OCSP_ResponseBytes::Equals (ASN1T_OCSP_ResponseBytes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_ResponseBytes ("ResponseBytes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_OCSPResponse (const char* name, 
   ASN1T_OCSP_OCSPResponse* pValue, ASN1T_OCSP_OCSPResponse* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".responseStatus", 0, 0, 0);
   if (! asn1Compare_OCSP_OCSPResponseStatus (namebuf, &pValue->responseStatus, &pCmpValue->responseStatus, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".responseBytes", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.responseBytesPresent,
   pCmpValue->m.responseBytesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.responseBytesPresent) 
   {
      if (! asn1Compare_OCSP_ResponseBytes (namebuf, &pValue->responseBytes, &pCmpValue->responseBytes, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_OCSPResponse::Equals (ASN1T_OCSP_OCSPResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_OCSPResponse ("OCSPResponse", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_ResponderID (const char* name, 
   ASN1T_OCSP_ResponderID* pValue, ASN1T_OCSP_ResponderID* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* byName */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.byName", 0, 0, 0);
         if (! asn1Compare_EXP_Name (namebuf, pValue->u.byName, pCmpValue->u.byName, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* byKey */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.byKey", 0, 0, 0);
         if (! asn1Compare_OCSP_KeyHash (namebuf, pValue->u.byKey, pCmpValue->u.byKey, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_OCSP_ResponderID::Equals (ASN1T_OCSP_ResponderID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_ResponderID ("ResponderID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_RevokedInfo (const char* name, 
   ASN1T_OCSP_RevokedInfo* pValue, ASN1T_OCSP_RevokedInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".revocationTime", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->revocationTime, pCmpValue->revocationTime, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".revocationReason", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.revocationReasonPresent,
   pCmpValue->m.revocationReasonPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.revocationReasonPresent) 
   {
      if (! asn1Compare_OCSP_CRLReason (namebuf, &pValue->revocationReason, &pCmpValue->revocationReason, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_RevokedInfo::Equals (ASN1T_OCSP_RevokedInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_RevokedInfo ("RevokedInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_CertStatus (const char* name, 
   ASN1T_OCSP_CertStatus* pValue, ASN1T_OCSP_CertStatus* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* good */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.good", 0, 0, 0);
         break;

      /* revoked */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.revoked", 0, 0, 0);
         if (! asn1Compare_OCSP_RevokedInfo (namebuf, pValue->u.revoked, pCmpValue->u.revoked, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* unknown */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.unknown", 0, 0, 0);
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_OCSP_CertStatus::Equals (ASN1T_OCSP_CertStatus* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_CertStatus ("CertStatus", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_SingleResponse (const char* name, 
   ASN1T_OCSP_SingleResponse* pValue, ASN1T_OCSP_SingleResponse* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certID", 0, 0, 0);
   if (! asn1Compare_OCSP_CertID (namebuf, &pValue->certID, &pCmpValue->certID, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certStatus", 0, 0, 0);
   if (! asn1Compare_OCSP_CertStatus (namebuf, &pValue->certStatus, &pCmpValue->certStatus, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".thisUpdate", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->thisUpdate, pCmpValue->thisUpdate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".nextUpdate", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.nextUpdatePresent,
   pCmpValue->m.nextUpdatePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.nextUpdatePresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->nextUpdate, pCmpValue->nextUpdate, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".singleExtensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.singleExtensionsPresent,
   pCmpValue->m.singleExtensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.singleExtensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->singleExtensions, &pCmpValue->singleExtensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_SingleResponse::Equals (ASN1T_OCSP_SingleResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_SingleResponse ("SingleResponse", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP__SeqOfOCSP_SingleResponse (const char* name, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pValue, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_OCSP_SingleResponse* pdata;
   ASN1T_OCSP_SingleResponse* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_OCSP_SingleResponse*) pnode->data;
      pCmpdata = (ASN1T_OCSP_SingleResponse*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_OCSP_SingleResponse (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_OCSP__SeqOfOCSP_SingleResponse::Equals (ASN1T_OCSP__SeqOfOCSP_SingleResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP__SeqOfOCSP_SingleResponse ("_SeqOfOCSP_SingleResponse", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_ResponseData (const char* name, 
   ASN1T_OCSP_ResponseData* pValue, ASN1T_OCSP_ResponseData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_OCSP_Version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".responderID", 0, 0, 0);
   if (! asn1Compare_OCSP_ResponderID (namebuf, &pValue->responderID, &pCmpValue->responderID, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".producedAt", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->producedAt, pCmpValue->producedAt, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".responses", 0, 0, 0);
   if (! asn1Compare_OCSP__SeqOfOCSP_SingleResponse (namebuf, &pValue->responses, &pCmpValue->responses, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".responseExtensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.responseExtensionsPresent,
   pCmpValue->m.responseExtensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.responseExtensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->responseExtensions, &pCmpValue->responseExtensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_ResponseData::Equals (ASN1T_OCSP_ResponseData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_ResponseData ("ResponseData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_OCSP_BasicOCSPResponse (const char* name, 
   ASN1T_OCSP_BasicOCSPResponse* pValue, 
   ASN1T_OCSP_BasicOCSPResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".tbsResponseData", 0, 0, 0);
   if (! asn1Compare_OCSP_ResponseData (namebuf, &pValue->tbsResponseData, &pCmpValue->tbsResponseData, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signatureAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signatureAlgorithm, &pCmpValue->signatureAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->signature_.numbits, 
      pValue->signature_.data, pCmpValue->signature_.numbits, 
      pCmpValue->signature_.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certsPresent,
   pCmpValue->m.certsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certsPresent) 
   {
      if (! asn1Compare_OCSP__SeqOfOCSP_Certificate (namebuf, &pValue->certs, &pCmpValue->certs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_OCSP_BasicOCSPResponse::Equals (ASN1T_OCSP_BasicOCSPResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_OCSP_BasicOCSPResponse ("BasicOCSPResponse", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

