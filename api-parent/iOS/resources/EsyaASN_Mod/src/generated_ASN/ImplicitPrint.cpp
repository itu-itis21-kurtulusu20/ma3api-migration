/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "Implicit.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_IMP_AnotherName 
   (const char* name, const ASN1T_IMP_AnotherName* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("type_id", (ASN1OBJID*)&pvalue->type_id);

   rtxPrintIndent ();
   rtxPrintHexStr ("value", pvalue->value.numocts,
   pvalue->value.data);

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_AnotherName::Print (const char* name)
{
   asn1Print_IMP_AnotherName (name, &msgData);
}

void asn1Print_IMP_EDIPartyName 
   (const char* name, const ASN1T_IMP_EDIPartyName* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.nameAssignerPresent) {
      asn1Print_EXP_DirectoryString ("nameAssigner", &pvalue->nameAssigner);
   }

   asn1Print_EXP_DirectoryString ("partyName", &pvalue->partyName);

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_EDIPartyName::Print (const char* name)
{
   asn1Print_IMP_EDIPartyName (name, &msgData);
}

void asn1Print_IMP_GeneralName 
   (const char* name, const ASN1T_IMP_GeneralName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* otherName */
      case 1:
      {
         asn1Print_IMP_AnotherName ("otherName", pvalue->u.otherName);
         break;
      }
      /* rfc822Name */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("rfc822Name", pvalue->u.rfc822Name);
         break;
      }
      /* dNSName */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("dNSName", pvalue->u.dNSName);
         break;
      }
      /* x400Address */
      case 4:
      {
         asn1Print_EXP_ORAddress ("x400Address", pvalue->u.x400Address);
         break;
      }
      /* directoryName */
      case 5:
      {
         asn1Print_EXP_Name ("directoryName", pvalue->u.directoryName);
         break;
      }
      /* ediPartyName */
      case 6:
      {
         asn1Print_IMP_EDIPartyName ("ediPartyName", pvalue->u.ediPartyName);
         break;
      }
      /* uniformResourceIdentifier */
      case 7:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("uniformResourceIdentifier", pvalue->u.uniformResourceIdentifier);
         break;
      }
      /* iPAddress */
      case 8:
      {
         rtxPrintIndent ();
         rtxPrintHexStr ("iPAddress", pvalue->u.iPAddress->numocts, pvalue->u.iPAddress->data);
         break;
      }
      /* registeredID */
      case 9:
      {
         rtxPrintIndent ();
         rtPrintOID ("registeredID", (ASN1OBJID*)pvalue->u.registeredID);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_GeneralName::Print (const char* name)
{
   asn1Print_IMP_GeneralName (name, &msgData);
}

void asn1Print_IMP_GeneralNames 
   (const char* name, const ASN1T_IMP_GeneralNames* pvalue)
{
   ASN1T_IMP_GeneralName* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_GeneralName*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_GeneralName (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_GeneralNames::Print (const char* name)
{
   asn1Print_IMP_GeneralNames (name, &msgData);
}

void asn1Print_IMP_SubjectAltName 
   (const char* name, const ASN1T_IMP_SubjectAltName* pvalue)
{
   asn1Print_IMP_GeneralNames (name, pvalue);
}

void ASN1C_IMP_SubjectAltName::Print (const char* name)
{
   asn1Print_IMP_SubjectAltName (name, &msgData);
}

void asn1Print_IMP_KeyIdentifier 
   (const char* name, const ASN1T_IMP_KeyIdentifier* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_IMP_KeyIdentifier::Print (const char* name)
{
   asn1Print_IMP_KeyIdentifier (name, &msgData);
}

void asn1Print_IMP_SubjectKeyIdentifier 
   (const char* name, const ASN1T_IMP_SubjectKeyIdentifier* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_IMP_SubjectKeyIdentifier::Print (const char* name)
{
   asn1Print_IMP_SubjectKeyIdentifier (name, &msgData);
}

void asn1Print_IMP_KeyUsage 
   (const char* name, const ASN1T_IMP_KeyUsage* pvalue)
{
   rtxPrintIndent ();
   rtPrintBitStrBraceText (name, pvalue->numbits, pvalue->data);
}

void ASN1C_IMP_KeyUsage::Print (const char* name)
{
   asn1Print_IMP_KeyUsage (name, &msgData);
}

void asn1Print_IMP_CertPolicyId 
   (const char* name, const ASN1T_IMP_CertPolicyId* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_IMP_CertPolicyId::Print (const char* name)
{
   asn1Print_IMP_CertPolicyId (name, &msgData);
}

void asn1Print_IMP_PolicyQualifierId 
   (const char* name, const ASN1T_IMP_PolicyQualifierId* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_IMP_PolicyQualifierId::Print (const char* name)
{
   asn1Print_IMP_PolicyQualifierId (name, &msgData);
}

void asn1Print_IMP_CPSuri (const char* name, const ASN1T_IMP_CPSuri pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_IMP_CPSuri::Print (const char* name)
{
   asn1Print_IMP_CPSuri (name, msgData);
}

void asn1Print_IMP_KeyPurposeId 
   (const char* name, const ASN1T_IMP_KeyPurposeId* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_IMP_KeyPurposeId::Print (const char* name)
{
   asn1Print_IMP_KeyPurposeId (name, &msgData);
}

void asn1Print_IMP_ReasonFlags 
   (const char* name, const ASN1T_IMP_ReasonFlags* pvalue)
{
   rtxPrintIndent ();
   rtPrintBitStrBraceText (name, pvalue->numbits, pvalue->data);
}

void ASN1C_IMP_ReasonFlags::Print (const char* name)
{
   asn1Print_IMP_ReasonFlags (name, &msgData);
}

void asn1Print_IMP_CRLNumber 
   (const char* name, const ASN1T_IMP_CRLNumber* pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, *pvalue);
}

void ASN1C_IMP_CRLNumber::Print (const char* name)
{
   asn1Print_IMP_CRLNumber (name, &msgData);
}

void asn1Print_IMP_CRLReason 
   (const char* name, const ASN1T_IMP_CRLReason* pvalue)
{
   rtxPrintIndent ();
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("unspecified\n"); break;
      case 1: printf ("keyCompromise\n"); break;
      case 2: printf ("cACompromise\n"); break;
      case 3: printf ("affiliationChanged\n"); break;
      case 4: printf ("superseded\n"); break;
      case 5: printf ("cessationOfOperation\n"); break;
      case 6: printf ("certificateHold\n"); break;
      case 8: printf ("removeFromCRL\n"); break;
      case 9: printf ("privilegeWithdrawn\n"); break;
      case 10: printf ("aACompromise\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_IMP_CRLReason::Print (const char* name)
{
   asn1Print_IMP_CRLReason (name, &msgData);
}

void asn1Print_IMP_BaseDistance 
   (const char* name, const ASN1T_IMP_BaseDistance* pvalue)
{
   rtxPrintIndent ();
   rtxPrintUnsigned (name, *pvalue);
}

void ASN1C_IMP_BaseDistance::Print (const char* name)
{
   asn1Print_IMP_BaseDistance (name, &msgData);
}

void asn1Print_IMP_SkipCerts 
   (const char* name, const ASN1T_IMP_SkipCerts* pvalue)
{
   rtxPrintIndent ();
   rtxPrintUnsigned (name, *pvalue);
}

void ASN1C_IMP_SkipCerts::Print (const char* name)
{
   asn1Print_IMP_SkipCerts (name, &msgData);
}

void asn1Print_IMP_InhibitAnyPolicy 
   (const char* name, const ASN1T_IMP_InhibitAnyPolicy* pvalue)
{
   asn1Print_IMP_SkipCerts (name, pvalue);
}

void ASN1C_IMP_InhibitAnyPolicy::Print (const char* name)
{
   asn1Print_IMP_InhibitAnyPolicy (name, &msgData);
}

void asn1Print_IMP_DistributionPointName 
   (const char* name, const ASN1T_IMP_DistributionPointName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* fullName */
      case 1:
      {
         asn1Print_IMP_GeneralNames ("fullName", pvalue->u.fullName);
         break;
      }
      /* nameRelativeToCRLIssuer */
      case 2:
      {
         asn1Print_EXP_RelativeDistinguishedName ("nameRelativeToCRLIssuer", 
            pvalue->u.nameRelativeToCRLIssuer);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_DistributionPointName::Print (const char* name)
{
   asn1Print_IMP_DistributionPointName (name, &msgData);
}

void asn1Print_IMP_DistributionPoint 
   (const char* name, const ASN1T_IMP_DistributionPoint* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.distributionPointPresent) {
      asn1Print_IMP_DistributionPointName ("distributionPoint", &pvalue->
         distributionPoint);
   }

   if (pvalue->m.reasonsPresent) {
      asn1Print_IMP_ReasonFlags ("reasons", &pvalue->reasons);
   }

   if (pvalue->m.cRLIssuerPresent) {
      asn1Print_IMP_GeneralNames ("cRLIssuer", &pvalue->cRLIssuer);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_DistributionPoint::Print (const char* name)
{
   asn1Print_IMP_DistributionPoint (name, &msgData);
}

void asn1Print_IMP_CRLDistributionPoints 
   (const char* name, const ASN1T_IMP_CRLDistributionPoints* pvalue)
{
   ASN1T_IMP_DistributionPoint* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_DistributionPoint*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_DistributionPoint (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_CRLDistributionPoints::Print (const char* name)
{
   asn1Print_IMP_CRLDistributionPoints (name, &msgData);
}

void asn1Print_IMP_FreshestCRL 
   (const char* name, const ASN1T_IMP_FreshestCRL* pvalue)
{
   asn1Print_IMP_CRLDistributionPoints (name, pvalue);
}

void ASN1C_IMP_FreshestCRL::Print (const char* name)
{
   asn1Print_IMP_FreshestCRL (name, &msgData);
}

void asn1Print_IMP_BaseCRLNumber 
   (const char* name, const ASN1T_IMP_BaseCRLNumber* pvalue)
{
   asn1Print_IMP_CRLNumber (name, pvalue);
}

void ASN1C_IMP_BaseCRLNumber::Print (const char* name)
{
   asn1Print_IMP_BaseCRLNumber (name, &msgData);
}

void asn1Print_IMP_IssuerAltName 
   (const char* name, const ASN1T_IMP_IssuerAltName* pvalue)
{
   asn1Print_IMP_GeneralNames (name, pvalue);
}

void ASN1C_IMP_IssuerAltName::Print (const char* name)
{
   asn1Print_IMP_IssuerAltName (name, &msgData);
}

void asn1Print_IMP_HoldInstructionCode 
   (const char* name, const ASN1T_IMP_HoldInstructionCode* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_IMP_HoldInstructionCode::Print (const char* name)
{
   asn1Print_IMP_HoldInstructionCode (name, &msgData);
}

void asn1Print_IMP_InvalidityDate 
   (const char* name, const ASN1T_IMP_InvalidityDate pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_IMP_InvalidityDate::Print (const char* name)
{
   asn1Print_IMP_InvalidityDate (name, msgData);
}

void asn1Print_IMP_CertificateIssuer 
   (const char* name, const ASN1T_IMP_CertificateIssuer* pvalue)
{
   asn1Print_IMP_GeneralNames (name, pvalue);
}

void ASN1C_IMP_CertificateIssuer::Print (const char* name)
{
   asn1Print_IMP_CertificateIssuer (name, &msgData);
}

void asn1Print_IMP_AuthorityKeyIdentifier 
   (const char* name, const ASN1T_IMP_AuthorityKeyIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.keyIdentifierPresent) {
      asn1Print_IMP_KeyIdentifier ("keyIdentifier", &pvalue->keyIdentifier);
   }

   if (pvalue->m.authorityCertIssuerPresent) {
      asn1Print_IMP_GeneralNames ("authorityCertIssuer", &pvalue->
         authorityCertIssuer);
   }

   if (pvalue->m.authorityCertSerialNumberPresent) {
      asn1Print_EXP_CertificateSerialNumber ("authorityCertSerialNumber", &
         pvalue->authorityCertSerialNumber);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_AuthorityKeyIdentifier::Print (const char* name)
{
   asn1Print_IMP_AuthorityKeyIdentifier (name, &msgData);
}

void asn1Print_IMP_PolicyQualifierInfo 
   (const char* name, const ASN1T_IMP_PolicyQualifierInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_PolicyQualifierId ("policyQualifierId", &pvalue->
      policyQualifierId);

   rtxPrintIndent ();
   rtxPrintHexStr ("qualifier", pvalue->qualifier.numocts,
   pvalue->qualifier.data);

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_PolicyQualifierInfo::Print (const char* name)
{
   asn1Print_IMP_PolicyQualifierInfo (name, &msgData);
}

void asn1Print_IMP_PolicyInformation_policyQualifiers 
   (const char* name, const ASN1T_IMP_PolicyInformation_policyQualifiers* pvalue)
{
   ASN1T_IMP_PolicyQualifierInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_PolicyQualifierInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_PolicyQualifierInfo (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_PolicyInformation_policyQualifiers::Print (const char* name)
{
   asn1Print_IMP_PolicyInformation_policyQualifiers (name, &msgData);
}

void asn1Print_IMP_PolicyInformation 
   (const char* name, const ASN1T_IMP_PolicyInformation* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_CertPolicyId ("policyIdentifier", &pvalue->policyIdentifier);

   if (pvalue->m.policyQualifiersPresent) {
      asn1Print_IMP_PolicyInformation_policyQualifiers ("policyQualifiers", &
         pvalue->policyQualifiers);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_PolicyInformation::Print (const char* name)
{
   asn1Print_IMP_PolicyInformation (name, &msgData);
}

void asn1Print_IMP_CertificatePolicies 
   (const char* name, const ASN1T_IMP_CertificatePolicies* pvalue)
{
   ASN1T_IMP_PolicyInformation* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_PolicyInformation*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_PolicyInformation (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_CertificatePolicies::Print (const char* name)
{
   asn1Print_IMP_CertificatePolicies (name, &msgData);
}

void asn1Print_IMP_DisplayText 
   (const char* name, const ASN1T_IMP_DisplayText* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* ia5String */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("ia5String", pvalue->u.ia5String);
         break;
      }
      /* visibleString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("visibleString", pvalue->u.visibleString);
         break;
      }
      /* bmpString */
      case 4:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_DisplayText::Print (const char* name)
{
   asn1Print_IMP_DisplayText (name, &msgData);
}

void asn1Print_IMP_NoticeReference_noticeNumbers 
   (const char* name, const ASN1T_IMP_NoticeReference_noticeNumbers* pvalue)
{
   OSINT32* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (OSINT32*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintInteger (namebuf, *pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_NoticeReference_noticeNumbers::Print (const char* name)
{
   asn1Print_IMP_NoticeReference_noticeNumbers (name, &msgData);
}

void asn1Print_IMP_NoticeReference 
   (const char* name, const ASN1T_IMP_NoticeReference* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_DisplayText ("organization", &pvalue->organization);

   asn1Print_IMP_NoticeReference_noticeNumbers ("noticeNumbers", &pvalue->
      noticeNumbers);

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_NoticeReference::Print (const char* name)
{
   asn1Print_IMP_NoticeReference (name, &msgData);
}

void asn1Print_IMP_UserNotice 
   (const char* name, const ASN1T_IMP_UserNotice* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.noticeRefPresent) {
      asn1Print_IMP_NoticeReference ("noticeRef", &pvalue->noticeRef);
   }

   if (pvalue->m.explicitTextPresent) {
      asn1Print_IMP_DisplayText ("explicitText", &pvalue->explicitText);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_UserNotice::Print (const char* name)
{
   asn1Print_IMP_UserNotice (name, &msgData);
}

void asn1Print_IMP_Qualifier 
   (const char* name, const ASN1T_IMP_Qualifier* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* userNotice */
      case 1:
      {
         asn1Print_IMP_UserNotice ("userNotice", pvalue->u.userNotice);
         break;
      }
      /* cPSuri */
      case 2:
      {
         asn1Print_IMP_CPSuri ("cPSuri", pvalue->u.cPSuri);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_Qualifier::Print (const char* name)
{
   asn1Print_IMP_Qualifier (name, &msgData);
}

void asn1Print_IMP_PolicyMappings_element 
   (const char* name, const ASN1T_IMP_PolicyMappings_element* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_CertPolicyId ("issuerDomainPolicy", &pvalue->
      issuerDomainPolicy);

   asn1Print_IMP_CertPolicyId ("subjectDomainPolicy", &pvalue->
      subjectDomainPolicy);

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_PolicyMappings_element::Print (const char* name)
{
   asn1Print_IMP_PolicyMappings_element (name, &msgData);
}

void asn1Print_IMP_PolicyMappings 
   (const char* name, const ASN1T_IMP_PolicyMappings* pvalue)
{
   ASN1T_IMP_PolicyMappings_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_PolicyMappings_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_PolicyMappings_element (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_PolicyMappings::Print (const char* name)
{
   asn1Print_IMP_PolicyMappings (name, &msgData);
}

void asn1Print_IMP_BasicConstraints 
   (const char* name, const ASN1T_IMP_BasicConstraints* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintBoolean ("cA", pvalue->cA);

   if (pvalue->m.pathLenConstraintPresent) {
      rtxPrintIndent ();
      rtxPrintUnsigned ("pathLenConstraint", pvalue->pathLenConstraint);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_BasicConstraints::Print (const char* name)
{
   asn1Print_IMP_BasicConstraints (name, &msgData);
}

void asn1Print_IMP_ExtKeyUsageSyntax 
   (const char* name, const ASN1T_IMP_ExtKeyUsageSyntax* pvalue)
{
   ASN1T_IMP_KeyPurposeId* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_KeyPurposeId*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_KeyPurposeId (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_ExtKeyUsageSyntax::Print (const char* name)
{
   asn1Print_IMP_ExtKeyUsageSyntax (name, &msgData);
}

void asn1Print_IMP_AccessDescription 
   (const char* name, const ASN1T_IMP_AccessDescription* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("accessMethod", (ASN1OBJID*)&pvalue->accessMethod);

   asn1Print_IMP_GeneralName ("accessLocation", &pvalue->accessLocation);

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_AccessDescription::Print (const char* name)
{
   asn1Print_IMP_AccessDescription (name, &msgData);
}

void asn1Print_IMP_AuthorityInfoAccessSyntax 
   (const char* name, const ASN1T_IMP_AuthorityInfoAccessSyntax* pvalue)
{
   ASN1T_IMP_AccessDescription* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_AccessDescription*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_AccessDescription (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_AuthorityInfoAccessSyntax::Print (const char* name)
{
   asn1Print_IMP_AuthorityInfoAccessSyntax (name, &msgData);
}

void asn1Print_IMP_SubjectInfoAccessSyntax 
   (const char* name, const ASN1T_IMP_SubjectInfoAccessSyntax* pvalue)
{
   ASN1T_IMP_AccessDescription* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_AccessDescription*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_AccessDescription (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_SubjectInfoAccessSyntax::Print (const char* name)
{
   asn1Print_IMP_SubjectInfoAccessSyntax (name, &msgData);
}

void asn1Print_IMP_SubjectDirectoryAttributes 
   (const char* name, const ASN1T_IMP_SubjectDirectoryAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Attribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_SubjectDirectoryAttributes::Print (const char* name)
{
   asn1Print_IMP_SubjectDirectoryAttributes (name, &msgData);
}

void asn1Print_IMP_RoleSyntax 
   (const char* name, const ASN1T_IMP_RoleSyntax* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.roleAuthorityPresent) {
      asn1Print_IMP_GeneralNames ("roleAuthority", &pvalue->roleAuthority);
   }

   asn1Print_IMP_GeneralName ("roleName", &pvalue->roleName);

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_RoleSyntax::Print (const char* name)
{
   asn1Print_IMP_RoleSyntax (name, &msgData);
}

void asn1Print_IMP_GeneralSubtree 
   (const char* name, const ASN1T_IMP_GeneralSubtree* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_IMP_GeneralName ("base", &pvalue->base);

   asn1Print_IMP_BaseDistance ("minimum", &pvalue->minimum);

   if (pvalue->m.maximumPresent) {
      asn1Print_IMP_BaseDistance ("maximum", &pvalue->maximum);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_GeneralSubtree::Print (const char* name)
{
   asn1Print_IMP_GeneralSubtree (name, &msgData);
}

void asn1Print_IMP_GeneralSubtrees 
   (const char* name, const ASN1T_IMP_GeneralSubtrees* pvalue)
{
   ASN1T_IMP_GeneralSubtree* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_IMP_GeneralSubtree*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_IMP_GeneralSubtree (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_IMP_GeneralSubtrees::Print (const char* name)
{
   asn1Print_IMP_GeneralSubtrees (name, &msgData);
}

void asn1Print_IMP_NameConstraints 
   (const char* name, const ASN1T_IMP_NameConstraints* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.permittedSubtreesPresent) {
      asn1Print_IMP_GeneralSubtrees ("permittedSubtrees", &pvalue->
         permittedSubtrees);
   }

   if (pvalue->m.excludedSubtreesPresent) {
      asn1Print_IMP_GeneralSubtrees ("excludedSubtrees", &pvalue->
         excludedSubtrees);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_NameConstraints::Print (const char* name)
{
   asn1Print_IMP_NameConstraints (name, &msgData);
}

void asn1Print_IMP_PolicyConstraints 
   (const char* name, const ASN1T_IMP_PolicyConstraints* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.requireExplicitPolicyPresent) {
      asn1Print_IMP_SkipCerts ("requireExplicitPolicy", &pvalue->
         requireExplicitPolicy);
   }

   if (pvalue->m.inhibitPolicyMappingPresent) {
      asn1Print_IMP_SkipCerts ("inhibitPolicyMapping", &pvalue->
         inhibitPolicyMapping);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_PolicyConstraints::Print (const char* name)
{
   asn1Print_IMP_PolicyConstraints (name, &msgData);
}

void asn1Print_IMP_IssuingDistributionPoint 
   (const char* name, const ASN1T_IMP_IssuingDistributionPoint* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.distributionPointPresent) {
      asn1Print_IMP_DistributionPointName ("distributionPoint", &pvalue->
         distributionPoint);
   }

   rtxPrintIndent ();
   rtxPrintBoolean ("onlyContainsUserCerts", pvalue->onlyContainsUserCerts);

   rtxPrintIndent ();
   rtxPrintBoolean ("onlyContainsCACerts", pvalue->onlyContainsCACerts);

   if (pvalue->m.onlySomeReasonsPresent) {
      asn1Print_IMP_ReasonFlags ("onlySomeReasons", &pvalue->onlySomeReasons);
   }

   rtxPrintIndent ();
   rtxPrintBoolean ("indirectCRL", pvalue->indirectCRL);

   rtxPrintIndent ();
   rtxPrintBoolean ("onlyContainsAttributeCerts", pvalue->onlyContainsAttributeCerts);

   rtxPrintCloseBrace ();
}

void ASN1C_IMP_IssuingDistributionPoint::Print (const char* name)
{
   asn1Print_IMP_IssuingDistributionPoint (name, &msgData);
}

