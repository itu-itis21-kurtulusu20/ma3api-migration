/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "ASN_SertifikaDeposu.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_SD_KokSertifikaTipi (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_KokSertifikaTipi* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtxPrintToStream (pctxt, name);
   switch (*pvalue) {
      case 1:
         rtxPrintToStream (pctxt, " = kokSertifika\n");
         break;
      case 2:
         rtxPrintToStream (pctxt, " = caprazSertifika\n");
         break;
      case 3:
         rtxPrintToStream (pctxt, " = smSertifikasi\n");
         break;
      case 4:
         rtxPrintToStream (pctxt, " = hizmetSertifikasi\n");
         break;
      default:
         rtxPrintToStream (pctxt," = ???\n");
   }

   return 0;
}

int ASN1C_SD_KokSertifikaTipi::toStream (const char* name)

{
   asn1PrtToStrm_SD_KokSertifikaTipi (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_KokSertifikaTipi::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_SD_KOKGuvenSeviyesi (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_KOKGuvenSeviyesi* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtxPrintToStream (pctxt, name);
   switch (*pvalue) {
      case 1:
         rtxPrintToStream (pctxt, " = kanuni\n");
         break;
      case 2:
         rtxPrintToStream (pctxt, " = kurumsal\n");
         break;
      case 3:
         rtxPrintToStream (pctxt, " = kisisel\n");
         break;
      default:
         rtxPrintToStream (pctxt," = ???\n");
   }

   return 0;
}

int ASN1C_SD_KOKGuvenSeviyesi::toStream (const char* name)

{
   asn1PrtToStrm_SD_KOKGuvenSeviyesi (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_KOKGuvenSeviyesi::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_SD_DepoASNEklenecekKokSertifika (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNEklenecekKokSertifika* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "kokSertifikaValue", pvalue->kokSertifikaValue.numocts, pvalue->kokSertifikaValue.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "kokSertifikaHash", pvalue->kokSertifikaHash.numocts, pvalue->kokSertifikaHash.data);

   asn1PrtToStrm_EXP_CertificateSerialNumber (pctxt, "kokSerialNumber", &pvalue->kokSerialNumber);

   asn1PrtToStrm_EXP_Name (pctxt, "kokIssuerName", &pvalue->kokIssuerName);

   asn1PrtToStrm_EXP_Name (pctxt, "kokSubjectName", &pvalue->kokSubjectName);

   asn1PrtToStrm_EXP_Time (pctxt, "kokStartDate", &pvalue->kokStartDate);

   asn1PrtToStrm_EXP_Time (pctxt, "kokEndDate", &pvalue->kokEndDate);

   asn1PrtToStrm_IMP_KeyUsage (pctxt, "kokKeyUsage", &pvalue->kokKeyUsage);

   asn1PrtToStrm_IMP_SubjectKeyIdentifier (pctxt, "kokSubjectKeyIdentifier", &pvalue->kokSubjectKeyIdentifier);

   asn1PrtToStrm_SD_KokSertifikaTipi (pctxt, "kokSertifikaTipi", &pvalue->kokSertifikaTipi);

   asn1PrtToStrm_SD_KOKGuvenSeviyesi (pctxt, "kokGuvenSeviyesi", &pvalue->kokGuvenSeviyesi);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_SD_DepoASNEklenecekKokSertifika::toStream (const char* name)

{
   asn1PrtToStrm_SD_DepoASNEklenecekKokSertifika (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_DepoASNEklenecekKokSertifika::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_SD_DepoASNSilinecekKokSertifika (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNSilinecekKokSertifika* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "kokSertifikaValue", pvalue->kokSertifikaValue.numocts, pvalue->kokSertifikaValue.data);

   asn1PrtToStrm_EXP_CertificateSerialNumber (pctxt, "kokSerialNumber", &pvalue->kokSerialNumber);

   asn1PrtToStrm_EXP_Name (pctxt, "kokIssuerName", &pvalue->kokIssuerName);

   asn1PrtToStrm_EXP_Name (pctxt, "kokSubjectName", &pvalue->kokSubjectName);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_SD_DepoASNSilinecekKokSertifika::toStream (const char* name)

{
   asn1PrtToStrm_SD_DepoASNSilinecekKokSertifika (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_DepoASNSilinecekKokSertifika::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_SD_DepoASNKokSertifika (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNKokSertifika* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* eklenecekSertifika */
      case 1:
      {
         asn1PrtToStrm_SD_DepoASNEklenecekKokSertifika (pctxt, "eklenecekSertifika", pvalue->u.eklenecekSertifika);
         break;
      }
      /* silinecekSertifika */
      case 2:
      {
         asn1PrtToStrm_SD_DepoASNSilinecekKokSertifika (pctxt, "silinecekSertifika", pvalue->u.silinecekSertifika);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_SD_DepoASNKokSertifika::toStream (const char* name)

{
   asn1PrtToStrm_SD_DepoASNKokSertifika (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_DepoASNKokSertifika::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_SD_DepoASNKokSertifikalar (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNKokSertifikalar* pvalue)
{
   ASN1T_SD_DepoASNKokSertifika* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_SD_DepoASNKokSertifika*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_SD_DepoASNKokSertifika (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_SD_DepoASNKokSertifikalar::toStream (const char* name)

{
   asn1PrtToStrm_SD_DepoASNKokSertifikalar (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_DepoASNKokSertifikalar::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_SD_DepoASNRawImza (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNRawImza* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "publicKeyHash", pvalue->publicKeyHash.numocts, pvalue->publicKeyHash.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "imza", pvalue->imza.numocts, pvalue->imza.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_SD_DepoASNRawImza::toStream (const char* name)

{
   asn1PrtToStrm_SD_DepoASNRawImza (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_DepoASNRawImza::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_SD_DepoASNImza (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNImza* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_SD_DepoASNKokSertifika (pctxt, "imzalanan", &pvalue->imzalanan);

   asn1PrtToStrm_SD_DepoASNRawImza (pctxt, "imza", &pvalue->imza);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_SD_DepoASNImza::toStream (const char* name)

{
   asn1PrtToStrm_SD_DepoASNImza (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_DepoASNImza::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_SD_DepoASNImzalar (OSCTXT *pctxt, 
   const char* name, const ASN1T_SD_DepoASNImzalar* pvalue)
{
   ASN1T_SD_DepoASNImza* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_SD_DepoASNImza*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_SD_DepoASNImza (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_SD_DepoASNImzalar::toStream (const char* name)

{
   asn1PrtToStrm_SD_DepoASNImzalar (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_SD_DepoASNImzalar::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

