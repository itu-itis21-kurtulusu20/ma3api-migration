/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "attrcert.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_ATTRCERT_AttCertVersion (const char* name, 
   ASN1T_ATTRCERT_AttCertVersion* pValue, 
   ASN1T_ATTRCERT_AttCertVersion* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ATTRCERT_AttCertVersion::Equals (ASN1T_ATTRCERT_AttCertVersion* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttCertVersion ("AttCertVersion", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_ClassList (const char* name, 
   ASN1T_ATTRCERT_ClassList* pValue, ASN1T_ATTRCERT_ClassList* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpBitStr (name, pValue->numbits, pValue->data, 
      pCmpValue->numbits, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_ATTRCERT_ClassList::Equals (ASN1T_ATTRCERT_ClassList* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_ClassList ("ClassList", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttCertVersionV1 (const char* name, 
   ASN1T_ATTRCERT_AttCertVersionV1* pValue, 
   ASN1T_ATTRCERT_AttCertVersionV1* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ATTRCERT_AttCertVersionV1::Equals (ASN1T_ATTRCERT_AttCertVersionV1* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttCertVersionV1 ("AttCertVersionV1", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_ObjectDigestInfo_digestedObjectType (
   const char* name, 
   ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pValue, 
   ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ATTRCERT_ObjectDigestInfo_digestedObjectType::Equals (ASN1T_ATTRCERT_ObjectDigestInfo_digestedObjectType* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_ObjectDigestInfo_digestedObjectType ("ObjectDigestInfo_digestedObjectType", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_IssuerSerial (const char* name, 
   ASN1T_ATTRCERT_IssuerSerial* pValue, 
   ASN1T_ATTRCERT_IssuerSerial* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".issuer", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->issuer, &pCmpValue->issuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".serial", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->serial, &pCmpValue->serial, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerUID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.issuerUIDPresent,
   pCmpValue->m.issuerUIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.issuerUIDPresent) 
   {
      if (! asn1Compare_EXP_UniqueIdentifier (namebuf, &pValue->issuerUID, &pCmpValue->issuerUID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_IssuerSerial::Equals (ASN1T_ATTRCERT_IssuerSerial* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_IssuerSerial ("IssuerSerial", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_ObjectDigestInfo (const char* name, 
   ASN1T_ATTRCERT_ObjectDigestInfo* pValue, 
   ASN1T_ATTRCERT_ObjectDigestInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".digestedObjectType", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_ObjectDigestInfo_digestedObjectType (namebuf, &pValue->digestedObjectType, &pCmpValue->digestedObjectType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".otherObjectTypeID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.otherObjectTypeIDPresent,
   pCmpValue->m.otherObjectTypeIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.otherObjectTypeIDPresent) 
   {
      if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->otherObjectTypeID, (ASN1OBJID*)&pCmpValue->otherObjectTypeID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".digestAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->digestAlgorithm, &pCmpValue->digestAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".objectDigest", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->objectDigest.numbits, 
      pValue->objectDigest.data, pCmpValue->objectDigest.numbits, 
      pCmpValue->objectDigest.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_ObjectDigestInfo::Equals (ASN1T_ATTRCERT_ObjectDigestInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_ObjectDigestInfo ("ObjectDigestInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_Holder (const char* name, 
   ASN1T_ATTRCERT_Holder* pValue, ASN1T_ATTRCERT_Holder* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".baseCertificateID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.baseCertificateIDPresent,
   pCmpValue->m.baseCertificateIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.baseCertificateIDPresent) 
   {
      if (! asn1Compare_ATTRCERT_IssuerSerial (namebuf, &pValue->baseCertificateID, &pCmpValue->baseCertificateID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".entityName", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.entityNamePresent,
   pCmpValue->m.entityNamePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.entityNamePresent) 
   {
      if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->entityName, &pCmpValue->entityName, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".objectDigestInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.objectDigestInfoPresent,
   pCmpValue->m.objectDigestInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.objectDigestInfoPresent) 
   {
      if (! asn1Compare_ATTRCERT_ObjectDigestInfo (namebuf, &pValue->objectDigestInfo, &pCmpValue->objectDigestInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_Holder::Equals (ASN1T_ATTRCERT_Holder* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_Holder ("Holder", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_V2Form (const char* name, 
   ASN1T_ATTRCERT_V2Form* pValue, ASN1T_ATTRCERT_V2Form* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".issuerName", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.issuerNamePresent,
   pCmpValue->m.issuerNamePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.issuerNamePresent) 
   {
      if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->issuerName, &pCmpValue->issuerName, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".baseCertificateID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.baseCertificateIDPresent,
   pCmpValue->m.baseCertificateIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.baseCertificateIDPresent) 
   {
      if (! asn1Compare_ATTRCERT_IssuerSerial (namebuf, &pValue->baseCertificateID, &pCmpValue->baseCertificateID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".objectDigestInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.objectDigestInfoPresent,
   pCmpValue->m.objectDigestInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.objectDigestInfoPresent) 
   {
      if (! asn1Compare_ATTRCERT_ObjectDigestInfo (namebuf, &pValue->objectDigestInfo, &pCmpValue->objectDigestInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_V2Form::Equals (ASN1T_ATTRCERT_V2Form* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_V2Form ("V2Form", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttCertIssuer (const char* name, 
   ASN1T_ATTRCERT_AttCertIssuer* pValue, 
   ASN1T_ATTRCERT_AttCertIssuer* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* v1Form */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.v1Form", 0, 0, 0);
         if (! asn1Compare_IMP_GeneralNames (namebuf, pValue->u.v1Form, pCmpValue->u.v1Form, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* v2Form */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.v2Form", 0, 0, 0);
         if (! asn1Compare_ATTRCERT_V2Form (namebuf, pValue->u.v2Form, pCmpValue->u.v2Form, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ATTRCERT_AttCertIssuer::Equals (ASN1T_ATTRCERT_AttCertIssuer* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttCertIssuer ("AttCertIssuer", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttCertValidityPeriod (const char* name, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pValue, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".notBeforeTime", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->notBeforeTime, pCmpValue->notBeforeTime, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".notAfterTime", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->notAfterTime, pCmpValue->notAfterTime, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_AttCertValidityPeriod::Equals (ASN1T_ATTRCERT_AttCertValidityPeriod* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttCertValidityPeriod ("AttCertValidityPeriod", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT__SeqOfATTRCERT_Attribute (const char* name, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pValue, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_Attribute* pdata;
   ASN1T_EXP_Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Attribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute::Equals (ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT__SeqOfATTRCERT_Attribute ("_SeqOfATTRCERT_Attribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttributeCertificateInfo (const char* name, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_AttCertVersion (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".holder", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_Holder (namebuf, &pValue->holder, &pCmpValue->holder, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuer", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_AttCertIssuer (namebuf, &pValue->issuer, &pCmpValue->issuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signature_, &pCmpValue->signature_, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".serialNumber", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->serialNumber, &pCmpValue->serialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".attrCertValidityPeriod", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_AttCertValidityPeriod (namebuf, &pValue->attrCertValidityPeriod, &pCmpValue->attrCertValidityPeriod, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".attributes", 0, 0, 0);
   if (! asn1Compare_ATTRCERT__SeqOfATTRCERT_Attribute (namebuf, &pValue->attributes, &pCmpValue->attributes, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerUniqueID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.issuerUniqueIDPresent,
   pCmpValue->m.issuerUniqueIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.issuerUniqueIDPresent) 
   {
      if (! asn1Compare_EXP_UniqueIdentifier (namebuf, &pValue->issuerUniqueID, &pCmpValue->issuerUniqueID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".extensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.extensionsPresent,
   pCmpValue->m.extensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.extensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->extensions, &pCmpValue->extensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_AttributeCertificateInfo::Equals (ASN1T_ATTRCERT_AttributeCertificateInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttributeCertificateInfo ("AttributeCertificateInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttributeCertificate (const char* name, 
   ASN1T_ATTRCERT_AttributeCertificate* pValue, 
   ASN1T_ATTRCERT_AttributeCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".acinfo", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_AttributeCertificateInfo (namebuf, &pValue->acinfo, &pCmpValue->acinfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signatureAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signatureAlgorithm, &pCmpValue->signatureAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signatureValue", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->signatureValue.numbits, 
      pValue->signatureValue.data, pCmpValue->signatureValue.numbits, 
      pCmpValue->signatureValue.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_AttributeCertificate::Equals (ASN1T_ATTRCERT_AttributeCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttributeCertificate ("AttributeCertificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_TargetCert (const char* name, 
   ASN1T_ATTRCERT_TargetCert* pValue, ASN1T_ATTRCERT_TargetCert* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".targetCertificate", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_IssuerSerial (namebuf, &pValue->targetCertificate, &pCmpValue->targetCertificate, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".targetName", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.targetNamePresent,
   pCmpValue->m.targetNamePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.targetNamePresent) 
   {
      if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->targetName, &pCmpValue->targetName, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".certDigestInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.certDigestInfoPresent,
   pCmpValue->m.certDigestInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.certDigestInfoPresent) 
   {
      if (! asn1Compare_ATTRCERT_ObjectDigestInfo (namebuf, &pValue->certDigestInfo, &pCmpValue->certDigestInfo, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_TargetCert::Equals (ASN1T_ATTRCERT_TargetCert* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_TargetCert ("TargetCert", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_Target (const char* name, 
   ASN1T_ATTRCERT_Target* pValue, ASN1T_ATTRCERT_Target* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* targetName */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.targetName", 0, 0, 0);
         if (! asn1Compare_IMP_GeneralName (namebuf, pValue->u.targetName, pCmpValue->u.targetName, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* targetGroup */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.targetGroup", 0, 0, 0);
         if (! asn1Compare_IMP_GeneralName (namebuf, pValue->u.targetGroup, pCmpValue->u.targetGroup, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* targetCert */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.targetCert", 0, 0, 0);
         if (! asn1Compare_ATTRCERT_TargetCert (namebuf, pValue->u.targetCert, pCmpValue->u.targetCert, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ATTRCERT_Target::Equals (ASN1T_ATTRCERT_Target* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_Target ("Target", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_Targets (const char* name, 
   ASN1T_ATTRCERT_Targets* pValue, ASN1T_ATTRCERT_Targets* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_ATTRCERT_Target* pdata;
   ASN1T_ATTRCERT_Target* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ATTRCERT_Target*) pnode->data;
      pCmpdata = (ASN1T_ATTRCERT_Target*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ATTRCERT_Target (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_Targets::Equals (ASN1T_ATTRCERT_Targets* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_Targets ("Targets", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_IetfAttrSyntax_values_element (const char* name, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pValue, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* octets */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.octets", 0, 0, 0);
         if ( !rtCmpOctStr (namebuf, pValue->u.octets->numocts, 
            pValue->u.octets->data, pCmpValue->u.octets->numocts, 
            pCmpValue->u.octets->data, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* oid */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.oid", 0, 0, 0);
         if ( !rtCmpOID (namebuf, (ASN1OBJID*)pValue->u.oid, (ASN1OBJID*)pCmpValue->u.oid, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* string */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.string", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.string, (const char*)pCmpValue->u.string, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ATTRCERT_IetfAttrSyntax_values_element::Equals (ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_IetfAttrSyntax_values_element ("IetfAttrSyntax_values_element", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (
   const char* name, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pValue, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pdata;
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ATTRCERT_IetfAttrSyntax_values_element*) pnode->data;
      pCmpdata = (ASN1T_ATTRCERT_IetfAttrSyntax_values_element*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ATTRCERT_IetfAttrSyntax_values_element (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element::Equals (ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element ("_SeqOfATTRCERT_IetfAttrSyntax_values_element", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_IetfAttrSyntax (const char* name, 
   ASN1T_ATTRCERT_IetfAttrSyntax* pValue, 
   ASN1T_ATTRCERT_IetfAttrSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".policyAuthority", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.policyAuthorityPresent,
   pCmpValue->m.policyAuthorityPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.policyAuthorityPresent) 
   {
      if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->policyAuthority, &pCmpValue->policyAuthority, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".values", 0, 0, 0);
   if (! asn1Compare_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (namebuf, &pValue->values, &pCmpValue->values, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_IetfAttrSyntax::Equals (ASN1T_ATTRCERT_IetfAttrSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_IetfAttrSyntax ("IetfAttrSyntax", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_SvceAuthInfo (const char* name, 
   ASN1T_ATTRCERT_SvceAuthInfo* pValue, 
   ASN1T_ATTRCERT_SvceAuthInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".service", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->service, &pCmpValue->service, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".ident", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->ident, &pCmpValue->ident, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".authInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.authInfoPresent,
   pCmpValue->m.authInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.authInfoPresent) 
   {
      if ( !rtCmpOctStr (namebuf, pValue->authInfo.numocts, 
         pValue->authInfo.data, pCmpValue->authInfo.numocts, 
         pCmpValue->authInfo.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_SvceAuthInfo::Equals (ASN1T_ATTRCERT_SvceAuthInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_SvceAuthInfo ("SvceAuthInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_RoleSyntax (const char* name, 
   ASN1T_ATTRCERT_RoleSyntax* pValue, ASN1T_ATTRCERT_RoleSyntax* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".roleAuthority", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.roleAuthorityPresent,
   pCmpValue->m.roleAuthorityPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.roleAuthorityPresent) 
   {
      if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->roleAuthority, &pCmpValue->roleAuthority, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".roleName", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->roleName, &pCmpValue->roleName, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_RoleSyntax::Equals (ASN1T_ATTRCERT_RoleSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_RoleSyntax ("RoleSyntax", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_SecurityCategory (const char* name, 
   ASN1T_ATTRCERT_SecurityCategory* pValue, 
   ASN1T_ATTRCERT_SecurityCategory* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".type", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->type, (ASN1OBJID*)&pCmpValue->type, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".value", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->value.numocts,
   pValue->value.data,
   pCmpValue->value.numocts,
   pCmpValue->value.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_SecurityCategory::Equals (ASN1T_ATTRCERT_SecurityCategory* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_SecurityCategory ("SecurityCategory", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT__SetOfATTRCERT_SecurityCategory (const char* name, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pValue, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ATTRCERT_SecurityCategory* pdata;
   ASN1T_ATTRCERT_SecurityCategory* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ATTRCERT_SecurityCategory*) pnode->data;
      pCmpdata = (ASN1T_ATTRCERT_SecurityCategory*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ATTRCERT_SecurityCategory (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory::Equals (ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT__SetOfATTRCERT_SecurityCategory ("_SetOfATTRCERT_SecurityCategory", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_Clearance (const char* name, 
   ASN1T_ATTRCERT_Clearance* pValue, ASN1T_ATTRCERT_Clearance* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".policyId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->policyId, (ASN1OBJID*)&pCmpValue->policyId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".classList", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.classListPresent,
   pCmpValue->m.classListPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.classListPresent) 
   {
      if (! asn1Compare_ATTRCERT_ClassList (namebuf, &pValue->classList, &pCmpValue->classList, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".securityCategories", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.securityCategoriesPresent,
   pCmpValue->m.securityCategoriesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.securityCategoriesPresent) 
   {
      if (! asn1Compare_ATTRCERT__SetOfATTRCERT_SecurityCategory (namebuf, &pValue->securityCategories, &pCmpValue->securityCategories, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_Clearance::Equals (ASN1T_ATTRCERT_Clearance* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_Clearance ("Clearance", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttrSpec (const char* name, 
   ASN1T_ATTRCERT_AttrSpec* pValue, ASN1T_ATTRCERT_AttrSpec* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1TObjId* pdata;
   ASN1TObjId* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1TObjId*) pnode->data;
      pCmpdata = (ASN1TObjId*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpOID (namebuf, (ASN1OBJID*)pdata, (ASN1OBJID*)pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_AttrSpec::Equals (ASN1T_ATTRCERT_AttrSpec* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttrSpec ("AttrSpec", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AAControls (const char* name, 
   ASN1T_ATTRCERT_AAControls* pValue, ASN1T_ATTRCERT_AAControls* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".pathLenConstraint", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.pathLenConstraintPresent,
   pCmpValue->m.pathLenConstraintPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.pathLenConstraintPresent) 
   {
      if ( !rtCmpUnsigned (namebuf, pValue->pathLenConstraint, pCmpValue->pathLenConstraint, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".permittedAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.permittedAttrsPresent,
   pCmpValue->m.permittedAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.permittedAttrsPresent) 
   {
      if (! asn1Compare_ATTRCERT_AttrSpec (namebuf, &pValue->permittedAttrs, &pCmpValue->permittedAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".excludedAttrs", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.excludedAttrsPresent,
   pCmpValue->m.excludedAttrsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.excludedAttrsPresent) 
   {
      if (! asn1Compare_ATTRCERT_AttrSpec (namebuf, &pValue->excludedAttrs, &pCmpValue->excludedAttrs, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".permitUnSpecified", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->permitUnSpecified, pCmpValue->permitUnSpecified, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_AAControls::Equals (ASN1T_ATTRCERT_AAControls* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AAControls ("AAControls", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_ACClearAttrs (const char* name, 
   ASN1T_ATTRCERT_ACClearAttrs* pValue, 
   ASN1T_ATTRCERT_ACClearAttrs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".acIssuer", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->acIssuer, &pCmpValue->acIssuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".acSerial", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->acSerial, pCmpValue->acSerial, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".attrs", 0, 0, 0);
   if (! asn1Compare_ATTRCERT__SeqOfATTRCERT_Attribute (namebuf, &pValue->attrs, &pCmpValue->attrs, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_ACClearAttrs::Equals (ASN1T_ATTRCERT_ACClearAttrs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_ACClearAttrs ("ACClearAttrs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_ProxyInfo (const char* name, 
   ASN1T_ATTRCERT_ProxyInfo* pValue, ASN1T_ATTRCERT_ProxyInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_ATTRCERT_Targets* pdata;
   ASN1T_ATTRCERT_Targets* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ATTRCERT_Targets*) pnode->data;
      pCmpdata = (ASN1T_ATTRCERT_Targets*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ATTRCERT_Targets (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_ProxyInfo::Equals (ASN1T_ATTRCERT_ProxyInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_ProxyInfo ("ProxyInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttributeCertificateInfoV1_subject (
   const char* name, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* baseCertificateID */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.baseCertificateID", 0, 0, 0);
         if (! asn1Compare_ATTRCERT_IssuerSerial (namebuf, pValue->u.baseCertificateID, pCmpValue->u.baseCertificateID, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* subjectName */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.subjectName", 0, 0, 0);
         if (! asn1Compare_IMP_GeneralNames (namebuf, pValue->u.subjectName, pCmpValue->u.subjectName, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject::Equals (ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttributeCertificateInfoV1_subject ("AttributeCertificateInfoV1_subject", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttributeCertificateInfoV1 (const char* name, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_AttCertVersionV1 (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".subject", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_AttributeCertificateInfoV1_subject (namebuf, &pValue->subject, &pCmpValue->subject, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuer", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->issuer, &pCmpValue->issuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signature_, &pCmpValue->signature_, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".serialNumber", 0, 0, 0);
   if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->serialNumber, &pCmpValue->serialNumber, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".attCertValidityPeriod", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_AttCertValidityPeriod (namebuf, &pValue->attCertValidityPeriod, &pCmpValue->attCertValidityPeriod, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".attributes", 0, 0, 0);
   if (! asn1Compare_ATTRCERT__SeqOfATTRCERT_Attribute (namebuf, &pValue->attributes, &pCmpValue->attributes, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerUniqueID", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.issuerUniqueIDPresent,
   pCmpValue->m.issuerUniqueIDPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.issuerUniqueIDPresent) 
   {
      if (! asn1Compare_EXP_UniqueIdentifier (namebuf, &pValue->issuerUniqueID, &pCmpValue->issuerUniqueID, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".extensions", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.extensionsPresent,
   pCmpValue->m.extensionsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.extensionsPresent) 
   {
      if (! asn1Compare_EXP_Extensions (namebuf, &pValue->extensions, &pCmpValue->extensions, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_AttributeCertificateInfoV1::Equals (ASN1T_ATTRCERT_AttributeCertificateInfoV1* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttributeCertificateInfoV1 ("AttributeCertificateInfoV1", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ATTRCERT_AttributeCertificateV1 (const char* name, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pValue, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".acInfo", 0, 0, 0);
   if (! asn1Compare_ATTRCERT_AttributeCertificateInfoV1 (namebuf, &pValue->acInfo, &pCmpValue->acInfo, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signatureAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->signatureAlgorithm, &pCmpValue->signatureAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signature_", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->signature_.numbits, 
      pValue->signature_.data, pCmpValue->signature_.numbits, 
      pCmpValue->signature_.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ATTRCERT_AttributeCertificateV1::Equals (ASN1T_ATTRCERT_AttributeCertificateV1* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ATTRCERT_AttributeCertificateV1 ("AttributeCertificateV1", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

