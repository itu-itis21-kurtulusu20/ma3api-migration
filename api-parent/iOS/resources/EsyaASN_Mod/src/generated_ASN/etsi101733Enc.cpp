/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "etsi101733.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_ETSI101733_OtherHashValue (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherHashValue *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherHashValue");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SignaturePolicyImplied_ (OSCTXT* pctxt,
   void *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   OS_UNUSED_ARG (pvalue) ;

   RTXCTXTPUSHTYPENAME (pctxt, "SignaturePolicyImplied");

   ll = xe_null (pctxt, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SigPolicyId (OSCTXT* pctxt,
   ASN1T_ETSI101733_SigPolicyId *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SigPolicyId");

   ll = xe_objid (pctxt, (ASN1OBJID*)pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OtherHashAlgAndValue (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherHashAlgAndValue *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherHashAlgAndValue");

   /* encode hashValue */

   RTXCTXTPUSHELEMNAME (pctxt, "hashValue");

   ll = asn1E_ETSI101733_OtherHashValue (pctxt, &pvalue->hashValue, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode hashAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "hashAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SigPolicyHash (OSCTXT* pctxt,
   ASN1T_ETSI101733_SigPolicyHash *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SigPolicyHash");

   ll = asn1E_ETSI101733_OtherHashAlgAndValue (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SPuri (OSCTXT* pctxt,
   ASN1T_ETSI101733_SPuri pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SPuri");

   ll = xe_charstr (pctxt, pvalue, tagging, TM_UNIV|TM_PRIM|22);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_ContentTimestamp (OSCTXT* pctxt,
   ASN1T_ETSI101733_ContentTimestamp *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentTimestamp");

   ll = asn1E_TSP_TimeStampToken (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SignatureTimeStampToken (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignatureTimeStampToken *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignatureTimeStampToken");

   ll = asn1E_TSP_TimeStampToken (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_ESCTimeStampToken (OSCTXT* pctxt,
   ASN1T_ETSI101733_ESCTimeStampToken *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESCTimeStampToken");

   ll = asn1E_TSP_TimeStampToken (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_TimestampedCertsCRLs (OSCTXT* pctxt,
   ASN1T_ETSI101733_TimestampedCertsCRLs *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TimestampedCertsCRLs");

   ll = asn1E_TSP_TimeStampToken (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_ArchiveTimeStampToken (OSCTXT* pctxt,
   ASN1T_ETSI101733_ArchiveTimeStampToken *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ArchiveTimeStampToken");

   ll = asn1E_TSP_TimeStampToken (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_ContentIdentifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_ContentIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentIdentifier");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CommitmentTypeIdentifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_CommitmentTypeIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CommitmentTypeIdentifier");

   ll = xe_objid (pctxt, (ASN1OBJID*)pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CertifiedAttributes (OSCTXT* pctxt,
   ASN1T_ETSI101733_CertifiedAttributes *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertifiedAttributes");

   ll = asn1E_ATTRCERT_AttributeCertificate (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OtherHash (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherHash *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherHash");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "sha1Hash");

         ll = asn1E_ETSI101733_OtherHashValue (pctxt, pvalue->u.sha1Hash, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "otherHash");

         ll = asn1E_ETSI101733_OtherHashAlgAndValue (pctxt, pvalue->u.otherHash, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OtherCertID (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherCertID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherCertID");

   /* encode issuerSerial */

   if (pvalue->m.issuerSerialPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "issuerSerial");

      ll = asn1E_ATTRCERT_IssuerSerial (pctxt, &pvalue->issuerSerial, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode otherCertHash */

   RTXCTXTPUSHELEMNAME (pctxt, "otherCertHash");

   ll = asn1E_ETSI101733_OtherHash (pctxt, &pvalue->otherCertHash, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OtherCertID", xx1);

      ll = asn1E_ETSI101733_OtherCertID (pctxt, ((ASN1T_ETSI101733_OtherCertID*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "PolicyInformation", xx1);

      ll = asn1E_IMP_PolicyInformation (pctxt, ((ASN1T_IMP_PolicyInformation*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OtherSigningCertificate (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherSigningCertificate *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherSigningCertificate");

   /* encode policies */

   if (pvalue->m.policiesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "policies");

      ll = asn1E_ETSI101733__SeqOfETSI101733_PolicyInformation (pctxt, &pvalue->policies, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certs */

   RTXCTXTPUSHELEMNAME (pctxt, "certs");

   ll = asn1E_ETSI101733__SeqOfETSI101733_OtherCertID (pctxt, &pvalue->certs, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SigPolicyQualifierInfo (OSCTXT* pctxt,
   ASN1T_ETSI101733_SigPolicyQualifierInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SigPolicyQualifierInfo");

   /* encode qualifier */

   if (pvalue->m.qualifierPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "qualifier");

      ll = xe_OpenType (pctxt, pvalue->qualifier.data, pvalue->qualifier.numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode sigPolicyQualifierId */

   RTXCTXTPUSHELEMNAME (pctxt, "sigPolicyQualifierId");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->sigPolicyQualifierId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SigPolicyQualifierInfo", xx1);

      ll = asn1E_ETSI101733_SigPolicyQualifierInfo (pctxt, ((ASN1T_ETSI101733_SigPolicyQualifierInfo*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SignaturePolicyId (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignaturePolicyId *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignaturePolicyId");

   /* encode sigPolicyQualifiers */

   if (pvalue->m.sigPolicyQualifiersPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "sigPolicyQualifiers");

      ll = asn1E_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (pctxt, &pvalue->sigPolicyQualifiers, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode sigPolicyHash */

   RTXCTXTPUSHELEMNAME (pctxt, "sigPolicyHash");

   ll = asn1E_ETSI101733_SigPolicyHash (pctxt, &pvalue->sigPolicyHash, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode sigPolicyId */

   RTXCTXTPUSHELEMNAME (pctxt, "sigPolicyId");

   ll = asn1E_ETSI101733_SigPolicyId (pctxt, &pvalue->sigPolicyId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SignaturePolicy (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignaturePolicy *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;
   OS_UNUSED_ARG (pvalue) ;

   RTXCTXTPUSHTYPENAME (pctxt, "SignaturePolicy");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "signaturePolicyImplied");

         ll = asn1E_ETSI101733_SignaturePolicyImplied (pctxt, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "signaturePolicyId");

         ll = asn1E_ETSI101733_SignaturePolicyId (pctxt, pvalue->u.signaturePolicyId, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_DisplayText (OSCTXT* pctxt,
   ASN1T_ETSI101733_DisplayText *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DisplayText");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "utf8String");

         { int nchars = rtxUTF8Len (pvalue->u.utf8String);
         if (!((nchars >= 1 && nchars <= 200))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }
         ll = xe_utf8str (pctxt, pvalue->u.utf8String, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "visibleString");

         { OSSIZE nchars = OSCRTLSTRLEN (pvalue->u.visibleString);
         if (!((nchars >= 1 && nchars <= 200))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         ll = xe_charstr (pctxt, pvalue->u.visibleString, ASN1EXPL, TM_UNIV|TM_PRIM|26);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "bmpString");

         if (!((pvalue->u.bmpString->nchars >= 1 && pvalue->u.bmpString->nchars <= 200
            ))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.bmpString->nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         ll = xe_16BitCharStr (pctxt, pvalue->u.bmpString, ASN1EXPL, TM_UNIV|TM_PRIM|30);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_NoticeReference_noticeNumbers (OSCTXT* pctxt,
   ASN1T_ETSI101733_NoticeReference_noticeNumbers *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "INTEGER", xx1);

      ll = xe_integer (pctxt, ((OSINT32*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_NoticeReference (OSCTXT* pctxt,
   ASN1T_ETSI101733_NoticeReference *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "NoticeReference");

   /* encode noticeNumbers */

   RTXCTXTPUSHELEMNAME (pctxt, "noticeNumbers");

   ll = asn1E_ETSI101733_NoticeReference_noticeNumbers (pctxt, &pvalue->noticeNumbers, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode organization */

   RTXCTXTPUSHELEMNAME (pctxt, "organization");

   ll = asn1E_ETSI101733_DisplayText (pctxt, &pvalue->organization, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SPUserNotice (OSCTXT* pctxt,
   ASN1T_ETSI101733_SPUserNotice *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SPUserNotice");

   /* encode explicitText */

   if (pvalue->m.explicitTextPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "explicitText");

      ll = asn1E_ETSI101733_DisplayText (pctxt, &pvalue->explicitText, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode noticeRef */

   if (pvalue->m.noticeRefPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "noticeRef");

      ll = asn1E_ETSI101733_NoticeReference (pctxt, &pvalue->noticeRef, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CompleteCertificateRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_CompleteCertificateRefs *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CompleteCertificateRefs");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OtherCertID", xx1);

      ll = asn1E_ETSI101733_OtherCertID (pctxt, ((ASN1T_ETSI101733_OtherCertID*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CrlIdentifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_CrlIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CrlIdentifier");

   /* encode crlNumber */

   if (pvalue->m.crlNumberPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crlNumber");

      ll = asn1E_IMP_CRLNumber (pctxt, &pvalue->crlNumber, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode crlIssuedTime */

   RTXCTXTPUSHELEMNAME (pctxt, "crlIssuedTime");

   ll = xe_charstr (pctxt, pvalue->crlIssuedTime, ASN1EXPL, TM_UNIV|TM_PRIM|23);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode crlissuer */

   RTXCTXTPUSHELEMNAME (pctxt, "crlissuer");

   ll = asn1E_EXP_Name (pctxt, &pvalue->crlissuer, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CrlValidatedID (OSCTXT* pctxt,
   ASN1T_ETSI101733_CrlValidatedID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CrlValidatedID");

   /* encode crlIdentifier */

   if (pvalue->m.crlIdentifierPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crlIdentifier");

      ll = asn1E_ETSI101733_CrlIdentifier (pctxt, &pvalue->crlIdentifier, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode crlHash */

   RTXCTXTPUSHELEMNAME (pctxt, "crlHash");

   ll = asn1E_ETSI101733_OtherHash (pctxt, &pvalue->crlHash, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CrlValidatedID", xx1);

      ll = asn1E_ETSI101733_CrlValidatedID (pctxt, ((ASN1T_ETSI101733_CrlValidatedID*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CRLListID (OSCTXT* pctxt,
   ASN1T_ETSI101733_CRLListID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CRLListID");

   /* encode crls */

   RTXCTXTPUSHELEMNAME (pctxt, "crls");

   ll = asn1E_ETSI101733__SeqOfETSI101733_CrlValidatedID (pctxt, &pvalue->crls, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OcspIdentifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_OcspIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OcspIdentifier");

   /* encode producedAt */

   RTXCTXTPUSHELEMNAME (pctxt, "producedAt");

   ll = xe_charstr (pctxt, pvalue->producedAt, ASN1EXPL, TM_UNIV|TM_PRIM|24);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode ocspResponderID */

   RTXCTXTPUSHELEMNAME (pctxt, "ocspResponderID");

   ll = asn1E_OCSP_ResponderID (pctxt, &pvalue->ocspResponderID, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OcspResponsesID (OSCTXT* pctxt,
   ASN1T_ETSI101733_OcspResponsesID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OcspResponsesID");

   /* encode ocspRepHash */

   if (pvalue->m.ocspRepHashPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "ocspRepHash");

      ll = asn1E_ETSI101733_OtherHash (pctxt, &pvalue->ocspRepHash, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode ocspIdentifier */

   RTXCTXTPUSHELEMNAME (pctxt, "ocspIdentifier");

   ll = asn1E_ETSI101733_OcspIdentifier (pctxt, &pvalue->ocspIdentifier, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OcspResponsesID", xx1);

      ll = asn1E_ETSI101733_OcspResponsesID (pctxt, ((ASN1T_ETSI101733_OcspResponsesID*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OcspListID (OSCTXT* pctxt,
   ASN1T_ETSI101733_OcspListID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OcspListID");

   /* encode ocspResponses */

   RTXCTXTPUSHELEMNAME (pctxt, "ocspResponses");

   ll = asn1E_ETSI101733__SeqOfETSI101733_OcspResponsesID (pctxt, &pvalue->ocspResponses, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OPEN_TYPE", xx1);

      ll = xe_OpenType (pctxt, ((ASN1TOpenType*)pnode->data)->data, ((ASN1TOpenType*)pnode->data)->numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OtherRevRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherRevRefs *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherRevRefs");

   /* encode otherRevRefs */

   RTXCTXTPUSHELEMNAME (pctxt, "otherRevRefs");

   ll = asn1E_ETSI101733_OtherRevRefs_otherRevRefs (pctxt, &pvalue->otherRevRefs, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode otherRevRefType */

   RTXCTXTPUSHELEMNAME (pctxt, "otherRevRefType");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->otherRevRefType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CrlOcspRef (OSCTXT* pctxt,
   ASN1T_ETSI101733_CrlOcspRef *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CrlOcspRef");

   /* encode otherRev */

   if (pvalue->m.otherRevPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "otherRev");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         asn1E_ETSI101733_OtherRevRefs (pctxt, &pvalue->otherRev, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode ocspids */

   if (pvalue->m.ocspidsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "ocspids");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_ETSI101733_OcspListID (pctxt, &pvalue->ocspids, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode crlids */

   if (pvalue->m.crlidsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crlids");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_ETSI101733_CRLListID (pctxt, &pvalue->crlids, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CompleteRevocationRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_CompleteRevocationRefs *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CompleteRevocationRefs");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CrlOcspRef", xx1);

      ll = asn1E_ETSI101733_CrlOcspRef (pctxt, ((ASN1T_ETSI101733_CrlOcspRef*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CertificateValues (OSCTXT* pctxt,
   ASN1T_ETSI101733_CertificateValues *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertificateValues");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Certificate", xx1);

      ll = asn1E_EXP_Certificate (pctxt, ((ASN1T_EXP_Certificate*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertificateList", xx1);

      ll = asn1E_EXP_CertificateList (pctxt, ((ASN1T_EXP_CertificateList*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT* pctxt,
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "BasicOCSPResponse", xx1);

      ll = asn1E_OCSP_BasicOCSPResponse (pctxt, ((ASN1T_OCSP_BasicOCSPResponse*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OtherRevVals_otherRevVals (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherRevVals_otherRevVals *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OPEN_TYPE", xx1);

      ll = xe_OpenType (pctxt, ((ASN1TOpenType*)pnode->data)->data, ((ASN1TOpenType*)pnode->data)->numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_OtherRevVals (OSCTXT* pctxt,
   ASN1T_ETSI101733_OtherRevVals *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherRevVals");

   /* encode otherRevVals */

   RTXCTXTPUSHELEMNAME (pctxt, "otherRevVals");

   ll = asn1E_ETSI101733_OtherRevVals_otherRevVals (pctxt, &pvalue->otherRevVals, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode otherRevValType */

   RTXCTXTPUSHELEMNAME (pctxt, "otherRevValType");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->otherRevValType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_RevocationValues (OSCTXT* pctxt,
   ASN1T_ETSI101733_RevocationValues *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RevocationValues");

   /* encode otherRevVals */

   if (pvalue->m.otherRevValsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "otherRevVals");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         asn1E_ETSI101733_OtherRevVals (pctxt, &pvalue->otherRevVals, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode ocspVals */

   if (pvalue->m.ocspValsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "ocspVals");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (pctxt, &pvalue->ocspVals, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode crlVals */

   if (pvalue->m.crlValsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crlVals");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_ETSI101733__SeqOfETSI101733_CertificateList (pctxt, &pvalue->crlVals, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_AttributeCertificateRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_AttributeCertificateRefs *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AttributeCertificateRefs");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "OtherCertID", xx1);

      ll = asn1E_ETSI101733_OtherCertID (pctxt, ((ASN1T_ETSI101733_OtherCertID*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_AttributeRevocationRefs (OSCTXT* pctxt,
   ASN1T_ETSI101733_AttributeRevocationRefs *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AttributeRevocationRefs");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CrlOcspRef", xx1);

      ll = asn1E_ETSI101733_CrlOcspRef (pctxt, ((ASN1T_ETSI101733_CrlOcspRef*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_ContentReference (OSCTXT* pctxt,
   ASN1T_ETSI101733_ContentReference *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentReference");

   /* encode originatorSignatureValue */

   RTXCTXTPUSHELEMNAME (pctxt, "originatorSignatureValue");

   ll = xe_octstr (pctxt, pvalue->originatorSignatureValue.data, pvalue->originatorSignatureValue.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signedContentIdentifier */

   RTXCTXTPUSHELEMNAME (pctxt, "signedContentIdentifier");

   ll = asn1E_ETSI101733_ContentIdentifier (pctxt, &pvalue->signedContentIdentifier, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode contentType */

   RTXCTXTPUSHELEMNAME (pctxt, "contentType");

   ll = asn1E_CMS_ContentType (pctxt, &pvalue->contentType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_ContentHints (OSCTXT* pctxt,
   ASN1T_ETSI101733_ContentHints *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentHints");

   /* encode contentType */

   RTXCTXTPUSHELEMNAME (pctxt, "contentType");

   ll = asn1E_CMS_ContentType (pctxt, &pvalue->contentType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode contentDescription */

   if (pvalue->m.contentDescriptionPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "contentDescription");

      { int nchars = rtxUTF8Len (pvalue->contentDescription);
      if (!(nchars >= 1)) {
         rtxErrAddElemNameParm (pctxt);
         rtxErrAddIntParm (pctxt, (int)nchars);
         return LOG_RTERR (pctxt, RTERR_CONSVIO);
      }

      }
      ll = xe_utf8str (pctxt, pvalue->contentDescription, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CommitmentTypeQualifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_CommitmentTypeQualifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CommitmentTypeQualifier");

   /* encode qualifier */

   RTXCTXTPUSHELEMNAME (pctxt, "qualifier");

   ll = xe_OpenType (pctxt, pvalue->qualifier.data, pvalue->qualifier.numocts);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode commitmentTypeIdentifier */

   RTXCTXTPUSHELEMNAME (pctxt, "commitmentTypeIdentifier");

   ll = asn1E_ETSI101733_CommitmentTypeIdentifier (pctxt, &pvalue->commitmentTypeIdentifier, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (OSCTXT* pctxt,
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CommitmentTypeQualifier", xx1);

      ll = asn1E_ETSI101733_CommitmentTypeQualifier (pctxt, ((ASN1T_ETSI101733_CommitmentTypeQualifier*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_CommitmentTypeIndication (OSCTXT* pctxt,
   ASN1T_ETSI101733_CommitmentTypeIndication *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CommitmentTypeIndication");

   /* encode commitmentTypeQualifier */

   if (pvalue->m.commitmentTypeQualifierPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "commitmentTypeQualifier");

      ll = asn1E_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (pctxt, &pvalue->commitmentTypeQualifier, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode commitmentTypeId */

   RTXCTXTPUSHELEMNAME (pctxt, "commitmentTypeId");

   ll = asn1E_ETSI101733_CommitmentTypeIdentifier (pctxt, &pvalue->commitmentTypeId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_PostalAddress (OSCTXT* pctxt,
   ASN1T_ETSI101733_PostalAddress *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PostalAddress");

   if (!((pvalue->count >= OSUINTCONST(1) && pvalue->count <= OSUINTCONST(6)))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "DirectoryString", xx1);

      ll = asn1E_EXP_DirectoryString (pctxt, ((ASN1T_EXP_DirectoryString*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SignerLocation (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignerLocation *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignerLocation");

   /* encode postalAdddress */

   if (pvalue->m.postalAdddressPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "postalAdddress");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         asn1E_ETSI101733_PostalAddress (pctxt, &pvalue->postalAdddress, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode localityName */

   if (pvalue->m.localityNamePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "localityName");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_EXP_DirectoryString (pctxt, &pvalue->localityName, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode countryName */

   if (pvalue->m.countryNamePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "countryName");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_EXP_DirectoryString (pctxt, &pvalue->countryName, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_ClaimedAttributes (OSCTXT* pctxt,
   ASN1T_ETSI101733_ClaimedAttributes *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ClaimedAttributes");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Attribute", xx1);

      ll = asn1E_EXP_Attribute (pctxt, ((ASN1T_EXP_Attribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SignerAttribute_element (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignerAttribute_element *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "claimedAttributes");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_ETSI101733_ClaimedAttributes (pctxt, pvalue->u.claimedAttributes, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "certifiedAttributes");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_ETSI101733_CertifiedAttributes (pctxt, pvalue->u.certifiedAttributes, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   return (ll0);
}

EXTERN int asn1E_ETSI101733_SignerAttribute (OSCTXT* pctxt,
   ASN1T_ETSI101733_SignerAttribute *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignerAttribute");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CHOICE", xx1);

      ll = asn1E_ETSI101733_SignerAttribute_element (pctxt, ((ASN1T_ETSI101733_SignerAttribute_element*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

