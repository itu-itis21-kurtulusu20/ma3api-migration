/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "pkcs7.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_PKCS7_ContentType (OSCTXT* pctxt,
   ASN1T_PKCS7_ContentType *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentType");

   ll = xe_objid (pctxt, (ASN1OBJID*)pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_Data (OSCTXT* pctxt,
   ASN1T_PKCS7_Data *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Data");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentEncryptionAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_DigestAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_PKCS7_DigestAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DigestAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DigestEncryptionAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyEncryptionAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_Version (OSCTXT* pctxt,
   ASN1T_PKCS7_Version *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Version");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_EncryptedDigest (OSCTXT* pctxt,
   ASN1T_PKCS7_EncryptedDigest *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncryptedDigest");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_Digest (OSCTXT* pctxt,
   ASN1T_PKCS7_Digest *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Digest");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_EncryptedContent (OSCTXT* pctxt,
   ASN1T_PKCS7_EncryptedContent *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncryptedContent");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_EncryptedKey (OSCTXT* pctxt,
   ASN1T_PKCS7_EncryptedKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncryptedKey");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_Hash (OSCTXT* pctxt,
   ASN1T_PKCS7_Hash *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Hash");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_ContentInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_ContentInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentInfo");

   /* encode content */

   if (pvalue->m.contentPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "content");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         xe_OpenType (pctxt, pvalue->content.data, pvalue->content.numocts));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode contentType */

   RTXCTXTPUSHELEMNAME (pctxt, "contentType");

   ll = asn1E_PKCS7_ContentType (pctxt, &pvalue->contentType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_CertificateRevocationLists (OSCTXT* pctxt,
   ASN1T_PKCS7_CertificateRevocationLists *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertificateRevocationLists");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertificateList", xx1);

      ll = asn1E_EXP_CertificateList (pctxt, ((ASN1T_EXP_CertificateList*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_IssuerAndSerialNumber (OSCTXT* pctxt,
   ASN1T_PKCS7_IssuerAndSerialNumber *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "IssuerAndSerialNumber");

   /* encode serialNumber */

   RTXCTXTPUSHELEMNAME (pctxt, "serialNumber");

   ll = asn1E_EXP_CertificateSerialNumber (pctxt, &pvalue->serialNumber, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode issuer */

   RTXCTXTPUSHELEMNAME (pctxt, "issuer");

   ll = asn1E_EXP_Name (pctxt, &pvalue->issuer, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_ExtendedCertificateOrCertificate (OSCTXT* pctxt,
   ASN1T_PKCS7_ExtendedCertificateOrCertificate *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtendedCertificateOrCertificate");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "certificate");

         ll = asn1E_EXP_Certificate (pctxt, pvalue->u.certificate, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT* pctxt,
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtendedCertificatesAndCertificates");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "ExtendedCertificateOrCertificate", xx1);

      ll = asn1E_PKCS7_ExtendedCertificateOrCertificate (pctxt, ((ASN1T_PKCS7_ExtendedCertificateOrCertificate*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_DigestAlgorithmIdentifiers (OSCTXT* pctxt,
   ASN1T_PKCS7_DigestAlgorithmIdentifiers *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DigestAlgorithmIdentifiers");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "DigestAlgorithmIdentifier", xx1);

      ll = asn1E_PKCS7_DigestAlgorithmIdentifier (pctxt, ((ASN1T_PKCS7_DigestAlgorithmIdentifier*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_SignerInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_SignerInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignerInfo");

   /* encode unauthenticatedAttributes */

   if (pvalue->m.unauthenticatedAttributesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "unauthenticatedAttributes");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_PKCS10_Attributes (pctxt, &pvalue->unauthenticatedAttributes, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode encryptedDigest */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedDigest");

   ll = asn1E_PKCS7_EncryptedDigest (pctxt, &pvalue->encryptedDigest, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode digestEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "digestEncryptionAlgorithm");

   ll = asn1E_PKCS7_DigestEncryptionAlgorithmIdentifier (pctxt, &pvalue->digestEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode authenticatedAttributes */

   if (pvalue->m.authenticatedAttributesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "authenticatedAttributes");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_PKCS10_Attributes (pctxt, &pvalue->authenticatedAttributes, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode digestAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "digestAlgorithm");

   ll = asn1E_PKCS7_DigestAlgorithmIdentifier (pctxt, &pvalue->digestAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode issuerAndSerialNumber */

   RTXCTXTPUSHELEMNAME (pctxt, "issuerAndSerialNumber");

   ll = asn1E_PKCS7_IssuerAndSerialNumber (pctxt, &pvalue->issuerAndSerialNumber, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_PKCS7_Version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_SignerInfos (OSCTXT* pctxt,
   ASN1T_PKCS7_SignerInfos *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignerInfos");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SignerInfo", xx1);

      ll = asn1E_PKCS7_SignerInfo (pctxt, ((ASN1T_PKCS7_SignerInfo*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_SignedData (OSCTXT* pctxt,
   ASN1T_PKCS7_SignedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignedData");

   /* encode signerInfos */

   RTXCTXTPUSHELEMNAME (pctxt, "signerInfos");

   ll = asn1E_PKCS7_SignerInfos (pctxt, &pvalue->signerInfos, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode crls */

   if (pvalue->m.crlsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crls");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_PKCS7_CertificateRevocationLists (pctxt, &pvalue->crls, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certificates */

   if (pvalue->m.certificatesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "certificates");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_PKCS7_ExtendedCertificatesAndCertificates (pctxt, &pvalue->certificates, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode contentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "contentInfo");

   ll = asn1E_PKCS7_ContentInfo (pctxt, &pvalue->contentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode digestAlgorithms */

   RTXCTXTPUSHELEMNAME (pctxt, "digestAlgorithms");

   ll = asn1E_PKCS7_DigestAlgorithmIdentifiers (pctxt, &pvalue->digestAlgorithms, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_PKCS7_Version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_DigestInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_DigestInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DigestInfo");

   /* encode digest */

   RTXCTXTPUSHELEMNAME (pctxt, "digest");

   ll = asn1E_PKCS7_Digest (pctxt, &pvalue->digest, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode digestAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "digestAlgorithm");

   ll = asn1E_PKCS7_DigestAlgorithmIdentifier (pctxt, &pvalue->digestAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_RecipientInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_RecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RecipientInfo");

   /* encode encryptedKey */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedKey");

   ll = asn1E_PKCS7_EncryptedKey (pctxt, &pvalue->encryptedKey, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "keyEncryptionAlgorithm");

   ll = asn1E_PKCS7_KeyEncryptionAlgorithmIdentifier (pctxt, &pvalue->keyEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode issuerAndSerialNumber */

   RTXCTXTPUSHELEMNAME (pctxt, "issuerAndSerialNumber");

   ll = asn1E_PKCS7_IssuerAndSerialNumber (pctxt, &pvalue->issuerAndSerialNumber, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_PKCS7_Version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_RecipientInfos (OSCTXT* pctxt,
   ASN1T_PKCS7_RecipientInfos *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RecipientInfos");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "RecipientInfo", xx1);

      ll = asn1E_PKCS7_RecipientInfo (pctxt, ((ASN1T_PKCS7_RecipientInfo*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_EncryptedContentInfo (OSCTXT* pctxt,
   ASN1T_PKCS7_EncryptedContentInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncryptedContentInfo");

   /* encode encryptedContent */

   if (pvalue->m.encryptedContentPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "encryptedContent");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
         asn1E_PKCS7_EncryptedContent (pctxt, &pvalue->encryptedContent, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode contentEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "contentEncryptionAlgorithm");

   ll = asn1E_PKCS7_ContentEncryptionAlgorithmIdentifier (pctxt, &pvalue->contentEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode contentType */

   RTXCTXTPUSHELEMNAME (pctxt, "contentType");

   ll = asn1E_PKCS7_ContentType (pctxt, &pvalue->contentType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_EnvelopedData (OSCTXT* pctxt,
   ASN1T_PKCS7_EnvelopedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EnvelopedData");

   /* encode encryptedContentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedContentInfo");

   ll = asn1E_PKCS7_EncryptedContentInfo (pctxt, &pvalue->encryptedContentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode recipientInfos */

   RTXCTXTPUSHELEMNAME (pctxt, "recipientInfos");

   ll = asn1E_PKCS7_RecipientInfos (pctxt, &pvalue->recipientInfos, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_PKCS7_Version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_SignedAndEnvelopedData (OSCTXT* pctxt,
   ASN1T_PKCS7_SignedAndEnvelopedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignedAndEnvelopedData");

   /* encode signerInfos */

   RTXCTXTPUSHELEMNAME (pctxt, "signerInfos");

   ll = asn1E_PKCS7_SignerInfos (pctxt, &pvalue->signerInfos, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode crls */

   if (pvalue->m.crlsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crls");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_PKCS7_CertificateRevocationLists (pctxt, &pvalue->crls, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certificates */

   if (pvalue->m.certificatesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "certificates");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_PKCS7_ExtendedCertificatesAndCertificates (pctxt, &pvalue->certificates, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode encryptedContentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedContentInfo");

   ll = asn1E_PKCS7_EncryptedContentInfo (pctxt, &pvalue->encryptedContentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode digestAlgorithms */

   RTXCTXTPUSHELEMNAME (pctxt, "digestAlgorithms");

   ll = asn1E_PKCS7_DigestAlgorithmIdentifiers (pctxt, &pvalue->digestAlgorithms, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode recipientInfos */

   RTXCTXTPUSHELEMNAME (pctxt, "recipientInfos");

   ll = asn1E_PKCS7_RecipientInfos (pctxt, &pvalue->recipientInfos, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_PKCS7_Version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_IssuerSerial (OSCTXT* pctxt,
   ASN1T_PKCS7_IssuerSerial *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "IssuerSerial");

   /* encode serialNumber */

   RTXCTXTPUSHELEMNAME (pctxt, "serialNumber");

   ll = asn1E_EXP_CertificateSerialNumber (pctxt, &pvalue->serialNumber, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode issuer */

   RTXCTXTPUSHELEMNAME (pctxt, "issuer");

   ll = asn1E_IMP_GeneralNames (pctxt, &pvalue->issuer, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_ESSCertID (OSCTXT* pctxt,
   ASN1T_PKCS7_ESSCertID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESSCertID");

   /* encode issuerSerial */

   if (pvalue->m.issuerSerialPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "issuerSerial");

      ll = asn1E_PKCS7_IssuerSerial (pctxt, &pvalue->issuerSerial, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certHash */

   RTXCTXTPUSHELEMNAME (pctxt, "certHash");

   ll = asn1E_PKCS7_Hash (pctxt, &pvalue->certHash, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT* pctxt,
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "ESSCertID", xx1);

      ll = asn1E_PKCS7_ESSCertID (pctxt, ((ASN1T_PKCS7_ESSCertID*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT* pctxt,
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "PolicyInformation", xx1);

      ll = asn1E_IMP_PolicyInformation (pctxt, ((ASN1T_IMP_PolicyInformation*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_PKCS7_SigningCertificate (OSCTXT* pctxt,
   ASN1T_PKCS7_SigningCertificate *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SigningCertificate");

   /* encode policies */

   if (pvalue->m.policiesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "policies");

      ll = asn1E_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, &pvalue->policies, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certs */

   RTXCTXTPUSHELEMNAME (pctxt, "certs");

   ll = asn1E_PKCS7__SeqOfPKCS7_ESSCertID (pctxt, &pvalue->certs, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7_ESSCertIDv2 (OSCTXT* pctxt,
   ASN1T_PKCS7_ESSCertIDv2 *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESSCertIDv2");

   /* encode issuerSerial */

   if (pvalue->m.issuerSerialPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "issuerSerial");

      ll = asn1E_PKCS7_IssuerSerial (pctxt, &pvalue->issuerSerial, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certHash */

   RTXCTXTPUSHELEMNAME (pctxt, "certHash");

   ll = asn1E_PKCS7_Hash (pctxt, &pvalue->certHash, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode hashAlgorithm */

   if (pvalue->m.hashAlgorithmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "hashAlgorithm");

      ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSCTXT* pctxt,
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2 *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "ESSCertIDv2", xx1);

      ll = asn1E_PKCS7_ESSCertIDv2 (pctxt, ((ASN1T_PKCS7_ESSCertIDv2*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_PKCS7_SigningCertificateV2 (OSCTXT* pctxt,
   ASN1T_PKCS7_SigningCertificateV2 *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SigningCertificateV2");

   /* encode policies */

   if (pvalue->m.policiesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "policies");

      ll = asn1E_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, &pvalue->policies, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certs */

   RTXCTXTPUSHELEMNAME (pctxt, "certs");

   ll = asn1E_PKCS7__SeqOfPKCS7_ESSCertIDv2 (pctxt, &pvalue->certs, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

