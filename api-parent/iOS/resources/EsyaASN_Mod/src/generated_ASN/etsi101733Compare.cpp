/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "etsi101733.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_ETSI101733_OtherHashValue (const char* name, 
   ASN1T_ETSI101733_OtherHashValue* pValue, 
   ASN1T_ETSI101733_OtherHashValue* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_OtherHashValue::Equals (ASN1T_ETSI101733_OtherHashValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherHashValue ("OtherHashValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SignaturePolicyImplied (const char* name)
{
   return TRUE;
}

OSBOOL ASN1C_ETSI101733_SignaturePolicyImplied::Equals ()
{
   if(asn1Compare_ETSI101733_SignaturePolicyImplied ("SignaturePolicyImplied"))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SigPolicyId (const char* name, 
   ASN1T_ETSI101733_SigPolicyId* pValue, 
   ASN1T_ETSI101733_SigPolicyId* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_SigPolicyId::Equals (ASN1T_ETSI101733_SigPolicyId* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SigPolicyId ("SigPolicyId", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OtherHashAlgAndValue (const char* name, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pValue, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".hashAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->hashAlgorithm, &pCmpValue->hashAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".hashValue", 0, 0, 0);
   if (! asn1Compare_ETSI101733_OtherHashValue (namebuf, &pValue->hashValue, &pCmpValue->hashValue, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OtherHashAlgAndValue::Equals (ASN1T_ETSI101733_OtherHashAlgAndValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherHashAlgAndValue ("OtherHashAlgAndValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SigPolicyHash (const char* name, 
   ASN1T_ETSI101733_SigPolicyHash* pValue, 
   ASN1T_ETSI101733_SigPolicyHash* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_ETSI101733_OtherHashAlgAndValue (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_SigPolicyHash::Equals (ASN1T_ETSI101733_SigPolicyHash* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SigPolicyHash ("SigPolicyHash", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SPuri (const char* name, 
   ASN1T_ETSI101733_SPuri* pValue, ASN1T_ETSI101733_SPuri* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_SPuri::Equals (ASN1T_ETSI101733_SPuri* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SPuri ("SPuri", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_ContentTimestamp (const char* name, 
   ASN1T_ETSI101733_ContentTimestamp* pValue, 
   ASN1T_ETSI101733_ContentTimestamp* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_TSP_TimeStampToken (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_ContentTimestamp::Equals (ASN1T_ETSI101733_ContentTimestamp* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_ContentTimestamp ("ContentTimestamp", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SignatureTimeStampToken (const char* name, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pValue, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_TSP_TimeStampToken (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_SignatureTimeStampToken::Equals (ASN1T_ETSI101733_SignatureTimeStampToken* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SignatureTimeStampToken ("SignatureTimeStampToken", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_ESCTimeStampToken (const char* name, 
   ASN1T_ETSI101733_ESCTimeStampToken* pValue, 
   ASN1T_ETSI101733_ESCTimeStampToken* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_TSP_TimeStampToken (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_ESCTimeStampToken::Equals (ASN1T_ETSI101733_ESCTimeStampToken* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_ESCTimeStampToken ("ESCTimeStampToken", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_TimestampedCertsCRLs (const char* name, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pValue, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_TSP_TimeStampToken (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_TimestampedCertsCRLs::Equals (ASN1T_ETSI101733_TimestampedCertsCRLs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_TimestampedCertsCRLs ("TimestampedCertsCRLs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_ArchiveTimeStampToken (const char* name, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pValue, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_TSP_TimeStampToken (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_ArchiveTimeStampToken::Equals (ASN1T_ETSI101733_ArchiveTimeStampToken* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_ArchiveTimeStampToken ("ArchiveTimeStampToken", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_ContentIdentifier (const char* name, 
   ASN1T_ETSI101733_ContentIdentifier* pValue, 
   ASN1T_ETSI101733_ContentIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_ContentIdentifier::Equals (ASN1T_ETSI101733_ContentIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_ContentIdentifier ("ContentIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CommitmentTypeIdentifier (const char* name, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pValue, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_CommitmentTypeIdentifier::Equals (ASN1T_ETSI101733_CommitmentTypeIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CommitmentTypeIdentifier ("CommitmentTypeIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CertifiedAttributes (const char* name, 
   ASN1T_ETSI101733_CertifiedAttributes* pValue, 
   ASN1T_ETSI101733_CertifiedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_ATTRCERT_AttributeCertificate (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ETSI101733_CertifiedAttributes::Equals (ASN1T_ETSI101733_CertifiedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CertifiedAttributes ("CertifiedAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OtherHash (const char* name, 
   ASN1T_ETSI101733_OtherHash* pValue, ASN1T_ETSI101733_OtherHash* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* sha1Hash */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.sha1Hash", 0, 0, 0);
         if (! asn1Compare_ETSI101733_OtherHashValue (namebuf, pValue->u.sha1Hash, pCmpValue->u.sha1Hash, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* otherHash */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.otherHash", 0, 0, 0);
         if (! asn1Compare_ETSI101733_OtherHashAlgAndValue (namebuf, pValue->u.otherHash, pCmpValue->u.otherHash, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ETSI101733_OtherHash::Equals (ASN1T_ETSI101733_OtherHash* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherHash ("OtherHash", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OtherCertID (const char* name, 
   ASN1T_ETSI101733_OtherCertID* pValue, 
   ASN1T_ETSI101733_OtherCertID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".otherCertHash", 0, 0, 0);
   if (! asn1Compare_ETSI101733_OtherHash (namebuf, &pValue->otherCertHash, &pCmpValue->otherCertHash, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".issuerSerial", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.issuerSerialPresent,
   pCmpValue->m.issuerSerialPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.issuerSerialPresent) 
   {
      if (! asn1Compare_ATTRCERT_IssuerSerial (namebuf, &pValue->issuerSerial, &pCmpValue->issuerSerial, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OtherCertID::Equals (ASN1T_ETSI101733_OtherCertID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherCertID ("OtherCertID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_OtherCertID (const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_OtherCertID* pdata;
   ASN1T_ETSI101733_OtherCertID* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_OtherCertID*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_OtherCertID (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::Equals (ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733__SeqOfETSI101733_OtherCertID ("_SeqOfETSI101733_OtherCertID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_PolicyInformation (
   const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_IMP_PolicyInformation* pdata;
   ASN1T_IMP_PolicyInformation* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_PolicyInformation*) pnode->data;
      pCmpdata = (ASN1T_IMP_PolicyInformation*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_PolicyInformation (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::Equals (ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733__SeqOfETSI101733_PolicyInformation ("_SeqOfETSI101733_PolicyInformation", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OtherSigningCertificate (const char* name, 
   ASN1T_ETSI101733_OtherSigningCertificate* pValue, 
   ASN1T_ETSI101733_OtherSigningCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certs", 0, 0, 0);
   if (! asn1Compare_ETSI101733__SeqOfETSI101733_OtherCertID (namebuf, &pValue->certs, &pCmpValue->certs, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".policies", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.policiesPresent,
   pCmpValue->m.policiesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.policiesPresent) 
   {
      if (! asn1Compare_ETSI101733__SeqOfETSI101733_PolicyInformation (namebuf, &pValue->policies, &pCmpValue->policies, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OtherSigningCertificate::Equals (ASN1T_ETSI101733_OtherSigningCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherSigningCertificate ("OtherSigningCertificate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SigPolicyQualifierInfo (const char* name, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pValue, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".sigPolicyQualifierId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->sigPolicyQualifierId, (ASN1OBJID*)&pCmpValue->sigPolicyQualifierId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".qualifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.qualifierPresent,
   pCmpValue->m.qualifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.qualifierPresent) 
   {
      if ( !rtCmpOpenType (namebuf,
      pValue->qualifier.numocts,
      pValue->qualifier.data,
      pCmpValue->qualifier.numocts,
      pCmpValue->qualifier.data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_SigPolicyQualifierInfo::Equals (ASN1T_ETSI101733_SigPolicyQualifierInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SigPolicyQualifierInfo ("SigPolicyQualifierInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (
   const char* name, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pValue, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pdata;
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_SigPolicyQualifierInfo*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_SigPolicyQualifierInfo*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_SigPolicyQualifierInfo (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::Equals (ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SignaturePolicyId_sigPolicyQualifiers ("SignaturePolicyId_sigPolicyQualifiers", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SignaturePolicyId (const char* name, 
   ASN1T_ETSI101733_SignaturePolicyId* pValue, 
   ASN1T_ETSI101733_SignaturePolicyId* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".sigPolicyId", 0, 0, 0);
   if (! asn1Compare_ETSI101733_SigPolicyId (namebuf, &pValue->sigPolicyId, &pCmpValue->sigPolicyId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".sigPolicyHash", 0, 0, 0);
   if (! asn1Compare_ETSI101733_SigPolicyHash (namebuf, &pValue->sigPolicyHash, &pCmpValue->sigPolicyHash, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".sigPolicyQualifiers", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.sigPolicyQualifiersPresent,
   pCmpValue->m.sigPolicyQualifiersPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.sigPolicyQualifiersPresent) 
   {
      if (! asn1Compare_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (namebuf, &pValue->sigPolicyQualifiers, &pCmpValue->sigPolicyQualifiers, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_SignaturePolicyId::Equals (ASN1T_ETSI101733_SignaturePolicyId* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SignaturePolicyId ("SignaturePolicyId", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SignaturePolicy (const char* name, 
   ASN1T_ETSI101733_SignaturePolicy* pValue, 
   ASN1T_ETSI101733_SignaturePolicy* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* signaturePolicyImplied */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.signaturePolicyImplied", 0, 0, 0);
         break;

      /* signaturePolicyId */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.signaturePolicyId", 0, 0, 0);
         if (! asn1Compare_ETSI101733_SignaturePolicyId (namebuf, pValue->u.signaturePolicyId, pCmpValue->u.signaturePolicyId, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ETSI101733_SignaturePolicy::Equals (ASN1T_ETSI101733_SignaturePolicy* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SignaturePolicy ("SignaturePolicy", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_DisplayText (const char* name, 
   ASN1T_ETSI101733_DisplayText* pValue, 
   ASN1T_ETSI101733_DisplayText* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* visibleString */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.visibleString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.visibleString, pCmpValue->u.visibleString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ETSI101733_DisplayText::Equals (ASN1T_ETSI101733_DisplayText* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_DisplayText ("DisplayText", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_NoticeReference_noticeNumbers (const char* name, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pValue, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   OSINT32* pdata;
   OSINT32* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (OSINT32*) pnode->data;
      pCmpdata = (OSINT32*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpInteger (namebuf, *pdata, *pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_NoticeReference_noticeNumbers::Equals (ASN1T_ETSI101733_NoticeReference_noticeNumbers* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_NoticeReference_noticeNumbers ("NoticeReference_noticeNumbers", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_NoticeReference (const char* name, 
   ASN1T_ETSI101733_NoticeReference* pValue, 
   ASN1T_ETSI101733_NoticeReference* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".organization", 0, 0, 0);
   if (! asn1Compare_ETSI101733_DisplayText (namebuf, &pValue->organization, &pCmpValue->organization, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".noticeNumbers", 0, 0, 0);
   if (! asn1Compare_ETSI101733_NoticeReference_noticeNumbers (namebuf, &pValue->noticeNumbers, &pCmpValue->noticeNumbers, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_NoticeReference::Equals (ASN1T_ETSI101733_NoticeReference* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_NoticeReference ("NoticeReference", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SPUserNotice (const char* name, 
   ASN1T_ETSI101733_SPUserNotice* pValue, 
   ASN1T_ETSI101733_SPUserNotice* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".noticeRef", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.noticeRefPresent,
   pCmpValue->m.noticeRefPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.noticeRefPresent) 
   {
      if (! asn1Compare_ETSI101733_NoticeReference (namebuf, &pValue->noticeRef, &pCmpValue->noticeRef, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".explicitText", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.explicitTextPresent,
   pCmpValue->m.explicitTextPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.explicitTextPresent) 
   {
      if (! asn1Compare_ETSI101733_DisplayText (namebuf, &pValue->explicitText, &pCmpValue->explicitText, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_SPUserNotice::Equals (ASN1T_ETSI101733_SPUserNotice* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SPUserNotice ("SPUserNotice", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CompleteCertificateRefs (const char* name, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pValue, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_OtherCertID* pdata;
   ASN1T_ETSI101733_OtherCertID* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_OtherCertID*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_OtherCertID (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CompleteCertificateRefs::Equals (ASN1T_ETSI101733_CompleteCertificateRefs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CompleteCertificateRefs ("CompleteCertificateRefs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CrlIdentifier (const char* name, 
   ASN1T_ETSI101733_CrlIdentifier* pValue, 
   ASN1T_ETSI101733_CrlIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".crlissuer", 0, 0, 0);
   if (! asn1Compare_EXP_Name (namebuf, &pValue->crlissuer, &pCmpValue->crlissuer, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".crlIssuedTime", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->crlIssuedTime, pCmpValue->crlIssuedTime, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".crlNumber", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlNumberPresent,
   pCmpValue->m.crlNumberPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlNumberPresent) 
   {
      if (! asn1Compare_IMP_CRLNumber (namebuf, &pValue->crlNumber, &pCmpValue->crlNumber, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CrlIdentifier::Equals (ASN1T_ETSI101733_CrlIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CrlIdentifier ("CrlIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CrlValidatedID (const char* name, 
   ASN1T_ETSI101733_CrlValidatedID* pValue, 
   ASN1T_ETSI101733_CrlValidatedID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".crlHash", 0, 0, 0);
   if (! asn1Compare_ETSI101733_OtherHash (namebuf, &pValue->crlHash, &pCmpValue->crlHash, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".crlIdentifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlIdentifierPresent,
   pCmpValue->m.crlIdentifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlIdentifierPresent) 
   {
      if (! asn1Compare_ETSI101733_CrlIdentifier (namebuf, &pValue->crlIdentifier, &pCmpValue->crlIdentifier, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CrlValidatedID::Equals (ASN1T_ETSI101733_CrlValidatedID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CrlValidatedID ("CrlValidatedID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_CrlValidatedID (
   const char* name, ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_CrlValidatedID* pdata;
   ASN1T_ETSI101733_CrlValidatedID* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_CrlValidatedID*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_CrlValidatedID*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_CrlValidatedID (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::Equals (ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733__SeqOfETSI101733_CrlValidatedID ("_SeqOfETSI101733_CrlValidatedID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CRLListID (const char* name, 
   ASN1T_ETSI101733_CRLListID* pValue, ASN1T_ETSI101733_CRLListID* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".crls", 0, 0, 0);
   if (! asn1Compare_ETSI101733__SeqOfETSI101733_CrlValidatedID (namebuf, &pValue->crls, &pCmpValue->crls, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CRLListID::Equals (ASN1T_ETSI101733_CRLListID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CRLListID ("CRLListID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OcspIdentifier (const char* name, 
   ASN1T_ETSI101733_OcspIdentifier* pValue, 
   ASN1T_ETSI101733_OcspIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".ocspResponderID", 0, 0, 0);
   if (! asn1Compare_OCSP_ResponderID (namebuf, &pValue->ocspResponderID, &pCmpValue->ocspResponderID, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".producedAt", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->producedAt, pCmpValue->producedAt, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OcspIdentifier::Equals (ASN1T_ETSI101733_OcspIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OcspIdentifier ("OcspIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OcspResponsesID (const char* name, 
   ASN1T_ETSI101733_OcspResponsesID* pValue, 
   ASN1T_ETSI101733_OcspResponsesID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".ocspIdentifier", 0, 0, 0);
   if (! asn1Compare_ETSI101733_OcspIdentifier (namebuf, &pValue->ocspIdentifier, &pCmpValue->ocspIdentifier, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".ocspRepHash", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.ocspRepHashPresent,
   pCmpValue->m.ocspRepHashPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.ocspRepHashPresent) 
   {
      if (! asn1Compare_ETSI101733_OtherHash (namebuf, &pValue->ocspRepHash, &pCmpValue->ocspRepHash, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OcspResponsesID::Equals (ASN1T_ETSI101733_OcspResponsesID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OcspResponsesID ("OcspResponsesID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_OcspResponsesID (
   const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_OcspResponsesID* pdata;
   ASN1T_ETSI101733_OcspResponsesID* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_OcspResponsesID*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_OcspResponsesID*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_OcspResponsesID (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::Equals (ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733__SeqOfETSI101733_OcspResponsesID ("_SeqOfETSI101733_OcspResponsesID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OcspListID (const char* name, 
   ASN1T_ETSI101733_OcspListID* pValue, 
   ASN1T_ETSI101733_OcspListID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".ocspResponses", 0, 0, 0);
   if (! asn1Compare_ETSI101733__SeqOfETSI101733_OcspResponsesID (namebuf, &pValue->ocspResponses, &pCmpValue->ocspResponses, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OcspListID::Equals (ASN1T_ETSI101733_OcspListID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OcspListID ("OcspListID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OtherRevRefs_otherRevRefs (const char* name, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pValue, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1TOpenType* pdata;
   ASN1TOpenType* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1TOpenType*) pnode->data;
      pCmpdata = (ASN1TOpenType*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpOpenType (namebuf,
      pdata->numocts,
      pdata->data,
      pCmpdata->numocts,
      pCmpdata->data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::Equals (ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherRevRefs_otherRevRefs ("OtherRevRefs_otherRevRefs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OtherRevRefs (const char* name, 
   ASN1T_ETSI101733_OtherRevRefs* pValue, 
   ASN1T_ETSI101733_OtherRevRefs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".otherRevRefType", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->otherRevRefType, (ASN1OBJID*)&pCmpValue->otherRevRefType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".otherRevRefs", 0, 0, 0);
   if (! asn1Compare_ETSI101733_OtherRevRefs_otherRevRefs (namebuf, &pValue->otherRevRefs, &pCmpValue->otherRevRefs, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OtherRevRefs::Equals (ASN1T_ETSI101733_OtherRevRefs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherRevRefs ("OtherRevRefs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CrlOcspRef (const char* name, 
   ASN1T_ETSI101733_CrlOcspRef* pValue, 
   ASN1T_ETSI101733_CrlOcspRef* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".crlids", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlidsPresent,
   pCmpValue->m.crlidsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlidsPresent) 
   {
      if (! asn1Compare_ETSI101733_CRLListID (namebuf, &pValue->crlids, &pCmpValue->crlids, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".ocspids", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.ocspidsPresent,
   pCmpValue->m.ocspidsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.ocspidsPresent) 
   {
      if (! asn1Compare_ETSI101733_OcspListID (namebuf, &pValue->ocspids, &pCmpValue->ocspids, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".otherRev", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.otherRevPresent,
   pCmpValue->m.otherRevPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.otherRevPresent) 
   {
      if (! asn1Compare_ETSI101733_OtherRevRefs (namebuf, &pValue->otherRev, &pCmpValue->otherRev, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CrlOcspRef::Equals (ASN1T_ETSI101733_CrlOcspRef* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CrlOcspRef ("CrlOcspRef", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CompleteRevocationRefs (const char* name, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pValue, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_CrlOcspRef* pdata;
   ASN1T_ETSI101733_CrlOcspRef* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_CrlOcspRef*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_CrlOcspRef*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_CrlOcspRef (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CompleteRevocationRefs::Equals (ASN1T_ETSI101733_CompleteRevocationRefs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CompleteRevocationRefs ("CompleteRevocationRefs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CertificateValues (const char* name, 
   ASN1T_ETSI101733_CertificateValues* pValue, 
   ASN1T_ETSI101733_CertificateValues* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_Certificate* pdata;
   ASN1T_EXP_Certificate* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Certificate*) pnode->data;
      pCmpdata = (ASN1T_EXP_Certificate*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Certificate (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CertificateValues::Equals (ASN1T_ETSI101733_CertificateValues* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CertificateValues ("CertificateValues", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_CertificateList (
   const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_EXP_CertificateList* pdata;
   ASN1T_EXP_CertificateList* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_CertificateList*) pnode->data;
      pCmpdata = (ASN1T_EXP_CertificateList*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_CertificateList (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::Equals (ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733__SeqOfETSI101733_CertificateList ("_SeqOfETSI101733_CertificateList", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (
   const char* name, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_OCSP_BasicOCSPResponse* pdata;
   ASN1T_OCSP_BasicOCSPResponse* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_OCSP_BasicOCSPResponse*) pnode->data;
      pCmpdata = (ASN1T_OCSP_BasicOCSPResponse*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_OCSP_BasicOCSPResponse (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::Equals (ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733__SeqOfETSI101733_BasicOCSPResponse ("_SeqOfETSI101733_BasicOCSPResponse", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OtherRevVals_otherRevVals (const char* name, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pValue, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1TOpenType* pdata;
   ASN1TOpenType* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1TOpenType*) pnode->data;
      pCmpdata = (ASN1TOpenType*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpOpenType (namebuf,
      pdata->numocts,
      pdata->data,
      pCmpdata->numocts,
      pCmpdata->data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OtherRevVals_otherRevVals::Equals (ASN1T_ETSI101733_OtherRevVals_otherRevVals* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherRevVals_otherRevVals ("OtherRevVals_otherRevVals", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_OtherRevVals (const char* name, 
   ASN1T_ETSI101733_OtherRevVals* pValue, 
   ASN1T_ETSI101733_OtherRevVals* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".otherRevValType", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->otherRevValType, (ASN1OBJID*)&pCmpValue->otherRevValType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".otherRevVals", 0, 0, 0);
   if (! asn1Compare_ETSI101733_OtherRevVals_otherRevVals (namebuf, &pValue->otherRevVals, &pCmpValue->otherRevVals, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_OtherRevVals::Equals (ASN1T_ETSI101733_OtherRevVals* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_OtherRevVals ("OtherRevVals", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_RevocationValues (const char* name, 
   ASN1T_ETSI101733_RevocationValues* pValue, 
   ASN1T_ETSI101733_RevocationValues* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".crlVals", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.crlValsPresent,
   pCmpValue->m.crlValsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.crlValsPresent) 
   {
      if (! asn1Compare_ETSI101733__SeqOfETSI101733_CertificateList (namebuf, &pValue->crlVals, &pCmpValue->crlVals, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".ocspVals", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.ocspValsPresent,
   pCmpValue->m.ocspValsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.ocspValsPresent) 
   {
      if (! asn1Compare_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (namebuf, &pValue->ocspVals, &pCmpValue->ocspVals, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".otherRevVals", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.otherRevValsPresent,
   pCmpValue->m.otherRevValsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.otherRevValsPresent) 
   {
      if (! asn1Compare_ETSI101733_OtherRevVals (namebuf, &pValue->otherRevVals, &pCmpValue->otherRevVals, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_RevocationValues::Equals (ASN1T_ETSI101733_RevocationValues* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_RevocationValues ("RevocationValues", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_AttributeCertificateRefs (const char* name, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pValue, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_OtherCertID* pdata;
   ASN1T_ETSI101733_OtherCertID* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_OtherCertID*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_OtherCertID*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_OtherCertID (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_AttributeCertificateRefs::Equals (ASN1T_ETSI101733_AttributeCertificateRefs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_AttributeCertificateRefs ("AttributeCertificateRefs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_AttributeRevocationRefs (const char* name, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pValue, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_CrlOcspRef* pdata;
   ASN1T_ETSI101733_CrlOcspRef* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_CrlOcspRef*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_CrlOcspRef*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_CrlOcspRef (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_AttributeRevocationRefs::Equals (ASN1T_ETSI101733_AttributeRevocationRefs* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_AttributeRevocationRefs ("AttributeRevocationRefs", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_ContentReference (const char* name, 
   ASN1T_ETSI101733_ContentReference* pValue, 
   ASN1T_ETSI101733_ContentReference* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".contentType", 0, 0, 0);
   if (! asn1Compare_CMS_ContentType (namebuf, &pValue->contentType, &pCmpValue->contentType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".signedContentIdentifier", 0, 0, 0);
   if (! asn1Compare_ETSI101733_ContentIdentifier (namebuf, &pValue->signedContentIdentifier, &pCmpValue->signedContentIdentifier, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".originatorSignatureValue", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->originatorSignatureValue.numocts, 
      pValue->originatorSignatureValue.data, 
      pCmpValue->originatorSignatureValue.numocts, 
      pCmpValue->originatorSignatureValue.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_ContentReference::Equals (ASN1T_ETSI101733_ContentReference* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_ContentReference ("ContentReference", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_ContentHints (const char* name, 
   ASN1T_ETSI101733_ContentHints* pValue, 
   ASN1T_ETSI101733_ContentHints* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".contentDescription", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.contentDescriptionPresent,
   pCmpValue->m.contentDescriptionPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.contentDescriptionPresent) 
   {
      if ( !rtCmpCharStr (namebuf, (const char*)pValue->contentDescription, (const char*)pCmpValue->contentDescription, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".contentType", 0, 0, 0);
   if (! asn1Compare_CMS_ContentType (namebuf, &pValue->contentType, &pCmpValue->contentType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_ContentHints::Equals (ASN1T_ETSI101733_ContentHints* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_ContentHints ("ContentHints", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CommitmentTypeQualifier (const char* name, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pValue, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".commitmentTypeIdentifier", 0, 0, 0);
   if (! asn1Compare_ETSI101733_CommitmentTypeIdentifier (namebuf, &pValue->commitmentTypeIdentifier, &pCmpValue->commitmentTypeIdentifier, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".qualifier", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->qualifier.numocts,
   pValue->qualifier.data,
   pCmpValue->qualifier.numocts,
   pCmpValue->qualifier.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CommitmentTypeQualifier::Equals (ASN1T_ETSI101733_CommitmentTypeQualifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CommitmentTypeQualifier ("CommitmentTypeQualifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (
   const char* name, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pValue, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_CommitmentTypeQualifier* pdata;
   ASN1T_ETSI101733_CommitmentTypeQualifier* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_CommitmentTypeQualifier*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_CommitmentTypeQualifier*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_CommitmentTypeQualifier (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::Equals (ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier ("CommitmentTypeIndication_commitmentTypeQualifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_CommitmentTypeIndication (const char* name, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pValue, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".commitmentTypeId", 0, 0, 0);
   if (! asn1Compare_ETSI101733_CommitmentTypeIdentifier (namebuf, &pValue->commitmentTypeId, &pCmpValue->commitmentTypeId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".commitmentTypeQualifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.commitmentTypeQualifierPresent,
   pCmpValue->m.commitmentTypeQualifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.commitmentTypeQualifierPresent) 
   {
      if (! asn1Compare_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (namebuf, &pValue->commitmentTypeQualifier, &pCmpValue->commitmentTypeQualifier, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_CommitmentTypeIndication::Equals (ASN1T_ETSI101733_CommitmentTypeIndication* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_CommitmentTypeIndication ("CommitmentTypeIndication", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_PostalAddress (const char* name, 
   ASN1T_ETSI101733_PostalAddress* pValue, 
   ASN1T_ETSI101733_PostalAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_DirectoryString* pdata;
   ASN1T_EXP_DirectoryString* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_DirectoryString*) pnode->data;
      pCmpdata = (ASN1T_EXP_DirectoryString*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_DirectoryString (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_PostalAddress::Equals (ASN1T_ETSI101733_PostalAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_PostalAddress ("PostalAddress", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SignerLocation (const char* name, 
   ASN1T_ETSI101733_SignerLocation* pValue, 
   ASN1T_ETSI101733_SignerLocation* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".countryName", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.countryNamePresent,
   pCmpValue->m.countryNamePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.countryNamePresent) 
   {
      if (! asn1Compare_EXP_DirectoryString (namebuf, &pValue->countryName, &pCmpValue->countryName, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".localityName", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.localityNamePresent,
   pCmpValue->m.localityNamePresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.localityNamePresent) 
   {
      if (! asn1Compare_EXP_DirectoryString (namebuf, &pValue->localityName, &pCmpValue->localityName, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".postalAdddress", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.postalAdddressPresent,
   pCmpValue->m.postalAdddressPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.postalAdddressPresent) 
   {
      if (! asn1Compare_ETSI101733_PostalAddress (namebuf, &pValue->postalAdddress, &pCmpValue->postalAdddress, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_SignerLocation::Equals (ASN1T_ETSI101733_SignerLocation* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SignerLocation ("SignerLocation", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_ClaimedAttributes (const char* name, 
   ASN1T_ETSI101733_ClaimedAttributes* pValue, 
   ASN1T_ETSI101733_ClaimedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_Attribute* pdata;
   ASN1T_EXP_Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Attribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_ClaimedAttributes::Equals (ASN1T_ETSI101733_ClaimedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_ClaimedAttributes ("ClaimedAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SignerAttribute_element (const char* name, 
   ASN1T_ETSI101733_SignerAttribute_element* pValue, 
   ASN1T_ETSI101733_SignerAttribute_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* claimedAttributes */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.claimedAttributes", 0, 0, 0);
         if (! asn1Compare_ETSI101733_ClaimedAttributes (namebuf, pValue->u.claimedAttributes, pCmpValue->u.claimedAttributes, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* certifiedAttributes */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.certifiedAttributes", 0, 0, 0);
         if (! asn1Compare_ETSI101733_CertifiedAttributes (namebuf, pValue->u.certifiedAttributes, pCmpValue->u.certifiedAttributes, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ETSI101733_SignerAttribute_element::Equals (ASN1T_ETSI101733_SignerAttribute_element* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SignerAttribute_element ("SignerAttribute_element", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ETSI101733_SignerAttribute (const char* name, 
   ASN1T_ETSI101733_SignerAttribute* pValue, 
   ASN1T_ETSI101733_SignerAttribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_ETSI101733_SignerAttribute_element* pdata;
   ASN1T_ETSI101733_SignerAttribute_element* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_ETSI101733_SignerAttribute_element*) pnode->data;
      pCmpdata = (ASN1T_ETSI101733_SignerAttribute_element*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_ETSI101733_SignerAttribute_element (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_ETSI101733_SignerAttribute::Equals (ASN1T_ETSI101733_SignerAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ETSI101733_SignerAttribute ("SignerAttribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

