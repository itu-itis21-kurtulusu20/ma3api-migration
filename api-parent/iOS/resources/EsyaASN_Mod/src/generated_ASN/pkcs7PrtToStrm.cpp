/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "pkcs7.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_PKCS7_ContentType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ContentType* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_PKCS7_ContentType::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_ContentType (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_ContentType::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_Data (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_Data* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS7_Data::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_Data (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_Data::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_ContentEncryptionAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_DigestAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKCS7_DigestAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_DigestAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_DigestEncryptionAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_KeyEncryptionAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_Version (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_Version* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, name, *pvalue);
   return 0;
}

int ASN1C_PKCS7_Version::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_Version (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_Version::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_EncryptedDigest (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EncryptedDigest* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS7_EncryptedDigest::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_EncryptedDigest (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_EncryptedDigest::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_Digest (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_Digest* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS7_Digest::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_Digest (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_Digest::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_EncryptedContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EncryptedContent* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS7_EncryptedContent::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_EncryptedContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_EncryptedContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_EncryptedKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EncryptedKey* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS7_EncryptedKey::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_EncryptedKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_EncryptedKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_Hash (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_Hash* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS7_Hash::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_Hash (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_Hash::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_ContentInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ContentInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_ContentType (pctxt, "contentType", &pvalue->contentType);

   if (pvalue->m.contentPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "content",
         pvalue->content.numocts, pvalue->content.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_ContentInfo::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_ContentInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_ContentInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_CertificateRevocationLists (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_CertificateRevocationLists* pvalue)
{
   ASN1T_EXP_CertificateList* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_CertificateList*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_CertificateList (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS7_CertificateRevocationLists::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_CertificateRevocationLists (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_CertificateRevocationLists::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_IssuerAndSerialNumber* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_Name (pctxt, "issuer", &pvalue->issuer);

   asn1PrtToStrm_EXP_CertificateSerialNumber (pctxt, "serialNumber", &pvalue->serialNumber);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_IssuerAndSerialNumber::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_IssuerAndSerialNumber::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_ExtendedCertificateOrCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ExtendedCertificateOrCertificate* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* certificate */
      case 1:
      {
         asn1PrtToStrm_EXP_Certificate (pctxt, "certificate", pvalue->u.certificate);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_ExtendedCertificateOrCertificate::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_ExtendedCertificateOrCertificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_ExtendedCertificateOrCertificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pvalue)
{
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS7_ExtendedCertificateOrCertificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS7_ExtendedCertificateOrCertificate (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS7_ExtendedCertificatesAndCertificates::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_ExtendedCertificatesAndCertificates (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_ExtendedCertificatesAndCertificates::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifiers (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_DigestAlgorithmIdentifiers* pvalue)
{
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS7_DigestAlgorithmIdentifier*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifier (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS7_DigestAlgorithmIdentifiers::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifiers (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_DigestAlgorithmIdentifiers::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_SignerInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SignerInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_Version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (pctxt, "issuerAndSerialNumber", &pvalue->issuerAndSerialNumber);

   asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifier (pctxt, "digestAlgorithm", &pvalue->digestAlgorithm);

   if (pvalue->m.authenticatedAttributesPresent) {
      asn1PrtToStrm_PKCS10_Attributes (pctxt, "authenticatedAttributes", &pvalue->authenticatedAttributes);
   }

   asn1PrtToStrm_PKCS7_DigestEncryptionAlgorithmIdentifier (pctxt, "digestEncryptionAlgorithm", &pvalue->digestEncryptionAlgorithm);

   asn1PrtToStrm_PKCS7_EncryptedDigest (pctxt, "encryptedDigest", &pvalue->encryptedDigest);

   if (pvalue->m.unauthenticatedAttributesPresent) {
      asn1PrtToStrm_PKCS10_Attributes (pctxt, "unauthenticatedAttributes", &pvalue->unauthenticatedAttributes);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_SignerInfo::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_SignerInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_SignerInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_SignerInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SignerInfos* pvalue)
{
   ASN1T_PKCS7_SignerInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS7_SignerInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS7_SignerInfo (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS7_SignerInfos::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_SignerInfos (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_SignerInfos::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_SignedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SignedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_Version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifiers (pctxt, "digestAlgorithms", &pvalue->digestAlgorithms);

   asn1PrtToStrm_PKCS7_ContentInfo (pctxt, "contentInfo", &pvalue->contentInfo);

   if (pvalue->m.certificatesPresent) {
      asn1PrtToStrm_PKCS7_ExtendedCertificatesAndCertificates (pctxt, "certificates", &pvalue->certificates);
   }

   if (pvalue->m.crlsPresent) {
      asn1PrtToStrm_PKCS7_CertificateRevocationLists (pctxt, "crls", &pvalue->crls);
   }

   asn1PrtToStrm_PKCS7_SignerInfos (pctxt, "signerInfos", &pvalue->signerInfos);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_SignedData::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_SignedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_SignedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_DigestInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_DigestInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifier (pctxt, "digestAlgorithm", &pvalue->digestAlgorithm);

   asn1PrtToStrm_PKCS7_Digest (pctxt, "digest", &pvalue->digest);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_DigestInfo::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_DigestInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_DigestInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_RecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_RecipientInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_Version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (pctxt, "issuerAndSerialNumber", &pvalue->issuerAndSerialNumber);

   asn1PrtToStrm_PKCS7_KeyEncryptionAlgorithmIdentifier (pctxt, "keyEncryptionAlgorithm", &pvalue->keyEncryptionAlgorithm);

   asn1PrtToStrm_PKCS7_EncryptedKey (pctxt, "encryptedKey", &pvalue->encryptedKey);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_RecipientInfo::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_RecipientInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_RecipientInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_RecipientInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_RecipientInfos* pvalue)
{
   ASN1T_PKCS7_RecipientInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS7_RecipientInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS7_RecipientInfo (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS7_RecipientInfos::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_RecipientInfos (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_RecipientInfos::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_EncryptedContentInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EncryptedContentInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_ContentType (pctxt, "contentType", &pvalue->contentType);

   asn1PrtToStrm_PKCS7_ContentEncryptionAlgorithmIdentifier (pctxt, "contentEncryptionAlgorithm", &pvalue->contentEncryptionAlgorithm);

   if (pvalue->m.encryptedContentPresent) {
      asn1PrtToStrm_PKCS7_EncryptedContent (pctxt, "encryptedContent", &pvalue->encryptedContent);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_EncryptedContentInfo::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_EncryptedContentInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_EncryptedContentInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_EnvelopedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_EnvelopedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_Version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_PKCS7_RecipientInfos (pctxt, "recipientInfos", &pvalue->recipientInfos);

   asn1PrtToStrm_PKCS7_EncryptedContentInfo (pctxt, "encryptedContentInfo", &pvalue->encryptedContentInfo);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_EnvelopedData::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_EnvelopedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_EnvelopedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_SignedAndEnvelopedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SignedAndEnvelopedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_Version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_PKCS7_RecipientInfos (pctxt, "recipientInfos", &pvalue->recipientInfos);

   asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifiers (pctxt, "digestAlgorithms", &pvalue->digestAlgorithms);

   asn1PrtToStrm_PKCS7_EncryptedContentInfo (pctxt, "encryptedContentInfo", &pvalue->encryptedContentInfo);

   if (pvalue->m.certificatesPresent) {
      asn1PrtToStrm_PKCS7_ExtendedCertificatesAndCertificates (pctxt, "certificates", &pvalue->certificates);
   }

   if (pvalue->m.crlsPresent) {
      asn1PrtToStrm_PKCS7_CertificateRevocationLists (pctxt, "crls", &pvalue->crls);
   }

   asn1PrtToStrm_PKCS7_SignerInfos (pctxt, "signerInfos", &pvalue->signerInfos);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_SignedAndEnvelopedData::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_SignedAndEnvelopedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_SignedAndEnvelopedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_IssuerSerial (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_IssuerSerial* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_IMP_GeneralNames (pctxt, "issuer", &pvalue->issuer);

   asn1PrtToStrm_EXP_CertificateSerialNumber (pctxt, "serialNumber", &pvalue->serialNumber);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_IssuerSerial::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_IssuerSerial (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_IssuerSerial::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_ESSCertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ESSCertID* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7_Hash (pctxt, "certHash", &pvalue->certHash);

   if (pvalue->m.issuerSerialPresent) {
      asn1PrtToStrm_PKCS7_IssuerSerial (pctxt, "issuerSerial", &pvalue->issuerSerial);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_ESSCertID::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_ESSCertID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_ESSCertID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pvalue)
{
   ASN1T_PKCS7_ESSCertID* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS7_ESSCertID*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS7_ESSCertID (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7__SeqOfPKCS7_ESSCertID (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pvalue)
{
   ASN1T_IMP_PolicyInformation* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_PolicyInformation*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_PolicyInformation (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7__SeqOfPKCS7_PolicyInformation (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_SigningCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SigningCertificate* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7__SeqOfPKCS7_ESSCertID (pctxt, "certs", &pvalue->certs);

   if (pvalue->m.policiesPresent) {
      asn1PrtToStrm_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, "policies", &pvalue->policies);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_SigningCertificate::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_SigningCertificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_SigningCertificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_ESSCertIDv2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_ESSCertIDv2* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.hashAlgorithmPresent) {
      asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "hashAlgorithm", &pvalue->hashAlgorithm);
   }

   asn1PrtToStrm_PKCS7_Hash (pctxt, "certHash", &pvalue->certHash);

   if (pvalue->m.issuerSerialPresent) {
      asn1PrtToStrm_PKCS7_IssuerSerial (pctxt, "issuerSerial", &pvalue->issuerSerial);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_ESSCertIDv2::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_ESSCertIDv2 (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_ESSCertIDv2::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7__SeqOfPKCS7_ESSCertIDv2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7__SeqOfPKCS7_ESSCertIDv2* pvalue)
{
   ASN1T_PKCS7_ESSCertIDv2* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKCS7_ESSCertIDv2*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKCS7_ESSCertIDv2 (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7__SeqOfPKCS7_ESSCertIDv2 (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7__SeqOfPKCS7_ESSCertIDv2::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS7_SigningCertificateV2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS7_SigningCertificateV2* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS7__SeqOfPKCS7_ESSCertIDv2 (pctxt, "certs", &pvalue->certs);

   if (pvalue->m.policiesPresent) {
      asn1PrtToStrm_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, "policies", &pvalue->policies);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS7_SigningCertificateV2::toStream (const char* name)

{
   asn1PrtToStrm_PKCS7_SigningCertificateV2 (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS7_SigningCertificateV2::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

