/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "algorithms.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_ALGOS_KEA_Parms_Id 
   (const char* name, const ASN1T_ALGOS_KEA_Parms_Id* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_ALGOS_KEA_Parms_Id::Print (const char* name)
{
   asn1Print_ALGOS_KEA_Parms_Id (name, &msgData);
}

void asn1Print_ALGOS_Prime_p 
   (const char* name, const ASN1T_ALGOS_Prime_p* pvalue)
{
   rtxPrintIndent ();
   rtxPrintInteger (name, *pvalue);
}

void ASN1C_ALGOS_Prime_p::Print (const char* name)
{
   asn1Print_ALGOS_Prime_p (name, &msgData);
}

void asn1Print_ALGOS_Trinomial 
   (const char* name, const ASN1T_ALGOS_Trinomial* pvalue)
{
   rtxPrintIndent ();
   rtxPrintInteger (name, *pvalue);
}

void ASN1C_ALGOS_Trinomial::Print (const char* name)
{
   asn1Print_ALGOS_Trinomial (name, &msgData);
}

void asn1Print_ALGOS_FieldElement 
   (const char* name, const ASN1T_ALGOS_FieldElement* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_ALGOS_FieldElement::Print (const char* name)
{
   asn1Print_ALGOS_FieldElement (name, &msgData);
}

void asn1Print_ALGOS_ECPoint 
   (const char* name, const ASN1T_ALGOS_ECPoint* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_ALGOS_ECPoint::Print (const char* name)
{
   asn1Print_ALGOS_ECPoint (name, &msgData);
}

void asn1Print_ALGOS_HashAlgorithm 
   (const char* name, const ASN1T_ALGOS_HashAlgorithm* pvalue)
{
   asn1Print_EXP_AlgorithmIdentifier (name, pvalue);
}

void ASN1C_ALGOS_HashAlgorithm::Print (const char* name)
{
   asn1Print_ALGOS_HashAlgorithm (name, &msgData);
}

void asn1Print_ALGOS_SpecifiedECDomainVersion 
   (const char* name, const ASN1T_ALGOS_SpecifiedECDomainVersion* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 1: printf ("%s = ecdpVer1\n", name); break;
      case 2: printf ("%s = ecdpVer2\n", name); break;
      case 3: printf ("%s = ecdpVer3\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_ALGOS_SpecifiedECDomainVersion::Print (const char* name)
{
   asn1Print_ALGOS_SpecifiedECDomainVersion (name, &msgData);
}

void asn1Print_ALGOS_ECPVer 
   (const char* name, const ASN1T_ALGOS_ECPVer* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 1: printf ("%s = ecpVer1\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_ALGOS_ECPVer::Print (const char* name)
{
   asn1Print_ALGOS_ECPVer (name, &msgData);
}

void asn1Print_ALGOS_ECPrivateKey_version 
   (const char* name, const ASN1T_ALGOS_ECPrivateKey_version* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 1: printf ("%s = ecPrivkeyVer1\n", name); break;
      default: rtxPrintUnsigned (name, *pvalue);
   }
}

void ASN1C_ALGOS_ECPrivateKey_version::Print (const char* name)
{
   asn1Print_ALGOS_ECPrivateKey_version (name, &msgData);
}

void asn1Print_ALGOS_Dss_Parms 
   (const char* name, const ASN1T_ALGOS_Dss_Parms* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("p", pvalue->p);

   rtxPrintIndent ();
   rtxPrintInteger ("q", pvalue->q);

   rtxPrintIndent ();
   rtxPrintInteger ("g", pvalue->g);

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_Dss_Parms::Print (const char* name)
{
   asn1Print_ALGOS_Dss_Parms (name, &msgData);
}

void asn1Print_ALGOS_DssSigValue 
   (const char* name, const ASN1T_ALGOS_DssSigValue* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("r", pvalue->r);

   rtxPrintIndent ();
   rtxPrintCharStr ("s", pvalue->s);

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_DssSigValue::Print (const char* name)
{
   asn1Print_ALGOS_DssSigValue (name, &msgData);
}

void asn1Print_ALGOS_ValidationParms 
   (const char* name, const ASN1T_ALGOS_ValidationParms* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("seed", pvalue->seed.numbits, pvalue->seed.data);

   rtxPrintIndent ();
   rtxPrintInteger ("pgenCounter", pvalue->pgenCounter);

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_ValidationParms::Print (const char* name)
{
   asn1Print_ALGOS_ValidationParms (name, &msgData);
}

void asn1Print_ALGOS_DomainParameters 
   (const char* name, const ASN1T_ALGOS_DomainParameters* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("p", pvalue->p);

   rtxPrintIndent ();
   rtxPrintInteger ("g", pvalue->g);

   rtxPrintIndent ();
   rtxPrintInteger ("q", pvalue->q);

   if (pvalue->m.jPresent) {
      rtxPrintIndent ();
      rtxPrintInteger ("j", pvalue->j);
   }

   if (pvalue->m.validationParmsPresent) {
      asn1Print_ALGOS_ValidationParms ("validationParms", &pvalue->
         validationParms);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_DomainParameters::Print (const char* name)
{
   asn1Print_ALGOS_DomainParameters (name, &msgData);
}

void asn1Print_ALGOS_FieldID 
   (const char* name, const ASN1T_ALGOS_FieldID* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("fieldType", (ASN1OBJID*)&pvalue->fieldType);

   rtxPrintIndent ();
   rtxPrintHexStr ("parameters", pvalue->parameters.numocts,
   pvalue->parameters.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_FieldID::Print (const char* name)
{
   asn1Print_ALGOS_FieldID (name, &msgData);
}

void asn1Print_ALGOS_ECDSASigValue 
   (const char* name, const ASN1T_ALGOS_ECDSASigValue* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("r", pvalue->r);

   rtxPrintIndent ();
   rtxPrintCharStr ("s", pvalue->s);

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_ECDSASigValue::Print (const char* name)
{
   asn1Print_ALGOS_ECDSASigValue (name, &msgData);
}

void asn1Print_ALGOS_Characteristic_two 
   (const char* name, const ASN1T_ALGOS_Characteristic_two* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("m_", pvalue->m_);

   rtxPrintIndent ();
   rtPrintOID ("basis", (ASN1OBJID*)&pvalue->basis);

   rtxPrintIndent ();
   rtxPrintHexStr ("parameters", pvalue->parameters.numocts,
   pvalue->parameters.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_Characteristic_two::Print (const char* name)
{
   asn1Print_ALGOS_Characteristic_two (name, &msgData);
}

void asn1Print_ALGOS_Pentanomial 
   (const char* name, const ASN1T_ALGOS_Pentanomial* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("k1", pvalue->k1);

   rtxPrintIndent ();
   rtxPrintInteger ("k2", pvalue->k2);

   rtxPrintIndent ();
   rtxPrintInteger ("k3", pvalue->k3);

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_Pentanomial::Print (const char* name)
{
   asn1Print_ALGOS_Pentanomial (name, &msgData);
}

void asn1Print_ALGOS_Curve (const char* name, const ASN1T_ALGOS_Curve* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ALGOS_FieldElement ("a", &pvalue->a);

   asn1Print_ALGOS_FieldElement ("b", &pvalue->b);

   if (pvalue->m.seedPresent) {
      rtxPrintIndent ();
      rtPrintBitStrBraceText ("seed", pvalue->seed.numbits, pvalue->seed.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_Curve::Print (const char* name)
{
   asn1Print_ALGOS_Curve (name, &msgData);
}

void asn1Print_ALGOS_SpecifiedECDomain 
   (const char* name, const ASN1T_ALGOS_SpecifiedECDomain* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   switch (pvalue->version) {
      case 1: printf ("%s = ecdpVer1\n", "version"); break;
      case 2: printf ("%s = ecdpVer2\n", "version"); break;
      case 3: printf ("%s = ecdpVer3\n", "version"); break;
      default: rtxPrintInteger ("version", pvalue->version);
   }

   asn1Print_ALGOS_FieldID ("fieldID", &pvalue->fieldID);

   asn1Print_ALGOS_Curve ("curve", &pvalue->curve);

   asn1Print_ALGOS_ECPoint ("base", &pvalue->base);

   rtxPrintIndent ();
   rtxPrintCharStr ("order", pvalue->order);

   if (pvalue->m.cofactorPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("cofactor", pvalue->cofactor);
   }

   if (pvalue->m.hashPresent) {
      asn1Print_ALGOS_HashAlgorithm ("hash", &pvalue->hash);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_SpecifiedECDomain::Print (const char* name)
{
   asn1Print_ALGOS_SpecifiedECDomain (name, &msgData);
}

void asn1Print_ALGOS_ECParameters 
   (const char* name, const ASN1T_ALGOS_ECParameters* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* implicitCurve */
      case 1:
      {
         rtxPrintIndent();
         rtxPrintNull ("implicitCurve");
         break;
      }
      /* namedCurve */
      case 2:
      {
         rtxPrintIndent ();
         rtPrintOID ("namedCurve", (ASN1OBJID*)pvalue->u.namedCurve);
         break;
      }
      /* specifiedCurve */
      case 3:
      {
         asn1Print_ALGOS_SpecifiedECDomain ("specifiedCurve", pvalue->
            u.specifiedCurve);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_ECParameters::Print (const char* name)
{
   asn1Print_ALGOS_ECParameters (name, &msgData);
}

void asn1Print_ALGOS_ECPrivateKey 
   (const char* name, const ASN1T_ALGOS_ECPrivateKey* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ALGOS_ECPrivateKey_version ("version", &pvalue->version);

   rtxPrintIndent ();
   rtxPrintHexStr ("privateKey", pvalue->privateKey.numocts, pvalue->privateKey.data);

   if (pvalue->m.parametersPresent) {
      asn1Print_ALGOS_ECParameters ("parameters", &pvalue->parameters);
   }

   if (pvalue->m.publicKeyPresent) {
      rtxPrintIndent ();
      rtPrintBitStrBraceText ("publicKey", pvalue->publicKey.numbits, pvalue->publicKey.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_ECPrivateKey::Print (const char* name)
{
   asn1Print_ALGOS_ECPrivateKey (name, &msgData);
}

void asn1Print_ALGOS_RSASSA_PSS_params 
   (const char* name, const ASN1T_ALGOS_RSASSA_PSS_params* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.hashAlgorithmPresent) {
      asn1Print_EXP_AlgorithmIdentifier ("hashAlgorithm", &pvalue->
         hashAlgorithm);
   }

   if (pvalue->m.maskGenAlgorithmPresent) {
      asn1Print_EXP_AlgorithmIdentifier ("maskGenAlgorithm", &pvalue->
         maskGenAlgorithm);
   }

   rtxPrintIndent ();
   rtxPrintInteger ("saltLength", pvalue->saltLength);

   rtxPrintIndent ();
   rtxPrintInteger ("trailerField", pvalue->trailerField);

   rtxPrintCloseBrace ();
}

void ASN1C_ALGOS_RSASSA_PSS_params::Print (const char* name)
{
   asn1Print_ALGOS_RSASSA_PSS_params (name, &msgData);
}

