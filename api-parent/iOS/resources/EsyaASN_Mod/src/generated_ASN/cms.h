/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef CMS_H
#define CMS_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CBitStr.h"
#include "rtsrc/ASN1CSeqOfList.h"
#include "Explicit.h"
#include "attrcert.h"
#include "pkcs7.h"
#include "dercms.h"

/**
 * Header file for ASN.1 module cms
 */
/**************************************************************/
/*                                                            */
/*  ContentType                                               */
/*                                                            */
/**************************************************************/
/*
ContentType ::= OBJECT IDENTIFIER
*/
#define TV_CMS_ContentType	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_CMS_ContentType;

class EXTERN ASN1C_CMS_ContentType :
public ASN1CType
{
protected:
   ASN1T_CMS_ContentType& msgData;
public:
   ASN1C_CMS_ContentType (ASN1T_CMS_ContentType& data);
   ASN1C_CMS_ContentType (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_ContentType& data);
   ASN1C_CMS_ContentType (OSRTContext &context, ASN1T_CMS_ContentType& data);
   ASN1C_CMS_ContentType (ASN1C_CMS_ContentType& original);
   virtual ~ASN1C_CMS_ContentType () {}
   inline ASN1T_CMS_ContentType& getData () { return msgData; }
   inline const ASN1T_CMS_ContentType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentType");
   int toStream (const char* name = "ContentType");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_ContentType* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_ContentType& getCopy (ASN1T_CMS_ContentType* pDstData = 0);
   ASN1T_CMS_ContentType* newCopy ();

   inline ASN1C_CMS_ContentType& operator= (ASN1C_CMS_ContentType& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_ContentType (OSCTXT* pctxt,
   ASN1T_CMS_ContentType *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_ContentType (OSCTXT* pctxt, 
   ASN1T_CMS_ContentType* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_ContentType 
   (const char* name, const ASN1T_CMS_ContentType* pvalue);

EXTERN int asn1PrtToStrm_CMS_ContentType (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ContentType* pvalue);

EXTERN ASN1T_CMS_ContentType* new_ASN1T_CMS_ContentType (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_ContentType (const char* name, 
   ASN1T_CMS_ContentType* pValue, ASN1T_CMS_ContentType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_ContentType (OSCTXT* pctxt, 
   ASN1T_CMS_ContentType* pSrcValue, ASN1T_CMS_ContentType* pDstValue);

EXTERN void asn1Init_CMS_ContentType (ASN1T_CMS_ContentType* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedKey                                              */
/*                                                            */
/**************************************************************/
/*
EncryptedKey ::= OCTET STRING
*/
#define TV_CMS_EncryptedKey	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_CMS_EncryptedKey;

class EXTERN ASN1C_CMS_EncryptedKey :
public ASN1CType
{
protected:
   ASN1T_CMS_EncryptedKey& msgData;
public:
   ASN1C_CMS_EncryptedKey (ASN1T_CMS_EncryptedKey& data);
   ASN1C_CMS_EncryptedKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_EncryptedKey& data);
   ASN1C_CMS_EncryptedKey (OSRTContext &context, ASN1T_CMS_EncryptedKey& data);
   ASN1C_CMS_EncryptedKey (ASN1C_CMS_EncryptedKey& original);
   virtual ~ASN1C_CMS_EncryptedKey () {}
   inline ASN1T_CMS_EncryptedKey& getData () { return msgData; }
   inline const ASN1T_CMS_EncryptedKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedKey");
   int toStream (const char* name = "EncryptedKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_EncryptedKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_EncryptedKey& getCopy (ASN1T_CMS_EncryptedKey* pDstData = 0);
   ASN1T_CMS_EncryptedKey* newCopy ();

   inline ASN1C_CMS_EncryptedKey& operator= (ASN1C_CMS_EncryptedKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_EncryptedKey (OSCTXT* pctxt,
   ASN1T_CMS_EncryptedKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_EncryptedKey (OSCTXT* pctxt, 
   ASN1T_CMS_EncryptedKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_EncryptedKey 
   (const char* name, const ASN1T_CMS_EncryptedKey* pvalue);

EXTERN int asn1PrtToStrm_CMS_EncryptedKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_EncryptedKey* pvalue);

EXTERN ASN1T_CMS_EncryptedKey* new_ASN1T_CMS_EncryptedKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_EncryptedKey (const char* name, 
   ASN1T_CMS_EncryptedKey* pValue, ASN1T_CMS_EncryptedKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_EncryptedKey (OSCTXT* pctxt, 
   ASN1T_CMS_EncryptedKey* pSrcValue, ASN1T_CMS_EncryptedKey* pDstValue);

EXTERN void asn1Init_CMS_EncryptedKey (ASN1T_CMS_EncryptedKey* pvalue);

EXTERN void asn1Free_CMS_EncryptedKey (OSCTXT *pctxt, ASN1T_CMS_EncryptedKey* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectKeyIdentifier                                      */
/*                                                            */
/**************************************************************/
/*
SubjectKeyIdentifier ::= OCTET STRING
*/
#define TV_CMS_SubjectKeyIdentifier	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_CMS_SubjectKeyIdentifier;

class EXTERN ASN1C_CMS_SubjectKeyIdentifier :
public ASN1CType
{
protected:
   ASN1T_CMS_SubjectKeyIdentifier& msgData;
public:
   ASN1C_CMS_SubjectKeyIdentifier (ASN1T_CMS_SubjectKeyIdentifier& data);
   ASN1C_CMS_SubjectKeyIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SubjectKeyIdentifier& data);
   ASN1C_CMS_SubjectKeyIdentifier (OSRTContext &context
      , ASN1T_CMS_SubjectKeyIdentifier& data);
   ASN1C_CMS_SubjectKeyIdentifier (ASN1C_CMS_SubjectKeyIdentifier& original);
   virtual ~ASN1C_CMS_SubjectKeyIdentifier () {}
   inline ASN1T_CMS_SubjectKeyIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_SubjectKeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SubjectKeyIdentifier");
   int toStream (const char* name = "SubjectKeyIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SubjectKeyIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SubjectKeyIdentifier& getCopy (ASN1T_CMS_SubjectKeyIdentifier* pDstData = 0);
   ASN1T_CMS_SubjectKeyIdentifier* newCopy ();

   inline ASN1C_CMS_SubjectKeyIdentifier& operator= (ASN1C_CMS_SubjectKeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_SubjectKeyIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_SubjectKeyIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SubjectKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SubjectKeyIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_SubjectKeyIdentifier 
   (const char* name, const ASN1T_CMS_SubjectKeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_SubjectKeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SubjectKeyIdentifier* pvalue);

EXTERN ASN1T_CMS_SubjectKeyIdentifier* 
   new_ASN1T_CMS_SubjectKeyIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_SubjectKeyIdentifier (const char* name, 
   ASN1T_CMS_SubjectKeyIdentifier* pValue, 
   ASN1T_CMS_SubjectKeyIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SubjectKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SubjectKeyIdentifier* pSrcValue, ASN1T_CMS_SubjectKeyIdentifier*
    pDstValue);

EXTERN void asn1Init_CMS_SubjectKeyIdentifier (ASN1T_CMS_SubjectKeyIdentifier* pvalue);

EXTERN void asn1Free_CMS_SubjectKeyIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_SubjectKeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  Digest                                                    */
/*                                                            */
/**************************************************************/
/*
Digest ::= OCTET STRING
*/
#define TV_CMS_Digest	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_CMS_Digest;

class EXTERN ASN1C_CMS_Digest :
public ASN1CType
{
protected:
   ASN1T_CMS_Digest& msgData;
public:
   ASN1C_CMS_Digest (ASN1T_CMS_Digest& data);
   ASN1C_CMS_Digest (OSRTMessageBufferIF& msgBuf, ASN1T_CMS_Digest& data);
   ASN1C_CMS_Digest (OSRTContext &context, ASN1T_CMS_Digest& data);
   ASN1C_CMS_Digest (ASN1C_CMS_Digest& original);
   virtual ~ASN1C_CMS_Digest () {}
   inline ASN1T_CMS_Digest& getData () { return msgData; }
   inline const ASN1T_CMS_Digest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Digest");
   int toStream (const char* name = "Digest");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_Digest* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_Digest& getCopy (ASN1T_CMS_Digest* pDstData = 0);
   ASN1T_CMS_Digest* newCopy ();

   inline ASN1C_CMS_Digest& operator= (ASN1C_CMS_Digest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_Digest (OSCTXT* pctxt,
   ASN1T_CMS_Digest *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_Digest (OSCTXT* pctxt, ASN1T_CMS_Digest* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_Digest (const char* name, const ASN1T_CMS_Digest* pvalue);

EXTERN int asn1PrtToStrm_CMS_Digest (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_Digest* pvalue);

EXTERN ASN1T_CMS_Digest* new_ASN1T_CMS_Digest (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_Digest (const char* name, ASN1T_CMS_Digest* pValue, 
   ASN1T_CMS_Digest* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_Digest (OSCTXT* pctxt, ASN1T_CMS_Digest* pSrcValue, 
   ASN1T_CMS_Digest* pDstValue);

EXTERN void asn1Init_CMS_Digest (ASN1T_CMS_Digest* pvalue);

EXTERN void asn1Free_CMS_Digest (OSCTXT *pctxt, ASN1T_CMS_Digest* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageAuthenticationCode                                 */
/*                                                            */
/**************************************************************/
/*
MessageAuthenticationCode ::= OCTET STRING
*/
#define TV_CMS_MessageAuthenticationCode	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_CMS_MessageAuthenticationCode;

class EXTERN ASN1C_CMS_MessageAuthenticationCode :
public ASN1CType
{
protected:
   ASN1T_CMS_MessageAuthenticationCode& msgData;
public:
   ASN1C_CMS_MessageAuthenticationCode
       (ASN1T_CMS_MessageAuthenticationCode& data);
   ASN1C_CMS_MessageAuthenticationCode (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_MessageAuthenticationCode& data);
   ASN1C_CMS_MessageAuthenticationCode (OSRTContext &context
      , ASN1T_CMS_MessageAuthenticationCode& data);
   ASN1C_CMS_MessageAuthenticationCode (ASN1C_CMS_MessageAuthenticationCode& original);
   virtual ~ASN1C_CMS_MessageAuthenticationCode () {}
   inline ASN1T_CMS_MessageAuthenticationCode& getData () { return msgData; }
   inline const ASN1T_CMS_MessageAuthenticationCode& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "MessageAuthenticationCode");
   int toStream (const char* name = "MessageAuthenticationCode");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_MessageAuthenticationCode* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_MessageAuthenticationCode& getCopy (ASN1T_CMS_MessageAuthenticationCode* pDstData = 0);
   ASN1T_CMS_MessageAuthenticationCode* newCopy ();

   inline ASN1C_CMS_MessageAuthenticationCode& operator= (ASN1C_CMS_MessageAuthenticationCode& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_MessageAuthenticationCode (OSCTXT* pctxt,
   ASN1T_CMS_MessageAuthenticationCode *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_MessageAuthenticationCode (OSCTXT* pctxt, 
   ASN1T_CMS_MessageAuthenticationCode* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_MessageAuthenticationCode 
   (const char* name, const ASN1T_CMS_MessageAuthenticationCode* pvalue);

EXTERN int asn1PrtToStrm_CMS_MessageAuthenticationCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_MessageAuthenticationCode* pvalue);

EXTERN ASN1T_CMS_MessageAuthenticationCode* 
   new_ASN1T_CMS_MessageAuthenticationCode (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_MessageAuthenticationCode (const char* name, 
   ASN1T_CMS_MessageAuthenticationCode* pValue, 
   ASN1T_CMS_MessageAuthenticationCode* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_MessageAuthenticationCode (OSCTXT* pctxt, 
   ASN1T_CMS_MessageAuthenticationCode* pSrcValue, 
   ASN1T_CMS_MessageAuthenticationCode* pDstValue);

EXTERN void asn1Init_CMS_MessageAuthenticationCode (
   ASN1T_CMS_MessageAuthenticationCode* pvalue);

EXTERN void asn1Free_CMS_MessageAuthenticationCode (OSCTXT *pctxt, 
   ASN1T_CMS_MessageAuthenticationCode* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestAlgorithmIdentifier                                 */
/*                                                            */
/**************************************************************/
/*
DigestAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_CMS_DigestAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_DigestAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_CMS_DigestAlgorithmIdentifier;

class EXTERN ASN1C_CMS_DigestAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMS_DigestAlgorithmIdentifier
       (ASN1T_CMS_DigestAlgorithmIdentifier& data);
   ASN1C_CMS_DigestAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_DigestAlgorithmIdentifier& data);
   ASN1C_CMS_DigestAlgorithmIdentifier (OSRTContext &context
      , ASN1T_CMS_DigestAlgorithmIdentifier& data);
   ASN1C_CMS_DigestAlgorithmIdentifier (ASN1C_CMS_DigestAlgorithmIdentifier& original);
   virtual ~ASN1C_CMS_DigestAlgorithmIdentifier () {}
   inline ASN1T_CMS_DigestAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_DigestAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DigestAlgorithmIdentifier");
   int toStream (const char* name = "DigestAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_DigestAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_DigestAlgorithmIdentifier& getCopy (ASN1T_CMS_DigestAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMS_DigestAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMS_DigestAlgorithmIdentifier& operator= (ASN1C_CMS_DigestAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_DigestAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_DigestAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_DigestAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_DigestAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_DigestAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_DigestAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_DigestAlgorithmIdentifier* pvalue);

EXTERN ASN1T_CMS_DigestAlgorithmIdentifier* 
   new_ASN1T_CMS_DigestAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_DigestAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pValue, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_DigestAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_CMS_DigestAlgorithmIdentifier (
   ASN1T_CMS_DigestAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_CMS_DigestAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  SignatureAlgorithmIdentifier                              */
/*                                                            */
/**************************************************************/
/*
SignatureAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_CMS_SignatureAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_SignatureAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_CMS_SignatureAlgorithmIdentifier;

class EXTERN ASN1C_CMS_SignatureAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMS_SignatureAlgorithmIdentifier
       (ASN1T_CMS_SignatureAlgorithmIdentifier& data);
   ASN1C_CMS_SignatureAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SignatureAlgorithmIdentifier& data);
   ASN1C_CMS_SignatureAlgorithmIdentifier (OSRTContext &context
      , ASN1T_CMS_SignatureAlgorithmIdentifier& data);
   ASN1C_CMS_SignatureAlgorithmIdentifier (ASN1C_CMS_SignatureAlgorithmIdentifier& original);
   virtual ~ASN1C_CMS_SignatureAlgorithmIdentifier () {}
   inline ASN1T_CMS_SignatureAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_SignatureAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignatureAlgorithmIdentifier");
   int toStream (const char* name = "SignatureAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SignatureAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SignatureAlgorithmIdentifier& getCopy (ASN1T_CMS_SignatureAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMS_SignatureAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMS_SignatureAlgorithmIdentifier& operator= (ASN1C_CMS_SignatureAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_SignatureAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_SignatureAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SignatureAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_SignatureAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_SignatureAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_SignatureAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignatureAlgorithmIdentifier* pvalue);

EXTERN ASN1T_CMS_SignatureAlgorithmIdentifier* 
   new_ASN1T_CMS_SignatureAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_SignatureAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pValue, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SignatureAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_CMS_SignatureAlgorithmIdentifier (
   ASN1T_CMS_SignatureAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_CMS_SignatureAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyEncryptionAlgorithmIdentifier                          */
/*                                                            */
/**************************************************************/
/*
KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_CMS_KeyEncryptionAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_KeyEncryptionAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_CMS_KeyEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_CMS_KeyEncryptionAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMS_KeyEncryptionAlgorithmIdentifier
       (ASN1T_CMS_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_CMS_KeyEncryptionAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_CMS_KeyEncryptionAlgorithmIdentifier (OSRTContext &context
      , ASN1T_CMS_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_CMS_KeyEncryptionAlgorithmIdentifier (ASN1C_CMS_KeyEncryptionAlgorithmIdentifier& original);
   virtual ~ASN1C_CMS_KeyEncryptionAlgorithmIdentifier () {}
   inline ASN1T_CMS_KeyEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_KeyEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyEncryptionAlgorithmIdentifier");
   int toStream (const char* name = "KeyEncryptionAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier& getCopy (ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMS_KeyEncryptionAlgorithmIdentifier& operator= (ASN1C_CMS_KeyEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_KeyEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_KeyEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* 
   new_ASN1T_CMS_KeyEncryptionAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_KeyEncryptionAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_CMS_KeyEncryptionAlgorithmIdentifier (
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_CMS_KeyEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentEncryptionAlgorithmIdentifier                      */
/*                                                            */
/**************************************************************/
/*
ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_CMS_ContentEncryptionAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_ContentEncryptionAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_CMS_ContentEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_CMS_ContentEncryptionAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMS_ContentEncryptionAlgorithmIdentifier
       (ASN1T_CMS_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_CMS_ContentEncryptionAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_CMS_ContentEncryptionAlgorithmIdentifier (OSRTContext &context
      , ASN1T_CMS_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_CMS_ContentEncryptionAlgorithmIdentifier (ASN1C_CMS_ContentEncryptionAlgorithmIdentifier& original);
   virtual ~ASN1C_CMS_ContentEncryptionAlgorithmIdentifier () {}
   inline ASN1T_CMS_ContentEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_ContentEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentEncryptionAlgorithmIdentifier");
   int toStream (const char* name = "ContentEncryptionAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier& getCopy (ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMS_ContentEncryptionAlgorithmIdentifier& operator= (ASN1C_CMS_ContentEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_ContentEncryptionAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_ContentEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* 
   new_ASN1T_CMS_ContentEncryptionAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_ContentEncryptionAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pValue, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_CMS_ContentEncryptionAlgorithmIdentifier (
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_CMS_ContentEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageAuthenticationCodeAlgorithm                        */
/*                                                            */
/**************************************************************/
/*
MessageAuthenticationCodeAlgorithm ::= AlgorithmIdentifier
*/
#define TV_CMS_MessageAuthenticationCodeAlgorithm	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_MessageAuthenticationCodeAlgorithm;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_CMS_MessageAuthenticationCodeAlgorithm;

class EXTERN ASN1C_CMS_MessageAuthenticationCodeAlgorithm :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMS_MessageAuthenticationCodeAlgorithm
       (ASN1T_CMS_MessageAuthenticationCodeAlgorithm& data);
   ASN1C_CMS_MessageAuthenticationCodeAlgorithm (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_MessageAuthenticationCodeAlgorithm& data);
   ASN1C_CMS_MessageAuthenticationCodeAlgorithm (OSRTContext &context
      , ASN1T_CMS_MessageAuthenticationCodeAlgorithm& data);
   ASN1C_CMS_MessageAuthenticationCodeAlgorithm (ASN1C_CMS_MessageAuthenticationCodeAlgorithm& original);
   virtual ~ASN1C_CMS_MessageAuthenticationCodeAlgorithm () {}
   inline ASN1T_CMS_MessageAuthenticationCodeAlgorithm& getData () { return msgData; }
   inline const ASN1T_CMS_MessageAuthenticationCodeAlgorithm& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "MessageAuthenticationCodeAlgorithm");
   int toStream (const char* name = "MessageAuthenticationCodeAlgorithm");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm& getCopy (ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pDstData = 0);
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* newCopy ();

   inline ASN1C_CMS_MessageAuthenticationCodeAlgorithm& operator= (ASN1C_CMS_MessageAuthenticationCodeAlgorithm& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_MessageAuthenticationCodeAlgorithm (OSCTXT* pctxt,
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_MessageAuthenticationCodeAlgorithm (OSCTXT* pctxt, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_MessageAuthenticationCodeAlgorithm 
   (const char* name, const ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pvalue);

EXTERN int asn1PrtToStrm_CMS_MessageAuthenticationCodeAlgorithm (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pvalue);

EXTERN ASN1T_CMS_MessageAuthenticationCodeAlgorithm* 
   new_ASN1T_CMS_MessageAuthenticationCodeAlgorithm (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_MessageAuthenticationCodeAlgorithm (const char* name, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pValue, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_MessageAuthenticationCodeAlgorithm (OSCTXT* pctxt, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pSrcValue, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pDstValue);

EXTERN void asn1Init_CMS_MessageAuthenticationCodeAlgorithm (
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pvalue);

EXTERN void asn1Free_CMS_MessageAuthenticationCodeAlgorithm (OSCTXT *pctxt, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyDerivationAlgorithmIdentifier                          */
/*                                                            */
/**************************************************************/
/*
KeyDerivationAlgorithmIdentifier ::= AlgorithmIdentifier
*/
#define TV_CMS_KeyDerivationAlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_KeyDerivationAlgorithmIdentifier;

typedef ASN1T_EXP_AlgorithmIdentifier ASN1T_CMS_KeyDerivationAlgorithmIdentifier;

class EXTERN ASN1C_CMS_KeyDerivationAlgorithmIdentifier :
   public ASN1C_EXP_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMS_KeyDerivationAlgorithmIdentifier
       (ASN1T_CMS_KeyDerivationAlgorithmIdentifier& data);
   ASN1C_CMS_KeyDerivationAlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_KeyDerivationAlgorithmIdentifier& data);
   ASN1C_CMS_KeyDerivationAlgorithmIdentifier (OSRTContext &context
      , ASN1T_CMS_KeyDerivationAlgorithmIdentifier& data);
   ASN1C_CMS_KeyDerivationAlgorithmIdentifier (ASN1C_CMS_KeyDerivationAlgorithmIdentifier& original);
   virtual ~ASN1C_CMS_KeyDerivationAlgorithmIdentifier () {}
   inline ASN1T_CMS_KeyDerivationAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_KeyDerivationAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyDerivationAlgorithmIdentifier");
   int toStream (const char* name = "KeyDerivationAlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier& getCopy (ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMS_KeyDerivationAlgorithmIdentifier& operator= (ASN1C_CMS_KeyDerivationAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_KeyDerivationAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_KeyDerivationAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_KeyDerivationAlgorithmIdentifier 
   (const char* name, const ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_KeyDerivationAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pvalue);

EXTERN ASN1T_CMS_KeyDerivationAlgorithmIdentifier* 
   new_ASN1T_CMS_KeyDerivationAlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_KeyDerivationAlgorithmIdentifier (const char* name, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pValue, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_KeyDerivationAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pDstValue);

EXTERN void asn1Init_CMS_KeyDerivationAlgorithmIdentifier (
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pvalue);

EXTERN void asn1Free_CMS_KeyDerivationAlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateV2                                    */
/*                                                            */
/**************************************************************/
/*
AttributeCertificateV2 ::= AttributeCertificate
*/
#define TV_CMS_AttributeCertificateV2	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_AttributeCertificateV2;

typedef ASN1T_ATTRCERT_AttributeCertificate ASN1T_CMS_AttributeCertificateV2;

class EXTERN ASN1C_CMS_AttributeCertificateV2 :
   public ASN1C_ATTRCERT_AttributeCertificate
{
protected:
public:
   ASN1C_CMS_AttributeCertificateV2 (ASN1T_CMS_AttributeCertificateV2& data);
   ASN1C_CMS_AttributeCertificateV2 (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_AttributeCertificateV2& data);
   ASN1C_CMS_AttributeCertificateV2 (OSRTContext &context
      , ASN1T_CMS_AttributeCertificateV2& data);
   ASN1C_CMS_AttributeCertificateV2 (ASN1C_CMS_AttributeCertificateV2& original);
   virtual ~ASN1C_CMS_AttributeCertificateV2 () {}
   inline ASN1T_CMS_AttributeCertificateV2& getData () { return msgData; }
   inline const ASN1T_CMS_AttributeCertificateV2& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeCertificateV2");
   int toStream (const char* name = "AttributeCertificateV2");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_AttributeCertificateV2* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_AttributeCertificateV2& getCopy (ASN1T_CMS_AttributeCertificateV2* pDstData = 0);
   ASN1T_CMS_AttributeCertificateV2* newCopy ();

   inline ASN1C_CMS_AttributeCertificateV2& operator= (ASN1C_CMS_AttributeCertificateV2& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_AttributeCertificateV2 (OSCTXT* pctxt,
   ASN1T_CMS_AttributeCertificateV2 *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_AttributeCertificateV2 (OSCTXT* pctxt, 
   ASN1T_CMS_AttributeCertificateV2* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_AttributeCertificateV2 
   (const char* name, const ASN1T_CMS_AttributeCertificateV2* pvalue);

EXTERN int asn1PrtToStrm_CMS_AttributeCertificateV2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_AttributeCertificateV2* pvalue);

EXTERN ASN1T_CMS_AttributeCertificateV2* 
   new_ASN1T_CMS_AttributeCertificateV2 (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_AttributeCertificateV2 (const char* name, 
   ASN1T_CMS_AttributeCertificateV2* pValue, 
   ASN1T_CMS_AttributeCertificateV2* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_AttributeCertificateV2 (OSCTXT* pctxt, 
   ASN1T_CMS_AttributeCertificateV2* pSrcValue, 
   ASN1T_CMS_AttributeCertificateV2* pDstValue);

EXTERN void asn1Init_CMS_AttributeCertificateV2 (
   ASN1T_CMS_AttributeCertificateV2* pvalue);

EXTERN void asn1Free_CMS_AttributeCertificateV2 (OSCTXT *pctxt, 
   ASN1T_CMS_AttributeCertificateV2* pvalue);

/**************************************************************/
/*                                                            */
/*  CMSVersion                                                */
/*                                                            */
/**************************************************************/
/*
CMSVersion ::= INTEGER { v0(0), v1(1), v2(2), v3(3), v4(4), v5(5) }
*/
#define TV_CMS_CMSVersion	(TM_UNIV|TM_PRIM|2)

struct EXTERN CMS_CMSVersion {
   enum Root {
      v0 = 0,
      v1 = 1,
      v2 = 2,
      v3 = 3,
      v4 = 4,
      v5 = 5
   } ;
} ;

typedef OSINT32 ASN1T_CMS_CMSVersion;

class EXTERN ASN1C_CMS_CMSVersion :
public ASN1CType
{
protected:
   ASN1T_CMS_CMSVersion& msgData;
public:
   ASN1C_CMS_CMSVersion (ASN1T_CMS_CMSVersion& data);
   ASN1C_CMS_CMSVersion (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_CMSVersion& data);
   ASN1C_CMS_CMSVersion (OSRTContext &context, ASN1T_CMS_CMSVersion& data);
   virtual ~ASN1C_CMS_CMSVersion () {}
   inline ASN1T_CMS_CMSVersion& getData () { return msgData; }
   inline const ASN1T_CMS_CMSVersion& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CMSVersion");
   int toStream (const char* name = "CMSVersion");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_CMSVersion* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_CMS_CMSVersion (OSCTXT* pctxt,
   ASN1T_CMS_CMSVersion *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_CMSVersion (OSCTXT* pctxt, ASN1T_CMS_CMSVersion* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_CMSVersion 
   (const char* name, const ASN1T_CMS_CMSVersion* pvalue);

EXTERN int asn1PrtToStrm_CMS_CMSVersion (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_CMSVersion* pvalue);

EXTERN ASN1T_CMS_CMSVersion* new_ASN1T_CMS_CMSVersion (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_CMSVersion (const char* name, 
   ASN1T_CMS_CMSVersion* pValue, ASN1T_CMS_CMSVersion* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  UserKeyingMaterial                                        */
/*                                                            */
/**************************************************************/
/*
UserKeyingMaterial ::= OCTET STRING
*/
#define TV_CMS_UserKeyingMaterial	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_CMS_UserKeyingMaterial;

class EXTERN ASN1C_CMS_UserKeyingMaterial :
public ASN1CType
{
protected:
   ASN1T_CMS_UserKeyingMaterial& msgData;
public:
   ASN1C_CMS_UserKeyingMaterial (ASN1T_CMS_UserKeyingMaterial& data);
   ASN1C_CMS_UserKeyingMaterial (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_UserKeyingMaterial& data);
   ASN1C_CMS_UserKeyingMaterial (OSRTContext &context
      , ASN1T_CMS_UserKeyingMaterial& data);
   ASN1C_CMS_UserKeyingMaterial (ASN1C_CMS_UserKeyingMaterial& original);
   virtual ~ASN1C_CMS_UserKeyingMaterial () {}
   inline ASN1T_CMS_UserKeyingMaterial& getData () { return msgData; }
   inline const ASN1T_CMS_UserKeyingMaterial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UserKeyingMaterial");
   int toStream (const char* name = "UserKeyingMaterial");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_UserKeyingMaterial* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_UserKeyingMaterial& getCopy (ASN1T_CMS_UserKeyingMaterial* pDstData = 0);
   ASN1T_CMS_UserKeyingMaterial* newCopy ();

   inline ASN1C_CMS_UserKeyingMaterial& operator= (ASN1C_CMS_UserKeyingMaterial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_UserKeyingMaterial (OSCTXT* pctxt,
   ASN1T_CMS_UserKeyingMaterial *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_UserKeyingMaterial (OSCTXT* pctxt, 
   ASN1T_CMS_UserKeyingMaterial* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_UserKeyingMaterial 
   (const char* name, const ASN1T_CMS_UserKeyingMaterial* pvalue);

EXTERN int asn1PrtToStrm_CMS_UserKeyingMaterial (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_UserKeyingMaterial* pvalue);

EXTERN ASN1T_CMS_UserKeyingMaterial* 
   new_ASN1T_CMS_UserKeyingMaterial (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_UserKeyingMaterial (const char* name, 
   ASN1T_CMS_UserKeyingMaterial* pValue, 
   ASN1T_CMS_UserKeyingMaterial* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_UserKeyingMaterial (OSCTXT* pctxt, 
   ASN1T_CMS_UserKeyingMaterial* pSrcValue, ASN1T_CMS_UserKeyingMaterial*
    pDstValue);

EXTERN void asn1Init_CMS_UserKeyingMaterial (ASN1T_CMS_UserKeyingMaterial* pvalue);

EXTERN void asn1Free_CMS_UserKeyingMaterial (OSCTXT *pctxt, 
   ASN1T_CMS_UserKeyingMaterial* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageDigest                                             */
/*                                                            */
/**************************************************************/
/*
 The CMS Attributes

MessageDigest ::= OCTET STRING
*/
#define TV_CMS_MessageDigest	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_CMS_MessageDigest;

class EXTERN ASN1C_CMS_MessageDigest :
public ASN1CType
{
protected:
   ASN1T_CMS_MessageDigest& msgData;
public:
   ASN1C_CMS_MessageDigest (ASN1T_CMS_MessageDigest& data);
   ASN1C_CMS_MessageDigest (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_MessageDigest& data);
   ASN1C_CMS_MessageDigest (OSRTContext &context, ASN1T_CMS_MessageDigest& data
      );
   ASN1C_CMS_MessageDigest (ASN1C_CMS_MessageDigest& original);
   virtual ~ASN1C_CMS_MessageDigest () {}
   inline ASN1T_CMS_MessageDigest& getData () { return msgData; }
   inline const ASN1T_CMS_MessageDigest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "MessageDigest");
   int toStream (const char* name = "MessageDigest");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_MessageDigest* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_MessageDigest& getCopy (ASN1T_CMS_MessageDigest* pDstData = 0);
   ASN1T_CMS_MessageDigest* newCopy ();

   inline ASN1C_CMS_MessageDigest& operator= (ASN1C_CMS_MessageDigest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_MessageDigest (OSCTXT* pctxt,
   ASN1T_CMS_MessageDigest *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_MessageDigest (OSCTXT* pctxt, 
   ASN1T_CMS_MessageDigest* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_MessageDigest 
   (const char* name, const ASN1T_CMS_MessageDigest* pvalue);

EXTERN int asn1PrtToStrm_CMS_MessageDigest (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_MessageDigest* pvalue);

EXTERN ASN1T_CMS_MessageDigest* new_ASN1T_CMS_MessageDigest (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMS_MessageDigest (const char* name, 
   ASN1T_CMS_MessageDigest* pValue, ASN1T_CMS_MessageDigest* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_MessageDigest (OSCTXT* pctxt, 
   ASN1T_CMS_MessageDigest* pSrcValue, ASN1T_CMS_MessageDigest* pDstValue);

EXTERN void asn1Init_CMS_MessageDigest (ASN1T_CMS_MessageDigest* pvalue);

EXTERN void asn1Free_CMS_MessageDigest (OSCTXT *pctxt, 
   ASN1T_CMS_MessageDigest* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerIdentifier                                          */
/*                                                            */
/**************************************************************/
/*
SignerIdentifier ::= CHOICE {
   issuerAndSerialNumber IssuerAndSerialNumber,
   subjectKeyIdentifier [0] SubjectKeyIdentifier
}
*/
/* Choice context tags */

#define TVC_CMS_SignerIdentifier_issuerAndSerialNumber	(TM_UNIV|TM_CONS|16)
#define TVC_CMS_SignerIdentifier_subjectKeyIdentifier	(TM_CTXT|TM_PRIM|0)

/* Choice tag constants */

#define T_CMS_SignerIdentifier_issuerAndSerialNumber 1
#define T_CMS_SignerIdentifier_subjectKeyIdentifier 2

class EXTERN ASN1C_CMS_SignerIdentifier;

struct EXTERN ASN1T_CMS_SignerIdentifier : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_PKCS7_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMS_SubjectKeyIdentifier *subjectKeyIdentifier;
   } u;
   ASN1T_CMS_SignerIdentifier () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_SignerIdentifier (ASN1C_CMS_SignerIdentifier& srcData);
   ~ASN1T_CMS_SignerIdentifier ();
} ;

class EXTERN ASN1C_CMS_SignerIdentifier :
public ASN1CType
{
protected:
   ASN1T_CMS_SignerIdentifier& msgData;
public:
   ASN1C_CMS_SignerIdentifier (ASN1T_CMS_SignerIdentifier& data);
   ASN1C_CMS_SignerIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SignerIdentifier& data);
   ASN1C_CMS_SignerIdentifier (OSRTContext &context
      , ASN1T_CMS_SignerIdentifier& data);
   ASN1C_CMS_SignerIdentifier (ASN1C_CMS_SignerIdentifier& original);
   virtual ~ASN1C_CMS_SignerIdentifier () {}
   inline ASN1T_CMS_SignerIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_SignerIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignerIdentifier");
   int toStream (const char* name = "SignerIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SignerIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SignerIdentifier& getCopy (ASN1T_CMS_SignerIdentifier* pDstData = 0);
   ASN1T_CMS_SignerIdentifier* newCopy ();

   inline ASN1C_CMS_SignerIdentifier& operator= (ASN1C_CMS_SignerIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_SignerIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_SignerIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SignerIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SignerIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_SignerIdentifier 
   (const char* name, const ASN1T_CMS_SignerIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_SignerIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignerIdentifier* pvalue);

EXTERN ASN1T_CMS_SignerIdentifier* 
   new_ASN1T_CMS_SignerIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_SignerIdentifier (const char* name, 
   ASN1T_CMS_SignerIdentifier* pValue, ASN1T_CMS_SignerIdentifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SignerIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SignerIdentifier* pSrcValue, ASN1T_CMS_SignerIdentifier*
    pDstValue);

EXTERN void asn1Init_CMS_SignerIdentifier (ASN1T_CMS_SignerIdentifier* pvalue);

EXTERN void asn1Free_CMS_SignerIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_SignerIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  UnsignedAttributes                                        */
/*                                                            */
/**************************************************************/
/*
UnsignedAttributes ::= SET (SIZE (1..MAX)) OF Attribute
*/
#define TV_CMS_UnsignedAttributes	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_CMS_UnsignedAttributes;

/* List of ASN1T_EXP_Attribute */
typedef struct EXTERN ASN1T_CMS_UnsignedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_UnsignedAttributes();
} ASN1T_CMS_UnsignedAttributes;

class EXTERN ASN1C_CMS_UnsignedAttributes :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_UnsignedAttributes& msgData;
public:
   ASN1C_CMS_UnsignedAttributes (ASN1T_CMS_UnsignedAttributes& data);
   ASN1C_CMS_UnsignedAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_UnsignedAttributes& data);
   ASN1C_CMS_UnsignedAttributes (ASN1CType& ccobj
      , ASN1T_CMS_UnsignedAttributes& data);
   ASN1C_CMS_UnsignedAttributes (OSRTContext &context
      , ASN1T_CMS_UnsignedAttributes& data);
   ASN1C_CMS_UnsignedAttributes (ASN1C_CMS_UnsignedAttributes& original);
   virtual ~ASN1C_CMS_UnsignedAttributes () {}
   inline ASN1T_CMS_UnsignedAttributes& getData () { return msgData; }
   inline const ASN1T_CMS_UnsignedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UnsignedAttributes");
   int toStream (const char* name = "UnsignedAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_UnsignedAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_UnsignedAttributes& getCopy (ASN1T_CMS_UnsignedAttributes* pDstData = 0);
   ASN1T_CMS_UnsignedAttributes* newCopy ();

   ASN1C_CMS_UnsignedAttributes& operator= (ASN1C_CMS_UnsignedAttributes& srcData);
   void Append (ASN1T_EXP_Attribute* elem);
   ASN1T_EXP_Attribute* NewElement ();
   ASN1T_EXP_Attribute* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_UnsignedAttributes (OSCTXT* pctxt,
   ASN1T_CMS_UnsignedAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_UnsignedAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnsignedAttributes* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_UnsignedAttributes 
   (const char* name, const ASN1T_CMS_UnsignedAttributes* pvalue);

EXTERN int asn1PrtToStrm_CMS_UnsignedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_UnsignedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_CMS_UnsignedAttributes (const char* name, 
   ASN1T_CMS_UnsignedAttributes* pValue, 
   ASN1T_CMS_UnsignedAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_UnsignedAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnsignedAttributes* pSrcValue, ASN1T_CMS_UnsignedAttributes*
    pDstValue);

EXTERN void asn1Init_CMS_UnsignedAttributes (ASN1T_CMS_UnsignedAttributes* pvalue);

EXTERN void asn1Free_CMS_UnsignedAttributes (OSCTXT *pctxt, 
   ASN1T_CMS_UnsignedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerInfo                                                */
/*                                                            */
/**************************************************************/
/*
SignerInfo ::= SEQUENCE {
   version CMSVersion,
   sid SignerIdentifier,
   digestAlgorithm DigestAlgorithmIdentifier,
   signedAttrs [0] SignedAttributes OPTIONAL,
   signatureAlgorithm SignatureAlgorithmIdentifier,
   signature SignatureValue,
   unsignedAttrs [1] UnsignedAttributes OPTIONAL
}
*/
#define TV_CMS_SignerInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_SignerInfo;

struct EXTERN ASN1T_CMS_SignerInfo : public ASN1TPDU {
   struct {
      unsigned signedAttrsPresent : 1;
      unsigned unsignedAttrsPresent : 1;
   } m;
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_SignerIdentifier sid;
   ASN1T_CMS_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_DERCMS_SignedAttributes signedAttrs;
   ASN1T_CMS_SignatureAlgorithmIdentifier signatureAlgorithm;
   ASN1T_DERCMS_SignatureValue signature_;
   ASN1T_CMS_UnsignedAttributes unsignedAttrs;
   ASN1T_CMS_SignerInfo ();
   ASN1T_CMS_SignerInfo (ASN1C_CMS_SignerInfo& srcData);
   ~ASN1T_CMS_SignerInfo ();
} ;

class EXTERN ASN1C_CMS_SignerInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_SignerInfo& msgData;
public:
   ASN1C_CMS_SignerInfo (ASN1T_CMS_SignerInfo& data);
   ASN1C_CMS_SignerInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SignerInfo& data);
   ASN1C_CMS_SignerInfo (OSRTContext &context, ASN1T_CMS_SignerInfo& data);
   ASN1C_CMS_SignerInfo (ASN1C_CMS_SignerInfo& original);
   virtual ~ASN1C_CMS_SignerInfo () {}
   inline ASN1T_CMS_SignerInfo& getData () { return msgData; }
   inline const ASN1T_CMS_SignerInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignerInfo");
   int toStream (const char* name = "SignerInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SignerInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SignerInfo& getCopy (ASN1T_CMS_SignerInfo* pDstData = 0);
   ASN1T_CMS_SignerInfo* newCopy ();

   inline ASN1C_CMS_SignerInfo& operator= (ASN1C_CMS_SignerInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_SignerInfo (OSCTXT* pctxt,
   ASN1T_CMS_SignerInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SignerInfo (OSCTXT* pctxt, ASN1T_CMS_SignerInfo* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_SignerInfo 
   (const char* name, const ASN1T_CMS_SignerInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_SignerInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignerInfo* pvalue);

EXTERN ASN1T_CMS_SignerInfo* new_ASN1T_CMS_SignerInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_SignerInfo (const char* name, 
   ASN1T_CMS_SignerInfo* pValue, ASN1T_CMS_SignerInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SignerInfo (OSCTXT* pctxt, ASN1T_CMS_SignerInfo* pSrcValue, 
   ASN1T_CMS_SignerInfo* pDstValue);

EXTERN void asn1Init_CMS_SignerInfo (ASN1T_CMS_SignerInfo* pvalue);

EXTERN void asn1Free_CMS_SignerInfo (OSCTXT *pctxt, ASN1T_CMS_SignerInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  Countersignature                                          */
/*                                                            */
/**************************************************************/
/*
Countersignature ::= SignerInfo
*/
#define TV_CMS_Countersignature	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_Countersignature;

typedef ASN1T_CMS_SignerInfo ASN1T_CMS_Countersignature;

class EXTERN ASN1C_CMS_Countersignature :
   public ASN1C_CMS_SignerInfo
{
protected:
public:
   ASN1C_CMS_Countersignature (ASN1T_CMS_Countersignature& data);
   ASN1C_CMS_Countersignature (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_Countersignature& data);
   ASN1C_CMS_Countersignature (OSRTContext &context
      , ASN1T_CMS_Countersignature& data);
   ASN1C_CMS_Countersignature (ASN1C_CMS_Countersignature& original);
   virtual ~ASN1C_CMS_Countersignature () {}
   inline ASN1T_CMS_Countersignature& getData () { return msgData; }
   inline const ASN1T_CMS_Countersignature& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Countersignature");
   int toStream (const char* name = "Countersignature");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_Countersignature* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_Countersignature& getCopy (ASN1T_CMS_Countersignature* pDstData = 0);
   ASN1T_CMS_Countersignature* newCopy ();

   inline ASN1C_CMS_Countersignature& operator= (ASN1C_CMS_Countersignature& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_Countersignature (OSCTXT* pctxt,
   ASN1T_CMS_Countersignature *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_Countersignature (OSCTXT* pctxt, 
   ASN1T_CMS_Countersignature* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_Countersignature 
   (const char* name, const ASN1T_CMS_Countersignature* pvalue);

EXTERN int asn1PrtToStrm_CMS_Countersignature (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_Countersignature* pvalue);

EXTERN ASN1T_CMS_Countersignature* 
   new_ASN1T_CMS_Countersignature (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_Countersignature (const char* name, 
   ASN1T_CMS_Countersignature* pValue, ASN1T_CMS_Countersignature* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_Countersignature (OSCTXT* pctxt, 
   ASN1T_CMS_Countersignature* pSrcValue, ASN1T_CMS_Countersignature*
    pDstValue);

EXTERN void asn1Init_CMS_Countersignature (ASN1T_CMS_Countersignature* pvalue);

EXTERN void asn1Free_CMS_Countersignature (OSCTXT *pctxt, 
   ASN1T_CMS_Countersignature* pvalue);

/**************************************************************/
/*                                                            */
/*  Signature                                                 */
/*                                                            */
/**************************************************************/
/*
Signature ::= BIT STRING 
*/
#define TV_CMS_Signature	(TM_UNIV|TM_PRIM|3)

typedef ASN1TDynBitStr ASN1T_CMS_Signature;

class EXTERN ASN1C_CMS_Signature :
public ASN1CBitStr
{
protected:
   ASN1T_CMS_Signature& msgData;
public:
   ASN1C_CMS_Signature (ASN1T_CMS_Signature& data);
   ASN1C_CMS_Signature (OSRTMessageBufferIF& msgBuf, ASN1T_CMS_Signature& data);
   ASN1C_CMS_Signature (OSRTContext &context, ASN1T_CMS_Signature& data);
   ASN1C_CMS_Signature (ASN1C_CMS_Signature& original);
   virtual ~ASN1C_CMS_Signature () {}
   inline ASN1T_CMS_Signature& getData () { return msgData; }
   inline const ASN1T_CMS_Signature& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Signature");
   int toStream (const char* name = "Signature");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_Signature* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_Signature& getCopy (ASN1T_CMS_Signature* pDstData = 0);
   ASN1T_CMS_Signature* newCopy ();

   ASN1C_CMS_Signature& operator= (ASN1C_CMS_Signature& srcData);
} ;

EXTERN int asn1E_CMS_Signature (OSCTXT* pctxt,
   ASN1T_CMS_Signature *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_Signature (OSCTXT* pctxt, ASN1T_CMS_Signature* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_Signature 
   (const char* name, const ASN1T_CMS_Signature* pvalue);

EXTERN int asn1PrtToStrm_CMS_Signature (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_Signature* pvalue);

EXTERN ASN1T_CMS_Signature* new_ASN1T_CMS_Signature (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_Signature (const char* name, 
   ASN1T_CMS_Signature* pValue, ASN1T_CMS_Signature* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_Signature (OSCTXT* pctxt, ASN1T_CMS_Signature* pSrcValue, 
   ASN1T_CMS_Signature* pDstValue);

EXTERN void asn1Init_CMS_Signature (ASN1T_CMS_Signature* pvalue);

EXTERN void asn1Free_CMS_Signature (OSCTXT *pctxt, ASN1T_CMS_Signature* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentInfo                                               */
/*                                                            */
/**************************************************************/
/*
 Cryptographic Message Syntax

ContentInfo ::= SEQUENCE {
   contentType ContentType,
   content [0] EXPLICIT ANY
}
*/
#define TV_CMS_ContentInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_ContentInfo;

struct EXTERN ASN1T_CMS_ContentInfo : public ASN1TPDU {
   ASN1T_CMS_ContentType contentType;
   ASN1TOpenType content;
   ASN1T_CMS_ContentInfo ();
   ASN1T_CMS_ContentInfo (ASN1C_CMS_ContentInfo& srcData);
   ~ASN1T_CMS_ContentInfo ();
} ;

class EXTERN ASN1C_CMS_ContentInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_ContentInfo& msgData;
public:
   ASN1C_CMS_ContentInfo (ASN1T_CMS_ContentInfo& data);
   ASN1C_CMS_ContentInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_ContentInfo& data);
   ASN1C_CMS_ContentInfo (OSRTContext &context, ASN1T_CMS_ContentInfo& data);
   ASN1C_CMS_ContentInfo (ASN1C_CMS_ContentInfo& original);
   virtual ~ASN1C_CMS_ContentInfo () {}
   inline ASN1T_CMS_ContentInfo& getData () { return msgData; }
   inline const ASN1T_CMS_ContentInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ContentInfo");
   int toStream (const char* name = "ContentInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_ContentInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_ContentInfo& getCopy (ASN1T_CMS_ContentInfo* pDstData = 0);
   ASN1T_CMS_ContentInfo* newCopy ();

   inline ASN1C_CMS_ContentInfo& operator= (ASN1C_CMS_ContentInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_ContentInfo (OSCTXT* pctxt,
   ASN1T_CMS_ContentInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_ContentInfo (OSCTXT* pctxt, 
   ASN1T_CMS_ContentInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_ContentInfo 
   (const char* name, const ASN1T_CMS_ContentInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_ContentInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ContentInfo* pvalue);

EXTERN ASN1T_CMS_ContentInfo* new_ASN1T_CMS_ContentInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_ContentInfo (const char* name, 
   ASN1T_CMS_ContentInfo* pValue, ASN1T_CMS_ContentInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_ContentInfo (OSCTXT* pctxt, 
   ASN1T_CMS_ContentInfo* pSrcValue, ASN1T_CMS_ContentInfo* pDstValue);

EXTERN void asn1Init_CMS_ContentInfo (ASN1T_CMS_ContentInfo* pvalue);

EXTERN void asn1Free_CMS_ContentInfo (OSCTXT *pctxt, ASN1T_CMS_ContentInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  EncapsulatedContentInfo                                   */
/*                                                            */
/**************************************************************/
/*
EncapsulatedContentInfo ::= SEQUENCE {
   eContentType ContentType,
   eContent [0] EXPLICIT OCTET STRING OPTIONAL
}
*/
#define TV_CMS_EncapsulatedContentInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_EncapsulatedContentInfo;

struct EXTERN ASN1T_CMS_EncapsulatedContentInfo : public ASN1TPDU {
   struct {
      unsigned eContentPresent : 1;
   } m;
   ASN1T_CMS_ContentType eContentType;
   ASN1TDynOctStr eContent;
   ASN1T_CMS_EncapsulatedContentInfo ();
   ASN1T_CMS_EncapsulatedContentInfo (ASN1C_CMS_EncapsulatedContentInfo& srcData);
   ~ASN1T_CMS_EncapsulatedContentInfo ();
} ;

class EXTERN ASN1C_CMS_EncapsulatedContentInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_EncapsulatedContentInfo& msgData;
public:
   ASN1C_CMS_EncapsulatedContentInfo (ASN1T_CMS_EncapsulatedContentInfo& data);
   ASN1C_CMS_EncapsulatedContentInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_EncapsulatedContentInfo& data);
   ASN1C_CMS_EncapsulatedContentInfo (OSRTContext &context
      , ASN1T_CMS_EncapsulatedContentInfo& data);
   ASN1C_CMS_EncapsulatedContentInfo (ASN1C_CMS_EncapsulatedContentInfo& original);
   virtual ~ASN1C_CMS_EncapsulatedContentInfo () {}
   inline ASN1T_CMS_EncapsulatedContentInfo& getData () { return msgData; }
   inline const ASN1T_CMS_EncapsulatedContentInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncapsulatedContentInfo");
   int toStream (const char* name = "EncapsulatedContentInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_EncapsulatedContentInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_EncapsulatedContentInfo& getCopy (ASN1T_CMS_EncapsulatedContentInfo* pDstData = 0);
   ASN1T_CMS_EncapsulatedContentInfo* newCopy ();

   inline ASN1C_CMS_EncapsulatedContentInfo& operator= (ASN1C_CMS_EncapsulatedContentInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_EncapsulatedContentInfo (OSCTXT* pctxt,
   ASN1T_CMS_EncapsulatedContentInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_EncapsulatedContentInfo (OSCTXT* pctxt, 
   ASN1T_CMS_EncapsulatedContentInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_EncapsulatedContentInfo 
   (const char* name, const ASN1T_CMS_EncapsulatedContentInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_EncapsulatedContentInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_EncapsulatedContentInfo* pvalue);

EXTERN ASN1T_CMS_EncapsulatedContentInfo* 
   new_ASN1T_CMS_EncapsulatedContentInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_EncapsulatedContentInfo (const char* name, 
   ASN1T_CMS_EncapsulatedContentInfo* pValue, 
   ASN1T_CMS_EncapsulatedContentInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_EncapsulatedContentInfo (OSCTXT* pctxt, 
   ASN1T_CMS_EncapsulatedContentInfo* pSrcValue, 
   ASN1T_CMS_EncapsulatedContentInfo* pDstValue);

EXTERN void asn1Init_CMS_EncapsulatedContentInfo (
   ASN1T_CMS_EncapsulatedContentInfo* pvalue);

EXTERN void asn1Free_CMS_EncapsulatedContentInfo (OSCTXT *pctxt, 
   ASN1T_CMS_EncapsulatedContentInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  UnauthAttributes                                          */
/*                                                            */
/**************************************************************/
/*
UnauthAttributes ::= SET (SIZE (1..MAX)) OF Attribute
*/
#define TV_CMS_UnauthAttributes	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_CMS_UnauthAttributes;

/* List of ASN1T_EXP_Attribute */
typedef struct EXTERN ASN1T_CMS_UnauthAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_UnauthAttributes();
} ASN1T_CMS_UnauthAttributes;

class EXTERN ASN1C_CMS_UnauthAttributes :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_UnauthAttributes& msgData;
public:
   ASN1C_CMS_UnauthAttributes (ASN1T_CMS_UnauthAttributes& data);
   ASN1C_CMS_UnauthAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_UnauthAttributes& data);
   ASN1C_CMS_UnauthAttributes (ASN1CType& ccobj
      , ASN1T_CMS_UnauthAttributes& data);
   ASN1C_CMS_UnauthAttributes (OSRTContext &context
      , ASN1T_CMS_UnauthAttributes& data);
   ASN1C_CMS_UnauthAttributes (ASN1C_CMS_UnauthAttributes& original);
   virtual ~ASN1C_CMS_UnauthAttributes () {}
   inline ASN1T_CMS_UnauthAttributes& getData () { return msgData; }
   inline const ASN1T_CMS_UnauthAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UnauthAttributes");
   int toStream (const char* name = "UnauthAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_UnauthAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_UnauthAttributes& getCopy (ASN1T_CMS_UnauthAttributes* pDstData = 0);
   ASN1T_CMS_UnauthAttributes* newCopy ();

   ASN1C_CMS_UnauthAttributes& operator= (ASN1C_CMS_UnauthAttributes& srcData);
   void Append (ASN1T_EXP_Attribute* elem);
   ASN1T_EXP_Attribute* NewElement ();
   ASN1T_EXP_Attribute* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_UnauthAttributes (OSCTXT* pctxt,
   ASN1T_CMS_UnauthAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_UnauthAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnauthAttributes* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_UnauthAttributes 
   (const char* name, const ASN1T_CMS_UnauthAttributes* pvalue);

EXTERN int asn1PrtToStrm_CMS_UnauthAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_UnauthAttributes* pvalue);

EXTERN OSBOOL asn1Compare_CMS_UnauthAttributes (const char* name, 
   ASN1T_CMS_UnauthAttributes* pValue, ASN1T_CMS_UnauthAttributes* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_UnauthAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnauthAttributes* pSrcValue, ASN1T_CMS_UnauthAttributes*
    pDstValue);

EXTERN void asn1Init_CMS_UnauthAttributes (ASN1T_CMS_UnauthAttributes* pvalue);

EXTERN void asn1Free_CMS_UnauthAttributes (OSCTXT *pctxt, 
   ASN1T_CMS_UnauthAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificateInfo                                   */
/*                                                            */
/**************************************************************/
/*
ExtendedCertificateInfo ::= SEQUENCE {
   version CMSVersion,
   certificate Certificate,
   attributes UnauthAttributes
}
*/
#define TV_CMS_ExtendedCertificateInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_ExtendedCertificateInfo;

struct EXTERN ASN1T_CMS_ExtendedCertificateInfo : public ASN1TPDU {
   ASN1T_CMS_CMSVersion version;
   ASN1T_EXP_Certificate certificate;
   ASN1T_CMS_UnauthAttributes attributes;
   ASN1T_CMS_ExtendedCertificateInfo ();
   ASN1T_CMS_ExtendedCertificateInfo (ASN1C_CMS_ExtendedCertificateInfo& srcData);
   ~ASN1T_CMS_ExtendedCertificateInfo ();
} ;

class EXTERN ASN1C_CMS_ExtendedCertificateInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_ExtendedCertificateInfo& msgData;
public:
   ASN1C_CMS_ExtendedCertificateInfo (ASN1T_CMS_ExtendedCertificateInfo& data);
   ASN1C_CMS_ExtendedCertificateInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_ExtendedCertificateInfo& data);
   ASN1C_CMS_ExtendedCertificateInfo (OSRTContext &context
      , ASN1T_CMS_ExtendedCertificateInfo& data);
   ASN1C_CMS_ExtendedCertificateInfo (ASN1C_CMS_ExtendedCertificateInfo& original);
   virtual ~ASN1C_CMS_ExtendedCertificateInfo () {}
   inline ASN1T_CMS_ExtendedCertificateInfo& getData () { return msgData; }
   inline const ASN1T_CMS_ExtendedCertificateInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtendedCertificateInfo");
   int toStream (const char* name = "ExtendedCertificateInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_ExtendedCertificateInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_ExtendedCertificateInfo& getCopy (ASN1T_CMS_ExtendedCertificateInfo* pDstData = 0);
   ASN1T_CMS_ExtendedCertificateInfo* newCopy ();

   inline ASN1C_CMS_ExtendedCertificateInfo& operator= (ASN1C_CMS_ExtendedCertificateInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_ExtendedCertificateInfo (OSCTXT* pctxt,
   ASN1T_CMS_ExtendedCertificateInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_ExtendedCertificateInfo (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificateInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_ExtendedCertificateInfo 
   (const char* name, const ASN1T_CMS_ExtendedCertificateInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_ExtendedCertificateInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ExtendedCertificateInfo* pvalue);

EXTERN ASN1T_CMS_ExtendedCertificateInfo* 
   new_ASN1T_CMS_ExtendedCertificateInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_ExtendedCertificateInfo (const char* name, 
   ASN1T_CMS_ExtendedCertificateInfo* pValue, 
   ASN1T_CMS_ExtendedCertificateInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_ExtendedCertificateInfo (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificateInfo* pSrcValue, 
   ASN1T_CMS_ExtendedCertificateInfo* pDstValue);

EXTERN void asn1Init_CMS_ExtendedCertificateInfo (
   ASN1T_CMS_ExtendedCertificateInfo* pvalue);

EXTERN void asn1Free_CMS_ExtendedCertificateInfo (OSCTXT *pctxt, 
   ASN1T_CMS_ExtendedCertificateInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificate                                       */
/*                                                            */
/**************************************************************/
/*
ExtendedCertificate ::= SEQUENCE {
   extendedCertificateInfo ExtendedCertificateInfo,
   signatureAlgorithm SignatureAlgorithmIdentifier,
   signature Signature
}
*/
#define TV_CMS_ExtendedCertificate	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_ExtendedCertificate;

struct EXTERN ASN1T_CMS_ExtendedCertificate : public ASN1TPDU {
   ASN1T_CMS_ExtendedCertificateInfo extendedCertificateInfo;
   ASN1T_CMS_SignatureAlgorithmIdentifier signatureAlgorithm;
   ASN1T_CMS_Signature signature_;
   ASN1T_CMS_ExtendedCertificate ();
   ASN1T_CMS_ExtendedCertificate (ASN1C_CMS_ExtendedCertificate& srcData);
   ~ASN1T_CMS_ExtendedCertificate ();
} ;

class EXTERN ASN1C_CMS_ExtendedCertificate :
public ASN1CType
{
protected:
   ASN1T_CMS_ExtendedCertificate& msgData;
public:
   ASN1C_CMS_ExtendedCertificate (ASN1T_CMS_ExtendedCertificate& data);
   ASN1C_CMS_ExtendedCertificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_ExtendedCertificate& data);
   ASN1C_CMS_ExtendedCertificate (OSRTContext &context
      , ASN1T_CMS_ExtendedCertificate& data);
   ASN1C_CMS_ExtendedCertificate (ASN1C_CMS_ExtendedCertificate& original);
   virtual ~ASN1C_CMS_ExtendedCertificate () {}
   inline ASN1T_CMS_ExtendedCertificate& getData () { return msgData; }
   inline const ASN1T_CMS_ExtendedCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtendedCertificate");
   int toStream (const char* name = "ExtendedCertificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_ExtendedCertificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_ExtendedCertificate& getCopy (ASN1T_CMS_ExtendedCertificate* pDstData = 0);
   ASN1T_CMS_ExtendedCertificate* newCopy ();

   inline ASN1C_CMS_ExtendedCertificate& operator= (ASN1C_CMS_ExtendedCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_ExtendedCertificate (OSCTXT* pctxt,
   ASN1T_CMS_ExtendedCertificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_ExtendedCertificate (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificate* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_ExtendedCertificate 
   (const char* name, const ASN1T_CMS_ExtendedCertificate* pvalue);

EXTERN int asn1PrtToStrm_CMS_ExtendedCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ExtendedCertificate* pvalue);

EXTERN ASN1T_CMS_ExtendedCertificate* 
   new_ASN1T_CMS_ExtendedCertificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_ExtendedCertificate (const char* name, 
   ASN1T_CMS_ExtendedCertificate* pValue, 
   ASN1T_CMS_ExtendedCertificate* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_ExtendedCertificate (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificate* pSrcValue, ASN1T_CMS_ExtendedCertificate*
    pDstValue);

EXTERN void asn1Init_CMS_ExtendedCertificate (ASN1T_CMS_ExtendedCertificate* pvalue);

EXTERN void asn1Free_CMS_ExtendedCertificate (OSCTXT *pctxt, 
   ASN1T_CMS_ExtendedCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherCertificateFormat                                    */
/*                                                            */
/**************************************************************/
/*
OtherCertificateFormat ::= SEQUENCE {
   otherCertFormat OBJECT IDENTIFIER,
   otherCert ANY
}
*/
#define TV_CMS_OtherCertificateFormat	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_OtherCertificateFormat;

struct EXTERN ASN1T_CMS_OtherCertificateFormat : public ASN1TPDU {
   ASN1TObjId otherCertFormat;
   ASN1TOpenType otherCert;
   ASN1T_CMS_OtherCertificateFormat ();
   ASN1T_CMS_OtherCertificateFormat (ASN1C_CMS_OtherCertificateFormat& srcData);
   ~ASN1T_CMS_OtherCertificateFormat ();
} ;

class EXTERN ASN1C_CMS_OtherCertificateFormat :
public ASN1CType
{
protected:
   ASN1T_CMS_OtherCertificateFormat& msgData;
public:
   ASN1C_CMS_OtherCertificateFormat (ASN1T_CMS_OtherCertificateFormat& data);
   ASN1C_CMS_OtherCertificateFormat (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_OtherCertificateFormat& data);
   ASN1C_CMS_OtherCertificateFormat (OSRTContext &context
      , ASN1T_CMS_OtherCertificateFormat& data);
   ASN1C_CMS_OtherCertificateFormat (ASN1C_CMS_OtherCertificateFormat& original);
   virtual ~ASN1C_CMS_OtherCertificateFormat () {}
   inline ASN1T_CMS_OtherCertificateFormat& getData () { return msgData; }
   inline const ASN1T_CMS_OtherCertificateFormat& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherCertificateFormat");
   int toStream (const char* name = "OtherCertificateFormat");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_OtherCertificateFormat* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_OtherCertificateFormat& getCopy (ASN1T_CMS_OtherCertificateFormat* pDstData = 0);
   ASN1T_CMS_OtherCertificateFormat* newCopy ();

   inline ASN1C_CMS_OtherCertificateFormat& operator= (ASN1C_CMS_OtherCertificateFormat& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_OtherCertificateFormat (OSCTXT* pctxt,
   ASN1T_CMS_OtherCertificateFormat *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_OtherCertificateFormat (OSCTXT* pctxt, 
   ASN1T_CMS_OtherCertificateFormat* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_OtherCertificateFormat 
   (const char* name, const ASN1T_CMS_OtherCertificateFormat* pvalue);

EXTERN int asn1PrtToStrm_CMS_OtherCertificateFormat (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OtherCertificateFormat* pvalue);

EXTERN ASN1T_CMS_OtherCertificateFormat* 
   new_ASN1T_CMS_OtherCertificateFormat (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_OtherCertificateFormat (const char* name, 
   ASN1T_CMS_OtherCertificateFormat* pValue, 
   ASN1T_CMS_OtherCertificateFormat* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_OtherCertificateFormat (OSCTXT* pctxt, 
   ASN1T_CMS_OtherCertificateFormat* pSrcValue, 
   ASN1T_CMS_OtherCertificateFormat* pDstValue);

EXTERN void asn1Init_CMS_OtherCertificateFormat (
   ASN1T_CMS_OtherCertificateFormat* pvalue);

EXTERN void asn1Free_CMS_OtherCertificateFormat (OSCTXT *pctxt, 
   ASN1T_CMS_OtherCertificateFormat* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateChoices                                        */
/*                                                            */
/**************************************************************/
/*
CertificateChoices ::= CHOICE {
   certificate Certificate,
   extendedCertificate [0] ExtendedCertificate,
   v1AttrCert [1] AttributeCertificateV1,
   v2AttrCert [2] AttributeCertificateV2,
   other [3] OtherCertificateFormat
}
*/
/* Choice context tags */

#define TVC_CMS_CertificateChoices_certificate	(TM_UNIV|TM_CONS|16)
#define TVC_CMS_CertificateChoices_extendedCertificate	(TM_CTXT|TM_CONS|0)
#define TVC_CMS_CertificateChoices_v1AttrCert	(TM_CTXT|TM_CONS|1)
#define TVC_CMS_CertificateChoices_v2AttrCert	(TM_CTXT|TM_CONS|2)
#define TVC_CMS_CertificateChoices_other	(TM_CTXT|TM_CONS|3)

/* Choice tag constants */

#define T_CMS_CertificateChoices_certificate 1
#define T_CMS_CertificateChoices_extendedCertificate 2
#define T_CMS_CertificateChoices_v1AttrCert 3
#define T_CMS_CertificateChoices_v2AttrCert 4
#define T_CMS_CertificateChoices_other  5

class EXTERN ASN1C_CMS_CertificateChoices;

struct EXTERN ASN1T_CMS_CertificateChoices : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_EXP_Certificate *certificate;
      /* t = 2 */
      ASN1T_CMS_ExtendedCertificate *extendedCertificate;
      /* t = 3 */
      ASN1T_ATTRCERT_AttributeCertificateV1 *v1AttrCert;
      /* t = 4 */
      ASN1T_CMS_AttributeCertificateV2 *v2AttrCert;
      /* t = 5 */
      ASN1T_CMS_OtherCertificateFormat *other;
   } u;
   ASN1T_CMS_CertificateChoices () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_CertificateChoices (ASN1C_CMS_CertificateChoices& srcData);
   ~ASN1T_CMS_CertificateChoices ();
} ;

class EXTERN ASN1C_CMS_CertificateChoices :
public ASN1CType
{
protected:
   ASN1T_CMS_CertificateChoices& msgData;
public:
   ASN1C_CMS_CertificateChoices (ASN1T_CMS_CertificateChoices& data);
   ASN1C_CMS_CertificateChoices (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_CertificateChoices& data);
   ASN1C_CMS_CertificateChoices (OSRTContext &context
      , ASN1T_CMS_CertificateChoices& data);
   ASN1C_CMS_CertificateChoices (ASN1C_CMS_CertificateChoices& original);
   virtual ~ASN1C_CMS_CertificateChoices () {}
   inline ASN1T_CMS_CertificateChoices& getData () { return msgData; }
   inline const ASN1T_CMS_CertificateChoices& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertificateChoices");
   int toStream (const char* name = "CertificateChoices");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_CertificateChoices* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_CertificateChoices& getCopy (ASN1T_CMS_CertificateChoices* pDstData = 0);
   ASN1T_CMS_CertificateChoices* newCopy ();

   inline ASN1C_CMS_CertificateChoices& operator= (ASN1C_CMS_CertificateChoices& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_CertificateChoices (OSCTXT* pctxt,
   ASN1T_CMS_CertificateChoices *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_CertificateChoices (OSCTXT* pctxt, 
   ASN1T_CMS_CertificateChoices* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_CertificateChoices 
   (const char* name, const ASN1T_CMS_CertificateChoices* pvalue);

EXTERN int asn1PrtToStrm_CMS_CertificateChoices (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_CertificateChoices* pvalue);

EXTERN ASN1T_CMS_CertificateChoices* 
   new_ASN1T_CMS_CertificateChoices (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_CertificateChoices (const char* name, 
   ASN1T_CMS_CertificateChoices* pValue, 
   ASN1T_CMS_CertificateChoices* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_CertificateChoices (OSCTXT* pctxt, 
   ASN1T_CMS_CertificateChoices* pSrcValue, ASN1T_CMS_CertificateChoices*
    pDstValue);

EXTERN void asn1Init_CMS_CertificateChoices (ASN1T_CMS_CertificateChoices* pvalue);

EXTERN void asn1Free_CMS_CertificateChoices (OSCTXT *pctxt, 
   ASN1T_CMS_CertificateChoices* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateSet                                            */
/*                                                            */
/**************************************************************/
/*
CertificateSet ::= SET OF CertificateChoices
*/
#define TV_CMS_CertificateSet	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_CMS_CertificateSet;

/* List of ASN1T_CMS_CertificateChoices */
typedef struct EXTERN ASN1T_CMS_CertificateSet : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_CertificateSet();
} ASN1T_CMS_CertificateSet;

class EXTERN ASN1C_CMS_CertificateSet :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_CertificateSet& msgData;
public:
   ASN1C_CMS_CertificateSet (ASN1T_CMS_CertificateSet& data);
   ASN1C_CMS_CertificateSet (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_CertificateSet& data);
   ASN1C_CMS_CertificateSet (ASN1CType& ccobj, ASN1T_CMS_CertificateSet& data);
   ASN1C_CMS_CertificateSet (OSRTContext &context
      , ASN1T_CMS_CertificateSet& data);
   ASN1C_CMS_CertificateSet (ASN1C_CMS_CertificateSet& original);
   virtual ~ASN1C_CMS_CertificateSet () {}
   inline ASN1T_CMS_CertificateSet& getData () { return msgData; }
   inline const ASN1T_CMS_CertificateSet& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertificateSet");
   int toStream (const char* name = "CertificateSet");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_CertificateSet* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_CertificateSet& getCopy (ASN1T_CMS_CertificateSet* pDstData = 0);
   ASN1T_CMS_CertificateSet* newCopy ();

   ASN1C_CMS_CertificateSet& operator= (ASN1C_CMS_CertificateSet& srcData);
   void Append (ASN1T_CMS_CertificateChoices* elem);
   ASN1T_CMS_CertificateChoices* NewElement ();
   ASN1T_CMS_CertificateChoices* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_CertificateSet (OSCTXT* pctxt,
   ASN1T_CMS_CertificateSet *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_CertificateSet (OSCTXT* pctxt, 
   ASN1T_CMS_CertificateSet* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_CertificateSet 
   (const char* name, const ASN1T_CMS_CertificateSet* pvalue);

EXTERN int asn1PrtToStrm_CMS_CertificateSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_CertificateSet* pvalue);

EXTERN OSBOOL asn1Compare_CMS_CertificateSet (const char* name, 
   ASN1T_CMS_CertificateSet* pValue, ASN1T_CMS_CertificateSet* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_CertificateSet (OSCTXT* pctxt, 
   ASN1T_CMS_CertificateSet* pSrcValue, ASN1T_CMS_CertificateSet* pDstValue);

EXTERN void asn1Init_CMS_CertificateSet (ASN1T_CMS_CertificateSet* pvalue);

EXTERN void asn1Free_CMS_CertificateSet (OSCTXT *pctxt, 
   ASN1T_CMS_CertificateSet* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevocationInfoFormat                                 */
/*                                                            */
/**************************************************************/
/*
OtherRevocationInfoFormat ::= SEQUENCE {
   otherRevInfoFormat OBJECT IDENTIFIER,
   otherRevInfo ANY
}
*/
#define TV_CMS_OtherRevocationInfoFormat	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_OtherRevocationInfoFormat;

struct EXTERN ASN1T_CMS_OtherRevocationInfoFormat : public ASN1TPDU {
   ASN1TObjId otherRevInfoFormat;
   ASN1TOpenType otherRevInfo;
   ASN1T_CMS_OtherRevocationInfoFormat ();
   ASN1T_CMS_OtherRevocationInfoFormat (ASN1C_CMS_OtherRevocationInfoFormat& srcData);
   ~ASN1T_CMS_OtherRevocationInfoFormat ();
} ;

class EXTERN ASN1C_CMS_OtherRevocationInfoFormat :
public ASN1CType
{
protected:
   ASN1T_CMS_OtherRevocationInfoFormat& msgData;
public:
   ASN1C_CMS_OtherRevocationInfoFormat
       (ASN1T_CMS_OtherRevocationInfoFormat& data);
   ASN1C_CMS_OtherRevocationInfoFormat (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_OtherRevocationInfoFormat& data);
   ASN1C_CMS_OtherRevocationInfoFormat (OSRTContext &context
      , ASN1T_CMS_OtherRevocationInfoFormat& data);
   ASN1C_CMS_OtherRevocationInfoFormat (ASN1C_CMS_OtherRevocationInfoFormat& original);
   virtual ~ASN1C_CMS_OtherRevocationInfoFormat () {}
   inline ASN1T_CMS_OtherRevocationInfoFormat& getData () { return msgData; }
   inline const ASN1T_CMS_OtherRevocationInfoFormat& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherRevocationInfoFormat");
   int toStream (const char* name = "OtherRevocationInfoFormat");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_OtherRevocationInfoFormat* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_OtherRevocationInfoFormat& getCopy (ASN1T_CMS_OtherRevocationInfoFormat* pDstData = 0);
   ASN1T_CMS_OtherRevocationInfoFormat* newCopy ();

   inline ASN1C_CMS_OtherRevocationInfoFormat& operator= (ASN1C_CMS_OtherRevocationInfoFormat& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_OtherRevocationInfoFormat (OSCTXT* pctxt,
   ASN1T_CMS_OtherRevocationInfoFormat *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_OtherRevocationInfoFormat (OSCTXT* pctxt, 
   ASN1T_CMS_OtherRevocationInfoFormat* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_OtherRevocationInfoFormat 
   (const char* name, const ASN1T_CMS_OtherRevocationInfoFormat* pvalue);

EXTERN int asn1PrtToStrm_CMS_OtherRevocationInfoFormat (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OtherRevocationInfoFormat* pvalue);

EXTERN ASN1T_CMS_OtherRevocationInfoFormat* 
   new_ASN1T_CMS_OtherRevocationInfoFormat (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_OtherRevocationInfoFormat (const char* name, 
   ASN1T_CMS_OtherRevocationInfoFormat* pValue, 
   ASN1T_CMS_OtherRevocationInfoFormat* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_OtherRevocationInfoFormat (OSCTXT* pctxt, 
   ASN1T_CMS_OtherRevocationInfoFormat* pSrcValue, 
   ASN1T_CMS_OtherRevocationInfoFormat* pDstValue);

EXTERN void asn1Init_CMS_OtherRevocationInfoFormat (
   ASN1T_CMS_OtherRevocationInfoFormat* pvalue);

EXTERN void asn1Free_CMS_OtherRevocationInfoFormat (OSCTXT *pctxt, 
   ASN1T_CMS_OtherRevocationInfoFormat* pvalue);

/**************************************************************/
/*                                                            */
/*  RevocationInfoChoice                                      */
/*                                                            */
/**************************************************************/
/*
RevocationInfoChoice ::= CHOICE {
   crl CertificateList,
   other [1] OtherRevocationInfoFormat
}
*/
/* Choice context tags */

#define TVC_CMS_RevocationInfoChoice_crl	(TM_UNIV|TM_CONS|16)
#define TVC_CMS_RevocationInfoChoice_other	(TM_CTXT|TM_CONS|1)

/* Choice tag constants */

#define T_CMS_RevocationInfoChoice_crl  1
#define T_CMS_RevocationInfoChoice_other 2

class EXTERN ASN1C_CMS_RevocationInfoChoice;

struct EXTERN ASN1T_CMS_RevocationInfoChoice : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_EXP_CertificateList *crl;
      /* t = 2 */
      ASN1T_CMS_OtherRevocationInfoFormat *other;
   } u;
   ASN1T_CMS_RevocationInfoChoice () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_RevocationInfoChoice (ASN1C_CMS_RevocationInfoChoice& srcData);
   ~ASN1T_CMS_RevocationInfoChoice ();
} ;

class EXTERN ASN1C_CMS_RevocationInfoChoice :
public ASN1CType
{
protected:
   ASN1T_CMS_RevocationInfoChoice& msgData;
public:
   ASN1C_CMS_RevocationInfoChoice (ASN1T_CMS_RevocationInfoChoice& data);
   ASN1C_CMS_RevocationInfoChoice (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_RevocationInfoChoice& data);
   ASN1C_CMS_RevocationInfoChoice (OSRTContext &context
      , ASN1T_CMS_RevocationInfoChoice& data);
   ASN1C_CMS_RevocationInfoChoice (ASN1C_CMS_RevocationInfoChoice& original);
   virtual ~ASN1C_CMS_RevocationInfoChoice () {}
   inline ASN1T_CMS_RevocationInfoChoice& getData () { return msgData; }
   inline const ASN1T_CMS_RevocationInfoChoice& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevocationInfoChoice");
   int toStream (const char* name = "RevocationInfoChoice");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_RevocationInfoChoice* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_RevocationInfoChoice& getCopy (ASN1T_CMS_RevocationInfoChoice* pDstData = 0);
   ASN1T_CMS_RevocationInfoChoice* newCopy ();

   inline ASN1C_CMS_RevocationInfoChoice& operator= (ASN1C_CMS_RevocationInfoChoice& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_RevocationInfoChoice (OSCTXT* pctxt,
   ASN1T_CMS_RevocationInfoChoice *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_RevocationInfoChoice (OSCTXT* pctxt, 
   ASN1T_CMS_RevocationInfoChoice* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_RevocationInfoChoice 
   (const char* name, const ASN1T_CMS_RevocationInfoChoice* pvalue);

EXTERN int asn1PrtToStrm_CMS_RevocationInfoChoice (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RevocationInfoChoice* pvalue);

EXTERN ASN1T_CMS_RevocationInfoChoice* 
   new_ASN1T_CMS_RevocationInfoChoice (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_RevocationInfoChoice (const char* name, 
   ASN1T_CMS_RevocationInfoChoice* pValue, 
   ASN1T_CMS_RevocationInfoChoice* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_RevocationInfoChoice (OSCTXT* pctxt, 
   ASN1T_CMS_RevocationInfoChoice* pSrcValue, ASN1T_CMS_RevocationInfoChoice*
    pDstValue);

EXTERN void asn1Init_CMS_RevocationInfoChoice (ASN1T_CMS_RevocationInfoChoice* pvalue);

EXTERN void asn1Free_CMS_RevocationInfoChoice (OSCTXT *pctxt, 
   ASN1T_CMS_RevocationInfoChoice* pvalue);

/**************************************************************/
/*                                                            */
/*  RevocationInfoChoices                                     */
/*                                                            */
/**************************************************************/
/*
RevocationInfoChoices ::= SET OF RevocationInfoChoice
*/
#define TV_CMS_RevocationInfoChoices	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_CMS_RevocationInfoChoices;

/* List of ASN1T_CMS_RevocationInfoChoice */
typedef struct EXTERN ASN1T_CMS_RevocationInfoChoices : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_RevocationInfoChoices();
} ASN1T_CMS_RevocationInfoChoices;

class EXTERN ASN1C_CMS_RevocationInfoChoices :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_RevocationInfoChoices& msgData;
public:
   ASN1C_CMS_RevocationInfoChoices (ASN1T_CMS_RevocationInfoChoices& data);
   ASN1C_CMS_RevocationInfoChoices (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_RevocationInfoChoices& data);
   ASN1C_CMS_RevocationInfoChoices (ASN1CType& ccobj
      , ASN1T_CMS_RevocationInfoChoices& data);
   ASN1C_CMS_RevocationInfoChoices (OSRTContext &context
      , ASN1T_CMS_RevocationInfoChoices& data);
   ASN1C_CMS_RevocationInfoChoices (ASN1C_CMS_RevocationInfoChoices& original);
   virtual ~ASN1C_CMS_RevocationInfoChoices () {}
   inline ASN1T_CMS_RevocationInfoChoices& getData () { return msgData; }
   inline const ASN1T_CMS_RevocationInfoChoices& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevocationInfoChoices");
   int toStream (const char* name = "RevocationInfoChoices");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_RevocationInfoChoices* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_RevocationInfoChoices& getCopy (ASN1T_CMS_RevocationInfoChoices* pDstData = 0);
   ASN1T_CMS_RevocationInfoChoices* newCopy ();

   ASN1C_CMS_RevocationInfoChoices& operator= (ASN1C_CMS_RevocationInfoChoices& srcData);
   void Append (ASN1T_CMS_RevocationInfoChoice* elem);
   ASN1T_CMS_RevocationInfoChoice* NewElement ();
   ASN1T_CMS_RevocationInfoChoice* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_RevocationInfoChoices (OSCTXT* pctxt,
   ASN1T_CMS_RevocationInfoChoices *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_RevocationInfoChoices (OSCTXT* pctxt, 
   ASN1T_CMS_RevocationInfoChoices* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_RevocationInfoChoices 
   (const char* name, const ASN1T_CMS_RevocationInfoChoices* pvalue);

EXTERN int asn1PrtToStrm_CMS_RevocationInfoChoices (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RevocationInfoChoices* pvalue);

EXTERN OSBOOL asn1Compare_CMS_RevocationInfoChoices (const char* name, 
   ASN1T_CMS_RevocationInfoChoices* pValue, 
   ASN1T_CMS_RevocationInfoChoices* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_RevocationInfoChoices (OSCTXT* pctxt, 
   ASN1T_CMS_RevocationInfoChoices* pSrcValue, ASN1T_CMS_RevocationInfoChoices*
    pDstValue);

EXTERN void asn1Init_CMS_RevocationInfoChoices (
   ASN1T_CMS_RevocationInfoChoices* pvalue);

EXTERN void asn1Free_CMS_RevocationInfoChoices (OSCTXT *pctxt, 
   ASN1T_CMS_RevocationInfoChoices* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerInfos                                               */
/*                                                            */
/**************************************************************/
/*
SignerInfos ::= SET OF SignerInfo
*/
#define TV_CMS_SignerInfos	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_CMS_SignerInfos;

/* List of ASN1T_CMS_SignerInfo */
typedef struct EXTERN ASN1T_CMS_SignerInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_SignerInfos();
} ASN1T_CMS_SignerInfos;

class EXTERN ASN1C_CMS_SignerInfos :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_SignerInfos& msgData;
public:
   ASN1C_CMS_SignerInfos (ASN1T_CMS_SignerInfos& data);
   ASN1C_CMS_SignerInfos (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SignerInfos& data);
   ASN1C_CMS_SignerInfos (ASN1CType& ccobj, ASN1T_CMS_SignerInfos& data);
   ASN1C_CMS_SignerInfos (OSRTContext &context, ASN1T_CMS_SignerInfos& data);
   ASN1C_CMS_SignerInfos (ASN1C_CMS_SignerInfos& original);
   virtual ~ASN1C_CMS_SignerInfos () {}
   inline ASN1T_CMS_SignerInfos& getData () { return msgData; }
   inline const ASN1T_CMS_SignerInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignerInfos");
   int toStream (const char* name = "SignerInfos");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SignerInfos* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SignerInfos& getCopy (ASN1T_CMS_SignerInfos* pDstData = 0);
   ASN1T_CMS_SignerInfos* newCopy ();

   ASN1C_CMS_SignerInfos& operator= (ASN1C_CMS_SignerInfos& srcData);
   void Append (ASN1T_CMS_SignerInfo* elem);
   ASN1T_CMS_SignerInfo* NewElement ();
   ASN1T_CMS_SignerInfo* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_SignerInfos (OSCTXT* pctxt,
   ASN1T_CMS_SignerInfos *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SignerInfos (OSCTXT* pctxt, 
   ASN1T_CMS_SignerInfos* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_SignerInfos 
   (const char* name, const ASN1T_CMS_SignerInfos* pvalue);

EXTERN int asn1PrtToStrm_CMS_SignerInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignerInfos* pvalue);

EXTERN OSBOOL asn1Compare_CMS_SignerInfos (const char* name, 
   ASN1T_CMS_SignerInfos* pValue, ASN1T_CMS_SignerInfos* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SignerInfos (OSCTXT* pctxt, 
   ASN1T_CMS_SignerInfos* pSrcValue, ASN1T_CMS_SignerInfos* pDstValue);

EXTERN void asn1Init_CMS_SignerInfos (ASN1T_CMS_SignerInfos* pvalue);

EXTERN void asn1Free_CMS_SignerInfos (OSCTXT *pctxt, ASN1T_CMS_SignerInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  SignedData                                                */
/*                                                            */
/**************************************************************/
/*
SignedData ::= SEQUENCE {
   version CMSVersion,
   digestAlgorithms DigestAlgorithmIdentifiers,
   encapContentInfo EncapsulatedContentInfo,
   certificates [0] CertificateSet OPTIONAL,
   crls [1] RevocationInfoChoices OPTIONAL,
   signerInfos SignerInfos
}
*/
#define TV_CMS_SignedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_SignedData;

struct EXTERN ASN1T_CMS_SignedData : public ASN1TPDU {
   struct {
      unsigned certificatesPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_CMS_CMSVersion version;
   ASN1T_PKCS7_DigestAlgorithmIdentifiers digestAlgorithms;
   ASN1T_CMS_EncapsulatedContentInfo encapContentInfo;
   ASN1T_CMS_CertificateSet certificates;
   ASN1T_CMS_RevocationInfoChoices crls;
   ASN1T_CMS_SignerInfos signerInfos;
   ASN1T_CMS_SignedData ();
   ASN1T_CMS_SignedData (ASN1C_CMS_SignedData& srcData);
   ~ASN1T_CMS_SignedData ();
} ;

class EXTERN ASN1C_CMS_SignedData :
public ASN1CType
{
protected:
   ASN1T_CMS_SignedData& msgData;
public:
   ASN1C_CMS_SignedData (ASN1T_CMS_SignedData& data);
   ASN1C_CMS_SignedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SignedData& data);
   ASN1C_CMS_SignedData (OSRTContext &context, ASN1T_CMS_SignedData& data);
   ASN1C_CMS_SignedData (ASN1C_CMS_SignedData& original);
   virtual ~ASN1C_CMS_SignedData () {}
   inline ASN1T_CMS_SignedData& getData () { return msgData; }
   inline const ASN1T_CMS_SignedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SignedData");
   int toStream (const char* name = "SignedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SignedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SignedData& getCopy (ASN1T_CMS_SignedData* pDstData = 0);
   ASN1T_CMS_SignedData* newCopy ();

   inline ASN1C_CMS_SignedData& operator= (ASN1C_CMS_SignedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_SignedData (OSCTXT* pctxt,
   ASN1T_CMS_SignedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SignedData (OSCTXT* pctxt, ASN1T_CMS_SignedData* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_SignedData 
   (const char* name, const ASN1T_CMS_SignedData* pvalue);

EXTERN int asn1PrtToStrm_CMS_SignedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignedData* pvalue);

EXTERN ASN1T_CMS_SignedData* new_ASN1T_CMS_SignedData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_SignedData (const char* name, 
   ASN1T_CMS_SignedData* pValue, ASN1T_CMS_SignedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SignedData (OSCTXT* pctxt, ASN1T_CMS_SignedData* pSrcValue, 
   ASN1T_CMS_SignedData* pDstValue);

EXTERN void asn1Init_CMS_SignedData (ASN1T_CMS_SignedData* pvalue);

EXTERN void asn1Free_CMS_SignedData (OSCTXT *pctxt, ASN1T_CMS_SignedData* pvalue);

/**************************************************************/
/*                                                            */
/*  OriginatorInfo                                            */
/*                                                            */
/**************************************************************/
/*
OriginatorInfo ::= SEQUENCE {
   certs [0] CertificateSet OPTIONAL,
   crls [1] RevocationInfoChoices OPTIONAL
}
*/
#define TV_CMS_OriginatorInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_OriginatorInfo;

struct EXTERN ASN1T_CMS_OriginatorInfo : public ASN1TPDU {
   struct {
      unsigned certsPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_CMS_CertificateSet certs;
   ASN1T_CMS_RevocationInfoChoices crls;
   ASN1T_CMS_OriginatorInfo ();
   ASN1T_CMS_OriginatorInfo (ASN1C_CMS_OriginatorInfo& srcData);
   ~ASN1T_CMS_OriginatorInfo ();
} ;

class EXTERN ASN1C_CMS_OriginatorInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_OriginatorInfo& msgData;
public:
   ASN1C_CMS_OriginatorInfo (ASN1T_CMS_OriginatorInfo& data);
   ASN1C_CMS_OriginatorInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_OriginatorInfo& data);
   ASN1C_CMS_OriginatorInfo (OSRTContext &context
      , ASN1T_CMS_OriginatorInfo& data);
   ASN1C_CMS_OriginatorInfo (ASN1C_CMS_OriginatorInfo& original);
   virtual ~ASN1C_CMS_OriginatorInfo () {}
   inline ASN1T_CMS_OriginatorInfo& getData () { return msgData; }
   inline const ASN1T_CMS_OriginatorInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OriginatorInfo");
   int toStream (const char* name = "OriginatorInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_OriginatorInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_OriginatorInfo& getCopy (ASN1T_CMS_OriginatorInfo* pDstData = 0);
   ASN1T_CMS_OriginatorInfo* newCopy ();

   inline ASN1C_CMS_OriginatorInfo& operator= (ASN1C_CMS_OriginatorInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_OriginatorInfo (OSCTXT* pctxt,
   ASN1T_CMS_OriginatorInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_OriginatorInfo (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_OriginatorInfo 
   (const char* name, const ASN1T_CMS_OriginatorInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_OriginatorInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OriginatorInfo* pvalue);

EXTERN ASN1T_CMS_OriginatorInfo* 
   new_ASN1T_CMS_OriginatorInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_OriginatorInfo (const char* name, 
   ASN1T_CMS_OriginatorInfo* pValue, ASN1T_CMS_OriginatorInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_OriginatorInfo (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorInfo* pSrcValue, ASN1T_CMS_OriginatorInfo* pDstValue);

EXTERN void asn1Init_CMS_OriginatorInfo (ASN1T_CMS_OriginatorInfo* pvalue);

EXTERN void asn1Free_CMS_OriginatorInfo (OSCTXT *pctxt, 
   ASN1T_CMS_OriginatorInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientIdentifier                                       */
/*                                                            */
/**************************************************************/
/*
RecipientIdentifier ::= CHOICE {
   issuerAndSerialNumber IssuerAndSerialNumber,
   subjectKeyIdentifier [0] SubjectKeyIdentifier
}
*/
/* Choice context tags */

#define TVC_CMS_RecipientIdentifier_issuerAndSerialNumber	(TM_UNIV|TM_CONS|16)
#define TVC_CMS_RecipientIdentifier_subjectKeyIdentifier	(TM_CTXT|TM_PRIM|0)

/* Choice tag constants */

#define T_CMS_RecipientIdentifier_issuerAndSerialNumber 1
#define T_CMS_RecipientIdentifier_subjectKeyIdentifier 2

class EXTERN ASN1C_CMS_RecipientIdentifier;

struct EXTERN ASN1T_CMS_RecipientIdentifier : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_PKCS7_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMS_SubjectKeyIdentifier *subjectKeyIdentifier;
   } u;
   ASN1T_CMS_RecipientIdentifier () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_RecipientIdentifier (ASN1C_CMS_RecipientIdentifier& srcData);
   ~ASN1T_CMS_RecipientIdentifier ();
} ;

class EXTERN ASN1C_CMS_RecipientIdentifier :
public ASN1CType
{
protected:
   ASN1T_CMS_RecipientIdentifier& msgData;
public:
   ASN1C_CMS_RecipientIdentifier (ASN1T_CMS_RecipientIdentifier& data);
   ASN1C_CMS_RecipientIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_RecipientIdentifier& data);
   ASN1C_CMS_RecipientIdentifier (OSRTContext &context
      , ASN1T_CMS_RecipientIdentifier& data);
   ASN1C_CMS_RecipientIdentifier (ASN1C_CMS_RecipientIdentifier& original);
   virtual ~ASN1C_CMS_RecipientIdentifier () {}
   inline ASN1T_CMS_RecipientIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_RecipientIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RecipientIdentifier");
   int toStream (const char* name = "RecipientIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_RecipientIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_RecipientIdentifier& getCopy (ASN1T_CMS_RecipientIdentifier* pDstData = 0);
   ASN1T_CMS_RecipientIdentifier* newCopy ();

   inline ASN1C_CMS_RecipientIdentifier& operator= (ASN1C_CMS_RecipientIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_RecipientIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_RecipientIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_RecipientIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_RecipientIdentifier 
   (const char* name, const ASN1T_CMS_RecipientIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_RecipientIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientIdentifier* pvalue);

EXTERN ASN1T_CMS_RecipientIdentifier* 
   new_ASN1T_CMS_RecipientIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_RecipientIdentifier (const char* name, 
   ASN1T_CMS_RecipientIdentifier* pValue, 
   ASN1T_CMS_RecipientIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_RecipientIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientIdentifier* pSrcValue, ASN1T_CMS_RecipientIdentifier*
    pDstValue);

EXTERN void asn1Init_CMS_RecipientIdentifier (ASN1T_CMS_RecipientIdentifier* pvalue);

EXTERN void asn1Free_CMS_RecipientIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_RecipientIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyTransRecipientInfo                                     */
/*                                                            */
/**************************************************************/
/*
KeyTransRecipientInfo ::= SEQUENCE {
   version CMSVersion,
   rid RecipientIdentifier,
   keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
   encryptedKey EncryptedKey
}
*/
#define TV_CMS_KeyTransRecipientInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_KeyTransRecipientInfo;

struct EXTERN ASN1T_CMS_KeyTransRecipientInfo : public ASN1TPDU {
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_RecipientIdentifier rid;
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_CMS_EncryptedKey encryptedKey;
   ASN1T_CMS_KeyTransRecipientInfo ();
   ASN1T_CMS_KeyTransRecipientInfo (ASN1C_CMS_KeyTransRecipientInfo& srcData);
   ~ASN1T_CMS_KeyTransRecipientInfo ();
} ;

class EXTERN ASN1C_CMS_KeyTransRecipientInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_KeyTransRecipientInfo& msgData;
public:
   ASN1C_CMS_KeyTransRecipientInfo (ASN1T_CMS_KeyTransRecipientInfo& data);
   ASN1C_CMS_KeyTransRecipientInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_KeyTransRecipientInfo& data);
   ASN1C_CMS_KeyTransRecipientInfo (OSRTContext &context
      , ASN1T_CMS_KeyTransRecipientInfo& data);
   ASN1C_CMS_KeyTransRecipientInfo (ASN1C_CMS_KeyTransRecipientInfo& original);
   virtual ~ASN1C_CMS_KeyTransRecipientInfo () {}
   inline ASN1T_CMS_KeyTransRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMS_KeyTransRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyTransRecipientInfo");
   int toStream (const char* name = "KeyTransRecipientInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_KeyTransRecipientInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_KeyTransRecipientInfo& getCopy (ASN1T_CMS_KeyTransRecipientInfo* pDstData = 0);
   ASN1T_CMS_KeyTransRecipientInfo* newCopy ();

   inline ASN1C_CMS_KeyTransRecipientInfo& operator= (ASN1C_CMS_KeyTransRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_KeyTransRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_KeyTransRecipientInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_KeyTransRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KeyTransRecipientInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_KeyTransRecipientInfo 
   (const char* name, const ASN1T_CMS_KeyTransRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_KeyTransRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyTransRecipientInfo* pvalue);

EXTERN ASN1T_CMS_KeyTransRecipientInfo* 
   new_ASN1T_CMS_KeyTransRecipientInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_KeyTransRecipientInfo (const char* name, 
   ASN1T_CMS_KeyTransRecipientInfo* pValue, 
   ASN1T_CMS_KeyTransRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_KeyTransRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KeyTransRecipientInfo* pSrcValue, ASN1T_CMS_KeyTransRecipientInfo*
    pDstValue);

EXTERN void asn1Init_CMS_KeyTransRecipientInfo (
   ASN1T_CMS_KeyTransRecipientInfo* pvalue);

EXTERN void asn1Free_CMS_KeyTransRecipientInfo (OSCTXT *pctxt, 
   ASN1T_CMS_KeyTransRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  OriginatorPublicKey                                       */
/*                                                            */
/**************************************************************/
/*
OriginatorPublicKey ::= SEQUENCE {
   algorithm AlgorithmIdentifier,
   publicKey BIT STRING 
}
*/
#define TV_CMS_OriginatorPublicKey	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_OriginatorPublicKey;

struct EXTERN ASN1T_CMS_OriginatorPublicKey : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier algorithm;
   ASN1TDynBitStr publicKey;
   ASN1T_CMS_OriginatorPublicKey ();
   ASN1T_CMS_OriginatorPublicKey (ASN1C_CMS_OriginatorPublicKey& srcData);
   ~ASN1T_CMS_OriginatorPublicKey ();
} ;

class EXTERN ASN1C_CMS_OriginatorPublicKey :
public ASN1CType
{
protected:
   ASN1T_CMS_OriginatorPublicKey& msgData;
public:
   ASN1C_CMS_OriginatorPublicKey (ASN1T_CMS_OriginatorPublicKey& data);
   ASN1C_CMS_OriginatorPublicKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_OriginatorPublicKey& data);
   ASN1C_CMS_OriginatorPublicKey (OSRTContext &context
      , ASN1T_CMS_OriginatorPublicKey& data);
   ASN1C_CMS_OriginatorPublicKey (ASN1C_CMS_OriginatorPublicKey& original);
   virtual ~ASN1C_CMS_OriginatorPublicKey () {}
   inline ASN1T_CMS_OriginatorPublicKey& getData () { return msgData; }
   inline const ASN1T_CMS_OriginatorPublicKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OriginatorPublicKey");
   int toStream (const char* name = "OriginatorPublicKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_OriginatorPublicKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_OriginatorPublicKey& getCopy (ASN1T_CMS_OriginatorPublicKey* pDstData = 0);
   ASN1T_CMS_OriginatorPublicKey* newCopy ();

   inline ASN1C_CMS_OriginatorPublicKey& operator= (ASN1C_CMS_OriginatorPublicKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_OriginatorPublicKey (OSCTXT* pctxt,
   ASN1T_CMS_OriginatorPublicKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_OriginatorPublicKey (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorPublicKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_OriginatorPublicKey 
   (const char* name, const ASN1T_CMS_OriginatorPublicKey* pvalue);

EXTERN int asn1PrtToStrm_CMS_OriginatorPublicKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OriginatorPublicKey* pvalue);

EXTERN ASN1T_CMS_OriginatorPublicKey* 
   new_ASN1T_CMS_OriginatorPublicKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_OriginatorPublicKey (const char* name, 
   ASN1T_CMS_OriginatorPublicKey* pValue, 
   ASN1T_CMS_OriginatorPublicKey* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_OriginatorPublicKey (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorPublicKey* pSrcValue, ASN1T_CMS_OriginatorPublicKey*
    pDstValue);

EXTERN void asn1Init_CMS_OriginatorPublicKey (ASN1T_CMS_OriginatorPublicKey* pvalue);

EXTERN void asn1Free_CMS_OriginatorPublicKey (OSCTXT *pctxt, 
   ASN1T_CMS_OriginatorPublicKey* pvalue);

/**************************************************************/
/*                                                            */
/*  OriginatorIdentifierOrKey                                 */
/*                                                            */
/**************************************************************/
/*
OriginatorIdentifierOrKey ::= CHOICE {
   issuerAndSerialNumber IssuerAndSerialNumber,
   subjectKeyIdentifier [0] SubjectKeyIdentifier,
   originatorKey [1] OriginatorPublicKey
}
*/
/* Choice context tags */

#define TVC_CMS_OriginatorIdentifierOrKey_issuerAndSerialNumber	(TM_UNIV|TM_CONS|16)
#define TVC_CMS_OriginatorIdentifierOrKey_subjectKeyIdentifier	(TM_CTXT|TM_PRIM|0)
#define TVC_CMS_OriginatorIdentifierOrKey_originatorKey	(TM_CTXT|TM_CONS|1)

/* Choice tag constants */

#define T_CMS_OriginatorIdentifierOrKey_issuerAndSerialNumber 1
#define T_CMS_OriginatorIdentifierOrKey_subjectKeyIdentifier 2
#define T_CMS_OriginatorIdentifierOrKey_originatorKey 3

class EXTERN ASN1C_CMS_OriginatorIdentifierOrKey;

struct EXTERN ASN1T_CMS_OriginatorIdentifierOrKey : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_PKCS7_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMS_SubjectKeyIdentifier *subjectKeyIdentifier;
      /* t = 3 */
      ASN1T_CMS_OriginatorPublicKey *originatorKey;
   } u;
   ASN1T_CMS_OriginatorIdentifierOrKey () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_OriginatorIdentifierOrKey (ASN1C_CMS_OriginatorIdentifierOrKey& srcData);
   ~ASN1T_CMS_OriginatorIdentifierOrKey ();
} ;

class EXTERN ASN1C_CMS_OriginatorIdentifierOrKey :
public ASN1CType
{
protected:
   ASN1T_CMS_OriginatorIdentifierOrKey& msgData;
public:
   ASN1C_CMS_OriginatorIdentifierOrKey
       (ASN1T_CMS_OriginatorIdentifierOrKey& data);
   ASN1C_CMS_OriginatorIdentifierOrKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_OriginatorIdentifierOrKey& data);
   ASN1C_CMS_OriginatorIdentifierOrKey (OSRTContext &context
      , ASN1T_CMS_OriginatorIdentifierOrKey& data);
   ASN1C_CMS_OriginatorIdentifierOrKey (ASN1C_CMS_OriginatorIdentifierOrKey& original);
   virtual ~ASN1C_CMS_OriginatorIdentifierOrKey () {}
   inline ASN1T_CMS_OriginatorIdentifierOrKey& getData () { return msgData; }
   inline const ASN1T_CMS_OriginatorIdentifierOrKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OriginatorIdentifierOrKey");
   int toStream (const char* name = "OriginatorIdentifierOrKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_OriginatorIdentifierOrKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_OriginatorIdentifierOrKey& getCopy (ASN1T_CMS_OriginatorIdentifierOrKey* pDstData = 0);
   ASN1T_CMS_OriginatorIdentifierOrKey* newCopy ();

   inline ASN1C_CMS_OriginatorIdentifierOrKey& operator= (ASN1C_CMS_OriginatorIdentifierOrKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_OriginatorIdentifierOrKey (OSCTXT* pctxt,
   ASN1T_CMS_OriginatorIdentifierOrKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_OriginatorIdentifierOrKey (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_OriginatorIdentifierOrKey 
   (const char* name, const ASN1T_CMS_OriginatorIdentifierOrKey* pvalue);

EXTERN int asn1PrtToStrm_CMS_OriginatorIdentifierOrKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OriginatorIdentifierOrKey* pvalue);

EXTERN ASN1T_CMS_OriginatorIdentifierOrKey* 
   new_ASN1T_CMS_OriginatorIdentifierOrKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_OriginatorIdentifierOrKey (const char* name, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pValue, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_OriginatorIdentifierOrKey (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pSrcValue, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pDstValue);

EXTERN void asn1Init_CMS_OriginatorIdentifierOrKey (
   ASN1T_CMS_OriginatorIdentifierOrKey* pvalue);

EXTERN void asn1Free_CMS_OriginatorIdentifierOrKey (OSCTXT *pctxt, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherKeyAttribute                                         */
/*                                                            */
/**************************************************************/
/*
OtherKeyAttribute ::= SEQUENCE {
   keyAttrId OBJECT IDENTIFIER,
   keyAttr ANY OPTIONAL
}
*/
#define TV_CMS_OtherKeyAttribute	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_OtherKeyAttribute;

struct EXTERN ASN1T_CMS_OtherKeyAttribute : public ASN1TPDU {
   struct {
      unsigned keyAttrPresent : 1;
   } m;
   ASN1TObjId keyAttrId;
   ASN1TOpenType keyAttr;
   ASN1T_CMS_OtherKeyAttribute ();
   ASN1T_CMS_OtherKeyAttribute (ASN1C_CMS_OtherKeyAttribute& srcData);
   ~ASN1T_CMS_OtherKeyAttribute ();
} ;

class EXTERN ASN1C_CMS_OtherKeyAttribute :
public ASN1CType
{
protected:
   ASN1T_CMS_OtherKeyAttribute& msgData;
public:
   ASN1C_CMS_OtherKeyAttribute (ASN1T_CMS_OtherKeyAttribute& data);
   ASN1C_CMS_OtherKeyAttribute (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_OtherKeyAttribute& data);
   ASN1C_CMS_OtherKeyAttribute (OSRTContext &context
      , ASN1T_CMS_OtherKeyAttribute& data);
   ASN1C_CMS_OtherKeyAttribute (ASN1C_CMS_OtherKeyAttribute& original);
   virtual ~ASN1C_CMS_OtherKeyAttribute () {}
   inline ASN1T_CMS_OtherKeyAttribute& getData () { return msgData; }
   inline const ASN1T_CMS_OtherKeyAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherKeyAttribute");
   int toStream (const char* name = "OtherKeyAttribute");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_OtherKeyAttribute* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_OtherKeyAttribute& getCopy (ASN1T_CMS_OtherKeyAttribute* pDstData = 0);
   ASN1T_CMS_OtherKeyAttribute* newCopy ();

   inline ASN1C_CMS_OtherKeyAttribute& operator= (ASN1C_CMS_OtherKeyAttribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_OtherKeyAttribute (OSCTXT* pctxt,
   ASN1T_CMS_OtherKeyAttribute *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_OtherKeyAttribute (OSCTXT* pctxt, 
   ASN1T_CMS_OtherKeyAttribute* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_OtherKeyAttribute 
   (const char* name, const ASN1T_CMS_OtherKeyAttribute* pvalue);

EXTERN int asn1PrtToStrm_CMS_OtherKeyAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OtherKeyAttribute* pvalue);

EXTERN ASN1T_CMS_OtherKeyAttribute* 
   new_ASN1T_CMS_OtherKeyAttribute (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_OtherKeyAttribute (const char* name, 
   ASN1T_CMS_OtherKeyAttribute* pValue, 
   ASN1T_CMS_OtherKeyAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_OtherKeyAttribute (OSCTXT* pctxt, 
   ASN1T_CMS_OtherKeyAttribute* pSrcValue, ASN1T_CMS_OtherKeyAttribute*
    pDstValue);

EXTERN void asn1Init_CMS_OtherKeyAttribute (ASN1T_CMS_OtherKeyAttribute* pvalue);

EXTERN void asn1Free_CMS_OtherKeyAttribute (OSCTXT *pctxt, 
   ASN1T_CMS_OtherKeyAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientKeyIdentifier                                    */
/*                                                            */
/**************************************************************/
/*
RecipientKeyIdentifier ::= SEQUENCE {
   subjectKeyIdentifier SubjectKeyIdentifier,
   date GeneralizedTime OPTIONAL,
   other OtherKeyAttribute OPTIONAL
}
*/
#define TV_CMS_RecipientKeyIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_RecipientKeyIdentifier;

struct EXTERN ASN1T_CMS_RecipientKeyIdentifier : public ASN1TPDU {
   struct {
      unsigned datePresent : 1;
      unsigned otherPresent : 1;
   } m;
   ASN1T_CMS_SubjectKeyIdentifier subjectKeyIdentifier;
   const char* date;
   ASN1T_CMS_OtherKeyAttribute other;
   ASN1T_CMS_RecipientKeyIdentifier ();
   ASN1T_CMS_RecipientKeyIdentifier (ASN1C_CMS_RecipientKeyIdentifier& srcData);
   ~ASN1T_CMS_RecipientKeyIdentifier ();
} ;

class EXTERN ASN1C_CMS_RecipientKeyIdentifier :
public ASN1CType
{
protected:
   ASN1T_CMS_RecipientKeyIdentifier& msgData;
public:
   ASN1C_CMS_RecipientKeyIdentifier (ASN1T_CMS_RecipientKeyIdentifier& data);
   ASN1C_CMS_RecipientKeyIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_RecipientKeyIdentifier& data);
   ASN1C_CMS_RecipientKeyIdentifier (OSRTContext &context
      , ASN1T_CMS_RecipientKeyIdentifier& data);
   ASN1C_CMS_RecipientKeyIdentifier (ASN1C_CMS_RecipientKeyIdentifier& original);
   virtual ~ASN1C_CMS_RecipientKeyIdentifier () {}
   inline ASN1T_CMS_RecipientKeyIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_RecipientKeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RecipientKeyIdentifier");
   int toStream (const char* name = "RecipientKeyIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_RecipientKeyIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_RecipientKeyIdentifier& getCopy (ASN1T_CMS_RecipientKeyIdentifier* pDstData = 0);
   ASN1T_CMS_RecipientKeyIdentifier* newCopy ();

   inline ASN1C_CMS_RecipientKeyIdentifier& operator= (ASN1C_CMS_RecipientKeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_RecipientKeyIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_RecipientKeyIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_RecipientKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientKeyIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_RecipientKeyIdentifier 
   (const char* name, const ASN1T_CMS_RecipientKeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_RecipientKeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientKeyIdentifier* pvalue);

EXTERN ASN1T_CMS_RecipientKeyIdentifier* 
   new_ASN1T_CMS_RecipientKeyIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_RecipientKeyIdentifier (const char* name, 
   ASN1T_CMS_RecipientKeyIdentifier* pValue, 
   ASN1T_CMS_RecipientKeyIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_RecipientKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientKeyIdentifier* pSrcValue, 
   ASN1T_CMS_RecipientKeyIdentifier* pDstValue);

EXTERN void asn1Init_CMS_RecipientKeyIdentifier (
   ASN1T_CMS_RecipientKeyIdentifier* pvalue);

EXTERN void asn1Free_CMS_RecipientKeyIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_RecipientKeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyAgreeRecipientIdentifier                               */
/*                                                            */
/**************************************************************/
/*
KeyAgreeRecipientIdentifier ::= CHOICE {
   issuerAndSerialNumber IssuerAndSerialNumber,
   rKeyId [0] RecipientKeyIdentifier
}
*/
/* Choice context tags */

#define TVC_CMS_KeyAgreeRecipientIdentifier_issuerAndSerialNumber	(TM_UNIV|TM_CONS|16)
#define TVC_CMS_KeyAgreeRecipientIdentifier_rKeyId	(TM_CTXT|TM_CONS|0)

/* Choice tag constants */

#define T_CMS_KeyAgreeRecipientIdentifier_issuerAndSerialNumber 1
#define T_CMS_KeyAgreeRecipientIdentifier_rKeyId 2

class EXTERN ASN1C_CMS_KeyAgreeRecipientIdentifier;

struct EXTERN ASN1T_CMS_KeyAgreeRecipientIdentifier : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_PKCS7_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMS_RecipientKeyIdentifier *rKeyId;
   } u;
   ASN1T_CMS_KeyAgreeRecipientIdentifier () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_KeyAgreeRecipientIdentifier (ASN1C_CMS_KeyAgreeRecipientIdentifier& srcData);
   ~ASN1T_CMS_KeyAgreeRecipientIdentifier ();
} ;

class EXTERN ASN1C_CMS_KeyAgreeRecipientIdentifier :
public ASN1CType
{
protected:
   ASN1T_CMS_KeyAgreeRecipientIdentifier& msgData;
public:
   ASN1C_CMS_KeyAgreeRecipientIdentifier
       (ASN1T_CMS_KeyAgreeRecipientIdentifier& data);
   ASN1C_CMS_KeyAgreeRecipientIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_KeyAgreeRecipientIdentifier& data);
   ASN1C_CMS_KeyAgreeRecipientIdentifier (OSRTContext &context
      , ASN1T_CMS_KeyAgreeRecipientIdentifier& data);
   ASN1C_CMS_KeyAgreeRecipientIdentifier (ASN1C_CMS_KeyAgreeRecipientIdentifier& original);
   virtual ~ASN1C_CMS_KeyAgreeRecipientIdentifier () {}
   inline ASN1T_CMS_KeyAgreeRecipientIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_KeyAgreeRecipientIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyAgreeRecipientIdentifier");
   int toStream (const char* name = "KeyAgreeRecipientIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_KeyAgreeRecipientIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_KeyAgreeRecipientIdentifier& getCopy (ASN1T_CMS_KeyAgreeRecipientIdentifier* pDstData = 0);
   ASN1T_CMS_KeyAgreeRecipientIdentifier* newCopy ();

   inline ASN1C_CMS_KeyAgreeRecipientIdentifier& operator= (ASN1C_CMS_KeyAgreeRecipientIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_KeyAgreeRecipientIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_KeyAgreeRecipientIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_KeyAgreeRecipientIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_KeyAgreeRecipientIdentifier 
   (const char* name, const ASN1T_CMS_KeyAgreeRecipientIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_KeyAgreeRecipientIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyAgreeRecipientIdentifier* pvalue);

EXTERN ASN1T_CMS_KeyAgreeRecipientIdentifier* 
   new_ASN1T_CMS_KeyAgreeRecipientIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_KeyAgreeRecipientIdentifier (const char* name, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pValue, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_KeyAgreeRecipientIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pSrcValue, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pDstValue);

EXTERN void asn1Init_CMS_KeyAgreeRecipientIdentifier (
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pvalue);

EXTERN void asn1Free_CMS_KeyAgreeRecipientIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientEncryptedKey                                     */
/*                                                            */
/**************************************************************/
/*
RecipientEncryptedKey ::= SEQUENCE {
   rid KeyAgreeRecipientIdentifier,
   encryptedKey EncryptedKey
}
*/
#define TV_CMS_RecipientEncryptedKey	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_RecipientEncryptedKey;

struct EXTERN ASN1T_CMS_RecipientEncryptedKey : public ASN1TPDU {
   ASN1T_CMS_KeyAgreeRecipientIdentifier rid;
   ASN1T_CMS_EncryptedKey encryptedKey;
   ASN1T_CMS_RecipientEncryptedKey ();
   ASN1T_CMS_RecipientEncryptedKey (ASN1C_CMS_RecipientEncryptedKey& srcData);
   ~ASN1T_CMS_RecipientEncryptedKey ();
} ;

class EXTERN ASN1C_CMS_RecipientEncryptedKey :
public ASN1CType
{
protected:
   ASN1T_CMS_RecipientEncryptedKey& msgData;
public:
   ASN1C_CMS_RecipientEncryptedKey (ASN1T_CMS_RecipientEncryptedKey& data);
   ASN1C_CMS_RecipientEncryptedKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_RecipientEncryptedKey& data);
   ASN1C_CMS_RecipientEncryptedKey (OSRTContext &context
      , ASN1T_CMS_RecipientEncryptedKey& data);
   ASN1C_CMS_RecipientEncryptedKey (ASN1C_CMS_RecipientEncryptedKey& original);
   virtual ~ASN1C_CMS_RecipientEncryptedKey () {}
   inline ASN1T_CMS_RecipientEncryptedKey& getData () { return msgData; }
   inline const ASN1T_CMS_RecipientEncryptedKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RecipientEncryptedKey");
   int toStream (const char* name = "RecipientEncryptedKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_RecipientEncryptedKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_RecipientEncryptedKey& getCopy (ASN1T_CMS_RecipientEncryptedKey* pDstData = 0);
   ASN1T_CMS_RecipientEncryptedKey* newCopy ();

   inline ASN1C_CMS_RecipientEncryptedKey& operator= (ASN1C_CMS_RecipientEncryptedKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_RecipientEncryptedKey (OSCTXT* pctxt,
   ASN1T_CMS_RecipientEncryptedKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_RecipientEncryptedKey (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientEncryptedKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_RecipientEncryptedKey 
   (const char* name, const ASN1T_CMS_RecipientEncryptedKey* pvalue);

EXTERN int asn1PrtToStrm_CMS_RecipientEncryptedKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientEncryptedKey* pvalue);

EXTERN ASN1T_CMS_RecipientEncryptedKey* 
   new_ASN1T_CMS_RecipientEncryptedKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_RecipientEncryptedKey (const char* name, 
   ASN1T_CMS_RecipientEncryptedKey* pValue, 
   ASN1T_CMS_RecipientEncryptedKey* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_RecipientEncryptedKey (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientEncryptedKey* pSrcValue, ASN1T_CMS_RecipientEncryptedKey*
    pDstValue);

EXTERN void asn1Init_CMS_RecipientEncryptedKey (
   ASN1T_CMS_RecipientEncryptedKey* pvalue);

EXTERN void asn1Free_CMS_RecipientEncryptedKey (OSCTXT *pctxt, 
   ASN1T_CMS_RecipientEncryptedKey* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientEncryptedKeys                                    */
/*                                                            */
/**************************************************************/
/*
RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey
*/
#define TV_CMS_RecipientEncryptedKeys	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_RecipientEncryptedKeys;

/* List of ASN1T_CMS_RecipientEncryptedKey */
typedef struct EXTERN ASN1T_CMS_RecipientEncryptedKeys : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_RecipientEncryptedKeys();
} ASN1T_CMS_RecipientEncryptedKeys;

class EXTERN ASN1C_CMS_RecipientEncryptedKeys :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_RecipientEncryptedKeys& msgData;
public:
   ASN1C_CMS_RecipientEncryptedKeys (ASN1T_CMS_RecipientEncryptedKeys& data);
   ASN1C_CMS_RecipientEncryptedKeys (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_RecipientEncryptedKeys& data);
   ASN1C_CMS_RecipientEncryptedKeys (ASN1CType& ccobj
      , ASN1T_CMS_RecipientEncryptedKeys& data);
   ASN1C_CMS_RecipientEncryptedKeys (OSRTContext &context
      , ASN1T_CMS_RecipientEncryptedKeys& data);
   ASN1C_CMS_RecipientEncryptedKeys (ASN1C_CMS_RecipientEncryptedKeys& original);
   virtual ~ASN1C_CMS_RecipientEncryptedKeys () {}
   inline ASN1T_CMS_RecipientEncryptedKeys& getData () { return msgData; }
   inline const ASN1T_CMS_RecipientEncryptedKeys& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RecipientEncryptedKeys");
   int toStream (const char* name = "RecipientEncryptedKeys");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_RecipientEncryptedKeys* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_RecipientEncryptedKeys& getCopy (ASN1T_CMS_RecipientEncryptedKeys* pDstData = 0);
   ASN1T_CMS_RecipientEncryptedKeys* newCopy ();

   ASN1C_CMS_RecipientEncryptedKeys& operator= (ASN1C_CMS_RecipientEncryptedKeys& srcData);
   void Append (ASN1T_CMS_RecipientEncryptedKey* elem);
   ASN1T_CMS_RecipientEncryptedKey* NewElement ();
   ASN1T_CMS_RecipientEncryptedKey* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_RecipientEncryptedKeys (OSCTXT* pctxt,
   ASN1T_CMS_RecipientEncryptedKeys *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_RecipientEncryptedKeys (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientEncryptedKeys* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_RecipientEncryptedKeys 
   (const char* name, const ASN1T_CMS_RecipientEncryptedKeys* pvalue);

EXTERN int asn1PrtToStrm_CMS_RecipientEncryptedKeys (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientEncryptedKeys* pvalue);

EXTERN OSBOOL asn1Compare_CMS_RecipientEncryptedKeys (const char* name, 
   ASN1T_CMS_RecipientEncryptedKeys* pValue, 
   ASN1T_CMS_RecipientEncryptedKeys* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_RecipientEncryptedKeys (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientEncryptedKeys* pSrcValue, 
   ASN1T_CMS_RecipientEncryptedKeys* pDstValue);

EXTERN void asn1Init_CMS_RecipientEncryptedKeys (
   ASN1T_CMS_RecipientEncryptedKeys* pvalue);

EXTERN void asn1Free_CMS_RecipientEncryptedKeys (OSCTXT *pctxt, 
   ASN1T_CMS_RecipientEncryptedKeys* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyAgreeRecipientInfo                                     */
/*                                                            */
/**************************************************************/
/*
KeyAgreeRecipientInfo ::= SEQUENCE {
   version CMSVersion,
   originator [0] EXPLICIT OriginatorIdentifierOrKey,
   ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
   keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
   recipientEncryptedKeys RecipientEncryptedKeys
}
*/
#define TV_CMS_KeyAgreeRecipientInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_KeyAgreeRecipientInfo;

struct EXTERN ASN1T_CMS_KeyAgreeRecipientInfo : public ASN1TPDU {
   struct {
      unsigned ukmPresent : 1;
   } m;
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_OriginatorIdentifierOrKey originator;
   ASN1T_CMS_UserKeyingMaterial ukm;
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_CMS_RecipientEncryptedKeys recipientEncryptedKeys;
   ASN1T_CMS_KeyAgreeRecipientInfo ();
   ASN1T_CMS_KeyAgreeRecipientInfo (ASN1C_CMS_KeyAgreeRecipientInfo& srcData);
   ~ASN1T_CMS_KeyAgreeRecipientInfo ();
} ;

class EXTERN ASN1C_CMS_KeyAgreeRecipientInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_KeyAgreeRecipientInfo& msgData;
public:
   ASN1C_CMS_KeyAgreeRecipientInfo (ASN1T_CMS_KeyAgreeRecipientInfo& data);
   ASN1C_CMS_KeyAgreeRecipientInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_KeyAgreeRecipientInfo& data);
   ASN1C_CMS_KeyAgreeRecipientInfo (OSRTContext &context
      , ASN1T_CMS_KeyAgreeRecipientInfo& data);
   ASN1C_CMS_KeyAgreeRecipientInfo (ASN1C_CMS_KeyAgreeRecipientInfo& original);
   virtual ~ASN1C_CMS_KeyAgreeRecipientInfo () {}
   inline ASN1T_CMS_KeyAgreeRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMS_KeyAgreeRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyAgreeRecipientInfo");
   int toStream (const char* name = "KeyAgreeRecipientInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_KeyAgreeRecipientInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_KeyAgreeRecipientInfo& getCopy (ASN1T_CMS_KeyAgreeRecipientInfo* pDstData = 0);
   ASN1T_CMS_KeyAgreeRecipientInfo* newCopy ();

   inline ASN1C_CMS_KeyAgreeRecipientInfo& operator= (ASN1C_CMS_KeyAgreeRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_KeyAgreeRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_KeyAgreeRecipientInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_KeyAgreeRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KeyAgreeRecipientInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_KeyAgreeRecipientInfo 
   (const char* name, const ASN1T_CMS_KeyAgreeRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_KeyAgreeRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyAgreeRecipientInfo* pvalue);

EXTERN ASN1T_CMS_KeyAgreeRecipientInfo* 
   new_ASN1T_CMS_KeyAgreeRecipientInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_KeyAgreeRecipientInfo (const char* name, 
   ASN1T_CMS_KeyAgreeRecipientInfo* pValue, 
   ASN1T_CMS_KeyAgreeRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_KeyAgreeRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KeyAgreeRecipientInfo* pSrcValue, ASN1T_CMS_KeyAgreeRecipientInfo*
    pDstValue);

EXTERN void asn1Init_CMS_KeyAgreeRecipientInfo (
   ASN1T_CMS_KeyAgreeRecipientInfo* pvalue);

EXTERN void asn1Free_CMS_KeyAgreeRecipientInfo (OSCTXT *pctxt, 
   ASN1T_CMS_KeyAgreeRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  KEKIdentifier                                             */
/*                                                            */
/**************************************************************/
/*
KEKIdentifier ::= SEQUENCE {
   keyIdentifier OCTET STRING,
   date GeneralizedTime OPTIONAL,
   other OtherKeyAttribute OPTIONAL
}
*/
#define TV_CMS_KEKIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_KEKIdentifier;

struct EXTERN ASN1T_CMS_KEKIdentifier : public ASN1TPDU {
   struct {
      unsigned datePresent : 1;
      unsigned otherPresent : 1;
   } m;
   ASN1TDynOctStr keyIdentifier;
   const char* date;
   ASN1T_CMS_OtherKeyAttribute other;
   ASN1T_CMS_KEKIdentifier ();
   ASN1T_CMS_KEKIdentifier (ASN1C_CMS_KEKIdentifier& srcData);
   ~ASN1T_CMS_KEKIdentifier ();
} ;

class EXTERN ASN1C_CMS_KEKIdentifier :
public ASN1CType
{
protected:
   ASN1T_CMS_KEKIdentifier& msgData;
public:
   ASN1C_CMS_KEKIdentifier (ASN1T_CMS_KEKIdentifier& data);
   ASN1C_CMS_KEKIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_KEKIdentifier& data);
   ASN1C_CMS_KEKIdentifier (OSRTContext &context, ASN1T_CMS_KEKIdentifier& data
      );
   ASN1C_CMS_KEKIdentifier (ASN1C_CMS_KEKIdentifier& original);
   virtual ~ASN1C_CMS_KEKIdentifier () {}
   inline ASN1T_CMS_KEKIdentifier& getData () { return msgData; }
   inline const ASN1T_CMS_KEKIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KEKIdentifier");
   int toStream (const char* name = "KEKIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_KEKIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_KEKIdentifier& getCopy (ASN1T_CMS_KEKIdentifier* pDstData = 0);
   ASN1T_CMS_KEKIdentifier* newCopy ();

   inline ASN1C_CMS_KEKIdentifier& operator= (ASN1C_CMS_KEKIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_KEKIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_KEKIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_KEKIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KEKIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_KEKIdentifier 
   (const char* name, const ASN1T_CMS_KEKIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMS_KEKIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KEKIdentifier* pvalue);

EXTERN ASN1T_CMS_KEKIdentifier* new_ASN1T_CMS_KEKIdentifier (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMS_KEKIdentifier (const char* name, 
   ASN1T_CMS_KEKIdentifier* pValue, ASN1T_CMS_KEKIdentifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_KEKIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KEKIdentifier* pSrcValue, ASN1T_CMS_KEKIdentifier* pDstValue);

EXTERN void asn1Init_CMS_KEKIdentifier (ASN1T_CMS_KEKIdentifier* pvalue);

EXTERN void asn1Free_CMS_KEKIdentifier (OSCTXT *pctxt, 
   ASN1T_CMS_KEKIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KEKRecipientInfo                                          */
/*                                                            */
/**************************************************************/
/*
KEKRecipientInfo ::= SEQUENCE {
   version CMSVersion,
   kekid KEKIdentifier,
   keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
   encryptedKey EncryptedKey
}
*/
#define TV_CMS_KEKRecipientInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_KEKRecipientInfo;

struct EXTERN ASN1T_CMS_KEKRecipientInfo : public ASN1TPDU {
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_KEKIdentifier kekid;
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_CMS_EncryptedKey encryptedKey;
   ASN1T_CMS_KEKRecipientInfo ();
   ASN1T_CMS_KEKRecipientInfo (ASN1C_CMS_KEKRecipientInfo& srcData);
   ~ASN1T_CMS_KEKRecipientInfo ();
} ;

class EXTERN ASN1C_CMS_KEKRecipientInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_KEKRecipientInfo& msgData;
public:
   ASN1C_CMS_KEKRecipientInfo (ASN1T_CMS_KEKRecipientInfo& data);
   ASN1C_CMS_KEKRecipientInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_KEKRecipientInfo& data);
   ASN1C_CMS_KEKRecipientInfo (OSRTContext &context
      , ASN1T_CMS_KEKRecipientInfo& data);
   ASN1C_CMS_KEKRecipientInfo (ASN1C_CMS_KEKRecipientInfo& original);
   virtual ~ASN1C_CMS_KEKRecipientInfo () {}
   inline ASN1T_CMS_KEKRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMS_KEKRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KEKRecipientInfo");
   int toStream (const char* name = "KEKRecipientInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_KEKRecipientInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_KEKRecipientInfo& getCopy (ASN1T_CMS_KEKRecipientInfo* pDstData = 0);
   ASN1T_CMS_KEKRecipientInfo* newCopy ();

   inline ASN1C_CMS_KEKRecipientInfo& operator= (ASN1C_CMS_KEKRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_KEKRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_KEKRecipientInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_KEKRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KEKRecipientInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_KEKRecipientInfo 
   (const char* name, const ASN1T_CMS_KEKRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_KEKRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KEKRecipientInfo* pvalue);

EXTERN ASN1T_CMS_KEKRecipientInfo* 
   new_ASN1T_CMS_KEKRecipientInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_KEKRecipientInfo (const char* name, 
   ASN1T_CMS_KEKRecipientInfo* pValue, ASN1T_CMS_KEKRecipientInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_KEKRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KEKRecipientInfo* pSrcValue, ASN1T_CMS_KEKRecipientInfo*
    pDstValue);

EXTERN void asn1Init_CMS_KEKRecipientInfo (ASN1T_CMS_KEKRecipientInfo* pvalue);

EXTERN void asn1Free_CMS_KEKRecipientInfo (OSCTXT *pctxt, 
   ASN1T_CMS_KEKRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PasswordRecipientInfo                                     */
/*                                                            */
/**************************************************************/
/*
PasswordRecipientInfo ::= SEQUENCE {
   version CMSVersion,
   keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier OPTIONAL,
   keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
   encryptedKey EncryptedKey
}
*/
#define TV_CMS_PasswordRecipientInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_PasswordRecipientInfo;

struct EXTERN ASN1T_CMS_PasswordRecipientInfo : public ASN1TPDU {
   struct {
      unsigned keyDerivationAlgorithmPresent : 1;
   } m;
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier keyDerivationAlgorithm;
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_CMS_EncryptedKey encryptedKey;
   ASN1T_CMS_PasswordRecipientInfo ();
   ASN1T_CMS_PasswordRecipientInfo (ASN1C_CMS_PasswordRecipientInfo& srcData);
   ~ASN1T_CMS_PasswordRecipientInfo ();
} ;

class EXTERN ASN1C_CMS_PasswordRecipientInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_PasswordRecipientInfo& msgData;
public:
   ASN1C_CMS_PasswordRecipientInfo (ASN1T_CMS_PasswordRecipientInfo& data);
   ASN1C_CMS_PasswordRecipientInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_PasswordRecipientInfo& data);
   ASN1C_CMS_PasswordRecipientInfo (OSRTContext &context
      , ASN1T_CMS_PasswordRecipientInfo& data);
   ASN1C_CMS_PasswordRecipientInfo (ASN1C_CMS_PasswordRecipientInfo& original);
   virtual ~ASN1C_CMS_PasswordRecipientInfo () {}
   inline ASN1T_CMS_PasswordRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMS_PasswordRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PasswordRecipientInfo");
   int toStream (const char* name = "PasswordRecipientInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_PasswordRecipientInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_PasswordRecipientInfo& getCopy (ASN1T_CMS_PasswordRecipientInfo* pDstData = 0);
   ASN1T_CMS_PasswordRecipientInfo* newCopy ();

   inline ASN1C_CMS_PasswordRecipientInfo& operator= (ASN1C_CMS_PasswordRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_PasswordRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_PasswordRecipientInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_PasswordRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_PasswordRecipientInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_PasswordRecipientInfo 
   (const char* name, const ASN1T_CMS_PasswordRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_PasswordRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_PasswordRecipientInfo* pvalue);

EXTERN ASN1T_CMS_PasswordRecipientInfo* 
   new_ASN1T_CMS_PasswordRecipientInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_PasswordRecipientInfo (const char* name, 
   ASN1T_CMS_PasswordRecipientInfo* pValue, 
   ASN1T_CMS_PasswordRecipientInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_PasswordRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_PasswordRecipientInfo* pSrcValue, ASN1T_CMS_PasswordRecipientInfo*
    pDstValue);

EXTERN void asn1Init_CMS_PasswordRecipientInfo (
   ASN1T_CMS_PasswordRecipientInfo* pvalue);

EXTERN void asn1Free_CMS_PasswordRecipientInfo (OSCTXT *pctxt, 
   ASN1T_CMS_PasswordRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRecipientInfo                                        */
/*                                                            */
/**************************************************************/
/*
OtherRecipientInfo ::= SEQUENCE {
   oriType OBJECT IDENTIFIER,
   oriValue ANY
}
*/
#define TV_CMS_OtherRecipientInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_OtherRecipientInfo;

struct EXTERN ASN1T_CMS_OtherRecipientInfo : public ASN1TPDU {
   ASN1TObjId oriType;
   ASN1TOpenType oriValue;
   ASN1T_CMS_OtherRecipientInfo ();
   ASN1T_CMS_OtherRecipientInfo (ASN1C_CMS_OtherRecipientInfo& srcData);
   ~ASN1T_CMS_OtherRecipientInfo ();
} ;

class EXTERN ASN1C_CMS_OtherRecipientInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_OtherRecipientInfo& msgData;
public:
   ASN1C_CMS_OtherRecipientInfo (ASN1T_CMS_OtherRecipientInfo& data);
   ASN1C_CMS_OtherRecipientInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_OtherRecipientInfo& data);
   ASN1C_CMS_OtherRecipientInfo (OSRTContext &context
      , ASN1T_CMS_OtherRecipientInfo& data);
   ASN1C_CMS_OtherRecipientInfo (ASN1C_CMS_OtherRecipientInfo& original);
   virtual ~ASN1C_CMS_OtherRecipientInfo () {}
   inline ASN1T_CMS_OtherRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMS_OtherRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OtherRecipientInfo");
   int toStream (const char* name = "OtherRecipientInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_OtherRecipientInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_OtherRecipientInfo& getCopy (ASN1T_CMS_OtherRecipientInfo* pDstData = 0);
   ASN1T_CMS_OtherRecipientInfo* newCopy ();

   inline ASN1C_CMS_OtherRecipientInfo& operator= (ASN1C_CMS_OtherRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_OtherRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_OtherRecipientInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_OtherRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_OtherRecipientInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_OtherRecipientInfo 
   (const char* name, const ASN1T_CMS_OtherRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_OtherRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OtherRecipientInfo* pvalue);

EXTERN ASN1T_CMS_OtherRecipientInfo* 
   new_ASN1T_CMS_OtherRecipientInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_OtherRecipientInfo (const char* name, 
   ASN1T_CMS_OtherRecipientInfo* pValue, 
   ASN1T_CMS_OtherRecipientInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_OtherRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_OtherRecipientInfo* pSrcValue, ASN1T_CMS_OtherRecipientInfo*
    pDstValue);

EXTERN void asn1Init_CMS_OtherRecipientInfo (ASN1T_CMS_OtherRecipientInfo* pvalue);

EXTERN void asn1Free_CMS_OtherRecipientInfo (OSCTXT *pctxt, 
   ASN1T_CMS_OtherRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientInfo                                             */
/*                                                            */
/**************************************************************/
/*
RecipientInfo ::= CHOICE {
   ktri KeyTransRecipientInfo,
   kari [1] KeyAgreeRecipientInfo,
   kekri [2] KEKRecipientInfo,
   pwri [3] PasswordRecipientInfo,
   ori [4] OtherRecipientInfo
}
*/
/* Choice context tags */

#define TVC_CMS_RecipientInfo_ktri	(TM_UNIV|TM_CONS|16)
#define TVC_CMS_RecipientInfo_kari	(TM_CTXT|TM_CONS|1)
#define TVC_CMS_RecipientInfo_kekri	(TM_CTXT|TM_CONS|2)
#define TVC_CMS_RecipientInfo_pwri	(TM_CTXT|TM_CONS|3)
#define TVC_CMS_RecipientInfo_ori	(TM_CTXT|TM_CONS|4)

/* Choice tag constants */

#define T_CMS_RecipientInfo_ktri        1
#define T_CMS_RecipientInfo_kari        2
#define T_CMS_RecipientInfo_kekri       3
#define T_CMS_RecipientInfo_pwri        4
#define T_CMS_RecipientInfo_ori         5

class EXTERN ASN1C_CMS_RecipientInfo;

struct EXTERN ASN1T_CMS_RecipientInfo : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_CMS_KeyTransRecipientInfo *ktri;
      /* t = 2 */
      ASN1T_CMS_KeyAgreeRecipientInfo *kari;
      /* t = 3 */
      ASN1T_CMS_KEKRecipientInfo *kekri;
      /* t = 4 */
      ASN1T_CMS_PasswordRecipientInfo *pwri;
      /* t = 5 */
      ASN1T_CMS_OtherRecipientInfo *ori;
   } u;
   ASN1T_CMS_RecipientInfo () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_RecipientInfo (ASN1C_CMS_RecipientInfo& srcData);
   ~ASN1T_CMS_RecipientInfo ();
} ;

class EXTERN ASN1C_CMS_RecipientInfo :
public ASN1CType
{
protected:
   ASN1T_CMS_RecipientInfo& msgData;
public:
   ASN1C_CMS_RecipientInfo (ASN1T_CMS_RecipientInfo& data);
   ASN1C_CMS_RecipientInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_RecipientInfo& data);
   ASN1C_CMS_RecipientInfo (OSRTContext &context, ASN1T_CMS_RecipientInfo& data
      );
   ASN1C_CMS_RecipientInfo (ASN1C_CMS_RecipientInfo& original);
   virtual ~ASN1C_CMS_RecipientInfo () {}
   inline ASN1T_CMS_RecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMS_RecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RecipientInfo");
   int toStream (const char* name = "RecipientInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_RecipientInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_RecipientInfo& getCopy (ASN1T_CMS_RecipientInfo* pDstData = 0);
   ASN1T_CMS_RecipientInfo* newCopy ();

   inline ASN1C_CMS_RecipientInfo& operator= (ASN1C_CMS_RecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_RecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_RecipientInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_RecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_RecipientInfo 
   (const char* name, const ASN1T_CMS_RecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMS_RecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientInfo* pvalue);

EXTERN ASN1T_CMS_RecipientInfo* new_ASN1T_CMS_RecipientInfo (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMS_RecipientInfo (const char* name, 
   ASN1T_CMS_RecipientInfo* pValue, ASN1T_CMS_RecipientInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_RecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientInfo* pSrcValue, ASN1T_CMS_RecipientInfo* pDstValue);

EXTERN void asn1Init_CMS_RecipientInfo (ASN1T_CMS_RecipientInfo* pvalue);

EXTERN void asn1Free_CMS_RecipientInfo (OSCTXT *pctxt, 
   ASN1T_CMS_RecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientInfos                                            */
/*                                                            */
/**************************************************************/
/*
RecipientInfos ::= SET (SIZE (1..MAX)) OF RecipientInfo
*/
#define TV_CMS_RecipientInfos	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_CMS_RecipientInfos;

/* List of ASN1T_CMS_RecipientInfo */
typedef struct EXTERN ASN1T_CMS_RecipientInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_RecipientInfos();
} ASN1T_CMS_RecipientInfos;

class EXTERN ASN1C_CMS_RecipientInfos :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_RecipientInfos& msgData;
public:
   ASN1C_CMS_RecipientInfos (ASN1T_CMS_RecipientInfos& data);
   ASN1C_CMS_RecipientInfos (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_RecipientInfos& data);
   ASN1C_CMS_RecipientInfos (ASN1CType& ccobj, ASN1T_CMS_RecipientInfos& data);
   ASN1C_CMS_RecipientInfos (OSRTContext &context
      , ASN1T_CMS_RecipientInfos& data);
   ASN1C_CMS_RecipientInfos (ASN1C_CMS_RecipientInfos& original);
   virtual ~ASN1C_CMS_RecipientInfos () {}
   inline ASN1T_CMS_RecipientInfos& getData () { return msgData; }
   inline const ASN1T_CMS_RecipientInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RecipientInfos");
   int toStream (const char* name = "RecipientInfos");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_RecipientInfos* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_RecipientInfos& getCopy (ASN1T_CMS_RecipientInfos* pDstData = 0);
   ASN1T_CMS_RecipientInfos* newCopy ();

   ASN1C_CMS_RecipientInfos& operator= (ASN1C_CMS_RecipientInfos& srcData);
   void Append (ASN1T_CMS_RecipientInfo* elem);
   ASN1T_CMS_RecipientInfo* NewElement ();
   ASN1T_CMS_RecipientInfo* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_RecipientInfos (OSCTXT* pctxt,
   ASN1T_CMS_RecipientInfos *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_RecipientInfos (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientInfos* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_RecipientInfos 
   (const char* name, const ASN1T_CMS_RecipientInfos* pvalue);

EXTERN int asn1PrtToStrm_CMS_RecipientInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientInfos* pvalue);

EXTERN OSBOOL asn1Compare_CMS_RecipientInfos (const char* name, 
   ASN1T_CMS_RecipientInfos* pValue, ASN1T_CMS_RecipientInfos* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_RecipientInfos (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientInfos* pSrcValue, ASN1T_CMS_RecipientInfos* pDstValue);

EXTERN void asn1Init_CMS_RecipientInfos (ASN1T_CMS_RecipientInfos* pvalue);

EXTERN void asn1Free_CMS_RecipientInfos (OSCTXT *pctxt, 
   ASN1T_CMS_RecipientInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  UnprotectedAttributes                                     */
/*                                                            */
/**************************************************************/
/*
UnprotectedAttributes ::= SET (SIZE (1..MAX)) OF Attribute
*/
#define TV_CMS_UnprotectedAttributes	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_CMS_UnprotectedAttributes;

/* List of ASN1T_EXP_Attribute */
typedef struct EXTERN ASN1T_CMS_UnprotectedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_UnprotectedAttributes();
} ASN1T_CMS_UnprotectedAttributes;

class EXTERN ASN1C_CMS_UnprotectedAttributes :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_UnprotectedAttributes& msgData;
public:
   ASN1C_CMS_UnprotectedAttributes (ASN1T_CMS_UnprotectedAttributes& data);
   ASN1C_CMS_UnprotectedAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_UnprotectedAttributes& data);
   ASN1C_CMS_UnprotectedAttributes (ASN1CType& ccobj
      , ASN1T_CMS_UnprotectedAttributes& data);
   ASN1C_CMS_UnprotectedAttributes (OSRTContext &context
      , ASN1T_CMS_UnprotectedAttributes& data);
   ASN1C_CMS_UnprotectedAttributes (ASN1C_CMS_UnprotectedAttributes& original);
   virtual ~ASN1C_CMS_UnprotectedAttributes () {}
   inline ASN1T_CMS_UnprotectedAttributes& getData () { return msgData; }
   inline const ASN1T_CMS_UnprotectedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UnprotectedAttributes");
   int toStream (const char* name = "UnprotectedAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_UnprotectedAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_UnprotectedAttributes& getCopy (ASN1T_CMS_UnprotectedAttributes* pDstData = 0);
   ASN1T_CMS_UnprotectedAttributes* newCopy ();

   ASN1C_CMS_UnprotectedAttributes& operator= (ASN1C_CMS_UnprotectedAttributes& srcData);
   void Append (ASN1T_EXP_Attribute* elem);
   ASN1T_EXP_Attribute* NewElement ();
   ASN1T_EXP_Attribute* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_UnprotectedAttributes (OSCTXT* pctxt,
   ASN1T_CMS_UnprotectedAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_UnprotectedAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnprotectedAttributes* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_UnprotectedAttributes 
   (const char* name, const ASN1T_CMS_UnprotectedAttributes* pvalue);

EXTERN int asn1PrtToStrm_CMS_UnprotectedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_UnprotectedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_CMS_UnprotectedAttributes (const char* name, 
   ASN1T_CMS_UnprotectedAttributes* pValue, 
   ASN1T_CMS_UnprotectedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_UnprotectedAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnprotectedAttributes* pSrcValue, ASN1T_CMS_UnprotectedAttributes*
    pDstValue);

EXTERN void asn1Init_CMS_UnprotectedAttributes (
   ASN1T_CMS_UnprotectedAttributes* pvalue);

EXTERN void asn1Free_CMS_UnprotectedAttributes (OSCTXT *pctxt, 
   ASN1T_CMS_UnprotectedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  EnvelopedData                                             */
/*                                                            */
/**************************************************************/
/*
EnvelopedData ::= SEQUENCE {
   version CMSVersion,
   originatorInfo [0] OriginatorInfo OPTIONAL,
   recipientInfos RecipientInfos,
   encryptedContentInfo EncryptedContentInfo,
   unprotectedAttrs [1] UnprotectedAttributes OPTIONAL
}
*/
#define TV_CMS_EnvelopedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_EnvelopedData;

struct EXTERN ASN1T_CMS_EnvelopedData : public ASN1TPDU {
   struct {
      unsigned originatorInfoPresent : 1;
      unsigned unprotectedAttrsPresent : 1;
   } m;
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_OriginatorInfo originatorInfo;
   ASN1T_CMS_RecipientInfos recipientInfos;
   ASN1T_PKCS7_EncryptedContentInfo encryptedContentInfo;
   ASN1T_CMS_UnprotectedAttributes unprotectedAttrs;
   ASN1T_CMS_EnvelopedData ();
   ASN1T_CMS_EnvelopedData (ASN1C_CMS_EnvelopedData& srcData);
   ~ASN1T_CMS_EnvelopedData ();
} ;

class EXTERN ASN1C_CMS_EnvelopedData :
public ASN1CType
{
protected:
   ASN1T_CMS_EnvelopedData& msgData;
public:
   ASN1C_CMS_EnvelopedData (ASN1T_CMS_EnvelopedData& data);
   ASN1C_CMS_EnvelopedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_EnvelopedData& data);
   ASN1C_CMS_EnvelopedData (OSRTContext &context, ASN1T_CMS_EnvelopedData& data
      );
   ASN1C_CMS_EnvelopedData (ASN1C_CMS_EnvelopedData& original);
   virtual ~ASN1C_CMS_EnvelopedData () {}
   inline ASN1T_CMS_EnvelopedData& getData () { return msgData; }
   inline const ASN1T_CMS_EnvelopedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EnvelopedData");
   int toStream (const char* name = "EnvelopedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_EnvelopedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_EnvelopedData& getCopy (ASN1T_CMS_EnvelopedData* pDstData = 0);
   ASN1T_CMS_EnvelopedData* newCopy ();

   inline ASN1C_CMS_EnvelopedData& operator= (ASN1C_CMS_EnvelopedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_EnvelopedData (OSCTXT* pctxt,
   ASN1T_CMS_EnvelopedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_EnvelopedData (OSCTXT* pctxt, 
   ASN1T_CMS_EnvelopedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_EnvelopedData 
   (const char* name, const ASN1T_CMS_EnvelopedData* pvalue);

EXTERN int asn1PrtToStrm_CMS_EnvelopedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_EnvelopedData* pvalue);

EXTERN ASN1T_CMS_EnvelopedData* new_ASN1T_CMS_EnvelopedData (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMS_EnvelopedData (const char* name, 
   ASN1T_CMS_EnvelopedData* pValue, ASN1T_CMS_EnvelopedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_EnvelopedData (OSCTXT* pctxt, 
   ASN1T_CMS_EnvelopedData* pSrcValue, ASN1T_CMS_EnvelopedData* pDstValue);

EXTERN void asn1Init_CMS_EnvelopedData (ASN1T_CMS_EnvelopedData* pvalue);

EXTERN void asn1Free_CMS_EnvelopedData (OSCTXT *pctxt, 
   ASN1T_CMS_EnvelopedData* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestedData                                              */
/*                                                            */
/**************************************************************/
/*
DigestedData ::= SEQUENCE {
   version CMSVersion,
   digestAlgorithm DigestAlgorithmIdentifier,
   encapContentInfo EncapsulatedContentInfo,
   digest Digest
}
*/
#define TV_CMS_DigestedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_DigestedData;

struct EXTERN ASN1T_CMS_DigestedData : public ASN1TPDU {
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_CMS_EncapsulatedContentInfo encapContentInfo;
   ASN1T_CMS_Digest digest;
   ASN1T_CMS_DigestedData ();
   ASN1T_CMS_DigestedData (ASN1C_CMS_DigestedData& srcData);
   ~ASN1T_CMS_DigestedData ();
} ;

class EXTERN ASN1C_CMS_DigestedData :
public ASN1CType
{
protected:
   ASN1T_CMS_DigestedData& msgData;
public:
   ASN1C_CMS_DigestedData (ASN1T_CMS_DigestedData& data);
   ASN1C_CMS_DigestedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_DigestedData& data);
   ASN1C_CMS_DigestedData (OSRTContext &context, ASN1T_CMS_DigestedData& data);
   ASN1C_CMS_DigestedData (ASN1C_CMS_DigestedData& original);
   virtual ~ASN1C_CMS_DigestedData () {}
   inline ASN1T_CMS_DigestedData& getData () { return msgData; }
   inline const ASN1T_CMS_DigestedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DigestedData");
   int toStream (const char* name = "DigestedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_DigestedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_DigestedData& getCopy (ASN1T_CMS_DigestedData* pDstData = 0);
   ASN1T_CMS_DigestedData* newCopy ();

   inline ASN1C_CMS_DigestedData& operator= (ASN1C_CMS_DigestedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_DigestedData (OSCTXT* pctxt,
   ASN1T_CMS_DigestedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_DigestedData (OSCTXT* pctxt, 
   ASN1T_CMS_DigestedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_DigestedData 
   (const char* name, const ASN1T_CMS_DigestedData* pvalue);

EXTERN int asn1PrtToStrm_CMS_DigestedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_DigestedData* pvalue);

EXTERN ASN1T_CMS_DigestedData* new_ASN1T_CMS_DigestedData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_DigestedData (const char* name, 
   ASN1T_CMS_DigestedData* pValue, ASN1T_CMS_DigestedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_DigestedData (OSCTXT* pctxt, 
   ASN1T_CMS_DigestedData* pSrcValue, ASN1T_CMS_DigestedData* pDstValue);

EXTERN void asn1Init_CMS_DigestedData (ASN1T_CMS_DigestedData* pvalue);

EXTERN void asn1Free_CMS_DigestedData (OSCTXT *pctxt, ASN1T_CMS_DigestedData* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedData                                             */
/*                                                            */
/**************************************************************/
/*
EncryptedData ::= SEQUENCE {
   version CMSVersion,
   encryptedContentInfo EncryptedContentInfo,
   unprotectedAttrs [1] UnprotectedAttributes OPTIONAL
}
*/
#define TV_CMS_EncryptedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_EncryptedData;

struct EXTERN ASN1T_CMS_EncryptedData : public ASN1TPDU {
   struct {
      unsigned unprotectedAttrsPresent : 1;
   } m;
   ASN1T_CMS_CMSVersion version;
   ASN1T_PKCS7_EncryptedContentInfo encryptedContentInfo;
   ASN1T_CMS_UnprotectedAttributes unprotectedAttrs;
   ASN1T_CMS_EncryptedData ();
   ASN1T_CMS_EncryptedData (ASN1C_CMS_EncryptedData& srcData);
   ~ASN1T_CMS_EncryptedData ();
} ;

class EXTERN ASN1C_CMS_EncryptedData :
public ASN1CType
{
protected:
   ASN1T_CMS_EncryptedData& msgData;
public:
   ASN1C_CMS_EncryptedData (ASN1T_CMS_EncryptedData& data);
   ASN1C_CMS_EncryptedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_EncryptedData& data);
   ASN1C_CMS_EncryptedData (OSRTContext &context, ASN1T_CMS_EncryptedData& data
      );
   ASN1C_CMS_EncryptedData (ASN1C_CMS_EncryptedData& original);
   virtual ~ASN1C_CMS_EncryptedData () {}
   inline ASN1T_CMS_EncryptedData& getData () { return msgData; }
   inline const ASN1T_CMS_EncryptedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedData");
   int toStream (const char* name = "EncryptedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_EncryptedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_EncryptedData& getCopy (ASN1T_CMS_EncryptedData* pDstData = 0);
   ASN1T_CMS_EncryptedData* newCopy ();

   inline ASN1C_CMS_EncryptedData& operator= (ASN1C_CMS_EncryptedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_EncryptedData (OSCTXT* pctxt,
   ASN1T_CMS_EncryptedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_EncryptedData (OSCTXT* pctxt, 
   ASN1T_CMS_EncryptedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_EncryptedData 
   (const char* name, const ASN1T_CMS_EncryptedData* pvalue);

EXTERN int asn1PrtToStrm_CMS_EncryptedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_EncryptedData* pvalue);

EXTERN ASN1T_CMS_EncryptedData* new_ASN1T_CMS_EncryptedData (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CMS_EncryptedData (const char* name, 
   ASN1T_CMS_EncryptedData* pValue, ASN1T_CMS_EncryptedData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_EncryptedData (OSCTXT* pctxt, 
   ASN1T_CMS_EncryptedData* pSrcValue, ASN1T_CMS_EncryptedData* pDstValue);

EXTERN void asn1Init_CMS_EncryptedData (ASN1T_CMS_EncryptedData* pvalue);

EXTERN void asn1Free_CMS_EncryptedData (OSCTXT *pctxt, 
   ASN1T_CMS_EncryptedData* pvalue);

/**************************************************************/
/*                                                            */
/*  AuthenticatedData                                         */
/*                                                            */
/**************************************************************/
/*
AuthenticatedData ::= SEQUENCE {
   version CMSVersion,
   originatorInfo [0] OriginatorInfo OPTIONAL,
   recipientInfos RecipientInfos,
   macAlgorithm MessageAuthenticationCodeAlgorithm,
   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
   encapContentInfo EncapsulatedContentInfo,
   authAttrs [2] AuthAttributes OPTIONAL,
   mac MessageAuthenticationCode,
   unauthAttrs [3] UnauthAttributes OPTIONAL
}
*/
#define TV_CMS_AuthenticatedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_AuthenticatedData;

struct EXTERN ASN1T_CMS_AuthenticatedData : public ASN1TPDU {
   struct {
      unsigned originatorInfoPresent : 1;
      unsigned digestAlgorithmPresent : 1;
      unsigned authAttrsPresent : 1;
      unsigned unauthAttrsPresent : 1;
   } m;
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_OriginatorInfo originatorInfo;
   ASN1T_CMS_RecipientInfos recipientInfos;
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm macAlgorithm;
   ASN1T_CMS_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_CMS_EncapsulatedContentInfo encapContentInfo;
   ASN1T_DERCMS_AuthAttributes authAttrs;
   ASN1T_CMS_MessageAuthenticationCode mac;
   ASN1T_CMS_UnauthAttributes unauthAttrs;
   ASN1T_CMS_AuthenticatedData ();
   ASN1T_CMS_AuthenticatedData (ASN1C_CMS_AuthenticatedData& srcData);
   ~ASN1T_CMS_AuthenticatedData ();
} ;

class EXTERN ASN1C_CMS_AuthenticatedData :
public ASN1CType
{
protected:
   ASN1T_CMS_AuthenticatedData& msgData;
public:
   ASN1C_CMS_AuthenticatedData (ASN1T_CMS_AuthenticatedData& data);
   ASN1C_CMS_AuthenticatedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_AuthenticatedData& data);
   ASN1C_CMS_AuthenticatedData (OSRTContext &context
      , ASN1T_CMS_AuthenticatedData& data);
   ASN1C_CMS_AuthenticatedData (ASN1C_CMS_AuthenticatedData& original);
   virtual ~ASN1C_CMS_AuthenticatedData () {}
   inline ASN1T_CMS_AuthenticatedData& getData () { return msgData; }
   inline const ASN1T_CMS_AuthenticatedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AuthenticatedData");
   int toStream (const char* name = "AuthenticatedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_AuthenticatedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_AuthenticatedData& getCopy (ASN1T_CMS_AuthenticatedData* pDstData = 0);
   ASN1T_CMS_AuthenticatedData* newCopy ();

   inline ASN1C_CMS_AuthenticatedData& operator= (ASN1C_CMS_AuthenticatedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_AuthenticatedData (OSCTXT* pctxt,
   ASN1T_CMS_AuthenticatedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_AuthenticatedData (OSCTXT* pctxt, 
   ASN1T_CMS_AuthenticatedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_AuthenticatedData 
   (const char* name, const ASN1T_CMS_AuthenticatedData* pvalue);

EXTERN int asn1PrtToStrm_CMS_AuthenticatedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_AuthenticatedData* pvalue);

EXTERN ASN1T_CMS_AuthenticatedData* 
   new_ASN1T_CMS_AuthenticatedData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_AuthenticatedData (const char* name, 
   ASN1T_CMS_AuthenticatedData* pValue, 
   ASN1T_CMS_AuthenticatedData* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_AuthenticatedData (OSCTXT* pctxt, 
   ASN1T_CMS_AuthenticatedData* pSrcValue, ASN1T_CMS_AuthenticatedData*
    pDstValue);

EXTERN void asn1Init_CMS_AuthenticatedData (ASN1T_CMS_AuthenticatedData* pvalue);

EXTERN void asn1Free_CMS_AuthenticatedData (OSCTXT *pctxt, 
   ASN1T_CMS_AuthenticatedData* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificateOrCertificate                          */
/*                                                            */
/**************************************************************/
/*
 Obsolete Extended Certificate syntax from PKCS#6

ExtendedCertificateOrCertificate ::= CHOICE {
   certificate Certificate,
   extendedCertificate [0] ExtendedCertificate
}
*/
/* Choice context tags */

#define TVC_CMS_ExtendedCertificateOrCertificate_certificate	(TM_UNIV|TM_CONS|16)
#define TVC_CMS_ExtendedCertificateOrCertificate_extendedCertificate	(TM_CTXT|TM_CONS|0)

/* Choice tag constants */

#define T_CMS_ExtendedCertificateOrCertificate_certificate 1
#define T_CMS_ExtendedCertificateOrCertificate_extendedCertificate 2

class EXTERN ASN1C_CMS_ExtendedCertificateOrCertificate;

struct EXTERN ASN1T_CMS_ExtendedCertificateOrCertificate : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_EXP_Certificate *certificate;
      /* t = 2 */
      ASN1T_CMS_ExtendedCertificate *extendedCertificate;
   } u;
   ASN1T_CMS_ExtendedCertificateOrCertificate () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_ExtendedCertificateOrCertificate (ASN1C_CMS_ExtendedCertificateOrCertificate& srcData);
   ~ASN1T_CMS_ExtendedCertificateOrCertificate ();
} ;

class EXTERN ASN1C_CMS_ExtendedCertificateOrCertificate :
public ASN1CType
{
protected:
   ASN1T_CMS_ExtendedCertificateOrCertificate& msgData;
public:
   ASN1C_CMS_ExtendedCertificateOrCertificate
       (ASN1T_CMS_ExtendedCertificateOrCertificate& data);
   ASN1C_CMS_ExtendedCertificateOrCertificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_ExtendedCertificateOrCertificate& data);
   ASN1C_CMS_ExtendedCertificateOrCertificate (OSRTContext &context
      , ASN1T_CMS_ExtendedCertificateOrCertificate& data);
   ASN1C_CMS_ExtendedCertificateOrCertificate (ASN1C_CMS_ExtendedCertificateOrCertificate& original);
   virtual ~ASN1C_CMS_ExtendedCertificateOrCertificate () {}
   inline ASN1T_CMS_ExtendedCertificateOrCertificate& getData () { return msgData; }
   inline const ASN1T_CMS_ExtendedCertificateOrCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtendedCertificateOrCertificate");
   int toStream (const char* name = "ExtendedCertificateOrCertificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_ExtendedCertificateOrCertificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_ExtendedCertificateOrCertificate& getCopy (ASN1T_CMS_ExtendedCertificateOrCertificate* pDstData = 0);
   ASN1T_CMS_ExtendedCertificateOrCertificate* newCopy ();

   inline ASN1C_CMS_ExtendedCertificateOrCertificate& operator= (ASN1C_CMS_ExtendedCertificateOrCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_ExtendedCertificateOrCertificate (OSCTXT* pctxt,
   ASN1T_CMS_ExtendedCertificateOrCertificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_ExtendedCertificateOrCertificate (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_ExtendedCertificateOrCertificate 
   (const char* name, const ASN1T_CMS_ExtendedCertificateOrCertificate* pvalue);

EXTERN int asn1PrtToStrm_CMS_ExtendedCertificateOrCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ExtendedCertificateOrCertificate* pvalue);

EXTERN ASN1T_CMS_ExtendedCertificateOrCertificate* 
   new_ASN1T_CMS_ExtendedCertificateOrCertificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_ExtendedCertificateOrCertificate (const char* name, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pValue, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_ExtendedCertificateOrCertificate (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pSrcValue, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pDstValue);

EXTERN void asn1Init_CMS_ExtendedCertificateOrCertificate (
   ASN1T_CMS_ExtendedCertificateOrCertificate* pvalue);

EXTERN void asn1Free_CMS_ExtendedCertificateOrCertificate (OSCTXT *pctxt, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  SMIMECapability                                           */
/*                                                            */
/**************************************************************/
/*
SMIMECapability ::= SEQUENCE {
   capabilityID OBJECT IDENTIFIER,
   parameters ANY OPTIONAL
}
*/
#define TV_CMS_SMIMECapability	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_SMIMECapability;

struct EXTERN ASN1T_CMS_SMIMECapability : public ASN1TPDU {
   struct {
      unsigned parametersPresent : 1;
   } m;
   ASN1TObjId capabilityID;
   ASN1TOpenType parameters;
   ASN1T_CMS_SMIMECapability ();
   ASN1T_CMS_SMIMECapability (ASN1C_CMS_SMIMECapability& srcData);
   ~ASN1T_CMS_SMIMECapability ();
} ;

class EXTERN ASN1C_CMS_SMIMECapability :
public ASN1CType
{
protected:
   ASN1T_CMS_SMIMECapability& msgData;
public:
   ASN1C_CMS_SMIMECapability (ASN1T_CMS_SMIMECapability& data);
   ASN1C_CMS_SMIMECapability (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SMIMECapability& data);
   ASN1C_CMS_SMIMECapability (OSRTContext &context
      , ASN1T_CMS_SMIMECapability& data);
   ASN1C_CMS_SMIMECapability (ASN1C_CMS_SMIMECapability& original);
   virtual ~ASN1C_CMS_SMIMECapability () {}
   inline ASN1T_CMS_SMIMECapability& getData () { return msgData; }
   inline const ASN1T_CMS_SMIMECapability& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SMIMECapability");
   int toStream (const char* name = "SMIMECapability");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SMIMECapability* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SMIMECapability& getCopy (ASN1T_CMS_SMIMECapability* pDstData = 0);
   ASN1T_CMS_SMIMECapability* newCopy ();

   inline ASN1C_CMS_SMIMECapability& operator= (ASN1C_CMS_SMIMECapability& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_SMIMECapability (OSCTXT* pctxt,
   ASN1T_CMS_SMIMECapability *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SMIMECapability (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMECapability* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_SMIMECapability 
   (const char* name, const ASN1T_CMS_SMIMECapability* pvalue);

EXTERN int asn1PrtToStrm_CMS_SMIMECapability (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SMIMECapability* pvalue);

EXTERN ASN1T_CMS_SMIMECapability* 
   new_ASN1T_CMS_SMIMECapability (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_SMIMECapability (const char* name, 
   ASN1T_CMS_SMIMECapability* pValue, ASN1T_CMS_SMIMECapability* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SMIMECapability (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMECapability* pSrcValue, ASN1T_CMS_SMIMECapability* pDstValue);

EXTERN void asn1Init_CMS_SMIMECapability (ASN1T_CMS_SMIMECapability* pvalue);

EXTERN void asn1Free_CMS_SMIMECapability (OSCTXT *pctxt, 
   ASN1T_CMS_SMIMECapability* pvalue);

/**************************************************************/
/*                                                            */
/*  SMIMECapabilities                                         */
/*                                                            */
/**************************************************************/
/*
SMIMECapabilities ::= SEQUENCE OF SMIMECapability
*/
#define TV_CMS_SMIMECapabilities	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_SMIMECapabilities;

/* List of ASN1T_CMS_SMIMECapability */
typedef struct EXTERN ASN1T_CMS_SMIMECapabilities : public ASN1TPDUSeqOfList {
   ~ASN1T_CMS_SMIMECapabilities();
} ASN1T_CMS_SMIMECapabilities;

class EXTERN ASN1C_CMS_SMIMECapabilities :
public ASN1CSeqOfList
{
protected:
   ASN1T_CMS_SMIMECapabilities& msgData;
public:
   ASN1C_CMS_SMIMECapabilities (ASN1T_CMS_SMIMECapabilities& data);
   ASN1C_CMS_SMIMECapabilities (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SMIMECapabilities& data);
   ASN1C_CMS_SMIMECapabilities (ASN1CType& ccobj
      , ASN1T_CMS_SMIMECapabilities& data);
   ASN1C_CMS_SMIMECapabilities (OSRTContext &context
      , ASN1T_CMS_SMIMECapabilities& data);
   ASN1C_CMS_SMIMECapabilities (ASN1C_CMS_SMIMECapabilities& original);
   virtual ~ASN1C_CMS_SMIMECapabilities () {}
   inline ASN1T_CMS_SMIMECapabilities& getData () { return msgData; }
   inline const ASN1T_CMS_SMIMECapabilities& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SMIMECapabilities");
   int toStream (const char* name = "SMIMECapabilities");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SMIMECapabilities* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SMIMECapabilities& getCopy (ASN1T_CMS_SMIMECapabilities* pDstData = 0);
   ASN1T_CMS_SMIMECapabilities* newCopy ();

   ASN1C_CMS_SMIMECapabilities& operator= (ASN1C_CMS_SMIMECapabilities& srcData);
   void Append (ASN1T_CMS_SMIMECapability* elem);
   ASN1T_CMS_SMIMECapability* NewElement ();
   ASN1T_CMS_SMIMECapability* AppendNewElement ();
} ;

EXTERN int asn1E_CMS_SMIMECapabilities (OSCTXT* pctxt,
   ASN1T_CMS_SMIMECapabilities *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SMIMECapabilities (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMECapabilities* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_SMIMECapabilities 
   (const char* name, const ASN1T_CMS_SMIMECapabilities* pvalue);

EXTERN int asn1PrtToStrm_CMS_SMIMECapabilities (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SMIMECapabilities* pvalue);

EXTERN OSBOOL asn1Compare_CMS_SMIMECapabilities (const char* name, 
   ASN1T_CMS_SMIMECapabilities* pValue, 
   ASN1T_CMS_SMIMECapabilities* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SMIMECapabilities (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMECapabilities* pSrcValue, ASN1T_CMS_SMIMECapabilities*
    pDstValue);

EXTERN void asn1Init_CMS_SMIMECapabilities (ASN1T_CMS_SMIMECapabilities* pvalue);

EXTERN void asn1Free_CMS_SMIMECapabilities (OSCTXT *pctxt, 
   ASN1T_CMS_SMIMECapabilities* pvalue);

/**************************************************************/
/*                                                            */
/*  SMIMEEncryptionKeyPreference                              */
/*                                                            */
/**************************************************************/
/*
SMIMEEncryptionKeyPreference ::= CHOICE {
   issuerAndSerialNumber [0] IssuerAndSerialNumber,
   receipentKeyId [1] RecipientKeyIdentifier,
   subjectAltKeyIdentifier [2] SubjectKeyIdentifier
}
*/
/* Choice context tags */

#define TVC_CMS_SMIMEEncryptionKeyPreference_issuerAndSerialNumber	(TM_CTXT|TM_CONS|0)
#define TVC_CMS_SMIMEEncryptionKeyPreference_receipentKeyId	(TM_CTXT|TM_CONS|1)
#define TVC_CMS_SMIMEEncryptionKeyPreference_subjectAltKeyIdentifier	(TM_CTXT|TM_PRIM|2)

/* Choice tag constants */

#define T_CMS_SMIMEEncryptionKeyPreference_issuerAndSerialNumber 1
#define T_CMS_SMIMEEncryptionKeyPreference_receipentKeyId 2
#define T_CMS_SMIMEEncryptionKeyPreference_subjectAltKeyIdentifier 3

class EXTERN ASN1C_CMS_SMIMEEncryptionKeyPreference;

struct EXTERN ASN1T_CMS_SMIMEEncryptionKeyPreference : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_PKCS7_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMS_RecipientKeyIdentifier *receipentKeyId;
      /* t = 3 */
      ASN1T_CMS_SubjectKeyIdentifier *subjectAltKeyIdentifier;
   } u;
   ASN1T_CMS_SMIMEEncryptionKeyPreference () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CMS_SMIMEEncryptionKeyPreference (ASN1C_CMS_SMIMEEncryptionKeyPreference& srcData);
   ~ASN1T_CMS_SMIMEEncryptionKeyPreference ();
} ;

class EXTERN ASN1C_CMS_SMIMEEncryptionKeyPreference :
public ASN1CType
{
protected:
   ASN1T_CMS_SMIMEEncryptionKeyPreference& msgData;
public:
   ASN1C_CMS_SMIMEEncryptionKeyPreference
       (ASN1T_CMS_SMIMEEncryptionKeyPreference& data);
   ASN1C_CMS_SMIMEEncryptionKeyPreference (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_SMIMEEncryptionKeyPreference& data);
   ASN1C_CMS_SMIMEEncryptionKeyPreference (OSRTContext &context
      , ASN1T_CMS_SMIMEEncryptionKeyPreference& data);
   ASN1C_CMS_SMIMEEncryptionKeyPreference (ASN1C_CMS_SMIMEEncryptionKeyPreference& original);
   virtual ~ASN1C_CMS_SMIMEEncryptionKeyPreference () {}
   inline ASN1T_CMS_SMIMEEncryptionKeyPreference& getData () { return msgData; }
   inline const ASN1T_CMS_SMIMEEncryptionKeyPreference& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SMIMEEncryptionKeyPreference");
   int toStream (const char* name = "SMIMEEncryptionKeyPreference");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_SMIMEEncryptionKeyPreference* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_SMIMEEncryptionKeyPreference& getCopy (ASN1T_CMS_SMIMEEncryptionKeyPreference* pDstData = 0);
   ASN1T_CMS_SMIMEEncryptionKeyPreference* newCopy ();

   inline ASN1C_CMS_SMIMEEncryptionKeyPreference& operator= (ASN1C_CMS_SMIMEEncryptionKeyPreference& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_SMIMEEncryptionKeyPreference (OSCTXT* pctxt,
   ASN1T_CMS_SMIMEEncryptionKeyPreference *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_SMIMEEncryptionKeyPreference (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CMS_SMIMEEncryptionKeyPreference 
   (const char* name, const ASN1T_CMS_SMIMEEncryptionKeyPreference* pvalue);

EXTERN int asn1PrtToStrm_CMS_SMIMEEncryptionKeyPreference (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SMIMEEncryptionKeyPreference* pvalue);

EXTERN ASN1T_CMS_SMIMEEncryptionKeyPreference* 
   new_ASN1T_CMS_SMIMEEncryptionKeyPreference (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_SMIMEEncryptionKeyPreference (const char* name, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pValue, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_SMIMEEncryptionKeyPreference (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pSrcValue, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pDstValue);

EXTERN void asn1Init_CMS_SMIMEEncryptionKeyPreference (
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pvalue);

EXTERN void asn1Free_CMS_SMIMEEncryptionKeyPreference (OSCTXT *pctxt, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pvalue);

/**************************************************************/
/*                                                            */
/*  MQVuserKeyingMaterial                                     */
/*                                                            */
/**************************************************************/
/*
MQVuserKeyingMaterial ::= SEQUENCE {
   ephemeralPublicKey OriginatorPublicKey,
   addedukm [0] EXPLICIT UserKeyingMaterial OPTIONAL
}
*/
#define TV_CMS_MQVuserKeyingMaterial	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_MQVuserKeyingMaterial;

struct EXTERN ASN1T_CMS_MQVuserKeyingMaterial : public ASN1TPDU {
   struct {
      unsigned addedukmPresent : 1;
   } m;
   ASN1T_CMS_OriginatorPublicKey ephemeralPublicKey;
   ASN1T_CMS_UserKeyingMaterial addedukm;
   ASN1T_CMS_MQVuserKeyingMaterial ();
   ASN1T_CMS_MQVuserKeyingMaterial (ASN1C_CMS_MQVuserKeyingMaterial& srcData);
   ~ASN1T_CMS_MQVuserKeyingMaterial ();
} ;

class EXTERN ASN1C_CMS_MQVuserKeyingMaterial :
public ASN1CType
{
protected:
   ASN1T_CMS_MQVuserKeyingMaterial& msgData;
public:
   ASN1C_CMS_MQVuserKeyingMaterial (ASN1T_CMS_MQVuserKeyingMaterial& data);
   ASN1C_CMS_MQVuserKeyingMaterial (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_MQVuserKeyingMaterial& data);
   ASN1C_CMS_MQVuserKeyingMaterial (OSRTContext &context
      , ASN1T_CMS_MQVuserKeyingMaterial& data);
   ASN1C_CMS_MQVuserKeyingMaterial (ASN1C_CMS_MQVuserKeyingMaterial& original);
   virtual ~ASN1C_CMS_MQVuserKeyingMaterial () {}
   inline ASN1T_CMS_MQVuserKeyingMaterial& getData () { return msgData; }
   inline const ASN1T_CMS_MQVuserKeyingMaterial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "MQVuserKeyingMaterial");
   int toStream (const char* name = "MQVuserKeyingMaterial");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_MQVuserKeyingMaterial* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_MQVuserKeyingMaterial& getCopy (ASN1T_CMS_MQVuserKeyingMaterial* pDstData = 0);
   ASN1T_CMS_MQVuserKeyingMaterial* newCopy ();

   inline ASN1C_CMS_MQVuserKeyingMaterial& operator= (ASN1C_CMS_MQVuserKeyingMaterial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_MQVuserKeyingMaterial (OSCTXT* pctxt,
   ASN1T_CMS_MQVuserKeyingMaterial *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_MQVuserKeyingMaterial (OSCTXT* pctxt, 
   ASN1T_CMS_MQVuserKeyingMaterial* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_MQVuserKeyingMaterial 
   (const char* name, const ASN1T_CMS_MQVuserKeyingMaterial* pvalue);

EXTERN int asn1PrtToStrm_CMS_MQVuserKeyingMaterial (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_MQVuserKeyingMaterial* pvalue);

EXTERN ASN1T_CMS_MQVuserKeyingMaterial* 
   new_ASN1T_CMS_MQVuserKeyingMaterial (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_MQVuserKeyingMaterial (const char* name, 
   ASN1T_CMS_MQVuserKeyingMaterial* pValue, 
   ASN1T_CMS_MQVuserKeyingMaterial* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_MQVuserKeyingMaterial (OSCTXT* pctxt, 
   ASN1T_CMS_MQVuserKeyingMaterial* pSrcValue, ASN1T_CMS_MQVuserKeyingMaterial*
    pDstValue);

EXTERN void asn1Init_CMS_MQVuserKeyingMaterial (
   ASN1T_CMS_MQVuserKeyingMaterial* pvalue);

EXTERN void asn1Free_CMS_MQVuserKeyingMaterial (OSCTXT *pctxt, 
   ASN1T_CMS_MQVuserKeyingMaterial* pvalue);

/**************************************************************/
/*                                                            */
/*  AuthEnvelopedData                                         */
/*                                                            */
/**************************************************************/
/*
AuthEnvelopedData ::= SEQUENCE {
   version CMSVersion,
   originatorInfo [0] OriginatorInfo OPTIONAL,
   recipientInfos RecipientInfos,
   authEncryptedContentInfo EncryptedContentInfo,
   authAttrs [1] AuthAttributes OPTIONAL,
   mac MessageAuthenticationCode,
   unauthAttrs [2] UnauthAttributes OPTIONAL
}
*/
#define TV_CMS_AuthEnvelopedData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CMS_AuthEnvelopedData;

struct EXTERN ASN1T_CMS_AuthEnvelopedData : public ASN1TPDU {
   struct {
      unsigned originatorInfoPresent : 1;
      unsigned authAttrsPresent : 1;
      unsigned unauthAttrsPresent : 1;
   } m;
   ASN1T_CMS_CMSVersion version;
   ASN1T_CMS_OriginatorInfo originatorInfo;
   ASN1T_CMS_RecipientInfos recipientInfos;
   ASN1T_PKCS7_EncryptedContentInfo authEncryptedContentInfo;
   ASN1T_DERCMS_AuthAttributes authAttrs;
   ASN1T_CMS_MessageAuthenticationCode mac;
   ASN1T_CMS_UnauthAttributes unauthAttrs;
   ASN1T_CMS_AuthEnvelopedData ();
   ASN1T_CMS_AuthEnvelopedData (ASN1C_CMS_AuthEnvelopedData& srcData);
   ~ASN1T_CMS_AuthEnvelopedData ();
} ;

class EXTERN ASN1C_CMS_AuthEnvelopedData :
public ASN1CType
{
protected:
   ASN1T_CMS_AuthEnvelopedData& msgData;
public:
   ASN1C_CMS_AuthEnvelopedData (ASN1T_CMS_AuthEnvelopedData& data);
   ASN1C_CMS_AuthEnvelopedData (OSRTMessageBufferIF& msgBuf
      , ASN1T_CMS_AuthEnvelopedData& data);
   ASN1C_CMS_AuthEnvelopedData (OSRTContext &context
      , ASN1T_CMS_AuthEnvelopedData& data);
   ASN1C_CMS_AuthEnvelopedData (ASN1C_CMS_AuthEnvelopedData& original);
   virtual ~ASN1C_CMS_AuthEnvelopedData () {}
   inline ASN1T_CMS_AuthEnvelopedData& getData () { return msgData; }
   inline const ASN1T_CMS_AuthEnvelopedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AuthEnvelopedData");
   int toStream (const char* name = "AuthEnvelopedData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CMS_AuthEnvelopedData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CMS_AuthEnvelopedData& getCopy (ASN1T_CMS_AuthEnvelopedData* pDstData = 0);
   ASN1T_CMS_AuthEnvelopedData* newCopy ();

   inline ASN1C_CMS_AuthEnvelopedData& operator= (ASN1C_CMS_AuthEnvelopedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CMS_AuthEnvelopedData (OSCTXT* pctxt,
   ASN1T_CMS_AuthEnvelopedData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CMS_AuthEnvelopedData (OSCTXT* pctxt, 
   ASN1T_CMS_AuthEnvelopedData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CMS_AuthEnvelopedData 
   (const char* name, const ASN1T_CMS_AuthEnvelopedData* pvalue);

EXTERN int asn1PrtToStrm_CMS_AuthEnvelopedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_AuthEnvelopedData* pvalue);

EXTERN ASN1T_CMS_AuthEnvelopedData* 
   new_ASN1T_CMS_AuthEnvelopedData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CMS_AuthEnvelopedData (const char* name, 
   ASN1T_CMS_AuthEnvelopedData* pValue, 
   ASN1T_CMS_AuthEnvelopedData* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CMS_AuthEnvelopedData (OSCTXT* pctxt, 
   ASN1T_CMS_AuthEnvelopedData* pSrcValue, ASN1T_CMS_AuthEnvelopedData*
    pDstValue);

EXTERN void asn1Init_CMS_AuthEnvelopedData (ASN1T_CMS_AuthEnvelopedData* pvalue);

EXTERN void asn1Free_CMS_AuthEnvelopedData (OSCTXT *pctxt, 
   ASN1T_CMS_AuthEnvelopedData* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID CMS_id_ct_contentInfo;
extern EXTERN ASN1OBJID CMS_id_data;
extern EXTERN ASN1OBJID CMS_id_signedData;
extern EXTERN ASN1OBJID CMS_id_envelopedData;
extern EXTERN ASN1OBJID CMS_id_digestedData;
extern EXTERN ASN1OBJID CMS_id_encryptedData;
extern EXTERN ASN1OBJID CMS_id_ct_authData;
extern EXTERN ASN1OBJID CMS_id_contentType;
extern EXTERN ASN1OBJID CMS_id_messageDigest;
extern EXTERN ASN1OBJID CMS_id_signingTime;
extern EXTERN ASN1OBJID CMS_id_countersignature;
extern EXTERN ASN1OBJID CMS_id_timeStamp;
extern EXTERN ASN1OBJID CMS_id_aa;
extern EXTERN ASN1OBJID CMS_smimeCapabilities;
extern EXTERN ASN1OBJID CMS_id_aa_encrypKeyPref;

#endif
