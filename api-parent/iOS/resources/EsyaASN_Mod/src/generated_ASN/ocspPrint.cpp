/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "ocsp.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_OCSP_Version 
   (const char* name, const ASN1T_OCSP_Version* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 0: printf ("%s = v1\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_OCSP_Version::Print (const char* name)
{
   asn1Print_OCSP_Version (name, &msgData);
}

void asn1Print_OCSP_OCSPResponseStatus 
   (const char* name, const ASN1T_OCSP_OCSPResponseStatus* pvalue)
{
   rtxPrintIndent ();
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("successful\n"); break;
      case 1: printf ("malformedRequest\n"); break;
      case 2: printf ("internalError\n"); break;
      case 3: printf ("tryLater\n"); break;
      case 5: printf ("sigRequired\n"); break;
      case 6: printf ("unauthorized\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_OCSP_OCSPResponseStatus::Print (const char* name)
{
   asn1Print_OCSP_OCSPResponseStatus (name, &msgData);
}

void asn1Print_OCSP_KeyHash 
   (const char* name, const ASN1T_OCSP_KeyHash* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts, pvalue->data);
}

void ASN1C_OCSP_KeyHash::Print (const char* name)
{
   asn1Print_OCSP_KeyHash (name, &msgData);
}

void asn1Print_OCSP_CRLReason 
   (const char* name, const ASN1T_OCSP_CRLReason* pvalue)
{
   rtxPrintIndent ();
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("unspecified\n"); break;
      case 1: printf ("keyCompromise\n"); break;
      case 2: printf ("cACompromise\n"); break;
      case 3: printf ("affiliationChanged\n"); break;
      case 4: printf ("superseded\n"); break;
      case 5: printf ("cessationOfOperation\n"); break;
      case 6: printf ("certificateHold\n"); break;
      case 8: printf ("removeFromCRL\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_OCSP_CRLReason::Print (const char* name)
{
   asn1Print_OCSP_CRLReason (name, &msgData);
}

void asn1Print_OCSP_CertID (const char* name, const ASN1T_OCSP_CertID* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("hashAlgorithm", &pvalue->hashAlgorithm
      );

   rtxPrintIndent ();
   rtxPrintHexStr ("issuerNameHash", pvalue->issuerNameHash.numocts, pvalue->issuerNameHash.data);

   rtxPrintIndent ();
   rtxPrintHexStr ("issuerKeyHash", pvalue->issuerKeyHash.numocts, pvalue->issuerKeyHash.data);

   asn1Print_EXP_CertificateSerialNumber ("serialNumber", &pvalue->serialNumber
      );

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_CertID::Print (const char* name)
{
   asn1Print_OCSP_CertID (name, &msgData);
}

void asn1Print_OCSP_Request 
   (const char* name, const ASN1T_OCSP_Request* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_OCSP_CertID ("reqCert", &pvalue->reqCert);

   if (pvalue->m.singleRequestExtensionsPresent) {
      asn1Print_EXP_Extensions ("singleRequestExtensions", &pvalue->
         singleRequestExtensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_Request::Print (const char* name)
{
   asn1Print_OCSP_Request (name, &msgData);
}

void asn1Print_OCSP__SeqOfOCSP_Request 
   (const char* name, const ASN1T_OCSP__SeqOfOCSP_Request* pvalue)
{
   ASN1T_OCSP_Request* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_OCSP_Request*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_OCSP_Request (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_OCSP__SeqOfOCSP_Request::Print (const char* name)
{
   asn1Print_OCSP__SeqOfOCSP_Request (name, &msgData);
}

void asn1Print_OCSP_TBSRequest 
   (const char* name, const ASN1T_OCSP_TBSRequest* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_OCSP_Version ("version", &pvalue->version);

   if (pvalue->m.requestorNamePresent) {
      asn1Print_IMP_GeneralName ("requestorName", &pvalue->requestorName);
   }

   asn1Print_OCSP__SeqOfOCSP_Request ("requestList", &pvalue->requestList);

   if (pvalue->m.requestExtensionsPresent) {
      asn1Print_EXP_Extensions ("requestExtensions", &pvalue->requestExtensions
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_TBSRequest::Print (const char* name)
{
   asn1Print_OCSP_TBSRequest (name, &msgData);
}

void asn1Print_OCSP__SeqOfOCSP_Certificate 
   (const char* name, const ASN1T_OCSP__SeqOfOCSP_Certificate* pvalue)
{
   ASN1T_EXP_Certificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Certificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Certificate (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_OCSP__SeqOfOCSP_Certificate::Print (const char* name)
{
   asn1Print_OCSP__SeqOfOCSP_Certificate (name, &msgData);
}

void asn1Print_OCSP_Signature 
   (const char* name, const ASN1T_OCSP_Signature* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("signatureAlgorithm", &pvalue->
      signatureAlgorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   if (pvalue->m.certsPresent) {
      asn1Print_OCSP__SeqOfOCSP_Certificate ("certs", &pvalue->certs);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_Signature::Print (const char* name)
{
   asn1Print_OCSP_Signature (name, &msgData);
}

void asn1Print_OCSP_OCSPRequest 
   (const char* name, const ASN1T_OCSP_OCSPRequest* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_OCSP_TBSRequest ("tbsRequest", &pvalue->tbsRequest);

   if (pvalue->m.optionalSignaturePresent) {
      asn1Print_OCSP_Signature ("optionalSignature", &pvalue->optionalSignature
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_OCSPRequest::Print (const char* name)
{
   asn1Print_OCSP_OCSPRequest (name, &msgData);
}

void asn1Print_OCSP_ResponseBytes 
   (const char* name, const ASN1T_OCSP_ResponseBytes* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("responseType", (ASN1OBJID*)&pvalue->responseType);

   rtxPrintIndent ();
   rtxPrintHexStr ("response", pvalue->response.numocts, pvalue->response.data);

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_ResponseBytes::Print (const char* name)
{
   asn1Print_OCSP_ResponseBytes (name, &msgData);
}

void asn1Print_OCSP_OCSPResponse 
   (const char* name, const ASN1T_OCSP_OCSPResponse* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_OCSP_OCSPResponseStatus ("responseStatus", &pvalue->responseStatus
      );

   if (pvalue->m.responseBytesPresent) {
      asn1Print_OCSP_ResponseBytes ("responseBytes", &pvalue->responseBytes);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_OCSPResponse::Print (const char* name)
{
   asn1Print_OCSP_OCSPResponse (name, &msgData);
}

void asn1Print_OCSP_ResponderID 
   (const char* name, const ASN1T_OCSP_ResponderID* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* byName */
      case 1:
      {
         asn1Print_EXP_Name ("byName", pvalue->u.byName);
         break;
      }
      /* byKey */
      case 2:
      {
         asn1Print_OCSP_KeyHash ("byKey", pvalue->u.byKey);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_ResponderID::Print (const char* name)
{
   asn1Print_OCSP_ResponderID (name, &msgData);
}

void asn1Print_OCSP_RevokedInfo 
   (const char* name, const ASN1T_OCSP_RevokedInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("revocationTime", pvalue->revocationTime);

   if (pvalue->m.revocationReasonPresent) {
      asn1Print_OCSP_CRLReason ("revocationReason", &pvalue->revocationReason
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_RevokedInfo::Print (const char* name)
{
   asn1Print_OCSP_RevokedInfo (name, &msgData);
}

void asn1Print_OCSP_CertStatus 
   (const char* name, const ASN1T_OCSP_CertStatus* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* good */
      case 1:
      {
         rtxPrintIndent();
         rtxPrintNull ("good");
         break;
      }
      /* revoked */
      case 2:
      {
         asn1Print_OCSP_RevokedInfo ("revoked", pvalue->u.revoked);
         break;
      }
      /* unknown */
      case 3:
      {
         rtxPrintIndent();
         rtxPrintNull ("unknown");
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_CertStatus::Print (const char* name)
{
   asn1Print_OCSP_CertStatus (name, &msgData);
}

void asn1Print_OCSP_SingleResponse 
   (const char* name, const ASN1T_OCSP_SingleResponse* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_OCSP_CertID ("certID", &pvalue->certID);

   asn1Print_OCSP_CertStatus ("certStatus", &pvalue->certStatus);

   rtxPrintIndent ();
   rtxPrintCharStr ("thisUpdate", pvalue->thisUpdate);

   if (pvalue->m.nextUpdatePresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("nextUpdate", pvalue->nextUpdate);
   }

   if (pvalue->m.singleExtensionsPresent) {
      asn1Print_EXP_Extensions ("singleExtensions", &pvalue->singleExtensions
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_SingleResponse::Print (const char* name)
{
   asn1Print_OCSP_SingleResponse (name, &msgData);
}

void asn1Print_OCSP__SeqOfOCSP_SingleResponse 
   (const char* name, const ASN1T_OCSP__SeqOfOCSP_SingleResponse* pvalue)
{
   ASN1T_OCSP_SingleResponse* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_OCSP_SingleResponse*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_OCSP_SingleResponse (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_OCSP__SeqOfOCSP_SingleResponse::Print (const char* name)
{
   asn1Print_OCSP__SeqOfOCSP_SingleResponse (name, &msgData);
}

void asn1Print_OCSP_ResponseData 
   (const char* name, const ASN1T_OCSP_ResponseData* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_OCSP_Version ("version", &pvalue->version);

   asn1Print_OCSP_ResponderID ("responderID", &pvalue->responderID);

   rtxPrintIndent ();
   rtxPrintCharStr ("producedAt", pvalue->producedAt);

   asn1Print_OCSP__SeqOfOCSP_SingleResponse ("responses", &pvalue->responses);

   if (pvalue->m.responseExtensionsPresent) {
      asn1Print_EXP_Extensions ("responseExtensions", &pvalue->
         responseExtensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_ResponseData::Print (const char* name)
{
   asn1Print_OCSP_ResponseData (name, &msgData);
}

void asn1Print_OCSP_BasicOCSPResponse 
   (const char* name, const ASN1T_OCSP_BasicOCSPResponse* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_OCSP_ResponseData ("tbsResponseData", &pvalue->tbsResponseData);

   asn1Print_EXP_AlgorithmIdentifier ("signatureAlgorithm", &pvalue->
      signatureAlgorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   if (pvalue->m.certsPresent) {
      asn1Print_OCSP__SeqOfOCSP_Certificate ("certs", &pvalue->certs);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_OCSP_BasicOCSPResponse::Print (const char* name)
{
   asn1Print_OCSP_BasicOCSPResponse (name, &msgData);
}

