/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "esya.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_ESYA_ESYAGizlilikBilgisi 
   (const char* name, const ASN1T_ESYA_ESYAGizlilikBilgisi* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 0: printf ("%s = tanimlanmamis\n", name); break;
      case 1: printf ("%s = tasnifDisi\n", name); break;
      case 2: printf ("%s = hizmeteOzel\n", name); break;
      case 3: printf ("%s = ozel\n", name); break;
      case 4: printf ("%s = gizli\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_ESYA_ESYAGizlilikBilgisi::Print (const char* name)
{
   asn1Print_ESYA_ESYAGizlilikBilgisi (name, &msgData);
}

void asn1Print_ESYA_ESYASifreliVeri 
   (const char* name, const ASN1T_ESYA_ESYASifreliVeri* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintHexStr ("sifreliAnahtar", pvalue->sifreliAnahtar.numocts, pvalue->sifreliAnahtar.data);

   rtxPrintIndent ();
   rtxPrintHexStr ("sifreliVeri", pvalue->sifreliVeri.numocts, pvalue->sifreliVeri.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ESYA_ESYASifreliVeri::Print (const char* name)
{
   asn1Print_ESYA_ESYASifreliVeri (name, &msgData);
}

void asn1Print_ESYA_ESYASimetrikAnahtar 
   (const char* name, const ASN1T_ESYA_ESYASimetrikAnahtar* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("algorithm", &pvalue->algorithm);

   rtxPrintIndent ();
   rtxPrintHexStr ("simetrikAnahtar", pvalue->simetrikAnahtar.numocts, pvalue->simetrikAnahtar.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ESYA_ESYASimetrikAnahtar::Print (const char* name)
{
   asn1Print_ESYA_ESYASimetrikAnahtar (name, &msgData);
}

void asn1Print_ESYA_ESYASimImzAnahtari 
   (const char* name, const ASN1T_ESYA_ESYASimImzAnahtari* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("anahNo", pvalue->anahNo);

   asn1Print_EXP_AlgorithmIdentifier ("hashAlg", &pvalue->hashAlg);

   asn1Print_EXP_AlgorithmIdentifier ("simetrikAlg", &pvalue->simetrikAlg);

   rtxPrintIndent ();
   rtxPrintHexStr ("anahtarBytes", pvalue->anahtarBytes.numocts, pvalue->anahtarBytes.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ESYA_ESYASimImzAnahtari::Print (const char* name)
{
   asn1Print_ESYA_ESYASimImzAnahtari (name, &msgData);
}

void asn1Print_ESYA_ESYASimImzAnahtarlari 
   (const char* name, const ASN1T_ESYA_ESYASimImzAnahtarlari* pvalue)
{
   ASN1T_ESYA_ESYASimImzAnahtari* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_ESYA_ESYASimImzAnahtari*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_ESYA_ESYASimImzAnahtari (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_ESYA_ESYASimImzAnahtarlari::Print (const char* name)
{
   asn1Print_ESYA_ESYASimImzAnahtarlari (name, &msgData);
}

void asn1Print_ESYA_ESYAVTImza 
   (const char* name, const ASN1T_ESYA_ESYAVTImza* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("anahNo", pvalue->anahNo);

   rtxPrintIndent ();
   rtxPrintHexStr ("imzaliVeri", pvalue->imzaliVeri.numocts, pvalue->imzaliVeri.data);

   rtxPrintCloseBrace ();
}

void ASN1C_ESYA_ESYAVTImza::Print (const char* name)
{
   asn1Print_ESYA_ESYAVTImza (name, &msgData);
}

void asn1Print_ESYA_ESYAPasswordRecipientInfo 
   (const char* name, const ASN1T_ESYA_ESYAPasswordRecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("version", pvalue->version);

   if (pvalue->m.keyDerivationAlgorithmPresent) {
      asn1Print_EXP_AlgorithmIdentifier ("keyDerivationAlgorithm", &pvalue->
         keyDerivationAlgorithm);
   }

   asn1Print_EXP_AlgorithmIdentifier ("keyEncryptionAlgorithm", &pvalue->
      keyEncryptionAlgorithm);

   rtxPrintIndent ();
   rtxPrintHexStr ("encryptedKey", pvalue->encryptedKey.numocts, pvalue->encryptedKey.data);

   asn1Print_PKCS7_DigestInfo ("keyHash", &pvalue->keyHash);

   rtxPrintCloseBrace ();
}

void ASN1C_ESYA_ESYAPasswordRecipientInfo::Print (const char* name)
{
   asn1Print_ESYA_ESYAPasswordRecipientInfo (name, &msgData);
}

void asn1Print_ESYA_EsyaGroupRecipientInfo 
   (const char* name, const ASN1T_ESYA_EsyaGroupRecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("gid", pvalue->gid);

   rtxPrintIndent ();
   rtxPrintInteger ("groupIndex", pvalue->groupIndex);

   rtxPrintIndent ();
   rtxPrintInteger ("groupSize", pvalue->groupSize);

   asn1Print_CMS_RecipientIdentifier ("rid", &pvalue->rid);

   asn1Print_PKCS7_KeyEncryptionAlgorithmIdentifier ("keyEncryptionAlgorithm", 
      &pvalue->keyEncryptionAlgorithm);

   asn1Print_PKCS7_EncryptedKey ("encryptedKey", &pvalue->encryptedKey);

   rtxPrintCloseBrace ();
}

void ASN1C_ESYA_EsyaGroupRecipientInfo::Print (const char* name)
{
   asn1Print_ESYA_EsyaGroupRecipientInfo (name, &msgData);
}

void asn1Print_ESYA_ESYAFileInfoRecipientInfo 
   (const char* name, const ASN1T_ESYA_ESYAFileInfoRecipientInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_ESYA_ESYAGizlilikBilgisi ("gizlilikBilgisi", &pvalue->
      gizlilikBilgisi);

   rtxPrintCloseBrace ();
}

void ASN1C_ESYA_ESYAFileInfoRecipientInfo::Print (const char* name)
{
   asn1Print_ESYA_ESYAFileInfoRecipientInfo (name, &msgData);
}

