/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "pkcs5v2.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_PKCS5_PBEParameter_salt (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBEParameter_salt* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS5_PBEParameter_salt::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_PBEParameter_salt (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_PBEParameter_salt::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_RC2_CBC_Parameter_iv (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_RC2_CBC_Parameter_iv* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_PKCS5_RC2_CBC_Parameter_iv::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_RC2_CBC_Parameter_iv (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_RC2_CBC_Parameter_iv::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_RC5_CBC_Parameters_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_RC5_CBC_Parameters_version* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 16: rtxStrcat (namebuf, 512, "v1-0\n");break;
         default:
            rtPrintToStreamUnsigned (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_PKCS5_RC5_CBC_Parameters_version::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_RC5_CBC_Parameters_version (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_RC5_CBC_Parameters_version::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_PBKDF2_params_salt (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBKDF2_params_salt* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* specified */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamHexStr (pctxt, "specified", pvalue->u.specified->numocts, pvalue->u.specified->data);
         break;
      }
      /* otherSource */
      case 2:
      {
         asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "otherSource", pvalue->u.otherSource);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS5_PBKDF2_params_salt::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_PBKDF2_params_salt (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_PBKDF2_params_salt::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_PBKDF2_params (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBKDF2_params* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS5_PBKDF2_params_salt (pctxt, "salt", &pvalue->salt);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamUnsigned (pctxt, "iterationCount", pvalue->iterationCount);

   if (pvalue->m.keyLengthPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamUnsigned (pctxt, "keyLength", pvalue->keyLength);
   }

   if (pvalue->m.prfPresent) {
      asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "prf", &pvalue->prf);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS5_PBKDF2_params::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_PBKDF2_params (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_PBKDF2_params::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_PBEParameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBEParameter* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS5_PBEParameter_salt (pctxt, "salt", &pvalue->salt);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "iterationCount", pvalue->iterationCount);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS5_PBEParameter::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_PBEParameter (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_PBEParameter::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_PBES2_params (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBES2_params* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "keyDerivationFunc", &pvalue->keyDerivationFunc);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "encryptionScheme", &pvalue->encryptionScheme);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS5_PBES2_params::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_PBES2_params (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_PBES2_params::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_PBMAC1_params (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBMAC1_params* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "keyDerivationFunc", &pvalue->keyDerivationFunc);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "messageAuthScheme", &pvalue->messageAuthScheme);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS5_PBMAC1_params::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_PBMAC1_params (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_PBMAC1_params::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_RC2_CBC_Parameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_RC2_CBC_Parameter* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.rc2ParameterVersionPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamInteger (pctxt, "rc2ParameterVersion", pvalue->rc2ParameterVersion);
   }

   asn1PrtToStrm_PKCS5_RC2_CBC_Parameter_iv (pctxt, "iv", &pvalue->iv);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS5_RC2_CBC_Parameter::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_RC2_CBC_Parameter (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_RC2_CBC_Parameter::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKCS5_RC5_CBC_Parameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_RC5_CBC_Parameters* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKCS5_RC5_CBC_Parameters_version (pctxt, "version", &pvalue->version);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamUnsigned (pctxt, "rounds", pvalue->rounds);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamUnsigned (pctxt, "blockSizeInBits", pvalue->blockSizeInBits);

   if (pvalue->m.ivPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "iv", pvalue->iv.numocts, pvalue->iv.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKCS5_RC5_CBC_Parameters::toStream (const char* name)

{
   asn1PrtToStrm_PKCS5_RC5_CBC_Parameters (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKCS5_RC5_CBC_Parameters::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

