/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "Implicit.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_IMP_AnotherName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_AnotherName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "type_id", (ASN1OBJID*)&pvalue->type_id);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "value",
      pvalue->value.numocts, pvalue->value.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_AnotherName::toStream (const char* name)

{
   asn1PrtToStrm_IMP_AnotherName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_AnotherName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_EDIPartyName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_EDIPartyName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.nameAssignerPresent) {
      asn1PrtToStrm_EXP_DirectoryString (pctxt, "nameAssigner", &pvalue->nameAssigner);
   }

   asn1PrtToStrm_EXP_DirectoryString (pctxt, "partyName", &pvalue->partyName);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_EDIPartyName::toStream (const char* name)

{
   asn1PrtToStrm_IMP_EDIPartyName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_EDIPartyName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_GeneralName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_GeneralName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* otherName */
      case 1:
      {
         asn1PrtToStrm_IMP_AnotherName (pctxt, "otherName", pvalue->u.otherName);
         break;
      }
      /* rfc822Name */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "rfc822Name", pvalue->u.rfc822Name);
         break;
      }
      /* dNSName */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "dNSName", pvalue->u.dNSName);
         break;
      }
      /* x400Address */
      case 4:
      {
         asn1PrtToStrm_EXP_ORAddress (pctxt, "x400Address", pvalue->u.x400Address);
         break;
      }
      /* directoryName */
      case 5:
      {
         asn1PrtToStrm_EXP_Name (pctxt, "directoryName", pvalue->u.directoryName);
         break;
      }
      /* ediPartyName */
      case 6:
      {
         asn1PrtToStrm_IMP_EDIPartyName (pctxt, "ediPartyName", pvalue->u.ediPartyName);
         break;
      }
      /* uniformResourceIdentifier */
      case 7:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "uniformResourceIdentifier", pvalue->u.uniformResourceIdentifier);
         break;
      }
      /* iPAddress */
      case 8:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamHexStr (pctxt, "iPAddress", pvalue->u.iPAddress->numocts, pvalue->u.iPAddress->data);
         break;
      }
      /* registeredID */
      case 9:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamOID (pctxt, "registeredID", (ASN1OBJID*)pvalue->u.registeredID);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_GeneralName::toStream (const char* name)

{
   asn1PrtToStrm_IMP_GeneralName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_GeneralName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_GeneralNames (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_GeneralNames* pvalue)
{
   ASN1T_IMP_GeneralName* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_GeneralName*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_GeneralName (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_GeneralNames::toStream (const char* name)

{
   asn1PrtToStrm_IMP_GeneralNames (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_GeneralNames::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_SubjectAltName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SubjectAltName* pvalue)
{
   asn1PrtToStrm_IMP_GeneralNames (pctxt, name, pvalue);
   return 0;
}

int ASN1C_IMP_SubjectAltName::toStream (const char* name)

{
   asn1PrtToStrm_IMP_SubjectAltName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_SubjectAltName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_KeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_KeyIdentifier* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_IMP_KeyIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_IMP_KeyIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_KeyIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_SubjectKeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SubjectKeyIdentifier* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_IMP_SubjectKeyIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_IMP_SubjectKeyIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_SubjectKeyIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_KeyUsage (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_KeyUsage* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, name, pvalue->numbits, pvalue->data);
   return 0;
}

int ASN1C_IMP_KeyUsage::toStream (const char* name)

{
   asn1PrtToStrm_IMP_KeyUsage (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_KeyUsage::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_CertPolicyId (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CertPolicyId* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_IMP_CertPolicyId::toStream (const char* name)

{
   asn1PrtToStrm_IMP_CertPolicyId (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_CertPolicyId::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_PolicyQualifierId (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyQualifierId* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_IMP_PolicyQualifierId::toStream (const char* name)

{
   asn1PrtToStrm_IMP_PolicyQualifierId (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_PolicyQualifierId::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_CPSuri (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CPSuri pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_IMP_CPSuri::toStream (const char* name)

{
   asn1PrtToStrm_IMP_CPSuri (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_IMP_CPSuri::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_KeyPurposeId (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_KeyPurposeId* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_IMP_KeyPurposeId::toStream (const char* name)

{
   asn1PrtToStrm_IMP_KeyPurposeId (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_KeyPurposeId::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_ReasonFlags (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_ReasonFlags* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, name, pvalue->numbits, pvalue->data);
   return 0;
}

int ASN1C_IMP_ReasonFlags::toStream (const char* name)

{
   asn1PrtToStrm_IMP_ReasonFlags (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_ReasonFlags::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_CRLNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CRLNumber* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, *pvalue);
   return 0;
}

int ASN1C_IMP_CRLNumber::toStream (const char* name)

{
   asn1PrtToStrm_IMP_CRLNumber (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_CRLNumber::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_CRLReason (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CRLReason* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtxPrintToStream (pctxt, name);
   switch (*pvalue) {
      case 0:
         rtxPrintToStream (pctxt, " = unspecified\n");
         break;
      case 1:
         rtxPrintToStream (pctxt, " = keyCompromise\n");
         break;
      case 2:
         rtxPrintToStream (pctxt, " = cACompromise\n");
         break;
      case 3:
         rtxPrintToStream (pctxt, " = affiliationChanged\n");
         break;
      case 4:
         rtxPrintToStream (pctxt, " = superseded\n");
         break;
      case 5:
         rtxPrintToStream (pctxt, " = cessationOfOperation\n");
         break;
      case 6:
         rtxPrintToStream (pctxt, " = certificateHold\n");
         break;
      case 8:
         rtxPrintToStream (pctxt, " = removeFromCRL\n");
         break;
      case 9:
         rtxPrintToStream (pctxt, " = privilegeWithdrawn\n");
         break;
      case 10:
         rtxPrintToStream (pctxt, " = aACompromise\n");
         break;
      default:
         rtxPrintToStream (pctxt," = ???\n");
   }

   return 0;
}

int ASN1C_IMP_CRLReason::toStream (const char* name)

{
   asn1PrtToStrm_IMP_CRLReason (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_CRLReason::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_BaseDistance (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_BaseDistance* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamUnsigned (pctxt, name, *pvalue);
   return 0;
}

int ASN1C_IMP_BaseDistance::toStream (const char* name)

{
   asn1PrtToStrm_IMP_BaseDistance (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_BaseDistance::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_SkipCerts (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SkipCerts* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamUnsigned (pctxt, name, *pvalue);
   return 0;
}

int ASN1C_IMP_SkipCerts::toStream (const char* name)

{
   asn1PrtToStrm_IMP_SkipCerts (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_SkipCerts::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_InhibitAnyPolicy (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_InhibitAnyPolicy* pvalue)
{
   asn1PrtToStrm_IMP_SkipCerts (pctxt, name, pvalue);
   return 0;
}

int ASN1C_IMP_InhibitAnyPolicy::toStream (const char* name)

{
   asn1PrtToStrm_IMP_InhibitAnyPolicy (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_InhibitAnyPolicy::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_DistributionPointName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_DistributionPointName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* fullName */
      case 1:
      {
         asn1PrtToStrm_IMP_GeneralNames (pctxt, "fullName", pvalue->u.fullName);
         break;
      }
      /* nameRelativeToCRLIssuer */
      case 2:
      {
         asn1PrtToStrm_EXP_RelativeDistinguishedName (pctxt, "nameRelativeToCRLIssuer", pvalue->u.nameRelativeToCRLIssuer);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_DistributionPointName::toStream (const char* name)

{
   asn1PrtToStrm_IMP_DistributionPointName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_DistributionPointName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_DistributionPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_DistributionPoint* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.distributionPointPresent) {
      asn1PrtToStrm_IMP_DistributionPointName (pctxt, "distributionPoint", &pvalue->distributionPoint);
   }

   if (pvalue->m.reasonsPresent) {
      asn1PrtToStrm_IMP_ReasonFlags (pctxt, "reasons", &pvalue->reasons);
   }

   if (pvalue->m.cRLIssuerPresent) {
      asn1PrtToStrm_IMP_GeneralNames (pctxt, "cRLIssuer", &pvalue->cRLIssuer);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_DistributionPoint::toStream (const char* name)

{
   asn1PrtToStrm_IMP_DistributionPoint (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_DistributionPoint::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_CRLDistributionPoints (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CRLDistributionPoints* pvalue)
{
   ASN1T_IMP_DistributionPoint* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_DistributionPoint*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_DistributionPoint (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_CRLDistributionPoints::toStream (const char* name)

{
   asn1PrtToStrm_IMP_CRLDistributionPoints (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_CRLDistributionPoints::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_FreshestCRL (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_FreshestCRL* pvalue)
{
   asn1PrtToStrm_IMP_CRLDistributionPoints (pctxt, name, pvalue);
   return 0;
}

int ASN1C_IMP_FreshestCRL::toStream (const char* name)

{
   asn1PrtToStrm_IMP_FreshestCRL (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_FreshestCRL::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_BaseCRLNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_BaseCRLNumber* pvalue)
{
   asn1PrtToStrm_IMP_CRLNumber (pctxt, name, pvalue);
   return 0;
}

int ASN1C_IMP_BaseCRLNumber::toStream (const char* name)

{
   asn1PrtToStrm_IMP_BaseCRLNumber (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_BaseCRLNumber::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_IssuerAltName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_IssuerAltName* pvalue)
{
   asn1PrtToStrm_IMP_GeneralNames (pctxt, name, pvalue);
   return 0;
}

int ASN1C_IMP_IssuerAltName::toStream (const char* name)

{
   asn1PrtToStrm_IMP_IssuerAltName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_IssuerAltName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_HoldInstructionCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_HoldInstructionCode* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_IMP_HoldInstructionCode::toStream (const char* name)

{
   asn1PrtToStrm_IMP_HoldInstructionCode (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_HoldInstructionCode::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_InvalidityDate (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_InvalidityDate pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_IMP_InvalidityDate::toStream (const char* name)

{
   asn1PrtToStrm_IMP_InvalidityDate (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_IMP_InvalidityDate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_CertificateIssuer (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CertificateIssuer* pvalue)
{
   asn1PrtToStrm_IMP_GeneralNames (pctxt, name, pvalue);
   return 0;
}

int ASN1C_IMP_CertificateIssuer::toStream (const char* name)

{
   asn1PrtToStrm_IMP_CertificateIssuer (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_CertificateIssuer::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_AuthorityKeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_AuthorityKeyIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.keyIdentifierPresent) {
      asn1PrtToStrm_IMP_KeyIdentifier (pctxt, "keyIdentifier", &pvalue->keyIdentifier);
   }

   if (pvalue->m.authorityCertIssuerPresent) {
      asn1PrtToStrm_IMP_GeneralNames (pctxt, "authorityCertIssuer", &pvalue->authorityCertIssuer);
   }

   if (pvalue->m.authorityCertSerialNumberPresent) {
      asn1PrtToStrm_EXP_CertificateSerialNumber (pctxt, "authorityCertSerialNumber", &pvalue->authorityCertSerialNumber);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_AuthorityKeyIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_IMP_AuthorityKeyIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_AuthorityKeyIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_PolicyQualifierInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyQualifierInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_IMP_PolicyQualifierId (pctxt, "policyQualifierId", &pvalue->policyQualifierId);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "qualifier",
      pvalue->qualifier.numocts, pvalue->qualifier.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_PolicyQualifierInfo::toStream (const char* name)

{
   asn1PrtToStrm_IMP_PolicyQualifierInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_PolicyQualifierInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_PolicyInformation_policyQualifiers (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyInformation_policyQualifiers* pvalue)
{
   ASN1T_IMP_PolicyQualifierInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_PolicyQualifierInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_PolicyQualifierInfo (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_PolicyInformation_policyQualifiers::toStream (const char* name)

{
   asn1PrtToStrm_IMP_PolicyInformation_policyQualifiers (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_PolicyInformation_policyQualifiers::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_PolicyInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyInformation* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_IMP_CertPolicyId (pctxt, "policyIdentifier", &pvalue->policyIdentifier);

   if (pvalue->m.policyQualifiersPresent) {
      asn1PrtToStrm_IMP_PolicyInformation_policyQualifiers (pctxt, "policyQualifiers", &pvalue->policyQualifiers);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_PolicyInformation::toStream (const char* name)

{
   asn1PrtToStrm_IMP_PolicyInformation (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_PolicyInformation::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_CertificatePolicies (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CertificatePolicies* pvalue)
{
   ASN1T_IMP_PolicyInformation* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_PolicyInformation*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_PolicyInformation (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_CertificatePolicies::toStream (const char* name)

{
   asn1PrtToStrm_IMP_CertificatePolicies (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_CertificatePolicies::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_DisplayText (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_DisplayText* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* ia5String */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "ia5String", pvalue->u.ia5String);
         break;
      }
      /* visibleString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "visibleString", pvalue->u.visibleString);
         break;
      }
      /* bmpString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_DisplayText::toStream (const char* name)

{
   asn1PrtToStrm_IMP_DisplayText (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_DisplayText::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_NoticeReference_noticeNumbers (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_NoticeReference_noticeNumbers* pvalue)
{
   OSINT32* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (OSINT32*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamInteger (pctxt, namebuf, *pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_NoticeReference_noticeNumbers::toStream (const char* name)

{
   asn1PrtToStrm_IMP_NoticeReference_noticeNumbers (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_NoticeReference_noticeNumbers::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_NoticeReference (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_NoticeReference* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_IMP_DisplayText (pctxt, "organization", &pvalue->organization);

   asn1PrtToStrm_IMP_NoticeReference_noticeNumbers (pctxt, "noticeNumbers", &pvalue->noticeNumbers);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_NoticeReference::toStream (const char* name)

{
   asn1PrtToStrm_IMP_NoticeReference (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_NoticeReference::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_UserNotice (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_UserNotice* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.noticeRefPresent) {
      asn1PrtToStrm_IMP_NoticeReference (pctxt, "noticeRef", &pvalue->noticeRef);
   }

   if (pvalue->m.explicitTextPresent) {
      asn1PrtToStrm_IMP_DisplayText (pctxt, "explicitText", &pvalue->explicitText);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_UserNotice::toStream (const char* name)

{
   asn1PrtToStrm_IMP_UserNotice (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_UserNotice::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_Qualifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_Qualifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* userNotice */
      case 1:
      {
         asn1PrtToStrm_IMP_UserNotice (pctxt, "userNotice", pvalue->u.userNotice);
         break;
      }
      /* cPSuri */
      case 2:
      {
         asn1PrtToStrm_IMP_CPSuri (pctxt, "cPSuri", pvalue->u.cPSuri);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_Qualifier::toStream (const char* name)

{
   asn1PrtToStrm_IMP_Qualifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_Qualifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_PolicyMappings_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyMappings_element* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_IMP_CertPolicyId (pctxt, "issuerDomainPolicy", &pvalue->issuerDomainPolicy);

   asn1PrtToStrm_IMP_CertPolicyId (pctxt, "subjectDomainPolicy", &pvalue->subjectDomainPolicy);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_PolicyMappings_element::toStream (const char* name)

{
   asn1PrtToStrm_IMP_PolicyMappings_element (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_PolicyMappings_element::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_PolicyMappings (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyMappings* pvalue)
{
   ASN1T_IMP_PolicyMappings_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_PolicyMappings_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_PolicyMappings_element (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_PolicyMappings::toStream (const char* name)

{
   asn1PrtToStrm_IMP_PolicyMappings (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_PolicyMappings::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_BasicConstraints (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_BasicConstraints* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBoolean (pctxt, "cA", pvalue->cA);

   if (pvalue->m.pathLenConstraintPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamUnsigned (pctxt, "pathLenConstraint", pvalue->pathLenConstraint);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_BasicConstraints::toStream (const char* name)

{
   asn1PrtToStrm_IMP_BasicConstraints (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_BasicConstraints::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_ExtKeyUsageSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_ExtKeyUsageSyntax* pvalue)
{
   ASN1T_IMP_KeyPurposeId* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_KeyPurposeId*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_KeyPurposeId (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_ExtKeyUsageSyntax::toStream (const char* name)

{
   asn1PrtToStrm_IMP_ExtKeyUsageSyntax (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_ExtKeyUsageSyntax::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_AccessDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_AccessDescription* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "accessMethod", (ASN1OBJID*)&pvalue->accessMethod);

   asn1PrtToStrm_IMP_GeneralName (pctxt, "accessLocation", &pvalue->accessLocation);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_AccessDescription::toStream (const char* name)

{
   asn1PrtToStrm_IMP_AccessDescription (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_AccessDescription::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_AuthorityInfoAccessSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_AuthorityInfoAccessSyntax* pvalue)
{
   ASN1T_IMP_AccessDescription* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_AccessDescription*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_AccessDescription (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_AuthorityInfoAccessSyntax::toStream (const char* name)

{
   asn1PrtToStrm_IMP_AuthorityInfoAccessSyntax (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_AuthorityInfoAccessSyntax::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_SubjectInfoAccessSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SubjectInfoAccessSyntax* pvalue)
{
   ASN1T_IMP_AccessDescription* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_AccessDescription*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_AccessDescription (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_SubjectInfoAccessSyntax::toStream (const char* name)

{
   asn1PrtToStrm_IMP_SubjectInfoAccessSyntax (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_SubjectInfoAccessSyntax::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_SubjectDirectoryAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SubjectDirectoryAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_Attribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_SubjectDirectoryAttributes::toStream (const char* name)

{
   asn1PrtToStrm_IMP_SubjectDirectoryAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_SubjectDirectoryAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_RoleSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_RoleSyntax* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.roleAuthorityPresent) {
      asn1PrtToStrm_IMP_GeneralNames (pctxt, "roleAuthority", &pvalue->roleAuthority);
   }

   asn1PrtToStrm_IMP_GeneralName (pctxt, "roleName", &pvalue->roleName);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_RoleSyntax::toStream (const char* name)

{
   asn1PrtToStrm_IMP_RoleSyntax (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_RoleSyntax::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_GeneralSubtree (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_GeneralSubtree* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_IMP_GeneralName (pctxt, "base", &pvalue->base);

   asn1PrtToStrm_IMP_BaseDistance (pctxt, "minimum", &pvalue->minimum);

   if (pvalue->m.maximumPresent) {
      asn1PrtToStrm_IMP_BaseDistance (pctxt, "maximum", &pvalue->maximum);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_GeneralSubtree::toStream (const char* name)

{
   asn1PrtToStrm_IMP_GeneralSubtree (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_GeneralSubtree::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_GeneralSubtrees (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_GeneralSubtrees* pvalue)
{
   ASN1T_IMP_GeneralSubtree* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_GeneralSubtree*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_GeneralSubtree (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_IMP_GeneralSubtrees::toStream (const char* name)

{
   asn1PrtToStrm_IMP_GeneralSubtrees (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_GeneralSubtrees::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_NameConstraints (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_NameConstraints* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.permittedSubtreesPresent) {
      asn1PrtToStrm_IMP_GeneralSubtrees (pctxt, "permittedSubtrees", &pvalue->permittedSubtrees);
   }

   if (pvalue->m.excludedSubtreesPresent) {
      asn1PrtToStrm_IMP_GeneralSubtrees (pctxt, "excludedSubtrees", &pvalue->excludedSubtrees);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_NameConstraints::toStream (const char* name)

{
   asn1PrtToStrm_IMP_NameConstraints (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_NameConstraints::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_PolicyConstraints (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyConstraints* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.requireExplicitPolicyPresent) {
      asn1PrtToStrm_IMP_SkipCerts (pctxt, "requireExplicitPolicy", &pvalue->requireExplicitPolicy);
   }

   if (pvalue->m.inhibitPolicyMappingPresent) {
      asn1PrtToStrm_IMP_SkipCerts (pctxt, "inhibitPolicyMapping", &pvalue->inhibitPolicyMapping);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_PolicyConstraints::toStream (const char* name)

{
   asn1PrtToStrm_IMP_PolicyConstraints (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_PolicyConstraints::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_IMP_IssuingDistributionPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_IssuingDistributionPoint* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.distributionPointPresent) {
      asn1PrtToStrm_IMP_DistributionPointName (pctxt, "distributionPoint", &pvalue->distributionPoint);
   }

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBoolean (pctxt, "onlyContainsUserCerts", pvalue->onlyContainsUserCerts);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBoolean (pctxt, "onlyContainsCACerts", pvalue->onlyContainsCACerts);

   if (pvalue->m.onlySomeReasonsPresent) {
      asn1PrtToStrm_IMP_ReasonFlags (pctxt, "onlySomeReasons", &pvalue->onlySomeReasons);
   }

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBoolean (pctxt, "indirectCRL", pvalue->indirectCRL);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBoolean (pctxt, "onlyContainsAttributeCerts", pvalue->onlyContainsAttributeCerts);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_IMP_IssuingDistributionPoint::toStream (const char* name)

{
   asn1PrtToStrm_IMP_IssuingDistributionPoint (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_IMP_IssuingDistributionPoint::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

