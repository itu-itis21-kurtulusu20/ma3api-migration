/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "cmp.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_CMP_PKIProtection 
   (const char* name, const ASN1T_CMP_PKIProtection* pvalue)
{
   rtxPrintIndent ();
   rtPrintBitStrBraceText (name, pvalue->numbits, pvalue->data);
}

void ASN1C_CMP_PKIProtection::Print (const char* name)
{
   asn1Print_CMP_PKIProtection (name, &msgData);
}

void asn1Print_CMP_PKIHeader_pvno 
   (const char* name, const ASN1T_CMP_PKIHeader_pvno* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 1: printf ("%s = cmp1999\n", name); break;
      case 2: printf ("%s = cmp2000\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_CMP_PKIHeader_pvno::Print (const char* name)
{
   asn1Print_CMP_PKIHeader_pvno (name, &msgData);
}

void asn1Print_CMP_PKIFreeText 
   (const char* name, const ASN1T_CMP_PKIFreeText* pvalue)
{
   const OSUTF8CHAR* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (const OSUTF8CHAR*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintUTF8CharStr (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_PKIFreeText::Print (const char* name)
{
   asn1Print_CMP_PKIFreeText (name, &msgData);
}

void asn1Print_CMP_InfoTypeAndValue 
   (const char* name, const ASN1T_CMP_InfoTypeAndValue* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("infoType", (ASN1OBJID*)&pvalue->infoType);

   if (pvalue->m.infoValuePresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("infoValue", pvalue->infoValue.numocts,
      pvalue->infoValue.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_InfoTypeAndValue::Print (const char* name)
{
   asn1Print_CMP_InfoTypeAndValue (name, &msgData);
}

void asn1Print_CMP_PKIHeader_generalInfo 
   (const char* name, const ASN1T_CMP_PKIHeader_generalInfo* pvalue)
{
   ASN1T_CMP_InfoTypeAndValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_InfoTypeAndValue (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_PKIHeader_generalInfo::Print (const char* name)
{
   asn1Print_CMP_PKIHeader_generalInfo (name, &msgData);
}

void asn1Print_CMP_PKIHeader 
   (const char* name, const ASN1T_CMP_PKIHeader* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_PKIHeader_pvno ("pvno", &pvalue->pvno);

   asn1Print_IMP_GeneralName ("sender", &pvalue->sender);

   asn1Print_IMP_GeneralName ("recipient", &pvalue->recipient);

   if (pvalue->m.messageTimePresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("messageTime", pvalue->messageTime);
   }

   if (pvalue->m.protectionAlgPresent) {
      asn1Print_EXP_AlgorithmIdentifier ("protectionAlg", &pvalue->
         protectionAlg);
   }

   if (pvalue->m.senderKIDPresent) {
      asn1Print_IMP_KeyIdentifier ("senderKID", &pvalue->senderKID);
   }

   if (pvalue->m.recipKIDPresent) {
      asn1Print_IMP_KeyIdentifier ("recipKID", &pvalue->recipKID);
   }

   if (pvalue->m.transactionIDPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("transactionID", pvalue->transactionID.numocts, pvalue->transactionID.data);
   }

   if (pvalue->m.senderNoncePresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("senderNonce", pvalue->senderNonce.numocts, pvalue->senderNonce.data);
   }

   if (pvalue->m.recipNoncePresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("recipNonce", pvalue->recipNonce.numocts, pvalue->recipNonce.data);
   }

   if (pvalue->m.freeTextPresent) {
      asn1Print_CMP_PKIFreeText ("freeText", &pvalue->freeText);
   }

   if (pvalue->m.generalInfoPresent) {
      asn1Print_CMP_PKIHeader_generalInfo ("generalInfo", &pvalue->generalInfo
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_PKIHeader::Print (const char* name)
{
   asn1Print_CMP_PKIHeader (name, &msgData);
}

void asn1Print_CMP_CMPCertificate 
   (const char* name, const ASN1T_CMP_CMPCertificate* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* x509v3PKCert */
      case 1:
      {
         asn1Print_EXP_Certificate ("x509v3PKCert", pvalue->u.x509v3PKCert);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_CMPCertificate::Print (const char* name)
{
   asn1Print_CMP_CMPCertificate (name, &msgData);
}

void asn1Print_CMP_CertRepMessage_caPubs 
   (const char* name, const ASN1T_CMP_CertRepMessage_caPubs* pvalue)
{
   ASN1T_CMP_CMPCertificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_CMPCertificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_CMPCertificate (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_CertRepMessage_caPubs::Print (const char* name)
{
   asn1Print_CMP_CertRepMessage_caPubs (name, &msgData);
}

void asn1Print_CMP_PKIStatus 
   (const char* name, const ASN1T_CMP_PKIStatus* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 0: printf ("%s = accepted\n", name); break;
      case 1: printf ("%s = grantedWithMods\n", name); break;
      case 2: printf ("%s = rejection\n", name); break;
      case 3: printf ("%s = waiting\n", name); break;
      case 4: printf ("%s = revocationWarning\n", name); break;
      case 5: printf ("%s = revocationNotification\n", name); break;
      case 6: printf ("%s = keyUpdateWarning\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_CMP_PKIStatus::Print (const char* name)
{
   asn1Print_CMP_PKIStatus (name, &msgData);
}

void asn1Print_CMP_PKIFailureInfo 
   (const char* name, const ASN1T_CMP_PKIFailureInfo* pvalue)
{
   rtxPrintIndent ();
   rtPrintBitStrBraceText (name, pvalue->numbits, pvalue->data);
}

void ASN1C_CMP_PKIFailureInfo::Print (const char* name)
{
   asn1Print_CMP_PKIFailureInfo (name, &msgData);
}

void asn1Print_CMP_PKIStatusInfo 
   (const char* name, const ASN1T_CMP_PKIStatusInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_PKIStatus ("status", &pvalue->status);

   if (pvalue->m.statusStringPresent) {
      asn1Print_CMP_PKIFreeText ("statusString", &pvalue->statusString);
   }

   if (pvalue->m.failInfoPresent) {
      asn1Print_CMP_PKIFailureInfo ("failInfo", &pvalue->failInfo);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_PKIStatusInfo::Print (const char* name)
{
   asn1Print_CMP_PKIStatusInfo (name, &msgData);
}

void asn1Print_CMP_CertOrEncCert 
   (const char* name, const ASN1T_CMP_CertOrEncCert* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* certificate */
      case 1:
      {
         asn1Print_CMP_CMPCertificate ("certificate", pvalue->u.certificate);
         break;
      }
      /* encryptedCert */
      case 2:
      {
         asn1Print_CRMF_EncryptedValue ("encryptedCert", pvalue->
            u.encryptedCert);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_CertOrEncCert::Print (const char* name)
{
   asn1Print_CMP_CertOrEncCert (name, &msgData);
}

void asn1Print_CMP_CertifiedKeyPair 
   (const char* name, const ASN1T_CMP_CertifiedKeyPair* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_CertOrEncCert ("certOrEncCert", &pvalue->certOrEncCert);

   if (pvalue->m.privateKeyPresent) {
      asn1Print_CRMF_EncryptedValue ("privateKey", &pvalue->privateKey);
   }

   if (pvalue->m.publicationInfoPresent) {
      asn1Print_CRMF_PKIPublicationInfo ("publicationInfo", &pvalue->
         publicationInfo);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_CertifiedKeyPair::Print (const char* name)
{
   asn1Print_CMP_CertifiedKeyPair (name, &msgData);
}

void asn1Print_CMP_CertResponse 
   (const char* name, const ASN1T_CMP_CertResponse* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("certReqId", pvalue->certReqId);

   asn1Print_CMP_PKIStatusInfo ("status", &pvalue->status);

   if (pvalue->m.certifiedKeyPairPresent) {
      asn1Print_CMP_CertifiedKeyPair ("certifiedKeyPair", &pvalue->
         certifiedKeyPair);
   }

   if (pvalue->m.rspInfoPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("rspInfo", pvalue->rspInfo.numocts, pvalue->rspInfo.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_CertResponse::Print (const char* name)
{
   asn1Print_CMP_CertResponse (name, &msgData);
}

void asn1Print_CMP__SeqOfCMP_CertResponse 
   (const char* name, const ASN1T_CMP__SeqOfCMP_CertResponse* pvalue)
{
   ASN1T_CMP_CertResponse* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_CertResponse*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_CertResponse (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP__SeqOfCMP_CertResponse::Print (const char* name)
{
   asn1Print_CMP__SeqOfCMP_CertResponse (name, &msgData);
}

void asn1Print_CMP_CertRepMessage 
   (const char* name, const ASN1T_CMP_CertRepMessage* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.caPubsPresent) {
      asn1Print_CMP_CertRepMessage_caPubs ("caPubs", &pvalue->caPubs);
   }

   asn1Print_CMP__SeqOfCMP_CertResponse ("response", &pvalue->response);

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_CertRepMessage::Print (const char* name)
{
   asn1Print_CMP_CertRepMessage (name, &msgData);
}

void asn1Print_CMP_Challenge 
   (const char* name, const ASN1T_CMP_Challenge* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.owfPresent) {
      asn1Print_EXP_AlgorithmIdentifier ("owf", &pvalue->owf);
   }

   rtxPrintIndent ();
   rtxPrintHexStr ("witness", pvalue->witness.numocts, pvalue->witness.data);

   rtxPrintIndent ();
   rtxPrintHexStr ("challenge", pvalue->challenge.numocts, pvalue->challenge.data);

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_Challenge::Print (const char* name)
{
   asn1Print_CMP_Challenge (name, &msgData);
}

void asn1Print_CMP_POPODecKeyChallContent 
   (const char* name, const ASN1T_CMP_POPODecKeyChallContent* pvalue)
{
   ASN1T_CMP_Challenge* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_Challenge*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_Challenge (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_POPODecKeyChallContent::Print (const char* name)
{
   asn1Print_CMP_POPODecKeyChallContent (name, &msgData);
}

void asn1Print_CMP_POPODecKeyRespContent 
   (const char* name, const ASN1T_CMP_POPODecKeyRespContent* pvalue)
{
   OSINT32* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (OSINT32*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintInteger (namebuf, *pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_POPODecKeyRespContent::Print (const char* name)
{
   asn1Print_CMP_POPODecKeyRespContent (name, &msgData);
}

void asn1Print_CMP_KeyRecRepContent_caCerts 
   (const char* name, const ASN1T_CMP_KeyRecRepContent_caCerts* pvalue)
{
   ASN1T_CMP_CMPCertificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_CMPCertificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_CMPCertificate (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_KeyRecRepContent_caCerts::Print (const char* name)
{
   asn1Print_CMP_KeyRecRepContent_caCerts (name, &msgData);
}

void asn1Print_CMP_KeyRecRepContent_keyPairHist 
   (const char* name, const ASN1T_CMP_KeyRecRepContent_keyPairHist* pvalue)
{
   ASN1T_CMP_CertifiedKeyPair* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_CertifiedKeyPair*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_CertifiedKeyPair (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_KeyRecRepContent_keyPairHist::Print (const char* name)
{
   asn1Print_CMP_KeyRecRepContent_keyPairHist (name, &msgData);
}

void asn1Print_CMP_KeyRecRepContent 
   (const char* name, const ASN1T_CMP_KeyRecRepContent* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_PKIStatusInfo ("status", &pvalue->status);

   if (pvalue->m.newSigCertPresent) {
      asn1Print_CMP_CMPCertificate ("newSigCert", &pvalue->newSigCert);
   }

   if (pvalue->m.caCertsPresent) {
      asn1Print_CMP_KeyRecRepContent_caCerts ("caCerts", &pvalue->caCerts);
   }

   if (pvalue->m.keyPairHistPresent) {
      asn1Print_CMP_KeyRecRepContent_keyPairHist ("keyPairHist", &pvalue->
         keyPairHist);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_KeyRecRepContent::Print (const char* name)
{
   asn1Print_CMP_KeyRecRepContent (name, &msgData);
}

void asn1Print_CMP_RevDetails 
   (const char* name, const ASN1T_CMP_RevDetails* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CRMF_CertTemplate ("certDetails", &pvalue->certDetails);

   if (pvalue->m.crlEntryDetailsPresent) {
      asn1Print_EXP_Extensions ("crlEntryDetails", &pvalue->crlEntryDetails);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_RevDetails::Print (const char* name)
{
   asn1Print_CMP_RevDetails (name, &msgData);
}

void asn1Print_CMP_RevReqContent 
   (const char* name, const ASN1T_CMP_RevReqContent* pvalue)
{
   ASN1T_CMP_RevDetails* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_RevDetails*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_RevDetails (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_RevReqContent::Print (const char* name)
{
   asn1Print_CMP_RevReqContent (name, &msgData);
}

void asn1Print_CMP_RevRepContent_status 
   (const char* name, const ASN1T_CMP_RevRepContent_status* pvalue)
{
   ASN1T_CMP_PKIStatusInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_PKIStatusInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_PKIStatusInfo (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_RevRepContent_status::Print (const char* name)
{
   asn1Print_CMP_RevRepContent_status (name, &msgData);
}

void asn1Print_CMP_RevRepContent_revCerts 
   (const char* name, const ASN1T_CMP_RevRepContent_revCerts* pvalue)
{
   ASN1T_CRMF_CertId* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CRMF_CertId*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CRMF_CertId (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_RevRepContent_revCerts::Print (const char* name)
{
   asn1Print_CMP_RevRepContent_revCerts (name, &msgData);
}

void asn1Print_CMP_RevRepContent_crls 
   (const char* name, const ASN1T_CMP_RevRepContent_crls* pvalue)
{
   ASN1T_EXP_CertificateList* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_CertificateList*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_CertificateList (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_RevRepContent_crls::Print (const char* name)
{
   asn1Print_CMP_RevRepContent_crls (name, &msgData);
}

void asn1Print_CMP_RevRepContent 
   (const char* name, const ASN1T_CMP_RevRepContent* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_RevRepContent_status ("status", &pvalue->status);

   if (pvalue->m.revCertsPresent) {
      asn1Print_CMP_RevRepContent_revCerts ("revCerts", &pvalue->revCerts);
   }

   if (pvalue->m.crlsPresent) {
      asn1Print_CMP_RevRepContent_crls ("crls", &pvalue->crls);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_RevRepContent::Print (const char* name)
{
   asn1Print_CMP_RevRepContent (name, &msgData);
}

void asn1Print_CMP_CAKeyUpdAnnContent 
   (const char* name, const ASN1T_CMP_CAKeyUpdAnnContent* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_CMPCertificate ("oldWithNew", &pvalue->oldWithNew);

   asn1Print_CMP_CMPCertificate ("newWithOld", &pvalue->newWithOld);

   asn1Print_CMP_CMPCertificate ("newWithNew", &pvalue->newWithNew);

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_CAKeyUpdAnnContent::Print (const char* name)
{
   asn1Print_CMP_CAKeyUpdAnnContent (name, &msgData);
}

void asn1Print_CMP_CertAnnContent 
   (const char* name, const ASN1T_CMP_CertAnnContent* pvalue)
{
   asn1Print_CMP_CMPCertificate (name, pvalue);
}

void ASN1C_CMP_CertAnnContent::Print (const char* name)
{
   asn1Print_CMP_CertAnnContent (name, &msgData);
}

void asn1Print_CMP_RevAnnContent 
   (const char* name, const ASN1T_CMP_RevAnnContent* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_PKIStatus ("status", &pvalue->status);

   asn1Print_CRMF_CertId ("certId", &pvalue->certId);

   rtxPrintIndent ();
   rtxPrintCharStr ("willBeRevokedAt", pvalue->willBeRevokedAt);

   rtxPrintIndent ();
   rtxPrintCharStr ("badSinceDate", pvalue->badSinceDate);

   if (pvalue->m.crlDetailsPresent) {
      asn1Print_EXP_Extensions ("crlDetails", &pvalue->crlDetails);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_RevAnnContent::Print (const char* name)
{
   asn1Print_CMP_RevAnnContent (name, &msgData);
}

void asn1Print_CMP_CRLAnnContent 
   (const char* name, const ASN1T_CMP_CRLAnnContent* pvalue)
{
   ASN1T_EXP_CertificateList* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_CertificateList*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_CertificateList (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_CRLAnnContent::Print (const char* name)
{
   asn1Print_CMP_CRLAnnContent (name, &msgData);
}

void asn1Print_CMP_PKIConfirmContent_ (const char* name, const void* pvalue)
{
   OS_UNUSED_ARG (pvalue);

   rtxPrintIndent();
   rtxPrintNull (name);
}

void ASN1C_CMP_PKIConfirmContent::Print (const char* name)
{
   asn1Print_CMP_PKIConfirmContent (name);
}

void asn1Print_CMP_GenMsgContent 
   (const char* name, const ASN1T_CMP_GenMsgContent* pvalue)
{
   ASN1T_CMP_InfoTypeAndValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_InfoTypeAndValue (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_GenMsgContent::Print (const char* name)
{
   asn1Print_CMP_GenMsgContent (name, &msgData);
}

void asn1Print_CMP_GenRepContent 
   (const char* name, const ASN1T_CMP_GenRepContent* pvalue)
{
   ASN1T_CMP_InfoTypeAndValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_InfoTypeAndValue (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_GenRepContent::Print (const char* name)
{
   asn1Print_CMP_GenRepContent (name, &msgData);
}

void asn1Print_CMP_ErrorMsgContent 
   (const char* name, const ASN1T_CMP_ErrorMsgContent* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_PKIStatusInfo ("pKIStatusInfo", &pvalue->pKIStatusInfo);

   if (pvalue->m.errorCodePresent) {
      rtxPrintIndent ();
      rtxPrintInteger ("errorCode", pvalue->errorCode);
   }

   if (pvalue->m.errorDetailsPresent) {
      asn1Print_CMP_PKIFreeText ("errorDetails", &pvalue->errorDetails);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_ErrorMsgContent::Print (const char* name)
{
   asn1Print_CMP_ErrorMsgContent (name, &msgData);
}

void asn1Print_CMP_CertStatus 
   (const char* name, const ASN1T_CMP_CertStatus* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintHexStr ("certHash", pvalue->certHash.numocts, pvalue->certHash.data);

   rtxPrintIndent ();
   rtxPrintInteger ("certReqId", pvalue->certReqId);

   if (pvalue->m.statusInfoPresent) {
      asn1Print_CMP_PKIStatusInfo ("statusInfo", &pvalue->statusInfo);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_CertStatus::Print (const char* name)
{
   asn1Print_CMP_CertStatus (name, &msgData);
}

void asn1Print_CMP_CertConfirmContent 
   (const char* name, const ASN1T_CMP_CertConfirmContent* pvalue)
{
   ASN1T_CMP_CertStatus* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_CertStatus*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_CertStatus (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_CertConfirmContent::Print (const char* name)
{
   asn1Print_CMP_CertConfirmContent (name, &msgData);
}

void asn1Print_CMP_PollReqContent_element 
   (const char* name, const ASN1T_CMP_PollReqContent_element* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("certReqId", pvalue->certReqId);

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_PollReqContent_element::Print (const char* name)
{
   asn1Print_CMP_PollReqContent_element (name, &msgData);
}

void asn1Print_CMP_PollReqContent 
   (const char* name, const ASN1T_CMP_PollReqContent* pvalue)
{
   ASN1T_CMP_PollReqContent_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_PollReqContent_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_PollReqContent_element (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_PollReqContent::Print (const char* name)
{
   asn1Print_CMP_PollReqContent (name, &msgData);
}

void asn1Print_CMP_PollRepContent_element 
   (const char* name, const ASN1T_CMP_PollRepContent_element* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("certReqId", pvalue->certReqId);

   rtxPrintIndent ();
   rtxPrintInteger ("checkAfter", pvalue->checkAfter);

   if (pvalue->m.reasonPresent) {
      asn1Print_CMP_PKIFreeText ("reason", &pvalue->reason);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_PollRepContent_element::Print (const char* name)
{
   asn1Print_CMP_PollRepContent_element (name, &msgData);
}

void asn1Print_CMP_PollRepContent 
   (const char* name, const ASN1T_CMP_PollRepContent* pvalue)
{
   ASN1T_CMP_PollRepContent_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_PollRepContent_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_PollRepContent_element (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_PollRepContent::Print (const char* name)
{
   asn1Print_CMP_PollRepContent (name, &msgData);
}

void asn1Print_CMP_PKIBody (const char* name, const ASN1T_CMP_PKIBody* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* ir */
      case 1:
      {
         asn1Print_CRMF_CertReqMessages ("ir", pvalue->u.ir);
         break;
      }
      /* ip */
      case 2:
      {
         asn1Print_CMP_CertRepMessage ("ip", pvalue->u.ip);
         break;
      }
      /* cr */
      case 3:
      {
         asn1Print_CRMF_CertReqMessages ("cr", pvalue->u.cr);
         break;
      }
      /* cp */
      case 4:
      {
         asn1Print_CMP_CertRepMessage ("cp", pvalue->u.cp);
         break;
      }
      /* p10cr */
      case 5:
      {
         asn1Print_PKCS10_CertificationRequest ("p10cr", pvalue->u.p10cr);
         break;
      }
      /* popdecc */
      case 6:
      {
         asn1Print_CMP_POPODecKeyChallContent ("popdecc", pvalue->u.popdecc);
         break;
      }
      /* popdecr */
      case 7:
      {
         asn1Print_CMP_POPODecKeyRespContent ("popdecr", pvalue->u.popdecr);
         break;
      }
      /* kur */
      case 8:
      {
         asn1Print_CRMF_CertReqMessages ("kur", pvalue->u.kur);
         break;
      }
      /* kup */
      case 9:
      {
         asn1Print_CMP_CertRepMessage ("kup", pvalue->u.kup);
         break;
      }
      /* krr */
      case 10:
      {
         asn1Print_CRMF_CertReqMessages ("krr", pvalue->u.krr);
         break;
      }
      /* krp */
      case 11:
      {
         asn1Print_CMP_KeyRecRepContent ("krp", pvalue->u.krp);
         break;
      }
      /* rr */
      case 12:
      {
         asn1Print_CMP_RevReqContent ("rr", pvalue->u.rr);
         break;
      }
      /* rp */
      case 13:
      {
         asn1Print_CMP_RevRepContent ("rp", pvalue->u.rp);
         break;
      }
      /* ccr */
      case 14:
      {
         asn1Print_CRMF_CertReqMessages ("ccr", pvalue->u.ccr);
         break;
      }
      /* ccp */
      case 15:
      {
         asn1Print_CMP_CertRepMessage ("ccp", pvalue->u.ccp);
         break;
      }
      /* ckuann */
      case 16:
      {
         asn1Print_CMP_CAKeyUpdAnnContent ("ckuann", pvalue->u.ckuann);
         break;
      }
      /* cann */
      case 17:
      {
         asn1Print_CMP_CertAnnContent ("cann", pvalue->u.cann);
         break;
      }
      /* rann */
      case 18:
      {
         asn1Print_CMP_RevAnnContent ("rann", pvalue->u.rann);
         break;
      }
      /* crlann */
      case 19:
      {
         asn1Print_CMP_CRLAnnContent ("crlann", pvalue->u.crlann);
         break;
      }
      /* pkiconf */
      case 20:
      {
         asn1Print_CMP_PKIConfirmContent ("pkiconf");
         break;
      }
      /* nested */
      case 21:
      {
         asn1Print_CMP_NestedMessageContent ("nested", 
            (ASN1T_CMP_NestedMessageContent*)pvalue->u.nested);
         break;
      }
      /* genm */
      case 22:
      {
         asn1Print_CMP_GenMsgContent ("genm", pvalue->u.genm);
         break;
      }
      /* genp */
      case 23:
      {
         asn1Print_CMP_GenRepContent ("genp", pvalue->u.genp);
         break;
      }
      /* error */
      case 24:
      {
         asn1Print_CMP_ErrorMsgContent ("error", pvalue->u.error);
         break;
      }
      /* certConf */
      case 25:
      {
         asn1Print_CMP_CertConfirmContent ("certConf", pvalue->u.certConf);
         break;
      }
      /* pollReq */
      case 26:
      {
         asn1Print_CMP_PollReqContent ("pollReq", pvalue->u.pollReq);
         break;
      }
      /* pollRep */
      case 27:
      {
         asn1Print_CMP_PollRepContent ("pollRep", pvalue->u.pollRep);
         break;
      }
      /* bcr */
      case 28:
      {
         asn1Print_CRMF_CertReqMessages ("bcr", pvalue->u.bcr);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_PKIBody::Print (const char* name)
{
   asn1Print_CMP_PKIBody (name, &msgData);
}

void asn1Print_CMP_PKIMessage_extraCerts 
   (const char* name, const ASN1T_CMP_PKIMessage_extraCerts* pvalue)
{
   ASN1T_CMP_CMPCertificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_CMPCertificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_CMPCertificate (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_PKIMessage_extraCerts::Print (const char* name)
{
   asn1Print_CMP_PKIMessage_extraCerts (name, &msgData);
}

void asn1Print_CMP_PKIMessage 
   (const char* name, const ASN1T_CMP_PKIMessage* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_PKIHeader ("header", &pvalue->header);

   asn1Print_CMP_PKIBody ("body", &pvalue->body);

   if (pvalue->m.protectionPresent) {
      asn1Print_CMP_PKIProtection ("protection", &pvalue->protection);
   }

   if (pvalue->m.extraCertsPresent) {
      asn1Print_CMP_PKIMessage_extraCerts ("extraCerts", &pvalue->extraCerts);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_PKIMessage::Print (const char* name)
{
   asn1Print_CMP_PKIMessage (name, &msgData);
}

void asn1Print_CMP_PKIMessages 
   (const char* name, const ASN1T_CMP_PKIMessages* pvalue)
{
   ASN1T_CMP_PKIMessage* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_CMP_PKIMessage*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_CMP_PKIMessage (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_CMP_PKIMessages::Print (const char* name)
{
   asn1Print_CMP_PKIMessages (name, &msgData);
}

void asn1Print_CMP_NestedMessageContent 
   (const char* name, const ASN1T_CMP_NestedMessageContent* pvalue)
{
   asn1Print_CMP_PKIMessages (name, pvalue);
}

void ASN1C_CMP_NestedMessageContent::Print (const char* name)
{
   asn1Print_CMP_NestedMessageContent (name, &msgData);
}

void asn1Print_CMP_OOBCert (const char* name, const ASN1T_CMP_OOBCert* pvalue)
{
   asn1Print_CMP_CMPCertificate (name, pvalue);
}

void ASN1C_CMP_OOBCert::Print (const char* name)
{
   asn1Print_CMP_OOBCert (name, &msgData);
}

void asn1Print_CMP_ProtectedPart 
   (const char* name, const ASN1T_CMP_ProtectedPart* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_CMP_PKIHeader ("header", &pvalue->header);

   asn1Print_CMP_PKIBody ("body", &pvalue->body);

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_ProtectedPart::Print (const char* name)
{
   asn1Print_CMP_ProtectedPart (name, &msgData);
}

void asn1Print_CMP_PBMParameter 
   (const char* name, const ASN1T_CMP_PBMParameter* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintHexStr ("salt", pvalue->salt.numocts, pvalue->salt.data);

   asn1Print_EXP_AlgorithmIdentifier ("owf", &pvalue->owf);

   rtxPrintIndent ();
   rtxPrintInteger ("iterationCount", pvalue->iterationCount);

   asn1Print_EXP_AlgorithmIdentifier ("mac", &pvalue->mac);

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_PBMParameter::Print (const char* name)
{
   asn1Print_CMP_PBMParameter (name, &msgData);
}

void asn1Print_CMP_DHBMParameter 
   (const char* name, const ASN1T_CMP_DHBMParameter* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("owf", &pvalue->owf);

   asn1Print_EXP_AlgorithmIdentifier ("mac", &pvalue->mac);

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_DHBMParameter::Print (const char* name)
{
   asn1Print_CMP_DHBMParameter (name, &msgData);
}

void asn1Print_CMP_OOBCertHash 
   (const char* name, const ASN1T_CMP_OOBCertHash* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.hashAlgPresent) {
      asn1Print_EXP_AlgorithmIdentifier ("hashAlg", &pvalue->hashAlg);
   }

   if (pvalue->m.certIdPresent) {
      asn1Print_CRMF_CertId ("certId", &pvalue->certId);
   }

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("hashVal", pvalue->hashVal.numbits, pvalue->hashVal.data);

   rtxPrintCloseBrace ();
}

void ASN1C_CMP_OOBCertHash::Print (const char* name)
{
   asn1Print_CMP_OOBCertHash (name, &msgData);
}

