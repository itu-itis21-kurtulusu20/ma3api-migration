/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "pkcs10.h"
#include "rtxsrc/rtxCommon.h"

ASN1C_PKCS10_Attributes::ASN1C_PKCS10_Attributes
    (ASN1T_PKCS10_Attributes& data) : ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS10_Attributes::ASN1C_PKCS10_Attributes (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKCS10_Attributes& data) : ASN1CSeqOfList(msgBuf, data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS10_Attributes::ASN1C_PKCS10_Attributes (OSRTContext &context
   , ASN1T_PKCS10_Attributes& data) : ASN1CSeqOfList(context, data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKCS10_Attributes::ASN1C_PKCS10_Attributes (ASN1CType& ccobj
   , ASN1T_PKCS10_Attributes& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKCS10_Attributes::Append (ASN1T_EXP_Attribute* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_Attribute* ASN1C_PKCS10_Attributes::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_Attribute));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Attribute;
}

ASN1T_EXP_Attribute* ASN1C_PKCS10_Attributes::AppendNewElement ()
{
   ASN1T_EXP_Attribute* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKCS10_Attributes::~ASN1T_PKCS10_Attributes ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS10_Attributes (pctxt, this);
   }
}

int ASN1C_PKCS10_Attributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS10_Attributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS10_Attributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS10_Attributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS10_Attributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS10_Attributes (ASN1T_PKCS10_Attributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS10_Attributes;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKCS10_Attributes (OSCTXT *pctxt, 
   ASN1T_PKCS10_Attributes* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_Attribute* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_Attribute*)pnode->data;
      asn1Free_EXP_Attribute (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKCS10_Attributes::MemFree ()
{
   asn1Free_PKCS10_Attributes (getCtxtPtr(), &msgData);
}

ASN1T_PKCS10_CertificationRequestInfo* 
   new_ASN1T_PKCS10_CertificationRequestInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS10_CertificationRequestInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS10_CertificationRequestInfo;
}

ASN1C_PKCS10_CertificationRequestInfo::ASN1C_PKCS10_CertificationRequestInfo
    (ASN1T_PKCS10_CertificationRequestInfo& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS10_CertificationRequestInfo::ASN1C_PKCS10_CertificationRequestInfo (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS10_CertificationRequestInfo& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS10_CertificationRequestInfo::ASN1C_PKCS10_CertificationRequestInfo (
   OSRTContext &context, ASN1T_PKCS10_CertificationRequestInfo& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS10_CertificationRequestInfo::ASN1T_PKCS10_CertificationRequestInfo ()
{
}

ASN1T_PKCS10_CertificationRequestInfo::~ASN1T_PKCS10_CertificationRequestInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS10_CertificationRequestInfo (pctxt, this);
   }
}

int ASN1C_PKCS10_CertificationRequestInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS10_CertificationRequestInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS10_CertificationRequestInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS10_CertificationRequestInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS10_CertificationRequestInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS10_CertificationRequestInfo (
   ASN1T_PKCS10_CertificationRequestInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS10_CertificationRequestInfo;
}

void asn1Free_PKCS10_CertificationRequestInfo (OSCTXT *pctxt, 
   ASN1T_PKCS10_CertificationRequestInfo* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_Name (pctxt, &pvalue->subject);
   asn1Free_EXP_SubjectPublicKeyInfo (pctxt, &pvalue->subjectPKInfo);
   asn1Free_PKCS10_Attributes (pctxt, &pvalue->attributes);
}

void ASN1C_PKCS10_CertificationRequestInfo::MemFree ()
{
   asn1Free_PKCS10_CertificationRequestInfo (getCtxtPtr(), &msgData);
}

ASN1T_PKCS10_CertificationRequest* 
   new_ASN1T_PKCS10_CertificationRequest (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKCS10_CertificationRequest));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKCS10_CertificationRequest;
}

ASN1C_PKCS10_CertificationRequest::ASN1C_PKCS10_CertificationRequest
    (ASN1T_PKCS10_CertificationRequest& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKCS10_CertificationRequest::ASN1C_PKCS10_CertificationRequest (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKCS10_CertificationRequest& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKCS10_CertificationRequest::ASN1C_PKCS10_CertificationRequest (
   OSRTContext &context, ASN1T_PKCS10_CertificationRequest& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKCS10_CertificationRequest::ASN1T_PKCS10_CertificationRequest ()
{
}

ASN1T_PKCS10_CertificationRequest::~ASN1T_PKCS10_CertificationRequest ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKCS10_CertificationRequest (pctxt, this);
   }
}

int ASN1C_PKCS10_CertificationRequest::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKCS10_CertificationRequest (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKCS10_CertificationRequest::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKCS10_CertificationRequest;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKCS10_CertificationRequest (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKCS10_CertificationRequest (
   ASN1T_PKCS10_CertificationRequest* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKCS10_CertificationRequest;
}

void asn1Free_PKCS10_CertificationRequest (OSCTXT *pctxt, 
   ASN1T_PKCS10_CertificationRequest* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKCS10_CertificationRequestInfo (pctxt, &pvalue->certificationRequestInfo);
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm);
   if (pvalue->signature_.numbits > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->signature_.data);
      pvalue->signature_.numbits = 0;
      pvalue->signature_.data = 0;
   }
}

void ASN1C_PKCS10_CertificationRequest::MemFree ()
{
   asn1Free_PKCS10_CertificationRequest (getCtxtPtr(), &msgData);
}

