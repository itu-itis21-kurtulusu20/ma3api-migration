/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "Explicit.h"
#include "UsefulDefinitions.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID EXP_id_pkix = {
   7,
   { 1, 3, 6, 1, 5, 5, 7 }
} ;
ASN1OBJID EXP_id_pe = {
   8,
   { 1, 3, 6, 1, 5, 5, 7, 1 }
} ;
ASN1OBJID EXP_id_qt = {
   8,
   { 1, 3, 6, 1, 5, 5, 7, 2 }
} ;
ASN1OBJID EXP_id_kp = {
   8,
   { 1, 3, 6, 1, 5, 5, 7, 3 }
} ;
ASN1OBJID EXP_id_ad = {
   8,
   { 1, 3, 6, 1, 5, 5, 7, 48 }
} ;
ASN1OBJID EXP_id_ad_ocsp = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 48, 1 }
} ;
ASN1OBJID EXP_id_ad_caIssuers = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 48, 2 }
} ;
ASN1OBJID EXP_id_ad_timeStamping = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 48, 3 }
} ;
ASN1OBJID EXP_id_ad_caRepository = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 48, 5 }
} ;
ASN1OBJID EXP_id_qt_cps = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 2, 1 }
} ;
ASN1OBJID EXP_id_qt_unotice = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 2, 2 }
} ;
ASN1OBJID EXP_id_at_name = {
   4,
   { 2, 5, 4, 41 }
} ;
ASN1OBJID EXP_id_at_surname = {
   4,
   { 2, 5, 4, 4 }
} ;
ASN1OBJID EXP_id_at_givenName = {
   4,
   { 2, 5, 4, 42 }
} ;
ASN1OBJID EXP_id_at_commonName = {
   4,
   { 2, 5, 4, 3 }
} ;
ASN1OBJID EXP_id_at_localityName = {
   4,
   { 2, 5, 4, 7 }
} ;
ASN1OBJID EXP_id_at_stateOrProvinceName = {
   4,
   { 2, 5, 4, 8 }
} ;
ASN1OBJID EXP_id_at_organizationName = {
   4,
   { 2, 5, 4, 10 }
} ;
ASN1OBJID EXP_id_at_organizationalUnitName = {
   4,
   { 2, 5, 4, 11 }
} ;
ASN1OBJID EXP_id_at_title = {
   4,
   { 2, 5, 4, 12 }
} ;
ASN1OBJID EXP_id_at_countryName = {
   4,
   { 2, 5, 4, 6 }
} ;
ASN1OBJID EXP_id_at_serialNumber = {
   4,
   { 2, 5, 4, 5 }
} ;
ASN1OBJID EXP_id_at_pseudonym = {
   4,
   { 2, 5, 4, 65 }
} ;
ASN1OBJID EXP_id_domainComponent = {
   7,
   { 0, 9, 2342, 19200300, 100, 1, 25 }
} ;
ASN1OBJID EXP_pkcs_9 = {
   6,
   { 1, 2, 840, 113549, 1, 9 }
} ;
ASN1OBJID EXP_id_emailAddress = {
   7,
   { 1, 2, 840, 113549, 1, 9, 1 }
} ;

ASN1T_EXP_Version* new_ASN1T_EXP_Version (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_Version));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Version;
}

ASN1C_EXP_Version::ASN1C_EXP_Version (ASN1T_EXP_Version& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_Version::ASN1C_EXP_Version (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_Version& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_Version::ASN1C_EXP_Version (OSRTContext &context
   , ASN1T_EXP_Version& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_Version::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_Version (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_Version::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_Version (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_EXP_CertificateSerialNumber* 
   new_ASN1T_EXP_CertificateSerialNumber (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_CertificateSerialNumber));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_CertificateSerialNumber;
}

ASN1C_EXP_CertificateSerialNumber::ASN1C_EXP_CertificateSerialNumber
    (ASN1T_EXP_CertificateSerialNumber& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_CertificateSerialNumber::ASN1C_EXP_CertificateSerialNumber (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_CertificateSerialNumber& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_CertificateSerialNumber::ASN1C_EXP_CertificateSerialNumber (
   OSRTContext &context, ASN1T_EXP_CertificateSerialNumber& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_CertificateSerialNumber::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_CertificateSerialNumber (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_CertificateSerialNumber::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_CertificateSerialNumber (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_EXP_AttributeType* new_ASN1T_EXP_AttributeType (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_AttributeType));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_AttributeType;
}

ASN1C_EXP_AttributeType::ASN1C_EXP_AttributeType
    (ASN1T_EXP_AttributeType& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_AttributeType::ASN1C_EXP_AttributeType (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_AttributeType& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_AttributeType::ASN1C_EXP_AttributeType (OSRTContext &context
   , ASN1T_EXP_AttributeType& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_AttributeType::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_AttributeType (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_AttributeType::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_AttributeType (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_AttributeType (ASN1T_EXP_AttributeType* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_AttributeType;
}

ASN1T_EXP_AttributeValue* new_ASN1T_EXP_AttributeValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_AttributeValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_AttributeValue;
}

ASN1C_EXP_AttributeValue::ASN1C_EXP_AttributeValue
    (ASN1T_EXP_AttributeValue& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_AttributeValue::ASN1C_EXP_AttributeValue (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_AttributeValue& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_AttributeValue::ASN1C_EXP_AttributeValue (OSRTContext &context
   , ASN1T_EXP_AttributeValue& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_AttributeValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_AttributeValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_AttributeValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_AttributeValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_AttributeValue (ASN1T_EXP_AttributeValue* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_AttributeValue;
}

void asn1Free_EXP_AttributeValue (OSCTXT *pctxt, 
   ASN1T_EXP_AttributeValue* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->data);
}

void ASN1C_EXP_AttributeValue::MemFree ()
{
   asn1Free_EXP_AttributeValue (getCtxtPtr(), &msgData);
}

ASN1T_EXP_UniqueIdentifier* new_ASN1T_EXP_UniqueIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_UniqueIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_UniqueIdentifier;
}

ASN1C_EXP_UniqueIdentifier::ASN1C_EXP_UniqueIdentifier
    (ASN1T_EXP_UniqueIdentifier& data) : ASN1CBitStr (data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_UniqueIdentifier::ASN1C_EXP_UniqueIdentifier (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_UniqueIdentifier& data) : 
   ASN1CBitStr (msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_UniqueIdentifier::ASN1C_EXP_UniqueIdentifier (OSRTContext &context
   , ASN1T_EXP_UniqueIdentifier& data) : ASN1CBitStr (context, data
   ), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_UniqueIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_UniqueIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_UniqueIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_UniqueIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_UniqueIdentifier (ASN1T_EXP_UniqueIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_UniqueIdentifier;
}

void asn1Free_EXP_UniqueIdentifier (OSCTXT *pctxt, 
   ASN1T_EXP_UniqueIdentifier* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numbits > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numbits = 0;
      pvalue->data = 0;
   }
}

void ASN1C_EXP_UniqueIdentifier::MemFree ()
{
   asn1Free_EXP_UniqueIdentifier (getCtxtPtr(), &msgData);
}

ASN1C_EXP_X121Address::ASN1C_EXP_X121Address (ASN1T_EXP_X121Address& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X121Address::ASN1C_EXP_X121Address (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_X121Address& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X121Address::ASN1C_EXP_X121Address (OSRTContext &context
   , ASN1T_EXP_X121Address& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_X121Address::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X121Address (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_X121Address::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_X121Address (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_X121Address (OSCTXT *pctxt, ASN1T_EXP_X121Address pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_X121Address::MemFree ()
{
   asn1Free_EXP_X121Address (getCtxtPtr(), msgData);
}

ASN1C_EXP_NetworkAddress::ASN1C_EXP_NetworkAddress
    (ASN1T_EXP_NetworkAddress& data) : ASN1C_EXP_X121Address (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_NetworkAddress::ASN1C_EXP_NetworkAddress (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_NetworkAddress& data) : ASN1C_EXP_X121Address (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_NetworkAddress::ASN1C_EXP_NetworkAddress (OSRTContext &context
   , ASN1T_EXP_NetworkAddress& data) : ASN1C_EXP_X121Address (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_NetworkAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_NetworkAddress (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_NetworkAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_NetworkAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_NetworkAddress (OSCTXT *pctxt, 
   ASN1T_EXP_NetworkAddress pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_X121Address (pctxt, pvalue);
}

void ASN1C_EXP_NetworkAddress::MemFree ()
{
   asn1Free_EXP_NetworkAddress (getCtxtPtr(), msgData);
}

ASN1C_EXP_TerminalIdentifier::ASN1C_EXP_TerminalIdentifier
    (ASN1T_EXP_TerminalIdentifier& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TerminalIdentifier::ASN1C_EXP_TerminalIdentifier (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_TerminalIdentifier& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TerminalIdentifier::ASN1C_EXP_TerminalIdentifier (
   OSRTContext &context, ASN1T_EXP_TerminalIdentifier& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_TerminalIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TerminalIdentifier (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_TerminalIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_TerminalIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_TerminalIdentifier (OSCTXT *pctxt, 
   ASN1T_EXP_TerminalIdentifier pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_TerminalIdentifier::MemFree ()
{
   asn1Free_EXP_TerminalIdentifier (getCtxtPtr(), msgData);
}

ASN1C_EXP_OrganizationName::ASN1C_EXP_OrganizationName
    (ASN1T_EXP_OrganizationName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_OrganizationName::ASN1C_EXP_OrganizationName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_OrganizationName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_OrganizationName::ASN1C_EXP_OrganizationName (OSRTContext &context
   , ASN1T_EXP_OrganizationName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_OrganizationName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_OrganizationName (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_OrganizationName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_OrganizationName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_OrganizationName (OSCTXT *pctxt, 
   ASN1T_EXP_OrganizationName pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_OrganizationName::MemFree ()
{
   asn1Free_EXP_OrganizationName (getCtxtPtr(), msgData);
}

ASN1C_EXP_NumericUserIdentifier::ASN1C_EXP_NumericUserIdentifier
    (ASN1T_EXP_NumericUserIdentifier& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_NumericUserIdentifier::ASN1C_EXP_NumericUserIdentifier (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_NumericUserIdentifier& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_NumericUserIdentifier::ASN1C_EXP_NumericUserIdentifier (
   OSRTContext &context, ASN1T_EXP_NumericUserIdentifier& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_NumericUserIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_NumericUserIdentifier (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_NumericUserIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_NumericUserIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_NumericUserIdentifier (OSCTXT *pctxt, 
   ASN1T_EXP_NumericUserIdentifier pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_NumericUserIdentifier::MemFree ()
{
   asn1Free_EXP_NumericUserIdentifier (getCtxtPtr(), msgData);
}

ASN1C_EXP_OrganizationalUnitName::ASN1C_EXP_OrganizationalUnitName
    (ASN1T_EXP_OrganizationalUnitName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_OrganizationalUnitName::ASN1C_EXP_OrganizationalUnitName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_OrganizationalUnitName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_OrganizationalUnitName::ASN1C_EXP_OrganizationalUnitName (
   OSRTContext &context, ASN1T_EXP_OrganizationalUnitName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_OrganizationalUnitName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_OrganizationalUnitName (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_OrganizationalUnitName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_OrganizationalUnitName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_OrganizationalUnitName (OSCTXT *pctxt, 
   ASN1T_EXP_OrganizationalUnitName pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_OrganizationalUnitName::MemFree ()
{
   asn1Free_EXP_OrganizationalUnitName (getCtxtPtr(), msgData);
}

ASN1C_EXP_CommonName::ASN1C_EXP_CommonName (ASN1T_EXP_CommonName& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_CommonName::ASN1C_EXP_CommonName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_CommonName& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_CommonName::ASN1C_EXP_CommonName (OSRTContext &context
   , ASN1T_EXP_CommonName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_CommonName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_CommonName (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_CommonName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_CommonName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_CommonName (OSCTXT *pctxt, ASN1T_EXP_CommonName pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_CommonName::MemFree ()
{
   asn1Free_EXP_CommonName (getCtxtPtr(), msgData);
}

ASN1C_EXP_TeletexCommonName::ASN1C_EXP_TeletexCommonName
    (ASN1T_EXP_TeletexCommonName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TeletexCommonName::ASN1C_EXP_TeletexCommonName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_TeletexCommonName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TeletexCommonName::ASN1C_EXP_TeletexCommonName (OSRTContext &context
   , ASN1T_EXP_TeletexCommonName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_TeletexCommonName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TeletexCommonName (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_TeletexCommonName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_TeletexCommonName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_TeletexCommonName (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexCommonName pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_TeletexCommonName::MemFree ()
{
   asn1Free_EXP_TeletexCommonName (getCtxtPtr(), msgData);
}

ASN1C_EXP_TeletexOrganizationName::ASN1C_EXP_TeletexOrganizationName
    (ASN1T_EXP_TeletexOrganizationName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TeletexOrganizationName::ASN1C_EXP_TeletexOrganizationName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_TeletexOrganizationName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TeletexOrganizationName::ASN1C_EXP_TeletexOrganizationName (
   OSRTContext &context, ASN1T_EXP_TeletexOrganizationName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_TeletexOrganizationName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TeletexOrganizationName (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_TeletexOrganizationName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_TeletexOrganizationName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_TeletexOrganizationName (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexOrganizationName pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_TeletexOrganizationName::MemFree ()
{
   asn1Free_EXP_TeletexOrganizationName (getCtxtPtr(), msgData);
}

ASN1C_EXP_TeletexOrganizationalUnitName::
   ASN1C_EXP_TeletexOrganizationalUnitName
    (ASN1T_EXP_TeletexOrganizationalUnitName& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TeletexOrganizationalUnitName::
   ASN1C_EXP_TeletexOrganizationalUnitName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_TeletexOrganizationalUnitName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TeletexOrganizationalUnitName::
   ASN1C_EXP_TeletexOrganizationalUnitName (OSRTContext &context
   , ASN1T_EXP_TeletexOrganizationalUnitName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_TeletexOrganizationalUnitName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TeletexOrganizationalUnitName (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_TeletexOrganizationalUnitName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_TeletexOrganizationalUnitName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_TeletexOrganizationalUnitName (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitName pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_TeletexOrganizationalUnitName::MemFree ()
{
   asn1Free_EXP_TeletexOrganizationalUnitName (getCtxtPtr(), msgData);
}

ASN1C_EXP_PDSName::ASN1C_EXP_PDSName (ASN1T_EXP_PDSName& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PDSName::ASN1C_EXP_PDSName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_PDSName& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PDSName::ASN1C_EXP_PDSName (OSRTContext &context
   , ASN1T_EXP_PDSName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_PDSName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PDSName (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_PDSName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_PDSName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_PDSName (OSCTXT *pctxt, ASN1T_EXP_PDSName pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_PDSName::MemFree ()
{
   asn1Free_EXP_PDSName (getCtxtPtr(), msgData);
}

ASN1T_EXP_PDSParameter* new_ASN1T_EXP_PDSParameter (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PDSParameter));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PDSParameter;
}

ASN1C_EXP_PDSParameter::ASN1C_EXP_PDSParameter (ASN1T_EXP_PDSParameter& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PDSParameter::ASN1C_EXP_PDSParameter (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_PDSParameter& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PDSParameter::ASN1C_EXP_PDSParameter (OSRTContext &context
   , ASN1T_EXP_PDSParameter& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_PDSParameter::ASN1T_EXP_PDSParameter ()
{
   m.printable_stringPresent = 0;
   printable_string = 0;
   m.teletex_stringPresent = 0;
   teletex_string = 0;
}

ASN1T_EXP_PDSParameter::~ASN1T_EXP_PDSParameter ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_PDSParameter (pctxt, this);
   }
}

int ASN1C_EXP_PDSParameter::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PDSParameter (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PDSParameter::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PDSParameter;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PDSParameter (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PDSParameter (ASN1T_EXP_PDSParameter* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PDSParameter;
}

void asn1Free_EXP_PDSParameter (OSCTXT *pctxt, ASN1T_EXP_PDSParameter* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.printable_stringPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->printable_string);
   }
   if (pvalue->m.teletex_stringPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->teletex_string);
   }
}

void ASN1C_EXP_PDSParameter::MemFree ()
{
   asn1Free_EXP_PDSParameter (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PhysicalDeliveryOfficeName* 
   new_ASN1T_EXP_PhysicalDeliveryOfficeName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PhysicalDeliveryOfficeName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PhysicalDeliveryOfficeName;
}

ASN1C_EXP_PhysicalDeliveryOfficeName::ASN1C_EXP_PhysicalDeliveryOfficeName
    (ASN1T_EXP_PhysicalDeliveryOfficeName& data) : 
   ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PhysicalDeliveryOfficeName::ASN1C_EXP_PhysicalDeliveryOfficeName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_PhysicalDeliveryOfficeName& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PhysicalDeliveryOfficeName::ASN1C_EXP_PhysicalDeliveryOfficeName (
   OSRTContext &context, ASN1T_EXP_PhysicalDeliveryOfficeName& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_PhysicalDeliveryOfficeName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PhysicalDeliveryOfficeName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PhysicalDeliveryOfficeName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PhysicalDeliveryOfficeName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PhysicalDeliveryOfficeName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PhysicalDeliveryOfficeName (
   ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PhysicalDeliveryOfficeName;
}

void asn1Free_EXP_PhysicalDeliveryOfficeName (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_PhysicalDeliveryOfficeName::MemFree ()
{
   asn1Free_EXP_PhysicalDeliveryOfficeName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PhysicalDeliveryOfficeNumber* 
   new_ASN1T_EXP_PhysicalDeliveryOfficeNumber (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PhysicalDeliveryOfficeNumber));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PhysicalDeliveryOfficeNumber;
}

ASN1C_EXP_PhysicalDeliveryOfficeNumber::ASN1C_EXP_PhysicalDeliveryOfficeNumber
    (ASN1T_EXP_PhysicalDeliveryOfficeNumber& data) : 
   ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PhysicalDeliveryOfficeNumber::
   ASN1C_EXP_PhysicalDeliveryOfficeNumber (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_PhysicalDeliveryOfficeNumber& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PhysicalDeliveryOfficeNumber::
   ASN1C_EXP_PhysicalDeliveryOfficeNumber (OSRTContext &context
   , ASN1T_EXP_PhysicalDeliveryOfficeNumber& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_PhysicalDeliveryOfficeNumber::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PhysicalDeliveryOfficeNumber (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PhysicalDeliveryOfficeNumber::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PhysicalDeliveryOfficeNumber;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PhysicalDeliveryOfficeNumber (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PhysicalDeliveryOfficeNumber (
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PhysicalDeliveryOfficeNumber;
}

void asn1Free_EXP_PhysicalDeliveryOfficeNumber (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_PhysicalDeliveryOfficeNumber::MemFree ()
{
   asn1Free_EXP_PhysicalDeliveryOfficeNumber (getCtxtPtr(), &msgData);
}

ASN1T_EXP_ExtensionORAddressComponents* 
   new_ASN1T_EXP_ExtensionORAddressComponents (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_ExtensionORAddressComponents));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_ExtensionORAddressComponents;
}

ASN1C_EXP_ExtensionORAddressComponents::ASN1C_EXP_ExtensionORAddressComponents
    (ASN1T_EXP_ExtensionORAddressComponents& data) : 
   ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_ExtensionORAddressComponents::
   ASN1C_EXP_ExtensionORAddressComponents (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_ExtensionORAddressComponents& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_ExtensionORAddressComponents::
   ASN1C_EXP_ExtensionORAddressComponents (OSRTContext &context
   , ASN1T_EXP_ExtensionORAddressComponents& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_ExtensionORAddressComponents::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_ExtensionORAddressComponents (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_ExtensionORAddressComponents::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_ExtensionORAddressComponents;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_ExtensionORAddressComponents (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_ExtensionORAddressComponents (
   ASN1T_EXP_ExtensionORAddressComponents* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_ExtensionORAddressComponents;
}

void asn1Free_EXP_ExtensionORAddressComponents (OSCTXT *pctxt, 
   ASN1T_EXP_ExtensionORAddressComponents* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_ExtensionORAddressComponents::MemFree ()
{
   asn1Free_EXP_ExtensionORAddressComponents (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PhysicalDeliveryPersonalName* 
   new_ASN1T_EXP_PhysicalDeliveryPersonalName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PhysicalDeliveryPersonalName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PhysicalDeliveryPersonalName;
}

ASN1C_EXP_PhysicalDeliveryPersonalName::ASN1C_EXP_PhysicalDeliveryPersonalName
    (ASN1T_EXP_PhysicalDeliveryPersonalName& data) : 
   ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PhysicalDeliveryPersonalName::
   ASN1C_EXP_PhysicalDeliveryPersonalName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_PhysicalDeliveryPersonalName& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PhysicalDeliveryPersonalName::
   ASN1C_EXP_PhysicalDeliveryPersonalName (OSRTContext &context
   , ASN1T_EXP_PhysicalDeliveryPersonalName& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_PhysicalDeliveryPersonalName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PhysicalDeliveryPersonalName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PhysicalDeliveryPersonalName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PhysicalDeliveryPersonalName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PhysicalDeliveryPersonalName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PhysicalDeliveryPersonalName (
   ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PhysicalDeliveryPersonalName;
}

void asn1Free_EXP_PhysicalDeliveryPersonalName (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_PhysicalDeliveryPersonalName::MemFree ()
{
   asn1Free_EXP_PhysicalDeliveryPersonalName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PhysicalDeliveryOrganizationName* 
   new_ASN1T_EXP_PhysicalDeliveryOrganizationName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PhysicalDeliveryOrganizationName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PhysicalDeliveryOrganizationName;
}

ASN1C_EXP_PhysicalDeliveryOrganizationName::
   ASN1C_EXP_PhysicalDeliveryOrganizationName
    (ASN1T_EXP_PhysicalDeliveryOrganizationName& data) : 
   ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PhysicalDeliveryOrganizationName::
   ASN1C_EXP_PhysicalDeliveryOrganizationName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_PhysicalDeliveryOrganizationName& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PhysicalDeliveryOrganizationName::
   ASN1C_EXP_PhysicalDeliveryOrganizationName (OSRTContext &context
   , ASN1T_EXP_PhysicalDeliveryOrganizationName& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_PhysicalDeliveryOrganizationName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PhysicalDeliveryOrganizationName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PhysicalDeliveryOrganizationName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PhysicalDeliveryOrganizationName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PhysicalDeliveryOrganizationName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PhysicalDeliveryOrganizationName (
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PhysicalDeliveryOrganizationName;
}

void asn1Free_EXP_PhysicalDeliveryOrganizationName (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_PhysicalDeliveryOrganizationName::MemFree ()
{
   asn1Free_EXP_PhysicalDeliveryOrganizationName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* 
   new_ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents;
}

ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::
   ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents
    (ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& data) : 
   ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::
   ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::
   ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents (OSRTContext &context
   , ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_ExtensionPhysicalDeliveryAddressComponents (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_ExtensionPhysicalDeliveryAddressComponents (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_ExtensionPhysicalDeliveryAddressComponents (
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents;
}

void asn1Free_EXP_ExtensionPhysicalDeliveryAddressComponents (OSCTXT *pctxt, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::MemFree ()
{
   asn1Free_EXP_ExtensionPhysicalDeliveryAddressComponents (getCtxtPtr(), &msgData);
}

ASN1T_EXP_StreetAddress* new_ASN1T_EXP_StreetAddress (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_StreetAddress));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_StreetAddress;
}

ASN1C_EXP_StreetAddress::ASN1C_EXP_StreetAddress
    (ASN1T_EXP_StreetAddress& data) : ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_StreetAddress::ASN1C_EXP_StreetAddress (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_StreetAddress& data) : ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_StreetAddress::ASN1C_EXP_StreetAddress (OSRTContext &context
   , ASN1T_EXP_StreetAddress& data) : ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_StreetAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_StreetAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_StreetAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_StreetAddress;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_StreetAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_StreetAddress (ASN1T_EXP_StreetAddress* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_StreetAddress;
}

void asn1Free_EXP_StreetAddress (OSCTXT *pctxt, 
   ASN1T_EXP_StreetAddress* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_StreetAddress::MemFree ()
{
   asn1Free_EXP_StreetAddress (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PostOfficeBoxAddress* 
   new_ASN1T_EXP_PostOfficeBoxAddress (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PostOfficeBoxAddress));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PostOfficeBoxAddress;
}

ASN1C_EXP_PostOfficeBoxAddress::ASN1C_EXP_PostOfficeBoxAddress
    (ASN1T_EXP_PostOfficeBoxAddress& data) : ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PostOfficeBoxAddress::ASN1C_EXP_PostOfficeBoxAddress (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_PostOfficeBoxAddress& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PostOfficeBoxAddress::ASN1C_EXP_PostOfficeBoxAddress (
   OSRTContext &context, ASN1T_EXP_PostOfficeBoxAddress& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_PostOfficeBoxAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PostOfficeBoxAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PostOfficeBoxAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PostOfficeBoxAddress;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PostOfficeBoxAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PostOfficeBoxAddress (ASN1T_EXP_PostOfficeBoxAddress* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PostOfficeBoxAddress;
}

void asn1Free_EXP_PostOfficeBoxAddress (OSCTXT *pctxt, 
   ASN1T_EXP_PostOfficeBoxAddress* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_PostOfficeBoxAddress::MemFree ()
{
   asn1Free_EXP_PostOfficeBoxAddress (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PosteRestanteAddress* 
   new_ASN1T_EXP_PosteRestanteAddress (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PosteRestanteAddress));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PosteRestanteAddress;
}

ASN1C_EXP_PosteRestanteAddress::ASN1C_EXP_PosteRestanteAddress
    (ASN1T_EXP_PosteRestanteAddress& data) : ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PosteRestanteAddress::ASN1C_EXP_PosteRestanteAddress (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_PosteRestanteAddress& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PosteRestanteAddress::ASN1C_EXP_PosteRestanteAddress (
   OSRTContext &context, ASN1T_EXP_PosteRestanteAddress& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_PosteRestanteAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PosteRestanteAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PosteRestanteAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PosteRestanteAddress;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PosteRestanteAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PosteRestanteAddress (ASN1T_EXP_PosteRestanteAddress* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PosteRestanteAddress;
}

void asn1Free_EXP_PosteRestanteAddress (OSCTXT *pctxt, 
   ASN1T_EXP_PosteRestanteAddress* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_PosteRestanteAddress::MemFree ()
{
   asn1Free_EXP_PosteRestanteAddress (getCtxtPtr(), &msgData);
}

ASN1T_EXP_UniquePostalName* new_ASN1T_EXP_UniquePostalName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_UniquePostalName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_UniquePostalName;
}

ASN1C_EXP_UniquePostalName::ASN1C_EXP_UniquePostalName
    (ASN1T_EXP_UniquePostalName& data) : ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_UniquePostalName::ASN1C_EXP_UniquePostalName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_UniquePostalName& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_UniquePostalName::ASN1C_EXP_UniquePostalName (OSRTContext &context
   , ASN1T_EXP_UniquePostalName& data) : ASN1C_EXP_PDSParameter (context, data)
   
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_UniquePostalName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_UniquePostalName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_UniquePostalName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_UniquePostalName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_UniquePostalName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_UniquePostalName (ASN1T_EXP_UniquePostalName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_UniquePostalName;
}

void asn1Free_EXP_UniquePostalName (OSCTXT *pctxt, 
   ASN1T_EXP_UniquePostalName* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_UniquePostalName::MemFree ()
{
   asn1Free_EXP_UniquePostalName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_LocalPostalAttributes* 
   new_ASN1T_EXP_LocalPostalAttributes (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_LocalPostalAttributes));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_LocalPostalAttributes;
}

ASN1C_EXP_LocalPostalAttributes::ASN1C_EXP_LocalPostalAttributes
    (ASN1T_EXP_LocalPostalAttributes& data) : ASN1C_EXP_PDSParameter (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_LocalPostalAttributes::ASN1C_EXP_LocalPostalAttributes (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_LocalPostalAttributes& data) : 
   ASN1C_EXP_PDSParameter (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_LocalPostalAttributes::ASN1C_EXP_LocalPostalAttributes (
   OSRTContext &context, ASN1T_EXP_LocalPostalAttributes& data) : 
   ASN1C_EXP_PDSParameter (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_LocalPostalAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_LocalPostalAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_LocalPostalAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_LocalPostalAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_LocalPostalAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_LocalPostalAttributes (
   ASN1T_EXP_LocalPostalAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_LocalPostalAttributes;
}

void asn1Free_EXP_LocalPostalAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_LocalPostalAttributes* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_PDSParameter (pctxt, pvalue);
}

void ASN1C_EXP_LocalPostalAttributes::MemFree ()
{
   asn1Free_EXP_LocalPostalAttributes (getCtxtPtr(), &msgData);
}

ASN1T_EXP_TerminalType* new_ASN1T_EXP_TerminalType (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_TerminalType));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_TerminalType;
}

ASN1C_EXP_TerminalType::ASN1C_EXP_TerminalType (ASN1T_EXP_TerminalType& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TerminalType::ASN1C_EXP_TerminalType (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_TerminalType& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TerminalType::ASN1C_EXP_TerminalType (OSRTContext &context
   , ASN1T_EXP_TerminalType& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_TerminalType::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TerminalType (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_TerminalType::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_TerminalType (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1C_EXP_X520countryName::ASN1C_EXP_X520countryName
    (ASN1T_EXP_X520countryName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520countryName::ASN1C_EXP_X520countryName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_X520countryName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520countryName::ASN1C_EXP_X520countryName (OSRTContext &context
   , ASN1T_EXP_X520countryName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_X520countryName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520countryName (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_X520countryName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_X520countryName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_X520countryName (OSCTXT *pctxt, 
   ASN1T_EXP_X520countryName pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_X520countryName::MemFree ()
{
   asn1Free_EXP_X520countryName (getCtxtPtr(), msgData);
}

ASN1C_EXP_X520SerialNumber::ASN1C_EXP_X520SerialNumber
    (ASN1T_EXP_X520SerialNumber& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520SerialNumber::ASN1C_EXP_X520SerialNumber (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_X520SerialNumber& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520SerialNumber::ASN1C_EXP_X520SerialNumber (OSRTContext &context
   , ASN1T_EXP_X520SerialNumber& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_X520SerialNumber::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520SerialNumber (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_X520SerialNumber::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_X520SerialNumber (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_X520SerialNumber (OSCTXT *pctxt, 
   ASN1T_EXP_X520SerialNumber pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_X520SerialNumber::MemFree ()
{
   asn1Free_EXP_X520SerialNumber (getCtxtPtr(), msgData);
}

ASN1C_EXP_DomainComponent::ASN1C_EXP_DomainComponent
    (ASN1T_EXP_DomainComponent& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_DomainComponent::ASN1C_EXP_DomainComponent (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_DomainComponent& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_DomainComponent::ASN1C_EXP_DomainComponent (OSRTContext &context
   , ASN1T_EXP_DomainComponent& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_DomainComponent::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_DomainComponent (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_DomainComponent::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_DomainComponent (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_DomainComponent (OSCTXT *pctxt, 
   ASN1T_EXP_DomainComponent pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_DomainComponent::MemFree ()
{
   asn1Free_EXP_DomainComponent (getCtxtPtr(), msgData);
}

ASN1C_EXP_EmailAddress::ASN1C_EXP_EmailAddress (ASN1T_EXP_EmailAddress& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_EmailAddress::ASN1C_EXP_EmailAddress (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_EmailAddress& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_EmailAddress::ASN1C_EXP_EmailAddress (OSRTContext &context
   , ASN1T_EXP_EmailAddress& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_EXP_EmailAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_EmailAddress (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_EXP_EmailAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_EXP_EmailAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_EXP_EmailAddress (OSCTXT *pctxt, ASN1T_EXP_EmailAddress pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_EXP_EmailAddress::MemFree ()
{
   asn1Free_EXP_EmailAddress (getCtxtPtr(), msgData);
}

ASN1T_EXP_AlgorithmIdentifier* 
   new_ASN1T_EXP_AlgorithmIdentifier (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_AlgorithmIdentifier));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_AlgorithmIdentifier;
}

ASN1C_EXP_AlgorithmIdentifier::ASN1C_EXP_AlgorithmIdentifier
    (ASN1T_EXP_AlgorithmIdentifier& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_AlgorithmIdentifier::ASN1C_EXP_AlgorithmIdentifier (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_AlgorithmIdentifier& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_AlgorithmIdentifier::ASN1C_EXP_AlgorithmIdentifier (
   OSRTContext &context, ASN1T_EXP_AlgorithmIdentifier& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_AlgorithmIdentifier::ASN1T_EXP_AlgorithmIdentifier ()
{
   m.parametersPresent = 0;
}

ASN1T_EXP_AlgorithmIdentifier::~ASN1T_EXP_AlgorithmIdentifier ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_AlgorithmIdentifier (pctxt, this);
   }
}

int ASN1C_EXP_AlgorithmIdentifier::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_AlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_AlgorithmIdentifier::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_AlgorithmIdentifier;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_AlgorithmIdentifier (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_AlgorithmIdentifier (ASN1T_EXP_AlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_AlgorithmIdentifier;
}

void asn1Free_EXP_AlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_EXP_AlgorithmIdentifier* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.parametersPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->parameters.data);
   }
}

void ASN1C_EXP_AlgorithmIdentifier::MemFree ()
{
   asn1Free_EXP_AlgorithmIdentifier (getCtxtPtr(), &msgData);
}

ASN1T_EXP_AttributeTypeAndValue* 
   new_ASN1T_EXP_AttributeTypeAndValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_AttributeTypeAndValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_AttributeTypeAndValue;
}

ASN1C_EXP_AttributeTypeAndValue::ASN1C_EXP_AttributeTypeAndValue
    (ASN1T_EXP_AttributeTypeAndValue& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_AttributeTypeAndValue::ASN1C_EXP_AttributeTypeAndValue (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_AttributeTypeAndValue& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_AttributeTypeAndValue::ASN1C_EXP_AttributeTypeAndValue (
   OSRTContext &context, ASN1T_EXP_AttributeTypeAndValue& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_AttributeTypeAndValue::ASN1T_EXP_AttributeTypeAndValue ()
{
}

ASN1T_EXP_AttributeTypeAndValue::~ASN1T_EXP_AttributeTypeAndValue ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_AttributeTypeAndValue (pctxt, this);
   }
}

int ASN1C_EXP_AttributeTypeAndValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_AttributeTypeAndValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_AttributeTypeAndValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_AttributeTypeAndValue;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_AttributeTypeAndValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_AttributeTypeAndValue (
   ASN1T_EXP_AttributeTypeAndValue* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_AttributeTypeAndValue;
}

void asn1Free_EXP_AttributeTypeAndValue (OSCTXT *pctxt, 
   ASN1T_EXP_AttributeTypeAndValue* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AttributeValue (pctxt, &pvalue->value);
}

void ASN1C_EXP_AttributeTypeAndValue::MemFree ()
{
   asn1Free_EXP_AttributeTypeAndValue (getCtxtPtr(), &msgData);
}

ASN1C_EXP_RelativeDistinguishedName::ASN1C_EXP_RelativeDistinguishedName
    (ASN1T_EXP_RelativeDistinguishedName& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_RelativeDistinguishedName::ASN1C_EXP_RelativeDistinguishedName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_RelativeDistinguishedName& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_RelativeDistinguishedName::ASN1C_EXP_RelativeDistinguishedName (
   OSRTContext &context, ASN1T_EXP_RelativeDistinguishedName& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_RelativeDistinguishedName::
   ASN1C_EXP_RelativeDistinguishedName (ASN1CType& ccobj
   , ASN1T_EXP_RelativeDistinguishedName& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_RelativeDistinguishedName::Append (ASN1T_EXP_AttributeTypeAndValue* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_AttributeTypeAndValue* ASN1C_EXP_RelativeDistinguishedName::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_AttributeTypeAndValue));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_AttributeTypeAndValue;
}

ASN1T_EXP_AttributeTypeAndValue* ASN1C_EXP_RelativeDistinguishedName::AppendNewElement ()
{
   ASN1T_EXP_AttributeTypeAndValue* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP_RelativeDistinguishedName::~ASN1T_EXP_RelativeDistinguishedName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_RelativeDistinguishedName (pctxt, this);
   }
}

int ASN1C_EXP_RelativeDistinguishedName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_RelativeDistinguishedName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_RelativeDistinguishedName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_RelativeDistinguishedName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_RelativeDistinguishedName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_RelativeDistinguishedName (
   ASN1T_EXP_RelativeDistinguishedName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_RelativeDistinguishedName;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_RelativeDistinguishedName (OSCTXT *pctxt, 
   ASN1T_EXP_RelativeDistinguishedName* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_AttributeTypeAndValue* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_AttributeTypeAndValue*)pnode->data;
      asn1Free_EXP_AttributeTypeAndValue (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP_RelativeDistinguishedName::MemFree ()
{
   asn1Free_EXP_RelativeDistinguishedName (getCtxtPtr(), &msgData);
}

ASN1C_EXP_RDNSequence::ASN1C_EXP_RDNSequence (ASN1T_EXP_RDNSequence& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_RDNSequence::ASN1C_EXP_RDNSequence (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_RDNSequence& data) : ASN1CSeqOfList(msgBuf, data), msgData(data)
   
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_RDNSequence::ASN1C_EXP_RDNSequence (OSRTContext &context
   , ASN1T_EXP_RDNSequence& data) : ASN1CSeqOfList(context, data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_RDNSequence::ASN1C_EXP_RDNSequence (ASN1CType& ccobj
   , ASN1T_EXP_RDNSequence& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_RDNSequence::Append (ASN1T_EXP_RelativeDistinguishedName* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_RelativeDistinguishedName* ASN1C_EXP_RDNSequence::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_RelativeDistinguishedName));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_RelativeDistinguishedName;
}

ASN1T_EXP_RelativeDistinguishedName* ASN1C_EXP_RDNSequence::AppendNewElement ()
{
   ASN1T_EXP_RelativeDistinguishedName* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP_RDNSequence::~ASN1T_EXP_RDNSequence ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_RDNSequence (pctxt, this);
   }
}

int ASN1C_EXP_RDNSequence::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_RDNSequence (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_RDNSequence::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_RDNSequence;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_RDNSequence (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_RDNSequence (ASN1T_EXP_RDNSequence* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_RDNSequence;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_RDNSequence (OSCTXT *pctxt, ASN1T_EXP_RDNSequence* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_RelativeDistinguishedName* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_RelativeDistinguishedName*)pnode->data;
      asn1Free_EXP_RelativeDistinguishedName (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP_RDNSequence::MemFree ()
{
   asn1Free_EXP_RDNSequence (getCtxtPtr(), &msgData);
}

ASN1T_EXP_Name* new_ASN1T_EXP_Name (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_Name));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Name;
}

ASN1C_EXP_Name::ASN1C_EXP_Name (ASN1T_EXP_Name& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_Name::ASN1C_EXP_Name (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_Name& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_Name::ASN1C_EXP_Name (OSRTContext &context, ASN1T_EXP_Name& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_Name::~ASN1T_EXP_Name ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_Name (pctxt, this);
   }
}

int ASN1C_EXP_Name::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_Name (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_Name::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_Name;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_Name (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_Name (ASN1T_EXP_Name* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_Name;
}

void asn1Free_EXP_Name (OSCTXT *pctxt, ASN1T_EXP_Name* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != pvalue->u.rdnSequence) {
            asn1Free_EXP_RDNSequence (pctxt, pvalue->u.rdnSequence);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.rdnSequence);
         }
         break;

   }
}

void ASN1C_EXP_Name::MemFree ()
{
   asn1Free_EXP_Name (getCtxtPtr(), &msgData);
}

ASN1T_EXP_Time* new_ASN1T_EXP_Time (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_Time));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Time;
}

ASN1C_EXP_Time::ASN1C_EXP_Time (ASN1T_EXP_Time& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_Time::ASN1C_EXP_Time (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_Time& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_Time::ASN1C_EXP_Time (OSRTContext &context, ASN1T_EXP_Time& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_Time::~ASN1T_EXP_Time ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_Time (pctxt, this);
   }
}

int ASN1C_EXP_Time::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_Time (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_Time::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_Time;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_Time (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_Time (ASN1T_EXP_Time* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_Time;
}

void asn1Free_EXP_Time (OSCTXT *pctxt, ASN1T_EXP_Time* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utcTime) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utcTime);
         }
         break;

      case 2:
         if (0 != &pvalue->u.generalTime) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.generalTime);
         }
         break;

   }
}

void ASN1C_EXP_Time::MemFree ()
{
   asn1Free_EXP_Time (getCtxtPtr(), &msgData);
}

ASN1T_EXP_Validity* new_ASN1T_EXP_Validity (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_Validity));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Validity;
}

ASN1C_EXP_Validity::ASN1C_EXP_Validity (ASN1T_EXP_Validity& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_Validity::ASN1C_EXP_Validity (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_Validity& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_Validity::ASN1C_EXP_Validity (OSRTContext &context
   , ASN1T_EXP_Validity& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_Validity::ASN1T_EXP_Validity ()
{
}

ASN1T_EXP_Validity::~ASN1T_EXP_Validity ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_Validity (pctxt, this);
   }
}

int ASN1C_EXP_Validity::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_Validity (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_Validity::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_Validity;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_Validity (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_Validity (ASN1T_EXP_Validity* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_Validity;
}

void asn1Free_EXP_Validity (OSCTXT *pctxt, ASN1T_EXP_Validity* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_Time (pctxt, &pvalue->notBefore);
   asn1Free_EXP_Time (pctxt, &pvalue->notAfter);
}

void ASN1C_EXP_Validity::MemFree ()
{
   asn1Free_EXP_Validity (getCtxtPtr(), &msgData);
}

ASN1T_EXP_SubjectPublicKeyInfo* 
   new_ASN1T_EXP_SubjectPublicKeyInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_SubjectPublicKeyInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_SubjectPublicKeyInfo;
}

ASN1C_EXP_SubjectPublicKeyInfo::ASN1C_EXP_SubjectPublicKeyInfo
    (ASN1T_EXP_SubjectPublicKeyInfo& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_SubjectPublicKeyInfo::ASN1C_EXP_SubjectPublicKeyInfo (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_SubjectPublicKeyInfo& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_SubjectPublicKeyInfo::ASN1C_EXP_SubjectPublicKeyInfo (
   OSRTContext &context, ASN1T_EXP_SubjectPublicKeyInfo& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_SubjectPublicKeyInfo::ASN1T_EXP_SubjectPublicKeyInfo ()
{
}

ASN1T_EXP_SubjectPublicKeyInfo::~ASN1T_EXP_SubjectPublicKeyInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_SubjectPublicKeyInfo (pctxt, this);
   }
}

int ASN1C_EXP_SubjectPublicKeyInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_SubjectPublicKeyInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_SubjectPublicKeyInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_SubjectPublicKeyInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_SubjectPublicKeyInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_SubjectPublicKeyInfo (ASN1T_EXP_SubjectPublicKeyInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_SubjectPublicKeyInfo;
}

void asn1Free_EXP_SubjectPublicKeyInfo (OSCTXT *pctxt, 
   ASN1T_EXP_SubjectPublicKeyInfo* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->algorithm);
   if (pvalue->subjectPublicKey.numbits > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->subjectPublicKey.data);
      pvalue->subjectPublicKey.numbits = 0;
      pvalue->subjectPublicKey.data = 0;
   }
}

void ASN1C_EXP_SubjectPublicKeyInfo::MemFree ()
{
   asn1Free_EXP_SubjectPublicKeyInfo (getCtxtPtr(), &msgData);
}

ASN1T_EXP_Extension* new_ASN1T_EXP_Extension (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_Extension));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Extension;
}

ASN1C_EXP_Extension::ASN1C_EXP_Extension (ASN1T_EXP_Extension& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_Extension::ASN1C_EXP_Extension (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_Extension& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_Extension::ASN1C_EXP_Extension (OSRTContext &context
   , ASN1T_EXP_Extension& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_Extension::ASN1T_EXP_Extension ()
{
   critical = FALSE;
}

ASN1T_EXP_Extension::~ASN1T_EXP_Extension ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_Extension (pctxt, this);
   }
}

int ASN1C_EXP_Extension::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_Extension (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_Extension::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_Extension;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_Extension (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_Extension (ASN1T_EXP_Extension* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_Extension;
}

void asn1Free_EXP_Extension (OSCTXT *pctxt, ASN1T_EXP_Extension* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->extnValue.numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->extnValue.data);
      pvalue->extnValue.numocts = 0;
      pvalue->extnValue.data = 0;
   }
}

void ASN1C_EXP_Extension::MemFree ()
{
   asn1Free_EXP_Extension (getCtxtPtr(), &msgData);
}

ASN1C_EXP_Extensions::ASN1C_EXP_Extensions (ASN1T_EXP_Extensions& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_Extensions::ASN1C_EXP_Extensions (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_Extensions& data) : ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_Extensions::ASN1C_EXP_Extensions (OSRTContext &context
   , ASN1T_EXP_Extensions& data) : ASN1CSeqOfList(context, data), msgData(data)
   
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_Extensions::ASN1C_EXP_Extensions (ASN1CType& ccobj
   , ASN1T_EXP_Extensions& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_Extensions::Append (ASN1T_EXP_Extension* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_Extension* ASN1C_EXP_Extensions::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_Extension));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Extension;
}

ASN1T_EXP_Extension* ASN1C_EXP_Extensions::AppendNewElement ()
{
   ASN1T_EXP_Extension* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP_Extensions::~ASN1T_EXP_Extensions ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_Extensions (pctxt, this);
   }
}

int ASN1C_EXP_Extensions::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_Extensions (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_Extensions::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_Extensions;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_Extensions (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_Extensions (ASN1T_EXP_Extensions* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_Extensions;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_Extensions (OSCTXT *pctxt, ASN1T_EXP_Extensions* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_Extension* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_Extension*)pnode->data;
      asn1Free_EXP_Extension (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP_Extensions::MemFree ()
{
   asn1Free_EXP_Extensions (getCtxtPtr(), &msgData);
}

ASN1T_EXP_TBSCertificate* new_ASN1T_EXP_TBSCertificate (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_TBSCertificate));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_TBSCertificate;
}

ASN1C_EXP_TBSCertificate::ASN1C_EXP_TBSCertificate
    (ASN1T_EXP_TBSCertificate& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TBSCertificate::ASN1C_EXP_TBSCertificate (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_TBSCertificate& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TBSCertificate::ASN1C_EXP_TBSCertificate (OSRTContext &context
   , ASN1T_EXP_TBSCertificate& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_TBSCertificate::ASN1T_EXP_TBSCertificate ()
{
   version = EXP_Version::v1;
   m.issuerUniqueIDPresent = 0;
   m.subjectUniqueIDPresent = 0;
   m.extensionsPresent = 0;
}

ASN1T_EXP_TBSCertificate::~ASN1T_EXP_TBSCertificate ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_TBSCertificate (pctxt, this);
   }
}

int ASN1C_EXP_TBSCertificate::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TBSCertificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_TBSCertificate::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_TBSCertificate;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_TBSCertificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_TBSCertificate (ASN1T_EXP_TBSCertificate* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_TBSCertificate;
}

void asn1Free_EXP_TBSCertificate (OSCTXT *pctxt, 
   ASN1T_EXP_TBSCertificate* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->signature_);
   asn1Free_EXP_Name (pctxt, &pvalue->issuer);
   asn1Free_EXP_Validity (pctxt, &pvalue->validity);
   asn1Free_EXP_Name (pctxt, &pvalue->subject);
   asn1Free_EXP_SubjectPublicKeyInfo (pctxt, &pvalue->subjectPublicKeyInfo);
   if (pvalue->m.issuerUniqueIDPresent) {
      asn1Free_EXP_UniqueIdentifier (pctxt, &pvalue->issuerUniqueID);
   }
   if (pvalue->m.subjectUniqueIDPresent) {
      asn1Free_EXP_UniqueIdentifier (pctxt, &pvalue->subjectUniqueID);
   }
   if (pvalue->m.extensionsPresent) {
      asn1Free_EXP_Extensions (pctxt, &pvalue->extensions);
   }
}

void ASN1C_EXP_TBSCertificate::MemFree ()
{
   asn1Free_EXP_TBSCertificate (getCtxtPtr(), &msgData);
}

ASN1T_EXP_Certificate* new_ASN1T_EXP_Certificate (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_Certificate));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Certificate;
}

ASN1C_EXP_Certificate::ASN1C_EXP_Certificate (ASN1T_EXP_Certificate& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_Certificate::ASN1C_EXP_Certificate (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_Certificate& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_Certificate::ASN1C_EXP_Certificate (OSRTContext &context
   , ASN1T_EXP_Certificate& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_Certificate::ASN1T_EXP_Certificate ()
{
}

ASN1T_EXP_Certificate::~ASN1T_EXP_Certificate ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_Certificate (pctxt, this);
   }
}

int ASN1C_EXP_Certificate::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_Certificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_Certificate::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_Certificate;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_Certificate (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_Certificate (ASN1T_EXP_Certificate* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_Certificate;
}

void asn1Free_EXP_Certificate (OSCTXT *pctxt, ASN1T_EXP_Certificate* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_TBSCertificate (pctxt, &pvalue->tbsCertificate);
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm);
   if (pvalue->signature_.numbits > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->signature_.data);
      pvalue->signature_.numbits = 0;
      pvalue->signature_.data = 0;
   }
}

void ASN1C_EXP_Certificate::MemFree ()
{
   asn1Free_EXP_Certificate (getCtxtPtr(), &msgData);
}

ASN1C_EXP__SetOfEXP_AttributeValue::ASN1C_EXP__SetOfEXP_AttributeValue
    (ASN1T_EXP__SetOfEXP_AttributeValue& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP__SetOfEXP_AttributeValue::ASN1C_EXP__SetOfEXP_AttributeValue (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP__SetOfEXP_AttributeValue& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP__SetOfEXP_AttributeValue::ASN1C_EXP__SetOfEXP_AttributeValue (
   OSRTContext &context, ASN1T_EXP__SetOfEXP_AttributeValue& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP__SetOfEXP_AttributeValue::
   ASN1C_EXP__SetOfEXP_AttributeValue (ASN1CType& ccobj
   , ASN1T_EXP__SetOfEXP_AttributeValue& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP__SetOfEXP_AttributeValue::Append (ASN1T_EXP_AttributeValue* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_AttributeValue* ASN1C_EXP__SetOfEXP_AttributeValue::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_AttributeValue));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_AttributeValue;
}

ASN1T_EXP_AttributeValue* ASN1C_EXP__SetOfEXP_AttributeValue::AppendNewElement ()
{
   ASN1T_EXP_AttributeValue* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP__SetOfEXP_AttributeValue::~ASN1T_EXP__SetOfEXP_AttributeValue ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP__SetOfEXP_AttributeValue (pctxt, this);
   }
}

int ASN1C_EXP__SetOfEXP_AttributeValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP__SetOfEXP_AttributeValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP__SetOfEXP_AttributeValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP__SetOfEXP_AttributeValue;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP__SetOfEXP_AttributeValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP__SetOfEXP_AttributeValue (
   ASN1T_EXP__SetOfEXP_AttributeValue* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP__SetOfEXP_AttributeValue;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP__SetOfEXP_AttributeValue (OSCTXT *pctxt, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_AttributeValue* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_AttributeValue*)pnode->data;
      asn1Free_EXP_AttributeValue (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP__SetOfEXP_AttributeValue::MemFree ()
{
   asn1Free_EXP__SetOfEXP_AttributeValue (getCtxtPtr(), &msgData);
}

ASN1T_EXP_Attribute* new_ASN1T_EXP_Attribute (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_Attribute));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Attribute;
}

ASN1C_EXP_Attribute::ASN1C_EXP_Attribute (ASN1T_EXP_Attribute& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_Attribute::ASN1C_EXP_Attribute (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_Attribute& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_Attribute::ASN1C_EXP_Attribute (OSRTContext &context
   , ASN1T_EXP_Attribute& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_Attribute::ASN1T_EXP_Attribute ()
{
}

ASN1T_EXP_Attribute::~ASN1T_EXP_Attribute ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_Attribute (pctxt, this);
   }
}

int ASN1C_EXP_Attribute::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_Attribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_Attribute::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_Attribute;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_Attribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_Attribute (ASN1T_EXP_Attribute* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_Attribute;
}

void asn1Free_EXP_Attribute (OSCTXT *pctxt, ASN1T_EXP_Attribute* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP__SetOfEXP_AttributeValue (pctxt, &pvalue->values);
}

void ASN1C_EXP_Attribute::MemFree ()
{
   asn1Free_EXP_Attribute (getCtxtPtr(), &msgData);
}

ASN1T_EXP_TBSCertList_revokedCertificates_element* 
   new_ASN1T_EXP_TBSCertList_revokedCertificates_element (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_TBSCertList_revokedCertificates_element));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_TBSCertList_revokedCertificates_element;
}

ASN1C_EXP_TBSCertList_revokedCertificates_element::
   ASN1C_EXP_TBSCertList_revokedCertificates_element
    (ASN1T_EXP_TBSCertList_revokedCertificates_element& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TBSCertList_revokedCertificates_element::
   ASN1C_EXP_TBSCertList_revokedCertificates_element (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_TBSCertList_revokedCertificates_element& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TBSCertList_revokedCertificates_element::
   ASN1C_EXP_TBSCertList_revokedCertificates_element (OSRTContext &context
   , ASN1T_EXP_TBSCertList_revokedCertificates_element& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_TBSCertList_revokedCertificates_element::ASN1T_EXP_TBSCertList_revokedCertificates_element ()
{
   m.crlEntryExtensionsPresent = 0;
}

ASN1T_EXP_TBSCertList_revokedCertificates_element::~ASN1T_EXP_TBSCertList_revokedCertificates_element ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_TBSCertList_revokedCertificates_element (pctxt, this);
   }
}

int ASN1C_EXP_TBSCertList_revokedCertificates_element::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TBSCertList_revokedCertificates_element (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_TBSCertList_revokedCertificates_element::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_TBSCertList_revokedCertificates_element;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_TBSCertList_revokedCertificates_element (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_TBSCertList_revokedCertificates_element (
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_TBSCertList_revokedCertificates_element;
}

void asn1Free_EXP_TBSCertList_revokedCertificates_element (OSCTXT *pctxt, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_Time (pctxt, &pvalue->revocationDate);
   if (pvalue->m.crlEntryExtensionsPresent) {
      asn1Free_EXP_Extensions (pctxt, &pvalue->crlEntryExtensions);
   }
}

void ASN1C_EXP_TBSCertList_revokedCertificates_element::MemFree ()
{
   asn1Free_EXP_TBSCertList_revokedCertificates_element (getCtxtPtr(), &msgData);
}

ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element
    (ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
   OSRTContext &context
   , ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (ASN1CType& ccobj
   , ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::Append (ASN1T_EXP_TBSCertList_revokedCertificates_element* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_TBSCertList_revokedCertificates_element* ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_TBSCertList_revokedCertificates_element));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_TBSCertList_revokedCertificates_element;
}

ASN1T_EXP_TBSCertList_revokedCertificates_element* ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::AppendNewElement ()
{
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::~ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (pctxt, this);
   }
}

int ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (OSCTXT *pctxt, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_TBSCertList_revokedCertificates_element* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_TBSCertList_revokedCertificates_element*)pnode->data;
      asn1Free_EXP_TBSCertList_revokedCertificates_element (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::MemFree ()
{
   asn1Free_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (getCtxtPtr(), &msgData);
}

ASN1T_EXP_TBSCertList* new_ASN1T_EXP_TBSCertList (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_TBSCertList));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_TBSCertList;
}

ASN1C_EXP_TBSCertList::ASN1C_EXP_TBSCertList (ASN1T_EXP_TBSCertList& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TBSCertList::ASN1C_EXP_TBSCertList (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_TBSCertList& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TBSCertList::ASN1C_EXP_TBSCertList (OSRTContext &context
   , ASN1T_EXP_TBSCertList& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_TBSCertList::ASN1T_EXP_TBSCertList ()
{
   m.versionPresent = 0;
   m.nextUpdatePresent = 0;
   m.revokedCertificatesPresent = 0;
   m.crlExtensionsPresent = 0;
}

ASN1T_EXP_TBSCertList::~ASN1T_EXP_TBSCertList ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_TBSCertList (pctxt, this);
   }
}

int ASN1C_EXP_TBSCertList::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TBSCertList (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_TBSCertList::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_TBSCertList;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_TBSCertList (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_TBSCertList (ASN1T_EXP_TBSCertList* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_TBSCertList;
}

void asn1Free_EXP_TBSCertList (OSCTXT *pctxt, ASN1T_EXP_TBSCertList* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->signature_);
   asn1Free_EXP_Name (pctxt, &pvalue->issuer);
   asn1Free_EXP_Time (pctxt, &pvalue->thisUpdate);
   if (pvalue->m.nextUpdatePresent) {
      asn1Free_EXP_Time (pctxt, &pvalue->nextUpdate);
   }
   if (pvalue->m.revokedCertificatesPresent) {
      asn1Free_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (pctxt, &pvalue->revokedCertificates);
   }
   if (pvalue->m.crlExtensionsPresent) {
      asn1Free_EXP_Extensions (pctxt, &pvalue->crlExtensions);
   }
}

void ASN1C_EXP_TBSCertList::MemFree ()
{
   asn1Free_EXP_TBSCertList (getCtxtPtr(), &msgData);
}

ASN1T_EXP_CertificateList* new_ASN1T_EXP_CertificateList (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_CertificateList));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_CertificateList;
}

ASN1C_EXP_CertificateList::ASN1C_EXP_CertificateList
    (ASN1T_EXP_CertificateList& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_CertificateList::ASN1C_EXP_CertificateList (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_CertificateList& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_CertificateList::ASN1C_EXP_CertificateList (OSRTContext &context
   , ASN1T_EXP_CertificateList& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_CertificateList::ASN1T_EXP_CertificateList ()
{
}

ASN1T_EXP_CertificateList::~ASN1T_EXP_CertificateList ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_CertificateList (pctxt, this);
   }
}

int ASN1C_EXP_CertificateList::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_CertificateList (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_CertificateList::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_CertificateList;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_CertificateList (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_CertificateList (ASN1T_EXP_CertificateList* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_CertificateList;
}

void asn1Free_EXP_CertificateList (OSCTXT *pctxt, 
   ASN1T_EXP_CertificateList* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_TBSCertList (pctxt, &pvalue->tbsCertList);
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm);
   if (pvalue->signature_.numbits > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->signature_.data);
      pvalue->signature_.numbits = 0;
      pvalue->signature_.data = 0;
   }
}

void ASN1C_EXP_CertificateList::MemFree ()
{
   asn1Free_EXP_CertificateList (getCtxtPtr(), &msgData);
}

ASN1T_EXP_CountryName* new_ASN1T_EXP_CountryName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_CountryName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_CountryName;
}

ASN1C_EXP_CountryName::ASN1C_EXP_CountryName (ASN1T_EXP_CountryName& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_CountryName::ASN1C_EXP_CountryName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_CountryName& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_CountryName::ASN1C_EXP_CountryName (OSRTContext &context
   , ASN1T_EXP_CountryName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_CountryName::~ASN1T_EXP_CountryName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_CountryName (pctxt, this);
   }
}

int ASN1C_EXP_CountryName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_CountryName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_CountryName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_CountryName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_CountryName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_CountryName (ASN1T_EXP_CountryName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_CountryName;
}

void asn1Free_EXP_CountryName (OSCTXT *pctxt, ASN1T_EXP_CountryName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.x121_dcc_code) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.x121_dcc_code);
         }
         break;

      case 2:
         if (0 != &pvalue->u.iso_3166_alpha2_code) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.iso_3166_alpha2_code);
         }
         break;

   }
}

void ASN1C_EXP_CountryName::MemFree ()
{
   asn1Free_EXP_CountryName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_AdministrationDomainName* 
   new_ASN1T_EXP_AdministrationDomainName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_AdministrationDomainName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_AdministrationDomainName;
}

ASN1C_EXP_AdministrationDomainName::ASN1C_EXP_AdministrationDomainName
    (ASN1T_EXP_AdministrationDomainName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_AdministrationDomainName::ASN1C_EXP_AdministrationDomainName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_AdministrationDomainName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_AdministrationDomainName::ASN1C_EXP_AdministrationDomainName (
   OSRTContext &context, ASN1T_EXP_AdministrationDomainName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_AdministrationDomainName::~ASN1T_EXP_AdministrationDomainName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_AdministrationDomainName (pctxt, this);
   }
}

int ASN1C_EXP_AdministrationDomainName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_AdministrationDomainName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_AdministrationDomainName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_AdministrationDomainName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_AdministrationDomainName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_AdministrationDomainName (
   ASN1T_EXP_AdministrationDomainName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_AdministrationDomainName;
}

void asn1Free_EXP_AdministrationDomainName (OSCTXT *pctxt, 
   ASN1T_EXP_AdministrationDomainName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.numeric) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.numeric);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printable) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printable);
         }
         break;

   }
}

void ASN1C_EXP_AdministrationDomainName::MemFree ()
{
   asn1Free_EXP_AdministrationDomainName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PrivateDomainName* new_ASN1T_EXP_PrivateDomainName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PrivateDomainName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PrivateDomainName;
}

ASN1C_EXP_PrivateDomainName::ASN1C_EXP_PrivateDomainName
    (ASN1T_EXP_PrivateDomainName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PrivateDomainName::ASN1C_EXP_PrivateDomainName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_PrivateDomainName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PrivateDomainName::ASN1C_EXP_PrivateDomainName (OSRTContext &context
   , ASN1T_EXP_PrivateDomainName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_PrivateDomainName::~ASN1T_EXP_PrivateDomainName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_PrivateDomainName (pctxt, this);
   }
}

int ASN1C_EXP_PrivateDomainName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PrivateDomainName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PrivateDomainName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PrivateDomainName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PrivateDomainName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PrivateDomainName (ASN1T_EXP_PrivateDomainName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PrivateDomainName;
}

void asn1Free_EXP_PrivateDomainName (OSCTXT *pctxt, 
   ASN1T_EXP_PrivateDomainName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.numeric) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.numeric);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printable) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printable);
         }
         break;

   }
}

void ASN1C_EXP_PrivateDomainName::MemFree ()
{
   asn1Free_EXP_PrivateDomainName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PersonalName* new_ASN1T_EXP_PersonalName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PersonalName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PersonalName;
}

ASN1C_EXP_PersonalName::ASN1C_EXP_PersonalName (ASN1T_EXP_PersonalName& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PersonalName::ASN1C_EXP_PersonalName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_PersonalName& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PersonalName::ASN1C_EXP_PersonalName (OSRTContext &context
   , ASN1T_EXP_PersonalName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_PersonalName::ASN1T_EXP_PersonalName ()
{
   surname = 0;
   m.given_namePresent = 0;
   given_name = 0;
   m.initialsPresent = 0;
   initials = 0;
   m.generation_qualifierPresent = 0;
   generation_qualifier = 0;
}

ASN1T_EXP_PersonalName::~ASN1T_EXP_PersonalName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_PersonalName (pctxt, this);
   }
}

int ASN1C_EXP_PersonalName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PersonalName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PersonalName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PersonalName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PersonalName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PersonalName (ASN1T_EXP_PersonalName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PersonalName;
}

void asn1Free_EXP_PersonalName (OSCTXT *pctxt, ASN1T_EXP_PersonalName* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->surname);
   if (pvalue->m.given_namePresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->given_name);
   }
   if (pvalue->m.initialsPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->initials);
   }
   if (pvalue->m.generation_qualifierPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->generation_qualifier);
   }
}

void ASN1C_EXP_PersonalName::MemFree ()
{
   asn1Free_EXP_PersonalName (getCtxtPtr(), &msgData);
}

ASN1C_EXP_OrganizationalUnitNames::ASN1C_EXP_OrganizationalUnitNames
    (ASN1T_EXP_OrganizationalUnitNames& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_OrganizationalUnitNames::ASN1C_EXP_OrganizationalUnitNames (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_OrganizationalUnitNames& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_OrganizationalUnitNames::ASN1C_EXP_OrganizationalUnitNames (
   OSRTContext &context, ASN1T_EXP_OrganizationalUnitNames& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_OrganizationalUnitNames::
   ASN1C_EXP_OrganizationalUnitNames (ASN1CType& ccobj
   , ASN1T_EXP_OrganizationalUnitNames& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_OrganizationalUnitNames::Append (ASN1T_EXP_OrganizationalUnitName elem)
{
   append ((void*)elem);
}

ASN1T_EXP_OrganizationalUnitNames::~ASN1T_EXP_OrganizationalUnitNames ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_OrganizationalUnitNames (pctxt, this);
   }
}

int ASN1C_EXP_OrganizationalUnitNames::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_OrganizationalUnitNames (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_OrganizationalUnitNames::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_OrganizationalUnitNames;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_OrganizationalUnitNames (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_OrganizationalUnitNames (
   ASN1T_EXP_OrganizationalUnitNames* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_OrganizationalUnitNames;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_OrganizationalUnitNames (OSCTXT *pctxt, 
   ASN1T_EXP_OrganizationalUnitNames* pvalue)
{
   if (0 == pvalue) return;
   rtxDListFreeAll (pctxt, pvalue);
}

void ASN1C_EXP_OrganizationalUnitNames::MemFree ()
{
   asn1Free_EXP_OrganizationalUnitNames (getCtxtPtr(), &msgData);
}

ASN1T_EXP_BuiltInStandardAttributes* 
   new_ASN1T_EXP_BuiltInStandardAttributes (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_BuiltInStandardAttributes));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_BuiltInStandardAttributes;
}

ASN1C_EXP_BuiltInStandardAttributes::ASN1C_EXP_BuiltInStandardAttributes
    (ASN1T_EXP_BuiltInStandardAttributes& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_BuiltInStandardAttributes::ASN1C_EXP_BuiltInStandardAttributes (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_BuiltInStandardAttributes& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_BuiltInStandardAttributes::ASN1C_EXP_BuiltInStandardAttributes (
   OSRTContext &context, ASN1T_EXP_BuiltInStandardAttributes& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_BuiltInStandardAttributes::ASN1T_EXP_BuiltInStandardAttributes ()
{
   m.country_namePresent = 0;
   m.administration_domain_namePresent = 0;
   m.network_addressPresent = 0;
   network_address = 0;
   m.terminal_identifierPresent = 0;
   terminal_identifier = 0;
   m.private_domain_namePresent = 0;
   m.organization_namePresent = 0;
   organization_name = 0;
   m.numeric_user_identifierPresent = 0;
   numeric_user_identifier = 0;
   m.personal_namePresent = 0;
   m.organizational_unit_namesPresent = 0;
}

ASN1T_EXP_BuiltInStandardAttributes::~ASN1T_EXP_BuiltInStandardAttributes ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_BuiltInStandardAttributes (pctxt, this);
   }
}

int ASN1C_EXP_BuiltInStandardAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_BuiltInStandardAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_BuiltInStandardAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_BuiltInStandardAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_BuiltInStandardAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_BuiltInStandardAttributes (
   ASN1T_EXP_BuiltInStandardAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_BuiltInStandardAttributes;
}

void asn1Free_EXP_BuiltInStandardAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_BuiltInStandardAttributes* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.country_namePresent) {
      asn1Free_EXP_CountryName (pctxt, &pvalue->country_name);
   }
   if (pvalue->m.administration_domain_namePresent) {
      asn1Free_EXP_AdministrationDomainName (pctxt, &pvalue->administration_domain_name);
   }
   if (pvalue->m.network_addressPresent) {
      asn1Free_EXP_NetworkAddress (pctxt, pvalue->network_address);
   }
   if (pvalue->m.terminal_identifierPresent) {
      asn1Free_EXP_TerminalIdentifier (pctxt, pvalue->terminal_identifier);
   }
   if (pvalue->m.private_domain_namePresent) {
      asn1Free_EXP_PrivateDomainName (pctxt, &pvalue->private_domain_name);
   }
   if (pvalue->m.organization_namePresent) {
      asn1Free_EXP_OrganizationName (pctxt, pvalue->organization_name);
   }
   if (pvalue->m.numeric_user_identifierPresent) {
      asn1Free_EXP_NumericUserIdentifier (pctxt, pvalue->numeric_user_identifier);
   }
   if (pvalue->m.personal_namePresent) {
      asn1Free_EXP_PersonalName (pctxt, &pvalue->personal_name);
   }
   if (pvalue->m.organizational_unit_namesPresent) {
      asn1Free_EXP_OrganizationalUnitNames (pctxt, &pvalue->organizational_unit_names);
   }
}

void ASN1C_EXP_BuiltInStandardAttributes::MemFree ()
{
   asn1Free_EXP_BuiltInStandardAttributes (getCtxtPtr(), &msgData);
}

ASN1T_EXP_BuiltInDomainDefinedAttribute* 
   new_ASN1T_EXP_BuiltInDomainDefinedAttribute (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_BuiltInDomainDefinedAttribute));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_BuiltInDomainDefinedAttribute;
}

ASN1C_EXP_BuiltInDomainDefinedAttribute::
   ASN1C_EXP_BuiltInDomainDefinedAttribute
    (ASN1T_EXP_BuiltInDomainDefinedAttribute& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_BuiltInDomainDefinedAttribute::
   ASN1C_EXP_BuiltInDomainDefinedAttribute (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_BuiltInDomainDefinedAttribute& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_BuiltInDomainDefinedAttribute::
   ASN1C_EXP_BuiltInDomainDefinedAttribute (OSRTContext &context
   , ASN1T_EXP_BuiltInDomainDefinedAttribute& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_BuiltInDomainDefinedAttribute::ASN1T_EXP_BuiltInDomainDefinedAttribute ()
{
   type = 0;
   value = 0;
}

ASN1T_EXP_BuiltInDomainDefinedAttribute::~ASN1T_EXP_BuiltInDomainDefinedAttribute ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_BuiltInDomainDefinedAttribute (pctxt, this);
   }
}

int ASN1C_EXP_BuiltInDomainDefinedAttribute::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_BuiltInDomainDefinedAttribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_BuiltInDomainDefinedAttribute::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_BuiltInDomainDefinedAttribute;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_BuiltInDomainDefinedAttribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_BuiltInDomainDefinedAttribute (
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_BuiltInDomainDefinedAttribute;
}

void asn1Free_EXP_BuiltInDomainDefinedAttribute (OSCTXT *pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->type);
   rtxMemFreePtr (pctxt, (void*)pvalue->value);
}

void ASN1C_EXP_BuiltInDomainDefinedAttribute::MemFree ()
{
   asn1Free_EXP_BuiltInDomainDefinedAttribute (getCtxtPtr(), &msgData);
}

ASN1C_EXP_BuiltInDomainDefinedAttributes::
   ASN1C_EXP_BuiltInDomainDefinedAttributes
    (ASN1T_EXP_BuiltInDomainDefinedAttributes& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_BuiltInDomainDefinedAttributes::
   ASN1C_EXP_BuiltInDomainDefinedAttributes (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_BuiltInDomainDefinedAttributes& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_BuiltInDomainDefinedAttributes::
   ASN1C_EXP_BuiltInDomainDefinedAttributes (OSRTContext &context
   , ASN1T_EXP_BuiltInDomainDefinedAttributes& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_BuiltInDomainDefinedAttributes::
   ASN1C_EXP_BuiltInDomainDefinedAttributes (ASN1CType& ccobj
   , ASN1T_EXP_BuiltInDomainDefinedAttributes& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_BuiltInDomainDefinedAttributes::Append (ASN1T_EXP_BuiltInDomainDefinedAttribute* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_BuiltInDomainDefinedAttribute* ASN1C_EXP_BuiltInDomainDefinedAttributes::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_BuiltInDomainDefinedAttribute));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_BuiltInDomainDefinedAttribute;
}

ASN1T_EXP_BuiltInDomainDefinedAttribute* ASN1C_EXP_BuiltInDomainDefinedAttributes::AppendNewElement ()
{
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP_BuiltInDomainDefinedAttributes::~ASN1T_EXP_BuiltInDomainDefinedAttributes ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_BuiltInDomainDefinedAttributes (pctxt, this);
   }
}

int ASN1C_EXP_BuiltInDomainDefinedAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_BuiltInDomainDefinedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_BuiltInDomainDefinedAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_BuiltInDomainDefinedAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_BuiltInDomainDefinedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_BuiltInDomainDefinedAttributes (
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_BuiltInDomainDefinedAttributes;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_BuiltInDomainDefinedAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_BuiltInDomainDefinedAttribute* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_BuiltInDomainDefinedAttribute*)pnode->data;
      asn1Free_EXP_BuiltInDomainDefinedAttribute (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP_BuiltInDomainDefinedAttributes::MemFree ()
{
   asn1Free_EXP_BuiltInDomainDefinedAttributes (getCtxtPtr(), &msgData);
}

ASN1T_EXP_ExtensionAttribute* 
   new_ASN1T_EXP_ExtensionAttribute (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_ExtensionAttribute));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_ExtensionAttribute;
}

ASN1C_EXP_ExtensionAttribute::ASN1C_EXP_ExtensionAttribute
    (ASN1T_EXP_ExtensionAttribute& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_ExtensionAttribute::ASN1C_EXP_ExtensionAttribute (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_ExtensionAttribute& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_ExtensionAttribute::ASN1C_EXP_ExtensionAttribute (
   OSRTContext &context, ASN1T_EXP_ExtensionAttribute& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_ExtensionAttribute::ASN1T_EXP_ExtensionAttribute ()
{
}

ASN1T_EXP_ExtensionAttribute::~ASN1T_EXP_ExtensionAttribute ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_ExtensionAttribute (pctxt, this);
   }
}

int ASN1C_EXP_ExtensionAttribute::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_ExtensionAttribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_ExtensionAttribute::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_ExtensionAttribute;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_ExtensionAttribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_ExtensionAttribute (ASN1T_EXP_ExtensionAttribute* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_ExtensionAttribute;
}

void asn1Free_EXP_ExtensionAttribute (OSCTXT *pctxt, 
   ASN1T_EXP_ExtensionAttribute* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->extension_attribute_value.data);
}

void ASN1C_EXP_ExtensionAttribute::MemFree ()
{
   asn1Free_EXP_ExtensionAttribute (getCtxtPtr(), &msgData);
}

ASN1C_EXP_ExtensionAttributes::ASN1C_EXP_ExtensionAttributes
    (ASN1T_EXP_ExtensionAttributes& data) : ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_ExtensionAttributes::ASN1C_EXP_ExtensionAttributes (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_ExtensionAttributes& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_ExtensionAttributes::ASN1C_EXP_ExtensionAttributes (
   OSRTContext &context, ASN1T_EXP_ExtensionAttributes& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_ExtensionAttributes::ASN1C_EXP_ExtensionAttributes (ASN1CType& ccobj
   , ASN1T_EXP_ExtensionAttributes& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_ExtensionAttributes::Append (ASN1T_EXP_ExtensionAttribute* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_ExtensionAttribute* ASN1C_EXP_ExtensionAttributes::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_ExtensionAttribute));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_ExtensionAttribute;
}

ASN1T_EXP_ExtensionAttribute* ASN1C_EXP_ExtensionAttributes::AppendNewElement ()
{
   ASN1T_EXP_ExtensionAttribute* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP_ExtensionAttributes::~ASN1T_EXP_ExtensionAttributes ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_ExtensionAttributes (pctxt, this);
   }
}

int ASN1C_EXP_ExtensionAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_ExtensionAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_ExtensionAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_ExtensionAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_ExtensionAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_ExtensionAttributes (ASN1T_EXP_ExtensionAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_ExtensionAttributes;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_ExtensionAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_ExtensionAttributes* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_ExtensionAttribute* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_ExtensionAttribute*)pnode->data;
      asn1Free_EXP_ExtensionAttribute (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP_ExtensionAttributes::MemFree ()
{
   asn1Free_EXP_ExtensionAttributes (getCtxtPtr(), &msgData);
}

ASN1T_EXP_ORAddress* new_ASN1T_EXP_ORAddress (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_ORAddress));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_ORAddress;
}

ASN1C_EXP_ORAddress::ASN1C_EXP_ORAddress (ASN1T_EXP_ORAddress& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_ORAddress::ASN1C_EXP_ORAddress (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_ORAddress& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_ORAddress::ASN1C_EXP_ORAddress (OSRTContext &context
   , ASN1T_EXP_ORAddress& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_ORAddress::ASN1T_EXP_ORAddress ()
{
   m.built_in_domain_defined_attributesPresent = 0;
   m.extension_attributesPresent = 0;
}

ASN1T_EXP_ORAddress::~ASN1T_EXP_ORAddress ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_ORAddress (pctxt, this);
   }
}

int ASN1C_EXP_ORAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_ORAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_ORAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_ORAddress;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_ORAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_ORAddress (ASN1T_EXP_ORAddress* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_ORAddress;
}

void asn1Free_EXP_ORAddress (OSCTXT *pctxt, ASN1T_EXP_ORAddress* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_BuiltInStandardAttributes (pctxt, &pvalue->built_in_standard_attributes);
   if (pvalue->m.built_in_domain_defined_attributesPresent) {
      asn1Free_EXP_BuiltInDomainDefinedAttributes (pctxt, &pvalue->built_in_domain_defined_attributes);
   }
   if (pvalue->m.extension_attributesPresent) {
      asn1Free_EXP_ExtensionAttributes (pctxt, &pvalue->extension_attributes);
   }
}

void ASN1C_EXP_ORAddress::MemFree ()
{
   asn1Free_EXP_ORAddress (getCtxtPtr(), &msgData);
}

ASN1T_EXP_TeletexPersonalName* 
   new_ASN1T_EXP_TeletexPersonalName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_TeletexPersonalName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_TeletexPersonalName;
}

ASN1C_EXP_TeletexPersonalName::ASN1C_EXP_TeletexPersonalName
    (ASN1T_EXP_TeletexPersonalName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TeletexPersonalName::ASN1C_EXP_TeletexPersonalName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_TeletexPersonalName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TeletexPersonalName::ASN1C_EXP_TeletexPersonalName (
   OSRTContext &context, ASN1T_EXP_TeletexPersonalName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_TeletexPersonalName::ASN1T_EXP_TeletexPersonalName ()
{
   surname = 0;
   m.given_namePresent = 0;
   given_name = 0;
   m.initialsPresent = 0;
   initials = 0;
   m.generation_qualifierPresent = 0;
   generation_qualifier = 0;
}

ASN1T_EXP_TeletexPersonalName::~ASN1T_EXP_TeletexPersonalName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_TeletexPersonalName (pctxt, this);
   }
}

int ASN1C_EXP_TeletexPersonalName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TeletexPersonalName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_TeletexPersonalName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_TeletexPersonalName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_TeletexPersonalName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_TeletexPersonalName (ASN1T_EXP_TeletexPersonalName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_TeletexPersonalName;
}

void asn1Free_EXP_TeletexPersonalName (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexPersonalName* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->surname);
   if (pvalue->m.given_namePresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->given_name);
   }
   if (pvalue->m.initialsPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->initials);
   }
   if (pvalue->m.generation_qualifierPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->generation_qualifier);
   }
}

void ASN1C_EXP_TeletexPersonalName::MemFree ()
{
   asn1Free_EXP_TeletexPersonalName (getCtxtPtr(), &msgData);
}

ASN1C_EXP_TeletexOrganizationalUnitNames::
   ASN1C_EXP_TeletexOrganizationalUnitNames
    (ASN1T_EXP_TeletexOrganizationalUnitNames& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TeletexOrganizationalUnitNames::
   ASN1C_EXP_TeletexOrganizationalUnitNames (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_TeletexOrganizationalUnitNames& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TeletexOrganizationalUnitNames::
   ASN1C_EXP_TeletexOrganizationalUnitNames (OSRTContext &context
   , ASN1T_EXP_TeletexOrganizationalUnitNames& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_TeletexOrganizationalUnitNames::
   ASN1C_EXP_TeletexOrganizationalUnitNames (ASN1CType& ccobj
   , ASN1T_EXP_TeletexOrganizationalUnitNames& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_TeletexOrganizationalUnitNames::Append (ASN1T_EXP_TeletexOrganizationalUnitName elem)
{
   append ((void*)elem);
}

ASN1T_EXP_TeletexOrganizationalUnitNames::~ASN1T_EXP_TeletexOrganizationalUnitNames ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_TeletexOrganizationalUnitNames (pctxt, this);
   }
}

int ASN1C_EXP_TeletexOrganizationalUnitNames::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TeletexOrganizationalUnitNames (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_TeletexOrganizationalUnitNames::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_TeletexOrganizationalUnitNames;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_TeletexOrganizationalUnitNames (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_TeletexOrganizationalUnitNames (
   ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_TeletexOrganizationalUnitNames;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_TeletexOrganizationalUnitNames (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue)
{
   if (0 == pvalue) return;
   rtxDListFreeAll (pctxt, pvalue);
}

void ASN1C_EXP_TeletexOrganizationalUnitNames::MemFree ()
{
   asn1Free_EXP_TeletexOrganizationalUnitNames (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PhysicalDeliveryCountryName* 
   new_ASN1T_EXP_PhysicalDeliveryCountryName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PhysicalDeliveryCountryName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PhysicalDeliveryCountryName;
}

ASN1C_EXP_PhysicalDeliveryCountryName::ASN1C_EXP_PhysicalDeliveryCountryName
    (ASN1T_EXP_PhysicalDeliveryCountryName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PhysicalDeliveryCountryName::ASN1C_EXP_PhysicalDeliveryCountryName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_PhysicalDeliveryCountryName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PhysicalDeliveryCountryName::ASN1C_EXP_PhysicalDeliveryCountryName (
   OSRTContext &context, ASN1T_EXP_PhysicalDeliveryCountryName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_PhysicalDeliveryCountryName::~ASN1T_EXP_PhysicalDeliveryCountryName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_PhysicalDeliveryCountryName (pctxt, this);
   }
}

int ASN1C_EXP_PhysicalDeliveryCountryName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PhysicalDeliveryCountryName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PhysicalDeliveryCountryName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PhysicalDeliveryCountryName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PhysicalDeliveryCountryName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PhysicalDeliveryCountryName (
   ASN1T_EXP_PhysicalDeliveryCountryName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PhysicalDeliveryCountryName;
}

void asn1Free_EXP_PhysicalDeliveryCountryName (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.x121_dcc_code) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.x121_dcc_code);
         }
         break;

      case 2:
         if (0 != &pvalue->u.iso_3166_alpha2_code) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.iso_3166_alpha2_code);
         }
         break;

   }
}

void ASN1C_EXP_PhysicalDeliveryCountryName::MemFree ()
{
   asn1Free_EXP_PhysicalDeliveryCountryName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PostalCode* new_ASN1T_EXP_PostalCode (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PostalCode));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PostalCode;
}

ASN1C_EXP_PostalCode::ASN1C_EXP_PostalCode (ASN1T_EXP_PostalCode& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PostalCode::ASN1C_EXP_PostalCode (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_PostalCode& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PostalCode::ASN1C_EXP_PostalCode (OSRTContext &context
   , ASN1T_EXP_PostalCode& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_PostalCode::~ASN1T_EXP_PostalCode ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_PostalCode (pctxt, this);
   }
}

int ASN1C_EXP_PostalCode::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PostalCode (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PostalCode::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PostalCode;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PostalCode (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PostalCode (ASN1T_EXP_PostalCode* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PostalCode;
}

void asn1Free_EXP_PostalCode (OSCTXT *pctxt, ASN1T_EXP_PostalCode* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.numeric_code) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.numeric_code);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printable_code) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printable_code);
         }
         break;

   }
}

void ASN1C_EXP_PostalCode::MemFree ()
{
   asn1Free_EXP_PostalCode (getCtxtPtr(), &msgData);
}

ASN1C_EXP_UnformattedPostalAddress_printable_address::
   ASN1C_EXP_UnformattedPostalAddress_printable_address
    (ASN1T_EXP_UnformattedPostalAddress_printable_address& data) : 
   ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_UnformattedPostalAddress_printable_address::
   ASN1C_EXP_UnformattedPostalAddress_printable_address (
   OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_UnformattedPostalAddress_printable_address& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_UnformattedPostalAddress_printable_address::
   ASN1C_EXP_UnformattedPostalAddress_printable_address (OSRTContext &context
   , ASN1T_EXP_UnformattedPostalAddress_printable_address& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_UnformattedPostalAddress_printable_address::
   ASN1C_EXP_UnformattedPostalAddress_printable_address (ASN1CType& ccobj
   , ASN1T_EXP_UnformattedPostalAddress_printable_address& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_UnformattedPostalAddress_printable_address::Append (const char* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_UnformattedPostalAddress_printable_address::~ASN1T_EXP_UnformattedPostalAddress_printable_address ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_UnformattedPostalAddress_printable_address (pctxt, this);
   }
}

int ASN1C_EXP_UnformattedPostalAddress_printable_address::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_UnformattedPostalAddress_printable_address (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_UnformattedPostalAddress_printable_address::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_UnformattedPostalAddress_printable_address;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_UnformattedPostalAddress_printable_address (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_UnformattedPostalAddress_printable_address (
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_UnformattedPostalAddress_printable_address;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_UnformattedPostalAddress_printable_address (OSCTXT *pctxt, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue)
{
   if (0 == pvalue) return;
   rtxDListFreeAll (pctxt, pvalue);
}

void ASN1C_EXP_UnformattedPostalAddress_printable_address::MemFree ()
{
   asn1Free_EXP_UnformattedPostalAddress_printable_address (getCtxtPtr(), &msgData);
}

ASN1T_EXP_UnformattedPostalAddress* 
   new_ASN1T_EXP_UnformattedPostalAddress (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_UnformattedPostalAddress));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_UnformattedPostalAddress;
}

ASN1C_EXP_UnformattedPostalAddress::ASN1C_EXP_UnformattedPostalAddress
    (ASN1T_EXP_UnformattedPostalAddress& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_UnformattedPostalAddress::ASN1C_EXP_UnformattedPostalAddress (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_UnformattedPostalAddress& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_UnformattedPostalAddress::ASN1C_EXP_UnformattedPostalAddress (
   OSRTContext &context, ASN1T_EXP_UnformattedPostalAddress& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_UnformattedPostalAddress::ASN1T_EXP_UnformattedPostalAddress ()
{
   m.printable_addressPresent = 0;
   m.teletex_stringPresent = 0;
   teletex_string = 0;
}

ASN1T_EXP_UnformattedPostalAddress::~ASN1T_EXP_UnformattedPostalAddress ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_UnformattedPostalAddress (pctxt, this);
   }
}

int ASN1C_EXP_UnformattedPostalAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_UnformattedPostalAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_UnformattedPostalAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_UnformattedPostalAddress;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_UnformattedPostalAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_UnformattedPostalAddress (
   ASN1T_EXP_UnformattedPostalAddress* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_UnformattedPostalAddress;
}

void asn1Free_EXP_UnformattedPostalAddress (OSCTXT *pctxt, 
   ASN1T_EXP_UnformattedPostalAddress* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.printable_addressPresent) {
      asn1Free_EXP_UnformattedPostalAddress_printable_address (pctxt, &pvalue->printable_address);
   }
   if (pvalue->m.teletex_stringPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->teletex_string);
   }
}

void ASN1C_EXP_UnformattedPostalAddress::MemFree ()
{
   asn1Free_EXP_UnformattedPostalAddress (getCtxtPtr(), &msgData);
}

ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* 
   new_ASN1T_EXP_ExtendedNetworkAddress_e163_4_address (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_ExtendedNetworkAddress_e163_4_address));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_ExtendedNetworkAddress_e163_4_address;
}

ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::
   ASN1C_EXP_ExtendedNetworkAddress_e163_4_address
    (ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::
   ASN1C_EXP_ExtendedNetworkAddress_e163_4_address (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::
   ASN1C_EXP_ExtendedNetworkAddress_e163_4_address (OSRTContext &context
   , ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_ExtendedNetworkAddress_e163_4_address::ASN1T_EXP_ExtendedNetworkAddress_e163_4_address ()
{
   number = 0;
   m.sub_addressPresent = 0;
   sub_address = 0;
}

ASN1T_EXP_ExtendedNetworkAddress_e163_4_address::~ASN1T_EXP_ExtendedNetworkAddress_e163_4_address ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_ExtendedNetworkAddress_e163_4_address (pctxt, this);
   }
}

int ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_ExtendedNetworkAddress_e163_4_address (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_ExtendedNetworkAddress_e163_4_address;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_ExtendedNetworkAddress_e163_4_address (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_ExtendedNetworkAddress_e163_4_address (
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_ExtendedNetworkAddress_e163_4_address;
}

void asn1Free_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT *pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->number);
   if (pvalue->m.sub_addressPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->sub_address);
   }
}

void ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::MemFree ()
{
   asn1Free_EXP_ExtendedNetworkAddress_e163_4_address (getCtxtPtr(), &msgData);
}

ASN1C_EXP_PresentationAddress_nAddresses::
   ASN1C_EXP_PresentationAddress_nAddresses
    (ASN1T_EXP_PresentationAddress_nAddresses& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PresentationAddress_nAddresses::
   ASN1C_EXP_PresentationAddress_nAddresses (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_PresentationAddress_nAddresses& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PresentationAddress_nAddresses::
   ASN1C_EXP_PresentationAddress_nAddresses (OSRTContext &context
   , ASN1T_EXP_PresentationAddress_nAddresses& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_PresentationAddress_nAddresses::
   ASN1C_EXP_PresentationAddress_nAddresses (ASN1CType& ccobj
   , ASN1T_EXP_PresentationAddress_nAddresses& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_PresentationAddress_nAddresses::Append (ASN1TDynOctStr* elem)
{
   append ((void*)elem);
}

ASN1TDynOctStr* ASN1C_EXP_PresentationAddress_nAddresses::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1TDynOctStr));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1TDynOctStr;
}

ASN1TDynOctStr* ASN1C_EXP_PresentationAddress_nAddresses::AppendNewElement ()
{
   ASN1TDynOctStr* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP_PresentationAddress_nAddresses::~ASN1T_EXP_PresentationAddress_nAddresses ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_PresentationAddress_nAddresses (pctxt, this);
   }
}

int ASN1C_EXP_PresentationAddress_nAddresses::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PresentationAddress_nAddresses (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PresentationAddress_nAddresses::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PresentationAddress_nAddresses;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PresentationAddress_nAddresses (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PresentationAddress_nAddresses (
   ASN1T_EXP_PresentationAddress_nAddresses* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PresentationAddress_nAddresses;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_PresentationAddress_nAddresses (OSCTXT *pctxt, 
   ASN1T_EXP_PresentationAddress_nAddresses* pvalue)
{
   if (0 == pvalue) return;
   { ASN1TDynOctStr* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1TDynOctStr*)pnode->data;
      if (pdata->numocts > 0) {
         rtxMemFreePtr (pctxt, (void*)pdata->data);
         pdata->numocts = 0;
         pdata->data = 0;
      }
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP_PresentationAddress_nAddresses::MemFree ()
{
   asn1Free_EXP_PresentationAddress_nAddresses (getCtxtPtr(), &msgData);
}

ASN1T_EXP_PresentationAddress* 
   new_ASN1T_EXP_PresentationAddress (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_PresentationAddress));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_PresentationAddress;
}

ASN1C_EXP_PresentationAddress::ASN1C_EXP_PresentationAddress
    (ASN1T_EXP_PresentationAddress& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_PresentationAddress::ASN1C_EXP_PresentationAddress (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_PresentationAddress& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_PresentationAddress::ASN1C_EXP_PresentationAddress (
   OSRTContext &context, ASN1T_EXP_PresentationAddress& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_PresentationAddress::ASN1T_EXP_PresentationAddress ()
{
   m.pSelectorPresent = 0;
   m.sSelectorPresent = 0;
   m.tSelectorPresent = 0;
}

ASN1T_EXP_PresentationAddress::~ASN1T_EXP_PresentationAddress ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_PresentationAddress (pctxt, this);
   }
}

int ASN1C_EXP_PresentationAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_PresentationAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_PresentationAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_PresentationAddress;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_PresentationAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_PresentationAddress (ASN1T_EXP_PresentationAddress* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_PresentationAddress;
}

void asn1Free_EXP_PresentationAddress (OSCTXT *pctxt, 
   ASN1T_EXP_PresentationAddress* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.pSelectorPresent) {
      if (pvalue->pSelector.numocts > 0) {
         rtxMemFreePtr (pctxt, (void*)pvalue->pSelector.data);
         pvalue->pSelector.numocts = 0;
         pvalue->pSelector.data = 0;
      }
   }
   if (pvalue->m.sSelectorPresent) {
      if (pvalue->sSelector.numocts > 0) {
         rtxMemFreePtr (pctxt, (void*)pvalue->sSelector.data);
         pvalue->sSelector.numocts = 0;
         pvalue->sSelector.data = 0;
      }
   }
   if (pvalue->m.tSelectorPresent) {
      if (pvalue->tSelector.numocts > 0) {
         rtxMemFreePtr (pctxt, (void*)pvalue->tSelector.data);
         pvalue->tSelector.numocts = 0;
         pvalue->tSelector.data = 0;
      }
   }
   asn1Free_EXP_PresentationAddress_nAddresses (pctxt, &pvalue->nAddresses);
}

void ASN1C_EXP_PresentationAddress::MemFree ()
{
   asn1Free_EXP_PresentationAddress (getCtxtPtr(), &msgData);
}

ASN1T_EXP_ExtendedNetworkAddress* 
   new_ASN1T_EXP_ExtendedNetworkAddress (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_ExtendedNetworkAddress));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_ExtendedNetworkAddress;
}

ASN1C_EXP_ExtendedNetworkAddress::ASN1C_EXP_ExtendedNetworkAddress
    (ASN1T_EXP_ExtendedNetworkAddress& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_ExtendedNetworkAddress::ASN1C_EXP_ExtendedNetworkAddress (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_ExtendedNetworkAddress& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_ExtendedNetworkAddress::ASN1C_EXP_ExtendedNetworkAddress (
   OSRTContext &context, ASN1T_EXP_ExtendedNetworkAddress& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_ExtendedNetworkAddress::~ASN1T_EXP_ExtendedNetworkAddress ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_ExtendedNetworkAddress (pctxt, this);
   }
}

int ASN1C_EXP_ExtendedNetworkAddress::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_ExtendedNetworkAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_ExtendedNetworkAddress::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_ExtendedNetworkAddress;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_ExtendedNetworkAddress (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_ExtendedNetworkAddress (
   ASN1T_EXP_ExtendedNetworkAddress* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_ExtendedNetworkAddress;
}

void asn1Free_EXP_ExtendedNetworkAddress (OSCTXT *pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != pvalue->u.e163_4_address) {
            asn1Free_EXP_ExtendedNetworkAddress_e163_4_address (pctxt, pvalue->u.e163_4_address);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.e163_4_address);
         }
         break;

      case 2:
         if (0 != pvalue->u.psap_address) {
            asn1Free_EXP_PresentationAddress (pctxt, pvalue->u.psap_address);
            rtxMemFreePtr (pctxt, (void*)pvalue->u.psap_address);
         }
         break;

   }
}

void ASN1C_EXP_ExtendedNetworkAddress::MemFree ()
{
   asn1Free_EXP_ExtendedNetworkAddress (getCtxtPtr(), &msgData);
}

ASN1T_EXP_TeletexDomainDefinedAttribute* 
   new_ASN1T_EXP_TeletexDomainDefinedAttribute (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_TeletexDomainDefinedAttribute));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_TeletexDomainDefinedAttribute;
}

ASN1C_EXP_TeletexDomainDefinedAttribute::
   ASN1C_EXP_TeletexDomainDefinedAttribute
    (ASN1T_EXP_TeletexDomainDefinedAttribute& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TeletexDomainDefinedAttribute::
   ASN1C_EXP_TeletexDomainDefinedAttribute (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_TeletexDomainDefinedAttribute& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TeletexDomainDefinedAttribute::
   ASN1C_EXP_TeletexDomainDefinedAttribute (OSRTContext &context
   , ASN1T_EXP_TeletexDomainDefinedAttribute& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_TeletexDomainDefinedAttribute::ASN1T_EXP_TeletexDomainDefinedAttribute ()
{
   type = 0;
   value = 0;
}

ASN1T_EXP_TeletexDomainDefinedAttribute::~ASN1T_EXP_TeletexDomainDefinedAttribute ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_TeletexDomainDefinedAttribute (pctxt, this);
   }
}

int ASN1C_EXP_TeletexDomainDefinedAttribute::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TeletexDomainDefinedAttribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_TeletexDomainDefinedAttribute::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_TeletexDomainDefinedAttribute;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_TeletexDomainDefinedAttribute (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_TeletexDomainDefinedAttribute (
   ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_TeletexDomainDefinedAttribute;
}

void asn1Free_EXP_TeletexDomainDefinedAttribute (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue->type);
   rtxMemFreePtr (pctxt, (void*)pvalue->value);
}

void ASN1C_EXP_TeletexDomainDefinedAttribute::MemFree ()
{
   asn1Free_EXP_TeletexDomainDefinedAttribute (getCtxtPtr(), &msgData);
}

ASN1C_EXP_TeletexDomainDefinedAttributes::
   ASN1C_EXP_TeletexDomainDefinedAttributes
    (ASN1T_EXP_TeletexDomainDefinedAttributes& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_TeletexDomainDefinedAttributes::
   ASN1C_EXP_TeletexDomainDefinedAttributes (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_TeletexDomainDefinedAttributes& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_TeletexDomainDefinedAttributes::
   ASN1C_EXP_TeletexDomainDefinedAttributes (OSRTContext &context
   , ASN1T_EXP_TeletexDomainDefinedAttributes& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_EXP_TeletexDomainDefinedAttributes::
   ASN1C_EXP_TeletexDomainDefinedAttributes (ASN1CType& ccobj
   , ASN1T_EXP_TeletexDomainDefinedAttributes& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_EXP_TeletexDomainDefinedAttributes::Append (ASN1T_EXP_TeletexDomainDefinedAttribute* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_TeletexDomainDefinedAttribute* ASN1C_EXP_TeletexDomainDefinedAttributes::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_TeletexDomainDefinedAttribute));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_TeletexDomainDefinedAttribute;
}

ASN1T_EXP_TeletexDomainDefinedAttribute* ASN1C_EXP_TeletexDomainDefinedAttributes::AppendNewElement ()
{
   ASN1T_EXP_TeletexDomainDefinedAttribute* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_EXP_TeletexDomainDefinedAttributes::~ASN1T_EXP_TeletexDomainDefinedAttributes ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_TeletexDomainDefinedAttributes (pctxt, this);
   }
}

int ASN1C_EXP_TeletexDomainDefinedAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_TeletexDomainDefinedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_TeletexDomainDefinedAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_TeletexDomainDefinedAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_TeletexDomainDefinedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_TeletexDomainDefinedAttributes (
   ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_TeletexDomainDefinedAttributes;
   rtxDListFastInit (pvalue);
}

void asn1Free_EXP_TeletexDomainDefinedAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_TeletexDomainDefinedAttribute* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_TeletexDomainDefinedAttribute*)pnode->data;
      asn1Free_EXP_TeletexDomainDefinedAttribute (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_EXP_TeletexDomainDefinedAttributes::MemFree ()
{
   asn1Free_EXP_TeletexDomainDefinedAttributes (getCtxtPtr(), &msgData);
}

ASN1T_EXP_DirectoryString* new_ASN1T_EXP_DirectoryString (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_DirectoryString));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_DirectoryString;
}

ASN1C_EXP_DirectoryString::ASN1C_EXP_DirectoryString
    (ASN1T_EXP_DirectoryString& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_DirectoryString::ASN1C_EXP_DirectoryString (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_DirectoryString& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_DirectoryString::ASN1C_EXP_DirectoryString (OSRTContext &context
   , ASN1T_EXP_DirectoryString& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_DirectoryString::~ASN1T_EXP_DirectoryString ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_DirectoryString (pctxt, this);
   }
}

int ASN1C_EXP_DirectoryString::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_DirectoryString (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_DirectoryString::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_DirectoryString;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_DirectoryString (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_DirectoryString (ASN1T_EXP_DirectoryString* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_DirectoryString;
}

void asn1Free_EXP_DirectoryString (OSCTXT *pctxt, 
   ASN1T_EXP_DirectoryString* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_DirectoryString::MemFree ()
{
   asn1Free_EXP_DirectoryString (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520name* new_ASN1T_EXP_X520name (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520name));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520name;
}

ASN1C_EXP_X520name::ASN1C_EXP_X520name (ASN1T_EXP_X520name& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520name::ASN1C_EXP_X520name (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_X520name& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520name::ASN1C_EXP_X520name (OSRTContext &context
   , ASN1T_EXP_X520name& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520name::~ASN1T_EXP_X520name ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520name (pctxt, this);
   }
}

int ASN1C_EXP_X520name::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520name (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520name::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520name;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520name (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520name (ASN1T_EXP_X520name* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520name;
}

void asn1Free_EXP_X520name (OSCTXT *pctxt, ASN1T_EXP_X520name* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520name::MemFree ()
{
   asn1Free_EXP_X520name (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520CommonName* new_ASN1T_EXP_X520CommonName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520CommonName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520CommonName;
}

ASN1C_EXP_X520CommonName::ASN1C_EXP_X520CommonName
    (ASN1T_EXP_X520CommonName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520CommonName::ASN1C_EXP_X520CommonName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_X520CommonName& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520CommonName::ASN1C_EXP_X520CommonName (OSRTContext &context
   , ASN1T_EXP_X520CommonName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520CommonName::~ASN1T_EXP_X520CommonName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520CommonName (pctxt, this);
   }
}

int ASN1C_EXP_X520CommonName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520CommonName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520CommonName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520CommonName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520CommonName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520CommonName (ASN1T_EXP_X520CommonName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520CommonName;
}

void asn1Free_EXP_X520CommonName (OSCTXT *pctxt, 
   ASN1T_EXP_X520CommonName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520CommonName::MemFree ()
{
   asn1Free_EXP_X520CommonName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520LocalityName* new_ASN1T_EXP_X520LocalityName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520LocalityName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520LocalityName;
}

ASN1C_EXP_X520LocalityName::ASN1C_EXP_X520LocalityName
    (ASN1T_EXP_X520LocalityName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520LocalityName::ASN1C_EXP_X520LocalityName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_X520LocalityName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520LocalityName::ASN1C_EXP_X520LocalityName (OSRTContext &context
   , ASN1T_EXP_X520LocalityName& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520LocalityName::~ASN1T_EXP_X520LocalityName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520LocalityName (pctxt, this);
   }
}

int ASN1C_EXP_X520LocalityName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520LocalityName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520LocalityName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520LocalityName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520LocalityName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520LocalityName (ASN1T_EXP_X520LocalityName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520LocalityName;
}

void asn1Free_EXP_X520LocalityName (OSCTXT *pctxt, 
   ASN1T_EXP_X520LocalityName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520LocalityName::MemFree ()
{
   asn1Free_EXP_X520LocalityName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520StateOrProvinceName* 
   new_ASN1T_EXP_X520StateOrProvinceName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520StateOrProvinceName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520StateOrProvinceName;
}

ASN1C_EXP_X520StateOrProvinceName::ASN1C_EXP_X520StateOrProvinceName
    (ASN1T_EXP_X520StateOrProvinceName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520StateOrProvinceName::ASN1C_EXP_X520StateOrProvinceName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_X520StateOrProvinceName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520StateOrProvinceName::ASN1C_EXP_X520StateOrProvinceName (
   OSRTContext &context, ASN1T_EXP_X520StateOrProvinceName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520StateOrProvinceName::~ASN1T_EXP_X520StateOrProvinceName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520StateOrProvinceName (pctxt, this);
   }
}

int ASN1C_EXP_X520StateOrProvinceName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520StateOrProvinceName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520StateOrProvinceName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520StateOrProvinceName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520StateOrProvinceName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520StateOrProvinceName (
   ASN1T_EXP_X520StateOrProvinceName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520StateOrProvinceName;
}

void asn1Free_EXP_X520StateOrProvinceName (OSCTXT *pctxt, 
   ASN1T_EXP_X520StateOrProvinceName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520StateOrProvinceName::MemFree ()
{
   asn1Free_EXP_X520StateOrProvinceName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520OrganizationName* 
   new_ASN1T_EXP_X520OrganizationName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520OrganizationName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520OrganizationName;
}

ASN1C_EXP_X520OrganizationName::ASN1C_EXP_X520OrganizationName
    (ASN1T_EXP_X520OrganizationName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520OrganizationName::ASN1C_EXP_X520OrganizationName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_X520OrganizationName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520OrganizationName::ASN1C_EXP_X520OrganizationName (
   OSRTContext &context, ASN1T_EXP_X520OrganizationName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520OrganizationName::~ASN1T_EXP_X520OrganizationName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520OrganizationName (pctxt, this);
   }
}

int ASN1C_EXP_X520OrganizationName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520OrganizationName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520OrganizationName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520OrganizationName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520OrganizationName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520OrganizationName (ASN1T_EXP_X520OrganizationName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520OrganizationName;
}

void asn1Free_EXP_X520OrganizationName (OSCTXT *pctxt, 
   ASN1T_EXP_X520OrganizationName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520OrganizationName::MemFree ()
{
   asn1Free_EXP_X520OrganizationName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520OrganizationalUnitName* 
   new_ASN1T_EXP_X520OrganizationalUnitName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520OrganizationalUnitName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520OrganizationalUnitName;
}

ASN1C_EXP_X520OrganizationalUnitName::ASN1C_EXP_X520OrganizationalUnitName
    (ASN1T_EXP_X520OrganizationalUnitName& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520OrganizationalUnitName::ASN1C_EXP_X520OrganizationalUnitName (
   OSRTMessageBufferIF& msgBuf, ASN1T_EXP_X520OrganizationalUnitName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520OrganizationalUnitName::ASN1C_EXP_X520OrganizationalUnitName (
   OSRTContext &context, ASN1T_EXP_X520OrganizationalUnitName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520OrganizationalUnitName::~ASN1T_EXP_X520OrganizationalUnitName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520OrganizationalUnitName (pctxt, this);
   }
}

int ASN1C_EXP_X520OrganizationalUnitName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520OrganizationalUnitName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520OrganizationalUnitName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520OrganizationalUnitName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520OrganizationalUnitName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520OrganizationalUnitName (
   ASN1T_EXP_X520OrganizationalUnitName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520OrganizationalUnitName;
}

void asn1Free_EXP_X520OrganizationalUnitName (OSCTXT *pctxt, 
   ASN1T_EXP_X520OrganizationalUnitName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520OrganizationalUnitName::MemFree ()
{
   asn1Free_EXP_X520OrganizationalUnitName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520Title* new_ASN1T_EXP_X520Title (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520Title));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520Title;
}

ASN1C_EXP_X520Title::ASN1C_EXP_X520Title (ASN1T_EXP_X520Title& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520Title::ASN1C_EXP_X520Title (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_X520Title& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520Title::ASN1C_EXP_X520Title (OSRTContext &context
   , ASN1T_EXP_X520Title& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520Title::~ASN1T_EXP_X520Title ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520Title (pctxt, this);
   }
}

int ASN1C_EXP_X520Title::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520Title (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520Title::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520Title;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520Title (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520Title (ASN1T_EXP_X520Title* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520Title;
}

void asn1Free_EXP_X520Title (OSCTXT *pctxt, ASN1T_EXP_X520Title* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520Title::MemFree ()
{
   asn1Free_EXP_X520Title (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520CountrySerialUTF8liUcubeName* 
   new_ASN1T_EXP_X520CountrySerialUTF8liUcubeName (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520CountrySerialUTF8liUcubeName));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520CountrySerialUTF8liUcubeName;
}

ASN1C_EXP_X520CountrySerialUTF8liUcubeName::
   ASN1C_EXP_X520CountrySerialUTF8liUcubeName
    (ASN1T_EXP_X520CountrySerialUTF8liUcubeName& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520CountrySerialUTF8liUcubeName::
   ASN1C_EXP_X520CountrySerialUTF8liUcubeName (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_X520CountrySerialUTF8liUcubeName& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520CountrySerialUTF8liUcubeName::
   ASN1C_EXP_X520CountrySerialUTF8liUcubeName (OSRTContext &context
   , ASN1T_EXP_X520CountrySerialUTF8liUcubeName& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520CountrySerialUTF8liUcubeName::~ASN1T_EXP_X520CountrySerialUTF8liUcubeName ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520CountrySerialUTF8liUcubeName (pctxt, this);
   }
}

int ASN1C_EXP_X520CountrySerialUTF8liUcubeName::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520CountrySerialUTF8liUcubeName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520CountrySerialUTF8liUcubeName::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520CountrySerialUTF8liUcubeName;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520CountrySerialUTF8liUcubeName (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520CountrySerialUTF8liUcubeName (
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520CountrySerialUTF8liUcubeName;
}

void asn1Free_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT *pctxt, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520CountrySerialUTF8liUcubeName::MemFree ()
{
   asn1Free_EXP_X520CountrySerialUTF8liUcubeName (getCtxtPtr(), &msgData);
}

ASN1T_EXP_X520Pseudonym* new_ASN1T_EXP_X520Pseudonym (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_EXP_X520Pseudonym));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_X520Pseudonym;
}

ASN1C_EXP_X520Pseudonym::ASN1C_EXP_X520Pseudonym
    (ASN1T_EXP_X520Pseudonym& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_EXP_X520Pseudonym::ASN1C_EXP_X520Pseudonym (OSRTMessageBufferIF& msgBuf
   , ASN1T_EXP_X520Pseudonym& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_EXP_X520Pseudonym::ASN1C_EXP_X520Pseudonym (OSRTContext &context
   , ASN1T_EXP_X520Pseudonym& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_EXP_X520Pseudonym::~ASN1T_EXP_X520Pseudonym ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_EXP_X520Pseudonym (pctxt, this);
   }
}

int ASN1C_EXP_X520Pseudonym::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_EXP_X520Pseudonym (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_EXP_X520Pseudonym::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_EXP_X520Pseudonym;
   msgData.setContext (msgBuf.getContext());
   return asn1D_EXP_X520Pseudonym (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_EXP_X520Pseudonym (ASN1T_EXP_X520Pseudonym* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_EXP_X520Pseudonym;
}

void asn1Free_EXP_X520Pseudonym (OSCTXT *pctxt, 
   ASN1T_EXP_X520Pseudonym* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         if (0 != &pvalue->u.utf8String) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.utf8String);
         }
         break;

      case 2:
         if (0 != &pvalue->u.printableString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.printableString);
         }
         break;

      case 3:
         if (0 != &pvalue->u.teletexString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.teletexString);
         }
         break;

      case 4:
         if (0 != pvalue->u.universalString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.universalString);
         }
         break;

      case 5:
         if (0 != pvalue->u.bmpString) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.bmpString);
         }
         break;

   }
}

void ASN1C_EXP_X520Pseudonym::MemFree ()
{
   asn1Free_EXP_X520Pseudonym (getCtxtPtr(), &msgData);
}

