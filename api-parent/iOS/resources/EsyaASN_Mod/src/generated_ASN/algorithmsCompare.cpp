/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "algorithms.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_ALGOS_KEA_Parms_Id (const char* name, 
   ASN1T_ALGOS_KEA_Parms_Id* pValue, ASN1T_ALGOS_KEA_Parms_Id* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_KEA_Parms_Id::Equals (ASN1T_ALGOS_KEA_Parms_Id* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_KEA_Parms_Id ("KEA_Parms_Id", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_Prime_p (const char* name, 
   ASN1T_ALGOS_Prime_p* pValue, ASN1T_ALGOS_Prime_p* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_Prime_p::Equals (ASN1T_ALGOS_Prime_p* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_Prime_p ("Prime_p", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_Trinomial (const char* name, 
   ASN1T_ALGOS_Trinomial* pValue, ASN1T_ALGOS_Trinomial* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_Trinomial::Equals (ASN1T_ALGOS_Trinomial* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_Trinomial ("Trinomial", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_FieldElement (const char* name, 
   ASN1T_ALGOS_FieldElement* pValue, ASN1T_ALGOS_FieldElement* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_FieldElement::Equals (ASN1T_ALGOS_FieldElement* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_FieldElement ("FieldElement", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_ECPoint (const char* name, 
   ASN1T_ALGOS_ECPoint* pValue, ASN1T_ALGOS_ECPoint* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_ECPoint::Equals (ASN1T_ALGOS_ECPoint* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_ECPoint ("ECPoint", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_HashAlgorithm (const char* name, 
   ASN1T_ALGOS_HashAlgorithm* pValue, ASN1T_ALGOS_HashAlgorithm* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_EXP_AlgorithmIdentifier (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_HashAlgorithm::Equals (ASN1T_ALGOS_HashAlgorithm* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_HashAlgorithm ("HashAlgorithm", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_SpecifiedECDomainVersion (const char* name, 
   ASN1T_ALGOS_SpecifiedECDomainVersion* pValue, 
   ASN1T_ALGOS_SpecifiedECDomainVersion* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_SpecifiedECDomainVersion::Equals (ASN1T_ALGOS_SpecifiedECDomainVersion* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_SpecifiedECDomainVersion ("SpecifiedECDomainVersion", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_ECPVer (const char* name, ASN1T_ALGOS_ECPVer* pValue, 
   ASN1T_ALGOS_ECPVer* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_ECPVer::Equals (ASN1T_ALGOS_ECPVer* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_ECPVer ("ECPVer", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_ECPrivateKey_version (const char* name, 
   ASN1T_ALGOS_ECPrivateKey_version* pValue, 
   ASN1T_ALGOS_ECPrivateKey_version* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpUInt8 (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_ALGOS_ECPrivateKey_version::Equals (ASN1T_ALGOS_ECPrivateKey_version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_ECPrivateKey_version ("ECPrivateKey_version", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_Dss_Parms (const char* name, 
   ASN1T_ALGOS_Dss_Parms* pValue, ASN1T_ALGOS_Dss_Parms* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".p", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->p, pCmpValue->p, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".q", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->q, pCmpValue->q, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".g", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->g, pCmpValue->g, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_Dss_Parms::Equals (ASN1T_ALGOS_Dss_Parms* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_Dss_Parms ("Dss_Parms", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_DssSigValue (const char* name, 
   ASN1T_ALGOS_DssSigValue* pValue, ASN1T_ALGOS_DssSigValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".r", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->r, pCmpValue->r, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".s", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->s, pCmpValue->s, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_DssSigValue::Equals (ASN1T_ALGOS_DssSigValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_DssSigValue ("DssSigValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_ValidationParms (const char* name, 
   ASN1T_ALGOS_ValidationParms* pValue, 
   ASN1T_ALGOS_ValidationParms* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".seed", 0, 0, 0);
   if (!rtCmpBitStr (namebuf, pValue->seed.numbits, pValue->seed.data, 
      pCmpValue->seed.numbits, pCmpValue->seed.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".pgenCounter", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->pgenCounter, pCmpValue->pgenCounter, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_ValidationParms::Equals (ASN1T_ALGOS_ValidationParms* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_ValidationParms ("ValidationParms", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_DomainParameters (const char* name, 
   ASN1T_ALGOS_DomainParameters* pValue, 
   ASN1T_ALGOS_DomainParameters* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".p", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->p, pCmpValue->p, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".g", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->g, pCmpValue->g, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".q", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->q, pCmpValue->q, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".j", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.jPresent,
   pCmpValue->m.jPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.jPresent) 
   {
      if ( !rtCmpInteger (namebuf, pValue->j, pCmpValue->j, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".validationParms", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.validationParmsPresent,
   pCmpValue->m.validationParmsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.validationParmsPresent) 
   {
      if (! asn1Compare_ALGOS_ValidationParms (namebuf, &pValue->validationParms, &pCmpValue->validationParms, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_DomainParameters::Equals (ASN1T_ALGOS_DomainParameters* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_DomainParameters ("DomainParameters", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_FieldID (const char* name, 
   ASN1T_ALGOS_FieldID* pValue, ASN1T_ALGOS_FieldID* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".fieldType", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->fieldType, (ASN1OBJID*)&pCmpValue->fieldType, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".parameters", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->parameters.numocts,
   pValue->parameters.data,
   pCmpValue->parameters.numocts,
   pCmpValue->parameters.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_FieldID::Equals (ASN1T_ALGOS_FieldID* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_FieldID ("FieldID", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_ECDSASigValue (const char* name, 
   ASN1T_ALGOS_ECDSASigValue* pValue, ASN1T_ALGOS_ECDSASigValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".r", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->r, pCmpValue->r, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".s", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->s, pCmpValue->s, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_ECDSASigValue::Equals (ASN1T_ALGOS_ECDSASigValue* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_ECDSASigValue ("ECDSASigValue", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_Characteristic_two (const char* name, 
   ASN1T_ALGOS_Characteristic_two* pValue, 
   ASN1T_ALGOS_Characteristic_two* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".m_", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->m_, pCmpValue->m_, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".basis", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->basis, (ASN1OBJID*)&pCmpValue->basis, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".parameters", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->parameters.numocts,
   pValue->parameters.data,
   pCmpValue->parameters.numocts,
   pCmpValue->parameters.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_Characteristic_two::Equals (ASN1T_ALGOS_Characteristic_two* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_Characteristic_two ("Characteristic_two", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_Pentanomial (const char* name, 
   ASN1T_ALGOS_Pentanomial* pValue, ASN1T_ALGOS_Pentanomial* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".k1", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->k1, pCmpValue->k1, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".k2", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->k2, pCmpValue->k2, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".k3", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->k3, pCmpValue->k3, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_Pentanomial::Equals (ASN1T_ALGOS_Pentanomial* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_Pentanomial ("Pentanomial", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_Curve (const char* name, ASN1T_ALGOS_Curve* pValue, 
   ASN1T_ALGOS_Curve* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".a", 0, 0, 0);
   if (! asn1Compare_ALGOS_FieldElement (namebuf, &pValue->a, &pCmpValue->a, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".b", 0, 0, 0);
   if (! asn1Compare_ALGOS_FieldElement (namebuf, &pValue->b, &pCmpValue->b, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".seed", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.seedPresent,
   pCmpValue->m.seedPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.seedPresent) 
   {
      if (!rtCmpBitStr (namebuf, pValue->seed.numbits, pValue->seed.data, 
         pCmpValue->seed.numbits, pCmpValue->seed.data, errBuff, errBuffSize
         )) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_Curve::Equals (ASN1T_ALGOS_Curve* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_Curve ("Curve", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_SpecifiedECDomain (const char* name, 
   ASN1T_ALGOS_SpecifiedECDomain* pValue, 
   ASN1T_ALGOS_SpecifiedECDomain* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->version, pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".fieldID", 0, 0, 0);
   if (! asn1Compare_ALGOS_FieldID (namebuf, &pValue->fieldID, &pCmpValue->fieldID, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".curve", 0, 0, 0);
   if (! asn1Compare_ALGOS_Curve (namebuf, &pValue->curve, &pCmpValue->curve, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".base", 0, 0, 0);
   if (! asn1Compare_ALGOS_ECPoint (namebuf, &pValue->base, &pCmpValue->base, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".order", 0, 0, 0);
   if ( !rtCmpCharStr (namebuf, pValue->order, pCmpValue->order, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".cofactor", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.cofactorPresent,
   pCmpValue->m.cofactorPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.cofactorPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->cofactor, pCmpValue->cofactor, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".hash", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.hashPresent,
   pCmpValue->m.hashPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.hashPresent) 
   {
      if (! asn1Compare_ALGOS_HashAlgorithm (namebuf, &pValue->hash, &pCmpValue->hash, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_SpecifiedECDomain::Equals (ASN1T_ALGOS_SpecifiedECDomain* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_SpecifiedECDomain ("SpecifiedECDomain", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_ECParameters (const char* name, 
   ASN1T_ALGOS_ECParameters* pValue, ASN1T_ALGOS_ECParameters* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* implicitCurve */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.implicitCurve", 0, 0, 0);
         break;

      /* namedCurve */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.namedCurve", 0, 0, 0);
         if ( !rtCmpOID (namebuf, (ASN1OBJID*)pValue->u.namedCurve, (ASN1OBJID*)pCmpValue->u.namedCurve, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* specifiedCurve */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.specifiedCurve", 0, 0, 0);
         if (! asn1Compare_ALGOS_SpecifiedECDomain (namebuf, pValue->u.specifiedCurve, pCmpValue->u.specifiedCurve, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_ALGOS_ECParameters::Equals (ASN1T_ALGOS_ECParameters* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_ECParameters ("ECParameters", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_ECPrivateKey (const char* name, 
   ASN1T_ALGOS_ECPrivateKey* pValue, ASN1T_ALGOS_ECPrivateKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_ALGOS_ECPrivateKey_version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".privateKey", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->privateKey.numocts, 
      pValue->privateKey.data, pCmpValue->privateKey.numocts, 
      pCmpValue->privateKey.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".parameters", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.parametersPresent,
   pCmpValue->m.parametersPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.parametersPresent) 
   {
      if (! asn1Compare_ALGOS_ECParameters (namebuf, &pValue->parameters, &pCmpValue->parameters, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".publicKey", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.publicKeyPresent,
   pCmpValue->m.publicKeyPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.publicKeyPresent) 
   {
      if (!rtCmpBitStr (namebuf, pValue->publicKey.numbits, 
         pValue->publicKey.data, pCmpValue->publicKey.numbits, 
         pCmpValue->publicKey.data, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_ECPrivateKey::Equals (ASN1T_ALGOS_ECPrivateKey* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_ECPrivateKey ("ECPrivateKey", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_ALGOS_RSASSA_PSS_params (const char* name, 
   ASN1T_ALGOS_RSASSA_PSS_params* pValue, 
   ASN1T_ALGOS_RSASSA_PSS_params* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".hashAlgorithm", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.hashAlgorithmPresent,
   pCmpValue->m.hashAlgorithmPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.hashAlgorithmPresent) 
   {
      if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->hashAlgorithm, &pCmpValue->hashAlgorithm, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".maskGenAlgorithm", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.maskGenAlgorithmPresent,
   pCmpValue->m.maskGenAlgorithmPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.maskGenAlgorithmPresent) 
   {
      if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->maskGenAlgorithm, &pCmpValue->maskGenAlgorithm, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".saltLength", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->saltLength, pCmpValue->saltLength, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".trailerField", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->trailerField, pCmpValue->trailerField, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_ALGOS_RSASSA_PSS_params::Equals (ASN1T_ALGOS_RSASSA_PSS_params* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_ALGOS_RSASSA_PSS_params ("RSASSA_PSS_params", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

