/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "etsiqc.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1D_ETSIQC_Iso4217CurrencyCode (OSCTXT* pctxt, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pvalue, ASN1TagType tagging, int length)
{
   int stat = 0;
   ASN1TAG ctag;
   ASN1CCB ccb;

   RTXCTXTPUSHTYPENAME (pctxt, "Iso4217CurrencyCode");

   /* decode CHOICE */

   stat = xd_tag_len (pctxt, &ctag, &length, XM_ADVANCE);
   if (stat != 0) return LOG_RTERR (pctxt, stat);

   ccb.len = length;
   ccb.ptr = OSRTBUFPTR(pctxt);

   switch (ctag)
   {
      case (TM_UNIV|TM_PRIM|2):
         RTXCTXTPUSHELEMNAME (pctxt, "numeric");

         stat = xd_uint16 (pctxt, &pvalue->u.numeric, ASN1IMPL, length);
         pvalue->t = 1;
         if (stat != 0) return LOG_RTERR (pctxt, stat);

         if (!((pvalue->u.numeric >= OSUINTCONST(1) && pvalue->u.numeric
             <= OSUINTCONST(999)))) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)pvalue->u.numeric);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case (TM_UNIV|TM_PRIM|19):
         RTXCTXTPUSHELEMNAME (pctxt, "alphabetic");

         stat = xd_charstr (pctxt, &pvalue->u.alphabetic, ASN1IMPL, 
            (TM_UNIV|TM_PRIM|19), length);
         pvalue->t = 2;
         if (stat != 0) return LOG_RTERR (pctxt, stat);

         { size_t nchars = OSCRTLSTRLEN (pvalue->u.alphabetic);
         if (!(nchars == 3)) {
            rtxErrAddElemNameParm (pctxt);
            rtxErrAddIntParm (pctxt, (int)nchars);
            return LOG_RTERR (pctxt, RTERR_CONSVIO);
         }

         }

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         berErrAddTagParm (pctxt, ctag);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }

   RTXCTXTPOPTYPENAME (pctxt);

   return (stat);
}

EXTERN int asn1D_ETSIQC_MonetaryValue (OSCTXT* pctxt, 
   ASN1T_ETSIQC_MonetaryValue* pvalue, ASN1TagType tagging, int length)
{
   int stat = 0;
   int reqcnt = 0;
   ASN1CCB ccb;

   RTXCTXTPUSHTYPENAME (pctxt, "MonetaryValue");

   if (tagging == ASN1EXPL) {
      stat = xd_match1 (pctxt, 0x10, &length);
      if (stat != 0) return LOG_RTERR (pctxt, stat);
   }

   /* decode SEQUENCE */

   /* default value initialization */
   {
   }

   ccb.len = length;
   ccb.ptr = OSRTBUFPTR(pctxt);
   ccb.seqx = 0;

   while (!XD_CHKEND (pctxt, &ccb)) {
      switch (ccb.seqx) {
      case 0:
         /* decode currency */
         RTXCTXTPUSHELEMNAME (pctxt, "currency");

         stat = asn1D_ETSIQC_Iso4217CurrencyCode (pctxt, &pvalue->currency, 
            ASN1EXPL, length);
         if (stat != 0) return LOG_RTERR (pctxt, stat);

         RTXCTXTPOPELEMNAME (pctxt);

         reqcnt++;
         break;

      case 1:
         /* decode amount */
         RTXCTXTPUSHELEMNAME (pctxt, "amount");

         stat = xd_integer (pctxt, &pvalue->amount, ASN1EXPL, length);
         if (stat != 0) return LOG_RTERR (pctxt, stat);

         RTXCTXTPOPELEMNAME (pctxt);

         reqcnt++;
         break;

      case 2:
         /* decode exponent */
         RTXCTXTPUSHELEMNAME (pctxt, "exponent");

         stat = xd_integer (pctxt, &pvalue->exponent, ASN1EXPL, length);
         if (stat != 0) return LOG_RTERR (pctxt, stat);

         RTXCTXTPOPELEMNAME (pctxt);

         reqcnt++;
         break;

      default:
         { ASN1TAG tag;
         int __len;
         stat = xd_tag_len (pctxt, &tag, &__len, 0);
         if (stat != 0) return LOG_RTERR (pctxt, stat);
         switch (tag) {
         case (TM_UNIV|TM_PRIM|2):
         case (TM_UNIV|TM_PRIM|19):
            stat = RTERR_SEQORDER;
            break;
         default:
            berErrAddTagParm (pctxt, tag);
            stat = ASN_E_NOTINSEQ;
            break;
         }}
      }
      if (stat != 0) return LOG_RTERR (pctxt, stat);
      else ccb.seqx++;
   }

   if (reqcnt < 3) {
      return LOG_RTERR (pctxt, RTERR_SETMISRQ);
   }
   RTXCTXTPOPTYPENAME (pctxt);

   return (stat);
}

EXTERN int asn1D_ETSIQC_QcEuLimitValue (OSCTXT* pctxt, 
   ASN1T_ETSIQC_QcEuLimitValue* pvalue, ASN1TagType tagging, int length)
{
   int stat = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "QcEuLimitValue");

   stat = asn1D_ETSIQC_MonetaryValue (pctxt, pvalue, tagging, length);
   if (stat != 0) return LOG_RTERR (pctxt, stat);

   RTXCTXTPOPTYPENAME (pctxt);

   return (stat);
}

