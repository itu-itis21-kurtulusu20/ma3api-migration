/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "pkcs12.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_PKCS12_KeyBag (const char* name, 
   ASN1T_PKCS12_KeyBag* pValue, ASN1T_PKCS12_KeyBag* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_PKCS18_PrivateKeyInfo (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS12_KeyBag::Equals (ASN1T_PKCS12_KeyBag* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_KeyBag ("KeyBag", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_PKCS8ShroudedKeyBag (const char* name, 
   ASN1T_PKCS12_PKCS8ShroudedKeyBag* pValue, 
   ASN1T_PKCS12_PKCS8ShroudedKeyBag* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return asn1Compare_PKCS18_EncryptedPrivateKeyInfo (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS12_PKCS8ShroudedKeyBag::Equals (ASN1T_PKCS12_PKCS8ShroudedKeyBag* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_PKCS8ShroudedKeyBag ("PKCS8ShroudedKeyBag", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12__x509Certificate_Type (const char* name, 
   ASN1T_PKCS12__x509Certificate_Type* pValue, 
   ASN1T_PKCS12__x509Certificate_Type* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS12__x509Certificate_Type::Equals (ASN1T_PKCS12__x509Certificate_Type* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12__x509Certificate_Type ("_x509Certificate_Type", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12__x509CRL_Type (const char* name, 
   ASN1T_PKCS12__x509CRL_Type* pValue, ASN1T_PKCS12__x509CRL_Type* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS12__x509CRL_Type::Equals (ASN1T_PKCS12__x509CRL_Type* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12__x509CRL_Type ("_x509CRL_Type", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_PFX_version (const char* name, 
   ASN1T_PKCS12_PFX_version* pValue, ASN1T_PKCS12_PFX_version* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpUnsigned (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKCS12_PFX_version::Equals (ASN1T_PKCS12_PFX_version* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_PFX_version ("PFX_version", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_MacData (const char* name, 
   ASN1T_PKCS12_MacData* pValue, ASN1T_PKCS12_MacData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".mac", 0, 0, 0);
   if (! asn1Compare_PKCS7_DigestInfo (namebuf, &pValue->mac, &pCmpValue->mac, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".macSalt", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->macSalt.numocts, pValue->macSalt.data, 
      pCmpValue->macSalt.numocts, pCmpValue->macSalt.data, errBuff, errBuffSize
      )) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".iterations", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->iterations, pCmpValue->iterations, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_MacData::Equals (ASN1T_PKCS12_MacData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_MacData ("MacData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_PFX (const char* name, ASN1T_PKCS12_PFX* pValue, 
   ASN1T_PKCS12_PFX* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".version", 0, 0, 0);
   if (! asn1Compare_PKCS12_PFX_version (namebuf, &pValue->version, &pCmpValue->version, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".authSafe", 0, 0, 0);
   if (! asn1Compare_PKCS7_ContentInfo (namebuf, &pValue->authSafe, &pCmpValue->authSafe, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".macData", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.macDataPresent,
   pCmpValue->m.macDataPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.macDataPresent) 
   {
      if (! asn1Compare_PKCS12_MacData (namebuf, &pValue->macData, &pCmpValue->macData, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_PFX::Equals (ASN1T_PKCS12_PFX* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_PFX ("PFX", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_AuthenticatedSafe (const char* name, 
   ASN1T_PKCS12_AuthenticatedSafe* pValue, 
   ASN1T_PKCS12_AuthenticatedSafe* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_PKCS7_ContentInfo* pdata;
   ASN1T_PKCS7_ContentInfo* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS7_ContentInfo*) pnode->data;
      pCmpdata = (ASN1T_PKCS7_ContentInfo*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS7_ContentInfo (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_AuthenticatedSafe::Equals (ASN1T_PKCS12_AuthenticatedSafe* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_AuthenticatedSafe ("AuthenticatedSafe", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_PKCS12Attribute_attrValues (const char* name, 
   ASN1T_PKCS12_PKCS12Attribute_attrValues* pValue, 
   ASN1T_PKCS12_PKCS12Attribute_attrValues* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1TOpenType* pdata;
   ASN1TOpenType* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1TOpenType*) pnode->data;
      pCmpdata = (ASN1TOpenType*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpOpenType (namebuf,
      pdata->numocts,
      pdata->data,
      pCmpdata->numocts,
      pCmpdata->data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_PKCS12Attribute_attrValues::Equals (ASN1T_PKCS12_PKCS12Attribute_attrValues* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_PKCS12Attribute_attrValues ("PKCS12Attribute_attrValues", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_PKCS12Attribute (const char* name, 
   ASN1T_PKCS12_PKCS12Attribute* pValue, 
   ASN1T_PKCS12_PKCS12Attribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".attrId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->attrId, (ASN1OBJID*)&pCmpValue->attrId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".attrValues", 0, 0, 0);
   if (! asn1Compare_PKCS12_PKCS12Attribute_attrValues (namebuf, &pValue->attrValues, &pCmpValue->attrValues, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_PKCS12Attribute::Equals (ASN1T_PKCS12_PKCS12Attribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_PKCS12Attribute ("PKCS12Attribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12__SetOfPKCS12_PKCS12Attribute (const char* name, 
   ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pValue, 
   ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_PKCS12_PKCS12Attribute* pdata;
   ASN1T_PKCS12_PKCS12Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS12_PKCS12Attribute*) pnode->data;
      pCmpdata = (ASN1T_PKCS12_PKCS12Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS12_PKCS12Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute::Equals (ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12__SetOfPKCS12_PKCS12Attribute ("_SetOfPKCS12_PKCS12Attribute", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_SafeBag (const char* name, 
   ASN1T_PKCS12_SafeBag* pValue, ASN1T_PKCS12_SafeBag* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".bagId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->bagId, (ASN1OBJID*)&pCmpValue->bagId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".bagValue", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->bagValue.numocts,
   pValue->bagValue.data,
   pCmpValue->bagValue.numocts,
   pCmpValue->bagValue.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".bagAttributes", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.bagAttributesPresent,
   pCmpValue->m.bagAttributesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.bagAttributesPresent) 
   {
      if (! asn1Compare_PKCS12__SetOfPKCS12_PKCS12Attribute (namebuf, &pValue->bagAttributes, &pCmpValue->bagAttributes, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_SafeBag::Equals (ASN1T_PKCS12_SafeBag* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_SafeBag ("SafeBag", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_SafeContents (const char* name, 
   ASN1T_PKCS12_SafeContents* pValue, ASN1T_PKCS12_SafeContents* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_PKCS12_SafeBag* pdata;
   ASN1T_PKCS12_SafeBag* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKCS12_SafeBag*) pnode->data;
      pCmpdata = (ASN1T_PKCS12_SafeBag*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKCS12_SafeBag (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_SafeContents::Equals (ASN1T_PKCS12_SafeContents* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_SafeContents ("SafeContents", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_CertBag (const char* name, 
   ASN1T_PKCS12_CertBag* pValue, ASN1T_PKCS12_CertBag* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".certId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->certId, (ASN1OBJID*)&pCmpValue->certId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".certValue", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->certValue.numocts,
   pValue->certValue.data,
   pCmpValue->certValue.numocts,
   pCmpValue->certValue.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_CertBag::Equals (ASN1T_PKCS12_CertBag* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_CertBag ("CertBag", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_CRLBag (const char* name, 
   ASN1T_PKCS12_CRLBag* pValue, ASN1T_PKCS12_CRLBag* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".crlId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->crlId, (ASN1OBJID*)&pCmpValue->crlId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".crltValue", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->crltValue.numocts,
   pValue->crltValue.data,
   pCmpValue->crltValue.numocts,
   pCmpValue->crltValue.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_CRLBag::Equals (ASN1T_PKCS12_CRLBag* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_CRLBag ("CRLBag", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_SecretBag (const char* name, 
   ASN1T_PKCS12_SecretBag* pValue, ASN1T_PKCS12_SecretBag* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".secretTypeId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->secretTypeId, (ASN1OBJID*)&pCmpValue->secretTypeId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".secretValue", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->secretValue.numocts,
   pValue->secretValue.data,
   pCmpValue->secretValue.numocts,
   pCmpValue->secretValue.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_SecretBag::Equals (ASN1T_PKCS12_SecretBag* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_SecretBag ("SecretBag", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKCS12_PKCS12PbeParams (const char* name, 
   ASN1T_PKCS12_PKCS12PbeParams* pValue, 
   ASN1T_PKCS12_PKCS12PbeParams* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".salt", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->salt.numocts, pValue->salt.data, 
      pCmpValue->salt.numocts, pCmpValue->salt.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".iterations", 0, 0, 0);
   if ( !rtCmpInteger (namebuf, pValue->iterations, pCmpValue->iterations, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_PKCS12_PKCS12PbeParams::Equals (ASN1T_PKCS12_PKCS12PbeParams* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKCS12_PKCS12PbeParams ("PKCS12PbeParams", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

