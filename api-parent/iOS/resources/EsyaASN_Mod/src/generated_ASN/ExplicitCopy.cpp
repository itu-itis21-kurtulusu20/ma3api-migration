/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "Explicit.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_EXP_CertificateSerialNumber (OSCTXT* pctxt, 
   ASN1T_EXP_CertificateSerialNumber* pSrcValue, 
   ASN1T_EXP_CertificateSerialNumber* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)*pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_CertificateSerialNumber::ASN1C_EXP_CertificateSerialNumber (ASN1C_EXP_CertificateSerialNumber& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_CertificateSerialNumber& ASN1C_EXP_CertificateSerialNumber::getCopy (ASN1T_EXP_CertificateSerialNumber* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_CertificateSerialNumber);
      new (pDstData) ASN1T_EXP_CertificateSerialNumber;
   }

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_CertificateSerialNumber* ASN1C_EXP_CertificateSerialNumber::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_CertificateSerialNumber* pDstData = new ASN1T_EXP_CertificateSerialNumber;

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_AttributeType (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeType* pSrcValue, ASN1T_EXP_AttributeType* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_EXP_AttributeType::ASN1C_EXP_AttributeType (ASN1C_EXP_AttributeType& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_AttributeType& ASN1C_EXP_AttributeType::getCopy (ASN1T_EXP_AttributeType* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_AttributeType);
      new (pDstData) ASN1T_EXP_AttributeType;
   }

   asn1Copy_EXP_AttributeType (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_AttributeType* ASN1C_EXP_AttributeType::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_AttributeType* pDstData = new ASN1T_EXP_AttributeType;

   asn1Copy_EXP_AttributeType (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_AttributeValue (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeValue* pSrcValue, ASN1T_EXP_AttributeValue* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOpenType (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_AttributeValue::ASN1C_EXP_AttributeValue (ASN1C_EXP_AttributeValue& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_AttributeValue& ASN1C_EXP_AttributeValue::getCopy (ASN1T_EXP_AttributeValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_AttributeValue);
      new (pDstData) ASN1T_EXP_AttributeValue;
   }

   asn1Copy_EXP_AttributeValue (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_AttributeValue* ASN1C_EXP_AttributeValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_AttributeValue* pDstData = new ASN1T_EXP_AttributeValue;

   asn1Copy_EXP_AttributeValue (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_UniqueIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_UniqueIdentifier* pSrcValue, ASN1T_EXP_UniqueIdentifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynBitStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_UniqueIdentifier::ASN1C_EXP_UniqueIdentifier (ASN1C_EXP_UniqueIdentifier& original) :
   ASN1CBitStr (original), msgData (original.getCopy ())
{
   ASN1CBitStr::init (msgData);
}

ASN1C_EXP_UniqueIdentifier& ASN1C_EXP_UniqueIdentifier::operator= (ASN1C_EXP_UniqueIdentifier& srcData)
{
   srcData.getCopy (&msgData);
   return *this;
}

ASN1T_EXP_UniqueIdentifier& ASN1C_EXP_UniqueIdentifier::getCopy (ASN1T_EXP_UniqueIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_UniqueIdentifier);
      new (pDstData) ASN1T_EXP_UniqueIdentifier;
   }

   asn1Copy_EXP_UniqueIdentifier (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_UniqueIdentifier* ASN1C_EXP_UniqueIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_UniqueIdentifier* pDstData = new ASN1T_EXP_UniqueIdentifier;

   asn1Copy_EXP_UniqueIdentifier (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_X121Address (OSCTXT* pctxt, ASN1T_EXP_X121Address pSrcValue, 
   ASN1T_EXP_X121Address* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_X121Address::ASN1C_EXP_X121Address (ASN1C_EXP_X121Address& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X121Address& ASN1C_EXP_X121Address::getCopy (ASN1T_EXP_X121Address* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X121Address);
      new (pDstData) ASN1T_EXP_X121Address;
   }

   asn1Copy_EXP_X121Address (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_X121Address* ASN1C_EXP_X121Address::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X121Address* pDstData = new ASN1T_EXP_X121Address;

   asn1Copy_EXP_X121Address (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_NetworkAddress (OSCTXT* pctxt, 
   ASN1T_EXP_NetworkAddress pSrcValue, ASN1T_EXP_NetworkAddress* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_NetworkAddress::ASN1C_EXP_NetworkAddress (ASN1C_EXP_NetworkAddress& original) :
   ASN1C_EXP_X121Address (original)
{
}

ASN1T_EXP_NetworkAddress& ASN1C_EXP_NetworkAddress::getCopy (ASN1T_EXP_NetworkAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_NetworkAddress);
      new (pDstData) ASN1T_EXP_NetworkAddress;
   }

   asn1Copy_EXP_NetworkAddress (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_NetworkAddress* ASN1C_EXP_NetworkAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_NetworkAddress* pDstData = new ASN1T_EXP_NetworkAddress;

   asn1Copy_EXP_NetworkAddress (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_TerminalIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_TerminalIdentifier pSrcValue, ASN1T_EXP_TerminalIdentifier*
    pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_TerminalIdentifier::ASN1C_EXP_TerminalIdentifier (ASN1C_EXP_TerminalIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TerminalIdentifier& ASN1C_EXP_TerminalIdentifier::getCopy (ASN1T_EXP_TerminalIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TerminalIdentifier);
      new (pDstData) ASN1T_EXP_TerminalIdentifier;
   }

   asn1Copy_EXP_TerminalIdentifier (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_TerminalIdentifier* ASN1C_EXP_TerminalIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TerminalIdentifier* pDstData = new ASN1T_EXP_TerminalIdentifier;

   asn1Copy_EXP_TerminalIdentifier (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_OrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationName pSrcValue, ASN1T_EXP_OrganizationName* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_OrganizationName::ASN1C_EXP_OrganizationName (ASN1C_EXP_OrganizationName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_OrganizationName& ASN1C_EXP_OrganizationName::getCopy (ASN1T_EXP_OrganizationName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_OrganizationName);
      new (pDstData) ASN1T_EXP_OrganizationName;
   }

   asn1Copy_EXP_OrganizationName (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_OrganizationName* ASN1C_EXP_OrganizationName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_OrganizationName* pDstData = new ASN1T_EXP_OrganizationName;

   asn1Copy_EXP_OrganizationName (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_NumericUserIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_NumericUserIdentifier pSrcValue, ASN1T_EXP_NumericUserIdentifier*
    pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_NumericUserIdentifier::ASN1C_EXP_NumericUserIdentifier (ASN1C_EXP_NumericUserIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_NumericUserIdentifier& ASN1C_EXP_NumericUserIdentifier::getCopy (ASN1T_EXP_NumericUserIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_NumericUserIdentifier);
      new (pDstData) ASN1T_EXP_NumericUserIdentifier;
   }

   asn1Copy_EXP_NumericUserIdentifier (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_NumericUserIdentifier* ASN1C_EXP_NumericUserIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_NumericUserIdentifier* pDstData = new ASN1T_EXP_NumericUserIdentifier;

   asn1Copy_EXP_NumericUserIdentifier (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_OrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationalUnitName pSrcValue, ASN1T_EXP_OrganizationalUnitName
   * pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_OrganizationalUnitName::ASN1C_EXP_OrganizationalUnitName (ASN1C_EXP_OrganizationalUnitName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_OrganizationalUnitName& ASN1C_EXP_OrganizationalUnitName::getCopy (ASN1T_EXP_OrganizationalUnitName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_OrganizationalUnitName);
      new (pDstData) ASN1T_EXP_OrganizationalUnitName;
   }

   asn1Copy_EXP_OrganizationalUnitName (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_OrganizationalUnitName* ASN1C_EXP_OrganizationalUnitName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_OrganizationalUnitName* pDstData = new ASN1T_EXP_OrganizationalUnitName;

   asn1Copy_EXP_OrganizationalUnitName (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_CommonName (OSCTXT* pctxt, ASN1T_EXP_CommonName pSrcValue, 
   ASN1T_EXP_CommonName* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_CommonName::ASN1C_EXP_CommonName (ASN1C_EXP_CommonName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_CommonName& ASN1C_EXP_CommonName::getCopy (ASN1T_EXP_CommonName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_CommonName);
      new (pDstData) ASN1T_EXP_CommonName;
   }

   asn1Copy_EXP_CommonName (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_CommonName* ASN1C_EXP_CommonName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_CommonName* pDstData = new ASN1T_EXP_CommonName;

   asn1Copy_EXP_CommonName (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_TeletexCommonName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexCommonName pSrcValue, ASN1T_EXP_TeletexCommonName*
    pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_TeletexCommonName::ASN1C_EXP_TeletexCommonName (ASN1C_EXP_TeletexCommonName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TeletexCommonName& ASN1C_EXP_TeletexCommonName::getCopy (ASN1T_EXP_TeletexCommonName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TeletexCommonName);
      new (pDstData) ASN1T_EXP_TeletexCommonName;
   }

   asn1Copy_EXP_TeletexCommonName (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_TeletexCommonName* ASN1C_EXP_TeletexCommonName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TeletexCommonName* pDstData = new ASN1T_EXP_TeletexCommonName;

   asn1Copy_EXP_TeletexCommonName (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_TeletexOrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationName pSrcValue, 
   ASN1T_EXP_TeletexOrganizationName* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_TeletexOrganizationName::ASN1C_EXP_TeletexOrganizationName (ASN1C_EXP_TeletexOrganizationName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TeletexOrganizationName& ASN1C_EXP_TeletexOrganizationName::getCopy (ASN1T_EXP_TeletexOrganizationName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TeletexOrganizationName);
      new (pDstData) ASN1T_EXP_TeletexOrganizationName;
   }

   asn1Copy_EXP_TeletexOrganizationName (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_TeletexOrganizationName* ASN1C_EXP_TeletexOrganizationName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TeletexOrganizationName* pDstData = new ASN1T_EXP_TeletexOrganizationName;

   asn1Copy_EXP_TeletexOrganizationName (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_TeletexOrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitName pSrcValue, 
   ASN1T_EXP_TeletexOrganizationalUnitName* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_TeletexOrganizationalUnitName::ASN1C_EXP_TeletexOrganizationalUnitName (ASN1C_EXP_TeletexOrganizationalUnitName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TeletexOrganizationalUnitName& ASN1C_EXP_TeletexOrganizationalUnitName::getCopy (ASN1T_EXP_TeletexOrganizationalUnitName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TeletexOrganizationalUnitName);
      new (pDstData) ASN1T_EXP_TeletexOrganizationalUnitName;
   }

   asn1Copy_EXP_TeletexOrganizationalUnitName (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_TeletexOrganizationalUnitName* ASN1C_EXP_TeletexOrganizationalUnitName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TeletexOrganizationalUnitName* pDstData = new ASN1T_EXP_TeletexOrganizationalUnitName;

   asn1Copy_EXP_TeletexOrganizationalUnitName (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_PDSName (OSCTXT* pctxt, ASN1T_EXP_PDSName pSrcValue, 
   ASN1T_EXP_PDSName* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_PDSName::ASN1C_EXP_PDSName (ASN1C_EXP_PDSName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_PDSName& ASN1C_EXP_PDSName::getCopy (ASN1T_EXP_PDSName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PDSName);
      new (pDstData) ASN1T_EXP_PDSName;
   }

   asn1Copy_EXP_PDSName (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_PDSName* ASN1C_EXP_PDSName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PDSName* pDstData = new ASN1T_EXP_PDSName;

   asn1Copy_EXP_PDSName (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_PDSParameter (OSCTXT* pctxt, 
   ASN1T_EXP_PDSParameter* pSrcValue, ASN1T_EXP_PDSParameter* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.printable_stringPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->printable_string, (char **)&pDstValue->printable_string);
   }

   if (pSrcValue->m.teletex_stringPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->teletex_string, (char **)&pDstValue->teletex_string);
   }

}

ASN1C_EXP_PDSParameter::ASN1C_EXP_PDSParameter (ASN1C_EXP_PDSParameter& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_PDSParameter::ASN1T_EXP_PDSParameter (ASN1C_EXP_PDSParameter& original)
{
   original.getCopy (this);
}

ASN1T_EXP_PDSParameter& ASN1C_EXP_PDSParameter::getCopy (ASN1T_EXP_PDSParameter* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PDSParameter);
      new (pDstData) ASN1T_EXP_PDSParameter;
   }

   asn1Copy_EXP_PDSParameter (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PDSParameter* ASN1C_EXP_PDSParameter::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PDSParameter* pDstData = new ASN1T_EXP_PDSParameter;

   asn1Copy_EXP_PDSParameter (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PhysicalDeliveryOfficeName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_PhysicalDeliveryOfficeName::ASN1C_EXP_PhysicalDeliveryOfficeName (ASN1C_EXP_PhysicalDeliveryOfficeName& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_PhysicalDeliveryOfficeName& ASN1C_EXP_PhysicalDeliveryOfficeName::getCopy (ASN1T_EXP_PhysicalDeliveryOfficeName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PhysicalDeliveryOfficeName);
      new (pDstData) ASN1T_EXP_PhysicalDeliveryOfficeName;
   }

   asn1Copy_EXP_PhysicalDeliveryOfficeName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PhysicalDeliveryOfficeName* ASN1C_EXP_PhysicalDeliveryOfficeName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PhysicalDeliveryOfficeName* pDstData = new ASN1T_EXP_PhysicalDeliveryOfficeName;

   asn1Copy_EXP_PhysicalDeliveryOfficeName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PhysicalDeliveryOfficeNumber (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_PhysicalDeliveryOfficeNumber::ASN1C_EXP_PhysicalDeliveryOfficeNumber (ASN1C_EXP_PhysicalDeliveryOfficeNumber& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_PhysicalDeliveryOfficeNumber& ASN1C_EXP_PhysicalDeliveryOfficeNumber::getCopy (ASN1T_EXP_PhysicalDeliveryOfficeNumber* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PhysicalDeliveryOfficeNumber);
      new (pDstData) ASN1T_EXP_PhysicalDeliveryOfficeNumber;
   }

   asn1Copy_EXP_PhysicalDeliveryOfficeNumber (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PhysicalDeliveryOfficeNumber* ASN1C_EXP_PhysicalDeliveryOfficeNumber::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pDstData = new ASN1T_EXP_PhysicalDeliveryOfficeNumber;

   asn1Copy_EXP_PhysicalDeliveryOfficeNumber (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_ExtensionORAddressComponents (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionORAddressComponents* pSrcValue, 
   ASN1T_EXP_ExtensionORAddressComponents* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_ExtensionORAddressComponents::ASN1C_EXP_ExtensionORAddressComponents (ASN1C_EXP_ExtensionORAddressComponents& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_ExtensionORAddressComponents& ASN1C_EXP_ExtensionORAddressComponents::getCopy (ASN1T_EXP_ExtensionORAddressComponents* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_ExtensionORAddressComponents);
      new (pDstData) ASN1T_EXP_ExtensionORAddressComponents;
   }

   asn1Copy_EXP_ExtensionORAddressComponents (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_ExtensionORAddressComponents* ASN1C_EXP_ExtensionORAddressComponents::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_ExtensionORAddressComponents* pDstData = new ASN1T_EXP_ExtensionORAddressComponents;

   asn1Copy_EXP_ExtensionORAddressComponents (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PhysicalDeliveryPersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_PhysicalDeliveryPersonalName::ASN1C_EXP_PhysicalDeliveryPersonalName (ASN1C_EXP_PhysicalDeliveryPersonalName& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_PhysicalDeliveryPersonalName& ASN1C_EXP_PhysicalDeliveryPersonalName::getCopy (ASN1T_EXP_PhysicalDeliveryPersonalName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PhysicalDeliveryPersonalName);
      new (pDstData) ASN1T_EXP_PhysicalDeliveryPersonalName;
   }

   asn1Copy_EXP_PhysicalDeliveryPersonalName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PhysicalDeliveryPersonalName* ASN1C_EXP_PhysicalDeliveryPersonalName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PhysicalDeliveryPersonalName* pDstData = new ASN1T_EXP_PhysicalDeliveryPersonalName;

   asn1Copy_EXP_PhysicalDeliveryPersonalName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PhysicalDeliveryOrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_PhysicalDeliveryOrganizationName::ASN1C_EXP_PhysicalDeliveryOrganizationName (ASN1C_EXP_PhysicalDeliveryOrganizationName& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_PhysicalDeliveryOrganizationName& ASN1C_EXP_PhysicalDeliveryOrganizationName::getCopy (ASN1T_EXP_PhysicalDeliveryOrganizationName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PhysicalDeliveryOrganizationName);
      new (pDstData) ASN1T_EXP_PhysicalDeliveryOrganizationName;
   }

   asn1Copy_EXP_PhysicalDeliveryOrganizationName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PhysicalDeliveryOrganizationName* ASN1C_EXP_PhysicalDeliveryOrganizationName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pDstData = new ASN1T_EXP_PhysicalDeliveryOrganizationName;

   asn1Copy_EXP_PhysicalDeliveryOrganizationName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_ExtensionPhysicalDeliveryAddressComponents (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pSrcValue, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents (ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::getCopy (ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents);
      new (pDstData) ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents;
   }

   asn1Copy_EXP_ExtensionPhysicalDeliveryAddressComponents (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pDstData = new ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents;

   asn1Copy_EXP_ExtensionPhysicalDeliveryAddressComponents (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_StreetAddress (OSCTXT* pctxt, 
   ASN1T_EXP_StreetAddress* pSrcValue, ASN1T_EXP_StreetAddress* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_StreetAddress::ASN1C_EXP_StreetAddress (ASN1C_EXP_StreetAddress& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_StreetAddress& ASN1C_EXP_StreetAddress::getCopy (ASN1T_EXP_StreetAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_StreetAddress);
      new (pDstData) ASN1T_EXP_StreetAddress;
   }

   asn1Copy_EXP_StreetAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_StreetAddress* ASN1C_EXP_StreetAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_StreetAddress* pDstData = new ASN1T_EXP_StreetAddress;

   asn1Copy_EXP_StreetAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PostOfficeBoxAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PostOfficeBoxAddress* pSrcValue, ASN1T_EXP_PostOfficeBoxAddress*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_PostOfficeBoxAddress::ASN1C_EXP_PostOfficeBoxAddress (ASN1C_EXP_PostOfficeBoxAddress& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_PostOfficeBoxAddress& ASN1C_EXP_PostOfficeBoxAddress::getCopy (ASN1T_EXP_PostOfficeBoxAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PostOfficeBoxAddress);
      new (pDstData) ASN1T_EXP_PostOfficeBoxAddress;
   }

   asn1Copy_EXP_PostOfficeBoxAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PostOfficeBoxAddress* ASN1C_EXP_PostOfficeBoxAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PostOfficeBoxAddress* pDstData = new ASN1T_EXP_PostOfficeBoxAddress;

   asn1Copy_EXP_PostOfficeBoxAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PosteRestanteAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PosteRestanteAddress* pSrcValue, ASN1T_EXP_PosteRestanteAddress*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_PosteRestanteAddress::ASN1C_EXP_PosteRestanteAddress (ASN1C_EXP_PosteRestanteAddress& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_PosteRestanteAddress& ASN1C_EXP_PosteRestanteAddress::getCopy (ASN1T_EXP_PosteRestanteAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PosteRestanteAddress);
      new (pDstData) ASN1T_EXP_PosteRestanteAddress;
   }

   asn1Copy_EXP_PosteRestanteAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PosteRestanteAddress* ASN1C_EXP_PosteRestanteAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PosteRestanteAddress* pDstData = new ASN1T_EXP_PosteRestanteAddress;

   asn1Copy_EXP_PosteRestanteAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_UniquePostalName (OSCTXT* pctxt, 
   ASN1T_EXP_UniquePostalName* pSrcValue, ASN1T_EXP_UniquePostalName*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_UniquePostalName::ASN1C_EXP_UniquePostalName (ASN1C_EXP_UniquePostalName& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_UniquePostalName& ASN1C_EXP_UniquePostalName::getCopy (ASN1T_EXP_UniquePostalName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_UniquePostalName);
      new (pDstData) ASN1T_EXP_UniquePostalName;
   }

   asn1Copy_EXP_UniquePostalName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_UniquePostalName* ASN1C_EXP_UniquePostalName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_UniquePostalName* pDstData = new ASN1T_EXP_UniquePostalName;

   asn1Copy_EXP_UniquePostalName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_LocalPostalAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_LocalPostalAttributes* pSrcValue, ASN1T_EXP_LocalPostalAttributes*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_PDSParameter (pctxt, pSrcValue, pDstValue);
}

ASN1C_EXP_LocalPostalAttributes::ASN1C_EXP_LocalPostalAttributes (ASN1C_EXP_LocalPostalAttributes& original) :
   ASN1C_EXP_PDSParameter (original)
{
}

ASN1T_EXP_LocalPostalAttributes& ASN1C_EXP_LocalPostalAttributes::getCopy (ASN1T_EXP_LocalPostalAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_LocalPostalAttributes);
      new (pDstData) ASN1T_EXP_LocalPostalAttributes;
   }

   asn1Copy_EXP_LocalPostalAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_LocalPostalAttributes* ASN1C_EXP_LocalPostalAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_LocalPostalAttributes* pDstData = new ASN1T_EXP_LocalPostalAttributes;

   asn1Copy_EXP_LocalPostalAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520countryName (OSCTXT* pctxt, 
   ASN1T_EXP_X520countryName pSrcValue, ASN1T_EXP_X520countryName* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_X520countryName::ASN1C_EXP_X520countryName (ASN1C_EXP_X520countryName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520countryName& ASN1C_EXP_X520countryName::getCopy (ASN1T_EXP_X520countryName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520countryName);
      new (pDstData) ASN1T_EXP_X520countryName;
   }

   asn1Copy_EXP_X520countryName (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_X520countryName* ASN1C_EXP_X520countryName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520countryName* pDstData = new ASN1T_EXP_X520countryName;

   asn1Copy_EXP_X520countryName (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_X520SerialNumber (OSCTXT* pctxt, 
   ASN1T_EXP_X520SerialNumber pSrcValue, ASN1T_EXP_X520SerialNumber* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_X520SerialNumber::ASN1C_EXP_X520SerialNumber (ASN1C_EXP_X520SerialNumber& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520SerialNumber& ASN1C_EXP_X520SerialNumber::getCopy (ASN1T_EXP_X520SerialNumber* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520SerialNumber);
      new (pDstData) ASN1T_EXP_X520SerialNumber;
   }

   asn1Copy_EXP_X520SerialNumber (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_X520SerialNumber* ASN1C_EXP_X520SerialNumber::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520SerialNumber* pDstData = new ASN1T_EXP_X520SerialNumber;

   asn1Copy_EXP_X520SerialNumber (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_DomainComponent (OSCTXT* pctxt, 
   ASN1T_EXP_DomainComponent pSrcValue, ASN1T_EXP_DomainComponent* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_DomainComponent::ASN1C_EXP_DomainComponent (ASN1C_EXP_DomainComponent& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_DomainComponent& ASN1C_EXP_DomainComponent::getCopy (ASN1T_EXP_DomainComponent* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_DomainComponent);
      new (pDstData) ASN1T_EXP_DomainComponent;
   }

   asn1Copy_EXP_DomainComponent (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_DomainComponent* ASN1C_EXP_DomainComponent::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_DomainComponent* pDstData = new ASN1T_EXP_DomainComponent;

   asn1Copy_EXP_DomainComponent (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_EmailAddress (OSCTXT* pctxt, 
   ASN1T_EXP_EmailAddress pSrcValue, ASN1T_EXP_EmailAddress* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_EXP_EmailAddress::ASN1C_EXP_EmailAddress (ASN1C_EXP_EmailAddress& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_EmailAddress& ASN1C_EXP_EmailAddress::getCopy (ASN1T_EXP_EmailAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_EmailAddress);
      new (pDstData) ASN1T_EXP_EmailAddress;
   }

   asn1Copy_EXP_EmailAddress (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_EXP_EmailAddress* ASN1C_EXP_EmailAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_EmailAddress* pDstData = new ASN1T_EXP_EmailAddress;

   asn1Copy_EXP_EmailAddress (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_EXP_AlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_AlgorithmIdentifier* pSrcValue, ASN1T_EXP_AlgorithmIdentifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   rtCopyOID ((ASN1OBJID*)&pSrcValue->algorithm, (ASN1OBJID*)&pDstValue->algorithm);

   if (pSrcValue->m.parametersPresent) {
      rtCopyOpenType (pctxt, &pSrcValue->parameters, &pDstValue->parameters);
   }

}

ASN1C_EXP_AlgorithmIdentifier::ASN1C_EXP_AlgorithmIdentifier (ASN1C_EXP_AlgorithmIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_AlgorithmIdentifier::ASN1T_EXP_AlgorithmIdentifier (ASN1C_EXP_AlgorithmIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_EXP_AlgorithmIdentifier& ASN1C_EXP_AlgorithmIdentifier::getCopy (ASN1T_EXP_AlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_AlgorithmIdentifier);
      new (pDstData) ASN1T_EXP_AlgorithmIdentifier;
   }

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_AlgorithmIdentifier* ASN1C_EXP_AlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_AlgorithmIdentifier* pDstData = new ASN1T_EXP_AlgorithmIdentifier;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_AttributeTypeAndValue (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeTypeAndValue* pSrcValue, ASN1T_EXP_AttributeTypeAndValue*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AttributeType (pctxt, &pSrcValue->type, &pDstValue->type);

   asn1Copy_EXP_AttributeValue (pctxt, &pSrcValue->value, &pDstValue->value);

}

ASN1C_EXP_AttributeTypeAndValue::ASN1C_EXP_AttributeTypeAndValue (ASN1C_EXP_AttributeTypeAndValue& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_AttributeTypeAndValue::ASN1T_EXP_AttributeTypeAndValue (ASN1C_EXP_AttributeTypeAndValue& original)
{
   original.getCopy (this);
}

ASN1T_EXP_AttributeTypeAndValue& ASN1C_EXP_AttributeTypeAndValue::getCopy (ASN1T_EXP_AttributeTypeAndValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_AttributeTypeAndValue);
      new (pDstData) ASN1T_EXP_AttributeTypeAndValue;
   }

   asn1Copy_EXP_AttributeTypeAndValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_AttributeTypeAndValue* ASN1C_EXP_AttributeTypeAndValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_AttributeTypeAndValue* pDstData = new ASN1T_EXP_AttributeTypeAndValue;

   asn1Copy_EXP_AttributeTypeAndValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_RelativeDistinguishedName (OSCTXT* pctxt, 
   ASN1T_EXP_RelativeDistinguishedName* pSrcValue, 
   ASN1T_EXP_RelativeDistinguishedName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_AttributeTypeAndValue* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_AttributeTypeAndValue* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_AttributeTypeAndValue);
         pSrcData = (ASN1T_EXP_AttributeTypeAndValue*) pnode->data;

         asn1Copy_EXP_AttributeTypeAndValue (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_RelativeDistinguishedName::ASN1C_EXP_RelativeDistinguishedName (ASN1C_EXP_RelativeDistinguishedName& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_RelativeDistinguishedName*)pList)
{
}

ASN1C_EXP_RelativeDistinguishedName& ASN1C_EXP_RelativeDistinguishedName::operator= (ASN1C_EXP_RelativeDistinguishedName& srcData)
{
   clear ();
   asn1Copy_EXP_RelativeDistinguishedName (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_RelativeDistinguishedName& ASN1C_EXP_RelativeDistinguishedName::getCopy (ASN1T_EXP_RelativeDistinguishedName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_RelativeDistinguishedName);
      new (pDstData) ASN1T_EXP_RelativeDistinguishedName;
   }

   asn1Copy_EXP_RelativeDistinguishedName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_RelativeDistinguishedName* ASN1C_EXP_RelativeDistinguishedName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_RelativeDistinguishedName* pDstData = new ASN1T_EXP_RelativeDistinguishedName;

   asn1Copy_EXP_RelativeDistinguishedName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_RDNSequence (OSCTXT* pctxt, 
   ASN1T_EXP_RDNSequence* pSrcValue, ASN1T_EXP_RDNSequence* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_RelativeDistinguishedName* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_RelativeDistinguishedName* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_RelativeDistinguishedName);
         pSrcData = (ASN1T_EXP_RelativeDistinguishedName*) pnode->data;

         asn1Copy_EXP_RelativeDistinguishedName (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_RDNSequence::ASN1C_EXP_RDNSequence (ASN1C_EXP_RDNSequence& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_RDNSequence*)pList)
{
}

ASN1C_EXP_RDNSequence& ASN1C_EXP_RDNSequence::operator= (ASN1C_EXP_RDNSequence& srcData)
{
   clear ();
   asn1Copy_EXP_RDNSequence (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_RDNSequence& ASN1C_EXP_RDNSequence::getCopy (ASN1T_EXP_RDNSequence* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_RDNSequence);
      new (pDstData) ASN1T_EXP_RDNSequence;
   }

   asn1Copy_EXP_RDNSequence (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_RDNSequence* ASN1C_EXP_RDNSequence::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_RDNSequence* pDstData = new ASN1T_EXP_RDNSequence;

   asn1Copy_EXP_RDNSequence (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_Name (OSCTXT* pctxt, ASN1T_EXP_Name* pSrcValue, 
   ASN1T_EXP_Name* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* rdnSequence */
      case 1:
         pDstValue->u.rdnSequence = rtxMemAllocType (pctxt, ASN1T_EXP_RDNSequence);
         new (pDstValue->u.rdnSequence) ASN1T_EXP_RDNSequence;
         asn1Copy_EXP_RDNSequence (pctxt, pSrcValue->u.rdnSequence, pDstValue->u.rdnSequence);
         break;

   }
}

ASN1C_EXP_Name::ASN1C_EXP_Name (ASN1C_EXP_Name& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_Name::ASN1T_EXP_Name (ASN1C_EXP_Name& original)
{
   original.getCopy (this);
}

ASN1T_EXP_Name& ASN1C_EXP_Name::getCopy (ASN1T_EXP_Name* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_Name);
      new (pDstData) ASN1T_EXP_Name;
   }

   asn1Copy_EXP_Name (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_Name* ASN1C_EXP_Name::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_Name* pDstData = new ASN1T_EXP_Name;

   asn1Copy_EXP_Name (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_Time (OSCTXT* pctxt, ASN1T_EXP_Time* pSrcValue, 
   ASN1T_EXP_Time* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utcTime */
      case 1:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.utcTime, (char **)&pDstValue->u.utcTime);
         break;

      /* generalTime */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.generalTime, (char **)&pDstValue->u.generalTime);
         break;

   }
}

ASN1C_EXP_Time::ASN1C_EXP_Time (ASN1C_EXP_Time& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_Time::ASN1T_EXP_Time (ASN1C_EXP_Time& original)
{
   original.getCopy (this);
}

ASN1T_EXP_Time& ASN1C_EXP_Time::getCopy (ASN1T_EXP_Time* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_Time);
      new (pDstData) ASN1T_EXP_Time;
   }

   asn1Copy_EXP_Time (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_Time* ASN1C_EXP_Time::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_Time* pDstData = new ASN1T_EXP_Time;

   asn1Copy_EXP_Time (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_Validity (OSCTXT* pctxt, ASN1T_EXP_Validity* pSrcValue, 
   ASN1T_EXP_Validity* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_Time (pctxt, &pSrcValue->notBefore, &pDstValue->notBefore);

   asn1Copy_EXP_Time (pctxt, &pSrcValue->notAfter, &pDstValue->notAfter);

}

ASN1C_EXP_Validity::ASN1C_EXP_Validity (ASN1C_EXP_Validity& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_Validity::ASN1T_EXP_Validity (ASN1C_EXP_Validity& original)
{
   original.getCopy (this);
}

ASN1T_EXP_Validity& ASN1C_EXP_Validity::getCopy (ASN1T_EXP_Validity* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_Validity);
      new (pDstData) ASN1T_EXP_Validity;
   }

   asn1Copy_EXP_Validity (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_Validity* ASN1C_EXP_Validity::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_Validity* pDstData = new ASN1T_EXP_Validity;

   asn1Copy_EXP_Validity (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_SubjectPublicKeyInfo (OSCTXT* pctxt, 
   ASN1T_EXP_SubjectPublicKeyInfo* pSrcValue, ASN1T_EXP_SubjectPublicKeyInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->algorithm, &pDstValue->algorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->subjectPublicKey, &pDstValue->
      subjectPublicKey);

}

ASN1C_EXP_SubjectPublicKeyInfo::ASN1C_EXP_SubjectPublicKeyInfo (ASN1C_EXP_SubjectPublicKeyInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_SubjectPublicKeyInfo::ASN1T_EXP_SubjectPublicKeyInfo (ASN1C_EXP_SubjectPublicKeyInfo& original)
{
   original.getCopy (this);
}

ASN1T_EXP_SubjectPublicKeyInfo& ASN1C_EXP_SubjectPublicKeyInfo::getCopy (ASN1T_EXP_SubjectPublicKeyInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_SubjectPublicKeyInfo);
      new (pDstData) ASN1T_EXP_SubjectPublicKeyInfo;
   }

   asn1Copy_EXP_SubjectPublicKeyInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_SubjectPublicKeyInfo* ASN1C_EXP_SubjectPublicKeyInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_SubjectPublicKeyInfo* pDstData = new ASN1T_EXP_SubjectPublicKeyInfo;

   asn1Copy_EXP_SubjectPublicKeyInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_Extension (OSCTXT* pctxt, ASN1T_EXP_Extension* pSrcValue, 
   ASN1T_EXP_Extension* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->extnID, (ASN1OBJID*)&pDstValue->extnID);

   pDstValue->critical = pSrcValue->critical;

   rtCopyDynOctStr (pctxt, &pSrcValue->extnValue, &pDstValue->extnValue);

}

ASN1C_EXP_Extension::ASN1C_EXP_Extension (ASN1C_EXP_Extension& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_Extension::ASN1T_EXP_Extension (ASN1C_EXP_Extension& original)
{
   original.getCopy (this);
}

ASN1T_EXP_Extension& ASN1C_EXP_Extension::getCopy (ASN1T_EXP_Extension* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_Extension);
      new (pDstData) ASN1T_EXP_Extension;
   }

   asn1Copy_EXP_Extension (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_Extension* ASN1C_EXP_Extension::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_Extension* pDstData = new ASN1T_EXP_Extension;

   asn1Copy_EXP_Extension (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_Extensions (OSCTXT* pctxt, ASN1T_EXP_Extensions* pSrcValue, 
   ASN1T_EXP_Extensions* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Extension* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Extension* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Extension);
         pSrcData = (ASN1T_EXP_Extension*) pnode->data;

         asn1Copy_EXP_Extension (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_Extensions::ASN1C_EXP_Extensions (ASN1C_EXP_Extensions& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_Extensions*)pList)
{
}

ASN1C_EXP_Extensions& ASN1C_EXP_Extensions::operator= (ASN1C_EXP_Extensions& srcData)
{
   clear ();
   asn1Copy_EXP_Extensions (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_Extensions& ASN1C_EXP_Extensions::getCopy (ASN1T_EXP_Extensions* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_Extensions);
      new (pDstData) ASN1T_EXP_Extensions;
   }

   asn1Copy_EXP_Extensions (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_Extensions* ASN1C_EXP_Extensions::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_Extensions* pDstData = new ASN1T_EXP_Extensions;

   asn1Copy_EXP_Extensions (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_TBSCertificate (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertificate* pSrcValue, ASN1T_EXP_TBSCertificate* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->serialNumber, &pDstValue->serialNumber);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

   asn1Copy_EXP_Name (pctxt, &pSrcValue->issuer, &pDstValue->issuer);

   asn1Copy_EXP_Validity (pctxt, &pSrcValue->validity, &pDstValue->validity);

   asn1Copy_EXP_Name (pctxt, &pSrcValue->subject, &pDstValue->subject);

   asn1Copy_EXP_SubjectPublicKeyInfo (pctxt, &pSrcValue->subjectPublicKeyInfo, &pDstValue->subjectPublicKeyInfo);

   if (pSrcValue->m.issuerUniqueIDPresent) {
      asn1Copy_EXP_UniqueIdentifier (pctxt, &pSrcValue->issuerUniqueID, &pDstValue->issuerUniqueID);
   }

   if (pSrcValue->m.subjectUniqueIDPresent) {
      asn1Copy_EXP_UniqueIdentifier (pctxt, &pSrcValue->subjectUniqueID, &pDstValue->subjectUniqueID);
   }

   if (pSrcValue->m.extensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->extensions, &pDstValue->extensions);
   }

}

ASN1C_EXP_TBSCertificate::ASN1C_EXP_TBSCertificate (ASN1C_EXP_TBSCertificate& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TBSCertificate::ASN1T_EXP_TBSCertificate (ASN1C_EXP_TBSCertificate& original)
{
   original.getCopy (this);
}

ASN1T_EXP_TBSCertificate& ASN1C_EXP_TBSCertificate::getCopy (ASN1T_EXP_TBSCertificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TBSCertificate);
      new (pDstData) ASN1T_EXP_TBSCertificate;
   }

   asn1Copy_EXP_TBSCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_TBSCertificate* ASN1C_EXP_TBSCertificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TBSCertificate* pDstData = new ASN1T_EXP_TBSCertificate;

   asn1Copy_EXP_TBSCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_Certificate (OSCTXT* pctxt, 
   ASN1T_EXP_Certificate* pSrcValue, ASN1T_EXP_Certificate* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_TBSCertificate (pctxt, &pSrcValue->tbsCertificate, &pDstValue->tbsCertificate);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

}

ASN1C_EXP_Certificate::ASN1C_EXP_Certificate (ASN1C_EXP_Certificate& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_Certificate::ASN1T_EXP_Certificate (ASN1C_EXP_Certificate& original)
{
   original.getCopy (this);
}

ASN1T_EXP_Certificate& ASN1C_EXP_Certificate::getCopy (ASN1T_EXP_Certificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_Certificate);
      new (pDstData) ASN1T_EXP_Certificate;
   }

   asn1Copy_EXP_Certificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_Certificate* ASN1C_EXP_Certificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_Certificate* pDstData = new ASN1T_EXP_Certificate;

   asn1Copy_EXP_Certificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP__SetOfEXP_AttributeValue (OSCTXT* pctxt, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pSrcValue, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_AttributeValue* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_AttributeValue* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_AttributeValue);
         pSrcData = (ASN1T_EXP_AttributeValue*) pnode->data;

         asn1Copy_EXP_AttributeValue (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP__SetOfEXP_AttributeValue::ASN1C_EXP__SetOfEXP_AttributeValue (ASN1C_EXP__SetOfEXP_AttributeValue& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP__SetOfEXP_AttributeValue*)pList)
{
}

ASN1C_EXP__SetOfEXP_AttributeValue& ASN1C_EXP__SetOfEXP_AttributeValue::operator= (ASN1C_EXP__SetOfEXP_AttributeValue& srcData)
{
   clear ();
   asn1Copy_EXP__SetOfEXP_AttributeValue (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP__SetOfEXP_AttributeValue& ASN1C_EXP__SetOfEXP_AttributeValue::getCopy (ASN1T_EXP__SetOfEXP_AttributeValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP__SetOfEXP_AttributeValue);
      new (pDstData) ASN1T_EXP__SetOfEXP_AttributeValue;
   }

   asn1Copy_EXP__SetOfEXP_AttributeValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP__SetOfEXP_AttributeValue* ASN1C_EXP__SetOfEXP_AttributeValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP__SetOfEXP_AttributeValue* pDstData = new ASN1T_EXP__SetOfEXP_AttributeValue;

   asn1Copy_EXP__SetOfEXP_AttributeValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_Attribute (OSCTXT* pctxt, ASN1T_EXP_Attribute* pSrcValue, 
   ASN1T_EXP_Attribute* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AttributeType (pctxt, &pSrcValue->type, &pDstValue->type);

   asn1Copy_EXP__SetOfEXP_AttributeValue (pctxt, &pSrcValue->values, &pDstValue->values);

}

ASN1C_EXP_Attribute::ASN1C_EXP_Attribute (ASN1C_EXP_Attribute& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_Attribute::ASN1T_EXP_Attribute (ASN1C_EXP_Attribute& original)
{
   original.getCopy (this);
}

ASN1T_EXP_Attribute& ASN1C_EXP_Attribute::getCopy (ASN1T_EXP_Attribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_Attribute);
      new (pDstData) ASN1T_EXP_Attribute;
   }

   asn1Copy_EXP_Attribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_Attribute* ASN1C_EXP_Attribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_Attribute* pDstData = new ASN1T_EXP_Attribute;

   asn1Copy_EXP_Attribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pSrcValue, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->userCertificate, &pDstValue->userCertificate);

   asn1Copy_EXP_Time (pctxt, &pSrcValue->revocationDate, &pDstValue->revocationDate);

   if (pSrcValue->m.crlEntryExtensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->crlEntryExtensions, &pDstValue->crlEntryExtensions);
   }

}

ASN1C_EXP_TBSCertList_revokedCertificates_element::ASN1C_EXP_TBSCertList_revokedCertificates_element (ASN1C_EXP_TBSCertList_revokedCertificates_element& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TBSCertList_revokedCertificates_element::ASN1T_EXP_TBSCertList_revokedCertificates_element (ASN1C_EXP_TBSCertList_revokedCertificates_element& original)
{
   original.getCopy (this);
}

ASN1T_EXP_TBSCertList_revokedCertificates_element& ASN1C_EXP_TBSCertList_revokedCertificates_element::getCopy (ASN1T_EXP_TBSCertList_revokedCertificates_element* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TBSCertList_revokedCertificates_element);
      new (pDstData) ASN1T_EXP_TBSCertList_revokedCertificates_element;
   }

   asn1Copy_EXP_TBSCertList_revokedCertificates_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_TBSCertList_revokedCertificates_element* ASN1C_EXP_TBSCertList_revokedCertificates_element::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pDstData = new ASN1T_EXP_TBSCertList_revokedCertificates_element;

   asn1Copy_EXP_TBSCertList_revokedCertificates_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pSrcValue, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_TBSCertList_revokedCertificates_element* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_TBSCertList_revokedCertificates_element* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_TBSCertList_revokedCertificates_element);
         pSrcData = (ASN1T_EXP_TBSCertList_revokedCertificates_element*) pnode->data;

         asn1Copy_EXP_TBSCertList_revokedCertificates_element (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element*)pList)
{
}

ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::operator= (ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& srcData)
{
   clear ();
   asn1Copy_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::getCopy (ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element);
      new (pDstData) ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element;
   }

   asn1Copy_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pDstData = new ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element;

   asn1Copy_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_TBSCertList (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertList* pSrcValue, ASN1T_EXP_TBSCertList* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.versionPresent) {
      pDstValue->version = pSrcValue->version;
   }

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

   asn1Copy_EXP_Name (pctxt, &pSrcValue->issuer, &pDstValue->issuer);

   asn1Copy_EXP_Time (pctxt, &pSrcValue->thisUpdate, &pDstValue->thisUpdate);

   if (pSrcValue->m.nextUpdatePresent) {
      asn1Copy_EXP_Time (pctxt, &pSrcValue->nextUpdate, &pDstValue->nextUpdate);
   }

   if (pSrcValue->m.revokedCertificatesPresent) {
      asn1Copy_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (pctxt, &pSrcValue->revokedCertificates, &pDstValue->revokedCertificates);
   }

   if (pSrcValue->m.crlExtensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->crlExtensions, &pDstValue->crlExtensions);
   }

}

ASN1C_EXP_TBSCertList::ASN1C_EXP_TBSCertList (ASN1C_EXP_TBSCertList& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TBSCertList::ASN1T_EXP_TBSCertList (ASN1C_EXP_TBSCertList& original)
{
   original.getCopy (this);
}

ASN1T_EXP_TBSCertList& ASN1C_EXP_TBSCertList::getCopy (ASN1T_EXP_TBSCertList* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TBSCertList);
      new (pDstData) ASN1T_EXP_TBSCertList;
   }

   asn1Copy_EXP_TBSCertList (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_TBSCertList* ASN1C_EXP_TBSCertList::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TBSCertList* pDstData = new ASN1T_EXP_TBSCertList;

   asn1Copy_EXP_TBSCertList (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_CertificateList (OSCTXT* pctxt, 
   ASN1T_EXP_CertificateList* pSrcValue, ASN1T_EXP_CertificateList* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_TBSCertList (pctxt, &pSrcValue->tbsCertList, &pDstValue->tbsCertList);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

}

ASN1C_EXP_CertificateList::ASN1C_EXP_CertificateList (ASN1C_EXP_CertificateList& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_CertificateList::ASN1T_EXP_CertificateList (ASN1C_EXP_CertificateList& original)
{
   original.getCopy (this);
}

ASN1T_EXP_CertificateList& ASN1C_EXP_CertificateList::getCopy (ASN1T_EXP_CertificateList* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_CertificateList);
      new (pDstData) ASN1T_EXP_CertificateList;
   }

   asn1Copy_EXP_CertificateList (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_CertificateList* ASN1C_EXP_CertificateList::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_CertificateList* pDstData = new ASN1T_EXP_CertificateList;

   asn1Copy_EXP_CertificateList (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_CountryName (OSCTXT* pctxt, 
   ASN1T_EXP_CountryName* pSrcValue, ASN1T_EXP_CountryName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* x121-dcc-code */
      case 1:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.x121_dcc_code, (char **)&pDstValue->u.x121_dcc_code);
         break;

      /* iso-3166-alpha2-code */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.iso_3166_alpha2_code, (char **)&pDstValue->u.iso_3166_alpha2_code);
         break;

   }
}

ASN1C_EXP_CountryName::ASN1C_EXP_CountryName (ASN1C_EXP_CountryName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_CountryName::ASN1T_EXP_CountryName (ASN1C_EXP_CountryName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_CountryName& ASN1C_EXP_CountryName::getCopy (ASN1T_EXP_CountryName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_CountryName);
      new (pDstData) ASN1T_EXP_CountryName;
   }

   asn1Copy_EXP_CountryName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_CountryName* ASN1C_EXP_CountryName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_CountryName* pDstData = new ASN1T_EXP_CountryName;

   asn1Copy_EXP_CountryName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_AdministrationDomainName (OSCTXT* pctxt, 
   ASN1T_EXP_AdministrationDomainName* pSrcValue, 
   ASN1T_EXP_AdministrationDomainName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* numeric */
      case 1:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.numeric, (char **)&pDstValue->u.numeric);
         break;

      /* printable */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printable, (char **)&pDstValue->u.printable);
         break;

   }
}

ASN1C_EXP_AdministrationDomainName::ASN1C_EXP_AdministrationDomainName (ASN1C_EXP_AdministrationDomainName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_AdministrationDomainName::ASN1T_EXP_AdministrationDomainName (ASN1C_EXP_AdministrationDomainName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_AdministrationDomainName& ASN1C_EXP_AdministrationDomainName::getCopy (ASN1T_EXP_AdministrationDomainName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_AdministrationDomainName);
      new (pDstData) ASN1T_EXP_AdministrationDomainName;
   }

   asn1Copy_EXP_AdministrationDomainName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_AdministrationDomainName* ASN1C_EXP_AdministrationDomainName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_AdministrationDomainName* pDstData = new ASN1T_EXP_AdministrationDomainName;

   asn1Copy_EXP_AdministrationDomainName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PrivateDomainName (OSCTXT* pctxt, 
   ASN1T_EXP_PrivateDomainName* pSrcValue, ASN1T_EXP_PrivateDomainName*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* numeric */
      case 1:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.numeric, (char **)&pDstValue->u.numeric);
         break;

      /* printable */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printable, (char **)&pDstValue->u.printable);
         break;

   }
}

ASN1C_EXP_PrivateDomainName::ASN1C_EXP_PrivateDomainName (ASN1C_EXP_PrivateDomainName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_PrivateDomainName::ASN1T_EXP_PrivateDomainName (ASN1C_EXP_PrivateDomainName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_PrivateDomainName& ASN1C_EXP_PrivateDomainName::getCopy (ASN1T_EXP_PrivateDomainName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PrivateDomainName);
      new (pDstData) ASN1T_EXP_PrivateDomainName;
   }

   asn1Copy_EXP_PrivateDomainName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PrivateDomainName* ASN1C_EXP_PrivateDomainName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PrivateDomainName* pDstData = new ASN1T_EXP_PrivateDomainName;

   asn1Copy_EXP_PrivateDomainName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_PersonalName* pSrcValue, ASN1T_EXP_PersonalName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->surname, (char **)&pDstValue->surname);

   if (pSrcValue->m.given_namePresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->given_name, (char **)&pDstValue->given_name);
   }

   if (pSrcValue->m.initialsPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->initials, (char **)&pDstValue->initials);
   }

   if (pSrcValue->m.generation_qualifierPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->generation_qualifier, (char **)&pDstValue->generation_qualifier);
   }

}

ASN1C_EXP_PersonalName::ASN1C_EXP_PersonalName (ASN1C_EXP_PersonalName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_PersonalName::ASN1T_EXP_PersonalName (ASN1C_EXP_PersonalName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_PersonalName& ASN1C_EXP_PersonalName::getCopy (ASN1T_EXP_PersonalName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PersonalName);
      new (pDstData) ASN1T_EXP_PersonalName;
   }

   asn1Copy_EXP_PersonalName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PersonalName* ASN1C_EXP_PersonalName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PersonalName* pDstData = new ASN1T_EXP_PersonalName;

   asn1Copy_EXP_PersonalName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_OrganizationalUnitNames (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationalUnitNames* pSrcValue, 
   ASN1T_EXP_OrganizationalUnitNames* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_OrganizationalUnitName pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_OrganizationalUnitName pCharPtr = 0;
         ASN1T_EXP_OrganizationalUnitName* pDstData = &pCharPtr;
         pSrcData = (ASN1T_EXP_OrganizationalUnitName) pnode->data;

         RTCOPYCHARSTR (pctxt, (char *)pSrcData, (char **)pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pCharPtr);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_OrganizationalUnitNames::ASN1C_EXP_OrganizationalUnitNames (ASN1C_EXP_OrganizationalUnitNames& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_OrganizationalUnitNames*)pList)
{
}

ASN1C_EXP_OrganizationalUnitNames& ASN1C_EXP_OrganizationalUnitNames::operator= (ASN1C_EXP_OrganizationalUnitNames& srcData)
{
   clear ();
   asn1Copy_EXP_OrganizationalUnitNames (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_OrganizationalUnitNames& ASN1C_EXP_OrganizationalUnitNames::getCopy (ASN1T_EXP_OrganizationalUnitNames* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_OrganizationalUnitNames);
      new (pDstData) ASN1T_EXP_OrganizationalUnitNames;
   }

   asn1Copy_EXP_OrganizationalUnitNames (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_OrganizationalUnitNames* ASN1C_EXP_OrganizationalUnitNames::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_OrganizationalUnitNames* pDstData = new ASN1T_EXP_OrganizationalUnitNames;

   asn1Copy_EXP_OrganizationalUnitNames (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_BuiltInStandardAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInStandardAttributes* pSrcValue, 
   ASN1T_EXP_BuiltInStandardAttributes* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.country_namePresent) {
      asn1Copy_EXP_CountryName (pctxt, &pSrcValue->country_name, &pDstValue->country_name);
   }

   if (pSrcValue->m.administration_domain_namePresent) {
      asn1Copy_EXP_AdministrationDomainName (pctxt, &pSrcValue->administration_domain_name, &pDstValue->administration_domain_name);
   }

   if (pSrcValue->m.network_addressPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->network_address, (char **)&pDstValue->network_address);
   }

   if (pSrcValue->m.terminal_identifierPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->terminal_identifier, (char **)&pDstValue->terminal_identifier);
   }

   if (pSrcValue->m.private_domain_namePresent) {
      asn1Copy_EXP_PrivateDomainName (pctxt, &pSrcValue->private_domain_name, &pDstValue->private_domain_name);
   }

   if (pSrcValue->m.organization_namePresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->organization_name, (char **)&pDstValue->organization_name);
   }

   if (pSrcValue->m.numeric_user_identifierPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->numeric_user_identifier, (char **)&pDstValue->numeric_user_identifier);
   }

   if (pSrcValue->m.personal_namePresent) {
      asn1Copy_EXP_PersonalName (pctxt, &pSrcValue->personal_name, &pDstValue->personal_name);
   }

   if (pSrcValue->m.organizational_unit_namesPresent) {
      asn1Copy_EXP_OrganizationalUnitNames (pctxt, &pSrcValue->organizational_unit_names, &pDstValue->organizational_unit_names);
   }

}

ASN1C_EXP_BuiltInStandardAttributes::ASN1C_EXP_BuiltInStandardAttributes (ASN1C_EXP_BuiltInStandardAttributes& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_BuiltInStandardAttributes::ASN1T_EXP_BuiltInStandardAttributes (ASN1C_EXP_BuiltInStandardAttributes& original)
{
   original.getCopy (this);
}

ASN1T_EXP_BuiltInStandardAttributes& ASN1C_EXP_BuiltInStandardAttributes::getCopy (ASN1T_EXP_BuiltInStandardAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_BuiltInStandardAttributes);
      new (pDstData) ASN1T_EXP_BuiltInStandardAttributes;
   }

   asn1Copy_EXP_BuiltInStandardAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_BuiltInStandardAttributes* ASN1C_EXP_BuiltInStandardAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_BuiltInStandardAttributes* pDstData = new ASN1T_EXP_BuiltInStandardAttributes;

   asn1Copy_EXP_BuiltInStandardAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_BuiltInDomainDefinedAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pSrcValue, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->type, (char **)&pDstValue->type);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->value, (char **)&pDstValue->value);

}

ASN1C_EXP_BuiltInDomainDefinedAttribute::ASN1C_EXP_BuiltInDomainDefinedAttribute (ASN1C_EXP_BuiltInDomainDefinedAttribute& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_BuiltInDomainDefinedAttribute::ASN1T_EXP_BuiltInDomainDefinedAttribute (ASN1C_EXP_BuiltInDomainDefinedAttribute& original)
{
   original.getCopy (this);
}

ASN1T_EXP_BuiltInDomainDefinedAttribute& ASN1C_EXP_BuiltInDomainDefinedAttribute::getCopy (ASN1T_EXP_BuiltInDomainDefinedAttribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_BuiltInDomainDefinedAttribute);
      new (pDstData) ASN1T_EXP_BuiltInDomainDefinedAttribute;
   }

   asn1Copy_EXP_BuiltInDomainDefinedAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_BuiltInDomainDefinedAttribute* ASN1C_EXP_BuiltInDomainDefinedAttribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pDstData = new ASN1T_EXP_BuiltInDomainDefinedAttribute;

   asn1Copy_EXP_BuiltInDomainDefinedAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_BuiltInDomainDefinedAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pSrcValue, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_BuiltInDomainDefinedAttribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_BuiltInDomainDefinedAttribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_BuiltInDomainDefinedAttribute);
         pSrcData = (ASN1T_EXP_BuiltInDomainDefinedAttribute*) pnode->data;

         asn1Copy_EXP_BuiltInDomainDefinedAttribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_BuiltInDomainDefinedAttributes::ASN1C_EXP_BuiltInDomainDefinedAttributes (ASN1C_EXP_BuiltInDomainDefinedAttributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_BuiltInDomainDefinedAttributes*)pList)
{
}

ASN1C_EXP_BuiltInDomainDefinedAttributes& ASN1C_EXP_BuiltInDomainDefinedAttributes::operator= (ASN1C_EXP_BuiltInDomainDefinedAttributes& srcData)
{
   clear ();
   asn1Copy_EXP_BuiltInDomainDefinedAttributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_BuiltInDomainDefinedAttributes& ASN1C_EXP_BuiltInDomainDefinedAttributes::getCopy (ASN1T_EXP_BuiltInDomainDefinedAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_BuiltInDomainDefinedAttributes);
      new (pDstData) ASN1T_EXP_BuiltInDomainDefinedAttributes;
   }

   asn1Copy_EXP_BuiltInDomainDefinedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_BuiltInDomainDefinedAttributes* ASN1C_EXP_BuiltInDomainDefinedAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pDstData = new ASN1T_EXP_BuiltInDomainDefinedAttributes;

   asn1Copy_EXP_BuiltInDomainDefinedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_ExtensionAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionAttribute* pSrcValue, ASN1T_EXP_ExtensionAttribute*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->extension_attribute_type = pSrcValue->extension_attribute_type;

   rtCopyOpenType (pctxt, &pSrcValue->extension_attribute_value, &pDstValue->extension_attribute_value);

}

ASN1C_EXP_ExtensionAttribute::ASN1C_EXP_ExtensionAttribute (ASN1C_EXP_ExtensionAttribute& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_ExtensionAttribute::ASN1T_EXP_ExtensionAttribute (ASN1C_EXP_ExtensionAttribute& original)
{
   original.getCopy (this);
}

ASN1T_EXP_ExtensionAttribute& ASN1C_EXP_ExtensionAttribute::getCopy (ASN1T_EXP_ExtensionAttribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_ExtensionAttribute);
      new (pDstData) ASN1T_EXP_ExtensionAttribute;
   }

   asn1Copy_EXP_ExtensionAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_ExtensionAttribute* ASN1C_EXP_ExtensionAttribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_ExtensionAttribute* pDstData = new ASN1T_EXP_ExtensionAttribute;

   asn1Copy_EXP_ExtensionAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_ExtensionAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionAttributes* pSrcValue, ASN1T_EXP_ExtensionAttributes*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_ExtensionAttribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_ExtensionAttribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_ExtensionAttribute);
         pSrcData = (ASN1T_EXP_ExtensionAttribute*) pnode->data;

         asn1Copy_EXP_ExtensionAttribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_ExtensionAttributes::ASN1C_EXP_ExtensionAttributes (ASN1C_EXP_ExtensionAttributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_ExtensionAttributes*)pList)
{
}

ASN1C_EXP_ExtensionAttributes& ASN1C_EXP_ExtensionAttributes::operator= (ASN1C_EXP_ExtensionAttributes& srcData)
{
   clear ();
   asn1Copy_EXP_ExtensionAttributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_ExtensionAttributes& ASN1C_EXP_ExtensionAttributes::getCopy (ASN1T_EXP_ExtensionAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_ExtensionAttributes);
      new (pDstData) ASN1T_EXP_ExtensionAttributes;
   }

   asn1Copy_EXP_ExtensionAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_ExtensionAttributes* ASN1C_EXP_ExtensionAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_ExtensionAttributes* pDstData = new ASN1T_EXP_ExtensionAttributes;

   asn1Copy_EXP_ExtensionAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_ORAddress (OSCTXT* pctxt, ASN1T_EXP_ORAddress* pSrcValue, 
   ASN1T_EXP_ORAddress* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_EXP_BuiltInStandardAttributes (pctxt, &pSrcValue->built_in_standard_attributes, &pDstValue->built_in_standard_attributes);

   if (pSrcValue->m.built_in_domain_defined_attributesPresent) {
      asn1Copy_EXP_BuiltInDomainDefinedAttributes (pctxt, &pSrcValue->built_in_domain_defined_attributes, &pDstValue->built_in_domain_defined_attributes);
   }

   if (pSrcValue->m.extension_attributesPresent) {
      asn1Copy_EXP_ExtensionAttributes (pctxt, &pSrcValue->extension_attributes, &pDstValue->extension_attributes);
   }

}

ASN1C_EXP_ORAddress::ASN1C_EXP_ORAddress (ASN1C_EXP_ORAddress& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_ORAddress::ASN1T_EXP_ORAddress (ASN1C_EXP_ORAddress& original)
{
   original.getCopy (this);
}

ASN1T_EXP_ORAddress& ASN1C_EXP_ORAddress::getCopy (ASN1T_EXP_ORAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_ORAddress);
      new (pDstData) ASN1T_EXP_ORAddress;
   }

   asn1Copy_EXP_ORAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_ORAddress* ASN1C_EXP_ORAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_ORAddress* pDstData = new ASN1T_EXP_ORAddress;

   asn1Copy_EXP_ORAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_TeletexPersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexPersonalName* pSrcValue, ASN1T_EXP_TeletexPersonalName*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->surname, (char **)&pDstValue->surname);

   if (pSrcValue->m.given_namePresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->given_name, (char **)&pDstValue->given_name);
   }

   if (pSrcValue->m.initialsPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->initials, (char **)&pDstValue->initials);
   }

   if (pSrcValue->m.generation_qualifierPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->generation_qualifier, (char **)&pDstValue->generation_qualifier);
   }

}

ASN1C_EXP_TeletexPersonalName::ASN1C_EXP_TeletexPersonalName (ASN1C_EXP_TeletexPersonalName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TeletexPersonalName::ASN1T_EXP_TeletexPersonalName (ASN1C_EXP_TeletexPersonalName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_TeletexPersonalName& ASN1C_EXP_TeletexPersonalName::getCopy (ASN1T_EXP_TeletexPersonalName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TeletexPersonalName);
      new (pDstData) ASN1T_EXP_TeletexPersonalName;
   }

   asn1Copy_EXP_TeletexPersonalName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_TeletexPersonalName* ASN1C_EXP_TeletexPersonalName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TeletexPersonalName* pDstData = new ASN1T_EXP_TeletexPersonalName;

   asn1Copy_EXP_TeletexPersonalName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_TeletexOrganizationalUnitNames (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pSrcValue, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_TeletexOrganizationalUnitName pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_TeletexOrganizationalUnitName pCharPtr = 0;
         ASN1T_EXP_TeletexOrganizationalUnitName* pDstData = &pCharPtr;
         pSrcData = (ASN1T_EXP_TeletexOrganizationalUnitName) pnode->data;

         RTCOPYCHARSTR (pctxt, (char *)pSrcData, (char **)pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pCharPtr);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_TeletexOrganizationalUnitNames::ASN1C_EXP_TeletexOrganizationalUnitNames (ASN1C_EXP_TeletexOrganizationalUnitNames& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_TeletexOrganizationalUnitNames*)pList)
{
}

ASN1C_EXP_TeletexOrganizationalUnitNames& ASN1C_EXP_TeletexOrganizationalUnitNames::operator= (ASN1C_EXP_TeletexOrganizationalUnitNames& srcData)
{
   clear ();
   asn1Copy_EXP_TeletexOrganizationalUnitNames (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_TeletexOrganizationalUnitNames& ASN1C_EXP_TeletexOrganizationalUnitNames::getCopy (ASN1T_EXP_TeletexOrganizationalUnitNames* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TeletexOrganizationalUnitNames);
      new (pDstData) ASN1T_EXP_TeletexOrganizationalUnitNames;
   }

   asn1Copy_EXP_TeletexOrganizationalUnitNames (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_TeletexOrganizationalUnitNames* ASN1C_EXP_TeletexOrganizationalUnitNames::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TeletexOrganizationalUnitNames* pDstData = new ASN1T_EXP_TeletexOrganizationalUnitNames;

   asn1Copy_EXP_TeletexOrganizationalUnitNames (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PhysicalDeliveryCountryName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* x121-dcc-code */
      case 1:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.x121_dcc_code, (char **)&pDstValue->u.x121_dcc_code);
         break;

      /* iso-3166-alpha2-code */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.iso_3166_alpha2_code, (char **)&pDstValue->u.iso_3166_alpha2_code);
         break;

   }
}

ASN1C_EXP_PhysicalDeliveryCountryName::ASN1C_EXP_PhysicalDeliveryCountryName (ASN1C_EXP_PhysicalDeliveryCountryName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_PhysicalDeliveryCountryName::ASN1T_EXP_PhysicalDeliveryCountryName (ASN1C_EXP_PhysicalDeliveryCountryName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_PhysicalDeliveryCountryName& ASN1C_EXP_PhysicalDeliveryCountryName::getCopy (ASN1T_EXP_PhysicalDeliveryCountryName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PhysicalDeliveryCountryName);
      new (pDstData) ASN1T_EXP_PhysicalDeliveryCountryName;
   }

   asn1Copy_EXP_PhysicalDeliveryCountryName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PhysicalDeliveryCountryName* ASN1C_EXP_PhysicalDeliveryCountryName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PhysicalDeliveryCountryName* pDstData = new ASN1T_EXP_PhysicalDeliveryCountryName;

   asn1Copy_EXP_PhysicalDeliveryCountryName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PostalCode (OSCTXT* pctxt, ASN1T_EXP_PostalCode* pSrcValue, 
   ASN1T_EXP_PostalCode* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* numeric-code */
      case 1:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.numeric_code, (char **)&pDstValue->u.numeric_code);
         break;

      /* printable-code */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printable_code, (char **)&pDstValue->u.printable_code);
         break;

   }
}

ASN1C_EXP_PostalCode::ASN1C_EXP_PostalCode (ASN1C_EXP_PostalCode& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_PostalCode::ASN1T_EXP_PostalCode (ASN1C_EXP_PostalCode& original)
{
   original.getCopy (this);
}

ASN1T_EXP_PostalCode& ASN1C_EXP_PostalCode::getCopy (ASN1T_EXP_PostalCode* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PostalCode);
      new (pDstData) ASN1T_EXP_PostalCode;
   }

   asn1Copy_EXP_PostalCode (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PostalCode* ASN1C_EXP_PostalCode::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PostalCode* pDstData = new ASN1T_EXP_PostalCode;

   asn1Copy_EXP_PostalCode (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_UnformattedPostalAddress_printable_address (OSCTXT* pctxt, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pSrcValue, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      const char* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         const char* pCharPtr = 0;
         const char** pDstData = &pCharPtr;
         pSrcData = (const char*) pnode->data;

         RTCOPYCHARSTR (pctxt, (char *)pSrcData, (char **)pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pCharPtr);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_UnformattedPostalAddress_printable_address::ASN1C_EXP_UnformattedPostalAddress_printable_address (ASN1C_EXP_UnformattedPostalAddress_printable_address& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_UnformattedPostalAddress_printable_address*)pList)
{
}

ASN1C_EXP_UnformattedPostalAddress_printable_address& ASN1C_EXP_UnformattedPostalAddress_printable_address::operator= (ASN1C_EXP_UnformattedPostalAddress_printable_address& srcData)
{
   clear ();
   asn1Copy_EXP_UnformattedPostalAddress_printable_address (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_UnformattedPostalAddress_printable_address& ASN1C_EXP_UnformattedPostalAddress_printable_address::getCopy (ASN1T_EXP_UnformattedPostalAddress_printable_address* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_UnformattedPostalAddress_printable_address);
      new (pDstData) ASN1T_EXP_UnformattedPostalAddress_printable_address;
   }

   asn1Copy_EXP_UnformattedPostalAddress_printable_address (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_UnformattedPostalAddress_printable_address* ASN1C_EXP_UnformattedPostalAddress_printable_address::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pDstData = new ASN1T_EXP_UnformattedPostalAddress_printable_address;

   asn1Copy_EXP_UnformattedPostalAddress_printable_address (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_UnformattedPostalAddress (OSCTXT* pctxt, 
   ASN1T_EXP_UnformattedPostalAddress* pSrcValue, 
   ASN1T_EXP_UnformattedPostalAddress* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.printable_addressPresent) {
      asn1Copy_EXP_UnformattedPostalAddress_printable_address (pctxt, &pSrcValue->printable_address, &pDstValue->printable_address);
   }

   if (pSrcValue->m.teletex_stringPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->teletex_string, (char **)&pDstValue->teletex_string);
   }

}

ASN1C_EXP_UnformattedPostalAddress::ASN1C_EXP_UnformattedPostalAddress (ASN1C_EXP_UnformattedPostalAddress& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_UnformattedPostalAddress::ASN1T_EXP_UnformattedPostalAddress (ASN1C_EXP_UnformattedPostalAddress& original)
{
   original.getCopy (this);
}

ASN1T_EXP_UnformattedPostalAddress& ASN1C_EXP_UnformattedPostalAddress::getCopy (ASN1T_EXP_UnformattedPostalAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_UnformattedPostalAddress);
      new (pDstData) ASN1T_EXP_UnformattedPostalAddress;
   }

   asn1Copy_EXP_UnformattedPostalAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_UnformattedPostalAddress* ASN1C_EXP_UnformattedPostalAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_UnformattedPostalAddress* pDstData = new ASN1T_EXP_UnformattedPostalAddress;

   asn1Copy_EXP_UnformattedPostalAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT* pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pSrcValue, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->number, (char **)&pDstValue->number);

   if (pSrcValue->m.sub_addressPresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->sub_address, (char **)&pDstValue->sub_address);
   }

}

ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::ASN1C_EXP_ExtendedNetworkAddress_e163_4_address (ASN1C_EXP_ExtendedNetworkAddress_e163_4_address& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_ExtendedNetworkAddress_e163_4_address::ASN1T_EXP_ExtendedNetworkAddress_e163_4_address (ASN1C_EXP_ExtendedNetworkAddress_e163_4_address& original)
{
   original.getCopy (this);
}

ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::getCopy (ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_ExtendedNetworkAddress_e163_4_address);
      new (pDstData) ASN1T_EXP_ExtendedNetworkAddress_e163_4_address;
   }

   asn1Copy_EXP_ExtendedNetworkAddress_e163_4_address (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pDstData = new ASN1T_EXP_ExtendedNetworkAddress_e163_4_address;

   asn1Copy_EXP_ExtendedNetworkAddress_e163_4_address (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PresentationAddress_nAddresses (OSCTXT* pctxt, 
   ASN1T_EXP_PresentationAddress_nAddresses* pSrcValue, 
   ASN1T_EXP_PresentationAddress_nAddresses* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1TDynOctStr* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1TDynOctStr* pDstData = rtxMemAllocTypeZ (pctxt, ASN1TDynOctStr);
         pSrcData = (ASN1TDynOctStr*) pnode->data;

         rtCopyDynOctStr (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_PresentationAddress_nAddresses::ASN1C_EXP_PresentationAddress_nAddresses (ASN1C_EXP_PresentationAddress_nAddresses& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_PresentationAddress_nAddresses*)pList)
{
}

ASN1C_EXP_PresentationAddress_nAddresses& ASN1C_EXP_PresentationAddress_nAddresses::operator= (ASN1C_EXP_PresentationAddress_nAddresses& srcData)
{
   clear ();
   asn1Copy_EXP_PresentationAddress_nAddresses (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_PresentationAddress_nAddresses& ASN1C_EXP_PresentationAddress_nAddresses::getCopy (ASN1T_EXP_PresentationAddress_nAddresses* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PresentationAddress_nAddresses);
      new (pDstData) ASN1T_EXP_PresentationAddress_nAddresses;
   }

   asn1Copy_EXP_PresentationAddress_nAddresses (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PresentationAddress_nAddresses* ASN1C_EXP_PresentationAddress_nAddresses::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PresentationAddress_nAddresses* pDstData = new ASN1T_EXP_PresentationAddress_nAddresses;

   asn1Copy_EXP_PresentationAddress_nAddresses (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_PresentationAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PresentationAddress* pSrcValue, ASN1T_EXP_PresentationAddress*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.pSelectorPresent) {
      rtCopyDynOctStr (pctxt, &pSrcValue->pSelector, &pDstValue->pSelector);
   }

   if (pSrcValue->m.sSelectorPresent) {
      rtCopyDynOctStr (pctxt, &pSrcValue->sSelector, &pDstValue->sSelector);
   }

   if (pSrcValue->m.tSelectorPresent) {
      rtCopyDynOctStr (pctxt, &pSrcValue->tSelector, &pDstValue->tSelector);
   }

   asn1Copy_EXP_PresentationAddress_nAddresses (pctxt, &pSrcValue->nAddresses, &pDstValue->nAddresses);

}

ASN1C_EXP_PresentationAddress::ASN1C_EXP_PresentationAddress (ASN1C_EXP_PresentationAddress& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_PresentationAddress::ASN1T_EXP_PresentationAddress (ASN1C_EXP_PresentationAddress& original)
{
   original.getCopy (this);
}

ASN1T_EXP_PresentationAddress& ASN1C_EXP_PresentationAddress::getCopy (ASN1T_EXP_PresentationAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_PresentationAddress);
      new (pDstData) ASN1T_EXP_PresentationAddress;
   }

   asn1Copy_EXP_PresentationAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_PresentationAddress* ASN1C_EXP_PresentationAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_PresentationAddress* pDstData = new ASN1T_EXP_PresentationAddress;

   asn1Copy_EXP_PresentationAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_ExtendedNetworkAddress (OSCTXT* pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress* pSrcValue, 
   ASN1T_EXP_ExtendedNetworkAddress* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* e163-4-address */
      case 1:
         pDstValue->u.e163_4_address = rtxMemAllocType (pctxt, ASN1T_EXP_ExtendedNetworkAddress_e163_4_address);
         new (pDstValue->u.e163_4_address) ASN1T_EXP_ExtendedNetworkAddress_e163_4_address;
         asn1Copy_EXP_ExtendedNetworkAddress_e163_4_address (pctxt, pSrcValue->u.e163_4_address, pDstValue->u.e163_4_address);
         break;

      /* psap-address */
      case 2:
         pDstValue->u.psap_address = rtxMemAllocType (pctxt, ASN1T_EXP_PresentationAddress);
         new (pDstValue->u.psap_address) ASN1T_EXP_PresentationAddress;
         asn1Copy_EXP_PresentationAddress (pctxt, pSrcValue->u.psap_address, pDstValue->u.psap_address);
         break;

   }
}

ASN1C_EXP_ExtendedNetworkAddress::ASN1C_EXP_ExtendedNetworkAddress (ASN1C_EXP_ExtendedNetworkAddress& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_ExtendedNetworkAddress::ASN1T_EXP_ExtendedNetworkAddress (ASN1C_EXP_ExtendedNetworkAddress& original)
{
   original.getCopy (this);
}

ASN1T_EXP_ExtendedNetworkAddress& ASN1C_EXP_ExtendedNetworkAddress::getCopy (ASN1T_EXP_ExtendedNetworkAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_ExtendedNetworkAddress);
      new (pDstData) ASN1T_EXP_ExtendedNetworkAddress;
   }

   asn1Copy_EXP_ExtendedNetworkAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_ExtendedNetworkAddress* ASN1C_EXP_ExtendedNetworkAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_ExtendedNetworkAddress* pDstData = new ASN1T_EXP_ExtendedNetworkAddress;

   asn1Copy_EXP_ExtendedNetworkAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_TeletexDomainDefinedAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pSrcValue, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->type, (char **)&pDstValue->type);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->value, (char **)&pDstValue->value);

}

ASN1C_EXP_TeletexDomainDefinedAttribute::ASN1C_EXP_TeletexDomainDefinedAttribute (ASN1C_EXP_TeletexDomainDefinedAttribute& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_TeletexDomainDefinedAttribute::ASN1T_EXP_TeletexDomainDefinedAttribute (ASN1C_EXP_TeletexDomainDefinedAttribute& original)
{
   original.getCopy (this);
}

ASN1T_EXP_TeletexDomainDefinedAttribute& ASN1C_EXP_TeletexDomainDefinedAttribute::getCopy (ASN1T_EXP_TeletexDomainDefinedAttribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TeletexDomainDefinedAttribute);
      new (pDstData) ASN1T_EXP_TeletexDomainDefinedAttribute;
   }

   asn1Copy_EXP_TeletexDomainDefinedAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_TeletexDomainDefinedAttribute* ASN1C_EXP_TeletexDomainDefinedAttribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TeletexDomainDefinedAttribute* pDstData = new ASN1T_EXP_TeletexDomainDefinedAttribute;

   asn1Copy_EXP_TeletexDomainDefinedAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_TeletexDomainDefinedAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pSrcValue, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_TeletexDomainDefinedAttribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_TeletexDomainDefinedAttribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_TeletexDomainDefinedAttribute);
         pSrcData = (ASN1T_EXP_TeletexDomainDefinedAttribute*) pnode->data;

         asn1Copy_EXP_TeletexDomainDefinedAttribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_EXP_TeletexDomainDefinedAttributes::ASN1C_EXP_TeletexDomainDefinedAttributes (ASN1C_EXP_TeletexDomainDefinedAttributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_EXP_TeletexDomainDefinedAttributes*)pList)
{
}

ASN1C_EXP_TeletexDomainDefinedAttributes& ASN1C_EXP_TeletexDomainDefinedAttributes::operator= (ASN1C_EXP_TeletexDomainDefinedAttributes& srcData)
{
   clear ();
   asn1Copy_EXP_TeletexDomainDefinedAttributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_EXP_TeletexDomainDefinedAttributes& ASN1C_EXP_TeletexDomainDefinedAttributes::getCopy (ASN1T_EXP_TeletexDomainDefinedAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_TeletexDomainDefinedAttributes);
      new (pDstData) ASN1T_EXP_TeletexDomainDefinedAttributes;
   }

   asn1Copy_EXP_TeletexDomainDefinedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_TeletexDomainDefinedAttributes* ASN1C_EXP_TeletexDomainDefinedAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_TeletexDomainDefinedAttributes* pDstData = new ASN1T_EXP_TeletexDomainDefinedAttributes;

   asn1Copy_EXP_TeletexDomainDefinedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_DirectoryString (OSCTXT* pctxt, 
   ASN1T_EXP_DirectoryString* pSrcValue, ASN1T_EXP_DirectoryString* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_DirectoryString::ASN1C_EXP_DirectoryString (ASN1C_EXP_DirectoryString& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_DirectoryString::ASN1T_EXP_DirectoryString (ASN1C_EXP_DirectoryString& original)
{
   original.getCopy (this);
}

ASN1T_EXP_DirectoryString& ASN1C_EXP_DirectoryString::getCopy (ASN1T_EXP_DirectoryString* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_DirectoryString);
      new (pDstData) ASN1T_EXP_DirectoryString;
   }

   asn1Copy_EXP_DirectoryString (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_DirectoryString* ASN1C_EXP_DirectoryString::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_DirectoryString* pDstData = new ASN1T_EXP_DirectoryString;

   asn1Copy_EXP_DirectoryString (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520name (OSCTXT* pctxt, ASN1T_EXP_X520name* pSrcValue, 
   ASN1T_EXP_X520name* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520name::ASN1C_EXP_X520name (ASN1C_EXP_X520name& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520name::ASN1T_EXP_X520name (ASN1C_EXP_X520name& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520name& ASN1C_EXP_X520name::getCopy (ASN1T_EXP_X520name* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520name);
      new (pDstData) ASN1T_EXP_X520name;
   }

   asn1Copy_EXP_X520name (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520name* ASN1C_EXP_X520name::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520name* pDstData = new ASN1T_EXP_X520name;

   asn1Copy_EXP_X520name (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520CommonName (OSCTXT* pctxt, 
   ASN1T_EXP_X520CommonName* pSrcValue, ASN1T_EXP_X520CommonName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520CommonName::ASN1C_EXP_X520CommonName (ASN1C_EXP_X520CommonName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520CommonName::ASN1T_EXP_X520CommonName (ASN1C_EXP_X520CommonName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520CommonName& ASN1C_EXP_X520CommonName::getCopy (ASN1T_EXP_X520CommonName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520CommonName);
      new (pDstData) ASN1T_EXP_X520CommonName;
   }

   asn1Copy_EXP_X520CommonName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520CommonName* ASN1C_EXP_X520CommonName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520CommonName* pDstData = new ASN1T_EXP_X520CommonName;

   asn1Copy_EXP_X520CommonName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520LocalityName (OSCTXT* pctxt, 
   ASN1T_EXP_X520LocalityName* pSrcValue, ASN1T_EXP_X520LocalityName*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520LocalityName::ASN1C_EXP_X520LocalityName (ASN1C_EXP_X520LocalityName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520LocalityName::ASN1T_EXP_X520LocalityName (ASN1C_EXP_X520LocalityName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520LocalityName& ASN1C_EXP_X520LocalityName::getCopy (ASN1T_EXP_X520LocalityName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520LocalityName);
      new (pDstData) ASN1T_EXP_X520LocalityName;
   }

   asn1Copy_EXP_X520LocalityName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520LocalityName* ASN1C_EXP_X520LocalityName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520LocalityName* pDstData = new ASN1T_EXP_X520LocalityName;

   asn1Copy_EXP_X520LocalityName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520StateOrProvinceName (OSCTXT* pctxt, 
   ASN1T_EXP_X520StateOrProvinceName* pSrcValue, 
   ASN1T_EXP_X520StateOrProvinceName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520StateOrProvinceName::ASN1C_EXP_X520StateOrProvinceName (ASN1C_EXP_X520StateOrProvinceName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520StateOrProvinceName::ASN1T_EXP_X520StateOrProvinceName (ASN1C_EXP_X520StateOrProvinceName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520StateOrProvinceName& ASN1C_EXP_X520StateOrProvinceName::getCopy (ASN1T_EXP_X520StateOrProvinceName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520StateOrProvinceName);
      new (pDstData) ASN1T_EXP_X520StateOrProvinceName;
   }

   asn1Copy_EXP_X520StateOrProvinceName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520StateOrProvinceName* ASN1C_EXP_X520StateOrProvinceName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520StateOrProvinceName* pDstData = new ASN1T_EXP_X520StateOrProvinceName;

   asn1Copy_EXP_X520StateOrProvinceName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520OrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_X520OrganizationName* pSrcValue, ASN1T_EXP_X520OrganizationName*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520OrganizationName::ASN1C_EXP_X520OrganizationName (ASN1C_EXP_X520OrganizationName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520OrganizationName::ASN1T_EXP_X520OrganizationName (ASN1C_EXP_X520OrganizationName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520OrganizationName& ASN1C_EXP_X520OrganizationName::getCopy (ASN1T_EXP_X520OrganizationName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520OrganizationName);
      new (pDstData) ASN1T_EXP_X520OrganizationName;
   }

   asn1Copy_EXP_X520OrganizationName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520OrganizationName* ASN1C_EXP_X520OrganizationName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520OrganizationName* pDstData = new ASN1T_EXP_X520OrganizationName;

   asn1Copy_EXP_X520OrganizationName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520OrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_X520OrganizationalUnitName* pSrcValue, 
   ASN1T_EXP_X520OrganizationalUnitName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520OrganizationalUnitName::ASN1C_EXP_X520OrganizationalUnitName (ASN1C_EXP_X520OrganizationalUnitName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520OrganizationalUnitName::ASN1T_EXP_X520OrganizationalUnitName (ASN1C_EXP_X520OrganizationalUnitName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520OrganizationalUnitName& ASN1C_EXP_X520OrganizationalUnitName::getCopy (ASN1T_EXP_X520OrganizationalUnitName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520OrganizationalUnitName);
      new (pDstData) ASN1T_EXP_X520OrganizationalUnitName;
   }

   asn1Copy_EXP_X520OrganizationalUnitName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520OrganizationalUnitName* ASN1C_EXP_X520OrganizationalUnitName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520OrganizationalUnitName* pDstData = new ASN1T_EXP_X520OrganizationalUnitName;

   asn1Copy_EXP_X520OrganizationalUnitName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520Title (OSCTXT* pctxt, ASN1T_EXP_X520Title* pSrcValue, 
   ASN1T_EXP_X520Title* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520Title::ASN1C_EXP_X520Title (ASN1C_EXP_X520Title& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520Title::ASN1T_EXP_X520Title (ASN1C_EXP_X520Title& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520Title& ASN1C_EXP_X520Title::getCopy (ASN1T_EXP_X520Title* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520Title);
      new (pDstData) ASN1T_EXP_X520Title;
   }

   asn1Copy_EXP_X520Title (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520Title* ASN1C_EXP_X520Title::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520Title* pDstData = new ASN1T_EXP_X520Title;

   asn1Copy_EXP_X520Title (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT* pctxt, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pSrcValue, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520CountrySerialUTF8liUcubeName::ASN1C_EXP_X520CountrySerialUTF8liUcubeName (ASN1C_EXP_X520CountrySerialUTF8liUcubeName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520CountrySerialUTF8liUcubeName::ASN1T_EXP_X520CountrySerialUTF8liUcubeName (ASN1C_EXP_X520CountrySerialUTF8liUcubeName& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520CountrySerialUTF8liUcubeName& ASN1C_EXP_X520CountrySerialUTF8liUcubeName::getCopy (ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520CountrySerialUTF8liUcubeName);
      new (pDstData) ASN1T_EXP_X520CountrySerialUTF8liUcubeName;
   }

   asn1Copy_EXP_X520CountrySerialUTF8liUcubeName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520CountrySerialUTF8liUcubeName* ASN1C_EXP_X520CountrySerialUTF8liUcubeName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pDstData = new ASN1T_EXP_X520CountrySerialUTF8liUcubeName;

   asn1Copy_EXP_X520CountrySerialUTF8liUcubeName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_EXP_X520Pseudonym (OSCTXT* pctxt, 
   ASN1T_EXP_X520Pseudonym* pSrcValue, ASN1T_EXP_X520Pseudonym* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* printableString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.printableString, (char **)&pDstValue->u.printableString);
         break;

      /* teletexString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.teletexString, (char **)&pDstValue->u.teletexString);
         break;

      /* universalString */
      case 4:
         pDstValue->u.universalString = rtxMemAllocType (pctxt, ASN1TUniversalString);
         new (pDstValue->u.universalString) ASN1TUniversalString;
         rtCopy32BitCharStr (pctxt, pSrcValue->u.universalString, pDstValue->u.universalString);
         break;

      /* bmpString */
      case 5:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_EXP_X520Pseudonym::ASN1C_EXP_X520Pseudonym (ASN1C_EXP_X520Pseudonym& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_EXP_X520Pseudonym::ASN1T_EXP_X520Pseudonym (ASN1C_EXP_X520Pseudonym& original)
{
   original.getCopy (this);
}

ASN1T_EXP_X520Pseudonym& ASN1C_EXP_X520Pseudonym::getCopy (ASN1T_EXP_X520Pseudonym* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_EXP_X520Pseudonym);
      new (pDstData) ASN1T_EXP_X520Pseudonym;
   }

   asn1Copy_EXP_X520Pseudonym (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_EXP_X520Pseudonym* ASN1C_EXP_X520Pseudonym::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_EXP_X520Pseudonym* pDstData = new ASN1T_EXP_X520Pseudonym;

   asn1Copy_EXP_X520Pseudonym (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

