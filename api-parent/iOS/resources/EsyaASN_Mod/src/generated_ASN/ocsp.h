/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef OCSP_H
#define OCSP_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "pkcs7.h"
#include "Implicit.h"
#include "Explicit.h"

/**
 * Header file for ASN.1 module ocsp
 */
/**************************************************************/
/*                                                            */
/*  Version                                                   */
/*                                                            */
/**************************************************************/
/*
Version ::= INTEGER { v1(0) }
*/
#define TV_OCSP_Version	(TM_UNIV|TM_PRIM|2)

struct EXTERN OCSP_Version {
   enum Root {
      v1 = 0
   } ;
} ;

typedef OSINT32 ASN1T_OCSP_Version;

class EXTERN ASN1C_OCSP_Version :
public ASN1CType
{
protected:
   ASN1T_OCSP_Version& msgData;
public:
   ASN1C_OCSP_Version (ASN1T_OCSP_Version& data);
   ASN1C_OCSP_Version (OSRTMessageBufferIF& msgBuf, ASN1T_OCSP_Version& data);
   ASN1C_OCSP_Version (OSRTContext &context, ASN1T_OCSP_Version& data);
   virtual ~ASN1C_OCSP_Version () {}
   inline ASN1T_OCSP_Version& getData () { return msgData; }
   inline const ASN1T_OCSP_Version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Version");
   int toStream (const char* name = "Version");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_Version* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_OCSP_Version (OSCTXT* pctxt,
   ASN1T_OCSP_Version *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_Version (OSCTXT* pctxt, ASN1T_OCSP_Version* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_Version 
   (const char* name, const ASN1T_OCSP_Version* pvalue);

EXTERN int asn1PrtToStrm_OCSP_Version (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_Version* pvalue);

EXTERN ASN1T_OCSP_Version* new_ASN1T_OCSP_Version (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_Version (const char* name, ASN1T_OCSP_Version* pValue, 
   ASN1T_OCSP_Version* pCmpValue, char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  OCSPResponseStatus                                        */
/*                                                            */
/**************************************************************/
/*
OCSPResponseStatus ::= ENUMERATED { successful(0), malformedRequest(1), internalError(2), tryLater(3), sigRequired(5), unauthorized(6) }
*/
#define TV_OCSP_OCSPResponseStatus	(TM_UNIV|TM_PRIM|10)

struct EXTERN OCSP_OCSPResponseStatus {
   enum Root {
      successful = 0,
      malformedRequest = 1,
      internalError = 2,
      tryLater = 3,
      sigRequired = 5,
      unauthorized = 6
   } ;
} ;

typedef OSUINT32 ASN1T_OCSP_OCSPResponseStatus;

class EXTERN ASN1C_OCSP_OCSPResponseStatus :
public ASN1CType
{
protected:
   ASN1T_OCSP_OCSPResponseStatus& msgData;
public:
   ASN1C_OCSP_OCSPResponseStatus (ASN1T_OCSP_OCSPResponseStatus& data);
   ASN1C_OCSP_OCSPResponseStatus (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_OCSPResponseStatus& data);
   ASN1C_OCSP_OCSPResponseStatus (OSRTContext &context
      , ASN1T_OCSP_OCSPResponseStatus& data);
   virtual ~ASN1C_OCSP_OCSPResponseStatus () {}
   inline ASN1T_OCSP_OCSPResponseStatus& getData () { return msgData; }
   inline const ASN1T_OCSP_OCSPResponseStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OCSPResponseStatus");
   int toStream (const char* name = "OCSPResponseStatus");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_OCSPResponseStatus* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_OCSP_OCSPResponseStatus (OSCTXT* pctxt,
   ASN1T_OCSP_OCSPResponseStatus *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_OCSPResponseStatus (OSCTXT* pctxt, 
   ASN1T_OCSP_OCSPResponseStatus* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_OCSPResponseStatus 
   (const char* name, const ASN1T_OCSP_OCSPResponseStatus* pvalue);

EXTERN int asn1PrtToStrm_OCSP_OCSPResponseStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_OCSPResponseStatus* pvalue);

EXTERN ASN1T_OCSP_OCSPResponseStatus* 
   new_ASN1T_OCSP_OCSPResponseStatus (ASN1CType& ccobj);

EXTERN const OSUTF8CHAR* ASN1T_OCSP_OCSPResponseStatus_ToString (OSINT32 value);

EXTERN int ASN1T_OCSP_OCSPResponseStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_OCSP_OCSPResponseStatus* pvalue);

EXTERN int ASN1T_OCSP_OCSPResponseStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_OCSP_OCSPResponseStatus* pvalue);

EXTERN OSBOOL asn1Compare_OCSP_OCSPResponseStatus (const char* name, 
   ASN1T_OCSP_OCSPResponseStatus* pValue, 
   ASN1T_OCSP_OCSPResponseStatus* pCmpValue, char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  KeyHash                                                   */
/*                                                            */
/**************************************************************/
/*
KeyHash ::= OCTET STRING
*/
#define TV_OCSP_KeyHash	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_OCSP_KeyHash;

class EXTERN ASN1C_OCSP_KeyHash :
public ASN1CType
{
protected:
   ASN1T_OCSP_KeyHash& msgData;
public:
   ASN1C_OCSP_KeyHash (ASN1T_OCSP_KeyHash& data);
   ASN1C_OCSP_KeyHash (OSRTMessageBufferIF& msgBuf, ASN1T_OCSP_KeyHash& data);
   ASN1C_OCSP_KeyHash (OSRTContext &context, ASN1T_OCSP_KeyHash& data);
   ASN1C_OCSP_KeyHash (ASN1C_OCSP_KeyHash& original);
   virtual ~ASN1C_OCSP_KeyHash () {}
   inline ASN1T_OCSP_KeyHash& getData () { return msgData; }
   inline const ASN1T_OCSP_KeyHash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyHash");
   int toStream (const char* name = "KeyHash");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_KeyHash* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_KeyHash& getCopy (ASN1T_OCSP_KeyHash* pDstData = 0);
   ASN1T_OCSP_KeyHash* newCopy ();

   inline ASN1C_OCSP_KeyHash& operator= (ASN1C_OCSP_KeyHash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_KeyHash (OSCTXT* pctxt,
   ASN1T_OCSP_KeyHash *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_KeyHash (OSCTXT* pctxt, ASN1T_OCSP_KeyHash* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_KeyHash 
   (const char* name, const ASN1T_OCSP_KeyHash* pvalue);

EXTERN int asn1PrtToStrm_OCSP_KeyHash (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_KeyHash* pvalue);

EXTERN ASN1T_OCSP_KeyHash* new_ASN1T_OCSP_KeyHash (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_KeyHash (const char* name, ASN1T_OCSP_KeyHash* pValue, 
   ASN1T_OCSP_KeyHash* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_KeyHash (OSCTXT* pctxt, ASN1T_OCSP_KeyHash* pSrcValue, 
   ASN1T_OCSP_KeyHash* pDstValue);

EXTERN void asn1Init_OCSP_KeyHash (ASN1T_OCSP_KeyHash* pvalue);

EXTERN void asn1Free_OCSP_KeyHash (OSCTXT *pctxt, ASN1T_OCSP_KeyHash* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLReason                                                 */
/*                                                            */
/**************************************************************/
/*
CRLReason ::= ENUMERATED { unspecified(0), keyCompromise(1), cACompromise(2), affiliationChanged(3), superseded(4), cessationOfOperation(5), certificateHold(6), removeFromCRL(8) }
*/
#define TV_OCSP_CRLReason	(TM_UNIV|TM_PRIM|10)

struct EXTERN OCSP_CRLReason {
   enum Root {
      unspecified = 0,
      keyCompromise = 1,
      cACompromise = 2,
      affiliationChanged = 3,
      superseded = 4,
      cessationOfOperation = 5,
      certificateHold = 6,
      removeFromCRL = 8
   } ;
} ;

typedef OSUINT32 ASN1T_OCSP_CRLReason;

class EXTERN ASN1C_OCSP_CRLReason :
public ASN1CType
{
protected:
   ASN1T_OCSP_CRLReason& msgData;
public:
   ASN1C_OCSP_CRLReason (ASN1T_OCSP_CRLReason& data);
   ASN1C_OCSP_CRLReason (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_CRLReason& data);
   ASN1C_OCSP_CRLReason (OSRTContext &context, ASN1T_OCSP_CRLReason& data);
   virtual ~ASN1C_OCSP_CRLReason () {}
   inline ASN1T_OCSP_CRLReason& getData () { return msgData; }
   inline const ASN1T_OCSP_CRLReason& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CRLReason");
   int toStream (const char* name = "CRLReason");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_CRLReason* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_OCSP_CRLReason (OSCTXT* pctxt,
   ASN1T_OCSP_CRLReason *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_CRLReason (OSCTXT* pctxt, ASN1T_OCSP_CRLReason* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_CRLReason 
   (const char* name, const ASN1T_OCSP_CRLReason* pvalue);

EXTERN int asn1PrtToStrm_OCSP_CRLReason (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_CRLReason* pvalue);

EXTERN ASN1T_OCSP_CRLReason* new_ASN1T_OCSP_CRLReason (ASN1CType& ccobj);

EXTERN const OSUTF8CHAR* ASN1T_OCSP_CRLReason_ToString (OSINT32 value);

EXTERN int ASN1T_OCSP_CRLReason_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_OCSP_CRLReason* pvalue);

EXTERN int ASN1T_OCSP_CRLReason_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_OCSP_CRLReason* pvalue);

EXTERN OSBOOL asn1Compare_OCSP_CRLReason (const char* name, 
   ASN1T_OCSP_CRLReason* pValue, ASN1T_OCSP_CRLReason* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  CertID                                                    */
/*                                                            */
/**************************************************************/
/*
CertID ::= SEQUENCE {
   hashAlgorithm AlgorithmIdentifier,
   issuerNameHash OCTET STRING,
   issuerKeyHash OCTET STRING,
   serialNumber CertificateSerialNumber
}
*/
#define TV_OCSP_CertID	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_CertID;

struct EXTERN ASN1T_OCSP_CertID : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier hashAlgorithm;
   ASN1TDynOctStr issuerNameHash;
   ASN1TDynOctStr issuerKeyHash;
   ASN1T_EXP_CertificateSerialNumber serialNumber;
   ASN1T_OCSP_CertID ();
   ASN1T_OCSP_CertID (ASN1C_OCSP_CertID& srcData);
   ~ASN1T_OCSP_CertID ();
} ;

class EXTERN ASN1C_OCSP_CertID :
public ASN1CType
{
protected:
   ASN1T_OCSP_CertID& msgData;
public:
   ASN1C_OCSP_CertID (ASN1T_OCSP_CertID& data);
   ASN1C_OCSP_CertID (OSRTMessageBufferIF& msgBuf, ASN1T_OCSP_CertID& data);
   ASN1C_OCSP_CertID (OSRTContext &context, ASN1T_OCSP_CertID& data);
   ASN1C_OCSP_CertID (ASN1C_OCSP_CertID& original);
   virtual ~ASN1C_OCSP_CertID () {}
   inline ASN1T_OCSP_CertID& getData () { return msgData; }
   inline const ASN1T_OCSP_CertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertID");
   int toStream (const char* name = "CertID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_CertID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_CertID& getCopy (ASN1T_OCSP_CertID* pDstData = 0);
   ASN1T_OCSP_CertID* newCopy ();

   inline ASN1C_OCSP_CertID& operator= (ASN1C_OCSP_CertID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_CertID (OSCTXT* pctxt,
   ASN1T_OCSP_CertID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_CertID (OSCTXT* pctxt, ASN1T_OCSP_CertID* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_CertID (const char* name, const ASN1T_OCSP_CertID* pvalue);

EXTERN int asn1PrtToStrm_OCSP_CertID (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_CertID* pvalue);

EXTERN ASN1T_OCSP_CertID* new_ASN1T_OCSP_CertID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_CertID (const char* name, ASN1T_OCSP_CertID* pValue, 
   ASN1T_OCSP_CertID* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_CertID (OSCTXT* pctxt, ASN1T_OCSP_CertID* pSrcValue, 
   ASN1T_OCSP_CertID* pDstValue);

EXTERN void asn1Init_OCSP_CertID (ASN1T_OCSP_CertID* pvalue);

EXTERN void asn1Free_OCSP_CertID (OSCTXT *pctxt, ASN1T_OCSP_CertID* pvalue);

/**************************************************************/
/*                                                            */
/*  Request                                                   */
/*                                                            */
/**************************************************************/
/*
Request ::= SEQUENCE {
   reqCert CertID,
   singleRequestExtensions [0] Extensions OPTIONAL
}
*/
#define TV_OCSP_Request	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_Request;

struct EXTERN ASN1T_OCSP_Request : public ASN1TPDU {
   struct {
      unsigned singleRequestExtensionsPresent : 1;
   } m;
   ASN1T_OCSP_CertID reqCert;
   ASN1T_EXP_Extensions singleRequestExtensions;
   ASN1T_OCSP_Request ();
   ASN1T_OCSP_Request (ASN1C_OCSP_Request& srcData);
   ~ASN1T_OCSP_Request ();
} ;

class EXTERN ASN1C_OCSP_Request :
public ASN1CType
{
protected:
   ASN1T_OCSP_Request& msgData;
public:
   ASN1C_OCSP_Request (ASN1T_OCSP_Request& data);
   ASN1C_OCSP_Request (OSRTMessageBufferIF& msgBuf, ASN1T_OCSP_Request& data);
   ASN1C_OCSP_Request (OSRTContext &context, ASN1T_OCSP_Request& data);
   ASN1C_OCSP_Request (ASN1C_OCSP_Request& original);
   virtual ~ASN1C_OCSP_Request () {}
   inline ASN1T_OCSP_Request& getData () { return msgData; }
   inline const ASN1T_OCSP_Request& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Request");
   int toStream (const char* name = "Request");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_Request* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_Request& getCopy (ASN1T_OCSP_Request* pDstData = 0);
   ASN1T_OCSP_Request* newCopy ();

   inline ASN1C_OCSP_Request& operator= (ASN1C_OCSP_Request& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_Request (OSCTXT* pctxt,
   ASN1T_OCSP_Request *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_Request (OSCTXT* pctxt, ASN1T_OCSP_Request* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_Request 
   (const char* name, const ASN1T_OCSP_Request* pvalue);

EXTERN int asn1PrtToStrm_OCSP_Request (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_Request* pvalue);

EXTERN ASN1T_OCSP_Request* new_ASN1T_OCSP_Request (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_Request (const char* name, ASN1T_OCSP_Request* pValue, 
   ASN1T_OCSP_Request* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_Request (OSCTXT* pctxt, ASN1T_OCSP_Request* pSrcValue, 
   ASN1T_OCSP_Request* pDstValue);

EXTERN void asn1Init_OCSP_Request (ASN1T_OCSP_Request* pvalue);

EXTERN void asn1Free_OCSP_Request (OSCTXT *pctxt, ASN1T_OCSP_Request* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfOCSP_Request                                        */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_OCSP__SeqOfOCSP_Request;

/* List of ASN1T_OCSP_Request */
typedef struct EXTERN ASN1T_OCSP__SeqOfOCSP_Request : public ASN1TPDUSeqOfList {
   ~ASN1T_OCSP__SeqOfOCSP_Request();
} ASN1T_OCSP__SeqOfOCSP_Request;

class EXTERN ASN1C_OCSP__SeqOfOCSP_Request :
public ASN1CSeqOfList
{
protected:
   ASN1T_OCSP__SeqOfOCSP_Request& msgData;
public:
   ASN1C_OCSP__SeqOfOCSP_Request (ASN1T_OCSP__SeqOfOCSP_Request& data);
   ASN1C_OCSP__SeqOfOCSP_Request (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP__SeqOfOCSP_Request& data);
   ASN1C_OCSP__SeqOfOCSP_Request (ASN1CType& ccobj
      , ASN1T_OCSP__SeqOfOCSP_Request& data);
   ASN1C_OCSP__SeqOfOCSP_Request (OSRTContext &context
      , ASN1T_OCSP__SeqOfOCSP_Request& data);
   ASN1C_OCSP__SeqOfOCSP_Request (ASN1C_OCSP__SeqOfOCSP_Request& original);
   virtual ~ASN1C_OCSP__SeqOfOCSP_Request () {}
   inline ASN1T_OCSP__SeqOfOCSP_Request& getData () { return msgData; }
   inline const ASN1T_OCSP__SeqOfOCSP_Request& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfOCSP_Request");
   int toStream (const char* name = "_SeqOfOCSP_Request");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP__SeqOfOCSP_Request* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP__SeqOfOCSP_Request& getCopy (ASN1T_OCSP__SeqOfOCSP_Request* pDstData = 0);
   ASN1T_OCSP__SeqOfOCSP_Request* newCopy ();

   ASN1C_OCSP__SeqOfOCSP_Request& operator= (ASN1C_OCSP__SeqOfOCSP_Request& srcData);
   void Append (ASN1T_OCSP_Request* elem);
   ASN1T_OCSP_Request* NewElement ();
   ASN1T_OCSP_Request* AppendNewElement ();
} ;

EXTERN int asn1E_OCSP__SeqOfOCSP_Request (OSCTXT* pctxt,
   ASN1T_OCSP__SeqOfOCSP_Request *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP__SeqOfOCSP_Request (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_Request* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP__SeqOfOCSP_Request 
   (const char* name, const ASN1T_OCSP__SeqOfOCSP_Request* pvalue);

EXTERN int asn1PrtToStrm_OCSP__SeqOfOCSP_Request (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP__SeqOfOCSP_Request* pvalue);

EXTERN OSBOOL asn1Compare_OCSP__SeqOfOCSP_Request (const char* name, 
   ASN1T_OCSP__SeqOfOCSP_Request* pValue, 
   ASN1T_OCSP__SeqOfOCSP_Request* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP__SeqOfOCSP_Request (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_Request* pSrcValue, ASN1T_OCSP__SeqOfOCSP_Request*
    pDstValue);

EXTERN void asn1Init_OCSP__SeqOfOCSP_Request (ASN1T_OCSP__SeqOfOCSP_Request* pvalue);

EXTERN void asn1Free_OCSP__SeqOfOCSP_Request (OSCTXT *pctxt, 
   ASN1T_OCSP__SeqOfOCSP_Request* pvalue);

/**************************************************************/
/*                                                            */
/*  TBSRequest                                                */
/*                                                            */
/**************************************************************/
/*
TBSRequest ::= SEQUENCE {
   version [0] Version DEFAULT v1,
   requestorName [1] GeneralName OPTIONAL,
   requestList SEQUENCE OF Request,
   requestExtensions [2] Extensions OPTIONAL
}
*/
#define TV_OCSP_TBSRequest	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_TBSRequest;

struct EXTERN ASN1T_OCSP_TBSRequest : public ASN1TPDU {
   struct {
      unsigned requestorNamePresent : 1;
      unsigned requestExtensionsPresent : 1;
   } m;
   ASN1T_OCSP_Version version;
   ASN1T_IMP_GeneralName requestorName;
   ASN1T_OCSP__SeqOfOCSP_Request requestList;
   ASN1T_EXP_Extensions requestExtensions;
   ASN1T_OCSP_TBSRequest ();
   ASN1T_OCSP_TBSRequest (ASN1C_OCSP_TBSRequest& srcData);
   ~ASN1T_OCSP_TBSRequest ();
} ;

class EXTERN ASN1C_OCSP_TBSRequest :
public ASN1CType
{
protected:
   ASN1T_OCSP_TBSRequest& msgData;
public:
   ASN1C_OCSP_TBSRequest (ASN1T_OCSP_TBSRequest& data);
   ASN1C_OCSP_TBSRequest (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_TBSRequest& data);
   ASN1C_OCSP_TBSRequest (OSRTContext &context, ASN1T_OCSP_TBSRequest& data);
   ASN1C_OCSP_TBSRequest (ASN1C_OCSP_TBSRequest& original);
   virtual ~ASN1C_OCSP_TBSRequest () {}
   inline ASN1T_OCSP_TBSRequest& getData () { return msgData; }
   inline const ASN1T_OCSP_TBSRequest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TBSRequest");
   int toStream (const char* name = "TBSRequest");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_TBSRequest* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_TBSRequest& getCopy (ASN1T_OCSP_TBSRequest* pDstData = 0);
   ASN1T_OCSP_TBSRequest* newCopy ();

   inline ASN1C_OCSP_TBSRequest& operator= (ASN1C_OCSP_TBSRequest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_TBSRequest (OSCTXT* pctxt,
   ASN1T_OCSP_TBSRequest *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_TBSRequest (OSCTXT* pctxt, 
   ASN1T_OCSP_TBSRequest* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_TBSRequest 
   (const char* name, const ASN1T_OCSP_TBSRequest* pvalue);

EXTERN int asn1PrtToStrm_OCSP_TBSRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_TBSRequest* pvalue);

EXTERN ASN1T_OCSP_TBSRequest* new_ASN1T_OCSP_TBSRequest (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_TBSRequest (const char* name, 
   ASN1T_OCSP_TBSRequest* pValue, ASN1T_OCSP_TBSRequest* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_TBSRequest (OSCTXT* pctxt, 
   ASN1T_OCSP_TBSRequest* pSrcValue, ASN1T_OCSP_TBSRequest* pDstValue);

EXTERN void asn1Init_OCSP_TBSRequest (ASN1T_OCSP_TBSRequest* pvalue);

EXTERN void asn1Free_OCSP_TBSRequest (OSCTXT *pctxt, ASN1T_OCSP_TBSRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfOCSP_Certificate                                    */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_OCSP__SeqOfOCSP_Certificate;

/* List of ASN1T_EXP_Certificate */
typedef struct EXTERN ASN1T_OCSP__SeqOfOCSP_Certificate : public ASN1TPDUSeqOfList {
   ~ASN1T_OCSP__SeqOfOCSP_Certificate();
} ASN1T_OCSP__SeqOfOCSP_Certificate;

class EXTERN ASN1C_OCSP__SeqOfOCSP_Certificate :
public ASN1CSeqOfList
{
protected:
   ASN1T_OCSP__SeqOfOCSP_Certificate& msgData;
public:
   ASN1C_OCSP__SeqOfOCSP_Certificate (ASN1T_OCSP__SeqOfOCSP_Certificate& data);
   ASN1C_OCSP__SeqOfOCSP_Certificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP__SeqOfOCSP_Certificate& data);
   ASN1C_OCSP__SeqOfOCSP_Certificate (ASN1CType& ccobj
      , ASN1T_OCSP__SeqOfOCSP_Certificate& data);
   ASN1C_OCSP__SeqOfOCSP_Certificate (OSRTContext &context
      , ASN1T_OCSP__SeqOfOCSP_Certificate& data);
   ASN1C_OCSP__SeqOfOCSP_Certificate (ASN1C_OCSP__SeqOfOCSP_Certificate& original);
   virtual ~ASN1C_OCSP__SeqOfOCSP_Certificate () {}
   inline ASN1T_OCSP__SeqOfOCSP_Certificate& getData () { return msgData; }
   inline const ASN1T_OCSP__SeqOfOCSP_Certificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfOCSP_Certificate");
   int toStream (const char* name = "_SeqOfOCSP_Certificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP__SeqOfOCSP_Certificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP__SeqOfOCSP_Certificate& getCopy (ASN1T_OCSP__SeqOfOCSP_Certificate* pDstData = 0);
   ASN1T_OCSP__SeqOfOCSP_Certificate* newCopy ();

   ASN1C_OCSP__SeqOfOCSP_Certificate& operator= (ASN1C_OCSP__SeqOfOCSP_Certificate& srcData);
   void Append (ASN1T_EXP_Certificate* elem);
   ASN1T_EXP_Certificate* NewElement ();
   ASN1T_EXP_Certificate* AppendNewElement ();
} ;

EXTERN int asn1E_OCSP__SeqOfOCSP_Certificate (OSCTXT* pctxt,
   ASN1T_OCSP__SeqOfOCSP_Certificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP__SeqOfOCSP_Certificate (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP__SeqOfOCSP_Certificate 
   (const char* name, const ASN1T_OCSP__SeqOfOCSP_Certificate* pvalue);

EXTERN int asn1PrtToStrm_OCSP__SeqOfOCSP_Certificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP__SeqOfOCSP_Certificate* pvalue);

EXTERN OSBOOL asn1Compare_OCSP__SeqOfOCSP_Certificate (const char* name, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pValue, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP__SeqOfOCSP_Certificate (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pSrcValue, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pDstValue);

EXTERN void asn1Init_OCSP__SeqOfOCSP_Certificate (
   ASN1T_OCSP__SeqOfOCSP_Certificate* pvalue);

EXTERN void asn1Free_OCSP__SeqOfOCSP_Certificate (OSCTXT *pctxt, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pvalue);

/**************************************************************/
/*                                                            */
/*  Signature                                                 */
/*                                                            */
/**************************************************************/
/*
Signature ::= SEQUENCE {
   signatureAlgorithm AlgorithmIdentifier,
   signature BIT STRING ,
   certs [0] SEQUENCE OF Certificate OPTIONAL
}
*/
#define TV_OCSP_Signature	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_Signature;

struct EXTERN ASN1T_OCSP_Signature : public ASN1TPDU {
   struct {
      unsigned certsPresent : 1;
   } m;
   ASN1T_EXP_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature_;
   ASN1T_OCSP__SeqOfOCSP_Certificate certs;
   ASN1T_OCSP_Signature ();
   ASN1T_OCSP_Signature (ASN1C_OCSP_Signature& srcData);
   ~ASN1T_OCSP_Signature ();
} ;

class EXTERN ASN1C_OCSP_Signature :
public ASN1CType
{
protected:
   ASN1T_OCSP_Signature& msgData;
public:
   ASN1C_OCSP_Signature (ASN1T_OCSP_Signature& data);
   ASN1C_OCSP_Signature (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_Signature& data);
   ASN1C_OCSP_Signature (OSRTContext &context, ASN1T_OCSP_Signature& data);
   ASN1C_OCSP_Signature (ASN1C_OCSP_Signature& original);
   virtual ~ASN1C_OCSP_Signature () {}
   inline ASN1T_OCSP_Signature& getData () { return msgData; }
   inline const ASN1T_OCSP_Signature& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Signature");
   int toStream (const char* name = "Signature");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_Signature* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_Signature& getCopy (ASN1T_OCSP_Signature* pDstData = 0);
   ASN1T_OCSP_Signature* newCopy ();

   inline ASN1C_OCSP_Signature& operator= (ASN1C_OCSP_Signature& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_Signature (OSCTXT* pctxt,
   ASN1T_OCSP_Signature *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_Signature (OSCTXT* pctxt, ASN1T_OCSP_Signature* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_Signature 
   (const char* name, const ASN1T_OCSP_Signature* pvalue);

EXTERN int asn1PrtToStrm_OCSP_Signature (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_Signature* pvalue);

EXTERN ASN1T_OCSP_Signature* new_ASN1T_OCSP_Signature (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_Signature (const char* name, 
   ASN1T_OCSP_Signature* pValue, ASN1T_OCSP_Signature* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_Signature (OSCTXT* pctxt, ASN1T_OCSP_Signature* pSrcValue, 
   ASN1T_OCSP_Signature* pDstValue);

EXTERN void asn1Init_OCSP_Signature (ASN1T_OCSP_Signature* pvalue);

EXTERN void asn1Free_OCSP_Signature (OSCTXT *pctxt, ASN1T_OCSP_Signature* pvalue);

/**************************************************************/
/*                                                            */
/*  OCSPRequest                                               */
/*                                                            */
/**************************************************************/
/*
OCSPRequest ::= SEQUENCE {
   tbsRequest TBSRequest,
   optionalSignature [0] Signature OPTIONAL
}
*/
#define TV_OCSP_OCSPRequest	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_OCSPRequest;

struct EXTERN ASN1T_OCSP_OCSPRequest : public ASN1TPDU {
   struct {
      unsigned optionalSignaturePresent : 1;
   } m;
   ASN1T_OCSP_TBSRequest tbsRequest;
   ASN1T_OCSP_Signature optionalSignature;
   ASN1T_OCSP_OCSPRequest ();
   ASN1T_OCSP_OCSPRequest (ASN1C_OCSP_OCSPRequest& srcData);
   ~ASN1T_OCSP_OCSPRequest ();
} ;

class EXTERN ASN1C_OCSP_OCSPRequest :
public ASN1CType
{
protected:
   ASN1T_OCSP_OCSPRequest& msgData;
public:
   ASN1C_OCSP_OCSPRequest (ASN1T_OCSP_OCSPRequest& data);
   ASN1C_OCSP_OCSPRequest (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_OCSPRequest& data);
   ASN1C_OCSP_OCSPRequest (OSRTContext &context, ASN1T_OCSP_OCSPRequest& data);
   ASN1C_OCSP_OCSPRequest (ASN1C_OCSP_OCSPRequest& original);
   virtual ~ASN1C_OCSP_OCSPRequest () {}
   inline ASN1T_OCSP_OCSPRequest& getData () { return msgData; }
   inline const ASN1T_OCSP_OCSPRequest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OCSPRequest");
   int toStream (const char* name = "OCSPRequest");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_OCSPRequest* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_OCSPRequest& getCopy (ASN1T_OCSP_OCSPRequest* pDstData = 0);
   ASN1T_OCSP_OCSPRequest* newCopy ();

   inline ASN1C_OCSP_OCSPRequest& operator= (ASN1C_OCSP_OCSPRequest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_OCSPRequest (OSCTXT* pctxt,
   ASN1T_OCSP_OCSPRequest *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_OCSPRequest (OSCTXT* pctxt, 
   ASN1T_OCSP_OCSPRequest* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_OCSPRequest 
   (const char* name, const ASN1T_OCSP_OCSPRequest* pvalue);

EXTERN int asn1PrtToStrm_OCSP_OCSPRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_OCSPRequest* pvalue);

EXTERN ASN1T_OCSP_OCSPRequest* new_ASN1T_OCSP_OCSPRequest (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_OCSPRequest (const char* name, 
   ASN1T_OCSP_OCSPRequest* pValue, ASN1T_OCSP_OCSPRequest* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_OCSPRequest (OSCTXT* pctxt, 
   ASN1T_OCSP_OCSPRequest* pSrcValue, ASN1T_OCSP_OCSPRequest* pDstValue);

EXTERN void asn1Init_OCSP_OCSPRequest (ASN1T_OCSP_OCSPRequest* pvalue);

EXTERN void asn1Free_OCSP_OCSPRequest (OSCTXT *pctxt, ASN1T_OCSP_OCSPRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  ResponseBytes                                             */
/*                                                            */
/**************************************************************/
/*
ResponseBytes ::= SEQUENCE {
   responseType OBJECT IDENTIFIER,
   response OCTET STRING
}
*/
#define TV_OCSP_ResponseBytes	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_ResponseBytes;

struct EXTERN ASN1T_OCSP_ResponseBytes : public ASN1TPDU {
   ASN1TObjId responseType;
   ASN1TDynOctStr response;
   ASN1T_OCSP_ResponseBytes ();
   ASN1T_OCSP_ResponseBytes (ASN1C_OCSP_ResponseBytes& srcData);
   ~ASN1T_OCSP_ResponseBytes ();
} ;

class EXTERN ASN1C_OCSP_ResponseBytes :
public ASN1CType
{
protected:
   ASN1T_OCSP_ResponseBytes& msgData;
public:
   ASN1C_OCSP_ResponseBytes (ASN1T_OCSP_ResponseBytes& data);
   ASN1C_OCSP_ResponseBytes (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_ResponseBytes& data);
   ASN1C_OCSP_ResponseBytes (OSRTContext &context
      , ASN1T_OCSP_ResponseBytes& data);
   ASN1C_OCSP_ResponseBytes (ASN1C_OCSP_ResponseBytes& original);
   virtual ~ASN1C_OCSP_ResponseBytes () {}
   inline ASN1T_OCSP_ResponseBytes& getData () { return msgData; }
   inline const ASN1T_OCSP_ResponseBytes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ResponseBytes");
   int toStream (const char* name = "ResponseBytes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_ResponseBytes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_ResponseBytes& getCopy (ASN1T_OCSP_ResponseBytes* pDstData = 0);
   ASN1T_OCSP_ResponseBytes* newCopy ();

   inline ASN1C_OCSP_ResponseBytes& operator= (ASN1C_OCSP_ResponseBytes& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_ResponseBytes (OSCTXT* pctxt,
   ASN1T_OCSP_ResponseBytes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_ResponseBytes (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponseBytes* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_ResponseBytes 
   (const char* name, const ASN1T_OCSP_ResponseBytes* pvalue);

EXTERN int asn1PrtToStrm_OCSP_ResponseBytes (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_ResponseBytes* pvalue);

EXTERN ASN1T_OCSP_ResponseBytes* 
   new_ASN1T_OCSP_ResponseBytes (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_ResponseBytes (const char* name, 
   ASN1T_OCSP_ResponseBytes* pValue, ASN1T_OCSP_ResponseBytes* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_ResponseBytes (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponseBytes* pSrcValue, ASN1T_OCSP_ResponseBytes* pDstValue);

EXTERN void asn1Init_OCSP_ResponseBytes (ASN1T_OCSP_ResponseBytes* pvalue);

EXTERN void asn1Free_OCSP_ResponseBytes (OSCTXT *pctxt, 
   ASN1T_OCSP_ResponseBytes* pvalue);

/**************************************************************/
/*                                                            */
/*  OCSPResponse                                              */
/*                                                            */
/**************************************************************/
/*
OCSPResponse ::= SEQUENCE {
   responseStatus OCSPResponseStatus,
   responseBytes [0] ResponseBytes OPTIONAL
}
*/
#define TV_OCSP_OCSPResponse	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_OCSPResponse;

struct EXTERN ASN1T_OCSP_OCSPResponse : public ASN1TPDU {
   struct {
      unsigned responseBytesPresent : 1;
   } m;
   ASN1T_OCSP_OCSPResponseStatus responseStatus;
   ASN1T_OCSP_ResponseBytes responseBytes;
   ASN1T_OCSP_OCSPResponse ();
   ASN1T_OCSP_OCSPResponse (ASN1C_OCSP_OCSPResponse& srcData);
   ~ASN1T_OCSP_OCSPResponse ();
} ;

class EXTERN ASN1C_OCSP_OCSPResponse :
public ASN1CType
{
protected:
   ASN1T_OCSP_OCSPResponse& msgData;
public:
   ASN1C_OCSP_OCSPResponse (ASN1T_OCSP_OCSPResponse& data);
   ASN1C_OCSP_OCSPResponse (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_OCSPResponse& data);
   ASN1C_OCSP_OCSPResponse (OSRTContext &context, ASN1T_OCSP_OCSPResponse& data
      );
   ASN1C_OCSP_OCSPResponse (ASN1C_OCSP_OCSPResponse& original);
   virtual ~ASN1C_OCSP_OCSPResponse () {}
   inline ASN1T_OCSP_OCSPResponse& getData () { return msgData; }
   inline const ASN1T_OCSP_OCSPResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OCSPResponse");
   int toStream (const char* name = "OCSPResponse");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_OCSPResponse* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_OCSPResponse& getCopy (ASN1T_OCSP_OCSPResponse* pDstData = 0);
   ASN1T_OCSP_OCSPResponse* newCopy ();

   inline ASN1C_OCSP_OCSPResponse& operator= (ASN1C_OCSP_OCSPResponse& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_OCSPResponse (OSCTXT* pctxt,
   ASN1T_OCSP_OCSPResponse *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_OCSPResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_OCSPResponse* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_OCSPResponse 
   (const char* name, const ASN1T_OCSP_OCSPResponse* pvalue);

EXTERN int asn1PrtToStrm_OCSP_OCSPResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_OCSPResponse* pvalue);

EXTERN ASN1T_OCSP_OCSPResponse* new_ASN1T_OCSP_OCSPResponse (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_OCSP_OCSPResponse (const char* name, 
   ASN1T_OCSP_OCSPResponse* pValue, ASN1T_OCSP_OCSPResponse* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_OCSPResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_OCSPResponse* pSrcValue, ASN1T_OCSP_OCSPResponse* pDstValue);

EXTERN void asn1Init_OCSP_OCSPResponse (ASN1T_OCSP_OCSPResponse* pvalue);

EXTERN void asn1Free_OCSP_OCSPResponse (OSCTXT *pctxt, 
   ASN1T_OCSP_OCSPResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  ResponderID                                               */
/*                                                            */
/**************************************************************/
/*
ResponderID ::= CHOICE {
   byName [1] Name,
   byKey [2] KeyHash
}
*/
/* Choice context tags */

#define TVC_OCSP_ResponderID_byName	(TM_CTXT|TM_CONS|1)
#define TVC_OCSP_ResponderID_byKey	(TM_CTXT|TM_CONS|2)

/* Choice tag constants */

#define T_OCSP_ResponderID_byName       1
#define T_OCSP_ResponderID_byKey        2

class EXTERN ASN1C_OCSP_ResponderID;

struct EXTERN ASN1T_OCSP_ResponderID : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_EXP_Name *byName;
      /* t = 2 */
      ASN1T_OCSP_KeyHash *byKey;
   } u;
   ASN1T_OCSP_ResponderID () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_OCSP_ResponderID (ASN1C_OCSP_ResponderID& srcData);
   ~ASN1T_OCSP_ResponderID ();
} ;

class EXTERN ASN1C_OCSP_ResponderID :
public ASN1CType
{
protected:
   ASN1T_OCSP_ResponderID& msgData;
public:
   ASN1C_OCSP_ResponderID (ASN1T_OCSP_ResponderID& data);
   ASN1C_OCSP_ResponderID (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_ResponderID& data);
   ASN1C_OCSP_ResponderID (OSRTContext &context, ASN1T_OCSP_ResponderID& data);
   ASN1C_OCSP_ResponderID (ASN1C_OCSP_ResponderID& original);
   virtual ~ASN1C_OCSP_ResponderID () {}
   inline ASN1T_OCSP_ResponderID& getData () { return msgData; }
   inline const ASN1T_OCSP_ResponderID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ResponderID");
   int toStream (const char* name = "ResponderID");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_ResponderID* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_ResponderID& getCopy (ASN1T_OCSP_ResponderID* pDstData = 0);
   ASN1T_OCSP_ResponderID* newCopy ();

   inline ASN1C_OCSP_ResponderID& operator= (ASN1C_OCSP_ResponderID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_ResponderID (OSCTXT* pctxt,
   ASN1T_OCSP_ResponderID *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_ResponderID (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponderID* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_ResponderID 
   (const char* name, const ASN1T_OCSP_ResponderID* pvalue);

EXTERN int asn1PrtToStrm_OCSP_ResponderID (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_ResponderID* pvalue);

EXTERN ASN1T_OCSP_ResponderID* new_ASN1T_OCSP_ResponderID (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_ResponderID (const char* name, 
   ASN1T_OCSP_ResponderID* pValue, ASN1T_OCSP_ResponderID* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_ResponderID (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponderID* pSrcValue, ASN1T_OCSP_ResponderID* pDstValue);

EXTERN void asn1Init_OCSP_ResponderID (ASN1T_OCSP_ResponderID* pvalue);

EXTERN void asn1Free_OCSP_ResponderID (OSCTXT *pctxt, ASN1T_OCSP_ResponderID* pvalue);

/**************************************************************/
/*                                                            */
/*  RevokedInfo                                               */
/*                                                            */
/**************************************************************/
/*
RevokedInfo ::= SEQUENCE {
   revocationTime GeneralizedTime,
   revocationReason [0] CRLReason OPTIONAL
}
*/
#define TV_OCSP_RevokedInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_RevokedInfo;

struct EXTERN ASN1T_OCSP_RevokedInfo : public ASN1TPDU {
   struct {
      unsigned revocationReasonPresent : 1;
   } m;
   const char* revocationTime;
   ASN1T_OCSP_CRLReason revocationReason;
   ASN1T_OCSP_RevokedInfo ();
   ASN1T_OCSP_RevokedInfo (ASN1C_OCSP_RevokedInfo& srcData);
   ~ASN1T_OCSP_RevokedInfo ();
} ;

class EXTERN ASN1C_OCSP_RevokedInfo :
public ASN1CType
{
protected:
   ASN1T_OCSP_RevokedInfo& msgData;
public:
   ASN1C_OCSP_RevokedInfo (ASN1T_OCSP_RevokedInfo& data);
   ASN1C_OCSP_RevokedInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_RevokedInfo& data);
   ASN1C_OCSP_RevokedInfo (OSRTContext &context, ASN1T_OCSP_RevokedInfo& data);
   ASN1C_OCSP_RevokedInfo (ASN1C_OCSP_RevokedInfo& original);
   virtual ~ASN1C_OCSP_RevokedInfo () {}
   inline ASN1T_OCSP_RevokedInfo& getData () { return msgData; }
   inline const ASN1T_OCSP_RevokedInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RevokedInfo");
   int toStream (const char* name = "RevokedInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_RevokedInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_RevokedInfo& getCopy (ASN1T_OCSP_RevokedInfo* pDstData = 0);
   ASN1T_OCSP_RevokedInfo* newCopy ();

   inline ASN1C_OCSP_RevokedInfo& operator= (ASN1C_OCSP_RevokedInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_RevokedInfo (OSCTXT* pctxt,
   ASN1T_OCSP_RevokedInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_RevokedInfo (OSCTXT* pctxt, 
   ASN1T_OCSP_RevokedInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_RevokedInfo 
   (const char* name, const ASN1T_OCSP_RevokedInfo* pvalue);

EXTERN int asn1PrtToStrm_OCSP_RevokedInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_RevokedInfo* pvalue);

EXTERN ASN1T_OCSP_RevokedInfo* new_ASN1T_OCSP_RevokedInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_RevokedInfo (const char* name, 
   ASN1T_OCSP_RevokedInfo* pValue, ASN1T_OCSP_RevokedInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_RevokedInfo (OSCTXT* pctxt, 
   ASN1T_OCSP_RevokedInfo* pSrcValue, ASN1T_OCSP_RevokedInfo* pDstValue);

EXTERN void asn1Init_OCSP_RevokedInfo (ASN1T_OCSP_RevokedInfo* pvalue);

EXTERN void asn1Free_OCSP_RevokedInfo (OSCTXT *pctxt, ASN1T_OCSP_RevokedInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertStatus                                                */
/*                                                            */
/**************************************************************/
/*
CertStatus ::= CHOICE {
   good [0] IMPLICIT NULL,
   revoked [1] IMPLICIT RevokedInfo,
   unknown [2] IMPLICIT NULL
}
*/
/* Choice context tags */

#define TVC_OCSP_CertStatus_good	(TM_CTXT|TM_PRIM|0)
#define TVC_OCSP_CertStatus_revoked	(TM_CTXT|TM_CONS|1)
#define TVC_OCSP_CertStatus_unknown	(TM_CTXT|TM_PRIM|2)

/* Choice tag constants */

#define T_OCSP_CertStatus_good          1
#define T_OCSP_CertStatus_revoked       2
#define T_OCSP_CertStatus_unknown       3

class EXTERN ASN1C_OCSP_CertStatus;

struct EXTERN ASN1T_OCSP_CertStatus : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      /* t = 2 */
      ASN1T_OCSP_RevokedInfo *revoked;
      /* t = 3 */
   } u;
   ASN1T_OCSP_CertStatus () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_OCSP_CertStatus (ASN1C_OCSP_CertStatus& srcData);
   ~ASN1T_OCSP_CertStatus ();
} ;

class EXTERN ASN1C_OCSP_CertStatus :
public ASN1CType
{
protected:
   ASN1T_OCSP_CertStatus& msgData;
public:
   ASN1C_OCSP_CertStatus (ASN1T_OCSP_CertStatus& data);
   ASN1C_OCSP_CertStatus (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_CertStatus& data);
   ASN1C_OCSP_CertStatus (OSRTContext &context, ASN1T_OCSP_CertStatus& data);
   ASN1C_OCSP_CertStatus (ASN1C_OCSP_CertStatus& original);
   virtual ~ASN1C_OCSP_CertStatus () {}
   inline ASN1T_OCSP_CertStatus& getData () { return msgData; }
   inline const ASN1T_OCSP_CertStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertStatus");
   int toStream (const char* name = "CertStatus");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_CertStatus* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_CertStatus& getCopy (ASN1T_OCSP_CertStatus* pDstData = 0);
   ASN1T_OCSP_CertStatus* newCopy ();

   inline ASN1C_OCSP_CertStatus& operator= (ASN1C_OCSP_CertStatus& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_CertStatus (OSCTXT* pctxt,
   ASN1T_OCSP_CertStatus *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_CertStatus (OSCTXT* pctxt, 
   ASN1T_OCSP_CertStatus* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_CertStatus 
   (const char* name, const ASN1T_OCSP_CertStatus* pvalue);

EXTERN int asn1PrtToStrm_OCSP_CertStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_CertStatus* pvalue);

EXTERN ASN1T_OCSP_CertStatus* new_ASN1T_OCSP_CertStatus (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_CertStatus (const char* name, 
   ASN1T_OCSP_CertStatus* pValue, ASN1T_OCSP_CertStatus* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_CertStatus (OSCTXT* pctxt, 
   ASN1T_OCSP_CertStatus* pSrcValue, ASN1T_OCSP_CertStatus* pDstValue);

EXTERN void asn1Init_OCSP_CertStatus (ASN1T_OCSP_CertStatus* pvalue);

EXTERN void asn1Free_OCSP_CertStatus (OSCTXT *pctxt, ASN1T_OCSP_CertStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  SingleResponse                                            */
/*                                                            */
/**************************************************************/
/*
SingleResponse ::= SEQUENCE {
   certID CertID,
   certStatus CertStatus,
   thisUpdate GeneralizedTime,
   nextUpdate [0] GeneralizedTime OPTIONAL,
   singleExtensions [1] Extensions OPTIONAL
}
*/
#define TV_OCSP_SingleResponse	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_SingleResponse;

struct EXTERN ASN1T_OCSP_SingleResponse : public ASN1TPDU {
   struct {
      unsigned nextUpdatePresent : 1;
      unsigned singleExtensionsPresent : 1;
   } m;
   ASN1T_OCSP_CertID certID;
   ASN1T_OCSP_CertStatus certStatus;
   const char* thisUpdate;
   const char* nextUpdate;
   ASN1T_EXP_Extensions singleExtensions;
   ASN1T_OCSP_SingleResponse ();
   ASN1T_OCSP_SingleResponse (ASN1C_OCSP_SingleResponse& srcData);
   ~ASN1T_OCSP_SingleResponse ();
} ;

class EXTERN ASN1C_OCSP_SingleResponse :
public ASN1CType
{
protected:
   ASN1T_OCSP_SingleResponse& msgData;
public:
   ASN1C_OCSP_SingleResponse (ASN1T_OCSP_SingleResponse& data);
   ASN1C_OCSP_SingleResponse (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_SingleResponse& data);
   ASN1C_OCSP_SingleResponse (OSRTContext &context
      , ASN1T_OCSP_SingleResponse& data);
   ASN1C_OCSP_SingleResponse (ASN1C_OCSP_SingleResponse& original);
   virtual ~ASN1C_OCSP_SingleResponse () {}
   inline ASN1T_OCSP_SingleResponse& getData () { return msgData; }
   inline const ASN1T_OCSP_SingleResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SingleResponse");
   int toStream (const char* name = "SingleResponse");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_SingleResponse* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_SingleResponse& getCopy (ASN1T_OCSP_SingleResponse* pDstData = 0);
   ASN1T_OCSP_SingleResponse* newCopy ();

   inline ASN1C_OCSP_SingleResponse& operator= (ASN1C_OCSP_SingleResponse& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_SingleResponse (OSCTXT* pctxt,
   ASN1T_OCSP_SingleResponse *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_SingleResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_SingleResponse* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_SingleResponse 
   (const char* name, const ASN1T_OCSP_SingleResponse* pvalue);

EXTERN int asn1PrtToStrm_OCSP_SingleResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_SingleResponse* pvalue);

EXTERN ASN1T_OCSP_SingleResponse* 
   new_ASN1T_OCSP_SingleResponse (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_SingleResponse (const char* name, 
   ASN1T_OCSP_SingleResponse* pValue, ASN1T_OCSP_SingleResponse* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_SingleResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_SingleResponse* pSrcValue, ASN1T_OCSP_SingleResponse* pDstValue);

EXTERN void asn1Init_OCSP_SingleResponse (ASN1T_OCSP_SingleResponse* pvalue);

EXTERN void asn1Free_OCSP_SingleResponse (OSCTXT *pctxt, 
   ASN1T_OCSP_SingleResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfOCSP_SingleResponse                                 */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_OCSP__SeqOfOCSP_SingleResponse;

/* List of ASN1T_OCSP_SingleResponse */
typedef struct EXTERN ASN1T_OCSP__SeqOfOCSP_SingleResponse : public ASN1TPDUSeqOfList {
   ~ASN1T_OCSP__SeqOfOCSP_SingleResponse();
} ASN1T_OCSP__SeqOfOCSP_SingleResponse;

class EXTERN ASN1C_OCSP__SeqOfOCSP_SingleResponse :
public ASN1CSeqOfList
{
protected:
   ASN1T_OCSP__SeqOfOCSP_SingleResponse& msgData;
public:
   ASN1C_OCSP__SeqOfOCSP_SingleResponse
       (ASN1T_OCSP__SeqOfOCSP_SingleResponse& data);
   ASN1C_OCSP__SeqOfOCSP_SingleResponse (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP__SeqOfOCSP_SingleResponse& data);
   ASN1C_OCSP__SeqOfOCSP_SingleResponse (ASN1CType& ccobj
      , ASN1T_OCSP__SeqOfOCSP_SingleResponse& data);
   ASN1C_OCSP__SeqOfOCSP_SingleResponse (OSRTContext &context
      , ASN1T_OCSP__SeqOfOCSP_SingleResponse& data);
   ASN1C_OCSP__SeqOfOCSP_SingleResponse (ASN1C_OCSP__SeqOfOCSP_SingleResponse& original);
   virtual ~ASN1C_OCSP__SeqOfOCSP_SingleResponse () {}
   inline ASN1T_OCSP__SeqOfOCSP_SingleResponse& getData () { return msgData; }
   inline const ASN1T_OCSP__SeqOfOCSP_SingleResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfOCSP_SingleResponse");
   int toStream (const char* name = "_SeqOfOCSP_SingleResponse");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP__SeqOfOCSP_SingleResponse* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP__SeqOfOCSP_SingleResponse& getCopy (ASN1T_OCSP__SeqOfOCSP_SingleResponse* pDstData = 0);
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* newCopy ();

   ASN1C_OCSP__SeqOfOCSP_SingleResponse& operator= (ASN1C_OCSP__SeqOfOCSP_SingleResponse& srcData);
   void Append (ASN1T_OCSP_SingleResponse* elem);
   ASN1T_OCSP_SingleResponse* NewElement ();
   ASN1T_OCSP_SingleResponse* AppendNewElement ();
} ;

EXTERN int asn1E_OCSP__SeqOfOCSP_SingleResponse (OSCTXT* pctxt,
   ASN1T_OCSP__SeqOfOCSP_SingleResponse *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP__SeqOfOCSP_SingleResponse (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_OCSP__SeqOfOCSP_SingleResponse 
   (const char* name, const ASN1T_OCSP__SeqOfOCSP_SingleResponse* pvalue);

EXTERN int asn1PrtToStrm_OCSP__SeqOfOCSP_SingleResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP__SeqOfOCSP_SingleResponse* pvalue);

EXTERN OSBOOL asn1Compare_OCSP__SeqOfOCSP_SingleResponse (const char* name, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pValue, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP__SeqOfOCSP_SingleResponse (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pSrcValue, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pDstValue);

EXTERN void asn1Init_OCSP__SeqOfOCSP_SingleResponse (
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pvalue);

EXTERN void asn1Free_OCSP__SeqOfOCSP_SingleResponse (OSCTXT *pctxt, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  ResponseData                                              */
/*                                                            */
/**************************************************************/
/*
ResponseData ::= SEQUENCE {
   version [0] Version DEFAULT v1,
   responderID ResponderID,
   producedAt GeneralizedTime,
   responses SEQUENCE OF SingleResponse,
   responseExtensions [1] Extensions OPTIONAL
}
*/
#define TV_OCSP_ResponseData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_ResponseData;

struct EXTERN ASN1T_OCSP_ResponseData : public ASN1TPDU {
   struct {
      unsigned responseExtensionsPresent : 1;
   } m;
   ASN1T_OCSP_Version version;
   ASN1T_OCSP_ResponderID responderID;
   const char* producedAt;
   ASN1T_OCSP__SeqOfOCSP_SingleResponse responses;
   ASN1T_EXP_Extensions responseExtensions;
   ASN1T_OCSP_ResponseData ();
   ASN1T_OCSP_ResponseData (ASN1C_OCSP_ResponseData& srcData);
   ~ASN1T_OCSP_ResponseData ();
} ;

class EXTERN ASN1C_OCSP_ResponseData :
public ASN1CType
{
protected:
   ASN1T_OCSP_ResponseData& msgData;
public:
   ASN1C_OCSP_ResponseData (ASN1T_OCSP_ResponseData& data);
   ASN1C_OCSP_ResponseData (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_ResponseData& data);
   ASN1C_OCSP_ResponseData (OSRTContext &context, ASN1T_OCSP_ResponseData& data
      );
   ASN1C_OCSP_ResponseData (ASN1C_OCSP_ResponseData& original);
   virtual ~ASN1C_OCSP_ResponseData () {}
   inline ASN1T_OCSP_ResponseData& getData () { return msgData; }
   inline const ASN1T_OCSP_ResponseData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ResponseData");
   int toStream (const char* name = "ResponseData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_ResponseData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_ResponseData& getCopy (ASN1T_OCSP_ResponseData* pDstData = 0);
   ASN1T_OCSP_ResponseData* newCopy ();

   inline ASN1C_OCSP_ResponseData& operator= (ASN1C_OCSP_ResponseData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_ResponseData (OSCTXT* pctxt,
   ASN1T_OCSP_ResponseData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_ResponseData (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponseData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_ResponseData 
   (const char* name, const ASN1T_OCSP_ResponseData* pvalue);

EXTERN int asn1PrtToStrm_OCSP_ResponseData (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_ResponseData* pvalue);

EXTERN ASN1T_OCSP_ResponseData* new_ASN1T_OCSP_ResponseData (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_OCSP_ResponseData (const char* name, 
   ASN1T_OCSP_ResponseData* pValue, ASN1T_OCSP_ResponseData* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_ResponseData (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponseData* pSrcValue, ASN1T_OCSP_ResponseData* pDstValue);

EXTERN void asn1Init_OCSP_ResponseData (ASN1T_OCSP_ResponseData* pvalue);

EXTERN void asn1Free_OCSP_ResponseData (OSCTXT *pctxt, 
   ASN1T_OCSP_ResponseData* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicOCSPResponse                                         */
/*                                                            */
/**************************************************************/
/*
BasicOCSPResponse ::= SEQUENCE {
   tbsResponseData ResponseData,
   signatureAlgorithm AlgorithmIdentifier,
   signature BIT STRING ,
   certs [0] SEQUENCE OF Certificate OPTIONAL
}
*/
#define TV_OCSP_BasicOCSPResponse	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_OCSP_BasicOCSPResponse;

struct EXTERN ASN1T_OCSP_BasicOCSPResponse : public ASN1TPDU {
   struct {
      unsigned certsPresent : 1;
   } m;
   ASN1T_OCSP_ResponseData tbsResponseData;
   ASN1T_EXP_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature_;
   ASN1T_OCSP__SeqOfOCSP_Certificate certs;
   ASN1T_OCSP_BasicOCSPResponse ();
   ASN1T_OCSP_BasicOCSPResponse (ASN1C_OCSP_BasicOCSPResponse& srcData);
   ~ASN1T_OCSP_BasicOCSPResponse ();
} ;

class EXTERN ASN1C_OCSP_BasicOCSPResponse :
public ASN1CType
{
protected:
   ASN1T_OCSP_BasicOCSPResponse& msgData;
public:
   ASN1C_OCSP_BasicOCSPResponse (ASN1T_OCSP_BasicOCSPResponse& data);
   ASN1C_OCSP_BasicOCSPResponse (OSRTMessageBufferIF& msgBuf
      , ASN1T_OCSP_BasicOCSPResponse& data);
   ASN1C_OCSP_BasicOCSPResponse (OSRTContext &context
      , ASN1T_OCSP_BasicOCSPResponse& data);
   ASN1C_OCSP_BasicOCSPResponse (ASN1C_OCSP_BasicOCSPResponse& original);
   virtual ~ASN1C_OCSP_BasicOCSPResponse () {}
   inline ASN1T_OCSP_BasicOCSPResponse& getData () { return msgData; }
   inline const ASN1T_OCSP_BasicOCSPResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BasicOCSPResponse");
   int toStream (const char* name = "BasicOCSPResponse");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_OCSP_BasicOCSPResponse* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_OCSP_BasicOCSPResponse& getCopy (ASN1T_OCSP_BasicOCSPResponse* pDstData = 0);
   ASN1T_OCSP_BasicOCSPResponse* newCopy ();

   inline ASN1C_OCSP_BasicOCSPResponse& operator= (ASN1C_OCSP_BasicOCSPResponse& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_OCSP_BasicOCSPResponse (OSCTXT* pctxt,
   ASN1T_OCSP_BasicOCSPResponse *pvalue, ASN1TagType tagging);

EXTERN int asn1D_OCSP_BasicOCSPResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_BasicOCSPResponse* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_OCSP_BasicOCSPResponse 
   (const char* name, const ASN1T_OCSP_BasicOCSPResponse* pvalue);

EXTERN int asn1PrtToStrm_OCSP_BasicOCSPResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_OCSP_BasicOCSPResponse* pvalue);

EXTERN ASN1T_OCSP_BasicOCSPResponse* 
   new_ASN1T_OCSP_BasicOCSPResponse (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_OCSP_BasicOCSPResponse (const char* name, 
   ASN1T_OCSP_BasicOCSPResponse* pValue, 
   ASN1T_OCSP_BasicOCSPResponse* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_OCSP_BasicOCSPResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_BasicOCSPResponse* pSrcValue, ASN1T_OCSP_BasicOCSPResponse*
    pDstValue);

EXTERN void asn1Init_OCSP_BasicOCSPResponse (ASN1T_OCSP_BasicOCSPResponse* pvalue);

EXTERN void asn1Free_OCSP_BasicOCSPResponse (OSCTXT *pctxt, 
   ASN1T_OCSP_BasicOCSPResponse* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID OCSP_id_at_initials;
extern EXTERN ASN1OBJID OCSP_id_at_generationQualifier;
extern EXTERN ASN1OBJID OCSP_id_pkix_ocsp;
extern EXTERN ASN1OBJID OCSP_id_pkix_ocsp_basic;
extern EXTERN ASN1OBJID OCSP_id_pkix_ocsp_nonce;
extern EXTERN ASN1OBJID OCSP_id_pkix_ocsp_crl;
extern EXTERN ASN1OBJID OCSP_id_pkix_ocsp_response;
extern EXTERN ASN1OBJID OCSP_id_pkix_ocsp_nocheck;
extern EXTERN ASN1OBJID OCSP_id_pkix_ocsp_archive_cutoff;
extern EXTERN ASN1OBJID OCSP_id_pkix_ocsp_service_locator;

#endif
