/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "cms.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_CMS_ContentType (OSCTXT* pctxt, 
   ASN1T_CMS_ContentType* pSrcValue, ASN1T_CMS_ContentType* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_CMS_ContentType::ASN1C_CMS_ContentType (ASN1C_CMS_ContentType& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_ContentType& ASN1C_CMS_ContentType::getCopy (ASN1T_CMS_ContentType* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_ContentType);
      new (pDstData) ASN1T_CMS_ContentType;
   }

   asn1Copy_CMS_ContentType (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_CMS_ContentType* ASN1C_CMS_ContentType::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_ContentType* pDstData = new ASN1T_CMS_ContentType;

   asn1Copy_CMS_ContentType (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_CMS_EncryptedKey (OSCTXT* pctxt, 
   ASN1T_CMS_EncryptedKey* pSrcValue, ASN1T_CMS_EncryptedKey* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_EncryptedKey::ASN1C_CMS_EncryptedKey (ASN1C_CMS_EncryptedKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_EncryptedKey& ASN1C_CMS_EncryptedKey::getCopy (ASN1T_CMS_EncryptedKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_EncryptedKey);
      new (pDstData) ASN1T_CMS_EncryptedKey;
   }

   asn1Copy_CMS_EncryptedKey (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_CMS_EncryptedKey* ASN1C_CMS_EncryptedKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_EncryptedKey* pDstData = new ASN1T_CMS_EncryptedKey;

   asn1Copy_CMS_EncryptedKey (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_CMS_SubjectKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SubjectKeyIdentifier* pSrcValue, ASN1T_CMS_SubjectKeyIdentifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_SubjectKeyIdentifier::ASN1C_CMS_SubjectKeyIdentifier (ASN1C_CMS_SubjectKeyIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_SubjectKeyIdentifier& ASN1C_CMS_SubjectKeyIdentifier::getCopy (ASN1T_CMS_SubjectKeyIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SubjectKeyIdentifier);
      new (pDstData) ASN1T_CMS_SubjectKeyIdentifier;
   }

   asn1Copy_CMS_SubjectKeyIdentifier (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_CMS_SubjectKeyIdentifier* ASN1C_CMS_SubjectKeyIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SubjectKeyIdentifier* pDstData = new ASN1T_CMS_SubjectKeyIdentifier;

   asn1Copy_CMS_SubjectKeyIdentifier (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_CMS_Digest (OSCTXT* pctxt, ASN1T_CMS_Digest* pSrcValue, 
   ASN1T_CMS_Digest* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_Digest::ASN1C_CMS_Digest (ASN1C_CMS_Digest& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_Digest& ASN1C_CMS_Digest::getCopy (ASN1T_CMS_Digest* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_Digest);
      new (pDstData) ASN1T_CMS_Digest;
   }

   asn1Copy_CMS_Digest (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_CMS_Digest* ASN1C_CMS_Digest::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_Digest* pDstData = new ASN1T_CMS_Digest;

   asn1Copy_CMS_Digest (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_CMS_MessageAuthenticationCode (OSCTXT* pctxt, 
   ASN1T_CMS_MessageAuthenticationCode* pSrcValue, 
   ASN1T_CMS_MessageAuthenticationCode* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_MessageAuthenticationCode::ASN1C_CMS_MessageAuthenticationCode (ASN1C_CMS_MessageAuthenticationCode& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_MessageAuthenticationCode& ASN1C_CMS_MessageAuthenticationCode::getCopy (ASN1T_CMS_MessageAuthenticationCode* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_MessageAuthenticationCode);
      new (pDstData) ASN1T_CMS_MessageAuthenticationCode;
   }

   asn1Copy_CMS_MessageAuthenticationCode (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_CMS_MessageAuthenticationCode* ASN1C_CMS_MessageAuthenticationCode::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_MessageAuthenticationCode* pDstData = new ASN1T_CMS_MessageAuthenticationCode;

   asn1Copy_CMS_MessageAuthenticationCode (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_CMS_DigestAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_DigestAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_DigestAlgorithmIdentifier::ASN1C_CMS_DigestAlgorithmIdentifier (ASN1C_CMS_DigestAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_CMS_DigestAlgorithmIdentifier& ASN1C_CMS_DigestAlgorithmIdentifier::getCopy (ASN1T_CMS_DigestAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_DigestAlgorithmIdentifier);
      new (pDstData) ASN1T_CMS_DigestAlgorithmIdentifier;
   }

   asn1Copy_CMS_DigestAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_DigestAlgorithmIdentifier* ASN1C_CMS_DigestAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_DigestAlgorithmIdentifier* pDstData = new ASN1T_CMS_DigestAlgorithmIdentifier;

   asn1Copy_CMS_DigestAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_SignatureAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_SignatureAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_SignatureAlgorithmIdentifier::ASN1C_CMS_SignatureAlgorithmIdentifier (ASN1C_CMS_SignatureAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_CMS_SignatureAlgorithmIdentifier& ASN1C_CMS_SignatureAlgorithmIdentifier::getCopy (ASN1T_CMS_SignatureAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SignatureAlgorithmIdentifier);
      new (pDstData) ASN1T_CMS_SignatureAlgorithmIdentifier;
   }

   asn1Copy_CMS_SignatureAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_SignatureAlgorithmIdentifier* ASN1C_CMS_SignatureAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SignatureAlgorithmIdentifier* pDstData = new ASN1T_CMS_SignatureAlgorithmIdentifier;

   asn1Copy_CMS_SignatureAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_KeyEncryptionAlgorithmIdentifier::ASN1C_CMS_KeyEncryptionAlgorithmIdentifier (ASN1C_CMS_KeyEncryptionAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_CMS_KeyEncryptionAlgorithmIdentifier& ASN1C_CMS_KeyEncryptionAlgorithmIdentifier::getCopy (ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_KeyEncryptionAlgorithmIdentifier);
      new (pDstData) ASN1T_CMS_KeyEncryptionAlgorithmIdentifier;
   }

   asn1Copy_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* ASN1C_CMS_KeyEncryptionAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pDstData = new ASN1T_CMS_KeyEncryptionAlgorithmIdentifier;

   asn1Copy_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_ContentEncryptionAlgorithmIdentifier::ASN1C_CMS_ContentEncryptionAlgorithmIdentifier (ASN1C_CMS_ContentEncryptionAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_CMS_ContentEncryptionAlgorithmIdentifier& ASN1C_CMS_ContentEncryptionAlgorithmIdentifier::getCopy (ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_ContentEncryptionAlgorithmIdentifier);
      new (pDstData) ASN1T_CMS_ContentEncryptionAlgorithmIdentifier;
   }

   asn1Copy_CMS_ContentEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* ASN1C_CMS_ContentEncryptionAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pDstData = new ASN1T_CMS_ContentEncryptionAlgorithmIdentifier;

   asn1Copy_CMS_ContentEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_MessageAuthenticationCodeAlgorithm (OSCTXT* pctxt, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pSrcValue, 
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_MessageAuthenticationCodeAlgorithm::ASN1C_CMS_MessageAuthenticationCodeAlgorithm (ASN1C_CMS_MessageAuthenticationCodeAlgorithm& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_CMS_MessageAuthenticationCodeAlgorithm& ASN1C_CMS_MessageAuthenticationCodeAlgorithm::getCopy (ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_MessageAuthenticationCodeAlgorithm);
      new (pDstData) ASN1T_CMS_MessageAuthenticationCodeAlgorithm;
   }

   asn1Copy_CMS_MessageAuthenticationCodeAlgorithm (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_MessageAuthenticationCodeAlgorithm* ASN1C_CMS_MessageAuthenticationCodeAlgorithm::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pDstData = new ASN1T_CMS_MessageAuthenticationCodeAlgorithm;

   asn1Copy_CMS_MessageAuthenticationCodeAlgorithm (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_KeyDerivationAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pSrcValue, 
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_KeyDerivationAlgorithmIdentifier::ASN1C_CMS_KeyDerivationAlgorithmIdentifier (ASN1C_CMS_KeyDerivationAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_CMS_KeyDerivationAlgorithmIdentifier& ASN1C_CMS_KeyDerivationAlgorithmIdentifier::getCopy (ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_KeyDerivationAlgorithmIdentifier);
      new (pDstData) ASN1T_CMS_KeyDerivationAlgorithmIdentifier;
   }

   asn1Copy_CMS_KeyDerivationAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_KeyDerivationAlgorithmIdentifier* ASN1C_CMS_KeyDerivationAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pDstData = new ASN1T_CMS_KeyDerivationAlgorithmIdentifier;

   asn1Copy_CMS_KeyDerivationAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_AttributeCertificateV2 (OSCTXT* pctxt, 
   ASN1T_CMS_AttributeCertificateV2* pSrcValue, 
   ASN1T_CMS_AttributeCertificateV2* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ATTRCERT_AttributeCertificate (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_AttributeCertificateV2::ASN1C_CMS_AttributeCertificateV2 (ASN1C_CMS_AttributeCertificateV2& original) :
   ASN1C_ATTRCERT_AttributeCertificate (original)
{
}

ASN1T_CMS_AttributeCertificateV2& ASN1C_CMS_AttributeCertificateV2::getCopy (ASN1T_CMS_AttributeCertificateV2* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_AttributeCertificateV2);
      new (pDstData) ASN1T_CMS_AttributeCertificateV2;
   }

   asn1Copy_CMS_AttributeCertificateV2 (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_AttributeCertificateV2* ASN1C_CMS_AttributeCertificateV2::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_AttributeCertificateV2* pDstData = new ASN1T_CMS_AttributeCertificateV2;

   asn1Copy_CMS_AttributeCertificateV2 (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_UserKeyingMaterial (OSCTXT* pctxt, 
   ASN1T_CMS_UserKeyingMaterial* pSrcValue, ASN1T_CMS_UserKeyingMaterial*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_UserKeyingMaterial::ASN1C_CMS_UserKeyingMaterial (ASN1C_CMS_UserKeyingMaterial& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_UserKeyingMaterial& ASN1C_CMS_UserKeyingMaterial::getCopy (ASN1T_CMS_UserKeyingMaterial* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_UserKeyingMaterial);
      new (pDstData) ASN1T_CMS_UserKeyingMaterial;
   }

   asn1Copy_CMS_UserKeyingMaterial (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_CMS_UserKeyingMaterial* ASN1C_CMS_UserKeyingMaterial::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_UserKeyingMaterial* pDstData = new ASN1T_CMS_UserKeyingMaterial;

   asn1Copy_CMS_UserKeyingMaterial (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_CMS_MessageDigest (OSCTXT* pctxt, 
   ASN1T_CMS_MessageDigest* pSrcValue, ASN1T_CMS_MessageDigest* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_MessageDigest::ASN1C_CMS_MessageDigest (ASN1C_CMS_MessageDigest& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_MessageDigest& ASN1C_CMS_MessageDigest::getCopy (ASN1T_CMS_MessageDigest* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_MessageDigest);
      new (pDstData) ASN1T_CMS_MessageDigest;
   }

   asn1Copy_CMS_MessageDigest (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_CMS_MessageDigest* ASN1C_CMS_MessageDigest::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_MessageDigest* pDstData = new ASN1T_CMS_MessageDigest;

   asn1Copy_CMS_MessageDigest (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_CMS_SignerIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_SignerIdentifier* pSrcValue, ASN1T_CMS_SignerIdentifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         pDstValue->u.issuerAndSerialNumber = rtxMemAllocType (pctxt, ASN1T_PKCS7_IssuerAndSerialNumber);
         new (pDstValue->u.issuerAndSerialNumber) ASN1T_PKCS7_IssuerAndSerialNumber;
         asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, pSrcValue->u.issuerAndSerialNumber, pDstValue->u.issuerAndSerialNumber);
         break;

      /* subjectKeyIdentifier */
      case 2:
         pDstValue->u.subjectKeyIdentifier = rtxMemAllocType (pctxt, ASN1T_CMS_SubjectKeyIdentifier);
         new (pDstValue->u.subjectKeyIdentifier) ASN1T_CMS_SubjectKeyIdentifier;
         asn1Copy_CMS_SubjectKeyIdentifier (pctxt, pSrcValue->u.subjectKeyIdentifier, pDstValue->u.subjectKeyIdentifier);
         break;

   }
}

ASN1C_CMS_SignerIdentifier::ASN1C_CMS_SignerIdentifier (ASN1C_CMS_SignerIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_SignerIdentifier::ASN1T_CMS_SignerIdentifier (ASN1C_CMS_SignerIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_CMS_SignerIdentifier& ASN1C_CMS_SignerIdentifier::getCopy (ASN1T_CMS_SignerIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SignerIdentifier);
      new (pDstData) ASN1T_CMS_SignerIdentifier;
   }

   asn1Copy_CMS_SignerIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_SignerIdentifier* ASN1C_CMS_SignerIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SignerIdentifier* pDstData = new ASN1T_CMS_SignerIdentifier;

   asn1Copy_CMS_SignerIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_UnsignedAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnsignedAttributes* pSrcValue, ASN1T_CMS_UnsignedAttributes*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Attribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Attribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Attribute);
         pSrcData = (ASN1T_EXP_Attribute*) pnode->data;

         asn1Copy_EXP_Attribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_UnsignedAttributes::ASN1C_CMS_UnsignedAttributes (ASN1C_CMS_UnsignedAttributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_UnsignedAttributes*)pList)
{
}

ASN1C_CMS_UnsignedAttributes& ASN1C_CMS_UnsignedAttributes::operator= (ASN1C_CMS_UnsignedAttributes& srcData)
{
   clear ();
   asn1Copy_CMS_UnsignedAttributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_UnsignedAttributes& ASN1C_CMS_UnsignedAttributes::getCopy (ASN1T_CMS_UnsignedAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_UnsignedAttributes);
      new (pDstData) ASN1T_CMS_UnsignedAttributes;
   }

   asn1Copy_CMS_UnsignedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_UnsignedAttributes* ASN1C_CMS_UnsignedAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_UnsignedAttributes* pDstData = new ASN1T_CMS_UnsignedAttributes;

   asn1Copy_CMS_UnsignedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_SignerInfo (OSCTXT* pctxt, ASN1T_CMS_SignerInfo* pSrcValue, 
   ASN1T_CMS_SignerInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_CMS_SignerIdentifier (pctxt, &pSrcValue->sid, &pDstValue->sid);

   asn1Copy_CMS_DigestAlgorithmIdentifier (pctxt, &pSrcValue->digestAlgorithm, &pDstValue->digestAlgorithm);

   if (pSrcValue->m.signedAttrsPresent) {
      asn1Copy_DERCMS_SignedAttributes (pctxt, &pSrcValue->signedAttrs, &pDstValue->signedAttrs);
   }

   asn1Copy_CMS_SignatureAlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   asn1Copy_DERCMS_SignatureValue (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

   if (pSrcValue->m.unsignedAttrsPresent) {
      asn1Copy_CMS_UnsignedAttributes (pctxt, &pSrcValue->unsignedAttrs, &pDstValue->unsignedAttrs);
   }

}

ASN1C_CMS_SignerInfo::ASN1C_CMS_SignerInfo (ASN1C_CMS_SignerInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_SignerInfo::ASN1T_CMS_SignerInfo (ASN1C_CMS_SignerInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_SignerInfo& ASN1C_CMS_SignerInfo::getCopy (ASN1T_CMS_SignerInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SignerInfo);
      new (pDstData) ASN1T_CMS_SignerInfo;
   }

   asn1Copy_CMS_SignerInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_SignerInfo* ASN1C_CMS_SignerInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SignerInfo* pDstData = new ASN1T_CMS_SignerInfo;

   asn1Copy_CMS_SignerInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_Countersignature (OSCTXT* pctxt, 
   ASN1T_CMS_Countersignature* pSrcValue, ASN1T_CMS_Countersignature*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_CMS_SignerInfo (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_Countersignature::ASN1C_CMS_Countersignature (ASN1C_CMS_Countersignature& original) :
   ASN1C_CMS_SignerInfo (original)
{
}

ASN1T_CMS_Countersignature& ASN1C_CMS_Countersignature::getCopy (ASN1T_CMS_Countersignature* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_Countersignature);
      new (pDstData) ASN1T_CMS_Countersignature;
   }

   asn1Copy_CMS_Countersignature (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_Countersignature* ASN1C_CMS_Countersignature::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_Countersignature* pDstData = new ASN1T_CMS_Countersignature;

   asn1Copy_CMS_Countersignature (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_Signature (OSCTXT* pctxt, ASN1T_CMS_Signature* pSrcValue, 
   ASN1T_CMS_Signature* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynBitStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_CMS_Signature::ASN1C_CMS_Signature (ASN1C_CMS_Signature& original) :
   ASN1CBitStr (original), msgData (original.getCopy ())
{
   ASN1CBitStr::init (msgData);
}

ASN1C_CMS_Signature& ASN1C_CMS_Signature::operator= (ASN1C_CMS_Signature& srcData)
{
   srcData.getCopy (&msgData);
   return *this;
}

ASN1T_CMS_Signature& ASN1C_CMS_Signature::getCopy (ASN1T_CMS_Signature* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_Signature);
      new (pDstData) ASN1T_CMS_Signature;
   }

   asn1Copy_CMS_Signature (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_CMS_Signature* ASN1C_CMS_Signature::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_Signature* pDstData = new ASN1T_CMS_Signature;

   asn1Copy_CMS_Signature (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_CMS_ContentInfo (OSCTXT* pctxt, 
   ASN1T_CMS_ContentInfo* pSrcValue, ASN1T_CMS_ContentInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_CMS_ContentType (pctxt, &pSrcValue->contentType, &pDstValue->contentType);

   rtCopyOpenType (pctxt, &pSrcValue->content, &pDstValue->content);

}

ASN1C_CMS_ContentInfo::ASN1C_CMS_ContentInfo (ASN1C_CMS_ContentInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_ContentInfo::ASN1T_CMS_ContentInfo (ASN1C_CMS_ContentInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_ContentInfo& ASN1C_CMS_ContentInfo::getCopy (ASN1T_CMS_ContentInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_ContentInfo);
      new (pDstData) ASN1T_CMS_ContentInfo;
   }

   asn1Copy_CMS_ContentInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_ContentInfo* ASN1C_CMS_ContentInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_ContentInfo* pDstData = new ASN1T_CMS_ContentInfo;

   asn1Copy_CMS_ContentInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_EncapsulatedContentInfo (OSCTXT* pctxt, 
   ASN1T_CMS_EncapsulatedContentInfo* pSrcValue, 
   ASN1T_CMS_EncapsulatedContentInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_CMS_ContentType (pctxt, &pSrcValue->eContentType, &pDstValue->eContentType);

   if (pSrcValue->m.eContentPresent) {
      rtCopyDynOctStr (pctxt, &pSrcValue->eContent, &pDstValue->eContent);
   }

}

ASN1C_CMS_EncapsulatedContentInfo::ASN1C_CMS_EncapsulatedContentInfo (ASN1C_CMS_EncapsulatedContentInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_EncapsulatedContentInfo::ASN1T_CMS_EncapsulatedContentInfo (ASN1C_CMS_EncapsulatedContentInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_EncapsulatedContentInfo& ASN1C_CMS_EncapsulatedContentInfo::getCopy (ASN1T_CMS_EncapsulatedContentInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_EncapsulatedContentInfo);
      new (pDstData) ASN1T_CMS_EncapsulatedContentInfo;
   }

   asn1Copy_CMS_EncapsulatedContentInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_EncapsulatedContentInfo* ASN1C_CMS_EncapsulatedContentInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_EncapsulatedContentInfo* pDstData = new ASN1T_CMS_EncapsulatedContentInfo;

   asn1Copy_CMS_EncapsulatedContentInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_UnauthAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnauthAttributes* pSrcValue, ASN1T_CMS_UnauthAttributes*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Attribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Attribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Attribute);
         pSrcData = (ASN1T_EXP_Attribute*) pnode->data;

         asn1Copy_EXP_Attribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_UnauthAttributes::ASN1C_CMS_UnauthAttributes (ASN1C_CMS_UnauthAttributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_UnauthAttributes*)pList)
{
}

ASN1C_CMS_UnauthAttributes& ASN1C_CMS_UnauthAttributes::operator= (ASN1C_CMS_UnauthAttributes& srcData)
{
   clear ();
   asn1Copy_CMS_UnauthAttributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_UnauthAttributes& ASN1C_CMS_UnauthAttributes::getCopy (ASN1T_CMS_UnauthAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_UnauthAttributes);
      new (pDstData) ASN1T_CMS_UnauthAttributes;
   }

   asn1Copy_CMS_UnauthAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_UnauthAttributes* ASN1C_CMS_UnauthAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_UnauthAttributes* pDstData = new ASN1T_CMS_UnauthAttributes;

   asn1Copy_CMS_UnauthAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_ExtendedCertificateInfo (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificateInfo* pSrcValue, 
   ASN1T_CMS_ExtendedCertificateInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->version = pSrcValue->version;

   asn1Copy_EXP_Certificate (pctxt, &pSrcValue->certificate, &pDstValue->certificate);

   asn1Copy_CMS_UnauthAttributes (pctxt, &pSrcValue->attributes, &pDstValue->attributes);

}

ASN1C_CMS_ExtendedCertificateInfo::ASN1C_CMS_ExtendedCertificateInfo (ASN1C_CMS_ExtendedCertificateInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_ExtendedCertificateInfo::ASN1T_CMS_ExtendedCertificateInfo (ASN1C_CMS_ExtendedCertificateInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_ExtendedCertificateInfo& ASN1C_CMS_ExtendedCertificateInfo::getCopy (ASN1T_CMS_ExtendedCertificateInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_ExtendedCertificateInfo);
      new (pDstData) ASN1T_CMS_ExtendedCertificateInfo;
   }

   asn1Copy_CMS_ExtendedCertificateInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_ExtendedCertificateInfo* ASN1C_CMS_ExtendedCertificateInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_ExtendedCertificateInfo* pDstData = new ASN1T_CMS_ExtendedCertificateInfo;

   asn1Copy_CMS_ExtendedCertificateInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_ExtendedCertificate (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificate* pSrcValue, ASN1T_CMS_ExtendedCertificate*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_CMS_ExtendedCertificateInfo (pctxt, &pSrcValue->extendedCertificateInfo, &pDstValue->extendedCertificateInfo);

   asn1Copy_CMS_SignatureAlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   asn1Copy_CMS_Signature (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

}

ASN1C_CMS_ExtendedCertificate::ASN1C_CMS_ExtendedCertificate (ASN1C_CMS_ExtendedCertificate& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_ExtendedCertificate::ASN1T_CMS_ExtendedCertificate (ASN1C_CMS_ExtendedCertificate& original)
{
   original.getCopy (this);
}

ASN1T_CMS_ExtendedCertificate& ASN1C_CMS_ExtendedCertificate::getCopy (ASN1T_CMS_ExtendedCertificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_ExtendedCertificate);
      new (pDstData) ASN1T_CMS_ExtendedCertificate;
   }

   asn1Copy_CMS_ExtendedCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_ExtendedCertificate* ASN1C_CMS_ExtendedCertificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_ExtendedCertificate* pDstData = new ASN1T_CMS_ExtendedCertificate;

   asn1Copy_CMS_ExtendedCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_OtherCertificateFormat (OSCTXT* pctxt, 
   ASN1T_CMS_OtherCertificateFormat* pSrcValue, 
   ASN1T_CMS_OtherCertificateFormat* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->otherCertFormat, (ASN1OBJID*)&pDstValue->otherCertFormat);

   rtCopyOpenType (pctxt, &pSrcValue->otherCert, &pDstValue->otherCert);

}

ASN1C_CMS_OtherCertificateFormat::ASN1C_CMS_OtherCertificateFormat (ASN1C_CMS_OtherCertificateFormat& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_OtherCertificateFormat::ASN1T_CMS_OtherCertificateFormat (ASN1C_CMS_OtherCertificateFormat& original)
{
   original.getCopy (this);
}

ASN1T_CMS_OtherCertificateFormat& ASN1C_CMS_OtherCertificateFormat::getCopy (ASN1T_CMS_OtherCertificateFormat* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_OtherCertificateFormat);
      new (pDstData) ASN1T_CMS_OtherCertificateFormat;
   }

   asn1Copy_CMS_OtherCertificateFormat (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_OtherCertificateFormat* ASN1C_CMS_OtherCertificateFormat::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_OtherCertificateFormat* pDstData = new ASN1T_CMS_OtherCertificateFormat;

   asn1Copy_CMS_OtherCertificateFormat (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_CertificateChoices (OSCTXT* pctxt, 
   ASN1T_CMS_CertificateChoices* pSrcValue, ASN1T_CMS_CertificateChoices*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* certificate */
      case 1:
         pDstValue->u.certificate = rtxMemAllocType (pctxt, ASN1T_EXP_Certificate);
         new (pDstValue->u.certificate) ASN1T_EXP_Certificate;
         asn1Copy_EXP_Certificate (pctxt, pSrcValue->u.certificate, pDstValue->u.certificate);
         break;

      /* extendedCertificate */
      case 2:
         pDstValue->u.extendedCertificate = rtxMemAllocType (pctxt, ASN1T_CMS_ExtendedCertificate);
         new (pDstValue->u.extendedCertificate) ASN1T_CMS_ExtendedCertificate;
         asn1Copy_CMS_ExtendedCertificate (pctxt, pSrcValue->u.extendedCertificate, pDstValue->u.extendedCertificate);
         break;

      /* v1AttrCert */
      case 3:
         pDstValue->u.v1AttrCert = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttributeCertificateV1);
         new (pDstValue->u.v1AttrCert) ASN1T_ATTRCERT_AttributeCertificateV1;
         asn1Copy_ATTRCERT_AttributeCertificateV1 (pctxt, pSrcValue->u.v1AttrCert, pDstValue->u.v1AttrCert);
         break;

      /* v2AttrCert */
      case 4:
         pDstValue->u.v2AttrCert = rtxMemAllocType (pctxt, ASN1T_CMS_AttributeCertificateV2);
         new (pDstValue->u.v2AttrCert) ASN1T_CMS_AttributeCertificateV2;
         asn1Copy_CMS_AttributeCertificateV2 (pctxt, pSrcValue->u.v2AttrCert, pDstValue->u.v2AttrCert);
         break;

      /* other */
      case 5:
         pDstValue->u.other = rtxMemAllocType (pctxt, ASN1T_CMS_OtherCertificateFormat);
         new (pDstValue->u.other) ASN1T_CMS_OtherCertificateFormat;
         asn1Copy_CMS_OtherCertificateFormat (pctxt, pSrcValue->u.other, pDstValue->u.other);
         break;

   }
}

ASN1C_CMS_CertificateChoices::ASN1C_CMS_CertificateChoices (ASN1C_CMS_CertificateChoices& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_CertificateChoices::ASN1T_CMS_CertificateChoices (ASN1C_CMS_CertificateChoices& original)
{
   original.getCopy (this);
}

ASN1T_CMS_CertificateChoices& ASN1C_CMS_CertificateChoices::getCopy (ASN1T_CMS_CertificateChoices* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_CertificateChoices);
      new (pDstData) ASN1T_CMS_CertificateChoices;
   }

   asn1Copy_CMS_CertificateChoices (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_CertificateChoices* ASN1C_CMS_CertificateChoices::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_CertificateChoices* pDstData = new ASN1T_CMS_CertificateChoices;

   asn1Copy_CMS_CertificateChoices (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_CertificateSet (OSCTXT* pctxt, 
   ASN1T_CMS_CertificateSet* pSrcValue, ASN1T_CMS_CertificateSet* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_CMS_CertificateChoices* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_CMS_CertificateChoices* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_CMS_CertificateChoices);
         pSrcData = (ASN1T_CMS_CertificateChoices*) pnode->data;

         asn1Copy_CMS_CertificateChoices (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_CertificateSet::ASN1C_CMS_CertificateSet (ASN1C_CMS_CertificateSet& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_CertificateSet*)pList)
{
}

ASN1C_CMS_CertificateSet& ASN1C_CMS_CertificateSet::operator= (ASN1C_CMS_CertificateSet& srcData)
{
   clear ();
   asn1Copy_CMS_CertificateSet (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_CertificateSet& ASN1C_CMS_CertificateSet::getCopy (ASN1T_CMS_CertificateSet* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_CertificateSet);
      new (pDstData) ASN1T_CMS_CertificateSet;
   }

   asn1Copy_CMS_CertificateSet (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_CertificateSet* ASN1C_CMS_CertificateSet::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_CertificateSet* pDstData = new ASN1T_CMS_CertificateSet;

   asn1Copy_CMS_CertificateSet (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_OtherRevocationInfoFormat (OSCTXT* pctxt, 
   ASN1T_CMS_OtherRevocationInfoFormat* pSrcValue, 
   ASN1T_CMS_OtherRevocationInfoFormat* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->otherRevInfoFormat, (ASN1OBJID*)&pDstValue->otherRevInfoFormat);

   rtCopyOpenType (pctxt, &pSrcValue->otherRevInfo, &pDstValue->otherRevInfo);

}

ASN1C_CMS_OtherRevocationInfoFormat::ASN1C_CMS_OtherRevocationInfoFormat (ASN1C_CMS_OtherRevocationInfoFormat& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_OtherRevocationInfoFormat::ASN1T_CMS_OtherRevocationInfoFormat (ASN1C_CMS_OtherRevocationInfoFormat& original)
{
   original.getCopy (this);
}

ASN1T_CMS_OtherRevocationInfoFormat& ASN1C_CMS_OtherRevocationInfoFormat::getCopy (ASN1T_CMS_OtherRevocationInfoFormat* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_OtherRevocationInfoFormat);
      new (pDstData) ASN1T_CMS_OtherRevocationInfoFormat;
   }

   asn1Copy_CMS_OtherRevocationInfoFormat (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_OtherRevocationInfoFormat* ASN1C_CMS_OtherRevocationInfoFormat::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_OtherRevocationInfoFormat* pDstData = new ASN1T_CMS_OtherRevocationInfoFormat;

   asn1Copy_CMS_OtherRevocationInfoFormat (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_RevocationInfoChoice (OSCTXT* pctxt, 
   ASN1T_CMS_RevocationInfoChoice* pSrcValue, ASN1T_CMS_RevocationInfoChoice*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* crl */
      case 1:
         pDstValue->u.crl = rtxMemAllocType (pctxt, ASN1T_EXP_CertificateList);
         new (pDstValue->u.crl) ASN1T_EXP_CertificateList;
         asn1Copy_EXP_CertificateList (pctxt, pSrcValue->u.crl, pDstValue->u.crl);
         break;

      /* other */
      case 2:
         pDstValue->u.other = rtxMemAllocType (pctxt, ASN1T_CMS_OtherRevocationInfoFormat);
         new (pDstValue->u.other) ASN1T_CMS_OtherRevocationInfoFormat;
         asn1Copy_CMS_OtherRevocationInfoFormat (pctxt, pSrcValue->u.other, pDstValue->u.other);
         break;

   }
}

ASN1C_CMS_RevocationInfoChoice::ASN1C_CMS_RevocationInfoChoice (ASN1C_CMS_RevocationInfoChoice& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_RevocationInfoChoice::ASN1T_CMS_RevocationInfoChoice (ASN1C_CMS_RevocationInfoChoice& original)
{
   original.getCopy (this);
}

ASN1T_CMS_RevocationInfoChoice& ASN1C_CMS_RevocationInfoChoice::getCopy (ASN1T_CMS_RevocationInfoChoice* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_RevocationInfoChoice);
      new (pDstData) ASN1T_CMS_RevocationInfoChoice;
   }

   asn1Copy_CMS_RevocationInfoChoice (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_RevocationInfoChoice* ASN1C_CMS_RevocationInfoChoice::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_RevocationInfoChoice* pDstData = new ASN1T_CMS_RevocationInfoChoice;

   asn1Copy_CMS_RevocationInfoChoice (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_RevocationInfoChoices (OSCTXT* pctxt, 
   ASN1T_CMS_RevocationInfoChoices* pSrcValue, ASN1T_CMS_RevocationInfoChoices*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_CMS_RevocationInfoChoice* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_CMS_RevocationInfoChoice* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_CMS_RevocationInfoChoice);
         pSrcData = (ASN1T_CMS_RevocationInfoChoice*) pnode->data;

         asn1Copy_CMS_RevocationInfoChoice (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_RevocationInfoChoices::ASN1C_CMS_RevocationInfoChoices (ASN1C_CMS_RevocationInfoChoices& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_RevocationInfoChoices*)pList)
{
}

ASN1C_CMS_RevocationInfoChoices& ASN1C_CMS_RevocationInfoChoices::operator= (ASN1C_CMS_RevocationInfoChoices& srcData)
{
   clear ();
   asn1Copy_CMS_RevocationInfoChoices (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_RevocationInfoChoices& ASN1C_CMS_RevocationInfoChoices::getCopy (ASN1T_CMS_RevocationInfoChoices* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_RevocationInfoChoices);
      new (pDstData) ASN1T_CMS_RevocationInfoChoices;
   }

   asn1Copy_CMS_RevocationInfoChoices (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_RevocationInfoChoices* ASN1C_CMS_RevocationInfoChoices::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_RevocationInfoChoices* pDstData = new ASN1T_CMS_RevocationInfoChoices;

   asn1Copy_CMS_RevocationInfoChoices (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_SignerInfos (OSCTXT* pctxt, 
   ASN1T_CMS_SignerInfos* pSrcValue, ASN1T_CMS_SignerInfos* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_CMS_SignerInfo* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_CMS_SignerInfo* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_CMS_SignerInfo);
         pSrcData = (ASN1T_CMS_SignerInfo*) pnode->data;

         asn1Copy_CMS_SignerInfo (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_SignerInfos::ASN1C_CMS_SignerInfos (ASN1C_CMS_SignerInfos& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_SignerInfos*)pList)
{
}

ASN1C_CMS_SignerInfos& ASN1C_CMS_SignerInfos::operator= (ASN1C_CMS_SignerInfos& srcData)
{
   clear ();
   asn1Copy_CMS_SignerInfos (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_SignerInfos& ASN1C_CMS_SignerInfos::getCopy (ASN1T_CMS_SignerInfos* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SignerInfos);
      new (pDstData) ASN1T_CMS_SignerInfos;
   }

   asn1Copy_CMS_SignerInfos (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_SignerInfos* ASN1C_CMS_SignerInfos::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SignerInfos* pDstData = new ASN1T_CMS_SignerInfos;

   asn1Copy_CMS_SignerInfos (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_SignedData (OSCTXT* pctxt, ASN1T_CMS_SignedData* pSrcValue, 
   ASN1T_CMS_SignedData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_PKCS7_DigestAlgorithmIdentifiers (pctxt, &pSrcValue->digestAlgorithms, &pDstValue->digestAlgorithms);

   asn1Copy_CMS_EncapsulatedContentInfo (pctxt, &pSrcValue->encapContentInfo, &pDstValue->encapContentInfo);

   if (pSrcValue->m.certificatesPresent) {
      asn1Copy_CMS_CertificateSet (pctxt, &pSrcValue->certificates, &pDstValue->certificates);
   }

   if (pSrcValue->m.crlsPresent) {
      asn1Copy_CMS_RevocationInfoChoices (pctxt, &pSrcValue->crls, &pDstValue->crls);
   }

   asn1Copy_CMS_SignerInfos (pctxt, &pSrcValue->signerInfos, &pDstValue->signerInfos);

}

ASN1C_CMS_SignedData::ASN1C_CMS_SignedData (ASN1C_CMS_SignedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_SignedData::ASN1T_CMS_SignedData (ASN1C_CMS_SignedData& original)
{
   original.getCopy (this);
}

ASN1T_CMS_SignedData& ASN1C_CMS_SignedData::getCopy (ASN1T_CMS_SignedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SignedData);
      new (pDstData) ASN1T_CMS_SignedData;
   }

   asn1Copy_CMS_SignedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_SignedData* ASN1C_CMS_SignedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SignedData* pDstData = new ASN1T_CMS_SignedData;

   asn1Copy_CMS_SignedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_OriginatorInfo (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorInfo* pSrcValue, ASN1T_CMS_OriginatorInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.certsPresent) {
      asn1Copy_CMS_CertificateSet (pctxt, &pSrcValue->certs, &pDstValue->certs);
   }

   if (pSrcValue->m.crlsPresent) {
      asn1Copy_CMS_RevocationInfoChoices (pctxt, &pSrcValue->crls, &pDstValue->crls);
   }

}

ASN1C_CMS_OriginatorInfo::ASN1C_CMS_OriginatorInfo (ASN1C_CMS_OriginatorInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_OriginatorInfo::ASN1T_CMS_OriginatorInfo (ASN1C_CMS_OriginatorInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_OriginatorInfo& ASN1C_CMS_OriginatorInfo::getCopy (ASN1T_CMS_OriginatorInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_OriginatorInfo);
      new (pDstData) ASN1T_CMS_OriginatorInfo;
   }

   asn1Copy_CMS_OriginatorInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_OriginatorInfo* ASN1C_CMS_OriginatorInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_OriginatorInfo* pDstData = new ASN1T_CMS_OriginatorInfo;

   asn1Copy_CMS_OriginatorInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_RecipientIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientIdentifier* pSrcValue, ASN1T_CMS_RecipientIdentifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         pDstValue->u.issuerAndSerialNumber = rtxMemAllocType (pctxt, ASN1T_PKCS7_IssuerAndSerialNumber);
         new (pDstValue->u.issuerAndSerialNumber) ASN1T_PKCS7_IssuerAndSerialNumber;
         asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, pSrcValue->u.issuerAndSerialNumber, pDstValue->u.issuerAndSerialNumber);
         break;

      /* subjectKeyIdentifier */
      case 2:
         pDstValue->u.subjectKeyIdentifier = rtxMemAllocType (pctxt, ASN1T_CMS_SubjectKeyIdentifier);
         new (pDstValue->u.subjectKeyIdentifier) ASN1T_CMS_SubjectKeyIdentifier;
         asn1Copy_CMS_SubjectKeyIdentifier (pctxt, pSrcValue->u.subjectKeyIdentifier, pDstValue->u.subjectKeyIdentifier);
         break;

   }
}

ASN1C_CMS_RecipientIdentifier::ASN1C_CMS_RecipientIdentifier (ASN1C_CMS_RecipientIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_RecipientIdentifier::ASN1T_CMS_RecipientIdentifier (ASN1C_CMS_RecipientIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_CMS_RecipientIdentifier& ASN1C_CMS_RecipientIdentifier::getCopy (ASN1T_CMS_RecipientIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_RecipientIdentifier);
      new (pDstData) ASN1T_CMS_RecipientIdentifier;
   }

   asn1Copy_CMS_RecipientIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_RecipientIdentifier* ASN1C_CMS_RecipientIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_RecipientIdentifier* pDstData = new ASN1T_CMS_RecipientIdentifier;

   asn1Copy_CMS_RecipientIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_KeyTransRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KeyTransRecipientInfo* pSrcValue, ASN1T_CMS_KeyTransRecipientInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->version = pSrcValue->version;

   asn1Copy_CMS_RecipientIdentifier (pctxt, &pSrcValue->rid, &pDstValue->rid);

   asn1Copy_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &pSrcValue->keyEncryptionAlgorithm, &pDstValue->keyEncryptionAlgorithm);

   asn1Copy_CMS_EncryptedKey (pctxt, &pSrcValue->encryptedKey, &pDstValue->encryptedKey);

}

ASN1C_CMS_KeyTransRecipientInfo::ASN1C_CMS_KeyTransRecipientInfo (ASN1C_CMS_KeyTransRecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_KeyTransRecipientInfo::ASN1T_CMS_KeyTransRecipientInfo (ASN1C_CMS_KeyTransRecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_KeyTransRecipientInfo& ASN1C_CMS_KeyTransRecipientInfo::getCopy (ASN1T_CMS_KeyTransRecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_KeyTransRecipientInfo);
      new (pDstData) ASN1T_CMS_KeyTransRecipientInfo;
   }

   asn1Copy_CMS_KeyTransRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_KeyTransRecipientInfo* ASN1C_CMS_KeyTransRecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_KeyTransRecipientInfo* pDstData = new ASN1T_CMS_KeyTransRecipientInfo;

   asn1Copy_CMS_KeyTransRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_OriginatorPublicKey (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorPublicKey* pSrcValue, ASN1T_CMS_OriginatorPublicKey*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->algorithm, &pDstValue->algorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->publicKey, &pDstValue->publicKey);

}

ASN1C_CMS_OriginatorPublicKey::ASN1C_CMS_OriginatorPublicKey (ASN1C_CMS_OriginatorPublicKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_OriginatorPublicKey::ASN1T_CMS_OriginatorPublicKey (ASN1C_CMS_OriginatorPublicKey& original)
{
   original.getCopy (this);
}

ASN1T_CMS_OriginatorPublicKey& ASN1C_CMS_OriginatorPublicKey::getCopy (ASN1T_CMS_OriginatorPublicKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_OriginatorPublicKey);
      new (pDstData) ASN1T_CMS_OriginatorPublicKey;
   }

   asn1Copy_CMS_OriginatorPublicKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_OriginatorPublicKey* ASN1C_CMS_OriginatorPublicKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_OriginatorPublicKey* pDstData = new ASN1T_CMS_OriginatorPublicKey;

   asn1Copy_CMS_OriginatorPublicKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_OriginatorIdentifierOrKey (OSCTXT* pctxt, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pSrcValue, 
   ASN1T_CMS_OriginatorIdentifierOrKey* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         pDstValue->u.issuerAndSerialNumber = rtxMemAllocType (pctxt, ASN1T_PKCS7_IssuerAndSerialNumber);
         new (pDstValue->u.issuerAndSerialNumber) ASN1T_PKCS7_IssuerAndSerialNumber;
         asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, pSrcValue->u.issuerAndSerialNumber, pDstValue->u.issuerAndSerialNumber);
         break;

      /* subjectKeyIdentifier */
      case 2:
         pDstValue->u.subjectKeyIdentifier = rtxMemAllocType (pctxt, ASN1T_CMS_SubjectKeyIdentifier);
         new (pDstValue->u.subjectKeyIdentifier) ASN1T_CMS_SubjectKeyIdentifier;
         asn1Copy_CMS_SubjectKeyIdentifier (pctxt, pSrcValue->u.subjectKeyIdentifier, pDstValue->u.subjectKeyIdentifier);
         break;

      /* originatorKey */
      case 3:
         pDstValue->u.originatorKey = rtxMemAllocType (pctxt, ASN1T_CMS_OriginatorPublicKey);
         new (pDstValue->u.originatorKey) ASN1T_CMS_OriginatorPublicKey;
         asn1Copy_CMS_OriginatorPublicKey (pctxt, pSrcValue->u.originatorKey, pDstValue->u.originatorKey);
         break;

   }
}

ASN1C_CMS_OriginatorIdentifierOrKey::ASN1C_CMS_OriginatorIdentifierOrKey (ASN1C_CMS_OriginatorIdentifierOrKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_OriginatorIdentifierOrKey::ASN1T_CMS_OriginatorIdentifierOrKey (ASN1C_CMS_OriginatorIdentifierOrKey& original)
{
   original.getCopy (this);
}

ASN1T_CMS_OriginatorIdentifierOrKey& ASN1C_CMS_OriginatorIdentifierOrKey::getCopy (ASN1T_CMS_OriginatorIdentifierOrKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_OriginatorIdentifierOrKey);
      new (pDstData) ASN1T_CMS_OriginatorIdentifierOrKey;
   }

   asn1Copy_CMS_OriginatorIdentifierOrKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_OriginatorIdentifierOrKey* ASN1C_CMS_OriginatorIdentifierOrKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_OriginatorIdentifierOrKey* pDstData = new ASN1T_CMS_OriginatorIdentifierOrKey;

   asn1Copy_CMS_OriginatorIdentifierOrKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_OtherKeyAttribute (OSCTXT* pctxt, 
   ASN1T_CMS_OtherKeyAttribute* pSrcValue, ASN1T_CMS_OtherKeyAttribute*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   rtCopyOID ((ASN1OBJID*)&pSrcValue->keyAttrId, (ASN1OBJID*)&pDstValue->keyAttrId);

   if (pSrcValue->m.keyAttrPresent) {
      rtCopyOpenType (pctxt, &pSrcValue->keyAttr, &pDstValue->keyAttr);
   }

}

ASN1C_CMS_OtherKeyAttribute::ASN1C_CMS_OtherKeyAttribute (ASN1C_CMS_OtherKeyAttribute& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_OtherKeyAttribute::ASN1T_CMS_OtherKeyAttribute (ASN1C_CMS_OtherKeyAttribute& original)
{
   original.getCopy (this);
}

ASN1T_CMS_OtherKeyAttribute& ASN1C_CMS_OtherKeyAttribute::getCopy (ASN1T_CMS_OtherKeyAttribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_OtherKeyAttribute);
      new (pDstData) ASN1T_CMS_OtherKeyAttribute;
   }

   asn1Copy_CMS_OtherKeyAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_OtherKeyAttribute* ASN1C_CMS_OtherKeyAttribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_OtherKeyAttribute* pDstData = new ASN1T_CMS_OtherKeyAttribute;

   asn1Copy_CMS_OtherKeyAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_RecipientKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientKeyIdentifier* pSrcValue, 
   ASN1T_CMS_RecipientKeyIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_CMS_SubjectKeyIdentifier (pctxt, &pSrcValue->subjectKeyIdentifier, &pDstValue->subjectKeyIdentifier);

   if (pSrcValue->m.datePresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->date, (char **)&pDstValue->date);
   }

   if (pSrcValue->m.otherPresent) {
      asn1Copy_CMS_OtherKeyAttribute (pctxt, &pSrcValue->other, &pDstValue->other);
   }

}

ASN1C_CMS_RecipientKeyIdentifier::ASN1C_CMS_RecipientKeyIdentifier (ASN1C_CMS_RecipientKeyIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_RecipientKeyIdentifier::ASN1T_CMS_RecipientKeyIdentifier (ASN1C_CMS_RecipientKeyIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_CMS_RecipientKeyIdentifier& ASN1C_CMS_RecipientKeyIdentifier::getCopy (ASN1T_CMS_RecipientKeyIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_RecipientKeyIdentifier);
      new (pDstData) ASN1T_CMS_RecipientKeyIdentifier;
   }

   asn1Copy_CMS_RecipientKeyIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_RecipientKeyIdentifier* ASN1C_CMS_RecipientKeyIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_RecipientKeyIdentifier* pDstData = new ASN1T_CMS_RecipientKeyIdentifier;

   asn1Copy_CMS_RecipientKeyIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_KeyAgreeRecipientIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pSrcValue, 
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         pDstValue->u.issuerAndSerialNumber = rtxMemAllocType (pctxt, ASN1T_PKCS7_IssuerAndSerialNumber);
         new (pDstValue->u.issuerAndSerialNumber) ASN1T_PKCS7_IssuerAndSerialNumber;
         asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, pSrcValue->u.issuerAndSerialNumber, pDstValue->u.issuerAndSerialNumber);
         break;

      /* rKeyId */
      case 2:
         pDstValue->u.rKeyId = rtxMemAllocType (pctxt, ASN1T_CMS_RecipientKeyIdentifier);
         new (pDstValue->u.rKeyId) ASN1T_CMS_RecipientKeyIdentifier;
         asn1Copy_CMS_RecipientKeyIdentifier (pctxt, pSrcValue->u.rKeyId, pDstValue->u.rKeyId);
         break;

   }
}

ASN1C_CMS_KeyAgreeRecipientIdentifier::ASN1C_CMS_KeyAgreeRecipientIdentifier (ASN1C_CMS_KeyAgreeRecipientIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_KeyAgreeRecipientIdentifier::ASN1T_CMS_KeyAgreeRecipientIdentifier (ASN1C_CMS_KeyAgreeRecipientIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_CMS_KeyAgreeRecipientIdentifier& ASN1C_CMS_KeyAgreeRecipientIdentifier::getCopy (ASN1T_CMS_KeyAgreeRecipientIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_KeyAgreeRecipientIdentifier);
      new (pDstData) ASN1T_CMS_KeyAgreeRecipientIdentifier;
   }

   asn1Copy_CMS_KeyAgreeRecipientIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_KeyAgreeRecipientIdentifier* ASN1C_CMS_KeyAgreeRecipientIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_KeyAgreeRecipientIdentifier* pDstData = new ASN1T_CMS_KeyAgreeRecipientIdentifier;

   asn1Copy_CMS_KeyAgreeRecipientIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_RecipientEncryptedKey (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientEncryptedKey* pSrcValue, ASN1T_CMS_RecipientEncryptedKey*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_CMS_KeyAgreeRecipientIdentifier (pctxt, &pSrcValue->rid, &pDstValue->rid);

   asn1Copy_CMS_EncryptedKey (pctxt, &pSrcValue->encryptedKey, &pDstValue->encryptedKey);

}

ASN1C_CMS_RecipientEncryptedKey::ASN1C_CMS_RecipientEncryptedKey (ASN1C_CMS_RecipientEncryptedKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_RecipientEncryptedKey::ASN1T_CMS_RecipientEncryptedKey (ASN1C_CMS_RecipientEncryptedKey& original)
{
   original.getCopy (this);
}

ASN1T_CMS_RecipientEncryptedKey& ASN1C_CMS_RecipientEncryptedKey::getCopy (ASN1T_CMS_RecipientEncryptedKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_RecipientEncryptedKey);
      new (pDstData) ASN1T_CMS_RecipientEncryptedKey;
   }

   asn1Copy_CMS_RecipientEncryptedKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_RecipientEncryptedKey* ASN1C_CMS_RecipientEncryptedKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_RecipientEncryptedKey* pDstData = new ASN1T_CMS_RecipientEncryptedKey;

   asn1Copy_CMS_RecipientEncryptedKey (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_RecipientEncryptedKeys (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientEncryptedKeys* pSrcValue, 
   ASN1T_CMS_RecipientEncryptedKeys* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_CMS_RecipientEncryptedKey* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_CMS_RecipientEncryptedKey* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_CMS_RecipientEncryptedKey);
         pSrcData = (ASN1T_CMS_RecipientEncryptedKey*) pnode->data;

         asn1Copy_CMS_RecipientEncryptedKey (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_RecipientEncryptedKeys::ASN1C_CMS_RecipientEncryptedKeys (ASN1C_CMS_RecipientEncryptedKeys& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_RecipientEncryptedKeys*)pList)
{
}

ASN1C_CMS_RecipientEncryptedKeys& ASN1C_CMS_RecipientEncryptedKeys::operator= (ASN1C_CMS_RecipientEncryptedKeys& srcData)
{
   clear ();
   asn1Copy_CMS_RecipientEncryptedKeys (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_RecipientEncryptedKeys& ASN1C_CMS_RecipientEncryptedKeys::getCopy (ASN1T_CMS_RecipientEncryptedKeys* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_RecipientEncryptedKeys);
      new (pDstData) ASN1T_CMS_RecipientEncryptedKeys;
   }

   asn1Copy_CMS_RecipientEncryptedKeys (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_RecipientEncryptedKeys* ASN1C_CMS_RecipientEncryptedKeys::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_RecipientEncryptedKeys* pDstData = new ASN1T_CMS_RecipientEncryptedKeys;

   asn1Copy_CMS_RecipientEncryptedKeys (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_KeyAgreeRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KeyAgreeRecipientInfo* pSrcValue, ASN1T_CMS_KeyAgreeRecipientInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_CMS_OriginatorIdentifierOrKey (pctxt, &pSrcValue->originator, &pDstValue->originator);

   if (pSrcValue->m.ukmPresent) {
      asn1Copy_CMS_UserKeyingMaterial (pctxt, &pSrcValue->ukm, &pDstValue->ukm);
   }

   asn1Copy_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &pSrcValue->keyEncryptionAlgorithm, &pDstValue->keyEncryptionAlgorithm);

   asn1Copy_CMS_RecipientEncryptedKeys (pctxt, &pSrcValue->recipientEncryptedKeys, &pDstValue->recipientEncryptedKeys);

}

ASN1C_CMS_KeyAgreeRecipientInfo::ASN1C_CMS_KeyAgreeRecipientInfo (ASN1C_CMS_KeyAgreeRecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_KeyAgreeRecipientInfo::ASN1T_CMS_KeyAgreeRecipientInfo (ASN1C_CMS_KeyAgreeRecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_KeyAgreeRecipientInfo& ASN1C_CMS_KeyAgreeRecipientInfo::getCopy (ASN1T_CMS_KeyAgreeRecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_KeyAgreeRecipientInfo);
      new (pDstData) ASN1T_CMS_KeyAgreeRecipientInfo;
   }

   asn1Copy_CMS_KeyAgreeRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_KeyAgreeRecipientInfo* ASN1C_CMS_KeyAgreeRecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_KeyAgreeRecipientInfo* pDstData = new ASN1T_CMS_KeyAgreeRecipientInfo;

   asn1Copy_CMS_KeyAgreeRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_KEKIdentifier (OSCTXT* pctxt, 
   ASN1T_CMS_KEKIdentifier* pSrcValue, ASN1T_CMS_KEKIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   rtCopyDynOctStr (pctxt, &pSrcValue->keyIdentifier, &pDstValue->keyIdentifier
      );

   if (pSrcValue->m.datePresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->date, (char **)&pDstValue->date);
   }

   if (pSrcValue->m.otherPresent) {
      asn1Copy_CMS_OtherKeyAttribute (pctxt, &pSrcValue->other, &pDstValue->other);
   }

}

ASN1C_CMS_KEKIdentifier::ASN1C_CMS_KEKIdentifier (ASN1C_CMS_KEKIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_KEKIdentifier::ASN1T_CMS_KEKIdentifier (ASN1C_CMS_KEKIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_CMS_KEKIdentifier& ASN1C_CMS_KEKIdentifier::getCopy (ASN1T_CMS_KEKIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_KEKIdentifier);
      new (pDstData) ASN1T_CMS_KEKIdentifier;
   }

   asn1Copy_CMS_KEKIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_KEKIdentifier* ASN1C_CMS_KEKIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_KEKIdentifier* pDstData = new ASN1T_CMS_KEKIdentifier;

   asn1Copy_CMS_KEKIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_KEKRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_KEKRecipientInfo* pSrcValue, ASN1T_CMS_KEKRecipientInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->version = pSrcValue->version;

   asn1Copy_CMS_KEKIdentifier (pctxt, &pSrcValue->kekid, &pDstValue->kekid);

   asn1Copy_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &pSrcValue->keyEncryptionAlgorithm, &pDstValue->keyEncryptionAlgorithm);

   asn1Copy_CMS_EncryptedKey (pctxt, &pSrcValue->encryptedKey, &pDstValue->encryptedKey);

}

ASN1C_CMS_KEKRecipientInfo::ASN1C_CMS_KEKRecipientInfo (ASN1C_CMS_KEKRecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_KEKRecipientInfo::ASN1T_CMS_KEKRecipientInfo (ASN1C_CMS_KEKRecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_KEKRecipientInfo& ASN1C_CMS_KEKRecipientInfo::getCopy (ASN1T_CMS_KEKRecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_KEKRecipientInfo);
      new (pDstData) ASN1T_CMS_KEKRecipientInfo;
   }

   asn1Copy_CMS_KEKRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_KEKRecipientInfo* ASN1C_CMS_KEKRecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_KEKRecipientInfo* pDstData = new ASN1T_CMS_KEKRecipientInfo;

   asn1Copy_CMS_KEKRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_PasswordRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_PasswordRecipientInfo* pSrcValue, ASN1T_CMS_PasswordRecipientInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   if (pSrcValue->m.keyDerivationAlgorithmPresent) {
      asn1Copy_CMS_KeyDerivationAlgorithmIdentifier (pctxt, &pSrcValue->keyDerivationAlgorithm, &pDstValue->keyDerivationAlgorithm);
   }

   asn1Copy_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &pSrcValue->keyEncryptionAlgorithm, &pDstValue->keyEncryptionAlgorithm);

   asn1Copy_CMS_EncryptedKey (pctxt, &pSrcValue->encryptedKey, &pDstValue->encryptedKey);

}

ASN1C_CMS_PasswordRecipientInfo::ASN1C_CMS_PasswordRecipientInfo (ASN1C_CMS_PasswordRecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_PasswordRecipientInfo::ASN1T_CMS_PasswordRecipientInfo (ASN1C_CMS_PasswordRecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_PasswordRecipientInfo& ASN1C_CMS_PasswordRecipientInfo::getCopy (ASN1T_CMS_PasswordRecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_PasswordRecipientInfo);
      new (pDstData) ASN1T_CMS_PasswordRecipientInfo;
   }

   asn1Copy_CMS_PasswordRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_PasswordRecipientInfo* ASN1C_CMS_PasswordRecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_PasswordRecipientInfo* pDstData = new ASN1T_CMS_PasswordRecipientInfo;

   asn1Copy_CMS_PasswordRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_OtherRecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_OtherRecipientInfo* pSrcValue, ASN1T_CMS_OtherRecipientInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->oriType, (ASN1OBJID*)&pDstValue->oriType);

   rtCopyOpenType (pctxt, &pSrcValue->oriValue, &pDstValue->oriValue);

}

ASN1C_CMS_OtherRecipientInfo::ASN1C_CMS_OtherRecipientInfo (ASN1C_CMS_OtherRecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_OtherRecipientInfo::ASN1T_CMS_OtherRecipientInfo (ASN1C_CMS_OtherRecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_OtherRecipientInfo& ASN1C_CMS_OtherRecipientInfo::getCopy (ASN1T_CMS_OtherRecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_OtherRecipientInfo);
      new (pDstData) ASN1T_CMS_OtherRecipientInfo;
   }

   asn1Copy_CMS_OtherRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_OtherRecipientInfo* ASN1C_CMS_OtherRecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_OtherRecipientInfo* pDstData = new ASN1T_CMS_OtherRecipientInfo;

   asn1Copy_CMS_OtherRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_RecipientInfo (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientInfo* pSrcValue, ASN1T_CMS_RecipientInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* ktri */
      case 1:
         pDstValue->u.ktri = rtxMemAllocType (pctxt, ASN1T_CMS_KeyTransRecipientInfo);
         new (pDstValue->u.ktri) ASN1T_CMS_KeyTransRecipientInfo;
         asn1Copy_CMS_KeyTransRecipientInfo (pctxt, pSrcValue->u.ktri, pDstValue->u.ktri);
         break;

      /* kari */
      case 2:
         pDstValue->u.kari = rtxMemAllocType (pctxt, ASN1T_CMS_KeyAgreeRecipientInfo);
         new (pDstValue->u.kari) ASN1T_CMS_KeyAgreeRecipientInfo;
         asn1Copy_CMS_KeyAgreeRecipientInfo (pctxt, pSrcValue->u.kari, pDstValue->u.kari);
         break;

      /* kekri */
      case 3:
         pDstValue->u.kekri = rtxMemAllocType (pctxt, ASN1T_CMS_KEKRecipientInfo);
         new (pDstValue->u.kekri) ASN1T_CMS_KEKRecipientInfo;
         asn1Copy_CMS_KEKRecipientInfo (pctxt, pSrcValue->u.kekri, pDstValue->u.kekri);
         break;

      /* pwri */
      case 4:
         pDstValue->u.pwri = rtxMemAllocType (pctxt, ASN1T_CMS_PasswordRecipientInfo);
         new (pDstValue->u.pwri) ASN1T_CMS_PasswordRecipientInfo;
         asn1Copy_CMS_PasswordRecipientInfo (pctxt, pSrcValue->u.pwri, pDstValue->u.pwri);
         break;

      /* ori */
      case 5:
         pDstValue->u.ori = rtxMemAllocType (pctxt, ASN1T_CMS_OtherRecipientInfo);
         new (pDstValue->u.ori) ASN1T_CMS_OtherRecipientInfo;
         asn1Copy_CMS_OtherRecipientInfo (pctxt, pSrcValue->u.ori, pDstValue->u.ori);
         break;

   }
}

ASN1C_CMS_RecipientInfo::ASN1C_CMS_RecipientInfo (ASN1C_CMS_RecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_RecipientInfo::ASN1T_CMS_RecipientInfo (ASN1C_CMS_RecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_CMS_RecipientInfo& ASN1C_CMS_RecipientInfo::getCopy (ASN1T_CMS_RecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_RecipientInfo);
      new (pDstData) ASN1T_CMS_RecipientInfo;
   }

   asn1Copy_CMS_RecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_RecipientInfo* ASN1C_CMS_RecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_RecipientInfo* pDstData = new ASN1T_CMS_RecipientInfo;

   asn1Copy_CMS_RecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_RecipientInfos (OSCTXT* pctxt, 
   ASN1T_CMS_RecipientInfos* pSrcValue, ASN1T_CMS_RecipientInfos* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_CMS_RecipientInfo* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_CMS_RecipientInfo* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_CMS_RecipientInfo);
         pSrcData = (ASN1T_CMS_RecipientInfo*) pnode->data;

         asn1Copy_CMS_RecipientInfo (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_RecipientInfos::ASN1C_CMS_RecipientInfos (ASN1C_CMS_RecipientInfos& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_RecipientInfos*)pList)
{
}

ASN1C_CMS_RecipientInfos& ASN1C_CMS_RecipientInfos::operator= (ASN1C_CMS_RecipientInfos& srcData)
{
   clear ();
   asn1Copy_CMS_RecipientInfos (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_RecipientInfos& ASN1C_CMS_RecipientInfos::getCopy (ASN1T_CMS_RecipientInfos* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_RecipientInfos);
      new (pDstData) ASN1T_CMS_RecipientInfos;
   }

   asn1Copy_CMS_RecipientInfos (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_RecipientInfos* ASN1C_CMS_RecipientInfos::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_RecipientInfos* pDstData = new ASN1T_CMS_RecipientInfos;

   asn1Copy_CMS_RecipientInfos (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_UnprotectedAttributes (OSCTXT* pctxt, 
   ASN1T_CMS_UnprotectedAttributes* pSrcValue, ASN1T_CMS_UnprotectedAttributes*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Attribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Attribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Attribute);
         pSrcData = (ASN1T_EXP_Attribute*) pnode->data;

         asn1Copy_EXP_Attribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_UnprotectedAttributes::ASN1C_CMS_UnprotectedAttributes (ASN1C_CMS_UnprotectedAttributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_UnprotectedAttributes*)pList)
{
}

ASN1C_CMS_UnprotectedAttributes& ASN1C_CMS_UnprotectedAttributes::operator= (ASN1C_CMS_UnprotectedAttributes& srcData)
{
   clear ();
   asn1Copy_CMS_UnprotectedAttributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_UnprotectedAttributes& ASN1C_CMS_UnprotectedAttributes::getCopy (ASN1T_CMS_UnprotectedAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_UnprotectedAttributes);
      new (pDstData) ASN1T_CMS_UnprotectedAttributes;
   }

   asn1Copy_CMS_UnprotectedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_UnprotectedAttributes* ASN1C_CMS_UnprotectedAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_UnprotectedAttributes* pDstData = new ASN1T_CMS_UnprotectedAttributes;

   asn1Copy_CMS_UnprotectedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_EnvelopedData (OSCTXT* pctxt, 
   ASN1T_CMS_EnvelopedData* pSrcValue, ASN1T_CMS_EnvelopedData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   if (pSrcValue->m.originatorInfoPresent) {
      asn1Copy_CMS_OriginatorInfo (pctxt, &pSrcValue->originatorInfo, &pDstValue->originatorInfo);
   }

   asn1Copy_CMS_RecipientInfos (pctxt, &pSrcValue->recipientInfos, &pDstValue->recipientInfos);

   asn1Copy_PKCS7_EncryptedContentInfo (pctxt, &pSrcValue->encryptedContentInfo, &pDstValue->encryptedContentInfo);

   if (pSrcValue->m.unprotectedAttrsPresent) {
      asn1Copy_CMS_UnprotectedAttributes (pctxt, &pSrcValue->unprotectedAttrs, &pDstValue->unprotectedAttrs);
   }

}

ASN1C_CMS_EnvelopedData::ASN1C_CMS_EnvelopedData (ASN1C_CMS_EnvelopedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_EnvelopedData::ASN1T_CMS_EnvelopedData (ASN1C_CMS_EnvelopedData& original)
{
   original.getCopy (this);
}

ASN1T_CMS_EnvelopedData& ASN1C_CMS_EnvelopedData::getCopy (ASN1T_CMS_EnvelopedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_EnvelopedData);
      new (pDstData) ASN1T_CMS_EnvelopedData;
   }

   asn1Copy_CMS_EnvelopedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_EnvelopedData* ASN1C_CMS_EnvelopedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_EnvelopedData* pDstData = new ASN1T_CMS_EnvelopedData;

   asn1Copy_CMS_EnvelopedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_DigestedData (OSCTXT* pctxt, 
   ASN1T_CMS_DigestedData* pSrcValue, ASN1T_CMS_DigestedData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->version = pSrcValue->version;

   asn1Copy_CMS_DigestAlgorithmIdentifier (pctxt, &pSrcValue->digestAlgorithm, &pDstValue->digestAlgorithm);

   asn1Copy_CMS_EncapsulatedContentInfo (pctxt, &pSrcValue->encapContentInfo, &pDstValue->encapContentInfo);

   asn1Copy_CMS_Digest (pctxt, &pSrcValue->digest, &pDstValue->digest);

}

ASN1C_CMS_DigestedData::ASN1C_CMS_DigestedData (ASN1C_CMS_DigestedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_DigestedData::ASN1T_CMS_DigestedData (ASN1C_CMS_DigestedData& original)
{
   original.getCopy (this);
}

ASN1T_CMS_DigestedData& ASN1C_CMS_DigestedData::getCopy (ASN1T_CMS_DigestedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_DigestedData);
      new (pDstData) ASN1T_CMS_DigestedData;
   }

   asn1Copy_CMS_DigestedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_DigestedData* ASN1C_CMS_DigestedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_DigestedData* pDstData = new ASN1T_CMS_DigestedData;

   asn1Copy_CMS_DigestedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_EncryptedData (OSCTXT* pctxt, 
   ASN1T_CMS_EncryptedData* pSrcValue, ASN1T_CMS_EncryptedData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_PKCS7_EncryptedContentInfo (pctxt, &pSrcValue->encryptedContentInfo, &pDstValue->encryptedContentInfo);

   if (pSrcValue->m.unprotectedAttrsPresent) {
      asn1Copy_CMS_UnprotectedAttributes (pctxt, &pSrcValue->unprotectedAttrs, &pDstValue->unprotectedAttrs);
   }

}

ASN1C_CMS_EncryptedData::ASN1C_CMS_EncryptedData (ASN1C_CMS_EncryptedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_EncryptedData::ASN1T_CMS_EncryptedData (ASN1C_CMS_EncryptedData& original)
{
   original.getCopy (this);
}

ASN1T_CMS_EncryptedData& ASN1C_CMS_EncryptedData::getCopy (ASN1T_CMS_EncryptedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_EncryptedData);
      new (pDstData) ASN1T_CMS_EncryptedData;
   }

   asn1Copy_CMS_EncryptedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_EncryptedData* ASN1C_CMS_EncryptedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_EncryptedData* pDstData = new ASN1T_CMS_EncryptedData;

   asn1Copy_CMS_EncryptedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_AuthenticatedData (OSCTXT* pctxt, 
   ASN1T_CMS_AuthenticatedData* pSrcValue, ASN1T_CMS_AuthenticatedData*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   if (pSrcValue->m.originatorInfoPresent) {
      asn1Copy_CMS_OriginatorInfo (pctxt, &pSrcValue->originatorInfo, &pDstValue->originatorInfo);
   }

   asn1Copy_CMS_RecipientInfos (pctxt, &pSrcValue->recipientInfos, &pDstValue->recipientInfos);

   asn1Copy_CMS_MessageAuthenticationCodeAlgorithm (pctxt, &pSrcValue->macAlgorithm, &pDstValue->macAlgorithm);

   if (pSrcValue->m.digestAlgorithmPresent) {
      asn1Copy_CMS_DigestAlgorithmIdentifier (pctxt, &pSrcValue->digestAlgorithm, &pDstValue->digestAlgorithm);
   }

   asn1Copy_CMS_EncapsulatedContentInfo (pctxt, &pSrcValue->encapContentInfo, &pDstValue->encapContentInfo);

   if (pSrcValue->m.authAttrsPresent) {
      asn1Copy_DERCMS_AuthAttributes (pctxt, &pSrcValue->authAttrs, &pDstValue->authAttrs);
   }

   asn1Copy_CMS_MessageAuthenticationCode (pctxt, &pSrcValue->mac, &pDstValue->mac);

   if (pSrcValue->m.unauthAttrsPresent) {
      asn1Copy_CMS_UnauthAttributes (pctxt, &pSrcValue->unauthAttrs, &pDstValue->unauthAttrs);
   }

}

ASN1C_CMS_AuthenticatedData::ASN1C_CMS_AuthenticatedData (ASN1C_CMS_AuthenticatedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_AuthenticatedData::ASN1T_CMS_AuthenticatedData (ASN1C_CMS_AuthenticatedData& original)
{
   original.getCopy (this);
}

ASN1T_CMS_AuthenticatedData& ASN1C_CMS_AuthenticatedData::getCopy (ASN1T_CMS_AuthenticatedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_AuthenticatedData);
      new (pDstData) ASN1T_CMS_AuthenticatedData;
   }

   asn1Copy_CMS_AuthenticatedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_AuthenticatedData* ASN1C_CMS_AuthenticatedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_AuthenticatedData* pDstData = new ASN1T_CMS_AuthenticatedData;

   asn1Copy_CMS_AuthenticatedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_ExtendedCertificateOrCertificate (OSCTXT* pctxt, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pSrcValue, 
   ASN1T_CMS_ExtendedCertificateOrCertificate* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* certificate */
      case 1:
         pDstValue->u.certificate = rtxMemAllocType (pctxt, ASN1T_EXP_Certificate);
         new (pDstValue->u.certificate) ASN1T_EXP_Certificate;
         asn1Copy_EXP_Certificate (pctxt, pSrcValue->u.certificate, pDstValue->u.certificate);
         break;

      /* extendedCertificate */
      case 2:
         pDstValue->u.extendedCertificate = rtxMemAllocType (pctxt, ASN1T_CMS_ExtendedCertificate);
         new (pDstValue->u.extendedCertificate) ASN1T_CMS_ExtendedCertificate;
         asn1Copy_CMS_ExtendedCertificate (pctxt, pSrcValue->u.extendedCertificate, pDstValue->u.extendedCertificate);
         break;

   }
}

ASN1C_CMS_ExtendedCertificateOrCertificate::ASN1C_CMS_ExtendedCertificateOrCertificate (ASN1C_CMS_ExtendedCertificateOrCertificate& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_ExtendedCertificateOrCertificate::ASN1T_CMS_ExtendedCertificateOrCertificate (ASN1C_CMS_ExtendedCertificateOrCertificate& original)
{
   original.getCopy (this);
}

ASN1T_CMS_ExtendedCertificateOrCertificate& ASN1C_CMS_ExtendedCertificateOrCertificate::getCopy (ASN1T_CMS_ExtendedCertificateOrCertificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_ExtendedCertificateOrCertificate);
      new (pDstData) ASN1T_CMS_ExtendedCertificateOrCertificate;
   }

   asn1Copy_CMS_ExtendedCertificateOrCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_ExtendedCertificateOrCertificate* ASN1C_CMS_ExtendedCertificateOrCertificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_ExtendedCertificateOrCertificate* pDstData = new ASN1T_CMS_ExtendedCertificateOrCertificate;

   asn1Copy_CMS_ExtendedCertificateOrCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_SMIMECapability (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMECapability* pSrcValue, ASN1T_CMS_SMIMECapability* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   rtCopyOID ((ASN1OBJID*)&pSrcValue->capabilityID, (ASN1OBJID*)&pDstValue->capabilityID);

   if (pSrcValue->m.parametersPresent) {
      rtCopyOpenType (pctxt, &pSrcValue->parameters, &pDstValue->parameters);
   }

}

ASN1C_CMS_SMIMECapability::ASN1C_CMS_SMIMECapability (ASN1C_CMS_SMIMECapability& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_SMIMECapability::ASN1T_CMS_SMIMECapability (ASN1C_CMS_SMIMECapability& original)
{
   original.getCopy (this);
}

ASN1T_CMS_SMIMECapability& ASN1C_CMS_SMIMECapability::getCopy (ASN1T_CMS_SMIMECapability* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SMIMECapability);
      new (pDstData) ASN1T_CMS_SMIMECapability;
   }

   asn1Copy_CMS_SMIMECapability (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_SMIMECapability* ASN1C_CMS_SMIMECapability::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SMIMECapability* pDstData = new ASN1T_CMS_SMIMECapability;

   asn1Copy_CMS_SMIMECapability (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_SMIMECapabilities (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMECapabilities* pSrcValue, ASN1T_CMS_SMIMECapabilities*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_CMS_SMIMECapability* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_CMS_SMIMECapability* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_CMS_SMIMECapability);
         pSrcData = (ASN1T_CMS_SMIMECapability*) pnode->data;

         asn1Copy_CMS_SMIMECapability (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_CMS_SMIMECapabilities::ASN1C_CMS_SMIMECapabilities (ASN1C_CMS_SMIMECapabilities& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_CMS_SMIMECapabilities*)pList)
{
}

ASN1C_CMS_SMIMECapabilities& ASN1C_CMS_SMIMECapabilities::operator= (ASN1C_CMS_SMIMECapabilities& srcData)
{
   clear ();
   asn1Copy_CMS_SMIMECapabilities (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_CMS_SMIMECapabilities& ASN1C_CMS_SMIMECapabilities::getCopy (ASN1T_CMS_SMIMECapabilities* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SMIMECapabilities);
      new (pDstData) ASN1T_CMS_SMIMECapabilities;
   }

   asn1Copy_CMS_SMIMECapabilities (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_SMIMECapabilities* ASN1C_CMS_SMIMECapabilities::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SMIMECapabilities* pDstData = new ASN1T_CMS_SMIMECapabilities;

   asn1Copy_CMS_SMIMECapabilities (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_SMIMEEncryptionKeyPreference (OSCTXT* pctxt, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pSrcValue, 
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
         pDstValue->u.issuerAndSerialNumber = rtxMemAllocType (pctxt, ASN1T_PKCS7_IssuerAndSerialNumber);
         new (pDstValue->u.issuerAndSerialNumber) ASN1T_PKCS7_IssuerAndSerialNumber;
         asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, pSrcValue->u.issuerAndSerialNumber, pDstValue->u.issuerAndSerialNumber);
         break;

      /* receipentKeyId */
      case 2:
         pDstValue->u.receipentKeyId = rtxMemAllocType (pctxt, ASN1T_CMS_RecipientKeyIdentifier);
         new (pDstValue->u.receipentKeyId) ASN1T_CMS_RecipientKeyIdentifier;
         asn1Copy_CMS_RecipientKeyIdentifier (pctxt, pSrcValue->u.receipentKeyId, pDstValue->u.receipentKeyId);
         break;

      /* subjectAltKeyIdentifier */
      case 3:
         pDstValue->u.subjectAltKeyIdentifier = rtxMemAllocType (pctxt, ASN1T_CMS_SubjectKeyIdentifier);
         new (pDstValue->u.subjectAltKeyIdentifier) ASN1T_CMS_SubjectKeyIdentifier;
         asn1Copy_CMS_SubjectKeyIdentifier (pctxt, pSrcValue->u.subjectAltKeyIdentifier, pDstValue->u.subjectAltKeyIdentifier);
         break;

   }
}

ASN1C_CMS_SMIMEEncryptionKeyPreference::ASN1C_CMS_SMIMEEncryptionKeyPreference (ASN1C_CMS_SMIMEEncryptionKeyPreference& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_SMIMEEncryptionKeyPreference::ASN1T_CMS_SMIMEEncryptionKeyPreference (ASN1C_CMS_SMIMEEncryptionKeyPreference& original)
{
   original.getCopy (this);
}

ASN1T_CMS_SMIMEEncryptionKeyPreference& ASN1C_CMS_SMIMEEncryptionKeyPreference::getCopy (ASN1T_CMS_SMIMEEncryptionKeyPreference* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_SMIMEEncryptionKeyPreference);
      new (pDstData) ASN1T_CMS_SMIMEEncryptionKeyPreference;
   }

   asn1Copy_CMS_SMIMEEncryptionKeyPreference (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_SMIMEEncryptionKeyPreference* ASN1C_CMS_SMIMEEncryptionKeyPreference::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_SMIMEEncryptionKeyPreference* pDstData = new ASN1T_CMS_SMIMEEncryptionKeyPreference;

   asn1Copy_CMS_SMIMEEncryptionKeyPreference (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_MQVuserKeyingMaterial (OSCTXT* pctxt, 
   ASN1T_CMS_MQVuserKeyingMaterial* pSrcValue, ASN1T_CMS_MQVuserKeyingMaterial*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_CMS_OriginatorPublicKey (pctxt, &pSrcValue->ephemeralPublicKey, &pDstValue->ephemeralPublicKey);

   if (pSrcValue->m.addedukmPresent) {
      asn1Copy_CMS_UserKeyingMaterial (pctxt, &pSrcValue->addedukm, &pDstValue->addedukm);
   }

}

ASN1C_CMS_MQVuserKeyingMaterial::ASN1C_CMS_MQVuserKeyingMaterial (ASN1C_CMS_MQVuserKeyingMaterial& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_MQVuserKeyingMaterial::ASN1T_CMS_MQVuserKeyingMaterial (ASN1C_CMS_MQVuserKeyingMaterial& original)
{
   original.getCopy (this);
}

ASN1T_CMS_MQVuserKeyingMaterial& ASN1C_CMS_MQVuserKeyingMaterial::getCopy (ASN1T_CMS_MQVuserKeyingMaterial* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_MQVuserKeyingMaterial);
      new (pDstData) ASN1T_CMS_MQVuserKeyingMaterial;
   }

   asn1Copy_CMS_MQVuserKeyingMaterial (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_MQVuserKeyingMaterial* ASN1C_CMS_MQVuserKeyingMaterial::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_MQVuserKeyingMaterial* pDstData = new ASN1T_CMS_MQVuserKeyingMaterial;

   asn1Copy_CMS_MQVuserKeyingMaterial (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_CMS_AuthEnvelopedData (OSCTXT* pctxt, 
   ASN1T_CMS_AuthEnvelopedData* pSrcValue, ASN1T_CMS_AuthEnvelopedData*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   if (pSrcValue->m.originatorInfoPresent) {
      asn1Copy_CMS_OriginatorInfo (pctxt, &pSrcValue->originatorInfo, &pDstValue->originatorInfo);
   }

   asn1Copy_CMS_RecipientInfos (pctxt, &pSrcValue->recipientInfos, &pDstValue->recipientInfos);

   asn1Copy_PKCS7_EncryptedContentInfo (pctxt, &pSrcValue->authEncryptedContentInfo, &pDstValue->authEncryptedContentInfo);

   if (pSrcValue->m.authAttrsPresent) {
      asn1Copy_DERCMS_AuthAttributes (pctxt, &pSrcValue->authAttrs, &pDstValue->authAttrs);
   }

   asn1Copy_CMS_MessageAuthenticationCode (pctxt, &pSrcValue->mac, &pDstValue->mac);

   if (pSrcValue->m.unauthAttrsPresent) {
      asn1Copy_CMS_UnauthAttributes (pctxt, &pSrcValue->unauthAttrs, &pDstValue->unauthAttrs);
   }

}

ASN1C_CMS_AuthEnvelopedData::ASN1C_CMS_AuthEnvelopedData (ASN1C_CMS_AuthEnvelopedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_CMS_AuthEnvelopedData::ASN1T_CMS_AuthEnvelopedData (ASN1C_CMS_AuthEnvelopedData& original)
{
   original.getCopy (this);
}

ASN1T_CMS_AuthEnvelopedData& ASN1C_CMS_AuthEnvelopedData::getCopy (ASN1T_CMS_AuthEnvelopedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_CMS_AuthEnvelopedData);
      new (pDstData) ASN1T_CMS_AuthEnvelopedData;
   }

   asn1Copy_CMS_AuthEnvelopedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_CMS_AuthEnvelopedData* ASN1C_CMS_AuthEnvelopedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_CMS_AuthEnvelopedData* pDstData = new ASN1T_CMS_AuthEnvelopedData;

   asn1Copy_CMS_AuthEnvelopedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

