/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "etsiqc.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID ETSIQC_id_etsi_qcs = {
   5,
   { 0, 4, 0, 1862, 1 }
} ;
ASN1OBJID ETSIQC_id_etsi_qcs_QcCompliance = {
   6,
   { 0, 4, 0, 1862, 1, 1 }
} ;
ASN1OBJID ETSIQC_id_etsi_qcs_QcLimitValue = {
   6,
   { 0, 4, 0, 1862, 1, 2 }
} ;
ASN1OBJID ETSIQC_id_etsi_qcs_QcRetentionPeriod = {
   6,
   { 0, 4, 0, 1862, 1, 3 }
} ;

ASN1T_ETSIQC_Iso4217CurrencyCode* 
   new_ASN1T_ETSIQC_Iso4217CurrencyCode (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSIQC_Iso4217CurrencyCode));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSIQC_Iso4217CurrencyCode;
}

ASN1C_ETSIQC_Iso4217CurrencyCode::ASN1C_ETSIQC_Iso4217CurrencyCode
    (ASN1T_ETSIQC_Iso4217CurrencyCode& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSIQC_Iso4217CurrencyCode::ASN1C_ETSIQC_Iso4217CurrencyCode (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSIQC_Iso4217CurrencyCode& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSIQC_Iso4217CurrencyCode::ASN1C_ETSIQC_Iso4217CurrencyCode (
   OSRTContext &context, ASN1T_ETSIQC_Iso4217CurrencyCode& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSIQC_Iso4217CurrencyCode::~ASN1T_ETSIQC_Iso4217CurrencyCode ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSIQC_Iso4217CurrencyCode (pctxt, this);
   }
}

int ASN1C_ETSIQC_Iso4217CurrencyCode::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSIQC_Iso4217CurrencyCode (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSIQC_Iso4217CurrencyCode::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSIQC_Iso4217CurrencyCode;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSIQC_Iso4217CurrencyCode (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSIQC_Iso4217CurrencyCode (
   ASN1T_ETSIQC_Iso4217CurrencyCode* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSIQC_Iso4217CurrencyCode;
}

void asn1Free_ETSIQC_Iso4217CurrencyCode (OSCTXT *pctxt, 
   ASN1T_ETSIQC_Iso4217CurrencyCode* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         break;

      case 2:
         if (0 != &pvalue->u.alphabetic) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.alphabetic);
         }
         break;

   }
}

void ASN1C_ETSIQC_Iso4217CurrencyCode::MemFree ()
{
   asn1Free_ETSIQC_Iso4217CurrencyCode (getCtxtPtr(), &msgData);
}

ASN1T_ETSIQC_MonetaryValue* new_ASN1T_ETSIQC_MonetaryValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSIQC_MonetaryValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSIQC_MonetaryValue;
}

ASN1C_ETSIQC_MonetaryValue::ASN1C_ETSIQC_MonetaryValue
    (ASN1T_ETSIQC_MonetaryValue& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSIQC_MonetaryValue::ASN1C_ETSIQC_MonetaryValue (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSIQC_MonetaryValue& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSIQC_MonetaryValue::ASN1C_ETSIQC_MonetaryValue (OSRTContext &context
   , ASN1T_ETSIQC_MonetaryValue& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_ETSIQC_MonetaryValue::ASN1T_ETSIQC_MonetaryValue ()
{
}

ASN1T_ETSIQC_MonetaryValue::~ASN1T_ETSIQC_MonetaryValue ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_ETSIQC_MonetaryValue (pctxt, this);
   }
}

int ASN1C_ETSIQC_MonetaryValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSIQC_MonetaryValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSIQC_MonetaryValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSIQC_MonetaryValue;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSIQC_MonetaryValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSIQC_MonetaryValue (ASN1T_ETSIQC_MonetaryValue* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSIQC_MonetaryValue;
}

void asn1Free_ETSIQC_MonetaryValue (OSCTXT *pctxt, 
   ASN1T_ETSIQC_MonetaryValue* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSIQC_Iso4217CurrencyCode (pctxt, &pvalue->currency);
}

void ASN1C_ETSIQC_MonetaryValue::MemFree ()
{
   asn1Free_ETSIQC_MonetaryValue (getCtxtPtr(), &msgData);
}

ASN1T_ETSIQC_QcEuLimitValue* new_ASN1T_ETSIQC_QcEuLimitValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_ETSIQC_QcEuLimitValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_ETSIQC_QcEuLimitValue;
}

ASN1C_ETSIQC_QcEuLimitValue::ASN1C_ETSIQC_QcEuLimitValue
    (ASN1T_ETSIQC_QcEuLimitValue& data) : ASN1C_ETSIQC_MonetaryValue (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_ETSIQC_QcEuLimitValue::ASN1C_ETSIQC_QcEuLimitValue (
   OSRTMessageBufferIF& msgBuf, ASN1T_ETSIQC_QcEuLimitValue& data) : 
   ASN1C_ETSIQC_MonetaryValue (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_ETSIQC_QcEuLimitValue::ASN1C_ETSIQC_QcEuLimitValue (OSRTContext &context
   , ASN1T_ETSIQC_QcEuLimitValue& data) : 
   ASN1C_ETSIQC_MonetaryValue (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_ETSIQC_QcEuLimitValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_ETSIQC_QcEuLimitValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_ETSIQC_QcEuLimitValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_ETSIQC_QcEuLimitValue;
   msgData.setContext (msgBuf.getContext());
   return asn1D_ETSIQC_QcEuLimitValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_ETSIQC_QcEuLimitValue (ASN1T_ETSIQC_QcEuLimitValue* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_ETSIQC_QcEuLimitValue;
}

void asn1Free_ETSIQC_QcEuLimitValue (OSCTXT *pctxt, 
   ASN1T_ETSIQC_QcEuLimitValue* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_ETSIQC_MonetaryValue (pctxt, pvalue);
}

void ASN1C_ETSIQC_QcEuLimitValue::MemFree ()
{
   asn1Free_ETSIQC_QcEuLimitValue (getCtxtPtr(), &msgData);
}

