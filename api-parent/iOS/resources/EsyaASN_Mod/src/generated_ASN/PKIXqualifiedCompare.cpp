/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "PKIXqualified.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_PKIXQUAL_DateOfBirth (const char* name, 
   ASN1T_PKIXQUAL_DateOfBirth* pValue, ASN1T_PKIXQUAL_DateOfBirth* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKIXQUAL_DateOfBirth::Equals (ASN1T_PKIXQUAL_DateOfBirth* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_DateOfBirth ("DateOfBirth", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_PlaceOfBirth (const char* name, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pValue, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_EXP_DirectoryString (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKIXQUAL_PlaceOfBirth::Equals (ASN1T_PKIXQUAL_PlaceOfBirth* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_PlaceOfBirth ("PlaceOfBirth", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_Gender (const char* name, 
   ASN1T_PKIXQUAL_Gender* pValue, ASN1T_PKIXQUAL_Gender* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKIXQUAL_Gender::Equals (ASN1T_PKIXQUAL_Gender* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_Gender ("Gender", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_CountryOfCitizenship (const char* name, 
   ASN1T_PKIXQUAL_CountryOfCitizenship* pValue, 
   ASN1T_PKIXQUAL_CountryOfCitizenship* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKIXQUAL_CountryOfCitizenship::Equals (ASN1T_PKIXQUAL_CountryOfCitizenship* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_CountryOfCitizenship ("CountryOfCitizenship", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_CountryOfResidence (const char* name, 
   ASN1T_PKIXQUAL_CountryOfResidence* pValue, 
   ASN1T_PKIXQUAL_CountryOfResidence* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKIXQUAL_CountryOfResidence::Equals (ASN1T_PKIXQUAL_CountryOfResidence* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_CountryOfResidence ("CountryOfResidence", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_PredefinedBiometricType (const char* name, 
   ASN1T_PKIXQUAL_PredefinedBiometricType* pValue, 
   ASN1T_PKIXQUAL_PredefinedBiometricType* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpUInt8 (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_PKIXQUAL_PredefinedBiometricType::Equals (ASN1T_PKIXQUAL_PredefinedBiometricType* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_PredefinedBiometricType ("PredefinedBiometricType", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_TypeOfBiometricData (const char* name, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pValue, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* predefinedBiometricType */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.predefinedBiometricType", 0, 0, 0);
         if (! asn1Compare_PKIXQUAL_PredefinedBiometricType (namebuf, &pValue->u.predefinedBiometricType, &pCmpValue->u.predefinedBiometricType, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* biometricDataOid */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.biometricDataOid", 0, 0, 0);
         if ( !rtCmpOID (namebuf, (ASN1OBJID*)pValue->u.biometricDataOid, (ASN1OBJID*)pCmpValue->u.biometricDataOid, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_PKIXQUAL_TypeOfBiometricData::Equals (ASN1T_PKIXQUAL_TypeOfBiometricData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_TypeOfBiometricData ("TypeOfBiometricData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_BiometricData (const char* name, 
   ASN1T_PKIXQUAL_BiometricData* pValue, 
   ASN1T_PKIXQUAL_BiometricData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".typeOfBiometricData", 0, 0, 0);
   if (! asn1Compare_PKIXQUAL_TypeOfBiometricData (namebuf, &pValue->typeOfBiometricData, &pCmpValue->typeOfBiometricData, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".hashAlgorithm", 0, 0, 0);
   if (! asn1Compare_EXP_AlgorithmIdentifier (namebuf, &pValue->hashAlgorithm, &pCmpValue->hashAlgorithm, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".biometricDataHash", 0, 0, 0);
   if ( !rtCmpOctStr (namebuf, pValue->biometricDataHash.numocts, 
      pValue->biometricDataHash.data, pCmpValue->biometricDataHash.numocts, 
      pCmpValue->biometricDataHash.data, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".sourceDataUri", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.sourceDataUriPresent,
   pCmpValue->m.sourceDataUriPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.sourceDataUriPresent) 
   {
      if ( !rtCmpCharStr (namebuf, pValue->sourceDataUri, pCmpValue->sourceDataUri, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKIXQUAL_BiometricData::Equals (ASN1T_PKIXQUAL_BiometricData* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_BiometricData ("BiometricData", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_BiometricSyntax (const char* name, 
   ASN1T_PKIXQUAL_BiometricSyntax* pValue, 
   ASN1T_PKIXQUAL_BiometricSyntax* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_PKIXQUAL_BiometricData* pdata;
   ASN1T_PKIXQUAL_BiometricData* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKIXQUAL_BiometricData*) pnode->data;
      pCmpdata = (ASN1T_PKIXQUAL_BiometricData*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKIXQUAL_BiometricData (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKIXQUAL_BiometricSyntax::Equals (ASN1T_PKIXQUAL_BiometricSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_BiometricSyntax ("BiometricSyntax", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_QCStatement (const char* name, 
   ASN1T_PKIXQUAL_QCStatement* pValue, ASN1T_PKIXQUAL_QCStatement* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".statementId", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->statementId, (ASN1OBJID*)&pCmpValue->statementId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".statementInfo", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.statementInfoPresent,
   pCmpValue->m.statementInfoPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.statementInfoPresent) 
   {
      if ( !rtCmpOpenType (namebuf,
      pValue->statementInfo.numocts,
      pValue->statementInfo.data,
      pCmpValue->statementInfo.numocts,
      pCmpValue->statementInfo.data, errBuff, errBuffSize))
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKIXQUAL_QCStatement::Equals (ASN1T_PKIXQUAL_QCStatement* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_QCStatement ("QCStatement", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_QCStatements (const char* name, 
   ASN1T_PKIXQUAL_QCStatements* pValue, 
   ASN1T_PKIXQUAL_QCStatements* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_PKIXQUAL_QCStatement* pdata;
   ASN1T_PKIXQUAL_QCStatement* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_PKIXQUAL_QCStatement*) pnode->data;
      pCmpdata = (ASN1T_PKIXQUAL_QCStatement*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_PKIXQUAL_QCStatement (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKIXQUAL_QCStatements::Equals (ASN1T_PKIXQUAL_QCStatements* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_QCStatements ("QCStatements", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_NameRegistrationAuthorities (const char* name, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pValue, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_IMP_GeneralName* pdata;
   ASN1T_IMP_GeneralName* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_GeneralName*) pnode->data;
      pCmpdata = (ASN1T_IMP_GeneralName*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_GeneralName (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_PKIXQUAL_NameRegistrationAuthorities::Equals (ASN1T_PKIXQUAL_NameRegistrationAuthorities* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_NameRegistrationAuthorities ("NameRegistrationAuthorities", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_PKIXQUAL_SemanticsInformation (const char* name, 
   ASN1T_PKIXQUAL_SemanticsInformation* pValue, 
   ASN1T_PKIXQUAL_SemanticsInformation* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".semanticsIndentifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.semanticsIndentifierPresent,
   pCmpValue->m.semanticsIndentifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.semanticsIndentifierPresent) 
   {
      if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->semanticsIndentifier, (ASN1OBJID*)&pCmpValue->semanticsIndentifier, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".nameRegistrationAuthorities", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.nameRegistrationAuthoritiesPresent,
   pCmpValue->m.nameRegistrationAuthoritiesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.nameRegistrationAuthoritiesPresent) 
   {
      if (! asn1Compare_PKIXQUAL_NameRegistrationAuthorities (namebuf, &pValue->nameRegistrationAuthorities, &pCmpValue->nameRegistrationAuthorities, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_PKIXQUAL_SemanticsInformation::Equals (ASN1T_PKIXQUAL_SemanticsInformation* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_PKIXQUAL_SemanticsInformation ("SemanticsInformation", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

