/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "pkcs10.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_PKCS10_Attributes (OSCTXT* pctxt,
   ASN1T_PKCS10_Attributes *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   Asn1BufLocDescr* pbuf;
   OSRTSList elemList;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Attributes");

   rtxSListInitEx (pctxt, &elemList);

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Attribute", xx1);

      ll = asn1E_EXP_Attribute (pctxt, ((ASN1T_EXP_Attribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pbuf = rtxMemAllocType (pctxt, Asn1BufLocDescr);
      xe_getBufLocDescr (pctxt, ll, pbuf);
      rtxSListAppend (&elemList, pbuf);

      pnode = pnode->prev;
   }

   ll1 = xe_derCanonicalSort (pctxt, &elemList);
   if (ll1 < 0) return LOG_RTERR (pctxt, ll1);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS10_CertificationRequestInfo (OSCTXT* pctxt,
   ASN1T_PKCS10_CertificationRequestInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertificationRequestInfo");

   /* encode attributes */

   RTXCTXTPUSHELEMNAME (pctxt, "attributes");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
      asn1E_PKCS10_Attributes (pctxt, &pvalue->attributes, ASN1IMPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode subjectPKInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "subjectPKInfo");

   ll = asn1E_EXP_SubjectPublicKeyInfo (pctxt, &pvalue->subjectPKInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode subject */

   RTXCTXTPUSHELEMNAME (pctxt, "subject");

   ll = asn1E_EXP_Name (pctxt, &pvalue->subject, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = xe_integer (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS10_CertificationRequest (OSCTXT* pctxt,
   ASN1T_PKCS10_CertificationRequest *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertificationRequest");

   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = xe_bitstr (pctxt, pvalue->signature_.data, pvalue->signature_.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signatureAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "signatureAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certificationRequestInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "certificationRequestInfo");

   ll = asn1E_PKCS10_CertificationRequestInfo (pctxt, &pvalue->certificationRequestInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

