/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "ASN_SertifikaDeposu.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_SD_KokSertifikaTipi 
   (const char* name, const ASN1T_SD_KokSertifikaTipi* pvalue)
{
   rtxPrintIndent ();
   printf ("%s = ", name);
   switch (*pvalue) {
      case 1: printf ("kokSertifika\n"); break;
      case 2: printf ("caprazSertifika\n"); break;
      case 3: printf ("smSertifikasi\n"); break;
      case 4: printf ("hizmetSertifikasi\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_SD_KokSertifikaTipi::Print (const char* name)
{
   asn1Print_SD_KokSertifikaTipi (name, &msgData);
}

void asn1Print_SD_KOKGuvenSeviyesi 
   (const char* name, const ASN1T_SD_KOKGuvenSeviyesi* pvalue)
{
   rtxPrintIndent ();
   printf ("%s = ", name);
   switch (*pvalue) {
      case 1: printf ("kanuni\n"); break;
      case 2: printf ("kurumsal\n"); break;
      case 3: printf ("kisisel\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_SD_KOKGuvenSeviyesi::Print (const char* name)
{
   asn1Print_SD_KOKGuvenSeviyesi (name, &msgData);
}

void asn1Print_SD_DepoASNEklenecekKokSertifika 
   (const char* name, const ASN1T_SD_DepoASNEklenecekKokSertifika* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintHexStr ("kokSertifikaValue", pvalue->kokSertifikaValue.numocts, pvalue->kokSertifikaValue.data);

   rtxPrintIndent ();
   rtxPrintHexStr ("kokSertifikaHash", pvalue->kokSertifikaHash.numocts, pvalue->kokSertifikaHash.data);

   asn1Print_EXP_CertificateSerialNumber ("kokSerialNumber", &pvalue->
      kokSerialNumber);

   asn1Print_EXP_Name ("kokIssuerName", &pvalue->kokIssuerName);

   asn1Print_EXP_Name ("kokSubjectName", &pvalue->kokSubjectName);

   asn1Print_EXP_Time ("kokStartDate", &pvalue->kokStartDate);

   asn1Print_EXP_Time ("kokEndDate", &pvalue->kokEndDate);

   asn1Print_IMP_KeyUsage ("kokKeyUsage", &pvalue->kokKeyUsage);

   asn1Print_IMP_SubjectKeyIdentifier ("kokSubjectKeyIdentifier", &pvalue->
      kokSubjectKeyIdentifier);

   asn1Print_SD_KokSertifikaTipi ("kokSertifikaTipi", &pvalue->kokSertifikaTipi
      );

   asn1Print_SD_KOKGuvenSeviyesi ("kokGuvenSeviyesi", &pvalue->kokGuvenSeviyesi
      );

   rtxPrintCloseBrace ();
}

void ASN1C_SD_DepoASNEklenecekKokSertifika::Print (const char* name)
{
   asn1Print_SD_DepoASNEklenecekKokSertifika (name, &msgData);
}

void asn1Print_SD_DepoASNSilinecekKokSertifika 
   (const char* name, const ASN1T_SD_DepoASNSilinecekKokSertifika* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintHexStr ("kokSertifikaValue", pvalue->kokSertifikaValue.numocts, pvalue->kokSertifikaValue.data);

   asn1Print_EXP_CertificateSerialNumber ("kokSerialNumber", &pvalue->
      kokSerialNumber);

   asn1Print_EXP_Name ("kokIssuerName", &pvalue->kokIssuerName);

   asn1Print_EXP_Name ("kokSubjectName", &pvalue->kokSubjectName);

   rtxPrintCloseBrace ();
}

void ASN1C_SD_DepoASNSilinecekKokSertifika::Print (const char* name)
{
   asn1Print_SD_DepoASNSilinecekKokSertifika (name, &msgData);
}

void asn1Print_SD_DepoASNKokSertifika 
   (const char* name, const ASN1T_SD_DepoASNKokSertifika* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* eklenecekSertifika */
      case 1:
      {
         asn1Print_SD_DepoASNEklenecekKokSertifika ("eklenecekSertifika", 
            pvalue->u.eklenecekSertifika);
         break;
      }
      /* silinecekSertifika */
      case 2:
      {
         asn1Print_SD_DepoASNSilinecekKokSertifika ("silinecekSertifika", 
            pvalue->u.silinecekSertifika);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_SD_DepoASNKokSertifika::Print (const char* name)
{
   asn1Print_SD_DepoASNKokSertifika (name, &msgData);
}

void asn1Print_SD_DepoASNKokSertifikalar 
   (const char* name, const ASN1T_SD_DepoASNKokSertifikalar* pvalue)
{
   ASN1T_SD_DepoASNKokSertifika* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_SD_DepoASNKokSertifika*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_SD_DepoASNKokSertifika (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_SD_DepoASNKokSertifikalar::Print (const char* name)
{
   asn1Print_SD_DepoASNKokSertifikalar (name, &msgData);
}

void asn1Print_SD_DepoASNRawImza 
   (const char* name, const ASN1T_SD_DepoASNRawImza* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintHexStr ("publicKeyHash", pvalue->publicKeyHash.numocts, pvalue->publicKeyHash.data);

   rtxPrintIndent ();
   rtxPrintHexStr ("imza", pvalue->imza.numocts, pvalue->imza.data);

   rtxPrintCloseBrace ();
}

void ASN1C_SD_DepoASNRawImza::Print (const char* name)
{
   asn1Print_SD_DepoASNRawImza (name, &msgData);
}

void asn1Print_SD_DepoASNImza 
   (const char* name, const ASN1T_SD_DepoASNImza* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_SD_DepoASNKokSertifika ("imzalanan", &pvalue->imzalanan);

   asn1Print_SD_DepoASNRawImza ("imza", &pvalue->imza);

   rtxPrintCloseBrace ();
}

void ASN1C_SD_DepoASNImza::Print (const char* name)
{
   asn1Print_SD_DepoASNImza (name, &msgData);
}

void asn1Print_SD_DepoASNImzalar 
   (const char* name, const ASN1T_SD_DepoASNImzalar* pvalue)
{
   ASN1T_SD_DepoASNImza* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_SD_DepoASNImza*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_SD_DepoASNImza (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_SD_DepoASNImzalar::Print (const char* name)
{
   asn1Print_SD_DepoASNImzalar (name, &msgData);
}

