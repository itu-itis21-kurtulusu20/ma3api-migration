/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "cms.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_CMS_ContentType (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ContentType* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_CMS_ContentType::toStream (const char* name)

{
   asn1PrtToStrm_CMS_ContentType (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_ContentType::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_EncryptedKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_EncryptedKey* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_CMS_EncryptedKey::toStream (const char* name)

{
   asn1PrtToStrm_CMS_EncryptedKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_EncryptedKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SubjectKeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SubjectKeyIdentifier* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_CMS_SubjectKeyIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SubjectKeyIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SubjectKeyIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_Digest (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_Digest* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_CMS_Digest::toStream (const char* name)

{
   asn1PrtToStrm_CMS_Digest (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_Digest::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_MessageAuthenticationCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_MessageAuthenticationCode* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_CMS_MessageAuthenticationCode::toStream (const char* name)

{
   asn1PrtToStrm_CMS_MessageAuthenticationCode (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_MessageAuthenticationCode::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_DigestAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_DigestAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMS_DigestAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_DigestAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_DigestAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SignatureAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignatureAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMS_SignatureAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SignatureAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SignatureAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_KeyEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyEncryptionAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMS_KeyEncryptionAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_KeyEncryptionAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_KeyEncryptionAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_ContentEncryptionAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ContentEncryptionAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMS_ContentEncryptionAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_ContentEncryptionAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_ContentEncryptionAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_MessageAuthenticationCodeAlgorithm (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_MessageAuthenticationCodeAlgorithm* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMS_MessageAuthenticationCodeAlgorithm::toStream (const char* name)

{
   asn1PrtToStrm_CMS_MessageAuthenticationCodeAlgorithm (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_MessageAuthenticationCodeAlgorithm::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_KeyDerivationAlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyDerivationAlgorithmIdentifier* pvalue)
{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMS_KeyDerivationAlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_KeyDerivationAlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_KeyDerivationAlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_AttributeCertificateV2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_AttributeCertificateV2* pvalue)
{
   asn1PrtToStrm_ATTRCERT_AttributeCertificate (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMS_AttributeCertificateV2::toStream (const char* name)

{
   asn1PrtToStrm_CMS_AttributeCertificateV2 (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_AttributeCertificateV2::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_CMSVersion (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_CMSVersion* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 0: rtxStrcat (namebuf, 512, "v0\n");break;
         case 1: rtxStrcat (namebuf, 512, "v1\n");break;
         case 2: rtxStrcat (namebuf, 512, "v2\n");break;
         case 3: rtxStrcat (namebuf, 512, "v3\n");break;
         case 4: rtxStrcat (namebuf, 512, "v4\n");break;
         case 5: rtxStrcat (namebuf, 512, "v5\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_CMS_CMSVersion::toStream (const char* name)

{
   asn1PrtToStrm_CMS_CMSVersion (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_CMSVersion::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_UserKeyingMaterial (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_UserKeyingMaterial* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_CMS_UserKeyingMaterial::toStream (const char* name)

{
   asn1PrtToStrm_CMS_UserKeyingMaterial (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_UserKeyingMaterial::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_MessageDigest (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_MessageDigest* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name, pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_CMS_MessageDigest::toStream (const char* name)

{
   asn1PrtToStrm_CMS_MessageDigest (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_MessageDigest::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SignerIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignerIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (pctxt, "issuerAndSerialNumber", pvalue->u.issuerAndSerialNumber);
         break;
      }
      /* subjectKeyIdentifier */
      case 2:
      {
         asn1PrtToStrm_CMS_SubjectKeyIdentifier (pctxt, "subjectKeyIdentifier", pvalue->u.subjectKeyIdentifier);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_SignerIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SignerIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SignerIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_UnsignedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_UnsignedAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_Attribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_UnsignedAttributes::toStream (const char* name)

{
   asn1PrtToStrm_CMS_UnsignedAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_UnsignedAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SignerInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignerInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_CMS_SignerIdentifier (pctxt, "sid", &pvalue->sid);

   asn1PrtToStrm_CMS_DigestAlgorithmIdentifier (pctxt, "digestAlgorithm", &pvalue->digestAlgorithm);

   if (pvalue->m.signedAttrsPresent) {
      asn1PrtToStrm_DERCMS_SignedAttributes (pctxt, "signedAttrs", &pvalue->signedAttrs);
   }

   asn1PrtToStrm_CMS_SignatureAlgorithmIdentifier (pctxt, "signatureAlgorithm", &pvalue->signatureAlgorithm);

   asn1PrtToStrm_DERCMS_SignatureValue (pctxt, "signature_", &pvalue->signature_);

   if (pvalue->m.unsignedAttrsPresent) {
      asn1PrtToStrm_CMS_UnsignedAttributes (pctxt, "unsignedAttrs", &pvalue->unsignedAttrs);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_SignerInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SignerInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SignerInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_Countersignature (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_Countersignature* pvalue)
{
   asn1PrtToStrm_CMS_SignerInfo (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMS_Countersignature::toStream (const char* name)

{
   asn1PrtToStrm_CMS_Countersignature (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_Countersignature::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_Signature (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_Signature* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, name, pvalue->numbits, pvalue->data);
   return 0;
}

int ASN1C_CMS_Signature::toStream (const char* name)

{
   asn1PrtToStrm_CMS_Signature (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_Signature::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_ContentInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ContentInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_ContentType (pctxt, "contentType", &pvalue->contentType);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "content",
      pvalue->content.numocts, pvalue->content.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_ContentInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_ContentInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_ContentInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_EncapsulatedContentInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_EncapsulatedContentInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_ContentType (pctxt, "eContentType", &pvalue->eContentType);

   if (pvalue->m.eContentPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "eContent", pvalue->eContent.numocts, pvalue->eContent.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_EncapsulatedContentInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_EncapsulatedContentInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_EncapsulatedContentInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_UnauthAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_UnauthAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_Attribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_UnauthAttributes::toStream (const char* name)

{
   asn1PrtToStrm_CMS_UnauthAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_UnauthAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_ExtendedCertificateInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ExtendedCertificateInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_EXP_Certificate (pctxt, "certificate", &pvalue->certificate);

   asn1PrtToStrm_CMS_UnauthAttributes (pctxt, "attributes", &pvalue->attributes);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_ExtendedCertificateInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_ExtendedCertificateInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_ExtendedCertificateInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_ExtendedCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ExtendedCertificate* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_ExtendedCertificateInfo (pctxt, "extendedCertificateInfo", &pvalue->extendedCertificateInfo);

   asn1PrtToStrm_CMS_SignatureAlgorithmIdentifier (pctxt, "signatureAlgorithm", &pvalue->signatureAlgorithm);

   asn1PrtToStrm_CMS_Signature (pctxt, "signature_", &pvalue->signature_);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_ExtendedCertificate::toStream (const char* name)

{
   asn1PrtToStrm_CMS_ExtendedCertificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_ExtendedCertificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_OtherCertificateFormat (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OtherCertificateFormat* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "otherCertFormat", (ASN1OBJID*)&pvalue->otherCertFormat);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "otherCert",
      pvalue->otherCert.numocts, pvalue->otherCert.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_OtherCertificateFormat::toStream (const char* name)

{
   asn1PrtToStrm_CMS_OtherCertificateFormat (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_OtherCertificateFormat::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_CertificateChoices (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_CertificateChoices* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* certificate */
      case 1:
      {
         asn1PrtToStrm_EXP_Certificate (pctxt, "certificate", pvalue->u.certificate);
         break;
      }
      /* extendedCertificate */
      case 2:
      {
         asn1PrtToStrm_CMS_ExtendedCertificate (pctxt, "extendedCertificate", pvalue->u.extendedCertificate);
         break;
      }
      /* v1AttrCert */
      case 3:
      {
         asn1PrtToStrm_ATTRCERT_AttributeCertificateV1 (pctxt, "v1AttrCert", pvalue->u.v1AttrCert);
         break;
      }
      /* v2AttrCert */
      case 4:
      {
         asn1PrtToStrm_CMS_AttributeCertificateV2 (pctxt, "v2AttrCert", pvalue->u.v2AttrCert);
         break;
      }
      /* other */
      case 5:
      {
         asn1PrtToStrm_CMS_OtherCertificateFormat (pctxt, "other", pvalue->u.other);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_CertificateChoices::toStream (const char* name)

{
   asn1PrtToStrm_CMS_CertificateChoices (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_CertificateChoices::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_CertificateSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_CertificateSet* pvalue)
{
   ASN1T_CMS_CertificateChoices* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMS_CertificateChoices*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMS_CertificateChoices (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_CertificateSet::toStream (const char* name)

{
   asn1PrtToStrm_CMS_CertificateSet (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_CertificateSet::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_OtherRevocationInfoFormat (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OtherRevocationInfoFormat* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "otherRevInfoFormat", (ASN1OBJID*)&pvalue->otherRevInfoFormat);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "otherRevInfo",
      pvalue->otherRevInfo.numocts, pvalue->otherRevInfo.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_OtherRevocationInfoFormat::toStream (const char* name)

{
   asn1PrtToStrm_CMS_OtherRevocationInfoFormat (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_OtherRevocationInfoFormat::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_RevocationInfoChoice (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RevocationInfoChoice* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* crl */
      case 1:
      {
         asn1PrtToStrm_EXP_CertificateList (pctxt, "crl", pvalue->u.crl);
         break;
      }
      /* other */
      case 2:
      {
         asn1PrtToStrm_CMS_OtherRevocationInfoFormat (pctxt, "other", pvalue->u.other);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_RevocationInfoChoice::toStream (const char* name)

{
   asn1PrtToStrm_CMS_RevocationInfoChoice (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_RevocationInfoChoice::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_RevocationInfoChoices (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RevocationInfoChoices* pvalue)
{
   ASN1T_CMS_RevocationInfoChoice* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMS_RevocationInfoChoice*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMS_RevocationInfoChoice (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_RevocationInfoChoices::toStream (const char* name)

{
   asn1PrtToStrm_CMS_RevocationInfoChoices (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_RevocationInfoChoices::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SignerInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignerInfos* pvalue)
{
   ASN1T_CMS_SignerInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMS_SignerInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMS_SignerInfo (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_SignerInfos::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SignerInfos (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SignerInfos::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SignedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SignedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_PKCS7_DigestAlgorithmIdentifiers (pctxt, "digestAlgorithms", &pvalue->digestAlgorithms);

   asn1PrtToStrm_CMS_EncapsulatedContentInfo (pctxt, "encapContentInfo", &pvalue->encapContentInfo);

   if (pvalue->m.certificatesPresent) {
      asn1PrtToStrm_CMS_CertificateSet (pctxt, "certificates", &pvalue->certificates);
   }

   if (pvalue->m.crlsPresent) {
      asn1PrtToStrm_CMS_RevocationInfoChoices (pctxt, "crls", &pvalue->crls);
   }

   asn1PrtToStrm_CMS_SignerInfos (pctxt, "signerInfos", &pvalue->signerInfos);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_SignedData::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SignedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SignedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_OriginatorInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OriginatorInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.certsPresent) {
      asn1PrtToStrm_CMS_CertificateSet (pctxt, "certs", &pvalue->certs);
   }

   if (pvalue->m.crlsPresent) {
      asn1PrtToStrm_CMS_RevocationInfoChoices (pctxt, "crls", &pvalue->crls);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_OriginatorInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_OriginatorInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_OriginatorInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_RecipientIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (pctxt, "issuerAndSerialNumber", pvalue->u.issuerAndSerialNumber);
         break;
      }
      /* subjectKeyIdentifier */
      case 2:
      {
         asn1PrtToStrm_CMS_SubjectKeyIdentifier (pctxt, "subjectKeyIdentifier", pvalue->u.subjectKeyIdentifier);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_RecipientIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_RecipientIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_RecipientIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_KeyTransRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyTransRecipientInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_CMS_RecipientIdentifier (pctxt, "rid", &pvalue->rid);

   asn1PrtToStrm_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, "keyEncryptionAlgorithm", &pvalue->keyEncryptionAlgorithm);

   asn1PrtToStrm_CMS_EncryptedKey (pctxt, "encryptedKey", &pvalue->encryptedKey);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_KeyTransRecipientInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_KeyTransRecipientInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_KeyTransRecipientInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_OriginatorPublicKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OriginatorPublicKey* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "algorithm", &pvalue->algorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, "publicKey", pvalue->publicKey.numbits, pvalue->publicKey.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_OriginatorPublicKey::toStream (const char* name)

{
   asn1PrtToStrm_CMS_OriginatorPublicKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_OriginatorPublicKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_OriginatorIdentifierOrKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OriginatorIdentifierOrKey* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (pctxt, "issuerAndSerialNumber", pvalue->u.issuerAndSerialNumber);
         break;
      }
      /* subjectKeyIdentifier */
      case 2:
      {
         asn1PrtToStrm_CMS_SubjectKeyIdentifier (pctxt, "subjectKeyIdentifier", pvalue->u.subjectKeyIdentifier);
         break;
      }
      /* originatorKey */
      case 3:
      {
         asn1PrtToStrm_CMS_OriginatorPublicKey (pctxt, "originatorKey", pvalue->u.originatorKey);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_OriginatorIdentifierOrKey::toStream (const char* name)

{
   asn1PrtToStrm_CMS_OriginatorIdentifierOrKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_OriginatorIdentifierOrKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_OtherKeyAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OtherKeyAttribute* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "keyAttrId", (ASN1OBJID*)&pvalue->keyAttrId);

   if (pvalue->m.keyAttrPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "keyAttr",
         pvalue->keyAttr.numocts, pvalue->keyAttr.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_OtherKeyAttribute::toStream (const char* name)

{
   asn1PrtToStrm_CMS_OtherKeyAttribute (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_OtherKeyAttribute::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_RecipientKeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientKeyIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_SubjectKeyIdentifier (pctxt, "subjectKeyIdentifier", &pvalue->subjectKeyIdentifier);

   if (pvalue->m.datePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "date", pvalue->date);
   }

   if (pvalue->m.otherPresent) {
      asn1PrtToStrm_CMS_OtherKeyAttribute (pctxt, "other", &pvalue->other);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_RecipientKeyIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_RecipientKeyIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_RecipientKeyIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_KeyAgreeRecipientIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyAgreeRecipientIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (pctxt, "issuerAndSerialNumber", pvalue->u.issuerAndSerialNumber);
         break;
      }
      /* rKeyId */
      case 2:
      {
         asn1PrtToStrm_CMS_RecipientKeyIdentifier (pctxt, "rKeyId", pvalue->u.rKeyId);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_KeyAgreeRecipientIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_KeyAgreeRecipientIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_KeyAgreeRecipientIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_RecipientEncryptedKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientEncryptedKey* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_KeyAgreeRecipientIdentifier (pctxt, "rid", &pvalue->rid);

   asn1PrtToStrm_CMS_EncryptedKey (pctxt, "encryptedKey", &pvalue->encryptedKey);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_RecipientEncryptedKey::toStream (const char* name)

{
   asn1PrtToStrm_CMS_RecipientEncryptedKey (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_RecipientEncryptedKey::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_RecipientEncryptedKeys (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientEncryptedKeys* pvalue)
{
   ASN1T_CMS_RecipientEncryptedKey* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMS_RecipientEncryptedKey*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMS_RecipientEncryptedKey (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_RecipientEncryptedKeys::toStream (const char* name)

{
   asn1PrtToStrm_CMS_RecipientEncryptedKeys (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_RecipientEncryptedKeys::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_KeyAgreeRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KeyAgreeRecipientInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_CMS_OriginatorIdentifierOrKey (pctxt, "originator", &pvalue->originator);

   if (pvalue->m.ukmPresent) {
      asn1PrtToStrm_CMS_UserKeyingMaterial (pctxt, "ukm", &pvalue->ukm);
   }

   asn1PrtToStrm_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, "keyEncryptionAlgorithm", &pvalue->keyEncryptionAlgorithm);

   asn1PrtToStrm_CMS_RecipientEncryptedKeys (pctxt, "recipientEncryptedKeys", &pvalue->recipientEncryptedKeys);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_KeyAgreeRecipientInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_KeyAgreeRecipientInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_KeyAgreeRecipientInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_KEKIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KEKIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "keyIdentifier", pvalue->keyIdentifier.numocts, pvalue->keyIdentifier.data);

   if (pvalue->m.datePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "date", pvalue->date);
   }

   if (pvalue->m.otherPresent) {
      asn1PrtToStrm_CMS_OtherKeyAttribute (pctxt, "other", &pvalue->other);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_KEKIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_CMS_KEKIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_KEKIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_KEKRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_KEKRecipientInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_CMS_KEKIdentifier (pctxt, "kekid", &pvalue->kekid);

   asn1PrtToStrm_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, "keyEncryptionAlgorithm", &pvalue->keyEncryptionAlgorithm);

   asn1PrtToStrm_CMS_EncryptedKey (pctxt, "encryptedKey", &pvalue->encryptedKey);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_KEKRecipientInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_KEKRecipientInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_KEKRecipientInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_PasswordRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_PasswordRecipientInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   if (pvalue->m.keyDerivationAlgorithmPresent) {
      asn1PrtToStrm_CMS_KeyDerivationAlgorithmIdentifier (pctxt, "keyDerivationAlgorithm", &pvalue->keyDerivationAlgorithm);
   }

   asn1PrtToStrm_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, "keyEncryptionAlgorithm", &pvalue->keyEncryptionAlgorithm);

   asn1PrtToStrm_CMS_EncryptedKey (pctxt, "encryptedKey", &pvalue->encryptedKey);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_PasswordRecipientInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_PasswordRecipientInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_PasswordRecipientInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_OtherRecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_OtherRecipientInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "oriType", (ASN1OBJID*)&pvalue->oriType);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "oriValue",
      pvalue->oriValue.numocts, pvalue->oriValue.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_OtherRecipientInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_OtherRecipientInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_OtherRecipientInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_RecipientInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* ktri */
      case 1:
      {
         asn1PrtToStrm_CMS_KeyTransRecipientInfo (pctxt, "ktri", pvalue->u.ktri);
         break;
      }
      /* kari */
      case 2:
      {
         asn1PrtToStrm_CMS_KeyAgreeRecipientInfo (pctxt, "kari", pvalue->u.kari);
         break;
      }
      /* kekri */
      case 3:
      {
         asn1PrtToStrm_CMS_KEKRecipientInfo (pctxt, "kekri", pvalue->u.kekri);
         break;
      }
      /* pwri */
      case 4:
      {
         asn1PrtToStrm_CMS_PasswordRecipientInfo (pctxt, "pwri", pvalue->u.pwri);
         break;
      }
      /* ori */
      case 5:
      {
         asn1PrtToStrm_CMS_OtherRecipientInfo (pctxt, "ori", pvalue->u.ori);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_RecipientInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMS_RecipientInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_RecipientInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_RecipientInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_RecipientInfos* pvalue)
{
   ASN1T_CMS_RecipientInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMS_RecipientInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMS_RecipientInfo (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_RecipientInfos::toStream (const char* name)

{
   asn1PrtToStrm_CMS_RecipientInfos (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_RecipientInfos::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_UnprotectedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_UnprotectedAttributes* pvalue)
{
   ASN1T_EXP_Attribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_Attribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_Attribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_UnprotectedAttributes::toStream (const char* name)

{
   asn1PrtToStrm_CMS_UnprotectedAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_UnprotectedAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_EnvelopedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_EnvelopedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   if (pvalue->m.originatorInfoPresent) {
      asn1PrtToStrm_CMS_OriginatorInfo (pctxt, "originatorInfo", &pvalue->originatorInfo);
   }

   asn1PrtToStrm_CMS_RecipientInfos (pctxt, "recipientInfos", &pvalue->recipientInfos);

   asn1PrtToStrm_PKCS7_EncryptedContentInfo (pctxt, "encryptedContentInfo", &pvalue->encryptedContentInfo);

   if (pvalue->m.unprotectedAttrsPresent) {
      asn1PrtToStrm_CMS_UnprotectedAttributes (pctxt, "unprotectedAttrs", &pvalue->unprotectedAttrs);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_EnvelopedData::toStream (const char* name)

{
   asn1PrtToStrm_CMS_EnvelopedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_EnvelopedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_DigestedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_DigestedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_CMS_DigestAlgorithmIdentifier (pctxt, "digestAlgorithm", &pvalue->digestAlgorithm);

   asn1PrtToStrm_CMS_EncapsulatedContentInfo (pctxt, "encapContentInfo", &pvalue->encapContentInfo);

   asn1PrtToStrm_CMS_Digest (pctxt, "digest", &pvalue->digest);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_DigestedData::toStream (const char* name)

{
   asn1PrtToStrm_CMS_DigestedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_DigestedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_EncryptedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_EncryptedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_PKCS7_EncryptedContentInfo (pctxt, "encryptedContentInfo", &pvalue->encryptedContentInfo);

   if (pvalue->m.unprotectedAttrsPresent) {
      asn1PrtToStrm_CMS_UnprotectedAttributes (pctxt, "unprotectedAttrs", &pvalue->unprotectedAttrs);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_EncryptedData::toStream (const char* name)

{
   asn1PrtToStrm_CMS_EncryptedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_EncryptedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_AuthenticatedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_AuthenticatedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   if (pvalue->m.originatorInfoPresent) {
      asn1PrtToStrm_CMS_OriginatorInfo (pctxt, "originatorInfo", &pvalue->originatorInfo);
   }

   asn1PrtToStrm_CMS_RecipientInfos (pctxt, "recipientInfos", &pvalue->recipientInfos);

   asn1PrtToStrm_CMS_MessageAuthenticationCodeAlgorithm (pctxt, "macAlgorithm", &pvalue->macAlgorithm);

   if (pvalue->m.digestAlgorithmPresent) {
      asn1PrtToStrm_CMS_DigestAlgorithmIdentifier (pctxt, "digestAlgorithm", &pvalue->digestAlgorithm);
   }

   asn1PrtToStrm_CMS_EncapsulatedContentInfo (pctxt, "encapContentInfo", &pvalue->encapContentInfo);

   if (pvalue->m.authAttrsPresent) {
      asn1PrtToStrm_DERCMS_AuthAttributes (pctxt, "authAttrs", &pvalue->authAttrs);
   }

   asn1PrtToStrm_CMS_MessageAuthenticationCode (pctxt, "mac", &pvalue->mac);

   if (pvalue->m.unauthAttrsPresent) {
      asn1PrtToStrm_CMS_UnauthAttributes (pctxt, "unauthAttrs", &pvalue->unauthAttrs);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_AuthenticatedData::toStream (const char* name)

{
   asn1PrtToStrm_CMS_AuthenticatedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_AuthenticatedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_ExtendedCertificateOrCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_ExtendedCertificateOrCertificate* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* certificate */
      case 1:
      {
         asn1PrtToStrm_EXP_Certificate (pctxt, "certificate", pvalue->u.certificate);
         break;
      }
      /* extendedCertificate */
      case 2:
      {
         asn1PrtToStrm_CMS_ExtendedCertificate (pctxt, "extendedCertificate", pvalue->u.extendedCertificate);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_ExtendedCertificateOrCertificate::toStream (const char* name)

{
   asn1PrtToStrm_CMS_ExtendedCertificateOrCertificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_ExtendedCertificateOrCertificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SMIMECapability (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SMIMECapability* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "capabilityID", (ASN1OBJID*)&pvalue->capabilityID);

   if (pvalue->m.parametersPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "parameters",
         pvalue->parameters.numocts, pvalue->parameters.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_SMIMECapability::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SMIMECapability (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SMIMECapability::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SMIMECapabilities (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SMIMECapabilities* pvalue)
{
   ASN1T_CMS_SMIMECapability* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMS_SMIMECapability*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMS_SMIMECapability (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMS_SMIMECapabilities::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SMIMECapabilities (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SMIMECapabilities::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_SMIMEEncryptionKeyPreference (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_SMIMEEncryptionKeyPreference* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* issuerAndSerialNumber */
      case 1:
      {
         asn1PrtToStrm_PKCS7_IssuerAndSerialNumber (pctxt, "issuerAndSerialNumber", pvalue->u.issuerAndSerialNumber);
         break;
      }
      /* receipentKeyId */
      case 2:
      {
         asn1PrtToStrm_CMS_RecipientKeyIdentifier (pctxt, "receipentKeyId", pvalue->u.receipentKeyId);
         break;
      }
      /* subjectAltKeyIdentifier */
      case 3:
      {
         asn1PrtToStrm_CMS_SubjectKeyIdentifier (pctxt, "subjectAltKeyIdentifier", pvalue->u.subjectAltKeyIdentifier);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_SMIMEEncryptionKeyPreference::toStream (const char* name)

{
   asn1PrtToStrm_CMS_SMIMEEncryptionKeyPreference (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_SMIMEEncryptionKeyPreference::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_MQVuserKeyingMaterial (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_MQVuserKeyingMaterial* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_OriginatorPublicKey (pctxt, "ephemeralPublicKey", &pvalue->ephemeralPublicKey);

   if (pvalue->m.addedukmPresent) {
      asn1PrtToStrm_CMS_UserKeyingMaterial (pctxt, "addedukm", &pvalue->addedukm);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_MQVuserKeyingMaterial::toStream (const char* name)

{
   asn1PrtToStrm_CMS_MQVuserKeyingMaterial (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_MQVuserKeyingMaterial::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMS_AuthEnvelopedData (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMS_AuthEnvelopedData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMS_CMSVersion (pctxt, "version", &pvalue->version);

   if (pvalue->m.originatorInfoPresent) {
      asn1PrtToStrm_CMS_OriginatorInfo (pctxt, "originatorInfo", &pvalue->originatorInfo);
   }

   asn1PrtToStrm_CMS_RecipientInfos (pctxt, "recipientInfos", &pvalue->recipientInfos);

   asn1PrtToStrm_PKCS7_EncryptedContentInfo (pctxt, "authEncryptedContentInfo", &pvalue->authEncryptedContentInfo);

   if (pvalue->m.authAttrsPresent) {
      asn1PrtToStrm_DERCMS_AuthAttributes (pctxt, "authAttrs", &pvalue->authAttrs);
   }

   asn1PrtToStrm_CMS_MessageAuthenticationCode (pctxt, "mac", &pvalue->mac);

   if (pvalue->m.unauthAttrsPresent) {
      asn1PrtToStrm_CMS_UnauthAttributes (pctxt, "unauthAttrs", &pvalue->unauthAttrs);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMS_AuthEnvelopedData::toStream (const char* name)

{
   asn1PrtToStrm_CMS_AuthEnvelopedData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMS_AuthEnvelopedData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

