/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "PKIXqualified.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_PKIXQUAL_DateOfBirth (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_DateOfBirth pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKIXQUAL_DateOfBirth::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_DateOfBirth (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_PKIXQUAL_DateOfBirth::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_PlaceOfBirth (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_PlaceOfBirth* pvalue)
{
   asn1PrtToStrm_EXP_DirectoryString (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKIXQUAL_PlaceOfBirth::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_PlaceOfBirth (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_PlaceOfBirth::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_Gender (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_Gender pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKIXQUAL_Gender::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_Gender (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_PKIXQUAL_Gender::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_CountryOfCitizenship (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_CountryOfCitizenship pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKIXQUAL_CountryOfCitizenship::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_CountryOfCitizenship (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_PKIXQUAL_CountryOfCitizenship::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_CountryOfResidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_CountryOfResidence pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_PKIXQUAL_CountryOfResidence::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_CountryOfResidence (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_PKIXQUAL_CountryOfResidence::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_PredefinedBiometricType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_PredefinedBiometricType* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 0: rtxStrcat (namebuf, 512, "picture\n");break;
         case 1: rtxStrcat (namebuf, 512, "handwritten-signature\n");break;
         default:
            rtPrintToStreamUnsigned (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_PKIXQUAL_PredefinedBiometricType::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_PredefinedBiometricType (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_PredefinedBiometricType::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_TypeOfBiometricData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* predefinedBiometricType */
      case 1:
      {
         asn1PrtToStrm_PKIXQUAL_PredefinedBiometricType (pctxt, "predefinedBiometricType", &pvalue->u.predefinedBiometricType);
         break;
      }
      /* biometricDataOid */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamOID (pctxt, "biometricDataOid", (ASN1OBJID*)pvalue->u.biometricDataOid);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKIXQUAL_TypeOfBiometricData::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_TypeOfBiometricData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_TypeOfBiometricData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_BiometricData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_BiometricData* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_PKIXQUAL_TypeOfBiometricData (pctxt, "typeOfBiometricData", &pvalue->typeOfBiometricData);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "hashAlgorithm", &pvalue->hashAlgorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "biometricDataHash", pvalue->biometricDataHash.numocts, pvalue->biometricDataHash.data);

   if (pvalue->m.sourceDataUriPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "sourceDataUri", pvalue->sourceDataUri);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKIXQUAL_BiometricData::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_BiometricData (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_BiometricData::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_BiometricSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_BiometricSyntax* pvalue)
{
   ASN1T_PKIXQUAL_BiometricData* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKIXQUAL_BiometricData*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKIXQUAL_BiometricData (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKIXQUAL_BiometricSyntax::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_BiometricSyntax (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_BiometricSyntax::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_QCStatement (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_QCStatement* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "statementId", (ASN1OBJID*)&pvalue->statementId);

   if (pvalue->m.statementInfoPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "statementInfo",
         pvalue->statementInfo.numocts, pvalue->statementInfo.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKIXQUAL_QCStatement::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_QCStatement (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_QCStatement::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_QCStatements (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_QCStatements* pvalue)
{
   ASN1T_PKIXQUAL_QCStatement* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_PKIXQUAL_QCStatement*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_PKIXQUAL_QCStatement (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKIXQUAL_QCStatements::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_QCStatements (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_QCStatements::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_NameRegistrationAuthorities (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue)
{
   ASN1T_IMP_GeneralName* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_IMP_GeneralName*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_IMP_GeneralName (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_PKIXQUAL_NameRegistrationAuthorities::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_NameRegistrationAuthorities (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_NameRegistrationAuthorities::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_PKIXQUAL_SemanticsInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_SemanticsInformation* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.semanticsIndentifierPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamOID (pctxt, "semanticsIndentifier", (ASN1OBJID*)&pvalue->semanticsIndentifier);
   }

   if (pvalue->m.nameRegistrationAuthoritiesPresent) {
      asn1PrtToStrm_PKIXQUAL_NameRegistrationAuthorities (pctxt, "nameRegistrationAuthorities", &pvalue->nameRegistrationAuthorities);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_PKIXQUAL_SemanticsInformation::toStream (const char* name)

{
   asn1PrtToStrm_PKIXQUAL_SemanticsInformation (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_PKIXQUAL_SemanticsInformation::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

