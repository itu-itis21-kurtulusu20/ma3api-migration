/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "asnaes.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID AES_csor = {
   6,
   { 2, 16, 840, 1, 101, 3 }
} ;
ASN1OBJID AES_nistAlgorithms = {
   7,
   { 2, 16, 840, 1, 101, 3, 4 }
} ;
ASN1OBJID AES_aes = {
   8,
   { 2, 16, 840, 1, 101, 3, 4, 1 }
} ;
ASN1OBJID AES_id_aes128_ECB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 1 }
} ;
ASN1OBJID AES_id_aes128_CBC = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 2 }
} ;
ASN1OBJID AES_id_aes128_OFB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 3 }
} ;
ASN1OBJID AES_id_aes128_CFB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 4 }
} ;
ASN1OBJID AES_id_aes192_ECB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 21 }
} ;
ASN1OBJID AES_id_aes192_CBC = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 22 }
} ;
ASN1OBJID AES_id_aes192_OFB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 23 }
} ;
ASN1OBJID AES_id_aes192_CFB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 24 }
} ;
ASN1OBJID AES_id_aes256_ECB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 41 }
} ;
ASN1OBJID AES_id_aes256_CBC = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 42 }
} ;
ASN1OBJID AES_id_aes256_OFB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 43 }
} ;
ASN1OBJID AES_id_aes256_CFB = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 44 }
} ;
ASN1OBJID AES_id_aes128_wrap = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 5 }
} ;
ASN1OBJID AES_id_aes192_wrap = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 25 }
} ;
ASN1OBJID AES_id_aes256_wrap = {
   9,
   { 2, 16, 840, 1, 101, 3, 4, 1, 45 }
} ;

ASN1T_AES_AES_IV* new_ASN1T_AES_AES_IV (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_AES_AES_IV));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_AES_AES_IV;
}

ASN1C_AES_AES_IV::ASN1C_AES_AES_IV (ASN1T_AES_AES_IV& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_AES_AES_IV::ASN1C_AES_AES_IV (OSRTMessageBufferIF& msgBuf
   , ASN1T_AES_AES_IV& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_AES_AES_IV::ASN1C_AES_AES_IV (OSRTContext &context
   , ASN1T_AES_AES_IV& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_AES_AES_IV::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_AES_AES_IV (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_AES_AES_IV::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_AES_AES_IV (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_AES_AES_IV (ASN1T_AES_AES_IV* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_AES_AES_IV;
}

ASN1T_AES_NumberOfBits* new_ASN1T_AES_NumberOfBits (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_AES_NumberOfBits));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_AES_NumberOfBits;
}

ASN1C_AES_NumberOfBits::ASN1C_AES_NumberOfBits (ASN1T_AES_NumberOfBits& data)
    : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_AES_NumberOfBits::ASN1C_AES_NumberOfBits (OSRTMessageBufferIF& msgBuf
   , ASN1T_AES_NumberOfBits& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_AES_NumberOfBits::ASN1C_AES_NumberOfBits (OSRTContext &context
   , ASN1T_AES_NumberOfBits& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_AES_NumberOfBits::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_AES_NumberOfBits (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_AES_NumberOfBits::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_AES_NumberOfBits (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_AES_CFBParameters* new_ASN1T_AES_CFBParameters (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_AES_CFBParameters));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_AES_CFBParameters;
}

ASN1C_AES_CFBParameters::ASN1C_AES_CFBParameters
    (ASN1T_AES_CFBParameters& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_AES_CFBParameters::ASN1C_AES_CFBParameters (OSRTMessageBufferIF& msgBuf
   , ASN1T_AES_CFBParameters& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_AES_CFBParameters::ASN1C_AES_CFBParameters (OSRTContext &context
   , ASN1T_AES_CFBParameters& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_AES_CFBParameters::ASN1T_AES_CFBParameters ()
{
}

int ASN1C_AES_CFBParameters::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_AES_CFBParameters (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_AES_CFBParameters::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_AES_CFBParameters;
   msgData.setContext (msgBuf.getContext());
   return asn1D_AES_CFBParameters (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_AES_CFBParameters (ASN1T_AES_CFBParameters* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_AES_CFBParameters;
}

