/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "dercms.h"
#include "rtxsrc/rtxCommon.h"

ASN1T_DERCMS_SignatureValue* new_ASN1T_DERCMS_SignatureValue (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_DERCMS_SignatureValue));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_DERCMS_SignatureValue;
}

ASN1C_DERCMS_SignatureValue::ASN1C_DERCMS_SignatureValue
    (ASN1T_DERCMS_SignatureValue& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_DERCMS_SignatureValue::ASN1C_DERCMS_SignatureValue (
   OSRTMessageBufferIF& msgBuf, ASN1T_DERCMS_SignatureValue& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_DERCMS_SignatureValue::ASN1C_DERCMS_SignatureValue (OSRTContext &context
   , ASN1T_DERCMS_SignatureValue& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_DERCMS_SignatureValue::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_DERCMS_SignatureValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_DERCMS_SignatureValue::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_DERCMS_SignatureValue (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_DERCMS_SignatureValue (ASN1T_DERCMS_SignatureValue* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_DERCMS_SignatureValue;
}

void asn1Free_DERCMS_SignatureValue (OSCTXT *pctxt, 
   ASN1T_DERCMS_SignatureValue* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->data);
      pvalue->numocts = 0;
      pvalue->data = 0;
   }
}

void ASN1C_DERCMS_SignatureValue::MemFree ()
{
   asn1Free_DERCMS_SignatureValue (getCtxtPtr(), &msgData);
}

ASN1C_DERCMS_AuthAttributes::ASN1C_DERCMS_AuthAttributes
    (ASN1T_DERCMS_AuthAttributes& data) : ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_DERCMS_AuthAttributes::ASN1C_DERCMS_AuthAttributes (
   OSRTMessageBufferIF& msgBuf, ASN1T_DERCMS_AuthAttributes& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_DERCMS_AuthAttributes::ASN1C_DERCMS_AuthAttributes (OSRTContext &context
   , ASN1T_DERCMS_AuthAttributes& data) : ASN1CSeqOfList(context, data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_DERCMS_AuthAttributes::ASN1C_DERCMS_AuthAttributes (ASN1CType& ccobj
   , ASN1T_DERCMS_AuthAttributes& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_DERCMS_AuthAttributes::Append (ASN1T_EXP_Attribute* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_Attribute* ASN1C_DERCMS_AuthAttributes::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_Attribute));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Attribute;
}

ASN1T_EXP_Attribute* ASN1C_DERCMS_AuthAttributes::AppendNewElement ()
{
   ASN1T_EXP_Attribute* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_DERCMS_AuthAttributes::~ASN1T_DERCMS_AuthAttributes ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_DERCMS_AuthAttributes (pctxt, this);
   }
}

int ASN1C_DERCMS_AuthAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_DERCMS_AuthAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_DERCMS_AuthAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_DERCMS_AuthAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_DERCMS_AuthAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_DERCMS_AuthAttributes (ASN1T_DERCMS_AuthAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_DERCMS_AuthAttributes;
   rtxDListFastInit (pvalue);
}

void asn1Free_DERCMS_AuthAttributes (OSCTXT *pctxt, 
   ASN1T_DERCMS_AuthAttributes* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_Attribute* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_Attribute*)pnode->data;
      asn1Free_EXP_Attribute (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_DERCMS_AuthAttributes::MemFree ()
{
   asn1Free_DERCMS_AuthAttributes (getCtxtPtr(), &msgData);
}

ASN1C_DERCMS_SignedAttributes::ASN1C_DERCMS_SignedAttributes
    (ASN1T_DERCMS_SignedAttributes& data) : ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_DERCMS_SignedAttributes::ASN1C_DERCMS_SignedAttributes (
   OSRTMessageBufferIF& msgBuf, ASN1T_DERCMS_SignedAttributes& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_DERCMS_SignedAttributes::ASN1C_DERCMS_SignedAttributes (
   OSRTContext &context, ASN1T_DERCMS_SignedAttributes& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_DERCMS_SignedAttributes::ASN1C_DERCMS_SignedAttributes (ASN1CType& ccobj
   , ASN1T_DERCMS_SignedAttributes& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_DERCMS_SignedAttributes::Append (ASN1T_EXP_Attribute* elem)
{
   append ((void*)elem);
}

ASN1T_EXP_Attribute* ASN1C_DERCMS_SignedAttributes::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_EXP_Attribute));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_EXP_Attribute;
}

ASN1T_EXP_Attribute* ASN1C_DERCMS_SignedAttributes::AppendNewElement ()
{
   ASN1T_EXP_Attribute* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_DERCMS_SignedAttributes::~ASN1T_DERCMS_SignedAttributes ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_DERCMS_SignedAttributes (pctxt, this);
   }
}

int ASN1C_DERCMS_SignedAttributes::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_DERCMS_SignedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_DERCMS_SignedAttributes::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_DERCMS_SignedAttributes;
   msgData.setContext (msgBuf.getContext());
   return asn1D_DERCMS_SignedAttributes (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_DERCMS_SignedAttributes (ASN1T_DERCMS_SignedAttributes* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_DERCMS_SignedAttributes;
   rtxDListFastInit (pvalue);
}

void asn1Free_DERCMS_SignedAttributes (OSCTXT *pctxt, 
   ASN1T_DERCMS_SignedAttributes* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_EXP_Attribute* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_EXP_Attribute*)pnode->data;
      asn1Free_EXP_Attribute (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_DERCMS_SignedAttributes::MemFree ()
{
   asn1Free_DERCMS_SignedAttributes (getCtxtPtr(), &msgData);
}

ASN1T_DERCMS_ECC_CMS_SharedInfo* 
   new_ASN1T_DERCMS_ECC_CMS_SharedInfo (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_DERCMS_ECC_CMS_SharedInfo));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_DERCMS_ECC_CMS_SharedInfo;
}

ASN1C_DERCMS_ECC_CMS_SharedInfo::ASN1C_DERCMS_ECC_CMS_SharedInfo
    (ASN1T_DERCMS_ECC_CMS_SharedInfo& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_DERCMS_ECC_CMS_SharedInfo::ASN1C_DERCMS_ECC_CMS_SharedInfo (
   OSRTMessageBufferIF& msgBuf, ASN1T_DERCMS_ECC_CMS_SharedInfo& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_DERCMS_ECC_CMS_SharedInfo::ASN1C_DERCMS_ECC_CMS_SharedInfo (
   OSRTContext &context, ASN1T_DERCMS_ECC_CMS_SharedInfo& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_DERCMS_ECC_CMS_SharedInfo::ASN1T_DERCMS_ECC_CMS_SharedInfo ()
{
   m.entityUInfoPresent = 0;
}

ASN1T_DERCMS_ECC_CMS_SharedInfo::~ASN1T_DERCMS_ECC_CMS_SharedInfo ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_DERCMS_ECC_CMS_SharedInfo (pctxt, this);
   }
}

int ASN1C_DERCMS_ECC_CMS_SharedInfo::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_DERCMS_ECC_CMS_SharedInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_DERCMS_ECC_CMS_SharedInfo::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_DERCMS_ECC_CMS_SharedInfo;
   msgData.setContext (msgBuf.getContext());
   return asn1D_DERCMS_ECC_CMS_SharedInfo (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_DERCMS_ECC_CMS_SharedInfo (
   ASN1T_DERCMS_ECC_CMS_SharedInfo* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_DERCMS_ECC_CMS_SharedInfo;
}

void asn1Free_DERCMS_ECC_CMS_SharedInfo (OSCTXT *pctxt, 
   ASN1T_DERCMS_ECC_CMS_SharedInfo* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->keyInfo);
   if (pvalue->m.entityUInfoPresent) {
      if (pvalue->entityUInfo.numocts > 0) {
         rtxMemFreePtr (pctxt, (void*)pvalue->entityUInfo.data);
         pvalue->entityUInfo.numocts = 0;
         pvalue->entityUInfo.data = 0;
      }
   }
   if (pvalue->suppPubInfo.numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->suppPubInfo.data);
      pvalue->suppPubInfo.numocts = 0;
      pvalue->suppPubInfo.data = 0;
   }
}

void ASN1C_DERCMS_ECC_CMS_SharedInfo::MemFree ()
{
   asn1Free_DERCMS_ECC_CMS_SharedInfo (getCtxtPtr(), &msgData);
}

