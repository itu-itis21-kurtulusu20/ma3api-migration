/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef ASNAES_H
#define ASNAES_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

/**
 * Header file for ASN.1 module asnaes
 */
/**************************************************************/
/*                                                            */
/*  AES_IV                                                    */
/*                                                            */
/**************************************************************/
/*
AES-IV ::= OCTET STRING (SIZE (16))
*/
#define TV_AES_AES_IV	(TM_UNIV|TM_PRIM|4)

class EXTERN ASN1C_AES_AES_IV;

struct EXTERN ASN1T_AES_AES_IV {
   OSUINT32 numocts;
   OSOCTET data[16];
   // ctors
   ASN1T_AES_AES_IV () : numocts(0) {}
   ASN1T_AES_AES_IV (OSUINT32 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLMEMCPY (data, _data, (OSUINT32) (OSRTMIN (numocts, sizeof(data))));
   }
   ASN1T_AES_AES_IV (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT32) (OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLMEMCPY (data, cstring, numocts);
      }
      else numocts = 0;
   }
   ASN1T_AES_AES_IV (ASN1C_AES_AES_IV& srcData);
   // assignment operators
   ASN1T_AES_AES_IV& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT32) (OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLMEMCPY (data, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

class EXTERN ASN1C_AES_AES_IV :
public ASN1CType
{
protected:
   ASN1T_AES_AES_IV& msgData;
public:
   ASN1C_AES_AES_IV (ASN1T_AES_AES_IV& data);
   ASN1C_AES_AES_IV (OSRTMessageBufferIF& msgBuf, ASN1T_AES_AES_IV& data);
   ASN1C_AES_AES_IV (OSRTContext &context, ASN1T_AES_AES_IV& data);
   ASN1C_AES_AES_IV (ASN1C_AES_AES_IV& original);
   virtual ~ASN1C_AES_AES_IV () {}
   inline ASN1T_AES_AES_IV& getData () { return msgData; }
   inline const ASN1T_AES_AES_IV& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AES_IV");
   int toStream (const char* name = "AES_IV");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_AES_AES_IV* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_AES_AES_IV& getCopy (ASN1T_AES_AES_IV* pDstData = 0);
   ASN1T_AES_AES_IV* newCopy ();

   inline ASN1C_AES_AES_IV& operator= (ASN1C_AES_AES_IV& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_AES_AES_IV (OSCTXT* pctxt,
   ASN1T_AES_AES_IV *pvalue, ASN1TagType tagging);

EXTERN int asn1D_AES_AES_IV (OSCTXT* pctxt, ASN1T_AES_AES_IV* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_AES_AES_IV (const char* name, const ASN1T_AES_AES_IV* pvalue);

EXTERN int asn1PrtToStrm_AES_AES_IV (OSCTXT *pctxt, 
   const char* name, const ASN1T_AES_AES_IV* pvalue);

EXTERN ASN1T_AES_AES_IV* new_ASN1T_AES_AES_IV (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_AES_AES_IV (const char* name, ASN1T_AES_AES_IV* pValue, 
   ASN1T_AES_AES_IV* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_AES_AES_IV (OSCTXT* pctxt, ASN1T_AES_AES_IV* pSrcValue, 
   ASN1T_AES_AES_IV* pDstValue);

EXTERN void asn1Init_AES_AES_IV (ASN1T_AES_AES_IV* pvalue);

/**************************************************************/
/*                                                            */
/*  NumberOfBits                                              */
/*                                                            */
/**************************************************************/
/*
NumberOfBits ::= INTEGER (1..128)
*/
#define TV_AES_NumberOfBits	(TM_UNIV|TM_PRIM|2)

typedef OSUINT8 ASN1T_AES_NumberOfBits;

class EXTERN ASN1C_AES_NumberOfBits :
public ASN1CType
{
protected:
   ASN1T_AES_NumberOfBits& msgData;
public:
   ASN1C_AES_NumberOfBits (ASN1T_AES_NumberOfBits& data);
   ASN1C_AES_NumberOfBits (OSRTMessageBufferIF& msgBuf
      , ASN1T_AES_NumberOfBits& data);
   ASN1C_AES_NumberOfBits (OSRTContext &context, ASN1T_AES_NumberOfBits& data);
   virtual ~ASN1C_AES_NumberOfBits () {}
   inline ASN1T_AES_NumberOfBits& getData () { return msgData; }
   inline const ASN1T_AES_NumberOfBits& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NumberOfBits");
   int toStream (const char* name = "NumberOfBits");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_AES_NumberOfBits* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_AES_NumberOfBits (OSCTXT* pctxt,
   ASN1T_AES_NumberOfBits *pvalue, ASN1TagType tagging);

EXTERN int asn1D_AES_NumberOfBits (OSCTXT* pctxt, 
   ASN1T_AES_NumberOfBits* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_AES_NumberOfBits 
   (const char* name, const ASN1T_AES_NumberOfBits* pvalue);

EXTERN int asn1PrtToStrm_AES_NumberOfBits (OSCTXT *pctxt, 
   const char* name, const ASN1T_AES_NumberOfBits* pvalue);

EXTERN ASN1T_AES_NumberOfBits* new_ASN1T_AES_NumberOfBits (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_AES_NumberOfBits (const char* name, 
   ASN1T_AES_NumberOfBits* pValue, ASN1T_AES_NumberOfBits* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  CFBParameters                                             */
/*                                                            */
/**************************************************************/
/*
 IMPORTS None 
 EXPORTS All 
 Parameter definitions 

CFBParameters ::= SEQUENCE {
   aes-IV AES-IV,
   numberOfBits NumberOfBits
}
*/
#define TV_AES_CFBParameters	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_AES_CFBParameters;

struct EXTERN ASN1T_AES_CFBParameters : public ASN1TPDU {
   ASN1T_AES_AES_IV aes_IV;
   ASN1T_AES_NumberOfBits numberOfBits;
   ASN1T_AES_CFBParameters ();
   ASN1T_AES_CFBParameters (ASN1C_AES_CFBParameters& srcData);
} ;

class EXTERN ASN1C_AES_CFBParameters :
public ASN1CType
{
protected:
   ASN1T_AES_CFBParameters& msgData;
public:
   ASN1C_AES_CFBParameters (ASN1T_AES_CFBParameters& data);
   ASN1C_AES_CFBParameters (OSRTMessageBufferIF& msgBuf
      , ASN1T_AES_CFBParameters& data);
   ASN1C_AES_CFBParameters (OSRTContext &context, ASN1T_AES_CFBParameters& data
      );
   ASN1C_AES_CFBParameters (ASN1C_AES_CFBParameters& original);
   virtual ~ASN1C_AES_CFBParameters () {}
   inline ASN1T_AES_CFBParameters& getData () { return msgData; }
   inline const ASN1T_AES_CFBParameters& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CFBParameters");
   int toStream (const char* name = "CFBParameters");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_AES_CFBParameters* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_AES_CFBParameters& getCopy (ASN1T_AES_CFBParameters* pDstData = 0);
   ASN1T_AES_CFBParameters* newCopy ();

   inline ASN1C_AES_CFBParameters& operator= (ASN1C_AES_CFBParameters& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_AES_CFBParameters (OSCTXT* pctxt,
   ASN1T_AES_CFBParameters *pvalue, ASN1TagType tagging);

EXTERN int asn1D_AES_CFBParameters (OSCTXT* pctxt, 
   ASN1T_AES_CFBParameters* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_AES_CFBParameters 
   (const char* name, const ASN1T_AES_CFBParameters* pvalue);

EXTERN int asn1PrtToStrm_AES_CFBParameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_AES_CFBParameters* pvalue);

EXTERN ASN1T_AES_CFBParameters* new_ASN1T_AES_CFBParameters (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_AES_CFBParameters (const char* name, 
   ASN1T_AES_CFBParameters* pValue, ASN1T_AES_CFBParameters* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_AES_CFBParameters (OSCTXT* pctxt, 
   ASN1T_AES_CFBParameters* pSrcValue, ASN1T_AES_CFBParameters* pDstValue);

EXTERN void asn1Init_AES_CFBParameters (ASN1T_AES_CFBParameters* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID AES_csor;
extern EXTERN ASN1OBJID AES_nistAlgorithms;
extern EXTERN ASN1OBJID AES_aes;
extern EXTERN ASN1OBJID AES_id_aes128_ECB;
extern EXTERN ASN1OBJID AES_id_aes128_CBC;
extern EXTERN ASN1OBJID AES_id_aes128_OFB;
extern EXTERN ASN1OBJID AES_id_aes128_CFB;
extern EXTERN ASN1OBJID AES_id_aes192_ECB;
extern EXTERN ASN1OBJID AES_id_aes192_CBC;
extern EXTERN ASN1OBJID AES_id_aes192_OFB;
extern EXTERN ASN1OBJID AES_id_aes192_CFB;
extern EXTERN ASN1OBJID AES_id_aes256_ECB;
extern EXTERN ASN1OBJID AES_id_aes256_CBC;
extern EXTERN ASN1OBJID AES_id_aes256_OFB;
extern EXTERN ASN1OBJID AES_id_aes256_CFB;
extern EXTERN ASN1OBJID AES_id_aes128_wrap;
extern EXTERN ASN1OBJID AES_id_aes192_wrap;
extern EXTERN ASN1OBJID AES_id_aes256_wrap;

#endif
