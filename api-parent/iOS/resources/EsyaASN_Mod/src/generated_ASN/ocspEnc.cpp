/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "ocsp.h"
#include "UsefulDefinitions.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_OCSP_Version (OSCTXT* pctxt,
   ASN1T_OCSP_Version *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Version");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_OCSPResponseStatus (OSCTXT* pctxt,
   ASN1T_OCSP_OCSPResponseStatus *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OCSPResponseStatus");

   if(*pvalue > 6)
      return LOG_RTERR (pctxt, RTERR_INVENUM);

   ll = xe_enumUnsigned (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_KeyHash (OSCTXT* pctxt,
   ASN1T_OCSP_KeyHash *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyHash");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_CRLReason (OSCTXT* pctxt,
   ASN1T_OCSP_CRLReason *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CRLReason");

   if(*pvalue > 8)
      return LOG_RTERR (pctxt, RTERR_INVENUM);

   ll = xe_enumUnsigned (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_CertID (OSCTXT* pctxt,
   ASN1T_OCSP_CertID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertID");

   /* encode serialNumber */

   RTXCTXTPUSHELEMNAME (pctxt, "serialNumber");

   ll = asn1E_EXP_CertificateSerialNumber (pctxt, &pvalue->serialNumber, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode issuerKeyHash */

   RTXCTXTPUSHELEMNAME (pctxt, "issuerKeyHash");

   ll = xe_octstr (pctxt, pvalue->issuerKeyHash.data, pvalue->issuerKeyHash.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode issuerNameHash */

   RTXCTXTPUSHELEMNAME (pctxt, "issuerNameHash");

   ll = xe_octstr (pctxt, pvalue->issuerNameHash.data, pvalue->issuerNameHash.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode hashAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "hashAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_Request (OSCTXT* pctxt,
   ASN1T_OCSP_Request *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Request");

   /* encode singleRequestExtensions */

   if (pvalue->m.singleRequestExtensionsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "singleRequestExtensions");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_EXP_Extensions (pctxt, &pvalue->singleRequestExtensions, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode reqCert */

   RTXCTXTPUSHELEMNAME (pctxt, "reqCert");

   ll = asn1E_OCSP_CertID (pctxt, &pvalue->reqCert, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP__SeqOfOCSP_Request (OSCTXT* pctxt,
   ASN1T_OCSP__SeqOfOCSP_Request *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Request", xx1);

      ll = asn1E_OCSP_Request (pctxt, ((ASN1T_OCSP_Request*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_OCSP_TBSRequest (OSCTXT* pctxt,
   ASN1T_OCSP_TBSRequest *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "TBSRequest");

   /* encode requestExtensions */

   if (pvalue->m.requestExtensionsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "requestExtensions");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         asn1E_EXP_Extensions (pctxt, &pvalue->requestExtensions, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode requestList */

   RTXCTXTPUSHELEMNAME (pctxt, "requestList");

   ll = asn1E_OCSP__SeqOfOCSP_Request (pctxt, &pvalue->requestList, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode requestorName */

   if (pvalue->m.requestorNamePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "requestorName");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_IMP_GeneralName (pctxt, &pvalue->requestorName, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode version */

   if (pvalue->version != OCSP_Version::v1) {
      RTXCTXTPUSHELEMNAME (pctxt, "version");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_OCSP_Version (pctxt, &pvalue->version, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP__SeqOfOCSP_Certificate (OSCTXT* pctxt,
   ASN1T_OCSP__SeqOfOCSP_Certificate *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Certificate", xx1);

      ll = asn1E_EXP_Certificate (pctxt, ((ASN1T_EXP_Certificate*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_OCSP_Signature (OSCTXT* pctxt,
   ASN1T_OCSP_Signature *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Signature");

   /* encode certs */

   if (pvalue->m.certsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "certs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_OCSP__SeqOfOCSP_Certificate (pctxt, &pvalue->certs, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = xe_bitstr (pctxt, pvalue->signature_.data, pvalue->signature_.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signatureAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "signatureAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_OCSPRequest (OSCTXT* pctxt,
   ASN1T_OCSP_OCSPRequest *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OCSPRequest");

   /* encode optionalSignature */

   if (pvalue->m.optionalSignaturePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "optionalSignature");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_OCSP_Signature (pctxt, &pvalue->optionalSignature, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode tbsRequest */

   RTXCTXTPUSHELEMNAME (pctxt, "tbsRequest");

   ll = asn1E_OCSP_TBSRequest (pctxt, &pvalue->tbsRequest, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_ResponseBytes (OSCTXT* pctxt,
   ASN1T_OCSP_ResponseBytes *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ResponseBytes");

   /* encode response */

   RTXCTXTPUSHELEMNAME (pctxt, "response");

   ll = xe_octstr (pctxt, pvalue->response.data, pvalue->response.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode responseType */

   RTXCTXTPUSHELEMNAME (pctxt, "responseType");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->responseType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_OCSPResponse (OSCTXT* pctxt,
   ASN1T_OCSP_OCSPResponse *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OCSPResponse");

   /* encode responseBytes */

   if (pvalue->m.responseBytesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "responseBytes");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_OCSP_ResponseBytes (pctxt, &pvalue->responseBytes, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode responseStatus */

   RTXCTXTPUSHELEMNAME (pctxt, "responseStatus");

   if(pvalue->responseStatus > 6)
      return LOG_RTERR (pctxt, RTERR_INVENUM);

   ll = asn1E_OCSP_OCSPResponseStatus (pctxt, &pvalue->responseStatus, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_ResponderID (OSCTXT* pctxt,
   ASN1T_OCSP_ResponderID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ResponderID");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "byName");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_EXP_Name (pctxt, pvalue->u.byName, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "byKey");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
            asn1E_OCSP_KeyHash (pctxt, pvalue->u.byKey, ASN1EXPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_RevokedInfo (OSCTXT* pctxt,
   ASN1T_OCSP_RevokedInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RevokedInfo");

   /* encode revocationReason */

   if (pvalue->m.revocationReasonPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "revocationReason");

      if(pvalue->revocationReason > 8)
         return LOG_RTERR (pctxt, RTERR_INVENUM);

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_OCSP_CRLReason (pctxt, &pvalue->revocationReason, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode revocationTime */

   RTXCTXTPUSHELEMNAME (pctxt, "revocationTime");

   ll = xe_charstr (pctxt, pvalue->revocationTime, ASN1EXPL, TM_UNIV|TM_PRIM|24);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_CertStatus (OSCTXT* pctxt,
   ASN1T_OCSP_CertStatus *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;
   OS_UNUSED_ARG (pvalue) ;

   RTXCTXTPUSHTYPENAME (pctxt, "CertStatus");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "good");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
            xe_null (pctxt, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "revoked");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_OCSP_RevokedInfo (pctxt, pvalue->u.revoked, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "unknown");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|2,
            xe_null (pctxt, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_SingleResponse (OSCTXT* pctxt,
   ASN1T_OCSP_SingleResponse *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SingleResponse");

   /* encode singleExtensions */

   if (pvalue->m.singleExtensionsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "singleExtensions");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_EXP_Extensions (pctxt, &pvalue->singleExtensions, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode nextUpdate */

   if (pvalue->m.nextUpdatePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "nextUpdate");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         xe_charstr (pctxt, pvalue->nextUpdate, ASN1EXPL, TM_UNIV|TM_PRIM|24));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode thisUpdate */

   RTXCTXTPUSHELEMNAME (pctxt, "thisUpdate");

   ll = xe_charstr (pctxt, pvalue->thisUpdate, ASN1EXPL, TM_UNIV|TM_PRIM|24);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certStatus */

   RTXCTXTPUSHELEMNAME (pctxt, "certStatus");

   ll = asn1E_OCSP_CertStatus (pctxt, &pvalue->certStatus, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certID */

   RTXCTXTPUSHELEMNAME (pctxt, "certID");

   ll = asn1E_OCSP_CertID (pctxt, &pvalue->certID, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP__SeqOfOCSP_SingleResponse (OSCTXT* pctxt,
   ASN1T_OCSP__SeqOfOCSP_SingleResponse *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SingleResponse", xx1);

      ll = asn1E_OCSP_SingleResponse (pctxt, ((ASN1T_OCSP_SingleResponse*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   return (ll0);
}

EXTERN int asn1E_OCSP_ResponseData (OSCTXT* pctxt,
   ASN1T_OCSP_ResponseData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ResponseData");

   /* encode responseExtensions */

   if (pvalue->m.responseExtensionsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "responseExtensions");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_EXP_Extensions (pctxt, &pvalue->responseExtensions, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode responses */

   RTXCTXTPUSHELEMNAME (pctxt, "responses");

   ll = asn1E_OCSP__SeqOfOCSP_SingleResponse (pctxt, &pvalue->responses, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode producedAt */

   RTXCTXTPUSHELEMNAME (pctxt, "producedAt");

   ll = xe_charstr (pctxt, pvalue->producedAt, ASN1EXPL, TM_UNIV|TM_PRIM|24);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode responderID */

   RTXCTXTPUSHELEMNAME (pctxt, "responderID");

   ll = asn1E_OCSP_ResponderID (pctxt, &pvalue->responderID, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   if (pvalue->version != OCSP_Version::v1) {
      RTXCTXTPUSHELEMNAME (pctxt, "version");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_OCSP_Version (pctxt, &pvalue->version, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_OCSP_BasicOCSPResponse (OSCTXT* pctxt,
   ASN1T_OCSP_BasicOCSPResponse *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "BasicOCSPResponse");

   /* encode certs */

   if (pvalue->m.certsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "certs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_OCSP__SeqOfOCSP_Certificate (pctxt, &pvalue->certs, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = xe_bitstr (pctxt, pvalue->signature_.data, pvalue->signature_.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signatureAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "signatureAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode tbsResponseData */

   RTXCTXTPUSHELEMNAME (pctxt, "tbsResponseData");

   ll = asn1E_OCSP_ResponseData (pctxt, &pvalue->tbsResponseData, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

