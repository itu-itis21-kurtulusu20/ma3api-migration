/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "asnaes.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_AES_AES_IV (const char* name, ASN1T_AES_AES_IV* pValue, 
   ASN1T_AES_AES_IV* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_AES_AES_IV::Equals (ASN1T_AES_AES_IV* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_AES_AES_IV ("AES_IV", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_AES_NumberOfBits (const char* name, 
   ASN1T_AES_NumberOfBits* pValue, ASN1T_AES_NumberOfBits* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpUInt8 (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_AES_NumberOfBits::Equals (ASN1T_AES_NumberOfBits* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_AES_NumberOfBits ("NumberOfBits", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_AES_CFBParameters (const char* name, 
   ASN1T_AES_CFBParameters* pValue, ASN1T_AES_CFBParameters* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".aes_IV", 0, 0, 0);
   if (! asn1Compare_AES_AES_IV (namebuf, &pValue->aes_IV, &pCmpValue->aes_IV, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".numberOfBits", 0, 0, 0);
   if (! asn1Compare_AES_NumberOfBits (namebuf, &pValue->numberOfBits, &pCmpValue->numberOfBits, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_AES_CFBParameters::Equals (ASN1T_AES_CFBParameters* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_AES_CFBParameters ("CFBParameters", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

