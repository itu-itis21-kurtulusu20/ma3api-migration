/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "ocsp.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_OCSP_KeyHash (OSCTXT* pctxt, ASN1T_OCSP_KeyHash* pSrcValue, 
   ASN1T_OCSP_KeyHash* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_OCSP_KeyHash::ASN1C_OCSP_KeyHash (ASN1C_OCSP_KeyHash& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_KeyHash& ASN1C_OCSP_KeyHash::getCopy (ASN1T_OCSP_KeyHash* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_KeyHash);
      new (pDstData) ASN1T_OCSP_KeyHash;
   }

   asn1Copy_OCSP_KeyHash (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_OCSP_KeyHash* ASN1C_OCSP_KeyHash::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_KeyHash* pDstData = new ASN1T_OCSP_KeyHash;

   asn1Copy_OCSP_KeyHash (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_OCSP_CertID (OSCTXT* pctxt, ASN1T_OCSP_CertID* pSrcValue, 
   ASN1T_OCSP_CertID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->hashAlgorithm, &pDstValue->hashAlgorithm);

   rtCopyDynOctStr (pctxt, &pSrcValue->issuerNameHash, &pDstValue->
      issuerNameHash);

   rtCopyDynOctStr (pctxt, &pSrcValue->issuerKeyHash, &pDstValue->issuerKeyHash
      );

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->serialNumber, &pDstValue->serialNumber);

}

ASN1C_OCSP_CertID::ASN1C_OCSP_CertID (ASN1C_OCSP_CertID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_CertID::ASN1T_OCSP_CertID (ASN1C_OCSP_CertID& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_CertID& ASN1C_OCSP_CertID::getCopy (ASN1T_OCSP_CertID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_CertID);
      new (pDstData) ASN1T_OCSP_CertID;
   }

   asn1Copy_OCSP_CertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_CertID* ASN1C_OCSP_CertID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_CertID* pDstData = new ASN1T_OCSP_CertID;

   asn1Copy_OCSP_CertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_Request (OSCTXT* pctxt, ASN1T_OCSP_Request* pSrcValue, 
   ASN1T_OCSP_Request* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_OCSP_CertID (pctxt, &pSrcValue->reqCert, &pDstValue->reqCert);

   if (pSrcValue->m.singleRequestExtensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->singleRequestExtensions, &pDstValue->singleRequestExtensions);
   }

}

ASN1C_OCSP_Request::ASN1C_OCSP_Request (ASN1C_OCSP_Request& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_Request::ASN1T_OCSP_Request (ASN1C_OCSP_Request& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_Request& ASN1C_OCSP_Request::getCopy (ASN1T_OCSP_Request* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_Request);
      new (pDstData) ASN1T_OCSP_Request;
   }

   asn1Copy_OCSP_Request (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_Request* ASN1C_OCSP_Request::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_Request* pDstData = new ASN1T_OCSP_Request;

   asn1Copy_OCSP_Request (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP__SeqOfOCSP_Request (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_Request* pSrcValue, ASN1T_OCSP__SeqOfOCSP_Request*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_OCSP_Request* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_OCSP_Request* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_OCSP_Request);
         pSrcData = (ASN1T_OCSP_Request*) pnode->data;

         asn1Copy_OCSP_Request (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_OCSP__SeqOfOCSP_Request::ASN1C_OCSP__SeqOfOCSP_Request (ASN1C_OCSP__SeqOfOCSP_Request& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_OCSP__SeqOfOCSP_Request*)pList)
{
}

ASN1C_OCSP__SeqOfOCSP_Request& ASN1C_OCSP__SeqOfOCSP_Request::operator= (ASN1C_OCSP__SeqOfOCSP_Request& srcData)
{
   clear ();
   asn1Copy_OCSP__SeqOfOCSP_Request (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_OCSP__SeqOfOCSP_Request& ASN1C_OCSP__SeqOfOCSP_Request::getCopy (ASN1T_OCSP__SeqOfOCSP_Request* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP__SeqOfOCSP_Request);
      new (pDstData) ASN1T_OCSP__SeqOfOCSP_Request;
   }

   asn1Copy_OCSP__SeqOfOCSP_Request (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP__SeqOfOCSP_Request* ASN1C_OCSP__SeqOfOCSP_Request::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP__SeqOfOCSP_Request* pDstData = new ASN1T_OCSP__SeqOfOCSP_Request;

   asn1Copy_OCSP__SeqOfOCSP_Request (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_TBSRequest (OSCTXT* pctxt, 
   ASN1T_OCSP_TBSRequest* pSrcValue, ASN1T_OCSP_TBSRequest* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   if (pSrcValue->m.requestorNamePresent) {
      asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->requestorName, &pDstValue->requestorName);
   }

   asn1Copy_OCSP__SeqOfOCSP_Request (pctxt, &pSrcValue->requestList, &pDstValue->requestList);

   if (pSrcValue->m.requestExtensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->requestExtensions, &pDstValue->requestExtensions);
   }

}

ASN1C_OCSP_TBSRequest::ASN1C_OCSP_TBSRequest (ASN1C_OCSP_TBSRequest& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_TBSRequest::ASN1T_OCSP_TBSRequest (ASN1C_OCSP_TBSRequest& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_TBSRequest& ASN1C_OCSP_TBSRequest::getCopy (ASN1T_OCSP_TBSRequest* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_TBSRequest);
      new (pDstData) ASN1T_OCSP_TBSRequest;
   }

   asn1Copy_OCSP_TBSRequest (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_TBSRequest* ASN1C_OCSP_TBSRequest::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_TBSRequest* pDstData = new ASN1T_OCSP_TBSRequest;

   asn1Copy_OCSP_TBSRequest (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP__SeqOfOCSP_Certificate (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pSrcValue, 
   ASN1T_OCSP__SeqOfOCSP_Certificate* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Certificate* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Certificate* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Certificate);
         pSrcData = (ASN1T_EXP_Certificate*) pnode->data;

         asn1Copy_EXP_Certificate (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_OCSP__SeqOfOCSP_Certificate::ASN1C_OCSP__SeqOfOCSP_Certificate (ASN1C_OCSP__SeqOfOCSP_Certificate& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_OCSP__SeqOfOCSP_Certificate*)pList)
{
}

ASN1C_OCSP__SeqOfOCSP_Certificate& ASN1C_OCSP__SeqOfOCSP_Certificate::operator= (ASN1C_OCSP__SeqOfOCSP_Certificate& srcData)
{
   clear ();
   asn1Copy_OCSP__SeqOfOCSP_Certificate (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_OCSP__SeqOfOCSP_Certificate& ASN1C_OCSP__SeqOfOCSP_Certificate::getCopy (ASN1T_OCSP__SeqOfOCSP_Certificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP__SeqOfOCSP_Certificate);
      new (pDstData) ASN1T_OCSP__SeqOfOCSP_Certificate;
   }

   asn1Copy_OCSP__SeqOfOCSP_Certificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP__SeqOfOCSP_Certificate* ASN1C_OCSP__SeqOfOCSP_Certificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP__SeqOfOCSP_Certificate* pDstData = new ASN1T_OCSP__SeqOfOCSP_Certificate;

   asn1Copy_OCSP__SeqOfOCSP_Certificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_Signature (OSCTXT* pctxt, ASN1T_OCSP_Signature* pSrcValue, 
   ASN1T_OCSP_Signature* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

   if (pSrcValue->m.certsPresent) {
      asn1Copy_OCSP__SeqOfOCSP_Certificate (pctxt, &pSrcValue->certs, &pDstValue->certs);
   }

}

ASN1C_OCSP_Signature::ASN1C_OCSP_Signature (ASN1C_OCSP_Signature& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_Signature::ASN1T_OCSP_Signature (ASN1C_OCSP_Signature& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_Signature& ASN1C_OCSP_Signature::getCopy (ASN1T_OCSP_Signature* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_Signature);
      new (pDstData) ASN1T_OCSP_Signature;
   }

   asn1Copy_OCSP_Signature (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_Signature* ASN1C_OCSP_Signature::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_Signature* pDstData = new ASN1T_OCSP_Signature;

   asn1Copy_OCSP_Signature (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_OCSPRequest (OSCTXT* pctxt, 
   ASN1T_OCSP_OCSPRequest* pSrcValue, ASN1T_OCSP_OCSPRequest* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_OCSP_TBSRequest (pctxt, &pSrcValue->tbsRequest, &pDstValue->tbsRequest);

   if (pSrcValue->m.optionalSignaturePresent) {
      asn1Copy_OCSP_Signature (pctxt, &pSrcValue->optionalSignature, &pDstValue->optionalSignature);
   }

}

ASN1C_OCSP_OCSPRequest::ASN1C_OCSP_OCSPRequest (ASN1C_OCSP_OCSPRequest& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_OCSPRequest::ASN1T_OCSP_OCSPRequest (ASN1C_OCSP_OCSPRequest& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_OCSPRequest& ASN1C_OCSP_OCSPRequest::getCopy (ASN1T_OCSP_OCSPRequest* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_OCSPRequest);
      new (pDstData) ASN1T_OCSP_OCSPRequest;
   }

   asn1Copy_OCSP_OCSPRequest (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_OCSPRequest* ASN1C_OCSP_OCSPRequest::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_OCSPRequest* pDstData = new ASN1T_OCSP_OCSPRequest;

   asn1Copy_OCSP_OCSPRequest (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_ResponseBytes (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponseBytes* pSrcValue, ASN1T_OCSP_ResponseBytes* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->responseType, (ASN1OBJID*)&pDstValue->responseType);

   rtCopyDynOctStr (pctxt, &pSrcValue->response, &pDstValue->response);

}

ASN1C_OCSP_ResponseBytes::ASN1C_OCSP_ResponseBytes (ASN1C_OCSP_ResponseBytes& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_ResponseBytes::ASN1T_OCSP_ResponseBytes (ASN1C_OCSP_ResponseBytes& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_ResponseBytes& ASN1C_OCSP_ResponseBytes::getCopy (ASN1T_OCSP_ResponseBytes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_ResponseBytes);
      new (pDstData) ASN1T_OCSP_ResponseBytes;
   }

   asn1Copy_OCSP_ResponseBytes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_ResponseBytes* ASN1C_OCSP_ResponseBytes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_ResponseBytes* pDstData = new ASN1T_OCSP_ResponseBytes;

   asn1Copy_OCSP_ResponseBytes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_OCSPResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_OCSPResponse* pSrcValue, ASN1T_OCSP_OCSPResponse* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->responseStatus = pSrcValue->responseStatus;

   if (pSrcValue->m.responseBytesPresent) {
      asn1Copy_OCSP_ResponseBytes (pctxt, &pSrcValue->responseBytes, &pDstValue->responseBytes);
   }

}

ASN1C_OCSP_OCSPResponse::ASN1C_OCSP_OCSPResponse (ASN1C_OCSP_OCSPResponse& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_OCSPResponse::ASN1T_OCSP_OCSPResponse (ASN1C_OCSP_OCSPResponse& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_OCSPResponse& ASN1C_OCSP_OCSPResponse::getCopy (ASN1T_OCSP_OCSPResponse* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_OCSPResponse);
      new (pDstData) ASN1T_OCSP_OCSPResponse;
   }

   asn1Copy_OCSP_OCSPResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_OCSPResponse* ASN1C_OCSP_OCSPResponse::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_OCSPResponse* pDstData = new ASN1T_OCSP_OCSPResponse;

   asn1Copy_OCSP_OCSPResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_ResponderID (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponderID* pSrcValue, ASN1T_OCSP_ResponderID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* byName */
      case 1:
         pDstValue->u.byName = rtxMemAllocType (pctxt, ASN1T_EXP_Name);
         new (pDstValue->u.byName) ASN1T_EXP_Name;
         asn1Copy_EXP_Name (pctxt, pSrcValue->u.byName, pDstValue->u.byName);
         break;

      /* byKey */
      case 2:
         pDstValue->u.byKey = rtxMemAllocType (pctxt, ASN1T_OCSP_KeyHash);
         new (pDstValue->u.byKey) ASN1T_OCSP_KeyHash;
         asn1Copy_OCSP_KeyHash (pctxt, pSrcValue->u.byKey, pDstValue->u.byKey);
         break;

   }
}

ASN1C_OCSP_ResponderID::ASN1C_OCSP_ResponderID (ASN1C_OCSP_ResponderID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_ResponderID::ASN1T_OCSP_ResponderID (ASN1C_OCSP_ResponderID& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_ResponderID& ASN1C_OCSP_ResponderID::getCopy (ASN1T_OCSP_ResponderID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_ResponderID);
      new (pDstData) ASN1T_OCSP_ResponderID;
   }

   asn1Copy_OCSP_ResponderID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_ResponderID* ASN1C_OCSP_ResponderID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_ResponderID* pDstData = new ASN1T_OCSP_ResponderID;

   asn1Copy_OCSP_ResponderID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_RevokedInfo (OSCTXT* pctxt, 
   ASN1T_OCSP_RevokedInfo* pSrcValue, ASN1T_OCSP_RevokedInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->revocationTime, (char **)&pDstValue->revocationTime);

   if (pSrcValue->m.revocationReasonPresent) {
      pDstValue->revocationReason = pSrcValue->revocationReason;
   }

}

ASN1C_OCSP_RevokedInfo::ASN1C_OCSP_RevokedInfo (ASN1C_OCSP_RevokedInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_RevokedInfo::ASN1T_OCSP_RevokedInfo (ASN1C_OCSP_RevokedInfo& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_RevokedInfo& ASN1C_OCSP_RevokedInfo::getCopy (ASN1T_OCSP_RevokedInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_RevokedInfo);
      new (pDstData) ASN1T_OCSP_RevokedInfo;
   }

   asn1Copy_OCSP_RevokedInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_RevokedInfo* ASN1C_OCSP_RevokedInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_RevokedInfo* pDstData = new ASN1T_OCSP_RevokedInfo;

   asn1Copy_OCSP_RevokedInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_CertStatus (OSCTXT* pctxt, 
   ASN1T_OCSP_CertStatus* pSrcValue, ASN1T_OCSP_CertStatus* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* good */
      case 1:
         break;

      /* revoked */
      case 2:
         pDstValue->u.revoked = rtxMemAllocType (pctxt, ASN1T_OCSP_RevokedInfo);
         new (pDstValue->u.revoked) ASN1T_OCSP_RevokedInfo;
         asn1Copy_OCSP_RevokedInfo (pctxt, pSrcValue->u.revoked, pDstValue->u.revoked);
         break;

      /* unknown */
      case 3:
         break;

   }
}

ASN1C_OCSP_CertStatus::ASN1C_OCSP_CertStatus (ASN1C_OCSP_CertStatus& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_CertStatus::ASN1T_OCSP_CertStatus (ASN1C_OCSP_CertStatus& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_CertStatus& ASN1C_OCSP_CertStatus::getCopy (ASN1T_OCSP_CertStatus* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_CertStatus);
      new (pDstData) ASN1T_OCSP_CertStatus;
   }

   asn1Copy_OCSP_CertStatus (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_CertStatus* ASN1C_OCSP_CertStatus::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_CertStatus* pDstData = new ASN1T_OCSP_CertStatus;

   asn1Copy_OCSP_CertStatus (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_SingleResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_SingleResponse* pSrcValue, ASN1T_OCSP_SingleResponse* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_OCSP_CertID (pctxt, &pSrcValue->certID, &pDstValue->certID);

   asn1Copy_OCSP_CertStatus (pctxt, &pSrcValue->certStatus, &pDstValue->certStatus);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->thisUpdate, (char **)&pDstValue->thisUpdate);

   if (pSrcValue->m.nextUpdatePresent) {
      RTCOPYCHARSTR (pctxt, (char *)pSrcValue->nextUpdate, (char **)&pDstValue->nextUpdate);
   }

   if (pSrcValue->m.singleExtensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->singleExtensions, &pDstValue->singleExtensions);
   }

}

ASN1C_OCSP_SingleResponse::ASN1C_OCSP_SingleResponse (ASN1C_OCSP_SingleResponse& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_SingleResponse::ASN1T_OCSP_SingleResponse (ASN1C_OCSP_SingleResponse& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_SingleResponse& ASN1C_OCSP_SingleResponse::getCopy (ASN1T_OCSP_SingleResponse* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_SingleResponse);
      new (pDstData) ASN1T_OCSP_SingleResponse;
   }

   asn1Copy_OCSP_SingleResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_SingleResponse* ASN1C_OCSP_SingleResponse::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_SingleResponse* pDstData = new ASN1T_OCSP_SingleResponse;

   asn1Copy_OCSP_SingleResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP__SeqOfOCSP_SingleResponse (OSCTXT* pctxt, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pSrcValue, 
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_OCSP_SingleResponse* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_OCSP_SingleResponse* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_OCSP_SingleResponse);
         pSrcData = (ASN1T_OCSP_SingleResponse*) pnode->data;

         asn1Copy_OCSP_SingleResponse (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_OCSP__SeqOfOCSP_SingleResponse::ASN1C_OCSP__SeqOfOCSP_SingleResponse (ASN1C_OCSP__SeqOfOCSP_SingleResponse& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_OCSP__SeqOfOCSP_SingleResponse*)pList)
{
}

ASN1C_OCSP__SeqOfOCSP_SingleResponse& ASN1C_OCSP__SeqOfOCSP_SingleResponse::operator= (ASN1C_OCSP__SeqOfOCSP_SingleResponse& srcData)
{
   clear ();
   asn1Copy_OCSP__SeqOfOCSP_SingleResponse (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_OCSP__SeqOfOCSP_SingleResponse& ASN1C_OCSP__SeqOfOCSP_SingleResponse::getCopy (ASN1T_OCSP__SeqOfOCSP_SingleResponse* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP__SeqOfOCSP_SingleResponse);
      new (pDstData) ASN1T_OCSP__SeqOfOCSP_SingleResponse;
   }

   asn1Copy_OCSP__SeqOfOCSP_SingleResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP__SeqOfOCSP_SingleResponse* ASN1C_OCSP__SeqOfOCSP_SingleResponse::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP__SeqOfOCSP_SingleResponse* pDstData = new ASN1T_OCSP__SeqOfOCSP_SingleResponse;

   asn1Copy_OCSP__SeqOfOCSP_SingleResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_ResponseData (OSCTXT* pctxt, 
   ASN1T_OCSP_ResponseData* pSrcValue, ASN1T_OCSP_ResponseData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_OCSP_ResponderID (pctxt, &pSrcValue->responderID, &pDstValue->responderID);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->producedAt, (char **)&pDstValue->producedAt);

   asn1Copy_OCSP__SeqOfOCSP_SingleResponse (pctxt, &pSrcValue->responses, &pDstValue->responses);

   if (pSrcValue->m.responseExtensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->responseExtensions, &pDstValue->responseExtensions);
   }

}

ASN1C_OCSP_ResponseData::ASN1C_OCSP_ResponseData (ASN1C_OCSP_ResponseData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_ResponseData::ASN1T_OCSP_ResponseData (ASN1C_OCSP_ResponseData& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_ResponseData& ASN1C_OCSP_ResponseData::getCopy (ASN1T_OCSP_ResponseData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_ResponseData);
      new (pDstData) ASN1T_OCSP_ResponseData;
   }

   asn1Copy_OCSP_ResponseData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_ResponseData* ASN1C_OCSP_ResponseData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_ResponseData* pDstData = new ASN1T_OCSP_ResponseData;

   asn1Copy_OCSP_ResponseData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_OCSP_BasicOCSPResponse (OSCTXT* pctxt, 
   ASN1T_OCSP_BasicOCSPResponse* pSrcValue, ASN1T_OCSP_BasicOCSPResponse*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_OCSP_ResponseData (pctxt, &pSrcValue->tbsResponseData, &pDstValue->tbsResponseData);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

   if (pSrcValue->m.certsPresent) {
      asn1Copy_OCSP__SeqOfOCSP_Certificate (pctxt, &pSrcValue->certs, &pDstValue->certs);
   }

}

ASN1C_OCSP_BasicOCSPResponse::ASN1C_OCSP_BasicOCSPResponse (ASN1C_OCSP_BasicOCSPResponse& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_OCSP_BasicOCSPResponse::ASN1T_OCSP_BasicOCSPResponse (ASN1C_OCSP_BasicOCSPResponse& original)
{
   original.getCopy (this);
}

ASN1T_OCSP_BasicOCSPResponse& ASN1C_OCSP_BasicOCSPResponse::getCopy (ASN1T_OCSP_BasicOCSPResponse* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_OCSP_BasicOCSPResponse);
      new (pDstData) ASN1T_OCSP_BasicOCSPResponse;
   }

   asn1Copy_OCSP_BasicOCSPResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_OCSP_BasicOCSPResponse* ASN1C_OCSP_BasicOCSPResponse::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_OCSP_BasicOCSPResponse* pDstData = new ASN1T_OCSP_BasicOCSPResponse;

   asn1Copy_OCSP_BasicOCSPResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

