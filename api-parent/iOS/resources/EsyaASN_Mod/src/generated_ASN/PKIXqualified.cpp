/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include <new>
#include "PKIXqualified.h"
#include "rtxsrc/rtxCommon.h"

ASN1OBJID PKIXQUAL_id_pda = {
   8,
   { 1, 3, 6, 1, 5, 5, 7, 9 }
} ;
ASN1OBJID PKIXQUAL_id_qcs = {
   8,
   { 1, 3, 6, 1, 5, 5, 7, 11 }
} ;
ASN1OBJID PKIXQUAL_id_pda_dateOfBirth = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 9, 1 }
} ;
ASN1OBJID PKIXQUAL_id_pda_placeOfBirth = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 9, 2 }
} ;
ASN1OBJID PKIXQUAL_id_pda_gender = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 9, 3 }
} ;
ASN1OBJID PKIXQUAL_id_pda_countryOfCitizenship = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 9, 4 }
} ;
ASN1OBJID PKIXQUAL_id_pda_countryOfResidence = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 9, 5 }
} ;
ASN1OBJID PKIXQUAL_id_pe_biometricInfo = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 1, 2 }
} ;
ASN1OBJID PKIXQUAL_id_pe_qcStatements = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 1, 3 }
} ;
ASN1OBJID PKIXQUAL_id_qcs_pkixQCSyntax_v1 = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 11, 1 }
} ;
ASN1OBJID PKIXQUAL_id_qcs_pkixQCSyntax_v2 = {
   9,
   { 1, 3, 6, 1, 5, 5, 7, 11, 2 }
} ;

ASN1C_PKIXQUAL_DateOfBirth::ASN1C_PKIXQUAL_DateOfBirth
    (ASN1T_PKIXQUAL_DateOfBirth& data) : 
   ASN1CGeneralizedTime(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_DateOfBirth::ASN1C_PKIXQUAL_DateOfBirth (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_DateOfBirth& data) : 
   ASN1CGeneralizedTime (msgBuf, data), msgData (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_DateOfBirth::ASN1C_PKIXQUAL_DateOfBirth (OSRTContext &context
   , ASN1T_PKIXQUAL_DateOfBirth& data) : 
   ASN1CGeneralizedTime (context, data), msgData (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKIXQUAL_DateOfBirth::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_DateOfBirth (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_DateOfBirth::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKIXQUAL_DateOfBirth (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_PKIXQUAL_DateOfBirth (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_DateOfBirth pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_PKIXQUAL_DateOfBirth::MemFree ()
{
   asn1Free_PKIXQUAL_DateOfBirth (getCtxtPtr(), msgData);
}

ASN1T_PKIXQUAL_PlaceOfBirth* new_ASN1T_PKIXQUAL_PlaceOfBirth (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKIXQUAL_PlaceOfBirth));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKIXQUAL_PlaceOfBirth;
}

ASN1C_PKIXQUAL_PlaceOfBirth::ASN1C_PKIXQUAL_PlaceOfBirth
    (ASN1T_PKIXQUAL_PlaceOfBirth& data) : ASN1C_EXP_DirectoryString (data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_PlaceOfBirth::ASN1C_PKIXQUAL_PlaceOfBirth (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_PlaceOfBirth& data) : 
   ASN1C_EXP_DirectoryString (msgBuf, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_PlaceOfBirth::ASN1C_PKIXQUAL_PlaceOfBirth (OSRTContext &context
   , ASN1T_PKIXQUAL_PlaceOfBirth& data) : 
   ASN1C_EXP_DirectoryString (context, data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKIXQUAL_PlaceOfBirth::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_PlaceOfBirth (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_PlaceOfBirth::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKIXQUAL_PlaceOfBirth;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKIXQUAL_PlaceOfBirth (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKIXQUAL_PlaceOfBirth (ASN1T_PKIXQUAL_PlaceOfBirth* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKIXQUAL_PlaceOfBirth;
}

void asn1Free_PKIXQUAL_PlaceOfBirth (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_EXP_DirectoryString (pctxt, pvalue);
}

void ASN1C_PKIXQUAL_PlaceOfBirth::MemFree ()
{
   asn1Free_PKIXQUAL_PlaceOfBirth (getCtxtPtr(), &msgData);
}

ASN1C_PKIXQUAL_Gender::ASN1C_PKIXQUAL_Gender (ASN1T_PKIXQUAL_Gender& data) : 
   ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_Gender::ASN1C_PKIXQUAL_Gender (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKIXQUAL_Gender& data) : ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_Gender::ASN1C_PKIXQUAL_Gender (OSRTContext &context
   , ASN1T_PKIXQUAL_Gender& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKIXQUAL_Gender::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_Gender (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_Gender::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKIXQUAL_Gender (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_PKIXQUAL_Gender (OSCTXT *pctxt, ASN1T_PKIXQUAL_Gender pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_PKIXQUAL_Gender::MemFree ()
{
   asn1Free_PKIXQUAL_Gender (getCtxtPtr(), msgData);
}

ASN1C_PKIXQUAL_CountryOfCitizenship::ASN1C_PKIXQUAL_CountryOfCitizenship
    (ASN1T_PKIXQUAL_CountryOfCitizenship& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_CountryOfCitizenship::ASN1C_PKIXQUAL_CountryOfCitizenship (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_CountryOfCitizenship& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_CountryOfCitizenship::ASN1C_PKIXQUAL_CountryOfCitizenship (
   OSRTContext &context, ASN1T_PKIXQUAL_CountryOfCitizenship& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKIXQUAL_CountryOfCitizenship::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_CountryOfCitizenship (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_CountryOfCitizenship::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKIXQUAL_CountryOfCitizenship (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_PKIXQUAL_CountryOfCitizenship (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_CountryOfCitizenship pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_PKIXQUAL_CountryOfCitizenship::MemFree ()
{
   asn1Free_PKIXQUAL_CountryOfCitizenship (getCtxtPtr(), msgData);
}

ASN1C_PKIXQUAL_CountryOfResidence::ASN1C_PKIXQUAL_CountryOfResidence
    (ASN1T_PKIXQUAL_CountryOfResidence& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_CountryOfResidence::ASN1C_PKIXQUAL_CountryOfResidence (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_CountryOfResidence& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_CountryOfResidence::ASN1C_PKIXQUAL_CountryOfResidence (
   OSRTContext &context, ASN1T_PKIXQUAL_CountryOfResidence& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKIXQUAL_CountryOfResidence::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_CountryOfResidence (msgBuf.getCtxtPtr(), msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_CountryOfResidence::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKIXQUAL_CountryOfResidence (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Free_PKIXQUAL_CountryOfResidence (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_CountryOfResidence pvalue)
{
   if (0 == pvalue) return;
   rtxMemFreePtr (pctxt, (void*)pvalue);
}

void ASN1C_PKIXQUAL_CountryOfResidence::MemFree ()
{
   asn1Free_PKIXQUAL_CountryOfResidence (getCtxtPtr(), msgData);
}

ASN1T_PKIXQUAL_PredefinedBiometricType* 
   new_ASN1T_PKIXQUAL_PredefinedBiometricType (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKIXQUAL_PredefinedBiometricType));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKIXQUAL_PredefinedBiometricType;
}

ASN1C_PKIXQUAL_PredefinedBiometricType::ASN1C_PKIXQUAL_PredefinedBiometricType
    (ASN1T_PKIXQUAL_PredefinedBiometricType& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_PredefinedBiometricType::
   ASN1C_PKIXQUAL_PredefinedBiometricType (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKIXQUAL_PredefinedBiometricType& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_PredefinedBiometricType::
   ASN1C_PKIXQUAL_PredefinedBiometricType (OSRTContext &context
   , ASN1T_PKIXQUAL_PredefinedBiometricType& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


int ASN1C_PKIXQUAL_PredefinedBiometricType::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_PredefinedBiometricType (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_PredefinedBiometricType::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1D_PKIXQUAL_PredefinedBiometricType (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

ASN1T_PKIXQUAL_TypeOfBiometricData* 
   new_ASN1T_PKIXQUAL_TypeOfBiometricData (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKIXQUAL_TypeOfBiometricData));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKIXQUAL_TypeOfBiometricData;
}

ASN1C_PKIXQUAL_TypeOfBiometricData::ASN1C_PKIXQUAL_TypeOfBiometricData
    (ASN1T_PKIXQUAL_TypeOfBiometricData& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_TypeOfBiometricData::ASN1C_PKIXQUAL_TypeOfBiometricData (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_TypeOfBiometricData& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_TypeOfBiometricData::ASN1C_PKIXQUAL_TypeOfBiometricData (
   OSRTContext &context, ASN1T_PKIXQUAL_TypeOfBiometricData& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKIXQUAL_TypeOfBiometricData::~ASN1T_PKIXQUAL_TypeOfBiometricData ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKIXQUAL_TypeOfBiometricData (pctxt, this);
   }
}

int ASN1C_PKIXQUAL_TypeOfBiometricData::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_TypeOfBiometricData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_TypeOfBiometricData::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKIXQUAL_TypeOfBiometricData;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKIXQUAL_TypeOfBiometricData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKIXQUAL_TypeOfBiometricData (
   ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKIXQUAL_TypeOfBiometricData;
}

void asn1Free_PKIXQUAL_TypeOfBiometricData (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue)
{
   if (0 == pvalue) return;
   switch (pvalue->t) {
      case 0: break; /* no choice; nothing to free */
      case 1:
         break;

      case 2:
         if (0 != pvalue->u.biometricDataOid) {
            rtxMemFreePtr (pctxt, (void*)pvalue->u.biometricDataOid);
         }
         break;

   }
}

void ASN1C_PKIXQUAL_TypeOfBiometricData::MemFree ()
{
   asn1Free_PKIXQUAL_TypeOfBiometricData (getCtxtPtr(), &msgData);
}

ASN1T_PKIXQUAL_BiometricData* 
   new_ASN1T_PKIXQUAL_BiometricData (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKIXQUAL_BiometricData));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKIXQUAL_BiometricData;
}

ASN1C_PKIXQUAL_BiometricData::ASN1C_PKIXQUAL_BiometricData
    (ASN1T_PKIXQUAL_BiometricData& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_BiometricData::ASN1C_PKIXQUAL_BiometricData (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_BiometricData& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_BiometricData::ASN1C_PKIXQUAL_BiometricData (
   OSRTContext &context, ASN1T_PKIXQUAL_BiometricData& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKIXQUAL_BiometricData::ASN1T_PKIXQUAL_BiometricData ()
{
   m.sourceDataUriPresent = 0;
   sourceDataUri = 0;
}

ASN1T_PKIXQUAL_BiometricData::~ASN1T_PKIXQUAL_BiometricData ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKIXQUAL_BiometricData (pctxt, this);
   }
}

int ASN1C_PKIXQUAL_BiometricData::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_BiometricData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_BiometricData::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKIXQUAL_BiometricData;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKIXQUAL_BiometricData (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKIXQUAL_BiometricData (ASN1T_PKIXQUAL_BiometricData* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKIXQUAL_BiometricData;
}

void asn1Free_PKIXQUAL_BiometricData (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_BiometricData* pvalue)
{
   if (0 == pvalue) return;
   asn1Free_PKIXQUAL_TypeOfBiometricData (pctxt, &pvalue->typeOfBiometricData);
   asn1Free_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm);
   if (pvalue->biometricDataHash.numocts > 0) {
      rtxMemFreePtr (pctxt, (void*)pvalue->biometricDataHash.data);
      pvalue->biometricDataHash.numocts = 0;
      pvalue->biometricDataHash.data = 0;
   }
   if (pvalue->m.sourceDataUriPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->sourceDataUri);
   }
}

void ASN1C_PKIXQUAL_BiometricData::MemFree ()
{
   asn1Free_PKIXQUAL_BiometricData (getCtxtPtr(), &msgData);
}

ASN1C_PKIXQUAL_BiometricSyntax::ASN1C_PKIXQUAL_BiometricSyntax
    (ASN1T_PKIXQUAL_BiometricSyntax& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_BiometricSyntax::ASN1C_PKIXQUAL_BiometricSyntax (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_BiometricSyntax& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_BiometricSyntax::ASN1C_PKIXQUAL_BiometricSyntax (
   OSRTContext &context, ASN1T_PKIXQUAL_BiometricSyntax& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKIXQUAL_BiometricSyntax::
   ASN1C_PKIXQUAL_BiometricSyntax (ASN1CType& ccobj
   , ASN1T_PKIXQUAL_BiometricSyntax& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKIXQUAL_BiometricSyntax::Append (ASN1T_PKIXQUAL_BiometricData* elem)
{
   append ((void*)elem);
}

ASN1T_PKIXQUAL_BiometricData* ASN1C_PKIXQUAL_BiometricSyntax::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_PKIXQUAL_BiometricData));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKIXQUAL_BiometricData;
}

ASN1T_PKIXQUAL_BiometricData* ASN1C_PKIXQUAL_BiometricSyntax::AppendNewElement ()
{
   ASN1T_PKIXQUAL_BiometricData* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKIXQUAL_BiometricSyntax::~ASN1T_PKIXQUAL_BiometricSyntax ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKIXQUAL_BiometricSyntax (pctxt, this);
   }
}

int ASN1C_PKIXQUAL_BiometricSyntax::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_BiometricSyntax (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_BiometricSyntax::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKIXQUAL_BiometricSyntax;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKIXQUAL_BiometricSyntax (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKIXQUAL_BiometricSyntax (ASN1T_PKIXQUAL_BiometricSyntax* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKIXQUAL_BiometricSyntax;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKIXQUAL_BiometricSyntax (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_BiometricSyntax* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_PKIXQUAL_BiometricData* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_PKIXQUAL_BiometricData*)pnode->data;
      asn1Free_PKIXQUAL_BiometricData (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKIXQUAL_BiometricSyntax::MemFree ()
{
   asn1Free_PKIXQUAL_BiometricSyntax (getCtxtPtr(), &msgData);
}

ASN1T_PKIXQUAL_QCStatement* new_ASN1T_PKIXQUAL_QCStatement (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKIXQUAL_QCStatement));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKIXQUAL_QCStatement;
}

ASN1C_PKIXQUAL_QCStatement::ASN1C_PKIXQUAL_QCStatement
    (ASN1T_PKIXQUAL_QCStatement& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_QCStatement::ASN1C_PKIXQUAL_QCStatement (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_QCStatement& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_QCStatement::ASN1C_PKIXQUAL_QCStatement (OSRTContext &context
   , ASN1T_PKIXQUAL_QCStatement& data) : ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKIXQUAL_QCStatement::ASN1T_PKIXQUAL_QCStatement ()
{
   m.statementInfoPresent = 0;
}

ASN1T_PKIXQUAL_QCStatement::~ASN1T_PKIXQUAL_QCStatement ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKIXQUAL_QCStatement (pctxt, this);
   }
}

int ASN1C_PKIXQUAL_QCStatement::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_QCStatement (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_QCStatement::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKIXQUAL_QCStatement;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKIXQUAL_QCStatement (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKIXQUAL_QCStatement (ASN1T_PKIXQUAL_QCStatement* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKIXQUAL_QCStatement;
}

void asn1Free_PKIXQUAL_QCStatement (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_QCStatement* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.statementInfoPresent) {
      rtxMemFreePtr (pctxt, (void*)pvalue->statementInfo.data);
   }
}

void ASN1C_PKIXQUAL_QCStatement::MemFree ()
{
   asn1Free_PKIXQUAL_QCStatement (getCtxtPtr(), &msgData);
}

ASN1C_PKIXQUAL_QCStatements::ASN1C_PKIXQUAL_QCStatements
    (ASN1T_PKIXQUAL_QCStatements& data) : ASN1CSeqOfList(data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_QCStatements::ASN1C_PKIXQUAL_QCStatements (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_QCStatements& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_QCStatements::ASN1C_PKIXQUAL_QCStatements (OSRTContext &context
   , ASN1T_PKIXQUAL_QCStatements& data) : ASN1CSeqOfList(context, data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKIXQUAL_QCStatements::ASN1C_PKIXQUAL_QCStatements (ASN1CType& ccobj
   , ASN1T_PKIXQUAL_QCStatements& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKIXQUAL_QCStatements::Append (ASN1T_PKIXQUAL_QCStatement* elem)
{
   append ((void*)elem);
}

ASN1T_PKIXQUAL_QCStatement* ASN1C_PKIXQUAL_QCStatements::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_PKIXQUAL_QCStatement));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKIXQUAL_QCStatement;
}

ASN1T_PKIXQUAL_QCStatement* ASN1C_PKIXQUAL_QCStatements::AppendNewElement ()
{
   ASN1T_PKIXQUAL_QCStatement* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKIXQUAL_QCStatements::~ASN1T_PKIXQUAL_QCStatements ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKIXQUAL_QCStatements (pctxt, this);
   }
}

int ASN1C_PKIXQUAL_QCStatements::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_QCStatements (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_QCStatements::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKIXQUAL_QCStatements;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKIXQUAL_QCStatements (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKIXQUAL_QCStatements (ASN1T_PKIXQUAL_QCStatements* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKIXQUAL_QCStatements;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKIXQUAL_QCStatements (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_QCStatements* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_PKIXQUAL_QCStatement* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_PKIXQUAL_QCStatement*)pnode->data;
      asn1Free_PKIXQUAL_QCStatement (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKIXQUAL_QCStatements::MemFree ()
{
   asn1Free_PKIXQUAL_QCStatements (getCtxtPtr(), &msgData);
}

ASN1C_PKIXQUAL_NameRegistrationAuthorities::
   ASN1C_PKIXQUAL_NameRegistrationAuthorities
    (ASN1T_PKIXQUAL_NameRegistrationAuthorities& data) : ASN1CSeqOfList(data)
   , msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_NameRegistrationAuthorities::
   ASN1C_PKIXQUAL_NameRegistrationAuthorities (OSRTMessageBufferIF& msgBuf
   , ASN1T_PKIXQUAL_NameRegistrationAuthorities& data) : 
   ASN1CSeqOfList(msgBuf, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_NameRegistrationAuthorities::
   ASN1C_PKIXQUAL_NameRegistrationAuthorities (OSRTContext &context
   , ASN1T_PKIXQUAL_NameRegistrationAuthorities& data) : 
   ASN1CSeqOfList(context, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1C_PKIXQUAL_NameRegistrationAuthorities::
   ASN1C_PKIXQUAL_NameRegistrationAuthorities (ASN1CType& ccobj
   , ASN1T_PKIXQUAL_NameRegistrationAuthorities& data) :
   ASN1CSeqOfList(ccobj, data), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

void ASN1C_PKIXQUAL_NameRegistrationAuthorities::Append (ASN1T_IMP_GeneralName* elem)
{
   append ((void*)elem);
}

ASN1T_IMP_GeneralName* ASN1C_PKIXQUAL_NameRegistrationAuthorities::NewElement ()
{
   void* pdata = memAlloc (sizeof(ASN1T_IMP_GeneralName));

   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_IMP_GeneralName;
}

ASN1T_IMP_GeneralName* ASN1C_PKIXQUAL_NameRegistrationAuthorities::AppendNewElement ()
{
   ASN1T_IMP_GeneralName* pdata = NewElement();
   if (0 != pdata) {
      Append (pdata);
   }
   return pdata;
}

ASN1T_PKIXQUAL_NameRegistrationAuthorities::~ASN1T_PKIXQUAL_NameRegistrationAuthorities ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKIXQUAL_NameRegistrationAuthorities (pctxt, this);
   }
}

int ASN1C_PKIXQUAL_NameRegistrationAuthorities::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_NameRegistrationAuthorities (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_NameRegistrationAuthorities::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKIXQUAL_NameRegistrationAuthorities;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKIXQUAL_NameRegistrationAuthorities (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKIXQUAL_NameRegistrationAuthorities (
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKIXQUAL_NameRegistrationAuthorities;
   rtxDListFastInit (pvalue);
}

void asn1Free_PKIXQUAL_NameRegistrationAuthorities (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue)
{
   if (0 == pvalue) return;
   { ASN1T_IMP_GeneralName* pdata;
   OSRTDListNode* pnode = pvalue->head;
   while (0 != pnode) {
      pdata = (ASN1T_IMP_GeneralName*)pnode->data;
      asn1Free_IMP_GeneralName (pctxt, pdata);
      pnode = pnode->next;
   }
   rtxDListFreeAll (pctxt, pvalue);
   }
}

void ASN1C_PKIXQUAL_NameRegistrationAuthorities::MemFree ()
{
   asn1Free_PKIXQUAL_NameRegistrationAuthorities (getCtxtPtr(), &msgData);
}

ASN1T_PKIXQUAL_SemanticsInformation* 
   new_ASN1T_PKIXQUAL_SemanticsInformation (ASN1CType& ccobj)
{
   void* pdata = ccobj.memAlloc (sizeof(ASN1T_PKIXQUAL_SemanticsInformation));
   if (0 == pdata) return 0;
   else return new (pdata) ASN1T_PKIXQUAL_SemanticsInformation;
}

ASN1C_PKIXQUAL_SemanticsInformation::ASN1C_PKIXQUAL_SemanticsInformation
    (ASN1T_PKIXQUAL_SemanticsInformation& data) : ASN1CType(), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}

ASN1C_PKIXQUAL_SemanticsInformation::ASN1C_PKIXQUAL_SemanticsInformation (
   OSRTMessageBufferIF& msgBuf, ASN1T_PKIXQUAL_SemanticsInformation& data) : 
   ASN1CType(msgBuf), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}
ASN1C_PKIXQUAL_SemanticsInformation::ASN1C_PKIXQUAL_SemanticsInformation (
   OSRTContext &context, ASN1T_PKIXQUAL_SemanticsInformation& data) : 
   ASN1CType(context), msgData(data)
{
   setRunTimeKey (_rtkey, sizeof(_rtkey));
}


ASN1T_PKIXQUAL_SemanticsInformation::ASN1T_PKIXQUAL_SemanticsInformation ()
{
   m.semanticsIndentifierPresent = 0;
   m.nameRegistrationAuthoritiesPresent = 0;
}

ASN1T_PKIXQUAL_SemanticsInformation::~ASN1T_PKIXQUAL_SemanticsInformation ()
{
   OSCTXT* pctxt = mpContext.getCtxtPtr();
   if (pctxt != 0 && !rtxMemHeapIsEmpty (pctxt)) {
      asn1Free_PKIXQUAL_SemanticsInformation (pctxt, this);
   }
}

int ASN1C_PKIXQUAL_SemanticsInformation::EncodeTo (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   return asn1E_PKIXQUAL_SemanticsInformation (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL);
}

int ASN1C_PKIXQUAL_SemanticsInformation::DecodeFrom (OSRTMessageBufferIF& msgBuf)
{
   int stat = setMsgBuf (msgBuf, TRUE);
   if (stat != 0) return (stat);

   new (&msgData) ASN1T_PKIXQUAL_SemanticsInformation;
   msgData.setContext (msgBuf.getContext());
   return asn1D_PKIXQUAL_SemanticsInformation (msgBuf.getCtxtPtr(), &msgData, ASN1EXPL, 0);
}

void asn1Init_PKIXQUAL_SemanticsInformation (
   ASN1T_PKIXQUAL_SemanticsInformation* pvalue)
{
   if (0 == pvalue) return;
   new (pvalue) ASN1T_PKIXQUAL_SemanticsInformation;
}

void asn1Free_PKIXQUAL_SemanticsInformation (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_SemanticsInformation* pvalue)
{
   if (0 == pvalue) return;
   if (pvalue->m.nameRegistrationAuthoritiesPresent) {
      asn1Free_PKIXQUAL_NameRegistrationAuthorities (pctxt, &pvalue->nameRegistrationAuthorities);
   }
}

void ASN1C_PKIXQUAL_SemanticsInformation::MemFree ()
{
   asn1Free_PKIXQUAL_SemanticsInformation (getCtxtPtr(), &msgData);
}

