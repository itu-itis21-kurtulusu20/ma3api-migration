/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#include "Implicit.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtCompare.h"
#include "rtxsrc/rtxCommon.h"

OSBOOL asn1Compare_IMP_AnotherName (const char* name, 
   ASN1T_IMP_AnotherName* pValue, ASN1T_IMP_AnotherName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".type_id", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->type_id, (ASN1OBJID*)&pCmpValue->type_id, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".value", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->value.numocts,
   pValue->value.data,
   pCmpValue->value.numocts,
   pCmpValue->value.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_IMP_AnotherName::Equals (ASN1T_IMP_AnotherName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_AnotherName ("AnotherName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_EDIPartyName (const char* name, 
   ASN1T_IMP_EDIPartyName* pValue, ASN1T_IMP_EDIPartyName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".nameAssigner", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.nameAssignerPresent,
   pCmpValue->m.nameAssignerPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.nameAssignerPresent) 
   {
      if (! asn1Compare_EXP_DirectoryString (namebuf, &pValue->nameAssigner, &pCmpValue->nameAssigner, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".partyName", 0, 0, 0);
   if (! asn1Compare_EXP_DirectoryString (namebuf, &pValue->partyName, &pCmpValue->partyName, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_IMP_EDIPartyName::Equals (ASN1T_IMP_EDIPartyName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_EDIPartyName ("EDIPartyName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_GeneralName (const char* name, 
   ASN1T_IMP_GeneralName* pValue, ASN1T_IMP_GeneralName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* otherName */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.otherName", 0, 0, 0);
         if (! asn1Compare_IMP_AnotherName (namebuf, pValue->u.otherName, pCmpValue->u.otherName, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* rfc822Name */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.rfc822Name", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.rfc822Name, pCmpValue->u.rfc822Name, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* dNSName */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.dNSName", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.dNSName, pCmpValue->u.dNSName, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* x400Address */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.x400Address", 0, 0, 0);
         if (! asn1Compare_EXP_ORAddress (namebuf, pValue->u.x400Address, pCmpValue->u.x400Address, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* directoryName */
      case 5:
         rtxStrJoin (namebuf, 512, name, ".u.directoryName", 0, 0, 0);
         if (! asn1Compare_EXP_Name (namebuf, pValue->u.directoryName, pCmpValue->u.directoryName, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* ediPartyName */
      case 6:
         rtxStrJoin (namebuf, 512, name, ".u.ediPartyName", 0, 0, 0);
         if (! asn1Compare_IMP_EDIPartyName (namebuf, pValue->u.ediPartyName, pCmpValue->u.ediPartyName, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* uniformResourceIdentifier */
      case 7:
         rtxStrJoin (namebuf, 512, name, ".u.uniformResourceIdentifier", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.uniformResourceIdentifier, pCmpValue->u.uniformResourceIdentifier, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* iPAddress */
      case 8:
         rtxStrJoin (namebuf, 512, name, ".u.iPAddress", 0, 0, 0);
         if ( !rtCmpOctStr (namebuf, pValue->u.iPAddress->numocts, 
            pValue->u.iPAddress->data, pCmpValue->u.iPAddress->numocts, 
            pCmpValue->u.iPAddress->data, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* registeredID */
      case 9:
         rtxStrJoin (namebuf, 512, name, ".u.registeredID", 0, 0, 0);
         if ( !rtCmpOID (namebuf, (ASN1OBJID*)pValue->u.registeredID, (ASN1OBJID*)pCmpValue->u.registeredID, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_IMP_GeneralName::Equals (ASN1T_IMP_GeneralName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_GeneralName ("GeneralName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_GeneralNames (const char* name, 
   ASN1T_IMP_GeneralNames* pValue, ASN1T_IMP_GeneralNames* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_IMP_GeneralName* pdata;
   ASN1T_IMP_GeneralName* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_GeneralName*) pnode->data;
      pCmpdata = (ASN1T_IMP_GeneralName*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_GeneralName (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_GeneralNames::Equals (ASN1T_IMP_GeneralNames* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_GeneralNames ("GeneralNames", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_SubjectAltName (const char* name, 
   ASN1T_IMP_SubjectAltName* pValue, ASN1T_IMP_SubjectAltName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_IMP_GeneralNames (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_SubjectAltName::Equals (ASN1T_IMP_SubjectAltName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_SubjectAltName ("SubjectAltName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_KeyIdentifier (const char* name, 
   ASN1T_IMP_KeyIdentifier* pValue, ASN1T_IMP_KeyIdentifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_KeyIdentifier::Equals (ASN1T_IMP_KeyIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_KeyIdentifier ("KeyIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_SubjectKeyIdentifier (const char* name, 
   ASN1T_IMP_SubjectKeyIdentifier* pValue, 
   ASN1T_IMP_SubjectKeyIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpOctStr (name, pValue->numocts, pValue->data, 
      pCmpValue->numocts, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_SubjectKeyIdentifier::Equals (ASN1T_IMP_SubjectKeyIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_SubjectKeyIdentifier ("SubjectKeyIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_KeyUsage (const char* name, ASN1T_IMP_KeyUsage* pValue, 
   ASN1T_IMP_KeyUsage* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpBitStr (name, pValue->numbits, pValue->data, 
      pCmpValue->numbits, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_KeyUsage::Equals (ASN1T_IMP_KeyUsage* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_KeyUsage ("KeyUsage", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_CertPolicyId (const char* name, 
   ASN1T_IMP_CertPolicyId* pValue, ASN1T_IMP_CertPolicyId* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_CertPolicyId::Equals (ASN1T_IMP_CertPolicyId* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_CertPolicyId ("CertPolicyId", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_PolicyQualifierId (const char* name, 
   ASN1T_IMP_PolicyQualifierId* pValue, 
   ASN1T_IMP_PolicyQualifierId* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_PolicyQualifierId::Equals (ASN1T_IMP_PolicyQualifierId* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_PolicyQualifierId ("PolicyQualifierId", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_CPSuri (const char* name, ASN1T_IMP_CPSuri* pValue, 
   ASN1T_IMP_CPSuri* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_CPSuri::Equals (ASN1T_IMP_CPSuri* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_CPSuri ("CPSuri", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_KeyPurposeId (const char* name, 
   ASN1T_IMP_KeyPurposeId* pValue, ASN1T_IMP_KeyPurposeId* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_KeyPurposeId::Equals (ASN1T_IMP_KeyPurposeId* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_KeyPurposeId ("KeyPurposeId", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_ReasonFlags (const char* name, 
   ASN1T_IMP_ReasonFlags* pValue, ASN1T_IMP_ReasonFlags* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpBitStr (name, pValue->numbits, pValue->data, 
      pCmpValue->numbits, pCmpValue->data, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_ReasonFlags::Equals (ASN1T_IMP_ReasonFlags* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_ReasonFlags ("ReasonFlags", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_CRLNumber (const char* name, 
   ASN1T_IMP_CRLNumber* pValue, ASN1T_IMP_CRLNumber* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_CRLNumber::Equals (ASN1T_IMP_CRLNumber* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_CRLNumber ("CRLNumber", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_CRLReason (const char* name, 
   ASN1T_IMP_CRLReason* pValue, ASN1T_IMP_CRLReason* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpInteger (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_CRLReason::Equals (ASN1T_IMP_CRLReason* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_CRLReason ("CRLReason", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_BaseDistance (const char* name, 
   ASN1T_IMP_BaseDistance* pValue, ASN1T_IMP_BaseDistance* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpUnsigned (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_BaseDistance::Equals (ASN1T_IMP_BaseDistance* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_BaseDistance ("BaseDistance", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_SkipCerts (const char* name, 
   ASN1T_IMP_SkipCerts* pValue, ASN1T_IMP_SkipCerts* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   return rtCmpUnsigned (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_SkipCerts::Equals (ASN1T_IMP_SkipCerts* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_SkipCerts ("SkipCerts", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_InhibitAnyPolicy (const char* name, 
   ASN1T_IMP_InhibitAnyPolicy* pValue, ASN1T_IMP_InhibitAnyPolicy* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_IMP_SkipCerts (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_InhibitAnyPolicy::Equals (ASN1T_IMP_InhibitAnyPolicy* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_InhibitAnyPolicy ("InhibitAnyPolicy", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_DistributionPointName (const char* name, 
   ASN1T_IMP_DistributionPointName* pValue, 
   ASN1T_IMP_DistributionPointName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* fullName */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.fullName", 0, 0, 0);
         if (! asn1Compare_IMP_GeneralNames (namebuf, pValue->u.fullName, pCmpValue->u.fullName, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* nameRelativeToCRLIssuer */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.nameRelativeToCRLIssuer", 0, 0, 0);
         if (! asn1Compare_EXP_RelativeDistinguishedName (namebuf, pValue->u.nameRelativeToCRLIssuer, pCmpValue->u.nameRelativeToCRLIssuer, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_IMP_DistributionPointName::Equals (ASN1T_IMP_DistributionPointName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_DistributionPointName ("DistributionPointName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_DistributionPoint (const char* name, 
   ASN1T_IMP_DistributionPoint* pValue, 
   ASN1T_IMP_DistributionPoint* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".distributionPoint", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.distributionPointPresent,
   pCmpValue->m.distributionPointPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.distributionPointPresent) 
   {
      if (! asn1Compare_IMP_DistributionPointName (namebuf, &pValue->distributionPoint, &pCmpValue->distributionPoint, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".reasons", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.reasonsPresent,
   pCmpValue->m.reasonsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.reasonsPresent) 
   {
      if (! asn1Compare_IMP_ReasonFlags (namebuf, &pValue->reasons, &pCmpValue->reasons, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".cRLIssuer", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.cRLIssuerPresent,
   pCmpValue->m.cRLIssuerPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.cRLIssuerPresent) 
   {
      if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->cRLIssuer, &pCmpValue->cRLIssuer, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_IMP_DistributionPoint::Equals (ASN1T_IMP_DistributionPoint* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_DistributionPoint ("DistributionPoint", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_CRLDistributionPoints (const char* name, 
   ASN1T_IMP_CRLDistributionPoints* pValue, 
   ASN1T_IMP_CRLDistributionPoints* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_IMP_DistributionPoint* pdata;
   ASN1T_IMP_DistributionPoint* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_DistributionPoint*) pnode->data;
      pCmpdata = (ASN1T_IMP_DistributionPoint*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_DistributionPoint (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_CRLDistributionPoints::Equals (ASN1T_IMP_CRLDistributionPoints* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_CRLDistributionPoints ("CRLDistributionPoints", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_FreshestCRL (const char* name, 
   ASN1T_IMP_FreshestCRL* pValue, ASN1T_IMP_FreshestCRL* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_IMP_CRLDistributionPoints (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_FreshestCRL::Equals (ASN1T_IMP_FreshestCRL* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_FreshestCRL ("FreshestCRL", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_BaseCRLNumber (const char* name, 
   ASN1T_IMP_BaseCRLNumber* pValue, ASN1T_IMP_BaseCRLNumber* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_IMP_CRLNumber (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_BaseCRLNumber::Equals (ASN1T_IMP_BaseCRLNumber* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_BaseCRLNumber ("BaseCRLNumber", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_IssuerAltName (const char* name, 
   ASN1T_IMP_IssuerAltName* pValue, ASN1T_IMP_IssuerAltName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_IMP_GeneralNames (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_IssuerAltName::Equals (ASN1T_IMP_IssuerAltName* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_IssuerAltName ("IssuerAltName", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_HoldInstructionCode (const char* name, 
   ASN1T_IMP_HoldInstructionCode* pValue, 
   ASN1T_IMP_HoldInstructionCode* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpOID (name, (ASN1OBJID*)pValue, (ASN1OBJID*)pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_HoldInstructionCode::Equals (ASN1T_IMP_HoldInstructionCode* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_HoldInstructionCode ("HoldInstructionCode", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_InvalidityDate (const char* name, 
   ASN1T_IMP_InvalidityDate* pValue, ASN1T_IMP_InvalidityDate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   return rtCmpCharStr (name, *pValue, *pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_InvalidityDate::Equals (ASN1T_IMP_InvalidityDate* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_InvalidityDate ("InvalidityDate", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_CertificateIssuer (const char* name, 
   ASN1T_IMP_CertificateIssuer* pValue, 
   ASN1T_IMP_CertificateIssuer* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   return asn1Compare_IMP_GeneralNames (name, pValue, pCmpValue, errBuff, errBuffSize);
}

OSBOOL ASN1C_IMP_CertificateIssuer::Equals (ASN1T_IMP_CertificateIssuer* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_CertificateIssuer ("CertificateIssuer", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_AuthorityKeyIdentifier (const char* name, 
   ASN1T_IMP_AuthorityKeyIdentifier* pValue, 
   ASN1T_IMP_AuthorityKeyIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".keyIdentifier", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.keyIdentifierPresent,
   pCmpValue->m.keyIdentifierPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.keyIdentifierPresent) 
   {
      if (! asn1Compare_IMP_KeyIdentifier (namebuf, &pValue->keyIdentifier, &pCmpValue->keyIdentifier, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".authorityCertIssuer", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.authorityCertIssuerPresent,
   pCmpValue->m.authorityCertIssuerPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.authorityCertIssuerPresent) 
   {
      if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->authorityCertIssuer, &pCmpValue->authorityCertIssuer, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".authorityCertSerialNumber", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.authorityCertSerialNumberPresent,
   pCmpValue->m.authorityCertSerialNumberPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.authorityCertSerialNumberPresent) 
   {
      if (! asn1Compare_EXP_CertificateSerialNumber (namebuf, &pValue->authorityCertSerialNumber, &pCmpValue->authorityCertSerialNumber, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_IMP_AuthorityKeyIdentifier::Equals (ASN1T_IMP_AuthorityKeyIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_AuthorityKeyIdentifier ("AuthorityKeyIdentifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_PolicyQualifierInfo (const char* name, 
   ASN1T_IMP_PolicyQualifierInfo* pValue, 
   ASN1T_IMP_PolicyQualifierInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".policyQualifierId", 0, 0, 0);
   if (! asn1Compare_IMP_PolicyQualifierId (namebuf, &pValue->policyQualifierId, &pCmpValue->policyQualifierId, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".qualifier", 0, 0, 0);
   if ( !rtCmpOpenType (namebuf,
   pValue->qualifier.numocts,
   pValue->qualifier.data,
   pCmpValue->qualifier.numocts,
   pCmpValue->qualifier.data, errBuff, errBuffSize))
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_IMP_PolicyQualifierInfo::Equals (ASN1T_IMP_PolicyQualifierInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_PolicyQualifierInfo ("PolicyQualifierInfo", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_PolicyInformation_policyQualifiers (const char* name, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pValue, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_IMP_PolicyQualifierInfo* pdata;
   ASN1T_IMP_PolicyQualifierInfo* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_PolicyQualifierInfo*) pnode->data;
      pCmpdata = (ASN1T_IMP_PolicyQualifierInfo*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_PolicyQualifierInfo (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_PolicyInformation_policyQualifiers::Equals (ASN1T_IMP_PolicyInformation_policyQualifiers* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_PolicyInformation_policyQualifiers ("PolicyInformation_policyQualifiers", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_PolicyInformation (const char* name, 
   ASN1T_IMP_PolicyInformation* pValue, 
   ASN1T_IMP_PolicyInformation* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".policyIdentifier", 0, 0, 0);
   if (! asn1Compare_IMP_CertPolicyId (namebuf, &pValue->policyIdentifier, &pCmpValue->policyIdentifier, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".policyQualifiers", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.policyQualifiersPresent,
   pCmpValue->m.policyQualifiersPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.policyQualifiersPresent) 
   {
      if (! asn1Compare_IMP_PolicyInformation_policyQualifiers (namebuf, &pValue->policyQualifiers, &pCmpValue->policyQualifiers, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_IMP_PolicyInformation::Equals (ASN1T_IMP_PolicyInformation* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_PolicyInformation ("PolicyInformation", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_CertificatePolicies (const char* name, 
   ASN1T_IMP_CertificatePolicies* pValue, 
   ASN1T_IMP_CertificatePolicies* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_IMP_PolicyInformation* pdata;
   ASN1T_IMP_PolicyInformation* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_PolicyInformation*) pnode->data;
      pCmpdata = (ASN1T_IMP_PolicyInformation*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_PolicyInformation (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_CertificatePolicies::Equals (ASN1T_IMP_CertificatePolicies* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_CertificatePolicies ("CertificatePolicies", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_DisplayText (const char* name, 
   ASN1T_IMP_DisplayText* pValue, ASN1T_IMP_DisplayText* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* utf8String */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.utf8String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, (const char*)pValue->u.utf8String, (const char*)pCmpValue->u.utf8String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* ia5String */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.ia5String", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.ia5String, pCmpValue->u.ia5String, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* visibleString */
      case 3:
         rtxStrJoin (namebuf, 512, name, ".u.visibleString", 0, 0, 0);
         if ( !rtCmpCharStr (namebuf, pValue->u.visibleString, pCmpValue->u.visibleString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* bmpString */
      case 4:
         rtxStrJoin (namebuf, 512, name, ".u.bmpString", 0, 0, 0);
         if ( !rtCmp16BitCharStr (namebuf, pValue->u.bmpString, pCmpValue->u.bmpString, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_IMP_DisplayText::Equals (ASN1T_IMP_DisplayText* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_DisplayText ("DisplayText", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_NoticeReference_noticeNumbers (const char* name, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pValue, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   OSINT32* pdata;
   OSINT32* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (OSINT32*) pnode->data;
      pCmpdata = (OSINT32*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if ( !rtCmpInteger (namebuf, *pdata, *pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_NoticeReference_noticeNumbers::Equals (ASN1T_IMP_NoticeReference_noticeNumbers* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_NoticeReference_noticeNumbers ("NoticeReference_noticeNumbers", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_NoticeReference (const char* name, 
   ASN1T_IMP_NoticeReference* pValue, ASN1T_IMP_NoticeReference* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".organization", 0, 0, 0);
   if (! asn1Compare_IMP_DisplayText (namebuf, &pValue->organization, &pCmpValue->organization, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".noticeNumbers", 0, 0, 0);
   if (! asn1Compare_IMP_NoticeReference_noticeNumbers (namebuf, &pValue->noticeNumbers, &pCmpValue->noticeNumbers, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_IMP_NoticeReference::Equals (ASN1T_IMP_NoticeReference* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_NoticeReference ("NoticeReference", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_UserNotice (const char* name, 
   ASN1T_IMP_UserNotice* pValue, ASN1T_IMP_UserNotice* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".noticeRef", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.noticeRefPresent,
   pCmpValue->m.noticeRefPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.noticeRefPresent) 
   {
      if (! asn1Compare_IMP_NoticeReference (namebuf, &pValue->noticeRef, &pCmpValue->noticeRef, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".explicitText", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.explicitTextPresent,
   pCmpValue->m.explicitTextPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.explicitTextPresent) 
   {
      if (! asn1Compare_IMP_DisplayText (namebuf, &pValue->explicitText, &pCmpValue->explicitText, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_IMP_UserNotice::Equals (ASN1T_IMP_UserNotice* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_UserNotice ("UserNotice", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_Qualifier (const char* name, 
   ASN1T_IMP_Qualifier* pValue, ASN1T_IMP_Qualifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   if ( !rtCmpTag (name,
   pValue->t,
   pCmpValue->t, errBuff, errBuffSize))
   {
      return FALSE;
   }
   switch (pValue->t)
   {
      /* userNotice */
      case 1:
         rtxStrJoin (namebuf, 512, name, ".u.userNotice", 0, 0, 0);
         if (! asn1Compare_IMP_UserNotice (namebuf, pValue->u.userNotice, pCmpValue->u.userNotice, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      /* cPSuri */
      case 2:
         rtxStrJoin (namebuf, 512, name, ".u.cPSuri", 0, 0, 0);
         if (! asn1Compare_IMP_CPSuri (namebuf, &pValue->u.cPSuri, &pCmpValue->u.cPSuri, errBuff, errBuffSize)) 
         {
            retval = FALSE;
         }
         break;

      default:;
   }
   return retval;
}

OSBOOL ASN1C_IMP_Qualifier::Equals (ASN1T_IMP_Qualifier* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_Qualifier ("Qualifier", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_PolicyMappings_element (const char* name, 
   ASN1T_IMP_PolicyMappings_element* pValue, 
   ASN1T_IMP_PolicyMappings_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".issuerDomainPolicy", 0, 0, 0);
   if (! asn1Compare_IMP_CertPolicyId (namebuf, &pValue->issuerDomainPolicy, &pCmpValue->issuerDomainPolicy, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".subjectDomainPolicy", 0, 0, 0);
   if (! asn1Compare_IMP_CertPolicyId (namebuf, &pValue->subjectDomainPolicy, &pCmpValue->subjectDomainPolicy, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_IMP_PolicyMappings_element::Equals (ASN1T_IMP_PolicyMappings_element* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_PolicyMappings_element ("PolicyMappings_element", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_PolicyMappings (const char* name, 
   ASN1T_IMP_PolicyMappings* pValue, ASN1T_IMP_PolicyMappings* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_IMP_PolicyMappings_element* pdata;
   ASN1T_IMP_PolicyMappings_element* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_PolicyMappings_element*) pnode->data;
      pCmpdata = (ASN1T_IMP_PolicyMappings_element*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_PolicyMappings_element (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_PolicyMappings::Equals (ASN1T_IMP_PolicyMappings* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_PolicyMappings ("PolicyMappings", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_BasicConstraints (const char* name, 
   ASN1T_IMP_BasicConstraints* pValue, ASN1T_IMP_BasicConstraints* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".cA", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->cA, pCmpValue->cA, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".pathLenConstraint", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.pathLenConstraintPresent,
   pCmpValue->m.pathLenConstraintPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.pathLenConstraintPresent) 
   {
      if ( !rtCmpUnsigned (namebuf, pValue->pathLenConstraint, pCmpValue->pathLenConstraint, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_IMP_BasicConstraints::Equals (ASN1T_IMP_BasicConstraints* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_BasicConstraints ("BasicConstraints", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_ExtKeyUsageSyntax (const char* name, 
   ASN1T_IMP_ExtKeyUsageSyntax* pValue, 
   ASN1T_IMP_ExtKeyUsageSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_IMP_KeyPurposeId* pdata;
   ASN1T_IMP_KeyPurposeId* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_KeyPurposeId*) pnode->data;
      pCmpdata = (ASN1T_IMP_KeyPurposeId*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_KeyPurposeId (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_ExtKeyUsageSyntax::Equals (ASN1T_IMP_ExtKeyUsageSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_ExtKeyUsageSyntax ("ExtKeyUsageSyntax", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_AccessDescription (const char* name, 
   ASN1T_IMP_AccessDescription* pValue, 
   ASN1T_IMP_AccessDescription* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".accessMethod", 0, 0, 0);
   if ( !rtCmpOID (namebuf, (ASN1OBJID*)&pValue->accessMethod, (ASN1OBJID*)&pCmpValue->accessMethod, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".accessLocation", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->accessLocation, &pCmpValue->accessLocation, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_IMP_AccessDescription::Equals (ASN1T_IMP_AccessDescription* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_AccessDescription ("AccessDescription", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_AuthorityInfoAccessSyntax (const char* name, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pValue, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_IMP_AccessDescription* pdata;
   ASN1T_IMP_AccessDescription* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_AccessDescription*) pnode->data;
      pCmpdata = (ASN1T_IMP_AccessDescription*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_AccessDescription (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_AuthorityInfoAccessSyntax::Equals (ASN1T_IMP_AuthorityInfoAccessSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_AuthorityInfoAccessSyntax ("AuthorityInfoAccessSyntax", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_SubjectInfoAccessSyntax (const char* name, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pValue, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_IMP_AccessDescription* pdata;
   ASN1T_IMP_AccessDescription* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_AccessDescription*) pnode->data;
      pCmpdata = (ASN1T_IMP_AccessDescription*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_AccessDescription (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_SubjectInfoAccessSyntax::Equals (ASN1T_IMP_SubjectInfoAccessSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_SubjectInfoAccessSyntax ("SubjectInfoAccessSyntax", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_SubjectDirectoryAttributes (const char* name, 
   ASN1T_IMP_SubjectDirectoryAttributes* pValue, 
   ASN1T_IMP_SubjectDirectoryAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   ASN1T_EXP_Attribute* pdata;
   ASN1T_EXP_Attribute* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_EXP_Attribute*) pnode->data;
      pCmpdata = (ASN1T_EXP_Attribute*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_EXP_Attribute (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_SubjectDirectoryAttributes::Equals (ASN1T_IMP_SubjectDirectoryAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_SubjectDirectoryAttributes ("SubjectDirectoryAttributes", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_RoleSyntax (const char* name, 
   ASN1T_IMP_RoleSyntax* pValue, ASN1T_IMP_RoleSyntax* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".roleAuthority", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.roleAuthorityPresent,
   pCmpValue->m.roleAuthorityPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.roleAuthorityPresent) 
   {
      if (! asn1Compare_IMP_GeneralNames (namebuf, &pValue->roleAuthority, &pCmpValue->roleAuthority, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".roleName", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->roleName, &pCmpValue->roleName, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_IMP_RoleSyntax::Equals (ASN1T_IMP_RoleSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_RoleSyntax ("RoleSyntax", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_GeneralSubtree (const char* name, 
   ASN1T_IMP_GeneralSubtree* pValue, ASN1T_IMP_GeneralSubtree* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".base", 0, 0, 0);
   if (! asn1Compare_IMP_GeneralName (namebuf, &pValue->base, &pCmpValue->base, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".minimum", 0, 0, 0);
   if (! asn1Compare_IMP_BaseDistance (namebuf, &pValue->minimum, &pCmpValue->minimum, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".maximum", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.maximumPresent,
   pCmpValue->m.maximumPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.maximumPresent) 
   {
      if (! asn1Compare_IMP_BaseDistance (namebuf, &pValue->maximum, &pCmpValue->maximum, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_IMP_GeneralSubtree::Equals (ASN1T_IMP_GeneralSubtree* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_GeneralSubtree ("GeneralSubtree", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_GeneralSubtrees (const char* name, 
   ASN1T_IMP_GeneralSubtrees* pValue, ASN1T_IMP_GeneralSubtrees* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   ASN1T_IMP_GeneralSubtree* pdata;
   ASN1T_IMP_GeneralSubtree* pCmpdata;
   OSRTDListNode* pnode;
   OSRTDListNode* pCmpnode;
   char namebuf[512];
   OSBOOL retval = TRUE;

   if (!rtCmpSeqOfElements (name, pValue->count, pCmpValue->count, errBuff, errBuffSize))
   {
      return FALSE;
   }

   {
   OSUINT32 xx1;
   pnode = pValue->head;
   pCmpnode = pCmpValue->head;
   for (xx1 = 0; xx1 < pValue->count; xx1++) {
      pdata = (ASN1T_IMP_GeneralSubtree*) pnode->data;
      pCmpdata = (ASN1T_IMP_GeneralSubtree*) pCmpnode->data;
      { char numbuf[32];
      rtxIntToCharStr (xx1, numbuf, 32, 0);
      rtxStrJoin (namebuf, 512, name, ".elem[", numbuf, "]", 0);
      if (! asn1Compare_IMP_GeneralSubtree (namebuf, pdata, pCmpdata, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
      }
      pnode = pnode->next;
      pCmpnode = pCmpnode->next;
   }
   }

   return retval;
}

OSBOOL ASN1C_IMP_GeneralSubtrees::Equals (ASN1T_IMP_GeneralSubtrees* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_GeneralSubtrees ("GeneralSubtrees", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_NameConstraints (const char* name, 
   ASN1T_IMP_NameConstraints* pValue, ASN1T_IMP_NameConstraints* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".permittedSubtrees", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.permittedSubtreesPresent,
   pCmpValue->m.permittedSubtreesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.permittedSubtreesPresent) 
   {
      if (! asn1Compare_IMP_GeneralSubtrees (namebuf, &pValue->permittedSubtrees, &pCmpValue->permittedSubtrees, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".excludedSubtrees", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.excludedSubtreesPresent,
   pCmpValue->m.excludedSubtreesPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.excludedSubtreesPresent) 
   {
      if (! asn1Compare_IMP_GeneralSubtrees (namebuf, &pValue->excludedSubtrees, &pCmpValue->excludedSubtrees, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_IMP_NameConstraints::Equals (ASN1T_IMP_NameConstraints* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_NameConstraints ("NameConstraints", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_PolicyConstraints (const char* name, 
   ASN1T_IMP_PolicyConstraints* pValue, 
   ASN1T_IMP_PolicyConstraints* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".requireExplicitPolicy", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.requireExplicitPolicyPresent,
   pCmpValue->m.requireExplicitPolicyPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.requireExplicitPolicyPresent) 
   {
      if (! asn1Compare_IMP_SkipCerts (namebuf, &pValue->requireExplicitPolicy, &pCmpValue->requireExplicitPolicy, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".inhibitPolicyMapping", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.inhibitPolicyMappingPresent,
   pCmpValue->m.inhibitPolicyMappingPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.inhibitPolicyMappingPresent) 
   {
      if (! asn1Compare_IMP_SkipCerts (namebuf, &pValue->inhibitPolicyMapping, &pCmpValue->inhibitPolicyMapping, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   return retval;
}

OSBOOL ASN1C_IMP_PolicyConstraints::Equals (ASN1T_IMP_PolicyConstraints* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_PolicyConstraints ("PolicyConstraints", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

OSBOOL asn1Compare_IMP_IssuingDistributionPoint (const char* name, 
   ASN1T_IMP_IssuingDistributionPoint* pValue, 
   ASN1T_IMP_IssuingDistributionPoint* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize)
{
   char namebuf[512];
   OSBOOL retval = TRUE;

   rtxStrJoin (namebuf, 512, name, ".distributionPoint", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.distributionPointPresent,
   pCmpValue->m.distributionPointPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.distributionPointPresent) 
   {
      if (! asn1Compare_IMP_DistributionPointName (namebuf, &pValue->distributionPoint, &pCmpValue->distributionPoint, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".onlyContainsUserCerts", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->onlyContainsUserCerts, pCmpValue->onlyContainsUserCerts, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".onlyContainsCACerts", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->onlyContainsCACerts, pCmpValue->onlyContainsCACerts, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".onlySomeReasons", 0, 0, 0);
   if (!rtCmpOptional (namebuf,
   pValue->m.onlySomeReasonsPresent,
   pCmpValue->m.onlySomeReasonsPresent, errBuff, errBuffSize))
   {
      retval = FALSE;
   }
   else if(pValue->m.onlySomeReasonsPresent) 
   {
      if (! asn1Compare_IMP_ReasonFlags (namebuf, &pValue->onlySomeReasons, &pCmpValue->onlySomeReasons, errBuff, errBuffSize)) 
      {
         retval = FALSE;
      }
   }

   rtxStrJoin (namebuf, 512, name, ".indirectCRL", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->indirectCRL, pCmpValue->indirectCRL, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   rtxStrJoin (namebuf, 512, name, ".onlyContainsAttributeCerts", 0, 0, 0);
   if ( !rtCmpBoolean (namebuf, pValue->onlyContainsAttributeCerts, pCmpValue->onlyContainsAttributeCerts, errBuff, errBuffSize)) 
   {
      retval = FALSE;
   }

   return retval;
}

OSBOOL ASN1C_IMP_IssuingDistributionPoint::Equals (ASN1T_IMP_IssuingDistributionPoint* pCmpValue, char* errBuff, OSSIZE errBuffSize)
{
   if (asn1Compare_IMP_IssuingDistributionPoint ("IssuingDistributionPoint", &msgData, pCmpValue, errBuff, errBuffSize))
   {
      return TRUE;
   }
   return FALSE;
}

