/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef CRMF_H
#define CRMF_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "Explicit.h"
#include "Implicit.h"

/**
 * Header file for ASN.1 module crmf
 */
/**************************************************************/
/*                                                            */
/*  SubsequentMessage                                         */
/*                                                            */
/**************************************************************/
/*
 for keyAgreement (only), possession is proven in this message
 (which contains a MAC (over the DER-encoded value of the
 certReq parameter in CertReqMsg, which MUST include both subject
 and publicKey) based on a key derived from the end entity's
 private DH key and the CA's public DH key);
 the dhMAC value MUST be calculated as per the directions given
 in Appendix A.

SubsequentMessage ::= INTEGER { encrCert(0), challengeResp(1) }
*/
#define TV_CRMF_SubsequentMessage	(TM_UNIV|TM_PRIM|2)

struct EXTERN CRMF_SubsequentMessage {
   enum Root {
      encrCert = 0,
      challengeResp = 1
   } ;
} ;

typedef OSINT32 ASN1T_CRMF_SubsequentMessage;

class EXTERN ASN1C_CRMF_SubsequentMessage :
public ASN1CType
{
protected:
   ASN1T_CRMF_SubsequentMessage& msgData;
public:
   ASN1C_CRMF_SubsequentMessage (ASN1T_CRMF_SubsequentMessage& data);
   ASN1C_CRMF_SubsequentMessage (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_SubsequentMessage& data);
   ASN1C_CRMF_SubsequentMessage (OSRTContext &context
      , ASN1T_CRMF_SubsequentMessage& data);
   virtual ~ASN1C_CRMF_SubsequentMessage () {}
   inline ASN1T_CRMF_SubsequentMessage& getData () { return msgData; }
   inline const ASN1T_CRMF_SubsequentMessage& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SubsequentMessage");
   int toStream (const char* name = "SubsequentMessage");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_SubsequentMessage* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_CRMF_SubsequentMessage (OSCTXT* pctxt,
   ASN1T_CRMF_SubsequentMessage *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_SubsequentMessage (OSCTXT* pctxt, 
   ASN1T_CRMF_SubsequentMessage* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_SubsequentMessage 
   (const char* name, const ASN1T_CRMF_SubsequentMessage* pvalue);

EXTERN int asn1PrtToStrm_CRMF_SubsequentMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_SubsequentMessage* pvalue);

EXTERN ASN1T_CRMF_SubsequentMessage* 
   new_ASN1T_CRMF_SubsequentMessage (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_SubsequentMessage (const char* name, 
   ASN1T_CRMF_SubsequentMessage* pValue, 
   ASN1T_CRMF_SubsequentMessage* pCmpValue, char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  PKIPublicationInfo_action                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PKIPublicationInfo'
*/
struct EXTERN CRMF_PKIPublicationInfo_action {
   enum Root {
      dontPublish = 0,
      pleasePublish = 1
   } ;
} ;

typedef OSINT32 ASN1T_CRMF_PKIPublicationInfo_action;

class EXTERN ASN1C_CRMF_PKIPublicationInfo_action :
public ASN1CType
{
protected:
   ASN1T_CRMF_PKIPublicationInfo_action& msgData;
public:
   ASN1C_CRMF_PKIPublicationInfo_action
       (ASN1T_CRMF_PKIPublicationInfo_action& data);
   ASN1C_CRMF_PKIPublicationInfo_action (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_PKIPublicationInfo_action& data);
   ASN1C_CRMF_PKIPublicationInfo_action (OSRTContext &context
      , ASN1T_CRMF_PKIPublicationInfo_action& data);
   virtual ~ASN1C_CRMF_PKIPublicationInfo_action () {}
   inline ASN1T_CRMF_PKIPublicationInfo_action& getData () { return msgData; }
   inline const ASN1T_CRMF_PKIPublicationInfo_action& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIPublicationInfo_action");
   int toStream (const char* name = "PKIPublicationInfo_action");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_PKIPublicationInfo_action* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_CRMF_PKIPublicationInfo_action (OSCTXT* pctxt,
   ASN1T_CRMF_PKIPublicationInfo_action *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_PKIPublicationInfo_action (OSCTXT* pctxt, 
   ASN1T_CRMF_PKIPublicationInfo_action* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CRMF_PKIPublicationInfo_action 
   (const char* name, const ASN1T_CRMF_PKIPublicationInfo_action* pvalue);

EXTERN int asn1PrtToStrm_CRMF_PKIPublicationInfo_action (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_PKIPublicationInfo_action* pvalue);

EXTERN ASN1T_CRMF_PKIPublicationInfo_action* 
   new_ASN1T_CRMF_PKIPublicationInfo_action (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_PKIPublicationInfo_action (const char* name, 
   ASN1T_CRMF_PKIPublicationInfo_action* pValue, 
   ASN1T_CRMF_PKIPublicationInfo_action* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  SinglePubInfo_pubMethod                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SinglePubInfo'
*/
struct EXTERN CRMF_SinglePubInfo_pubMethod {
   enum Root {
      dontCare = 0,
      x500 = 1,
      web = 2,
      ldap = 3
   } ;
} ;

typedef OSINT32 ASN1T_CRMF_SinglePubInfo_pubMethod;

class EXTERN ASN1C_CRMF_SinglePubInfo_pubMethod :
public ASN1CType
{
protected:
   ASN1T_CRMF_SinglePubInfo_pubMethod& msgData;
public:
   ASN1C_CRMF_SinglePubInfo_pubMethod
       (ASN1T_CRMF_SinglePubInfo_pubMethod& data);
   ASN1C_CRMF_SinglePubInfo_pubMethod (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_SinglePubInfo_pubMethod& data);
   ASN1C_CRMF_SinglePubInfo_pubMethod (OSRTContext &context
      , ASN1T_CRMF_SinglePubInfo_pubMethod& data);
   virtual ~ASN1C_CRMF_SinglePubInfo_pubMethod () {}
   inline ASN1T_CRMF_SinglePubInfo_pubMethod& getData () { return msgData; }
   inline const ASN1T_CRMF_SinglePubInfo_pubMethod& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SinglePubInfo_pubMethod");
   int toStream (const char* name = "SinglePubInfo_pubMethod");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_SinglePubInfo_pubMethod* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_CRMF_SinglePubInfo_pubMethod (OSCTXT* pctxt,
   ASN1T_CRMF_SinglePubInfo_pubMethod *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_SinglePubInfo_pubMethod (OSCTXT* pctxt, 
   ASN1T_CRMF_SinglePubInfo_pubMethod* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_SinglePubInfo_pubMethod 
   (const char* name, const ASN1T_CRMF_SinglePubInfo_pubMethod* pvalue);

EXTERN int asn1PrtToStrm_CRMF_SinglePubInfo_pubMethod (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_SinglePubInfo_pubMethod* pvalue);

EXTERN ASN1T_CRMF_SinglePubInfo_pubMethod* 
   new_ASN1T_CRMF_SinglePubInfo_pubMethod (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_SinglePubInfo_pubMethod (const char* name, 
   ASN1T_CRMF_SinglePubInfo_pubMethod* pValue, 
   ASN1T_CRMF_SinglePubInfo_pubMethod* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  OptionalValidity                                          */
/*                                                            */
/**************************************************************/
/*
OptionalValidity ::= SEQUENCE {
   notBefore [0] Time OPTIONAL,
   notAfter [1] Time OPTIONAL
}
*/
#define TV_CRMF_OptionalValidity	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_OptionalValidity;

struct EXTERN ASN1T_CRMF_OptionalValidity : public ASN1TPDU {
   struct {
      unsigned notBeforePresent : 1;
      unsigned notAfterPresent : 1;
   } m;
   ASN1T_EXP_Time notBefore;
   ASN1T_EXP_Time notAfter;
   ASN1T_CRMF_OptionalValidity ();
   ASN1T_CRMF_OptionalValidity (ASN1C_CRMF_OptionalValidity& srcData);
   ~ASN1T_CRMF_OptionalValidity ();
} ;

class EXTERN ASN1C_CRMF_OptionalValidity :
public ASN1CType
{
protected:
   ASN1T_CRMF_OptionalValidity& msgData;
public:
   ASN1C_CRMF_OptionalValidity (ASN1T_CRMF_OptionalValidity& data);
   ASN1C_CRMF_OptionalValidity (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_OptionalValidity& data);
   ASN1C_CRMF_OptionalValidity (OSRTContext &context
      , ASN1T_CRMF_OptionalValidity& data);
   ASN1C_CRMF_OptionalValidity (ASN1C_CRMF_OptionalValidity& original);
   virtual ~ASN1C_CRMF_OptionalValidity () {}
   inline ASN1T_CRMF_OptionalValidity& getData () { return msgData; }
   inline const ASN1T_CRMF_OptionalValidity& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OptionalValidity");
   int toStream (const char* name = "OptionalValidity");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_OptionalValidity* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_OptionalValidity& getCopy (ASN1T_CRMF_OptionalValidity* pDstData = 0);
   ASN1T_CRMF_OptionalValidity* newCopy ();

   inline ASN1C_CRMF_OptionalValidity& operator= (ASN1C_CRMF_OptionalValidity& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_OptionalValidity (OSCTXT* pctxt,
   ASN1T_CRMF_OptionalValidity *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_OptionalValidity (OSCTXT* pctxt, 
   ASN1T_CRMF_OptionalValidity* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_OptionalValidity 
   (const char* name, const ASN1T_CRMF_OptionalValidity* pvalue);

EXTERN int asn1PrtToStrm_CRMF_OptionalValidity (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_OptionalValidity* pvalue);

EXTERN ASN1T_CRMF_OptionalValidity* 
   new_ASN1T_CRMF_OptionalValidity (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_OptionalValidity (const char* name, 
   ASN1T_CRMF_OptionalValidity* pValue, 
   ASN1T_CRMF_OptionalValidity* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_OptionalValidity (OSCTXT* pctxt, 
   ASN1T_CRMF_OptionalValidity* pSrcValue, ASN1T_CRMF_OptionalValidity*
    pDstValue);

EXTERN void asn1Init_CRMF_OptionalValidity (ASN1T_CRMF_OptionalValidity* pvalue);

EXTERN void asn1Free_CRMF_OptionalValidity (OSCTXT *pctxt, 
   ASN1T_CRMF_OptionalValidity* pvalue);

/**************************************************************/
/*                                                            */
/*  CertTemplate                                              */
/*                                                            */
/**************************************************************/
/*
CertTemplate ::= SEQUENCE {
   version [0] Version OPTIONAL,
   serialNumber [1] CertificateSerialNumber OPTIONAL,
   signingAlg [2] AlgorithmIdentifier OPTIONAL,
   issuer [3] Name OPTIONAL,
   validity [4] OptionalValidity OPTIONAL,
   subject [5] Name OPTIONAL,
   publicKey [6] SubjectPublicKeyInfo OPTIONAL,
   issuerUID [7] UniqueIdentifier OPTIONAL,
   subjectUID [8] UniqueIdentifier OPTIONAL,
   extensions [9] Extensions OPTIONAL
}
*/
#define TV_CRMF_CertTemplate	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_CertTemplate;

struct EXTERN ASN1T_CRMF_CertTemplate : public ASN1TPDU {
   struct {
      unsigned versionPresent : 1;
      unsigned serialNumberPresent : 1;
      unsigned signingAlgPresent : 1;
      unsigned issuerPresent : 1;
      unsigned validityPresent : 1;
      unsigned subjectPresent : 1;
      unsigned publicKeyPresent : 1;
      unsigned issuerUIDPresent : 1;
      unsigned subjectUIDPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_EXP_Version version;
   ASN1T_EXP_CertificateSerialNumber serialNumber;
   ASN1T_EXP_AlgorithmIdentifier signingAlg;
   ASN1T_EXP_Name issuer;
   ASN1T_CRMF_OptionalValidity validity;
   ASN1T_EXP_Name subject;
   ASN1T_EXP_SubjectPublicKeyInfo publicKey;
   ASN1T_EXP_UniqueIdentifier issuerUID;
   ASN1T_EXP_UniqueIdentifier subjectUID;
   ASN1T_EXP_Extensions extensions;
   ASN1T_CRMF_CertTemplate ();
   ASN1T_CRMF_CertTemplate (ASN1C_CRMF_CertTemplate& srcData);
   ~ASN1T_CRMF_CertTemplate ();
} ;

class EXTERN ASN1C_CRMF_CertTemplate :
public ASN1CType
{
protected:
   ASN1T_CRMF_CertTemplate& msgData;
public:
   ASN1C_CRMF_CertTemplate (ASN1T_CRMF_CertTemplate& data);
   ASN1C_CRMF_CertTemplate (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_CertTemplate& data);
   ASN1C_CRMF_CertTemplate (OSRTContext &context, ASN1T_CRMF_CertTemplate& data
      );
   ASN1C_CRMF_CertTemplate (ASN1C_CRMF_CertTemplate& original);
   virtual ~ASN1C_CRMF_CertTemplate () {}
   inline ASN1T_CRMF_CertTemplate& getData () { return msgData; }
   inline const ASN1T_CRMF_CertTemplate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertTemplate");
   int toStream (const char* name = "CertTemplate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_CertTemplate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_CertTemplate& getCopy (ASN1T_CRMF_CertTemplate* pDstData = 0);
   ASN1T_CRMF_CertTemplate* newCopy ();

   inline ASN1C_CRMF_CertTemplate& operator= (ASN1C_CRMF_CertTemplate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_CertTemplate (OSCTXT* pctxt,
   ASN1T_CRMF_CertTemplate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_CertTemplate (OSCTXT* pctxt, 
   ASN1T_CRMF_CertTemplate* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_CertTemplate 
   (const char* name, const ASN1T_CRMF_CertTemplate* pvalue);

EXTERN int asn1PrtToStrm_CRMF_CertTemplate (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_CertTemplate* pvalue);

EXTERN ASN1T_CRMF_CertTemplate* new_ASN1T_CRMF_CertTemplate (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_CRMF_CertTemplate (const char* name, 
   ASN1T_CRMF_CertTemplate* pValue, ASN1T_CRMF_CertTemplate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_CertTemplate (OSCTXT* pctxt, 
   ASN1T_CRMF_CertTemplate* pSrcValue, ASN1T_CRMF_CertTemplate* pDstValue);

EXTERN void asn1Init_CRMF_CertTemplate (ASN1T_CRMF_CertTemplate* pvalue);

EXTERN void asn1Free_CRMF_CertTemplate (OSCTXT *pctxt, 
   ASN1T_CRMF_CertTemplate* pvalue);

/**************************************************************/
/*                                                            */
/*  SinglePubInfo                                             */
/*                                                            */
/**************************************************************/
/*
 pubInfos MUST NOT be present if action is "dontPublish"
 (if action is "pleasePublish" and pubInfos is omitted,
 "dontCare" is assumed)

SinglePubInfo ::= SEQUENCE {
   pubMethod INTEGER { dontCare(0), x500(1), web(2), ldap(3) },
   pubLocation GeneralName OPTIONAL
}
*/
#define TV_CRMF_SinglePubInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_SinglePubInfo;

struct EXTERN ASN1T_CRMF_SinglePubInfo : public ASN1TPDU {
   struct {
      unsigned pubLocationPresent : 1;
   } m;
   ASN1T_CRMF_SinglePubInfo_pubMethod pubMethod;
   ASN1T_IMP_GeneralName pubLocation;
   ASN1T_CRMF_SinglePubInfo ();
   ASN1T_CRMF_SinglePubInfo (ASN1C_CRMF_SinglePubInfo& srcData);
   ~ASN1T_CRMF_SinglePubInfo ();
} ;

class EXTERN ASN1C_CRMF_SinglePubInfo :
public ASN1CType
{
protected:
   ASN1T_CRMF_SinglePubInfo& msgData;
public:
   ASN1C_CRMF_SinglePubInfo (ASN1T_CRMF_SinglePubInfo& data);
   ASN1C_CRMF_SinglePubInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_SinglePubInfo& data);
   ASN1C_CRMF_SinglePubInfo (OSRTContext &context
      , ASN1T_CRMF_SinglePubInfo& data);
   ASN1C_CRMF_SinglePubInfo (ASN1C_CRMF_SinglePubInfo& original);
   virtual ~ASN1C_CRMF_SinglePubInfo () {}
   inline ASN1T_CRMF_SinglePubInfo& getData () { return msgData; }
   inline const ASN1T_CRMF_SinglePubInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SinglePubInfo");
   int toStream (const char* name = "SinglePubInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_SinglePubInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_SinglePubInfo& getCopy (ASN1T_CRMF_SinglePubInfo* pDstData = 0);
   ASN1T_CRMF_SinglePubInfo* newCopy ();

   inline ASN1C_CRMF_SinglePubInfo& operator= (ASN1C_CRMF_SinglePubInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_SinglePubInfo (OSCTXT* pctxt,
   ASN1T_CRMF_SinglePubInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_SinglePubInfo (OSCTXT* pctxt, 
   ASN1T_CRMF_SinglePubInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_SinglePubInfo 
   (const char* name, const ASN1T_CRMF_SinglePubInfo* pvalue);

EXTERN int asn1PrtToStrm_CRMF_SinglePubInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_SinglePubInfo* pvalue);

EXTERN ASN1T_CRMF_SinglePubInfo* 
   new_ASN1T_CRMF_SinglePubInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_SinglePubInfo (const char* name, 
   ASN1T_CRMF_SinglePubInfo* pValue, ASN1T_CRMF_SinglePubInfo* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_SinglePubInfo (OSCTXT* pctxt, 
   ASN1T_CRMF_SinglePubInfo* pSrcValue, ASN1T_CRMF_SinglePubInfo* pDstValue);

EXTERN void asn1Init_CRMF_SinglePubInfo (ASN1T_CRMF_SinglePubInfo* pvalue);

EXTERN void asn1Free_CRMF_SinglePubInfo (OSCTXT *pctxt, 
   ASN1T_CRMF_SinglePubInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIPublicationInfo_pubInfos                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PKIPublicationInfo'
*/
class EXTERN ASN1C_CRMF_PKIPublicationInfo_pubInfos;

/* List of ASN1T_CRMF_SinglePubInfo */
typedef struct EXTERN ASN1T_CRMF_PKIPublicationInfo_pubInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_CRMF_PKIPublicationInfo_pubInfos();
} ASN1T_CRMF_PKIPublicationInfo_pubInfos;

class EXTERN ASN1C_CRMF_PKIPublicationInfo_pubInfos :
public ASN1CSeqOfList
{
protected:
   ASN1T_CRMF_PKIPublicationInfo_pubInfos& msgData;
public:
   ASN1C_CRMF_PKIPublicationInfo_pubInfos
       (ASN1T_CRMF_PKIPublicationInfo_pubInfos& data);
   ASN1C_CRMF_PKIPublicationInfo_pubInfos (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_PKIPublicationInfo_pubInfos& data);
   ASN1C_CRMF_PKIPublicationInfo_pubInfos (ASN1CType& ccobj
      , ASN1T_CRMF_PKIPublicationInfo_pubInfos& data);
   ASN1C_CRMF_PKIPublicationInfo_pubInfos (OSRTContext &context
      , ASN1T_CRMF_PKIPublicationInfo_pubInfos& data);
   ASN1C_CRMF_PKIPublicationInfo_pubInfos (ASN1C_CRMF_PKIPublicationInfo_pubInfos& original);
   virtual ~ASN1C_CRMF_PKIPublicationInfo_pubInfos () {}
   inline ASN1T_CRMF_PKIPublicationInfo_pubInfos& getData () { return msgData; }
   inline const ASN1T_CRMF_PKIPublicationInfo_pubInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIPublicationInfo_pubInfos");
   int toStream (const char* name = "PKIPublicationInfo_pubInfos");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_PKIPublicationInfo_pubInfos* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_PKIPublicationInfo_pubInfos& getCopy (ASN1T_CRMF_PKIPublicationInfo_pubInfos* pDstData = 0);
   ASN1T_CRMF_PKIPublicationInfo_pubInfos* newCopy ();

   ASN1C_CRMF_PKIPublicationInfo_pubInfos& operator= (ASN1C_CRMF_PKIPublicationInfo_pubInfos& srcData);
   void Append (ASN1T_CRMF_SinglePubInfo* elem);
   ASN1T_CRMF_SinglePubInfo* NewElement ();
   ASN1T_CRMF_SinglePubInfo* AppendNewElement ();
} ;

EXTERN int asn1E_CRMF_PKIPublicationInfo_pubInfos (OSCTXT* pctxt,
   ASN1T_CRMF_PKIPublicationInfo_pubInfos *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_PKIPublicationInfo_pubInfos (OSCTXT* pctxt, 
   ASN1T_CRMF_PKIPublicationInfo_pubInfos* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CRMF_PKIPublicationInfo_pubInfos 
   (const char* name, const ASN1T_CRMF_PKIPublicationInfo_pubInfos* pvalue);

EXTERN int asn1PrtToStrm_CRMF_PKIPublicationInfo_pubInfos (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_PKIPublicationInfo_pubInfos* pvalue);

EXTERN OSBOOL asn1Compare_CRMF_PKIPublicationInfo_pubInfos (const char* name, 
   ASN1T_CRMF_PKIPublicationInfo_pubInfos* pValue, 
   ASN1T_CRMF_PKIPublicationInfo_pubInfos* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_PKIPublicationInfo_pubInfos (OSCTXT* pctxt, 
   ASN1T_CRMF_PKIPublicationInfo_pubInfos* pSrcValue, 
   ASN1T_CRMF_PKIPublicationInfo_pubInfos* pDstValue);

EXTERN void asn1Init_CRMF_PKIPublicationInfo_pubInfos (
   ASN1T_CRMF_PKIPublicationInfo_pubInfos* pvalue);

EXTERN void asn1Free_CRMF_PKIPublicationInfo_pubInfos (OSCTXT *pctxt, 
   ASN1T_CRMF_PKIPublicationInfo_pubInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIPublicationInfo                                        */
/*                                                            */
/**************************************************************/
/*
at least one MUST be present

PKIPublicationInfo ::= SEQUENCE {
   action INTEGER { dontPublish(0), pleasePublish(1) },
   pubInfos SEQUENCE (SIZE (1..MAX)) OF SinglePubInfo OPTIONAL
}
*/
#define TV_CRMF_PKIPublicationInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_PKIPublicationInfo;

struct EXTERN ASN1T_CRMF_PKIPublicationInfo : public ASN1TPDU {
   struct {
      unsigned pubInfosPresent : 1;
   } m;
   ASN1T_CRMF_PKIPublicationInfo_action action;
   ASN1T_CRMF_PKIPublicationInfo_pubInfos pubInfos;
   ASN1T_CRMF_PKIPublicationInfo ();
   ASN1T_CRMF_PKIPublicationInfo (ASN1C_CRMF_PKIPublicationInfo& srcData);
   ~ASN1T_CRMF_PKIPublicationInfo ();
} ;

class EXTERN ASN1C_CRMF_PKIPublicationInfo :
public ASN1CType
{
protected:
   ASN1T_CRMF_PKIPublicationInfo& msgData;
public:
   ASN1C_CRMF_PKIPublicationInfo (ASN1T_CRMF_PKIPublicationInfo& data);
   ASN1C_CRMF_PKIPublicationInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_PKIPublicationInfo& data);
   ASN1C_CRMF_PKIPublicationInfo (OSRTContext &context
      , ASN1T_CRMF_PKIPublicationInfo& data);
   ASN1C_CRMF_PKIPublicationInfo (ASN1C_CRMF_PKIPublicationInfo& original);
   virtual ~ASN1C_CRMF_PKIPublicationInfo () {}
   inline ASN1T_CRMF_PKIPublicationInfo& getData () { return msgData; }
   inline const ASN1T_CRMF_PKIPublicationInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKIPublicationInfo");
   int toStream (const char* name = "PKIPublicationInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_PKIPublicationInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_PKIPublicationInfo& getCopy (ASN1T_CRMF_PKIPublicationInfo* pDstData = 0);
   ASN1T_CRMF_PKIPublicationInfo* newCopy ();

   inline ASN1C_CRMF_PKIPublicationInfo& operator= (ASN1C_CRMF_PKIPublicationInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_PKIPublicationInfo (OSCTXT* pctxt,
   ASN1T_CRMF_PKIPublicationInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_PKIPublicationInfo (OSCTXT* pctxt, 
   ASN1T_CRMF_PKIPublicationInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_PKIPublicationInfo 
   (const char* name, const ASN1T_CRMF_PKIPublicationInfo* pvalue);

EXTERN int asn1PrtToStrm_CRMF_PKIPublicationInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_PKIPublicationInfo* pvalue);

EXTERN ASN1T_CRMF_PKIPublicationInfo* 
   new_ASN1T_CRMF_PKIPublicationInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_PKIPublicationInfo (const char* name, 
   ASN1T_CRMF_PKIPublicationInfo* pValue, 
   ASN1T_CRMF_PKIPublicationInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_PKIPublicationInfo (OSCTXT* pctxt, 
   ASN1T_CRMF_PKIPublicationInfo* pSrcValue, ASN1T_CRMF_PKIPublicationInfo*
    pDstValue);

EXTERN void asn1Init_CRMF_PKIPublicationInfo (ASN1T_CRMF_PKIPublicationInfo* pvalue);

EXTERN void asn1Free_CRMF_PKIPublicationInfo (OSCTXT *pctxt, 
   ASN1T_CRMF_PKIPublicationInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedValue                                            */
/*                                                            */
/**************************************************************/
/*
EncryptedValue ::= SEQUENCE {
   intendedAlg [0] AlgorithmIdentifier OPTIONAL,
   symmAlg [1] AlgorithmIdentifier OPTIONAL,
   encSymmKey [2] BIT STRING  OPTIONAL,
   keyAlg [3] AlgorithmIdentifier OPTIONAL,
   valueHint [4] OCTET STRING OPTIONAL,
   encValue BIT STRING 
}
*/
#define TV_CRMF_EncryptedValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_EncryptedValue;

struct EXTERN ASN1T_CRMF_EncryptedValue : public ASN1TPDU {
   struct {
      unsigned intendedAlgPresent : 1;
      unsigned symmAlgPresent : 1;
      unsigned encSymmKeyPresent : 1;
      unsigned keyAlgPresent : 1;
      unsigned valueHintPresent : 1;
   } m;
   ASN1T_EXP_AlgorithmIdentifier intendedAlg;
   ASN1T_EXP_AlgorithmIdentifier symmAlg;
   ASN1TDynBitStr encSymmKey;
   ASN1T_EXP_AlgorithmIdentifier keyAlg;
   ASN1TDynOctStr valueHint;
   ASN1TDynBitStr encValue;
   ASN1T_CRMF_EncryptedValue ();
   ASN1T_CRMF_EncryptedValue (ASN1C_CRMF_EncryptedValue& srcData);
   ~ASN1T_CRMF_EncryptedValue ();
} ;

class EXTERN ASN1C_CRMF_EncryptedValue :
public ASN1CType
{
protected:
   ASN1T_CRMF_EncryptedValue& msgData;
public:
   ASN1C_CRMF_EncryptedValue (ASN1T_CRMF_EncryptedValue& data);
   ASN1C_CRMF_EncryptedValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_EncryptedValue& data);
   ASN1C_CRMF_EncryptedValue (OSRTContext &context
      , ASN1T_CRMF_EncryptedValue& data);
   ASN1C_CRMF_EncryptedValue (ASN1C_CRMF_EncryptedValue& original);
   virtual ~ASN1C_CRMF_EncryptedValue () {}
   inline ASN1T_CRMF_EncryptedValue& getData () { return msgData; }
   inline const ASN1T_CRMF_EncryptedValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EncryptedValue");
   int toStream (const char* name = "EncryptedValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_EncryptedValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_EncryptedValue& getCopy (ASN1T_CRMF_EncryptedValue* pDstData = 0);
   ASN1T_CRMF_EncryptedValue* newCopy ();

   inline ASN1C_CRMF_EncryptedValue& operator= (ASN1C_CRMF_EncryptedValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_EncryptedValue (OSCTXT* pctxt,
   ASN1T_CRMF_EncryptedValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_EncryptedValue (OSCTXT* pctxt, 
   ASN1T_CRMF_EncryptedValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_EncryptedValue 
   (const char* name, const ASN1T_CRMF_EncryptedValue* pvalue);

EXTERN int asn1PrtToStrm_CRMF_EncryptedValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_EncryptedValue* pvalue);

EXTERN ASN1T_CRMF_EncryptedValue* 
   new_ASN1T_CRMF_EncryptedValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_EncryptedValue (const char* name, 
   ASN1T_CRMF_EncryptedValue* pValue, ASN1T_CRMF_EncryptedValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_EncryptedValue (OSCTXT* pctxt, 
   ASN1T_CRMF_EncryptedValue* pSrcValue, ASN1T_CRMF_EncryptedValue* pDstValue);

EXTERN void asn1Init_CRMF_EncryptedValue (ASN1T_CRMF_EncryptedValue* pvalue);

EXTERN void asn1Free_CRMF_EncryptedValue (OSCTXT *pctxt, 
   ASN1T_CRMF_EncryptedValue* pvalue);

/**************************************************************/
/*                                                            */
/*  CertId                                                    */
/*                                                            */
/**************************************************************/
/*
 the encrypted value itself

CertId ::= SEQUENCE {
   issuer GeneralName,
   serialNumber CertificateSerialNumber
}
*/
#define TV_CRMF_CertId	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_CertId;

struct EXTERN ASN1T_CRMF_CertId : public ASN1TPDU {
   ASN1T_IMP_GeneralName issuer;
   ASN1T_EXP_CertificateSerialNumber serialNumber;
   ASN1T_CRMF_CertId ();
   ASN1T_CRMF_CertId (ASN1C_CRMF_CertId& srcData);
   ~ASN1T_CRMF_CertId ();
} ;

class EXTERN ASN1C_CRMF_CertId :
public ASN1CType
{
protected:
   ASN1T_CRMF_CertId& msgData;
public:
   ASN1C_CRMF_CertId (ASN1T_CRMF_CertId& data);
   ASN1C_CRMF_CertId (OSRTMessageBufferIF& msgBuf, ASN1T_CRMF_CertId& data);
   ASN1C_CRMF_CertId (OSRTContext &context, ASN1T_CRMF_CertId& data);
   ASN1C_CRMF_CertId (ASN1C_CRMF_CertId& original);
   virtual ~ASN1C_CRMF_CertId () {}
   inline ASN1T_CRMF_CertId& getData () { return msgData; }
   inline const ASN1T_CRMF_CertId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertId");
   int toStream (const char* name = "CertId");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_CertId* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_CertId& getCopy (ASN1T_CRMF_CertId* pDstData = 0);
   ASN1T_CRMF_CertId* newCopy ();

   inline ASN1C_CRMF_CertId& operator= (ASN1C_CRMF_CertId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_CertId (OSCTXT* pctxt,
   ASN1T_CRMF_CertId *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_CertId (OSCTXT* pctxt, ASN1T_CRMF_CertId* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_CertId (const char* name, const ASN1T_CRMF_CertId* pvalue);

EXTERN int asn1PrtToStrm_CRMF_CertId (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_CertId* pvalue);

EXTERN ASN1T_CRMF_CertId* new_ASN1T_CRMF_CertId (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_CertId (const char* name, ASN1T_CRMF_CertId* pValue, 
   ASN1T_CRMF_CertId* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_CertId (OSCTXT* pctxt, ASN1T_CRMF_CertId* pSrcValue, 
   ASN1T_CRMF_CertId* pDstValue);

EXTERN void asn1Init_CRMF_CertId (ASN1T_CRMF_CertId* pvalue);

EXTERN void asn1Free_CRMF_CertId (OSCTXT *pctxt, ASN1T_CRMF_CertId* pvalue);

/**************************************************************/
/*                                                            */
/*  Controls                                                  */
/*                                                            */
/**************************************************************/
/*
 Attributes affecting issuance

Controls ::= SEQUENCE (SIZE (1..MAX)) OF AttributeTypeAndValue
*/
#define TV_CRMF_Controls	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_Controls;

/* List of ASN1T_EXP_AttributeTypeAndValue */
typedef struct EXTERN ASN1T_CRMF_Controls : public ASN1TPDUSeqOfList {
   ~ASN1T_CRMF_Controls();
} ASN1T_CRMF_Controls;

class EXTERN ASN1C_CRMF_Controls :
public ASN1CSeqOfList
{
protected:
   ASN1T_CRMF_Controls& msgData;
public:
   ASN1C_CRMF_Controls (ASN1T_CRMF_Controls& data);
   ASN1C_CRMF_Controls (OSRTMessageBufferIF& msgBuf, ASN1T_CRMF_Controls& data);
   ASN1C_CRMF_Controls (ASN1CType& ccobj, ASN1T_CRMF_Controls& data);
   ASN1C_CRMF_Controls (OSRTContext &context, ASN1T_CRMF_Controls& data);
   ASN1C_CRMF_Controls (ASN1C_CRMF_Controls& original);
   virtual ~ASN1C_CRMF_Controls () {}
   inline ASN1T_CRMF_Controls& getData () { return msgData; }
   inline const ASN1T_CRMF_Controls& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Controls");
   int toStream (const char* name = "Controls");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_Controls* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_Controls& getCopy (ASN1T_CRMF_Controls* pDstData = 0);
   ASN1T_CRMF_Controls* newCopy ();

   ASN1C_CRMF_Controls& operator= (ASN1C_CRMF_Controls& srcData);
   void Append (ASN1T_EXP_AttributeTypeAndValue* elem);
   ASN1T_EXP_AttributeTypeAndValue* NewElement ();
   ASN1T_EXP_AttributeTypeAndValue* AppendNewElement ();
} ;

EXTERN int asn1E_CRMF_Controls (OSCTXT* pctxt,
   ASN1T_CRMF_Controls *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_Controls (OSCTXT* pctxt, ASN1T_CRMF_Controls* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_Controls 
   (const char* name, const ASN1T_CRMF_Controls* pvalue);

EXTERN int asn1PrtToStrm_CRMF_Controls (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_Controls* pvalue);

EXTERN OSBOOL asn1Compare_CRMF_Controls (const char* name, 
   ASN1T_CRMF_Controls* pValue, ASN1T_CRMF_Controls* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_Controls (OSCTXT* pctxt, ASN1T_CRMF_Controls* pSrcValue, 
   ASN1T_CRMF_Controls* pDstValue);

EXTERN void asn1Init_CRMF_Controls (ASN1T_CRMF_Controls* pvalue);

EXTERN void asn1Free_CRMF_Controls (OSCTXT *pctxt, ASN1T_CRMF_Controls* pvalue);

/**************************************************************/
/*                                                            */
/*  CertRequest                                               */
/*                                                            */
/**************************************************************/
/*
CertRequest ::= SEQUENCE {
   certReqId INTEGER,
   certTemplate CertTemplate,
   controls Controls OPTIONAL
}
*/
#define TV_CRMF_CertRequest	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_CertRequest;

struct EXTERN ASN1T_CRMF_CertRequest : public ASN1TPDU {
   struct {
      unsigned controlsPresent : 1;
   } m;
   OSINT32 certReqId;
   ASN1T_CRMF_CertTemplate certTemplate;
   ASN1T_CRMF_Controls controls;
   ASN1T_CRMF_CertRequest ();
   ASN1T_CRMF_CertRequest (ASN1C_CRMF_CertRequest& srcData);
   ~ASN1T_CRMF_CertRequest ();
} ;

class EXTERN ASN1C_CRMF_CertRequest :
public ASN1CType
{
protected:
   ASN1T_CRMF_CertRequest& msgData;
public:
   ASN1C_CRMF_CertRequest (ASN1T_CRMF_CertRequest& data);
   ASN1C_CRMF_CertRequest (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_CertRequest& data);
   ASN1C_CRMF_CertRequest (OSRTContext &context, ASN1T_CRMF_CertRequest& data);
   ASN1C_CRMF_CertRequest (ASN1C_CRMF_CertRequest& original);
   virtual ~ASN1C_CRMF_CertRequest () {}
   inline ASN1T_CRMF_CertRequest& getData () { return msgData; }
   inline const ASN1T_CRMF_CertRequest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertRequest");
   int toStream (const char* name = "CertRequest");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_CertRequest* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_CertRequest& getCopy (ASN1T_CRMF_CertRequest* pDstData = 0);
   ASN1T_CRMF_CertRequest* newCopy ();

   inline ASN1C_CRMF_CertRequest& operator= (ASN1C_CRMF_CertRequest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_CertRequest (OSCTXT* pctxt,
   ASN1T_CRMF_CertRequest *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_CertRequest (OSCTXT* pctxt, 
   ASN1T_CRMF_CertRequest* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_CertRequest 
   (const char* name, const ASN1T_CRMF_CertRequest* pvalue);

EXTERN int asn1PrtToStrm_CRMF_CertRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_CertRequest* pvalue);

EXTERN ASN1T_CRMF_CertRequest* new_ASN1T_CRMF_CertRequest (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_CertRequest (const char* name, 
   ASN1T_CRMF_CertRequest* pValue, ASN1T_CRMF_CertRequest* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_CertRequest (OSCTXT* pctxt, 
   ASN1T_CRMF_CertRequest* pSrcValue, ASN1T_CRMF_CertRequest* pDstValue);

EXTERN void asn1Init_CRMF_CertRequest (ASN1T_CRMF_CertRequest* pvalue);

EXTERN void asn1Free_CRMF_CertRequest (OSCTXT *pctxt, ASN1T_CRMF_CertRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  PKMACValue                                                */
/*                                                            */
/**************************************************************/
/*
PKMACValue ::= SEQUENCE {
   algId AlgorithmIdentifier,
   value BIT STRING 
}
*/
#define TV_CRMF_PKMACValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_PKMACValue;

struct EXTERN ASN1T_CRMF_PKMACValue : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier algId;
   ASN1TDynBitStr value;
   ASN1T_CRMF_PKMACValue ();
   ASN1T_CRMF_PKMACValue (ASN1C_CRMF_PKMACValue& srcData);
   ~ASN1T_CRMF_PKMACValue ();
} ;

class EXTERN ASN1C_CRMF_PKMACValue :
public ASN1CType
{
protected:
   ASN1T_CRMF_PKMACValue& msgData;
public:
   ASN1C_CRMF_PKMACValue (ASN1T_CRMF_PKMACValue& data);
   ASN1C_CRMF_PKMACValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_PKMACValue& data);
   ASN1C_CRMF_PKMACValue (OSRTContext &context, ASN1T_CRMF_PKMACValue& data);
   ASN1C_CRMF_PKMACValue (ASN1C_CRMF_PKMACValue& original);
   virtual ~ASN1C_CRMF_PKMACValue () {}
   inline ASN1T_CRMF_PKMACValue& getData () { return msgData; }
   inline const ASN1T_CRMF_PKMACValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PKMACValue");
   int toStream (const char* name = "PKMACValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_PKMACValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_PKMACValue& getCopy (ASN1T_CRMF_PKMACValue* pDstData = 0);
   ASN1T_CRMF_PKMACValue* newCopy ();

   inline ASN1C_CRMF_PKMACValue& operator= (ASN1C_CRMF_PKMACValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_PKMACValue (OSCTXT* pctxt,
   ASN1T_CRMF_PKMACValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_PKMACValue (OSCTXT* pctxt, 
   ASN1T_CRMF_PKMACValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_PKMACValue 
   (const char* name, const ASN1T_CRMF_PKMACValue* pvalue);

EXTERN int asn1PrtToStrm_CRMF_PKMACValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_PKMACValue* pvalue);

EXTERN ASN1T_CRMF_PKMACValue* new_ASN1T_CRMF_PKMACValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_PKMACValue (const char* name, 
   ASN1T_CRMF_PKMACValue* pValue, ASN1T_CRMF_PKMACValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_PKMACValue (OSCTXT* pctxt, 
   ASN1T_CRMF_PKMACValue* pSrcValue, ASN1T_CRMF_PKMACValue* pDstValue);

EXTERN void asn1Init_CRMF_PKMACValue (ASN1T_CRMF_PKMACValue* pvalue);

EXTERN void asn1Free_CRMF_PKMACValue (OSCTXT *pctxt, ASN1T_CRMF_PKMACValue* pvalue);

/**************************************************************/
/*                                                            */
/*  POPOSigningKeyInput_authInfo                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'POPOSigningKeyInput'
*/
/* Choice context tags */

#define TVC_CRMF_POPOSigningKeyInput_authInfo_publicKeyMAC	(TM_UNIV|TM_CONS|16)
#define TVC_CRMF_POPOSigningKeyInput_authInfo_sender	(TM_CTXT|TM_CONS|0)

/* Choice tag constants */

#define T_CRMF_POPOSigningKeyInput_authInfo_publicKeyMAC 1
#define T_CRMF_POPOSigningKeyInput_authInfo_sender 2

class EXTERN ASN1C_CRMF_POPOSigningKeyInput_authInfo;

struct EXTERN ASN1T_CRMF_POPOSigningKeyInput_authInfo : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_CRMF_PKMACValue *publicKeyMAC;
      /* t = 2 */
      ASN1T_IMP_GeneralName *sender;
   } u;
   ASN1T_CRMF_POPOSigningKeyInput_authInfo () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CRMF_POPOSigningKeyInput_authInfo (ASN1C_CRMF_POPOSigningKeyInput_authInfo& srcData);
   ~ASN1T_CRMF_POPOSigningKeyInput_authInfo ();
} ;

class EXTERN ASN1C_CRMF_POPOSigningKeyInput_authInfo :
public ASN1CType
{
protected:
   ASN1T_CRMF_POPOSigningKeyInput_authInfo& msgData;
public:
   ASN1C_CRMF_POPOSigningKeyInput_authInfo
       (ASN1T_CRMF_POPOSigningKeyInput_authInfo& data);
   ASN1C_CRMF_POPOSigningKeyInput_authInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_POPOSigningKeyInput_authInfo& data);
   ASN1C_CRMF_POPOSigningKeyInput_authInfo (OSRTContext &context
      , ASN1T_CRMF_POPOSigningKeyInput_authInfo& data);
   ASN1C_CRMF_POPOSigningKeyInput_authInfo (ASN1C_CRMF_POPOSigningKeyInput_authInfo& original);
   virtual ~ASN1C_CRMF_POPOSigningKeyInput_authInfo () {}
   inline ASN1T_CRMF_POPOSigningKeyInput_authInfo& getData () { return msgData; }
   inline const ASN1T_CRMF_POPOSigningKeyInput_authInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "POPOSigningKeyInput_authInfo");
   int toStream (const char* name = "POPOSigningKeyInput_authInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_POPOSigningKeyInput_authInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_POPOSigningKeyInput_authInfo& getCopy (ASN1T_CRMF_POPOSigningKeyInput_authInfo* pDstData = 0);
   ASN1T_CRMF_POPOSigningKeyInput_authInfo* newCopy ();

   inline ASN1C_CRMF_POPOSigningKeyInput_authInfo& operator= (ASN1C_CRMF_POPOSigningKeyInput_authInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_POPOSigningKeyInput_authInfo (OSCTXT* pctxt,
   ASN1T_CRMF_POPOSigningKeyInput_authInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_POPOSigningKeyInput_authInfo (OSCTXT* pctxt, 
   ASN1T_CRMF_POPOSigningKeyInput_authInfo* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_CRMF_POPOSigningKeyInput_authInfo 
   (const char* name, const ASN1T_CRMF_POPOSigningKeyInput_authInfo* pvalue);

EXTERN int asn1PrtToStrm_CRMF_POPOSigningKeyInput_authInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_POPOSigningKeyInput_authInfo* pvalue);

EXTERN ASN1T_CRMF_POPOSigningKeyInput_authInfo* 
   new_ASN1T_CRMF_POPOSigningKeyInput_authInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_POPOSigningKeyInput_authInfo (const char* name, 
   ASN1T_CRMF_POPOSigningKeyInput_authInfo* pValue, 
   ASN1T_CRMF_POPOSigningKeyInput_authInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_POPOSigningKeyInput_authInfo (OSCTXT* pctxt, 
   ASN1T_CRMF_POPOSigningKeyInput_authInfo* pSrcValue, 
   ASN1T_CRMF_POPOSigningKeyInput_authInfo* pDstValue);

EXTERN void asn1Init_CRMF_POPOSigningKeyInput_authInfo (
   ASN1T_CRMF_POPOSigningKeyInput_authInfo* pvalue);

EXTERN void asn1Free_CRMF_POPOSigningKeyInput_authInfo (OSCTXT *pctxt, 
   ASN1T_CRMF_POPOSigningKeyInput_authInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  POPOSigningKeyInput                                       */
/*                                                            */
/**************************************************************/
/*
 The signature (using "algorithmIdentifier") is on the
 DER-encoded value of poposkInput.  NOTE: If the CertReqMsg
 certReq CertTemplate contains the subject and publicKey values,
 then poposkInput MUST be omitted and the signature MUST be
 computed on the DER-encoded value of CertReqMsg certReq.  If
 the CertReqMsg certReq CertTemplate does not contain both the
 public key and subject values (i.e., if it contains only one
 of these, or neither), then poposkInput MUST be present and
 MUST be signed.

POPOSigningKeyInput ::= SEQUENCE {
   authInfo CHOICE {
      publicKeyMAC PKMACValue,
      sender [0] GeneralName
   },
   publicKey SubjectPublicKeyInfo
}
*/
#define TV_CRMF_POPOSigningKeyInput	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_POPOSigningKeyInput;

struct EXTERN ASN1T_CRMF_POPOSigningKeyInput : public ASN1TPDU {
   ASN1T_CRMF_POPOSigningKeyInput_authInfo authInfo;
   ASN1T_EXP_SubjectPublicKeyInfo publicKey;
   ASN1T_CRMF_POPOSigningKeyInput ();
   ASN1T_CRMF_POPOSigningKeyInput (ASN1C_CRMF_POPOSigningKeyInput& srcData);
   ~ASN1T_CRMF_POPOSigningKeyInput ();
} ;

class EXTERN ASN1C_CRMF_POPOSigningKeyInput :
public ASN1CType
{
protected:
   ASN1T_CRMF_POPOSigningKeyInput& msgData;
public:
   ASN1C_CRMF_POPOSigningKeyInput (ASN1T_CRMF_POPOSigningKeyInput& data);
   ASN1C_CRMF_POPOSigningKeyInput (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_POPOSigningKeyInput& data);
   ASN1C_CRMF_POPOSigningKeyInput (OSRTContext &context
      , ASN1T_CRMF_POPOSigningKeyInput& data);
   ASN1C_CRMF_POPOSigningKeyInput (ASN1C_CRMF_POPOSigningKeyInput& original);
   virtual ~ASN1C_CRMF_POPOSigningKeyInput () {}
   inline ASN1T_CRMF_POPOSigningKeyInput& getData () { return msgData; }
   inline const ASN1T_CRMF_POPOSigningKeyInput& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "POPOSigningKeyInput");
   int toStream (const char* name = "POPOSigningKeyInput");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_POPOSigningKeyInput* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_POPOSigningKeyInput& getCopy (ASN1T_CRMF_POPOSigningKeyInput* pDstData = 0);
   ASN1T_CRMF_POPOSigningKeyInput* newCopy ();

   inline ASN1C_CRMF_POPOSigningKeyInput& operator= (ASN1C_CRMF_POPOSigningKeyInput& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_POPOSigningKeyInput (OSCTXT* pctxt,
   ASN1T_CRMF_POPOSigningKeyInput *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_POPOSigningKeyInput (OSCTXT* pctxt, 
   ASN1T_CRMF_POPOSigningKeyInput* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_POPOSigningKeyInput 
   (const char* name, const ASN1T_CRMF_POPOSigningKeyInput* pvalue);

EXTERN int asn1PrtToStrm_CRMF_POPOSigningKeyInput (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_POPOSigningKeyInput* pvalue);

EXTERN ASN1T_CRMF_POPOSigningKeyInput* 
   new_ASN1T_CRMF_POPOSigningKeyInput (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_POPOSigningKeyInput (const char* name, 
   ASN1T_CRMF_POPOSigningKeyInput* pValue, 
   ASN1T_CRMF_POPOSigningKeyInput* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_POPOSigningKeyInput (OSCTXT* pctxt, 
   ASN1T_CRMF_POPOSigningKeyInput* pSrcValue, ASN1T_CRMF_POPOSigningKeyInput*
    pDstValue);

EXTERN void asn1Init_CRMF_POPOSigningKeyInput (ASN1T_CRMF_POPOSigningKeyInput* pvalue);

EXTERN void asn1Free_CRMF_POPOSigningKeyInput (OSCTXT *pctxt, 
   ASN1T_CRMF_POPOSigningKeyInput* pvalue);

/**************************************************************/
/*                                                            */
/*  POPOSigningKey                                            */
/*                                                            */
/**************************************************************/
/*
POPOSigningKey ::= SEQUENCE {
   poposkInput [0] POPOSigningKeyInput OPTIONAL,
   algorithmIdentifier AlgorithmIdentifier,
   signature BIT STRING 
}
*/
#define TV_CRMF_POPOSigningKey	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_POPOSigningKey;

struct EXTERN ASN1T_CRMF_POPOSigningKey : public ASN1TPDU {
   struct {
      unsigned poposkInputPresent : 1;
   } m;
   ASN1T_CRMF_POPOSigningKeyInput poposkInput;
   ASN1T_EXP_AlgorithmIdentifier algorithmIdentifier;
   ASN1TDynBitStr signature_;
   ASN1T_CRMF_POPOSigningKey ();
   ASN1T_CRMF_POPOSigningKey (ASN1C_CRMF_POPOSigningKey& srcData);
   ~ASN1T_CRMF_POPOSigningKey ();
} ;

class EXTERN ASN1C_CRMF_POPOSigningKey :
public ASN1CType
{
protected:
   ASN1T_CRMF_POPOSigningKey& msgData;
public:
   ASN1C_CRMF_POPOSigningKey (ASN1T_CRMF_POPOSigningKey& data);
   ASN1C_CRMF_POPOSigningKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_POPOSigningKey& data);
   ASN1C_CRMF_POPOSigningKey (OSRTContext &context
      , ASN1T_CRMF_POPOSigningKey& data);
   ASN1C_CRMF_POPOSigningKey (ASN1C_CRMF_POPOSigningKey& original);
   virtual ~ASN1C_CRMF_POPOSigningKey () {}
   inline ASN1T_CRMF_POPOSigningKey& getData () { return msgData; }
   inline const ASN1T_CRMF_POPOSigningKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "POPOSigningKey");
   int toStream (const char* name = "POPOSigningKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_POPOSigningKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_POPOSigningKey& getCopy (ASN1T_CRMF_POPOSigningKey* pDstData = 0);
   ASN1T_CRMF_POPOSigningKey* newCopy ();

   inline ASN1C_CRMF_POPOSigningKey& operator= (ASN1C_CRMF_POPOSigningKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_POPOSigningKey (OSCTXT* pctxt,
   ASN1T_CRMF_POPOSigningKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_POPOSigningKey (OSCTXT* pctxt, 
   ASN1T_CRMF_POPOSigningKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_POPOSigningKey 
   (const char* name, const ASN1T_CRMF_POPOSigningKey* pvalue);

EXTERN int asn1PrtToStrm_CRMF_POPOSigningKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_POPOSigningKey* pvalue);

EXTERN ASN1T_CRMF_POPOSigningKey* 
   new_ASN1T_CRMF_POPOSigningKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_POPOSigningKey (const char* name, 
   ASN1T_CRMF_POPOSigningKey* pValue, ASN1T_CRMF_POPOSigningKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_POPOSigningKey (OSCTXT* pctxt, 
   ASN1T_CRMF_POPOSigningKey* pSrcValue, ASN1T_CRMF_POPOSigningKey* pDstValue);

EXTERN void asn1Init_CRMF_POPOSigningKey (ASN1T_CRMF_POPOSigningKey* pvalue);

EXTERN void asn1Free_CRMF_POPOSigningKey (OSCTXT *pctxt, 
   ASN1T_CRMF_POPOSigningKey* pvalue);

/**************************************************************/
/*                                                            */
/*  POPOPrivKey                                               */
/*                                                            */
/**************************************************************/
/*
POPOPrivKey ::= CHOICE {
   thisMessage [0] BIT STRING ,
   subsequentMessage [1] SubsequentMessage,
   dhMAC [2] BIT STRING 
}
*/
/* Choice context tags */

#define TVC_CRMF_POPOPrivKey_thisMessage	(TM_CTXT|TM_PRIM|0)
#define TVC_CRMF_POPOPrivKey_subsequentMessage	(TM_CTXT|TM_PRIM|1)
#define TVC_CRMF_POPOPrivKey_dhMAC	(TM_CTXT|TM_PRIM|2)

/* Choice tag constants */

#define T_CRMF_POPOPrivKey_thisMessage  1
#define T_CRMF_POPOPrivKey_subsequentMessage 2
#define T_CRMF_POPOPrivKey_dhMAC        3

class EXTERN ASN1C_CRMF_POPOPrivKey;

struct EXTERN ASN1T_CRMF_POPOPrivKey : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1TDynBitStr *thisMessage;
      /* t = 2 */
      ASN1T_CRMF_SubsequentMessage subsequentMessage;
      /* t = 3 */
      ASN1TDynBitStr *dhMAC;
   } u;
   ASN1T_CRMF_POPOPrivKey () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CRMF_POPOPrivKey (ASN1C_CRMF_POPOPrivKey& srcData);
   ~ASN1T_CRMF_POPOPrivKey ();
} ;

class EXTERN ASN1C_CRMF_POPOPrivKey :
public ASN1CType
{
protected:
   ASN1T_CRMF_POPOPrivKey& msgData;
public:
   ASN1C_CRMF_POPOPrivKey (ASN1T_CRMF_POPOPrivKey& data);
   ASN1C_CRMF_POPOPrivKey (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_POPOPrivKey& data);
   ASN1C_CRMF_POPOPrivKey (OSRTContext &context, ASN1T_CRMF_POPOPrivKey& data);
   ASN1C_CRMF_POPOPrivKey (ASN1C_CRMF_POPOPrivKey& original);
   virtual ~ASN1C_CRMF_POPOPrivKey () {}
   inline ASN1T_CRMF_POPOPrivKey& getData () { return msgData; }
   inline const ASN1T_CRMF_POPOPrivKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "POPOPrivKey");
   int toStream (const char* name = "POPOPrivKey");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_POPOPrivKey* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_POPOPrivKey& getCopy (ASN1T_CRMF_POPOPrivKey* pDstData = 0);
   ASN1T_CRMF_POPOPrivKey* newCopy ();

   inline ASN1C_CRMF_POPOPrivKey& operator= (ASN1C_CRMF_POPOPrivKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_POPOPrivKey (OSCTXT* pctxt,
   ASN1T_CRMF_POPOPrivKey *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_POPOPrivKey (OSCTXT* pctxt, 
   ASN1T_CRMF_POPOPrivKey* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_POPOPrivKey 
   (const char* name, const ASN1T_CRMF_POPOPrivKey* pvalue);

EXTERN int asn1PrtToStrm_CRMF_POPOPrivKey (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_POPOPrivKey* pvalue);

EXTERN ASN1T_CRMF_POPOPrivKey* new_ASN1T_CRMF_POPOPrivKey (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_POPOPrivKey (const char* name, 
   ASN1T_CRMF_POPOPrivKey* pValue, ASN1T_CRMF_POPOPrivKey* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_POPOPrivKey (OSCTXT* pctxt, 
   ASN1T_CRMF_POPOPrivKey* pSrcValue, ASN1T_CRMF_POPOPrivKey* pDstValue);

EXTERN void asn1Init_CRMF_POPOPrivKey (ASN1T_CRMF_POPOPrivKey* pvalue);

EXTERN void asn1Free_CRMF_POPOPrivKey (OSCTXT *pctxt, ASN1T_CRMF_POPOPrivKey* pvalue);

/**************************************************************/
/*                                                            */
/*  ProofOfPossession                                         */
/*                                                            */
/**************************************************************/
/*
ProofOfPossession ::= CHOICE {
   raVerified [0] NULL,
   signature [1] POPOSigningKey,
   keyEncipherment [2] POPOPrivKey,
   keyAgreement [3] POPOPrivKey
}
*/
/* Choice context tags */

#define TVC_CRMF_ProofOfPossession_raVerified	(TM_CTXT|TM_PRIM|0)
#define TVC_CRMF_ProofOfPossession_signature_	(TM_CTXT|TM_CONS|1)
#define TVC_CRMF_ProofOfPossession_keyEncipherment	(TM_CTXT|TM_CONS|2)
#define TVC_CRMF_ProofOfPossession_keyAgreement	(TM_CTXT|TM_CONS|3)

/* Choice tag constants */

#define T_CRMF_ProofOfPossession_raVerified 1
#define T_CRMF_ProofOfPossession_signature_ 2
#define T_CRMF_ProofOfPossession_keyEncipherment 3
#define T_CRMF_ProofOfPossession_keyAgreement 4

class EXTERN ASN1C_CRMF_ProofOfPossession;

struct EXTERN ASN1T_CRMF_ProofOfPossession : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      /* t = 2 */
      ASN1T_CRMF_POPOSigningKey *signature_;
      /* t = 3 */
      ASN1T_CRMF_POPOPrivKey *keyEncipherment;
      /* t = 4 */
      ASN1T_CRMF_POPOPrivKey *keyAgreement;
   } u;
   ASN1T_CRMF_ProofOfPossession () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_CRMF_ProofOfPossession (ASN1C_CRMF_ProofOfPossession& srcData);
   ~ASN1T_CRMF_ProofOfPossession ();
} ;

class EXTERN ASN1C_CRMF_ProofOfPossession :
public ASN1CType
{
protected:
   ASN1T_CRMF_ProofOfPossession& msgData;
public:
   ASN1C_CRMF_ProofOfPossession (ASN1T_CRMF_ProofOfPossession& data);
   ASN1C_CRMF_ProofOfPossession (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_ProofOfPossession& data);
   ASN1C_CRMF_ProofOfPossession (OSRTContext &context
      , ASN1T_CRMF_ProofOfPossession& data);
   ASN1C_CRMF_ProofOfPossession (ASN1C_CRMF_ProofOfPossession& original);
   virtual ~ASN1C_CRMF_ProofOfPossession () {}
   inline ASN1T_CRMF_ProofOfPossession& getData () { return msgData; }
   inline const ASN1T_CRMF_ProofOfPossession& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ProofOfPossession");
   int toStream (const char* name = "ProofOfPossession");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_ProofOfPossession* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_ProofOfPossession& getCopy (ASN1T_CRMF_ProofOfPossession* pDstData = 0);
   ASN1T_CRMF_ProofOfPossession* newCopy ();

   inline ASN1C_CRMF_ProofOfPossession& operator= (ASN1C_CRMF_ProofOfPossession& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_ProofOfPossession (OSCTXT* pctxt,
   ASN1T_CRMF_ProofOfPossession *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_ProofOfPossession (OSCTXT* pctxt, 
   ASN1T_CRMF_ProofOfPossession* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_ProofOfPossession 
   (const char* name, const ASN1T_CRMF_ProofOfPossession* pvalue);

EXTERN int asn1PrtToStrm_CRMF_ProofOfPossession (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_ProofOfPossession* pvalue);

EXTERN ASN1T_CRMF_ProofOfPossession* 
   new_ASN1T_CRMF_ProofOfPossession (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_ProofOfPossession (const char* name, 
   ASN1T_CRMF_ProofOfPossession* pValue, 
   ASN1T_CRMF_ProofOfPossession* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_ProofOfPossession (OSCTXT* pctxt, 
   ASN1T_CRMF_ProofOfPossession* pSrcValue, ASN1T_CRMF_ProofOfPossession*
    pDstValue);

EXTERN void asn1Init_CRMF_ProofOfPossession (ASN1T_CRMF_ProofOfPossession* pvalue);

EXTERN void asn1Free_CRMF_ProofOfPossession (OSCTXT *pctxt, 
   ASN1T_CRMF_ProofOfPossession* pvalue);

/**************************************************************/
/*                                                            */
/*  CertReqMsg_regInfo                                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'CertReqMsg'
*/
class EXTERN ASN1C_CRMF_CertReqMsg_regInfo;

/* List of ASN1T_EXP_AttributeTypeAndValue */
typedef struct EXTERN ASN1T_CRMF_CertReqMsg_regInfo : public ASN1TPDUSeqOfList {
   ~ASN1T_CRMF_CertReqMsg_regInfo();
} ASN1T_CRMF_CertReqMsg_regInfo;

class EXTERN ASN1C_CRMF_CertReqMsg_regInfo :
public ASN1CSeqOfList
{
protected:
   ASN1T_CRMF_CertReqMsg_regInfo& msgData;
public:
   ASN1C_CRMF_CertReqMsg_regInfo (ASN1T_CRMF_CertReqMsg_regInfo& data);
   ASN1C_CRMF_CertReqMsg_regInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_CertReqMsg_regInfo& data);
   ASN1C_CRMF_CertReqMsg_regInfo (ASN1CType& ccobj
      , ASN1T_CRMF_CertReqMsg_regInfo& data);
   ASN1C_CRMF_CertReqMsg_regInfo (OSRTContext &context
      , ASN1T_CRMF_CertReqMsg_regInfo& data);
   ASN1C_CRMF_CertReqMsg_regInfo (ASN1C_CRMF_CertReqMsg_regInfo& original);
   virtual ~ASN1C_CRMF_CertReqMsg_regInfo () {}
   inline ASN1T_CRMF_CertReqMsg_regInfo& getData () { return msgData; }
   inline const ASN1T_CRMF_CertReqMsg_regInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertReqMsg_regInfo");
   int toStream (const char* name = "CertReqMsg_regInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_CertReqMsg_regInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_CertReqMsg_regInfo& getCopy (ASN1T_CRMF_CertReqMsg_regInfo* pDstData = 0);
   ASN1T_CRMF_CertReqMsg_regInfo* newCopy ();

   ASN1C_CRMF_CertReqMsg_regInfo& operator= (ASN1C_CRMF_CertReqMsg_regInfo& srcData);
   void Append (ASN1T_EXP_AttributeTypeAndValue* elem);
   ASN1T_EXP_AttributeTypeAndValue* NewElement ();
   ASN1T_EXP_AttributeTypeAndValue* AppendNewElement ();
} ;

EXTERN int asn1E_CRMF_CertReqMsg_regInfo (OSCTXT* pctxt,
   ASN1T_CRMF_CertReqMsg_regInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_CertReqMsg_regInfo (OSCTXT* pctxt, 
   ASN1T_CRMF_CertReqMsg_regInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_CertReqMsg_regInfo 
   (const char* name, const ASN1T_CRMF_CertReqMsg_regInfo* pvalue);

EXTERN int asn1PrtToStrm_CRMF_CertReqMsg_regInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_CertReqMsg_regInfo* pvalue);

EXTERN OSBOOL asn1Compare_CRMF_CertReqMsg_regInfo (const char* name, 
   ASN1T_CRMF_CertReqMsg_regInfo* pValue, 
   ASN1T_CRMF_CertReqMsg_regInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_CertReqMsg_regInfo (OSCTXT* pctxt, 
   ASN1T_CRMF_CertReqMsg_regInfo* pSrcValue, ASN1T_CRMF_CertReqMsg_regInfo*
    pDstValue);

EXTERN void asn1Init_CRMF_CertReqMsg_regInfo (ASN1T_CRMF_CertReqMsg_regInfo* pvalue);

EXTERN void asn1Free_CRMF_CertReqMsg_regInfo (OSCTXT *pctxt, 
   ASN1T_CRMF_CertReqMsg_regInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertReqMsg                                                */
/*                                                            */
/**************************************************************/
/*
CertReqMsg ::= SEQUENCE {
   certReq CertRequest,
   pop ProofOfPossession OPTIONAL,
   regInfo SEQUENCE (SIZE (1..MAX)) OF AttributeTypeAndValue OPTIONAL
}
*/
#define TV_CRMF_CertReqMsg	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_CertReqMsg;

struct EXTERN ASN1T_CRMF_CertReqMsg : public ASN1TPDU {
   struct {
      unsigned popPresent : 1;
      unsigned regInfoPresent : 1;
   } m;
   ASN1T_CRMF_CertRequest certReq;
   ASN1T_CRMF_ProofOfPossession pop;
   ASN1T_CRMF_CertReqMsg_regInfo regInfo;
   ASN1T_CRMF_CertReqMsg ();
   ASN1T_CRMF_CertReqMsg (ASN1C_CRMF_CertReqMsg& srcData);
   ~ASN1T_CRMF_CertReqMsg ();
} ;

class EXTERN ASN1C_CRMF_CertReqMsg :
public ASN1CType
{
protected:
   ASN1T_CRMF_CertReqMsg& msgData;
public:
   ASN1C_CRMF_CertReqMsg (ASN1T_CRMF_CertReqMsg& data);
   ASN1C_CRMF_CertReqMsg (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_CertReqMsg& data);
   ASN1C_CRMF_CertReqMsg (OSRTContext &context, ASN1T_CRMF_CertReqMsg& data);
   ASN1C_CRMF_CertReqMsg (ASN1C_CRMF_CertReqMsg& original);
   virtual ~ASN1C_CRMF_CertReqMsg () {}
   inline ASN1T_CRMF_CertReqMsg& getData () { return msgData; }
   inline const ASN1T_CRMF_CertReqMsg& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertReqMsg");
   int toStream (const char* name = "CertReqMsg");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_CertReqMsg* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_CertReqMsg& getCopy (ASN1T_CRMF_CertReqMsg* pDstData = 0);
   ASN1T_CRMF_CertReqMsg* newCopy ();

   inline ASN1C_CRMF_CertReqMsg& operator= (ASN1C_CRMF_CertReqMsg& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_CRMF_CertReqMsg (OSCTXT* pctxt,
   ASN1T_CRMF_CertReqMsg *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_CertReqMsg (OSCTXT* pctxt, 
   ASN1T_CRMF_CertReqMsg* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_CertReqMsg 
   (const char* name, const ASN1T_CRMF_CertReqMsg* pvalue);

EXTERN int asn1PrtToStrm_CRMF_CertReqMsg (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_CertReqMsg* pvalue);

EXTERN ASN1T_CRMF_CertReqMsg* new_ASN1T_CRMF_CertReqMsg (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_CRMF_CertReqMsg (const char* name, 
   ASN1T_CRMF_CertReqMsg* pValue, ASN1T_CRMF_CertReqMsg* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_CertReqMsg (OSCTXT* pctxt, 
   ASN1T_CRMF_CertReqMsg* pSrcValue, ASN1T_CRMF_CertReqMsg* pDstValue);

EXTERN void asn1Init_CRMF_CertReqMsg (ASN1T_CRMF_CertReqMsg* pvalue);

EXTERN void asn1Free_CRMF_CertReqMsg (OSCTXT *pctxt, ASN1T_CRMF_CertReqMsg* pvalue);

/**************************************************************/
/*                                                            */
/*  CertReqMessages                                           */
/*                                                            */
/**************************************************************/
/*
 with systax:
 ProtocolEncrKey ::= SubjectPublicKeyInfo

CertReqMessages ::= SEQUENCE (SIZE (1..MAX)) OF CertReqMsg
*/
#define TV_CRMF_CertReqMessages	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_CRMF_CertReqMessages;

/* List of ASN1T_CRMF_CertReqMsg */
typedef struct EXTERN ASN1T_CRMF_CertReqMessages : public ASN1TPDUSeqOfList {
   ~ASN1T_CRMF_CertReqMessages();
} ASN1T_CRMF_CertReqMessages;

class EXTERN ASN1C_CRMF_CertReqMessages :
public ASN1CSeqOfList
{
protected:
   ASN1T_CRMF_CertReqMessages& msgData;
public:
   ASN1C_CRMF_CertReqMessages (ASN1T_CRMF_CertReqMessages& data);
   ASN1C_CRMF_CertReqMessages (OSRTMessageBufferIF& msgBuf
      , ASN1T_CRMF_CertReqMessages& data);
   ASN1C_CRMF_CertReqMessages (ASN1CType& ccobj
      , ASN1T_CRMF_CertReqMessages& data);
   ASN1C_CRMF_CertReqMessages (OSRTContext &context
      , ASN1T_CRMF_CertReqMessages& data);
   ASN1C_CRMF_CertReqMessages (ASN1C_CRMF_CertReqMessages& original);
   virtual ~ASN1C_CRMF_CertReqMessages () {}
   inline ASN1T_CRMF_CertReqMessages& getData () { return msgData; }
   inline const ASN1T_CRMF_CertReqMessages& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertReqMessages");
   int toStream (const char* name = "CertReqMessages");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_CRMF_CertReqMessages* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_CRMF_CertReqMessages& getCopy (ASN1T_CRMF_CertReqMessages* pDstData = 0);
   ASN1T_CRMF_CertReqMessages* newCopy ();

   ASN1C_CRMF_CertReqMessages& operator= (ASN1C_CRMF_CertReqMessages& srcData);
   void Append (ASN1T_CRMF_CertReqMsg* elem);
   ASN1T_CRMF_CertReqMsg* NewElement ();
   ASN1T_CRMF_CertReqMsg* AppendNewElement ();
} ;

EXTERN int asn1E_CRMF_CertReqMessages (OSCTXT* pctxt,
   ASN1T_CRMF_CertReqMessages *pvalue, ASN1TagType tagging);

EXTERN int asn1D_CRMF_CertReqMessages (OSCTXT* pctxt, 
   ASN1T_CRMF_CertReqMessages* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_CRMF_CertReqMessages 
   (const char* name, const ASN1T_CRMF_CertReqMessages* pvalue);

EXTERN int asn1PrtToStrm_CRMF_CertReqMessages (OSCTXT *pctxt, 
   const char* name, const ASN1T_CRMF_CertReqMessages* pvalue);

EXTERN OSBOOL asn1Compare_CRMF_CertReqMessages (const char* name, 
   ASN1T_CRMF_CertReqMessages* pValue, ASN1T_CRMF_CertReqMessages* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_CRMF_CertReqMessages (OSCTXT* pctxt, 
   ASN1T_CRMF_CertReqMessages* pSrcValue, ASN1T_CRMF_CertReqMessages*
    pDstValue);

EXTERN void asn1Init_CRMF_CertReqMessages (ASN1T_CRMF_CertReqMessages* pvalue);

EXTERN void asn1Free_CRMF_CertReqMessages (OSCTXT *pctxt, 
   ASN1T_CRMF_CertReqMessages* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID CRMF_id_pkix;
extern EXTERN ASN1OBJID CRMF_id_pkip;
extern EXTERN ASN1OBJID CRMF_id_regCtrl;
extern EXTERN ASN1OBJID CRMF_id_regCtrl_protocolEncrKey;

#endif
