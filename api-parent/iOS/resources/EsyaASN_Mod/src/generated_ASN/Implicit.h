/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 28-Feb-2014.
 */
#ifndef IMPLICIT_H
#define IMPLICIT_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CBitStr.h"
#include "rtsrc/ASN1CGeneralizedTime.h"
#include "rtsrc/ASN1CSeqOfList.h"
#include "Explicit.h"

/**
 * Header file for ASN.1 module Implicit
 */
/**************************************************************/
/*                                                            */
/*  AnotherName                                               */
/*                                                            */
/**************************************************************/
/*
AnotherName ::= SEQUENCE {
   type-id OBJECT IDENTIFIER,
   value [0] EXPLICIT ANY
}
*/
#define TV_IMP_AnotherName	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_AnotherName;

struct EXTERN ASN1T_IMP_AnotherName : public ASN1TPDU {
   ASN1TObjId type_id;
   ASN1TOpenType value;
   ASN1T_IMP_AnotherName ();
   ASN1T_IMP_AnotherName (ASN1C_IMP_AnotherName& srcData);
   ~ASN1T_IMP_AnotherName ();
} ;

class EXTERN ASN1C_IMP_AnotherName :
public ASN1CType
{
protected:
   ASN1T_IMP_AnotherName& msgData;
public:
   ASN1C_IMP_AnotherName (ASN1T_IMP_AnotherName& data);
   ASN1C_IMP_AnotherName (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_AnotherName& data);
   ASN1C_IMP_AnotherName (OSRTContext &context, ASN1T_IMP_AnotherName& data);
   ASN1C_IMP_AnotherName (ASN1C_IMP_AnotherName& original);
   virtual ~ASN1C_IMP_AnotherName () {}
   inline ASN1T_IMP_AnotherName& getData () { return msgData; }
   inline const ASN1T_IMP_AnotherName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AnotherName");
   int toStream (const char* name = "AnotherName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_AnotherName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_AnotherName& getCopy (ASN1T_IMP_AnotherName* pDstData = 0);
   ASN1T_IMP_AnotherName* newCopy ();

   inline ASN1C_IMP_AnotherName& operator= (ASN1C_IMP_AnotherName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_AnotherName (OSCTXT* pctxt,
   ASN1T_IMP_AnotherName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_AnotherName (OSCTXT* pctxt, 
   ASN1T_IMP_AnotherName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_AnotherName 
   (const char* name, const ASN1T_IMP_AnotherName* pvalue);

EXTERN int asn1PrtToStrm_IMP_AnotherName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_AnotherName* pvalue);

EXTERN ASN1T_IMP_AnotherName* new_ASN1T_IMP_AnotherName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_AnotherName (const char* name, 
   ASN1T_IMP_AnotherName* pValue, ASN1T_IMP_AnotherName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_AnotherName (OSCTXT* pctxt, 
   ASN1T_IMP_AnotherName* pSrcValue, ASN1T_IMP_AnotherName* pDstValue);

EXTERN void asn1Init_IMP_AnotherName (ASN1T_IMP_AnotherName* pvalue);

EXTERN void asn1Free_IMP_AnotherName (OSCTXT *pctxt, ASN1T_IMP_AnotherName* pvalue);

/**************************************************************/
/*                                                            */
/*  EDIPartyName                                              */
/*                                                            */
/**************************************************************/
/*
EDIPartyName ::= SEQUENCE {
   nameAssigner [0] DirectoryString OPTIONAL,
   partyName [1] DirectoryString
}
*/
#define TV_IMP_EDIPartyName	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_EDIPartyName;

struct EXTERN ASN1T_IMP_EDIPartyName : public ASN1TPDU {
   struct {
      unsigned nameAssignerPresent : 1;
   } m;
   ASN1T_EXP_DirectoryString nameAssigner;
   ASN1T_EXP_DirectoryString partyName;
   ASN1T_IMP_EDIPartyName ();
   ASN1T_IMP_EDIPartyName (ASN1C_IMP_EDIPartyName& srcData);
   ~ASN1T_IMP_EDIPartyName ();
} ;

class EXTERN ASN1C_IMP_EDIPartyName :
public ASN1CType
{
protected:
   ASN1T_IMP_EDIPartyName& msgData;
public:
   ASN1C_IMP_EDIPartyName (ASN1T_IMP_EDIPartyName& data);
   ASN1C_IMP_EDIPartyName (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_EDIPartyName& data);
   ASN1C_IMP_EDIPartyName (OSRTContext &context, ASN1T_IMP_EDIPartyName& data);
   ASN1C_IMP_EDIPartyName (ASN1C_IMP_EDIPartyName& original);
   virtual ~ASN1C_IMP_EDIPartyName () {}
   inline ASN1T_IMP_EDIPartyName& getData () { return msgData; }
   inline const ASN1T_IMP_EDIPartyName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EDIPartyName");
   int toStream (const char* name = "EDIPartyName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_EDIPartyName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_EDIPartyName& getCopy (ASN1T_IMP_EDIPartyName* pDstData = 0);
   ASN1T_IMP_EDIPartyName* newCopy ();

   inline ASN1C_IMP_EDIPartyName& operator= (ASN1C_IMP_EDIPartyName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_EDIPartyName (OSCTXT* pctxt,
   ASN1T_IMP_EDIPartyName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_EDIPartyName (OSCTXT* pctxt, 
   ASN1T_IMP_EDIPartyName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_EDIPartyName 
   (const char* name, const ASN1T_IMP_EDIPartyName* pvalue);

EXTERN int asn1PrtToStrm_IMP_EDIPartyName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_EDIPartyName* pvalue);

EXTERN ASN1T_IMP_EDIPartyName* new_ASN1T_IMP_EDIPartyName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_EDIPartyName (const char* name, 
   ASN1T_IMP_EDIPartyName* pValue, ASN1T_IMP_EDIPartyName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_EDIPartyName (OSCTXT* pctxt, 
   ASN1T_IMP_EDIPartyName* pSrcValue, ASN1T_IMP_EDIPartyName* pDstValue);

EXTERN void asn1Init_IMP_EDIPartyName (ASN1T_IMP_EDIPartyName* pvalue);

EXTERN void asn1Free_IMP_EDIPartyName (OSCTXT *pctxt, ASN1T_IMP_EDIPartyName* pvalue);

/**************************************************************/
/*                                                            */
/*  GeneralName                                               */
/*                                                            */
/**************************************************************/
/*
GeneralName ::= CHOICE {
   otherName [0] AnotherName,
   rfc822Name [1] IA5String,
   dNSName [2] IA5String,
   x400Address [3] ORAddress,
   directoryName [4] Name,
   ediPartyName [5] EDIPartyName,
   uniformResourceIdentifier [6] IA5String,
   iPAddress [7] OCTET STRING,
   registeredID [8] OBJECT IDENTIFIER
}
*/
/* Choice context tags */

#define TVC_IMP_GeneralName_otherName	(TM_CTXT|TM_CONS|0)
#define TVC_IMP_GeneralName_rfc822Name	(TM_CTXT|TM_PRIM|1)
#define TVC_IMP_GeneralName_dNSName	(TM_CTXT|TM_PRIM|2)
#define TVC_IMP_GeneralName_x400Address	(TM_CTXT|TM_CONS|3)
#define TVC_IMP_GeneralName_directoryName	(TM_CTXT|TM_CONS|4)
#define TVC_IMP_GeneralName_ediPartyName	(TM_CTXT|TM_CONS|5)
#define TVC_IMP_GeneralName_uniformResourceIdentifier	(TM_CTXT|TM_PRIM|6)
#define TVC_IMP_GeneralName_iPAddress	(TM_CTXT|TM_PRIM|7)
#define TVC_IMP_GeneralName_registeredID	(TM_CTXT|TM_PRIM|8)

/* Choice tag constants */

#define T_IMP_GeneralName_otherName     1
#define T_IMP_GeneralName_rfc822Name    2
#define T_IMP_GeneralName_dNSName       3
#define T_IMP_GeneralName_x400Address   4
#define T_IMP_GeneralName_directoryName 5
#define T_IMP_GeneralName_ediPartyName  6
#define T_IMP_GeneralName_uniformResourceIdentifier 7
#define T_IMP_GeneralName_iPAddress     8
#define T_IMP_GeneralName_registeredID  9

class EXTERN ASN1C_IMP_GeneralName;

struct EXTERN ASN1T_IMP_GeneralName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_IMP_AnotherName *otherName;
      /* t = 2 */
      const char* rfc822Name;
      /* t = 3 */
      const char* dNSName;
      /* t = 4 */
      ASN1T_EXP_ORAddress *x400Address;
      /* t = 5 */
      ASN1T_EXP_Name *directoryName;
      /* t = 6 */
      ASN1T_IMP_EDIPartyName *ediPartyName;
      /* t = 7 */
      const char* uniformResourceIdentifier;
      /* t = 8 */
      ASN1TDynOctStr *iPAddress;
      /* t = 9 */
      ASN1TObjId *registeredID;
   } u;
   ASN1T_IMP_GeneralName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_IMP_GeneralName (ASN1C_IMP_GeneralName& srcData);
   ~ASN1T_IMP_GeneralName ();
} ;

class EXTERN ASN1C_IMP_GeneralName :
public ASN1CType
{
protected:
   ASN1T_IMP_GeneralName& msgData;
public:
   ASN1C_IMP_GeneralName (ASN1T_IMP_GeneralName& data);
   ASN1C_IMP_GeneralName (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_GeneralName& data);
   ASN1C_IMP_GeneralName (OSRTContext &context, ASN1T_IMP_GeneralName& data);
   ASN1C_IMP_GeneralName (ASN1C_IMP_GeneralName& original);
   virtual ~ASN1C_IMP_GeneralName () {}
   inline ASN1T_IMP_GeneralName& getData () { return msgData; }
   inline const ASN1T_IMP_GeneralName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "GeneralName");
   int toStream (const char* name = "GeneralName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_GeneralName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_GeneralName& getCopy (ASN1T_IMP_GeneralName* pDstData = 0);
   ASN1T_IMP_GeneralName* newCopy ();

   inline ASN1C_IMP_GeneralName& operator= (ASN1C_IMP_GeneralName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_GeneralName (OSCTXT* pctxt,
   ASN1T_IMP_GeneralName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_GeneralName (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_GeneralName 
   (const char* name, const ASN1T_IMP_GeneralName* pvalue);

EXTERN int asn1PrtToStrm_IMP_GeneralName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_GeneralName* pvalue);

EXTERN ASN1T_IMP_GeneralName* new_ASN1T_IMP_GeneralName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_GeneralName (const char* name, 
   ASN1T_IMP_GeneralName* pValue, ASN1T_IMP_GeneralName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_GeneralName (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralName* pSrcValue, ASN1T_IMP_GeneralName* pDstValue);

EXTERN void asn1Init_IMP_GeneralName (ASN1T_IMP_GeneralName* pvalue);

EXTERN void asn1Free_IMP_GeneralName (OSCTXT *pctxt, ASN1T_IMP_GeneralName* pvalue);

/**************************************************************/
/*                                                            */
/*  GeneralNames                                              */
/*                                                            */
/**************************************************************/
/*
GeneralNames ::= SEQUENCE (SIZE (1..MAX)) OF GeneralName
*/
#define TV_IMP_GeneralNames	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_GeneralNames;

/* List of ASN1T_IMP_GeneralName */
typedef struct EXTERN ASN1T_IMP_GeneralNames : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_GeneralNames();
} ASN1T_IMP_GeneralNames;

class EXTERN ASN1C_IMP_GeneralNames :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_GeneralNames& msgData;
public:
   ASN1C_IMP_GeneralNames (ASN1T_IMP_GeneralNames& data);
   ASN1C_IMP_GeneralNames (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_GeneralNames& data);
   ASN1C_IMP_GeneralNames (ASN1CType& ccobj, ASN1T_IMP_GeneralNames& data);
   ASN1C_IMP_GeneralNames (OSRTContext &context, ASN1T_IMP_GeneralNames& data);
   ASN1C_IMP_GeneralNames (ASN1C_IMP_GeneralNames& original);
   virtual ~ASN1C_IMP_GeneralNames () {}
   inline ASN1T_IMP_GeneralNames& getData () { return msgData; }
   inline const ASN1T_IMP_GeneralNames& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "GeneralNames");
   int toStream (const char* name = "GeneralNames");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_GeneralNames* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_GeneralNames& getCopy (ASN1T_IMP_GeneralNames* pDstData = 0);
   ASN1T_IMP_GeneralNames* newCopy ();

   ASN1C_IMP_GeneralNames& operator= (ASN1C_IMP_GeneralNames& srcData);
   void Append (ASN1T_IMP_GeneralName* elem);
   ASN1T_IMP_GeneralName* NewElement ();
   ASN1T_IMP_GeneralName* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_GeneralNames (OSCTXT* pctxt,
   ASN1T_IMP_GeneralNames *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_GeneralNames (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralNames* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_GeneralNames 
   (const char* name, const ASN1T_IMP_GeneralNames* pvalue);

EXTERN int asn1PrtToStrm_IMP_GeneralNames (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_GeneralNames* pvalue);

EXTERN OSBOOL asn1Compare_IMP_GeneralNames (const char* name, 
   ASN1T_IMP_GeneralNames* pValue, ASN1T_IMP_GeneralNames* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_GeneralNames (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralNames* pSrcValue, ASN1T_IMP_GeneralNames* pDstValue);

EXTERN void asn1Init_IMP_GeneralNames (ASN1T_IMP_GeneralNames* pvalue);

EXTERN void asn1Free_IMP_GeneralNames (OSCTXT *pctxt, ASN1T_IMP_GeneralNames* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectAltName                                            */
/*                                                            */
/**************************************************************/
/*
SubjectAltName ::= GeneralNames
*/
#define TV_IMP_SubjectAltName	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_SubjectAltName;

/* List of ASN1T_IMP_GeneralName */
typedef ASN1T_IMP_GeneralNames ASN1T_IMP_SubjectAltName;

class EXTERN ASN1C_IMP_SubjectAltName :
   public ASN1C_IMP_GeneralNames
{
protected:
public:
   ASN1C_IMP_SubjectAltName (ASN1T_IMP_SubjectAltName& data);
   ASN1C_IMP_SubjectAltName (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_SubjectAltName& data);
   ASN1C_IMP_SubjectAltName (OSRTContext &context
      , ASN1T_IMP_SubjectAltName& data);
   ASN1C_IMP_SubjectAltName (ASN1C_IMP_SubjectAltName& original);
   virtual ~ASN1C_IMP_SubjectAltName () {}
   inline ASN1T_IMP_SubjectAltName& getData () { return msgData; }
   inline const ASN1T_IMP_SubjectAltName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SubjectAltName");
   int toStream (const char* name = "SubjectAltName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_SubjectAltName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_SubjectAltName& getCopy (ASN1T_IMP_SubjectAltName* pDstData = 0);
   ASN1T_IMP_SubjectAltName* newCopy ();

   inline ASN1C_IMP_SubjectAltName& operator= (ASN1C_IMP_SubjectAltName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_SubjectAltName (OSCTXT* pctxt,
   ASN1T_IMP_SubjectAltName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_SubjectAltName (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectAltName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_SubjectAltName 
   (const char* name, const ASN1T_IMP_SubjectAltName* pvalue);

EXTERN int asn1PrtToStrm_IMP_SubjectAltName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SubjectAltName* pvalue);

EXTERN ASN1T_IMP_SubjectAltName* 
   new_ASN1T_IMP_SubjectAltName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_SubjectAltName (const char* name, 
   ASN1T_IMP_SubjectAltName* pValue, ASN1T_IMP_SubjectAltName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_SubjectAltName (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectAltName* pSrcValue, ASN1T_IMP_SubjectAltName* pDstValue);

EXTERN void asn1Init_IMP_SubjectAltName (ASN1T_IMP_SubjectAltName* pvalue);

EXTERN void asn1Free_IMP_SubjectAltName (OSCTXT *pctxt, 
   ASN1T_IMP_SubjectAltName* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyIdentifier                                             */
/*                                                            */
/**************************************************************/
/*
 authorityCertIssuer and authorityCertSerialNumber MUST both
 be present or both be absent

KeyIdentifier ::= OCTET STRING
*/
#define TV_IMP_KeyIdentifier	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_IMP_KeyIdentifier;

class EXTERN ASN1C_IMP_KeyIdentifier :
public ASN1CType
{
protected:
   ASN1T_IMP_KeyIdentifier& msgData;
public:
   ASN1C_IMP_KeyIdentifier (ASN1T_IMP_KeyIdentifier& data);
   ASN1C_IMP_KeyIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_KeyIdentifier& data);
   ASN1C_IMP_KeyIdentifier (OSRTContext &context, ASN1T_IMP_KeyIdentifier& data
      );
   ASN1C_IMP_KeyIdentifier (ASN1C_IMP_KeyIdentifier& original);
   virtual ~ASN1C_IMP_KeyIdentifier () {}
   inline ASN1T_IMP_KeyIdentifier& getData () { return msgData; }
   inline const ASN1T_IMP_KeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyIdentifier");
   int toStream (const char* name = "KeyIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_KeyIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_KeyIdentifier& getCopy (ASN1T_IMP_KeyIdentifier* pDstData = 0);
   ASN1T_IMP_KeyIdentifier* newCopy ();

   inline ASN1C_IMP_KeyIdentifier& operator= (ASN1C_IMP_KeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_KeyIdentifier (OSCTXT* pctxt,
   ASN1T_IMP_KeyIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_KeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_KeyIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_KeyIdentifier 
   (const char* name, const ASN1T_IMP_KeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_IMP_KeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_KeyIdentifier* pvalue);

EXTERN ASN1T_IMP_KeyIdentifier* new_ASN1T_IMP_KeyIdentifier (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_IMP_KeyIdentifier (const char* name, 
   ASN1T_IMP_KeyIdentifier* pValue, ASN1T_IMP_KeyIdentifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_KeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_KeyIdentifier* pSrcValue, ASN1T_IMP_KeyIdentifier* pDstValue);

EXTERN void asn1Init_IMP_KeyIdentifier (ASN1T_IMP_KeyIdentifier* pvalue);

EXTERN void asn1Free_IMP_KeyIdentifier (OSCTXT *pctxt, 
   ASN1T_IMP_KeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectKeyIdentifier                                      */
/*                                                            */
/**************************************************************/
/*
SubjectKeyIdentifier ::= OCTET STRING
*/
#define TV_IMP_SubjectKeyIdentifier	(TM_UNIV|TM_PRIM|4)

typedef ASN1TDynOctStr ASN1T_IMP_SubjectKeyIdentifier;

class EXTERN ASN1C_IMP_SubjectKeyIdentifier :
public ASN1CType
{
protected:
   ASN1T_IMP_SubjectKeyIdentifier& msgData;
public:
   ASN1C_IMP_SubjectKeyIdentifier (ASN1T_IMP_SubjectKeyIdentifier& data);
   ASN1C_IMP_SubjectKeyIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_SubjectKeyIdentifier& data);
   ASN1C_IMP_SubjectKeyIdentifier (OSRTContext &context
      , ASN1T_IMP_SubjectKeyIdentifier& data);
   ASN1C_IMP_SubjectKeyIdentifier (ASN1C_IMP_SubjectKeyIdentifier& original);
   virtual ~ASN1C_IMP_SubjectKeyIdentifier () {}
   inline ASN1T_IMP_SubjectKeyIdentifier& getData () { return msgData; }
   inline const ASN1T_IMP_SubjectKeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SubjectKeyIdentifier");
   int toStream (const char* name = "SubjectKeyIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_SubjectKeyIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_SubjectKeyIdentifier& getCopy (ASN1T_IMP_SubjectKeyIdentifier* pDstData = 0);
   ASN1T_IMP_SubjectKeyIdentifier* newCopy ();

   inline ASN1C_IMP_SubjectKeyIdentifier& operator= (ASN1C_IMP_SubjectKeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_SubjectKeyIdentifier (OSCTXT* pctxt,
   ASN1T_IMP_SubjectKeyIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_SubjectKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectKeyIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_SubjectKeyIdentifier 
   (const char* name, const ASN1T_IMP_SubjectKeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_IMP_SubjectKeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SubjectKeyIdentifier* pvalue);

EXTERN ASN1T_IMP_SubjectKeyIdentifier* 
   new_ASN1T_IMP_SubjectKeyIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_SubjectKeyIdentifier (const char* name, 
   ASN1T_IMP_SubjectKeyIdentifier* pValue, 
   ASN1T_IMP_SubjectKeyIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_SubjectKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectKeyIdentifier* pSrcValue, ASN1T_IMP_SubjectKeyIdentifier*
    pDstValue);

EXTERN void asn1Init_IMP_SubjectKeyIdentifier (ASN1T_IMP_SubjectKeyIdentifier* pvalue);

EXTERN void asn1Free_IMP_SubjectKeyIdentifier (OSCTXT *pctxt, 
   ASN1T_IMP_SubjectKeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyUsage                                                  */
/*                                                            */
/**************************************************************/
/*
KeyUsage ::= BIT STRING  { digitalSignature(0), nonRepudiation(1), keyEncipherment(2), dataEncipherment(3), keyAgreement(4), keyCertSign(5), cRLSign(6), encipherOnly(7), decipherOnly(8) }
*/
#define TV_IMP_KeyUsage	(TM_UNIV|TM_PRIM|3)

class EXTERN ASN1C_IMP_KeyUsage;

struct EXTERN ASN1T_IMP_KeyUsage {
   OSUINT32 numbits;
   OSOCTET data[2];
   // ctors
   ASN1T_IMP_KeyUsage () : numbits(0) {}
   ASN1T_IMP_KeyUsage (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits (_numbits) {
      OSCRTLMEMCPY (data, _data, sizeof(data));
   }
   ASN1T_IMP_KeyUsage (ASN1C_IMP_KeyUsage& srcData);
} ;

class EXTERN ASN1C_IMP_KeyUsage :
public ASN1CBitStr
{
protected:
   ASN1T_IMP_KeyUsage& msgData;
public:
   // named bits
   enum { digitalSignature = 0, nonRepudiation = 1, keyEncipherment = 2, dataEncipherment = 3, keyAgreement = 4, keyCertSign = 5, cRLSign = 6, encipherOnly = 7, decipherOnly = 8 };

   ASN1C_IMP_KeyUsage (ASN1T_IMP_KeyUsage& data);
   ASN1C_IMP_KeyUsage (OSRTMessageBufferIF& msgBuf, ASN1T_IMP_KeyUsage& data);
   ASN1C_IMP_KeyUsage (OSRTContext &context, ASN1T_IMP_KeyUsage& data);
   ASN1C_IMP_KeyUsage (ASN1C_IMP_KeyUsage& original);
   virtual ~ASN1C_IMP_KeyUsage () {}
   inline ASN1T_IMP_KeyUsage& getData () { return msgData; }
   inline const ASN1T_IMP_KeyUsage& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyUsage");
   int toStream (const char* name = "KeyUsage");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_KeyUsage* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_KeyUsage& getCopy (ASN1T_IMP_KeyUsage* pDstData = 0);
   ASN1T_IMP_KeyUsage* newCopy ();

   ASN1C_IMP_KeyUsage& operator= (ASN1C_IMP_KeyUsage& srcData);
} ;

EXTERN int asn1E_IMP_KeyUsage (OSCTXT* pctxt,
   ASN1T_IMP_KeyUsage *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_KeyUsage (OSCTXT* pctxt, ASN1T_IMP_KeyUsage* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_KeyUsage 
   (const char* name, const ASN1T_IMP_KeyUsage* pvalue);

EXTERN int asn1PrtToStrm_IMP_KeyUsage (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_KeyUsage* pvalue);

EXTERN ASN1T_IMP_KeyUsage* new_ASN1T_IMP_KeyUsage (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_KeyUsage (const char* name, ASN1T_IMP_KeyUsage* pValue, 
   ASN1T_IMP_KeyUsage* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_KeyUsage (OSCTXT* pctxt, ASN1T_IMP_KeyUsage* pSrcValue, 
   ASN1T_IMP_KeyUsage* pDstValue);

EXTERN void asn1Init_IMP_KeyUsage (ASN1T_IMP_KeyUsage* pvalue);

/**************************************************************/
/*                                                            */
/*  CertPolicyId                                              */
/*                                                            */
/**************************************************************/
/*
CertPolicyId ::= OBJECT IDENTIFIER
*/
#define TV_IMP_CertPolicyId	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_IMP_CertPolicyId;

class EXTERN ASN1C_IMP_CertPolicyId :
public ASN1CType
{
protected:
   ASN1T_IMP_CertPolicyId& msgData;
public:
   ASN1C_IMP_CertPolicyId (ASN1T_IMP_CertPolicyId& data);
   ASN1C_IMP_CertPolicyId (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_CertPolicyId& data);
   ASN1C_IMP_CertPolicyId (OSRTContext &context, ASN1T_IMP_CertPolicyId& data);
   ASN1C_IMP_CertPolicyId (ASN1C_IMP_CertPolicyId& original);
   virtual ~ASN1C_IMP_CertPolicyId () {}
   inline ASN1T_IMP_CertPolicyId& getData () { return msgData; }
   inline const ASN1T_IMP_CertPolicyId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertPolicyId");
   int toStream (const char* name = "CertPolicyId");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_CertPolicyId* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_CertPolicyId& getCopy (ASN1T_IMP_CertPolicyId* pDstData = 0);
   ASN1T_IMP_CertPolicyId* newCopy ();

   inline ASN1C_IMP_CertPolicyId& operator= (ASN1C_IMP_CertPolicyId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_CertPolicyId (OSCTXT* pctxt,
   ASN1T_IMP_CertPolicyId *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_CertPolicyId (OSCTXT* pctxt, 
   ASN1T_IMP_CertPolicyId* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_CertPolicyId 
   (const char* name, const ASN1T_IMP_CertPolicyId* pvalue);

EXTERN int asn1PrtToStrm_IMP_CertPolicyId (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CertPolicyId* pvalue);

EXTERN ASN1T_IMP_CertPolicyId* new_ASN1T_IMP_CertPolicyId (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_CertPolicyId (const char* name, 
   ASN1T_IMP_CertPolicyId* pValue, ASN1T_IMP_CertPolicyId* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_CertPolicyId (OSCTXT* pctxt, 
   ASN1T_IMP_CertPolicyId* pSrcValue, ASN1T_IMP_CertPolicyId* pDstValue);

EXTERN void asn1Init_IMP_CertPolicyId (ASN1T_IMP_CertPolicyId* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyQualifierId                                         */
/*                                                            */
/**************************************************************/
/*
 Implementations that recognize additional policy qualifiers MUST
 augment the following definition for PolicyQualifierId

PolicyQualifierId ::= OBJECT IDENTIFIER
*/
#define TV_IMP_PolicyQualifierId	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_IMP_PolicyQualifierId;

class EXTERN ASN1C_IMP_PolicyQualifierId :
public ASN1CType
{
protected:
   ASN1T_IMP_PolicyQualifierId& msgData;
public:
   ASN1C_IMP_PolicyQualifierId (ASN1T_IMP_PolicyQualifierId& data);
   ASN1C_IMP_PolicyQualifierId (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_PolicyQualifierId& data);
   ASN1C_IMP_PolicyQualifierId (OSRTContext &context
      , ASN1T_IMP_PolicyQualifierId& data);
   ASN1C_IMP_PolicyQualifierId (ASN1C_IMP_PolicyQualifierId& original);
   virtual ~ASN1C_IMP_PolicyQualifierId () {}
   inline ASN1T_IMP_PolicyQualifierId& getData () { return msgData; }
   inline const ASN1T_IMP_PolicyQualifierId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PolicyQualifierId");
   int toStream (const char* name = "PolicyQualifierId");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_PolicyQualifierId* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_PolicyQualifierId& getCopy (ASN1T_IMP_PolicyQualifierId* pDstData = 0);
   ASN1T_IMP_PolicyQualifierId* newCopy ();

   inline ASN1C_IMP_PolicyQualifierId& operator= (ASN1C_IMP_PolicyQualifierId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_PolicyQualifierId (OSCTXT* pctxt,
   ASN1T_IMP_PolicyQualifierId *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_PolicyQualifierId (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyQualifierId* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_PolicyQualifierId 
   (const char* name, const ASN1T_IMP_PolicyQualifierId* pvalue);

EXTERN int asn1PrtToStrm_IMP_PolicyQualifierId (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyQualifierId* pvalue);

EXTERN ASN1T_IMP_PolicyQualifierId* 
   new_ASN1T_IMP_PolicyQualifierId (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_PolicyQualifierId (const char* name, 
   ASN1T_IMP_PolicyQualifierId* pValue, 
   ASN1T_IMP_PolicyQualifierId* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_PolicyQualifierId (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyQualifierId* pSrcValue, ASN1T_IMP_PolicyQualifierId*
    pDstValue);

EXTERN void asn1Init_IMP_PolicyQualifierId (ASN1T_IMP_PolicyQualifierId* pvalue);

/**************************************************************/
/*                                                            */
/*  CPSuri                                                    */
/*                                                            */
/**************************************************************/
/*
CPSuri ::= IA5String
*/
#define TV_IMP_CPSuri	(TM_UNIV|TM_PRIM|22)

typedef const char* ASN1T_IMP_CPSuri;

class EXTERN ASN1C_IMP_CPSuri :
public ASN1CType
{
protected:
   ASN1T_IMP_CPSuri& msgData;
public:
   ASN1C_IMP_CPSuri (ASN1T_IMP_CPSuri& data);
   ASN1C_IMP_CPSuri (OSRTMessageBufferIF& msgBuf, ASN1T_IMP_CPSuri& data);
   ASN1C_IMP_CPSuri (OSRTContext &context, ASN1T_IMP_CPSuri& data);
   ASN1C_IMP_CPSuri (ASN1C_IMP_CPSuri& original);
   virtual ~ASN1C_IMP_CPSuri () {}
   inline ASN1T_IMP_CPSuri& getData () { return msgData; }
   inline const ASN1T_IMP_CPSuri& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CPSuri");
   int toStream (const char* name = "CPSuri");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_CPSuri* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_CPSuri& getCopy (ASN1T_IMP_CPSuri* pDstData = 0);
   ASN1T_IMP_CPSuri* newCopy ();

   inline ASN1C_IMP_CPSuri& operator= (ASN1C_IMP_CPSuri& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_CPSuri (OSCTXT* pctxt,
   ASN1T_IMP_CPSuri pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_CPSuri (OSCTXT* pctxt, ASN1T_IMP_CPSuri* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_CPSuri (const char* name, const ASN1T_IMP_CPSuri pvalue);

EXTERN int asn1PrtToStrm_IMP_CPSuri (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CPSuri pvalue);

EXTERN OSBOOL asn1Compare_IMP_CPSuri (const char* name, ASN1T_IMP_CPSuri* pValue, 
   ASN1T_IMP_CPSuri* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_CPSuri (OSCTXT* pctxt, ASN1T_IMP_CPSuri pSrcValue, 
   ASN1T_IMP_CPSuri* pDstValue);

EXTERN void asn1Free_IMP_CPSuri (OSCTXT *pctxt, ASN1T_IMP_CPSuri pvalue);

/**************************************************************/
/*                                                            */
/*  KeyPurposeId                                              */
/*                                                            */
/**************************************************************/
/*
KeyPurposeId ::= OBJECT IDENTIFIER
*/
#define TV_IMP_KeyPurposeId	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_IMP_KeyPurposeId;

class EXTERN ASN1C_IMP_KeyPurposeId :
public ASN1CType
{
protected:
   ASN1T_IMP_KeyPurposeId& msgData;
public:
   ASN1C_IMP_KeyPurposeId (ASN1T_IMP_KeyPurposeId& data);
   ASN1C_IMP_KeyPurposeId (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_KeyPurposeId& data);
   ASN1C_IMP_KeyPurposeId (OSRTContext &context, ASN1T_IMP_KeyPurposeId& data);
   ASN1C_IMP_KeyPurposeId (ASN1C_IMP_KeyPurposeId& original);
   virtual ~ASN1C_IMP_KeyPurposeId () {}
   inline ASN1T_IMP_KeyPurposeId& getData () { return msgData; }
   inline const ASN1T_IMP_KeyPurposeId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "KeyPurposeId");
   int toStream (const char* name = "KeyPurposeId");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_KeyPurposeId* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_KeyPurposeId& getCopy (ASN1T_IMP_KeyPurposeId* pDstData = 0);
   ASN1T_IMP_KeyPurposeId* newCopy ();

   inline ASN1C_IMP_KeyPurposeId& operator= (ASN1C_IMP_KeyPurposeId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_KeyPurposeId (OSCTXT* pctxt,
   ASN1T_IMP_KeyPurposeId *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_KeyPurposeId (OSCTXT* pctxt, 
   ASN1T_IMP_KeyPurposeId* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_KeyPurposeId 
   (const char* name, const ASN1T_IMP_KeyPurposeId* pvalue);

EXTERN int asn1PrtToStrm_IMP_KeyPurposeId (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_KeyPurposeId* pvalue);

EXTERN ASN1T_IMP_KeyPurposeId* new_ASN1T_IMP_KeyPurposeId (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_KeyPurposeId (const char* name, 
   ASN1T_IMP_KeyPurposeId* pValue, ASN1T_IMP_KeyPurposeId* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_KeyPurposeId (OSCTXT* pctxt, 
   ASN1T_IMP_KeyPurposeId* pSrcValue, ASN1T_IMP_KeyPurposeId* pDstValue);

EXTERN void asn1Init_IMP_KeyPurposeId (ASN1T_IMP_KeyPurposeId* pvalue);

/**************************************************************/
/*                                                            */
/*  ReasonFlags                                               */
/*                                                            */
/**************************************************************/
/*
ReasonFlags ::= BIT STRING  { unused(0), keyCompromise(1), cACompromise(2), affiliationChanged(3), superseded(4), cessationOfOperation(5), certificateHold(6), privilegeWithdrawn(7), aACompromise(8) }
*/
#define TV_IMP_ReasonFlags	(TM_UNIV|TM_PRIM|3)

class EXTERN ASN1C_IMP_ReasonFlags;

struct EXTERN ASN1T_IMP_ReasonFlags {
   OSUINT32 numbits;
   OSOCTET data[2];
   // ctors
   ASN1T_IMP_ReasonFlags () : numbits(0) {}
   ASN1T_IMP_ReasonFlags (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits (_numbits) {
      OSCRTLMEMCPY (data, _data, sizeof(data));
   }
   ASN1T_IMP_ReasonFlags (ASN1C_IMP_ReasonFlags& srcData);
} ;

class EXTERN ASN1C_IMP_ReasonFlags :
public ASN1CBitStr
{
protected:
   ASN1T_IMP_ReasonFlags& msgData;
public:
   // named bits
   enum { unused = 0, keyCompromise = 1, cACompromise = 2, affiliationChanged = 3, superseded = 4, cessationOfOperation = 5, certificateHold = 6, privilegeWithdrawn = 7, aACompromise = 8 };

   ASN1C_IMP_ReasonFlags (ASN1T_IMP_ReasonFlags& data);
   ASN1C_IMP_ReasonFlags (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_ReasonFlags& data);
   ASN1C_IMP_ReasonFlags (OSRTContext &context, ASN1T_IMP_ReasonFlags& data);
   ASN1C_IMP_ReasonFlags (ASN1C_IMP_ReasonFlags& original);
   virtual ~ASN1C_IMP_ReasonFlags () {}
   inline ASN1T_IMP_ReasonFlags& getData () { return msgData; }
   inline const ASN1T_IMP_ReasonFlags& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ReasonFlags");
   int toStream (const char* name = "ReasonFlags");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_ReasonFlags* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_ReasonFlags& getCopy (ASN1T_IMP_ReasonFlags* pDstData = 0);
   ASN1T_IMP_ReasonFlags* newCopy ();

   ASN1C_IMP_ReasonFlags& operator= (ASN1C_IMP_ReasonFlags& srcData);
} ;

EXTERN int asn1E_IMP_ReasonFlags (OSCTXT* pctxt,
   ASN1T_IMP_ReasonFlags *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_ReasonFlags (OSCTXT* pctxt, 
   ASN1T_IMP_ReasonFlags* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_ReasonFlags 
   (const char* name, const ASN1T_IMP_ReasonFlags* pvalue);

EXTERN int asn1PrtToStrm_IMP_ReasonFlags (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_ReasonFlags* pvalue);

EXTERN ASN1T_IMP_ReasonFlags* new_ASN1T_IMP_ReasonFlags (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_ReasonFlags (const char* name, 
   ASN1T_IMP_ReasonFlags* pValue, ASN1T_IMP_ReasonFlags* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_ReasonFlags (OSCTXT* pctxt, 
   ASN1T_IMP_ReasonFlags* pSrcValue, ASN1T_IMP_ReasonFlags* pDstValue);

EXTERN void asn1Init_IMP_ReasonFlags (ASN1T_IMP_ReasonFlags* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLNumber                                                 */
/*                                                            */
/**************************************************************/
/*
CRLNumber ::= INTEGER
*/
#define TV_IMP_CRLNumber	(TM_UNIV|TM_PRIM|2)

typedef const char* ASN1T_IMP_CRLNumber;

class EXTERN ASN1C_IMP_CRLNumber :
public ASN1CType
{
protected:
   ASN1T_IMP_CRLNumber& msgData;
public:
   ASN1C_IMP_CRLNumber (ASN1T_IMP_CRLNumber& data);
   ASN1C_IMP_CRLNumber (OSRTMessageBufferIF& msgBuf, ASN1T_IMP_CRLNumber& data);
   ASN1C_IMP_CRLNumber (OSRTContext &context, ASN1T_IMP_CRLNumber& data);
   ASN1C_IMP_CRLNumber (ASN1C_IMP_CRLNumber& original);
   virtual ~ASN1C_IMP_CRLNumber () {}
   inline ASN1T_IMP_CRLNumber& getData () { return msgData; }
   inline const ASN1T_IMP_CRLNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CRLNumber");
   int toStream (const char* name = "CRLNumber");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_CRLNumber* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_CRLNumber& getCopy (ASN1T_IMP_CRLNumber* pDstData = 0);
   ASN1T_IMP_CRLNumber* newCopy ();

   inline ASN1C_IMP_CRLNumber& operator= (ASN1C_IMP_CRLNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_CRLNumber (OSCTXT* pctxt,
   ASN1T_IMP_CRLNumber *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_CRLNumber (OSCTXT* pctxt, ASN1T_IMP_CRLNumber* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_CRLNumber 
   (const char* name, const ASN1T_IMP_CRLNumber* pvalue);

EXTERN int asn1PrtToStrm_IMP_CRLNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CRLNumber* pvalue);

EXTERN ASN1T_IMP_CRLNumber* new_ASN1T_IMP_CRLNumber (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_CRLNumber (const char* name, 
   ASN1T_IMP_CRLNumber* pValue, ASN1T_IMP_CRLNumber* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_CRLNumber (OSCTXT* pctxt, ASN1T_IMP_CRLNumber* pSrcValue, 
   ASN1T_IMP_CRLNumber* pDstValue);

/**************************************************************/
/*                                                            */
/*  CRLReason                                                 */
/*                                                            */
/**************************************************************/
/*
CRLReason ::= ENUMERATED { unspecified(0), keyCompromise(1), cACompromise(2), affiliationChanged(3), superseded(4), cessationOfOperation(5), certificateHold(6), removeFromCRL(8), privilegeWithdrawn(9), aACompromise(10) }
*/
#define TV_IMP_CRLReason	(TM_UNIV|TM_PRIM|10)

struct EXTERN IMP_CRLReason {
   enum Root {
      unspecified = 0,
      keyCompromise = 1,
      cACompromise = 2,
      affiliationChanged = 3,
      superseded = 4,
      cessationOfOperation = 5,
      certificateHold = 6,
      removeFromCRL = 8,
      privilegeWithdrawn = 9,
      aACompromise = 10
   } ;
} ;

typedef OSUINT32 ASN1T_IMP_CRLReason;

class EXTERN ASN1C_IMP_CRLReason :
public ASN1CType
{
protected:
   ASN1T_IMP_CRLReason& msgData;
public:
   ASN1C_IMP_CRLReason (ASN1T_IMP_CRLReason& data);
   ASN1C_IMP_CRLReason (OSRTMessageBufferIF& msgBuf, ASN1T_IMP_CRLReason& data);
   ASN1C_IMP_CRLReason (OSRTContext &context, ASN1T_IMP_CRLReason& data);
   virtual ~ASN1C_IMP_CRLReason () {}
   inline ASN1T_IMP_CRLReason& getData () { return msgData; }
   inline const ASN1T_IMP_CRLReason& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CRLReason");
   int toStream (const char* name = "CRLReason");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_CRLReason* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_IMP_CRLReason (OSCTXT* pctxt,
   ASN1T_IMP_CRLReason *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_CRLReason (OSCTXT* pctxt, ASN1T_IMP_CRLReason* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_CRLReason 
   (const char* name, const ASN1T_IMP_CRLReason* pvalue);

EXTERN int asn1PrtToStrm_IMP_CRLReason (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CRLReason* pvalue);

EXTERN ASN1T_IMP_CRLReason* new_ASN1T_IMP_CRLReason (ASN1CType& ccobj);

EXTERN const OSUTF8CHAR* ASN1T_IMP_CRLReason_ToString (OSINT32 value);

EXTERN int ASN1T_IMP_CRLReason_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_IMP_CRLReason* pvalue);

EXTERN int ASN1T_IMP_CRLReason_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_IMP_CRLReason* pvalue);

EXTERN OSBOOL asn1Compare_IMP_CRLReason (const char* name, 
   ASN1T_IMP_CRLReason* pValue, ASN1T_IMP_CRLReason* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  BaseDistance                                              */
/*                                                            */
/**************************************************************/
/*
BaseDistance ::= INTEGER (0..MAX)
*/
#define TV_IMP_BaseDistance	(TM_UNIV|TM_PRIM|2)

typedef OSUINT32 ASN1T_IMP_BaseDistance;

class EXTERN ASN1C_IMP_BaseDistance :
public ASN1CType
{
protected:
   ASN1T_IMP_BaseDistance& msgData;
public:
   ASN1C_IMP_BaseDistance (ASN1T_IMP_BaseDistance& data);
   ASN1C_IMP_BaseDistance (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_BaseDistance& data);
   ASN1C_IMP_BaseDistance (OSRTContext &context, ASN1T_IMP_BaseDistance& data);
   virtual ~ASN1C_IMP_BaseDistance () {}
   inline ASN1T_IMP_BaseDistance& getData () { return msgData; }
   inline const ASN1T_IMP_BaseDistance& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BaseDistance");
   int toStream (const char* name = "BaseDistance");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_BaseDistance* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_IMP_BaseDistance (OSCTXT* pctxt,
   ASN1T_IMP_BaseDistance *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_BaseDistance (OSCTXT* pctxt, 
   ASN1T_IMP_BaseDistance* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_BaseDistance 
   (const char* name, const ASN1T_IMP_BaseDistance* pvalue);

EXTERN int asn1PrtToStrm_IMP_BaseDistance (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_BaseDistance* pvalue);

EXTERN ASN1T_IMP_BaseDistance* new_ASN1T_IMP_BaseDistance (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_BaseDistance (const char* name, 
   ASN1T_IMP_BaseDistance* pValue, ASN1T_IMP_BaseDistance* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  SkipCerts                                                 */
/*                                                            */
/**************************************************************/
/*
SkipCerts ::= INTEGER (0..MAX)
*/
#define TV_IMP_SkipCerts	(TM_UNIV|TM_PRIM|2)

typedef OSUINT32 ASN1T_IMP_SkipCerts;

class EXTERN ASN1C_IMP_SkipCerts :
public ASN1CType
{
protected:
   ASN1T_IMP_SkipCerts& msgData;
public:
   ASN1C_IMP_SkipCerts (ASN1T_IMP_SkipCerts& data);
   ASN1C_IMP_SkipCerts (OSRTMessageBufferIF& msgBuf, ASN1T_IMP_SkipCerts& data);
   ASN1C_IMP_SkipCerts (OSRTContext &context, ASN1T_IMP_SkipCerts& data);
   virtual ~ASN1C_IMP_SkipCerts () {}
   inline ASN1T_IMP_SkipCerts& getData () { return msgData; }
   inline const ASN1T_IMP_SkipCerts& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SkipCerts");
   int toStream (const char* name = "SkipCerts");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_SkipCerts* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_IMP_SkipCerts (OSCTXT* pctxt,
   ASN1T_IMP_SkipCerts *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_SkipCerts (OSCTXT* pctxt, ASN1T_IMP_SkipCerts* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_SkipCerts 
   (const char* name, const ASN1T_IMP_SkipCerts* pvalue);

EXTERN int asn1PrtToStrm_IMP_SkipCerts (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SkipCerts* pvalue);

EXTERN ASN1T_IMP_SkipCerts* new_ASN1T_IMP_SkipCerts (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_SkipCerts (const char* name, 
   ASN1T_IMP_SkipCerts* pValue, ASN1T_IMP_SkipCerts* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  InhibitAnyPolicy                                          */
/*                                                            */
/**************************************************************/
/*
InhibitAnyPolicy ::= SkipCerts
*/
#define TV_IMP_InhibitAnyPolicy	(TM_UNIV|TM_PRIM|2)

typedef ASN1T_IMP_SkipCerts ASN1T_IMP_InhibitAnyPolicy;

class EXTERN ASN1C_IMP_InhibitAnyPolicy :
   public ASN1C_IMP_SkipCerts
{
protected:
public:
   ASN1C_IMP_InhibitAnyPolicy (ASN1T_IMP_InhibitAnyPolicy& data);
   ASN1C_IMP_InhibitAnyPolicy (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_InhibitAnyPolicy& data);
   ASN1C_IMP_InhibitAnyPolicy (OSRTContext &context
      , ASN1T_IMP_InhibitAnyPolicy& data);
   virtual ~ASN1C_IMP_InhibitAnyPolicy () {}
   inline ASN1T_IMP_InhibitAnyPolicy& getData () { return msgData; }
   inline const ASN1T_IMP_InhibitAnyPolicy& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "InhibitAnyPolicy");
   int toStream (const char* name = "InhibitAnyPolicy");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_InhibitAnyPolicy* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_IMP_InhibitAnyPolicy (OSCTXT* pctxt,
   ASN1T_IMP_InhibitAnyPolicy *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_InhibitAnyPolicy (OSCTXT* pctxt, 
   ASN1T_IMP_InhibitAnyPolicy* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_InhibitAnyPolicy 
   (const char* name, const ASN1T_IMP_InhibitAnyPolicy* pvalue);

EXTERN int asn1PrtToStrm_IMP_InhibitAnyPolicy (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_InhibitAnyPolicy* pvalue);

EXTERN ASN1T_IMP_InhibitAnyPolicy* 
   new_ASN1T_IMP_InhibitAnyPolicy (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_InhibitAnyPolicy (const char* name, 
   ASN1T_IMP_InhibitAnyPolicy* pValue, ASN1T_IMP_InhibitAnyPolicy* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  DistributionPointName                                     */
/*                                                            */
/**************************************************************/
/*
DistributionPointName ::= CHOICE {
   fullName [0] GeneralNames,
   nameRelativeToCRLIssuer [1] RelativeDistinguishedName
}
*/
/* Choice context tags */

#define TVC_IMP_DistributionPointName_fullName	(TM_CTXT|TM_CONS|0)
#define TVC_IMP_DistributionPointName_nameRelativeToCRLIssuer	(TM_CTXT|TM_CONS|1)

/* Choice tag constants */

#define T_IMP_DistributionPointName_fullName 1
#define T_IMP_DistributionPointName_nameRelativeToCRLIssuer 2

class EXTERN ASN1C_IMP_DistributionPointName;

struct EXTERN ASN1T_IMP_DistributionPointName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_IMP_GeneralNames *fullName;
      /* t = 2 */
      ASN1T_EXP_RelativeDistinguishedName *nameRelativeToCRLIssuer;
   } u;
   ASN1T_IMP_DistributionPointName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_IMP_DistributionPointName (ASN1C_IMP_DistributionPointName& srcData);
   ~ASN1T_IMP_DistributionPointName ();
} ;

class EXTERN ASN1C_IMP_DistributionPointName :
public ASN1CType
{
protected:
   ASN1T_IMP_DistributionPointName& msgData;
public:
   ASN1C_IMP_DistributionPointName (ASN1T_IMP_DistributionPointName& data);
   ASN1C_IMP_DistributionPointName (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_DistributionPointName& data);
   ASN1C_IMP_DistributionPointName (OSRTContext &context
      , ASN1T_IMP_DistributionPointName& data);
   ASN1C_IMP_DistributionPointName (ASN1C_IMP_DistributionPointName& original);
   virtual ~ASN1C_IMP_DistributionPointName () {}
   inline ASN1T_IMP_DistributionPointName& getData () { return msgData; }
   inline const ASN1T_IMP_DistributionPointName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DistributionPointName");
   int toStream (const char* name = "DistributionPointName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_DistributionPointName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_DistributionPointName& getCopy (ASN1T_IMP_DistributionPointName* pDstData = 0);
   ASN1T_IMP_DistributionPointName* newCopy ();

   inline ASN1C_IMP_DistributionPointName& operator= (ASN1C_IMP_DistributionPointName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_DistributionPointName (OSCTXT* pctxt,
   ASN1T_IMP_DistributionPointName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_DistributionPointName (OSCTXT* pctxt, 
   ASN1T_IMP_DistributionPointName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_DistributionPointName 
   (const char* name, const ASN1T_IMP_DistributionPointName* pvalue);

EXTERN int asn1PrtToStrm_IMP_DistributionPointName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_DistributionPointName* pvalue);

EXTERN ASN1T_IMP_DistributionPointName* 
   new_ASN1T_IMP_DistributionPointName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_DistributionPointName (const char* name, 
   ASN1T_IMP_DistributionPointName* pValue, 
   ASN1T_IMP_DistributionPointName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_DistributionPointName (OSCTXT* pctxt, 
   ASN1T_IMP_DistributionPointName* pSrcValue, ASN1T_IMP_DistributionPointName*
    pDstValue);

EXTERN void asn1Init_IMP_DistributionPointName (
   ASN1T_IMP_DistributionPointName* pvalue);

EXTERN void asn1Free_IMP_DistributionPointName (OSCTXT *pctxt, 
   ASN1T_IMP_DistributionPointName* pvalue);

/**************************************************************/
/*                                                            */
/*  DistributionPoint                                         */
/*                                                            */
/**************************************************************/
/*
DistributionPoint ::= SEQUENCE {
   distributionPoint [0] DistributionPointName OPTIONAL,
   reasons [1] ReasonFlags OPTIONAL,
   cRLIssuer [2] GeneralNames OPTIONAL
}
*/
#define TV_IMP_DistributionPoint	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_DistributionPoint;

struct EXTERN ASN1T_IMP_DistributionPoint : public ASN1TPDU {
   struct {
      unsigned distributionPointPresent : 1;
      unsigned reasonsPresent : 1;
      unsigned cRLIssuerPresent : 1;
   } m;
   ASN1T_IMP_DistributionPointName distributionPoint;
   ASN1T_IMP_ReasonFlags reasons;
   ASN1T_IMP_GeneralNames cRLIssuer;
   ASN1T_IMP_DistributionPoint ();
   ASN1T_IMP_DistributionPoint (ASN1C_IMP_DistributionPoint& srcData);
   ~ASN1T_IMP_DistributionPoint ();
} ;

class EXTERN ASN1C_IMP_DistributionPoint :
public ASN1CType
{
protected:
   ASN1T_IMP_DistributionPoint& msgData;
public:
   ASN1C_IMP_DistributionPoint (ASN1T_IMP_DistributionPoint& data);
   ASN1C_IMP_DistributionPoint (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_DistributionPoint& data);
   ASN1C_IMP_DistributionPoint (OSRTContext &context
      , ASN1T_IMP_DistributionPoint& data);
   ASN1C_IMP_DistributionPoint (ASN1C_IMP_DistributionPoint& original);
   virtual ~ASN1C_IMP_DistributionPoint () {}
   inline ASN1T_IMP_DistributionPoint& getData () { return msgData; }
   inline const ASN1T_IMP_DistributionPoint& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DistributionPoint");
   int toStream (const char* name = "DistributionPoint");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_DistributionPoint* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_DistributionPoint& getCopy (ASN1T_IMP_DistributionPoint* pDstData = 0);
   ASN1T_IMP_DistributionPoint* newCopy ();

   inline ASN1C_IMP_DistributionPoint& operator= (ASN1C_IMP_DistributionPoint& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_DistributionPoint (OSCTXT* pctxt,
   ASN1T_IMP_DistributionPoint *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_DistributionPoint (OSCTXT* pctxt, 
   ASN1T_IMP_DistributionPoint* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_DistributionPoint 
   (const char* name, const ASN1T_IMP_DistributionPoint* pvalue);

EXTERN int asn1PrtToStrm_IMP_DistributionPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_DistributionPoint* pvalue);

EXTERN ASN1T_IMP_DistributionPoint* 
   new_ASN1T_IMP_DistributionPoint (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_DistributionPoint (const char* name, 
   ASN1T_IMP_DistributionPoint* pValue, 
   ASN1T_IMP_DistributionPoint* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_DistributionPoint (OSCTXT* pctxt, 
   ASN1T_IMP_DistributionPoint* pSrcValue, ASN1T_IMP_DistributionPoint*
    pDstValue);

EXTERN void asn1Init_IMP_DistributionPoint (ASN1T_IMP_DistributionPoint* pvalue);

EXTERN void asn1Free_IMP_DistributionPoint (OSCTXT *pctxt, 
   ASN1T_IMP_DistributionPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLDistributionPoints                                     */
/*                                                            */
/**************************************************************/
/*
CRLDistributionPoints ::= SEQUENCE (SIZE (1..MAX)) OF DistributionPoint
*/
#define TV_IMP_CRLDistributionPoints	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_CRLDistributionPoints;

/* List of ASN1T_IMP_DistributionPoint */
typedef struct EXTERN ASN1T_IMP_CRLDistributionPoints : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_CRLDistributionPoints();
} ASN1T_IMP_CRLDistributionPoints;

class EXTERN ASN1C_IMP_CRLDistributionPoints :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_CRLDistributionPoints& msgData;
public:
   ASN1C_IMP_CRLDistributionPoints (ASN1T_IMP_CRLDistributionPoints& data);
   ASN1C_IMP_CRLDistributionPoints (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_CRLDistributionPoints& data);
   ASN1C_IMP_CRLDistributionPoints (ASN1CType& ccobj
      , ASN1T_IMP_CRLDistributionPoints& data);
   ASN1C_IMP_CRLDistributionPoints (OSRTContext &context
      , ASN1T_IMP_CRLDistributionPoints& data);
   ASN1C_IMP_CRLDistributionPoints (ASN1C_IMP_CRLDistributionPoints& original);
   virtual ~ASN1C_IMP_CRLDistributionPoints () {}
   inline ASN1T_IMP_CRLDistributionPoints& getData () { return msgData; }
   inline const ASN1T_IMP_CRLDistributionPoints& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CRLDistributionPoints");
   int toStream (const char* name = "CRLDistributionPoints");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_CRLDistributionPoints* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_CRLDistributionPoints& getCopy (ASN1T_IMP_CRLDistributionPoints* pDstData = 0);
   ASN1T_IMP_CRLDistributionPoints* newCopy ();

   ASN1C_IMP_CRLDistributionPoints& operator= (ASN1C_IMP_CRLDistributionPoints& srcData);
   void Append (ASN1T_IMP_DistributionPoint* elem);
   ASN1T_IMP_DistributionPoint* NewElement ();
   ASN1T_IMP_DistributionPoint* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_CRLDistributionPoints (OSCTXT* pctxt,
   ASN1T_IMP_CRLDistributionPoints *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_CRLDistributionPoints (OSCTXT* pctxt, 
   ASN1T_IMP_CRLDistributionPoints* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_CRLDistributionPoints 
   (const char* name, const ASN1T_IMP_CRLDistributionPoints* pvalue);

EXTERN int asn1PrtToStrm_IMP_CRLDistributionPoints (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CRLDistributionPoints* pvalue);

EXTERN OSBOOL asn1Compare_IMP_CRLDistributionPoints (const char* name, 
   ASN1T_IMP_CRLDistributionPoints* pValue, 
   ASN1T_IMP_CRLDistributionPoints* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_CRLDistributionPoints (OSCTXT* pctxt, 
   ASN1T_IMP_CRLDistributionPoints* pSrcValue, ASN1T_IMP_CRLDistributionPoints*
    pDstValue);

EXTERN void asn1Init_IMP_CRLDistributionPoints (
   ASN1T_IMP_CRLDistributionPoints* pvalue);

EXTERN void asn1Free_IMP_CRLDistributionPoints (OSCTXT *pctxt, 
   ASN1T_IMP_CRLDistributionPoints* pvalue);

/**************************************************************/
/*                                                            */
/*  FreshestCRL                                               */
/*                                                            */
/**************************************************************/
/*
FreshestCRL ::= CRLDistributionPoints
*/
#define TV_IMP_FreshestCRL	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_FreshestCRL;

/* List of ASN1T_IMP_DistributionPoint */
typedef ASN1T_IMP_CRLDistributionPoints ASN1T_IMP_FreshestCRL;

class EXTERN ASN1C_IMP_FreshestCRL :
   public ASN1C_IMP_CRLDistributionPoints
{
protected:
public:
   ASN1C_IMP_FreshestCRL (ASN1T_IMP_FreshestCRL& data);
   ASN1C_IMP_FreshestCRL (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_FreshestCRL& data);
   ASN1C_IMP_FreshestCRL (OSRTContext &context, ASN1T_IMP_FreshestCRL& data);
   ASN1C_IMP_FreshestCRL (ASN1C_IMP_FreshestCRL& original);
   virtual ~ASN1C_IMP_FreshestCRL () {}
   inline ASN1T_IMP_FreshestCRL& getData () { return msgData; }
   inline const ASN1T_IMP_FreshestCRL& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "FreshestCRL");
   int toStream (const char* name = "FreshestCRL");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_FreshestCRL* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_FreshestCRL& getCopy (ASN1T_IMP_FreshestCRL* pDstData = 0);
   ASN1T_IMP_FreshestCRL* newCopy ();

   inline ASN1C_IMP_FreshestCRL& operator= (ASN1C_IMP_FreshestCRL& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_FreshestCRL (OSCTXT* pctxt,
   ASN1T_IMP_FreshestCRL *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_FreshestCRL (OSCTXT* pctxt, 
   ASN1T_IMP_FreshestCRL* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_FreshestCRL 
   (const char* name, const ASN1T_IMP_FreshestCRL* pvalue);

EXTERN int asn1PrtToStrm_IMP_FreshestCRL (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_FreshestCRL* pvalue);

EXTERN ASN1T_IMP_FreshestCRL* new_ASN1T_IMP_FreshestCRL (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_FreshestCRL (const char* name, 
   ASN1T_IMP_FreshestCRL* pValue, ASN1T_IMP_FreshestCRL* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_FreshestCRL (OSCTXT* pctxt, 
   ASN1T_IMP_FreshestCRL* pSrcValue, ASN1T_IMP_FreshestCRL* pDstValue);

EXTERN void asn1Init_IMP_FreshestCRL (ASN1T_IMP_FreshestCRL* pvalue);

EXTERN void asn1Free_IMP_FreshestCRL (OSCTXT *pctxt, ASN1T_IMP_FreshestCRL* pvalue);

/**************************************************************/
/*                                                            */
/*  BaseCRLNumber                                             */
/*                                                            */
/**************************************************************/
/*
BaseCRLNumber ::= CRLNumber
*/
#define TV_IMP_BaseCRLNumber	(TM_UNIV|TM_PRIM|2)

typedef ASN1T_IMP_CRLNumber ASN1T_IMP_BaseCRLNumber;

class EXTERN ASN1C_IMP_BaseCRLNumber :
   public ASN1C_IMP_CRLNumber
{
protected:
public:
   ASN1C_IMP_BaseCRLNumber (ASN1T_IMP_BaseCRLNumber& data);
   ASN1C_IMP_BaseCRLNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_BaseCRLNumber& data);
   ASN1C_IMP_BaseCRLNumber (OSRTContext &context, ASN1T_IMP_BaseCRLNumber& data
      );
   ASN1C_IMP_BaseCRLNumber (ASN1C_IMP_BaseCRLNumber& original);
   virtual ~ASN1C_IMP_BaseCRLNumber () {}
   inline ASN1T_IMP_BaseCRLNumber& getData () { return msgData; }
   inline const ASN1T_IMP_BaseCRLNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BaseCRLNumber");
   int toStream (const char* name = "BaseCRLNumber");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_BaseCRLNumber* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_BaseCRLNumber& getCopy (ASN1T_IMP_BaseCRLNumber* pDstData = 0);
   ASN1T_IMP_BaseCRLNumber* newCopy ();

   inline ASN1C_IMP_BaseCRLNumber& operator= (ASN1C_IMP_BaseCRLNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_BaseCRLNumber (OSCTXT* pctxt,
   ASN1T_IMP_BaseCRLNumber *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_BaseCRLNumber (OSCTXT* pctxt, 
   ASN1T_IMP_BaseCRLNumber* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_BaseCRLNumber 
   (const char* name, const ASN1T_IMP_BaseCRLNumber* pvalue);

EXTERN int asn1PrtToStrm_IMP_BaseCRLNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_BaseCRLNumber* pvalue);

EXTERN ASN1T_IMP_BaseCRLNumber* new_ASN1T_IMP_BaseCRLNumber (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_IMP_BaseCRLNumber (const char* name, 
   ASN1T_IMP_BaseCRLNumber* pValue, ASN1T_IMP_BaseCRLNumber* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_BaseCRLNumber (OSCTXT* pctxt, 
   ASN1T_IMP_BaseCRLNumber* pSrcValue, ASN1T_IMP_BaseCRLNumber* pDstValue);

/**************************************************************/
/*                                                            */
/*  IssuerAltName                                             */
/*                                                            */
/**************************************************************/
/*
IssuerAltName ::= GeneralNames
*/
#define TV_IMP_IssuerAltName	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_IssuerAltName;

/* List of ASN1T_IMP_GeneralName */
typedef ASN1T_IMP_GeneralNames ASN1T_IMP_IssuerAltName;

class EXTERN ASN1C_IMP_IssuerAltName :
   public ASN1C_IMP_GeneralNames
{
protected:
public:
   ASN1C_IMP_IssuerAltName (ASN1T_IMP_IssuerAltName& data);
   ASN1C_IMP_IssuerAltName (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_IssuerAltName& data);
   ASN1C_IMP_IssuerAltName (OSRTContext &context, ASN1T_IMP_IssuerAltName& data
      );
   ASN1C_IMP_IssuerAltName (ASN1C_IMP_IssuerAltName& original);
   virtual ~ASN1C_IMP_IssuerAltName () {}
   inline ASN1T_IMP_IssuerAltName& getData () { return msgData; }
   inline const ASN1T_IMP_IssuerAltName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "IssuerAltName");
   int toStream (const char* name = "IssuerAltName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_IssuerAltName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_IssuerAltName& getCopy (ASN1T_IMP_IssuerAltName* pDstData = 0);
   ASN1T_IMP_IssuerAltName* newCopy ();

   inline ASN1C_IMP_IssuerAltName& operator= (ASN1C_IMP_IssuerAltName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_IssuerAltName (OSCTXT* pctxt,
   ASN1T_IMP_IssuerAltName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_IssuerAltName (OSCTXT* pctxt, 
   ASN1T_IMP_IssuerAltName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_IssuerAltName 
   (const char* name, const ASN1T_IMP_IssuerAltName* pvalue);

EXTERN int asn1PrtToStrm_IMP_IssuerAltName (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_IssuerAltName* pvalue);

EXTERN ASN1T_IMP_IssuerAltName* new_ASN1T_IMP_IssuerAltName (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_IMP_IssuerAltName (const char* name, 
   ASN1T_IMP_IssuerAltName* pValue, ASN1T_IMP_IssuerAltName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_IssuerAltName (OSCTXT* pctxt, 
   ASN1T_IMP_IssuerAltName* pSrcValue, ASN1T_IMP_IssuerAltName* pDstValue);

EXTERN void asn1Init_IMP_IssuerAltName (ASN1T_IMP_IssuerAltName* pvalue);

EXTERN void asn1Free_IMP_IssuerAltName (OSCTXT *pctxt, 
   ASN1T_IMP_IssuerAltName* pvalue);

/**************************************************************/
/*                                                            */
/*  HoldInstructionCode                                       */
/*                                                            */
/**************************************************************/
/*
HoldInstructionCode ::= OBJECT IDENTIFIER
*/
#define TV_IMP_HoldInstructionCode	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_IMP_HoldInstructionCode;

class EXTERN ASN1C_IMP_HoldInstructionCode :
public ASN1CType
{
protected:
   ASN1T_IMP_HoldInstructionCode& msgData;
public:
   ASN1C_IMP_HoldInstructionCode (ASN1T_IMP_HoldInstructionCode& data);
   ASN1C_IMP_HoldInstructionCode (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_HoldInstructionCode& data);
   ASN1C_IMP_HoldInstructionCode (OSRTContext &context
      , ASN1T_IMP_HoldInstructionCode& data);
   ASN1C_IMP_HoldInstructionCode (ASN1C_IMP_HoldInstructionCode& original);
   virtual ~ASN1C_IMP_HoldInstructionCode () {}
   inline ASN1T_IMP_HoldInstructionCode& getData () { return msgData; }
   inline const ASN1T_IMP_HoldInstructionCode& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "HoldInstructionCode");
   int toStream (const char* name = "HoldInstructionCode");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_HoldInstructionCode* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_HoldInstructionCode& getCopy (ASN1T_IMP_HoldInstructionCode* pDstData = 0);
   ASN1T_IMP_HoldInstructionCode* newCopy ();

   inline ASN1C_IMP_HoldInstructionCode& operator= (ASN1C_IMP_HoldInstructionCode& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_HoldInstructionCode (OSCTXT* pctxt,
   ASN1T_IMP_HoldInstructionCode *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_HoldInstructionCode (OSCTXT* pctxt, 
   ASN1T_IMP_HoldInstructionCode* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_HoldInstructionCode 
   (const char* name, const ASN1T_IMP_HoldInstructionCode* pvalue);

EXTERN int asn1PrtToStrm_IMP_HoldInstructionCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_HoldInstructionCode* pvalue);

EXTERN ASN1T_IMP_HoldInstructionCode* 
   new_ASN1T_IMP_HoldInstructionCode (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_HoldInstructionCode (const char* name, 
   ASN1T_IMP_HoldInstructionCode* pValue, 
   ASN1T_IMP_HoldInstructionCode* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_HoldInstructionCode (OSCTXT* pctxt, 
   ASN1T_IMP_HoldInstructionCode* pSrcValue, ASN1T_IMP_HoldInstructionCode*
    pDstValue);

EXTERN void asn1Init_IMP_HoldInstructionCode (ASN1T_IMP_HoldInstructionCode* pvalue);

/**************************************************************/
/*                                                            */
/*  InvalidityDate                                            */
/*                                                            */
/**************************************************************/
/*
InvalidityDate ::= GeneralizedTime
*/
#define TV_IMP_InvalidityDate	(TM_UNIV|TM_PRIM|24)

typedef const char* ASN1T_IMP_InvalidityDate;

class EXTERN ASN1C_IMP_InvalidityDate :
public ASN1CGeneralizedTime
{
protected:
   ASN1T_IMP_InvalidityDate& msgData;
public:
   ASN1C_IMP_InvalidityDate (ASN1T_IMP_InvalidityDate& data);
   ASN1C_IMP_InvalidityDate (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_InvalidityDate& data);
   ASN1C_IMP_InvalidityDate (OSRTContext &context
      , ASN1T_IMP_InvalidityDate& data);
   ASN1C_IMP_InvalidityDate (ASN1C_IMP_InvalidityDate& original);
   virtual ~ASN1C_IMP_InvalidityDate () {}
   inline ASN1T_IMP_InvalidityDate& getData () { return msgData; }
   inline const ASN1T_IMP_InvalidityDate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "InvalidityDate");
   int toStream (const char* name = "InvalidityDate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_InvalidityDate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_InvalidityDate& getCopy (ASN1T_IMP_InvalidityDate* pDstData = 0);
   ASN1T_IMP_InvalidityDate* newCopy ();

   ASN1C_IMP_InvalidityDate& operator= (ASN1C_IMP_InvalidityDate& srcData);
} ;

EXTERN int asn1E_IMP_InvalidityDate (OSCTXT* pctxt,
   ASN1T_IMP_InvalidityDate pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_InvalidityDate (OSCTXT* pctxt, 
   ASN1T_IMP_InvalidityDate* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_InvalidityDate 
   (const char* name, const ASN1T_IMP_InvalidityDate pvalue);

EXTERN int asn1PrtToStrm_IMP_InvalidityDate (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_InvalidityDate pvalue);

EXTERN OSBOOL asn1Compare_IMP_InvalidityDate (const char* name, 
   ASN1T_IMP_InvalidityDate* pValue, ASN1T_IMP_InvalidityDate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_InvalidityDate (OSCTXT* pctxt, 
   ASN1T_IMP_InvalidityDate pSrcValue, ASN1T_IMP_InvalidityDate* pDstValue);

EXTERN void asn1Free_IMP_InvalidityDate (OSCTXT *pctxt, 
   ASN1T_IMP_InvalidityDate pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateIssuer                                         */
/*                                                            */
/**************************************************************/
/*
CertificateIssuer ::= GeneralNames
*/
#define TV_IMP_CertificateIssuer	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_CertificateIssuer;

/* List of ASN1T_IMP_GeneralName */
typedef ASN1T_IMP_GeneralNames ASN1T_IMP_CertificateIssuer;

class EXTERN ASN1C_IMP_CertificateIssuer :
   public ASN1C_IMP_GeneralNames
{
protected:
public:
   ASN1C_IMP_CertificateIssuer (ASN1T_IMP_CertificateIssuer& data);
   ASN1C_IMP_CertificateIssuer (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_CertificateIssuer& data);
   ASN1C_IMP_CertificateIssuer (OSRTContext &context
      , ASN1T_IMP_CertificateIssuer& data);
   ASN1C_IMP_CertificateIssuer (ASN1C_IMP_CertificateIssuer& original);
   virtual ~ASN1C_IMP_CertificateIssuer () {}
   inline ASN1T_IMP_CertificateIssuer& getData () { return msgData; }
   inline const ASN1T_IMP_CertificateIssuer& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertificateIssuer");
   int toStream (const char* name = "CertificateIssuer");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_CertificateIssuer* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_CertificateIssuer& getCopy (ASN1T_IMP_CertificateIssuer* pDstData = 0);
   ASN1T_IMP_CertificateIssuer* newCopy ();

   inline ASN1C_IMP_CertificateIssuer& operator= (ASN1C_IMP_CertificateIssuer& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_CertificateIssuer (OSCTXT* pctxt,
   ASN1T_IMP_CertificateIssuer *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_CertificateIssuer (OSCTXT* pctxt, 
   ASN1T_IMP_CertificateIssuer* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_CertificateIssuer 
   (const char* name, const ASN1T_IMP_CertificateIssuer* pvalue);

EXTERN int asn1PrtToStrm_IMP_CertificateIssuer (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CertificateIssuer* pvalue);

EXTERN ASN1T_IMP_CertificateIssuer* 
   new_ASN1T_IMP_CertificateIssuer (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_CertificateIssuer (const char* name, 
   ASN1T_IMP_CertificateIssuer* pValue, 
   ASN1T_IMP_CertificateIssuer* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_CertificateIssuer (OSCTXT* pctxt, 
   ASN1T_IMP_CertificateIssuer* pSrcValue, ASN1T_IMP_CertificateIssuer*
    pDstValue);

EXTERN void asn1Init_IMP_CertificateIssuer (ASN1T_IMP_CertificateIssuer* pvalue);

EXTERN void asn1Free_IMP_CertificateIssuer (OSCTXT *pctxt, 
   ASN1T_IMP_CertificateIssuer* pvalue);

/**************************************************************/
/*                                                            */
/*  AuthorityKeyIdentifier                                    */
/*                                                            */
/**************************************************************/
/*
AuthorityKeyIdentifier ::= SEQUENCE {
   keyIdentifier [0] KeyIdentifier OPTIONAL,
   authorityCertIssuer [1] GeneralNames OPTIONAL,
   authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL
}
*/
#define TV_IMP_AuthorityKeyIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_AuthorityKeyIdentifier;

struct EXTERN ASN1T_IMP_AuthorityKeyIdentifier : public ASN1TPDU {
   struct {
      unsigned keyIdentifierPresent : 1;
      unsigned authorityCertIssuerPresent : 1;
      unsigned authorityCertSerialNumberPresent : 1;
   } m;
   ASN1T_IMP_KeyIdentifier keyIdentifier;
   ASN1T_IMP_GeneralNames authorityCertIssuer;
   ASN1T_EXP_CertificateSerialNumber authorityCertSerialNumber;
   ASN1T_IMP_AuthorityKeyIdentifier ();
   ASN1T_IMP_AuthorityKeyIdentifier (ASN1C_IMP_AuthorityKeyIdentifier& srcData);
   ~ASN1T_IMP_AuthorityKeyIdentifier ();
} ;

class EXTERN ASN1C_IMP_AuthorityKeyIdentifier :
public ASN1CType
{
protected:
   ASN1T_IMP_AuthorityKeyIdentifier& msgData;
public:
   ASN1C_IMP_AuthorityKeyIdentifier (ASN1T_IMP_AuthorityKeyIdentifier& data);
   ASN1C_IMP_AuthorityKeyIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_AuthorityKeyIdentifier& data);
   ASN1C_IMP_AuthorityKeyIdentifier (OSRTContext &context
      , ASN1T_IMP_AuthorityKeyIdentifier& data);
   ASN1C_IMP_AuthorityKeyIdentifier (ASN1C_IMP_AuthorityKeyIdentifier& original);
   virtual ~ASN1C_IMP_AuthorityKeyIdentifier () {}
   inline ASN1T_IMP_AuthorityKeyIdentifier& getData () { return msgData; }
   inline const ASN1T_IMP_AuthorityKeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AuthorityKeyIdentifier");
   int toStream (const char* name = "AuthorityKeyIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_AuthorityKeyIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_AuthorityKeyIdentifier& getCopy (ASN1T_IMP_AuthorityKeyIdentifier* pDstData = 0);
   ASN1T_IMP_AuthorityKeyIdentifier* newCopy ();

   inline ASN1C_IMP_AuthorityKeyIdentifier& operator= (ASN1C_IMP_AuthorityKeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_AuthorityKeyIdentifier (OSCTXT* pctxt,
   ASN1T_IMP_AuthorityKeyIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_AuthorityKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_AuthorityKeyIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_AuthorityKeyIdentifier 
   (const char* name, const ASN1T_IMP_AuthorityKeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_IMP_AuthorityKeyIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_AuthorityKeyIdentifier* pvalue);

EXTERN ASN1T_IMP_AuthorityKeyIdentifier* 
   new_ASN1T_IMP_AuthorityKeyIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_AuthorityKeyIdentifier (const char* name, 
   ASN1T_IMP_AuthorityKeyIdentifier* pValue, 
   ASN1T_IMP_AuthorityKeyIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_AuthorityKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_AuthorityKeyIdentifier* pSrcValue, 
   ASN1T_IMP_AuthorityKeyIdentifier* pDstValue);

EXTERN void asn1Init_IMP_AuthorityKeyIdentifier (
   ASN1T_IMP_AuthorityKeyIdentifier* pvalue);

EXTERN void asn1Free_IMP_AuthorityKeyIdentifier (OSCTXT *pctxt, 
   ASN1T_IMP_AuthorityKeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyQualifierInfo                                       */
/*                                                            */
/**************************************************************/
/*
PolicyQualifierInfo ::= SEQUENCE {
   policyQualifierId PolicyQualifierId,
   qualifier ANY
}
*/
#define TV_IMP_PolicyQualifierInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_PolicyQualifierInfo;

struct EXTERN ASN1T_IMP_PolicyQualifierInfo : public ASN1TPDU {
   ASN1T_IMP_PolicyQualifierId policyQualifierId;
   ASN1TOpenType qualifier;
   ASN1T_IMP_PolicyQualifierInfo ();
   ASN1T_IMP_PolicyQualifierInfo (ASN1C_IMP_PolicyQualifierInfo& srcData);
   ~ASN1T_IMP_PolicyQualifierInfo ();
} ;

class EXTERN ASN1C_IMP_PolicyQualifierInfo :
public ASN1CType
{
protected:
   ASN1T_IMP_PolicyQualifierInfo& msgData;
public:
   ASN1C_IMP_PolicyQualifierInfo (ASN1T_IMP_PolicyQualifierInfo& data);
   ASN1C_IMP_PolicyQualifierInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_PolicyQualifierInfo& data);
   ASN1C_IMP_PolicyQualifierInfo (OSRTContext &context
      , ASN1T_IMP_PolicyQualifierInfo& data);
   ASN1C_IMP_PolicyQualifierInfo (ASN1C_IMP_PolicyQualifierInfo& original);
   virtual ~ASN1C_IMP_PolicyQualifierInfo () {}
   inline ASN1T_IMP_PolicyQualifierInfo& getData () { return msgData; }
   inline const ASN1T_IMP_PolicyQualifierInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PolicyQualifierInfo");
   int toStream (const char* name = "PolicyQualifierInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_PolicyQualifierInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_PolicyQualifierInfo& getCopy (ASN1T_IMP_PolicyQualifierInfo* pDstData = 0);
   ASN1T_IMP_PolicyQualifierInfo* newCopy ();

   inline ASN1C_IMP_PolicyQualifierInfo& operator= (ASN1C_IMP_PolicyQualifierInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_PolicyQualifierInfo (OSCTXT* pctxt,
   ASN1T_IMP_PolicyQualifierInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_PolicyQualifierInfo (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyQualifierInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_PolicyQualifierInfo 
   (const char* name, const ASN1T_IMP_PolicyQualifierInfo* pvalue);

EXTERN int asn1PrtToStrm_IMP_PolicyQualifierInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyQualifierInfo* pvalue);

EXTERN ASN1T_IMP_PolicyQualifierInfo* 
   new_ASN1T_IMP_PolicyQualifierInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_PolicyQualifierInfo (const char* name, 
   ASN1T_IMP_PolicyQualifierInfo* pValue, 
   ASN1T_IMP_PolicyQualifierInfo* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_PolicyQualifierInfo (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyQualifierInfo* pSrcValue, ASN1T_IMP_PolicyQualifierInfo*
    pDstValue);

EXTERN void asn1Init_IMP_PolicyQualifierInfo (ASN1T_IMP_PolicyQualifierInfo* pvalue);

EXTERN void asn1Free_IMP_PolicyQualifierInfo (OSCTXT *pctxt, 
   ASN1T_IMP_PolicyQualifierInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyInformation_policyQualifiers                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PolicyInformation'
*/
class EXTERN ASN1C_IMP_PolicyInformation_policyQualifiers;

/* List of ASN1T_IMP_PolicyQualifierInfo */
typedef struct EXTERN ASN1T_IMP_PolicyInformation_policyQualifiers : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_PolicyInformation_policyQualifiers();
} ASN1T_IMP_PolicyInformation_policyQualifiers;

class EXTERN ASN1C_IMP_PolicyInformation_policyQualifiers :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_PolicyInformation_policyQualifiers& msgData;
public:
   ASN1C_IMP_PolicyInformation_policyQualifiers
       (ASN1T_IMP_PolicyInformation_policyQualifiers& data);
   ASN1C_IMP_PolicyInformation_policyQualifiers (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_PolicyInformation_policyQualifiers& data);
   ASN1C_IMP_PolicyInformation_policyQualifiers (ASN1CType& ccobj
      , ASN1T_IMP_PolicyInformation_policyQualifiers& data);
   ASN1C_IMP_PolicyInformation_policyQualifiers (OSRTContext &context
      , ASN1T_IMP_PolicyInformation_policyQualifiers& data);
   ASN1C_IMP_PolicyInformation_policyQualifiers (ASN1C_IMP_PolicyInformation_policyQualifiers& original);
   virtual ~ASN1C_IMP_PolicyInformation_policyQualifiers () {}
   inline ASN1T_IMP_PolicyInformation_policyQualifiers& getData () { return msgData; }
   inline const ASN1T_IMP_PolicyInformation_policyQualifiers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PolicyInformation_policyQualifiers");
   int toStream (const char* name = "PolicyInformation_policyQualifiers");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_PolicyInformation_policyQualifiers* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_PolicyInformation_policyQualifiers& getCopy (ASN1T_IMP_PolicyInformation_policyQualifiers* pDstData = 0);
   ASN1T_IMP_PolicyInformation_policyQualifiers* newCopy ();

   ASN1C_IMP_PolicyInformation_policyQualifiers& operator= (ASN1C_IMP_PolicyInformation_policyQualifiers& srcData);
   void Append (ASN1T_IMP_PolicyQualifierInfo* elem);
   ASN1T_IMP_PolicyQualifierInfo* NewElement ();
   ASN1T_IMP_PolicyQualifierInfo* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_PolicyInformation_policyQualifiers (OSCTXT* pctxt,
   ASN1T_IMP_PolicyInformation_policyQualifiers *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_PolicyInformation_policyQualifiers (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_IMP_PolicyInformation_policyQualifiers 
   (const char* name, const ASN1T_IMP_PolicyInformation_policyQualifiers* pvalue);

EXTERN int asn1PrtToStrm_IMP_PolicyInformation_policyQualifiers (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyInformation_policyQualifiers* pvalue);

EXTERN OSBOOL asn1Compare_IMP_PolicyInformation_policyQualifiers (const char* name, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pValue, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_PolicyInformation_policyQualifiers (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pSrcValue, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pDstValue);

EXTERN void asn1Init_IMP_PolicyInformation_policyQualifiers (
   ASN1T_IMP_PolicyInformation_policyQualifiers* pvalue);

EXTERN void asn1Free_IMP_PolicyInformation_policyQualifiers (OSCTXT *pctxt, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyInformation                                         */
/*                                                            */
/**************************************************************/
/*
PolicyInformation ::= SEQUENCE {
   policyIdentifier CertPolicyId,
   policyQualifiers SEQUENCE (SIZE (1..MAX)) OF PolicyQualifierInfo OPTIONAL
}
*/
#define TV_IMP_PolicyInformation	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_PolicyInformation;

struct EXTERN ASN1T_IMP_PolicyInformation : public ASN1TPDU {
   struct {
      unsigned policyQualifiersPresent : 1;
   } m;
   ASN1T_IMP_CertPolicyId policyIdentifier;
   ASN1T_IMP_PolicyInformation_policyQualifiers policyQualifiers;
   ASN1T_IMP_PolicyInformation ();
   ASN1T_IMP_PolicyInformation (ASN1C_IMP_PolicyInformation& srcData);
   ~ASN1T_IMP_PolicyInformation ();
} ;

class EXTERN ASN1C_IMP_PolicyInformation :
public ASN1CType
{
protected:
   ASN1T_IMP_PolicyInformation& msgData;
public:
   ASN1C_IMP_PolicyInformation (ASN1T_IMP_PolicyInformation& data);
   ASN1C_IMP_PolicyInformation (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_PolicyInformation& data);
   ASN1C_IMP_PolicyInformation (OSRTContext &context
      , ASN1T_IMP_PolicyInformation& data);
   ASN1C_IMP_PolicyInformation (ASN1C_IMP_PolicyInformation& original);
   virtual ~ASN1C_IMP_PolicyInformation () {}
   inline ASN1T_IMP_PolicyInformation& getData () { return msgData; }
   inline const ASN1T_IMP_PolicyInformation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PolicyInformation");
   int toStream (const char* name = "PolicyInformation");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_PolicyInformation* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_PolicyInformation& getCopy (ASN1T_IMP_PolicyInformation* pDstData = 0);
   ASN1T_IMP_PolicyInformation* newCopy ();

   inline ASN1C_IMP_PolicyInformation& operator= (ASN1C_IMP_PolicyInformation& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_PolicyInformation (OSCTXT* pctxt,
   ASN1T_IMP_PolicyInformation *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyInformation* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_PolicyInformation 
   (const char* name, const ASN1T_IMP_PolicyInformation* pvalue);

EXTERN int asn1PrtToStrm_IMP_PolicyInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyInformation* pvalue);

EXTERN ASN1T_IMP_PolicyInformation* 
   new_ASN1T_IMP_PolicyInformation (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_PolicyInformation (const char* name, 
   ASN1T_IMP_PolicyInformation* pValue, 
   ASN1T_IMP_PolicyInformation* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyInformation* pSrcValue, ASN1T_IMP_PolicyInformation*
    pDstValue);

EXTERN void asn1Init_IMP_PolicyInformation (ASN1T_IMP_PolicyInformation* pvalue);

EXTERN void asn1Free_IMP_PolicyInformation (OSCTXT *pctxt, 
   ASN1T_IMP_PolicyInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificatePolicies                                       */
/*                                                            */
/**************************************************************/
/*
CertificatePolicies ::= SEQUENCE (SIZE (1..MAX)) OF PolicyInformation
*/
#define TV_IMP_CertificatePolicies	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_CertificatePolicies;

/* List of ASN1T_IMP_PolicyInformation */
typedef struct EXTERN ASN1T_IMP_CertificatePolicies : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_CertificatePolicies();
} ASN1T_IMP_CertificatePolicies;

class EXTERN ASN1C_IMP_CertificatePolicies :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_CertificatePolicies& msgData;
public:
   ASN1C_IMP_CertificatePolicies (ASN1T_IMP_CertificatePolicies& data);
   ASN1C_IMP_CertificatePolicies (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_CertificatePolicies& data);
   ASN1C_IMP_CertificatePolicies (ASN1CType& ccobj
      , ASN1T_IMP_CertificatePolicies& data);
   ASN1C_IMP_CertificatePolicies (OSRTContext &context
      , ASN1T_IMP_CertificatePolicies& data);
   ASN1C_IMP_CertificatePolicies (ASN1C_IMP_CertificatePolicies& original);
   virtual ~ASN1C_IMP_CertificatePolicies () {}
   inline ASN1T_IMP_CertificatePolicies& getData () { return msgData; }
   inline const ASN1T_IMP_CertificatePolicies& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertificatePolicies");
   int toStream (const char* name = "CertificatePolicies");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_CertificatePolicies* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_CertificatePolicies& getCopy (ASN1T_IMP_CertificatePolicies* pDstData = 0);
   ASN1T_IMP_CertificatePolicies* newCopy ();

   ASN1C_IMP_CertificatePolicies& operator= (ASN1C_IMP_CertificatePolicies& srcData);
   void Append (ASN1T_IMP_PolicyInformation* elem);
   ASN1T_IMP_PolicyInformation* NewElement ();
   ASN1T_IMP_PolicyInformation* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_CertificatePolicies (OSCTXT* pctxt,
   ASN1T_IMP_CertificatePolicies *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_CertificatePolicies (OSCTXT* pctxt, 
   ASN1T_IMP_CertificatePolicies* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_CertificatePolicies 
   (const char* name, const ASN1T_IMP_CertificatePolicies* pvalue);

EXTERN int asn1PrtToStrm_IMP_CertificatePolicies (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_CertificatePolicies* pvalue);

EXTERN OSBOOL asn1Compare_IMP_CertificatePolicies (const char* name, 
   ASN1T_IMP_CertificatePolicies* pValue, 
   ASN1T_IMP_CertificatePolicies* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_CertificatePolicies (OSCTXT* pctxt, 
   ASN1T_IMP_CertificatePolicies* pSrcValue, ASN1T_IMP_CertificatePolicies*
    pDstValue);

EXTERN void asn1Init_IMP_CertificatePolicies (ASN1T_IMP_CertificatePolicies* pvalue);

EXTERN void asn1Free_IMP_CertificatePolicies (OSCTXT *pctxt, 
   ASN1T_IMP_CertificatePolicies* pvalue);

/**************************************************************/
/*                                                            */
/*  DisplayText                                               */
/*                                                            */
/**************************************************************/
/*
DisplayText ::= CHOICE {
   utf8String UTF8String (SIZE (1..200)),
   ia5String IA5String (SIZE (1..200)),
   visibleString VisibleString (SIZE (1..200)),
   bmpString BMPString (SIZE (1..200))
}
*/
/* Choice context tags */

#define TVC_IMP_DisplayText_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_IMP_DisplayText_ia5String	(TM_UNIV|TM_PRIM|22)
#define TVC_IMP_DisplayText_visibleString	(TM_UNIV|TM_PRIM|26)
#define TVC_IMP_DisplayText_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_IMP_DisplayText_utf8String    1
#define T_IMP_DisplayText_ia5String     2
#define T_IMP_DisplayText_visibleString 3
#define T_IMP_DisplayText_bmpString     4

class EXTERN ASN1C_IMP_DisplayText;

struct EXTERN ASN1T_IMP_DisplayText : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* ia5String;
      /* t = 3 */
      const char* visibleString;
      /* t = 4 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_IMP_DisplayText () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_IMP_DisplayText (ASN1C_IMP_DisplayText& srcData);
   ~ASN1T_IMP_DisplayText ();
} ;

class EXTERN ASN1C_IMP_DisplayText :
public ASN1CType
{
protected:
   ASN1T_IMP_DisplayText& msgData;
public:
   ASN1C_IMP_DisplayText (ASN1T_IMP_DisplayText& data);
   ASN1C_IMP_DisplayText (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_DisplayText& data);
   ASN1C_IMP_DisplayText (OSRTContext &context, ASN1T_IMP_DisplayText& data);
   ASN1C_IMP_DisplayText (ASN1C_IMP_DisplayText& original);
   virtual ~ASN1C_IMP_DisplayText () {}
   inline ASN1T_IMP_DisplayText& getData () { return msgData; }
   inline const ASN1T_IMP_DisplayText& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DisplayText");
   int toStream (const char* name = "DisplayText");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_DisplayText* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_DisplayText& getCopy (ASN1T_IMP_DisplayText* pDstData = 0);
   ASN1T_IMP_DisplayText* newCopy ();

   inline ASN1C_IMP_DisplayText& operator= (ASN1C_IMP_DisplayText& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_DisplayText (OSCTXT* pctxt,
   ASN1T_IMP_DisplayText *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_DisplayText (OSCTXT* pctxt, 
   ASN1T_IMP_DisplayText* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_DisplayText 
   (const char* name, const ASN1T_IMP_DisplayText* pvalue);

EXTERN int asn1PrtToStrm_IMP_DisplayText (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_DisplayText* pvalue);

EXTERN ASN1T_IMP_DisplayText* new_ASN1T_IMP_DisplayText (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_DisplayText (const char* name, 
   ASN1T_IMP_DisplayText* pValue, ASN1T_IMP_DisplayText* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_DisplayText (OSCTXT* pctxt, 
   ASN1T_IMP_DisplayText* pSrcValue, ASN1T_IMP_DisplayText* pDstValue);

EXTERN void asn1Init_IMP_DisplayText (ASN1T_IMP_DisplayText* pvalue);

EXTERN void asn1Free_IMP_DisplayText (OSCTXT *pctxt, ASN1T_IMP_DisplayText* pvalue);

/**************************************************************/
/*                                                            */
/*  NoticeReference_noticeNumbers                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NoticeReference'
*/
class EXTERN ASN1C_IMP_NoticeReference_noticeNumbers;

/* List of OSINT32 */
typedef struct EXTERN ASN1T_IMP_NoticeReference_noticeNumbers : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_NoticeReference_noticeNumbers();
} ASN1T_IMP_NoticeReference_noticeNumbers;

class EXTERN ASN1C_IMP_NoticeReference_noticeNumbers :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_NoticeReference_noticeNumbers& msgData;
public:
   ASN1C_IMP_NoticeReference_noticeNumbers
       (ASN1T_IMP_NoticeReference_noticeNumbers& data);
   ASN1C_IMP_NoticeReference_noticeNumbers (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_NoticeReference_noticeNumbers& data);
   ASN1C_IMP_NoticeReference_noticeNumbers (ASN1CType& ccobj
      , ASN1T_IMP_NoticeReference_noticeNumbers& data);
   ASN1C_IMP_NoticeReference_noticeNumbers (OSRTContext &context
      , ASN1T_IMP_NoticeReference_noticeNumbers& data);
   ASN1C_IMP_NoticeReference_noticeNumbers (ASN1C_IMP_NoticeReference_noticeNumbers& original);
   virtual ~ASN1C_IMP_NoticeReference_noticeNumbers () {}
   inline ASN1T_IMP_NoticeReference_noticeNumbers& getData () { return msgData; }
   inline const ASN1T_IMP_NoticeReference_noticeNumbers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NoticeReference_noticeNumbers");
   int toStream (const char* name = "NoticeReference_noticeNumbers");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_NoticeReference_noticeNumbers* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_NoticeReference_noticeNumbers& getCopy (ASN1T_IMP_NoticeReference_noticeNumbers* pDstData = 0);
   ASN1T_IMP_NoticeReference_noticeNumbers* newCopy ();

   ASN1C_IMP_NoticeReference_noticeNumbers& operator= (ASN1C_IMP_NoticeReference_noticeNumbers& srcData);
   void Append (OSINT32* elem);
   OSINT32* NewElement ();
   OSINT32* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_NoticeReference_noticeNumbers (OSCTXT* pctxt,
   ASN1T_IMP_NoticeReference_noticeNumbers *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_NoticeReference_noticeNumbers (OSCTXT* pctxt, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_IMP_NoticeReference_noticeNumbers 
   (const char* name, const ASN1T_IMP_NoticeReference_noticeNumbers* pvalue);

EXTERN int asn1PrtToStrm_IMP_NoticeReference_noticeNumbers (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_NoticeReference_noticeNumbers* pvalue);

EXTERN OSBOOL asn1Compare_IMP_NoticeReference_noticeNumbers (const char* name, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pValue, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_NoticeReference_noticeNumbers (OSCTXT* pctxt, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pSrcValue, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pDstValue);

EXTERN void asn1Init_IMP_NoticeReference_noticeNumbers (
   ASN1T_IMP_NoticeReference_noticeNumbers* pvalue);

EXTERN void asn1Free_IMP_NoticeReference_noticeNumbers (OSCTXT *pctxt, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pvalue);

/**************************************************************/
/*                                                            */
/*  NoticeReference                                           */
/*                                                            */
/**************************************************************/
/*
NoticeReference ::= SEQUENCE {
   organization DisplayText,
   noticeNumbers SEQUENCE OF INTEGER
}
*/
#define TV_IMP_NoticeReference	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_NoticeReference;

struct EXTERN ASN1T_IMP_NoticeReference : public ASN1TPDU {
   ASN1T_IMP_DisplayText organization;
   ASN1T_IMP_NoticeReference_noticeNumbers noticeNumbers;
   ASN1T_IMP_NoticeReference ();
   ASN1T_IMP_NoticeReference (ASN1C_IMP_NoticeReference& srcData);
   ~ASN1T_IMP_NoticeReference ();
} ;

class EXTERN ASN1C_IMP_NoticeReference :
public ASN1CType
{
protected:
   ASN1T_IMP_NoticeReference& msgData;
public:
   ASN1C_IMP_NoticeReference (ASN1T_IMP_NoticeReference& data);
   ASN1C_IMP_NoticeReference (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_NoticeReference& data);
   ASN1C_IMP_NoticeReference (OSRTContext &context
      , ASN1T_IMP_NoticeReference& data);
   ASN1C_IMP_NoticeReference (ASN1C_IMP_NoticeReference& original);
   virtual ~ASN1C_IMP_NoticeReference () {}
   inline ASN1T_IMP_NoticeReference& getData () { return msgData; }
   inline const ASN1T_IMP_NoticeReference& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NoticeReference");
   int toStream (const char* name = "NoticeReference");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_NoticeReference* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_NoticeReference& getCopy (ASN1T_IMP_NoticeReference* pDstData = 0);
   ASN1T_IMP_NoticeReference* newCopy ();

   inline ASN1C_IMP_NoticeReference& operator= (ASN1C_IMP_NoticeReference& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_NoticeReference (OSCTXT* pctxt,
   ASN1T_IMP_NoticeReference *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_NoticeReference (OSCTXT* pctxt, 
   ASN1T_IMP_NoticeReference* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_NoticeReference 
   (const char* name, const ASN1T_IMP_NoticeReference* pvalue);

EXTERN int asn1PrtToStrm_IMP_NoticeReference (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_NoticeReference* pvalue);

EXTERN ASN1T_IMP_NoticeReference* 
   new_ASN1T_IMP_NoticeReference (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_NoticeReference (const char* name, 
   ASN1T_IMP_NoticeReference* pValue, ASN1T_IMP_NoticeReference* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_NoticeReference (OSCTXT* pctxt, 
   ASN1T_IMP_NoticeReference* pSrcValue, ASN1T_IMP_NoticeReference* pDstValue);

EXTERN void asn1Init_IMP_NoticeReference (ASN1T_IMP_NoticeReference* pvalue);

EXTERN void asn1Free_IMP_NoticeReference (OSCTXT *pctxt, 
   ASN1T_IMP_NoticeReference* pvalue);

/**************************************************************/
/*                                                            */
/*  UserNotice                                                */
/*                                                            */
/**************************************************************/
/*
UserNotice ::= SEQUENCE {
   noticeRef NoticeReference OPTIONAL,
   explicitText DisplayText OPTIONAL
}
*/
#define TV_IMP_UserNotice	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_UserNotice;

struct EXTERN ASN1T_IMP_UserNotice : public ASN1TPDU {
   struct {
      unsigned noticeRefPresent : 1;
      unsigned explicitTextPresent : 1;
   } m;
   ASN1T_IMP_NoticeReference noticeRef;
   ASN1T_IMP_DisplayText explicitText;
   ASN1T_IMP_UserNotice ();
   ASN1T_IMP_UserNotice (ASN1C_IMP_UserNotice& srcData);
   ~ASN1T_IMP_UserNotice ();
} ;

class EXTERN ASN1C_IMP_UserNotice :
public ASN1CType
{
protected:
   ASN1T_IMP_UserNotice& msgData;
public:
   ASN1C_IMP_UserNotice (ASN1T_IMP_UserNotice& data);
   ASN1C_IMP_UserNotice (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_UserNotice& data);
   ASN1C_IMP_UserNotice (OSRTContext &context, ASN1T_IMP_UserNotice& data);
   ASN1C_IMP_UserNotice (ASN1C_IMP_UserNotice& original);
   virtual ~ASN1C_IMP_UserNotice () {}
   inline ASN1T_IMP_UserNotice& getData () { return msgData; }
   inline const ASN1T_IMP_UserNotice& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UserNotice");
   int toStream (const char* name = "UserNotice");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_UserNotice* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_UserNotice& getCopy (ASN1T_IMP_UserNotice* pDstData = 0);
   ASN1T_IMP_UserNotice* newCopy ();

   inline ASN1C_IMP_UserNotice& operator= (ASN1C_IMP_UserNotice& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_UserNotice (OSCTXT* pctxt,
   ASN1T_IMP_UserNotice *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_UserNotice (OSCTXT* pctxt, ASN1T_IMP_UserNotice* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_UserNotice 
   (const char* name, const ASN1T_IMP_UserNotice* pvalue);

EXTERN int asn1PrtToStrm_IMP_UserNotice (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_UserNotice* pvalue);

EXTERN ASN1T_IMP_UserNotice* new_ASN1T_IMP_UserNotice (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_UserNotice (const char* name, 
   ASN1T_IMP_UserNotice* pValue, ASN1T_IMP_UserNotice* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_UserNotice (OSCTXT* pctxt, ASN1T_IMP_UserNotice* pSrcValue, 
   ASN1T_IMP_UserNotice* pDstValue);

EXTERN void asn1Init_IMP_UserNotice (ASN1T_IMP_UserNotice* pvalue);

EXTERN void asn1Free_IMP_UserNotice (OSCTXT *pctxt, ASN1T_IMP_UserNotice* pvalue);

/**************************************************************/
/*                                                            */
/*  Qualifier                                                 */
/*                                                            */
/**************************************************************/
/*
( id-qt-cps | id-qt-unotice )

Qualifier ::= CHOICE {
   userNotice UserNotice,
   cPSuri CPSuri
}
*/
/* Choice context tags */

#define TVC_IMP_Qualifier_userNotice	(TM_UNIV|TM_CONS|16)
#define TVC_IMP_Qualifier_cPSuri	(TM_UNIV|TM_PRIM|22)

/* Choice tag constants */

#define T_IMP_Qualifier_userNotice      1
#define T_IMP_Qualifier_cPSuri          2

class EXTERN ASN1C_IMP_Qualifier;

struct EXTERN ASN1T_IMP_Qualifier : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_IMP_UserNotice *userNotice;
      /* t = 2 */
      ASN1T_IMP_CPSuri cPSuri;
   } u;
   ASN1T_IMP_Qualifier () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_IMP_Qualifier (ASN1C_IMP_Qualifier& srcData);
   ~ASN1T_IMP_Qualifier ();
} ;

class EXTERN ASN1C_IMP_Qualifier :
public ASN1CType
{
protected:
   ASN1T_IMP_Qualifier& msgData;
public:
   ASN1C_IMP_Qualifier (ASN1T_IMP_Qualifier& data);
   ASN1C_IMP_Qualifier (OSRTMessageBufferIF& msgBuf, ASN1T_IMP_Qualifier& data);
   ASN1C_IMP_Qualifier (OSRTContext &context, ASN1T_IMP_Qualifier& data);
   ASN1C_IMP_Qualifier (ASN1C_IMP_Qualifier& original);
   virtual ~ASN1C_IMP_Qualifier () {}
   inline ASN1T_IMP_Qualifier& getData () { return msgData; }
   inline const ASN1T_IMP_Qualifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Qualifier");
   int toStream (const char* name = "Qualifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_Qualifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_Qualifier& getCopy (ASN1T_IMP_Qualifier* pDstData = 0);
   ASN1T_IMP_Qualifier* newCopy ();

   inline ASN1C_IMP_Qualifier& operator= (ASN1C_IMP_Qualifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_Qualifier (OSCTXT* pctxt,
   ASN1T_IMP_Qualifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_Qualifier (OSCTXT* pctxt, ASN1T_IMP_Qualifier* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_Qualifier 
   (const char* name, const ASN1T_IMP_Qualifier* pvalue);

EXTERN int asn1PrtToStrm_IMP_Qualifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_Qualifier* pvalue);

EXTERN ASN1T_IMP_Qualifier* new_ASN1T_IMP_Qualifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_Qualifier (const char* name, 
   ASN1T_IMP_Qualifier* pValue, ASN1T_IMP_Qualifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_Qualifier (OSCTXT* pctxt, ASN1T_IMP_Qualifier* pSrcValue, 
   ASN1T_IMP_Qualifier* pDstValue);

EXTERN void asn1Init_IMP_Qualifier (ASN1T_IMP_Qualifier* pvalue);

EXTERN void asn1Free_IMP_Qualifier (OSCTXT *pctxt, ASN1T_IMP_Qualifier* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyMappings_element                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PolicyMappings'
*/
class EXTERN ASN1C_IMP_PolicyMappings_element;

struct EXTERN ASN1T_IMP_PolicyMappings_element : public ASN1TPDU {
   ASN1T_IMP_CertPolicyId issuerDomainPolicy;
   ASN1T_IMP_CertPolicyId subjectDomainPolicy;
   ASN1T_IMP_PolicyMappings_element ();
   ASN1T_IMP_PolicyMappings_element (ASN1C_IMP_PolicyMappings_element& srcData);
} ;

class EXTERN ASN1C_IMP_PolicyMappings_element :
public ASN1CType
{
protected:
   ASN1T_IMP_PolicyMappings_element& msgData;
public:
   ASN1C_IMP_PolicyMappings_element (ASN1T_IMP_PolicyMappings_element& data);
   ASN1C_IMP_PolicyMappings_element (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_PolicyMappings_element& data);
   ASN1C_IMP_PolicyMappings_element (OSRTContext &context
      , ASN1T_IMP_PolicyMappings_element& data);
   ASN1C_IMP_PolicyMappings_element (ASN1C_IMP_PolicyMappings_element& original);
   virtual ~ASN1C_IMP_PolicyMappings_element () {}
   inline ASN1T_IMP_PolicyMappings_element& getData () { return msgData; }
   inline const ASN1T_IMP_PolicyMappings_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PolicyMappings_element");
   int toStream (const char* name = "PolicyMappings_element");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_PolicyMappings_element* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_PolicyMappings_element& getCopy (ASN1T_IMP_PolicyMappings_element* pDstData = 0);
   ASN1T_IMP_PolicyMappings_element* newCopy ();

   inline ASN1C_IMP_PolicyMappings_element& operator= (ASN1C_IMP_PolicyMappings_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_PolicyMappings_element (OSCTXT* pctxt,
   ASN1T_IMP_PolicyMappings_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_PolicyMappings_element (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyMappings_element* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_PolicyMappings_element 
   (const char* name, const ASN1T_IMP_PolicyMappings_element* pvalue);

EXTERN int asn1PrtToStrm_IMP_PolicyMappings_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyMappings_element* pvalue);

EXTERN ASN1T_IMP_PolicyMappings_element* 
   new_ASN1T_IMP_PolicyMappings_element (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_PolicyMappings_element (const char* name, 
   ASN1T_IMP_PolicyMappings_element* pValue, 
   ASN1T_IMP_PolicyMappings_element* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_PolicyMappings_element (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyMappings_element* pSrcValue, 
   ASN1T_IMP_PolicyMappings_element* pDstValue);

EXTERN void asn1Init_IMP_PolicyMappings_element (
   ASN1T_IMP_PolicyMappings_element* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyMappings                                            */
/*                                                            */
/**************************************************************/
/*
PolicyMappings ::= SEQUENCE (SIZE (1..MAX)) OF SEQUENCE {
   issuerDomainPolicy CertPolicyId,
   subjectDomainPolicy CertPolicyId
}
*/
#define TV_IMP_PolicyMappings	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_PolicyMappings;

/* List of ASN1T_IMP_PolicyMappings_element */
typedef struct EXTERN ASN1T_IMP_PolicyMappings : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_PolicyMappings();
} ASN1T_IMP_PolicyMappings;

class EXTERN ASN1C_IMP_PolicyMappings :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_PolicyMappings& msgData;
public:
   ASN1C_IMP_PolicyMappings (ASN1T_IMP_PolicyMappings& data);
   ASN1C_IMP_PolicyMappings (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_PolicyMappings& data);
   ASN1C_IMP_PolicyMappings (ASN1CType& ccobj, ASN1T_IMP_PolicyMappings& data);
   ASN1C_IMP_PolicyMappings (OSRTContext &context
      , ASN1T_IMP_PolicyMappings& data);
   ASN1C_IMP_PolicyMappings (ASN1C_IMP_PolicyMappings& original);
   virtual ~ASN1C_IMP_PolicyMappings () {}
   inline ASN1T_IMP_PolicyMappings& getData () { return msgData; }
   inline const ASN1T_IMP_PolicyMappings& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PolicyMappings");
   int toStream (const char* name = "PolicyMappings");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_PolicyMappings* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_PolicyMappings& getCopy (ASN1T_IMP_PolicyMappings* pDstData = 0);
   ASN1T_IMP_PolicyMappings* newCopy ();

   ASN1C_IMP_PolicyMappings& operator= (ASN1C_IMP_PolicyMappings& srcData);
   void Append (ASN1T_IMP_PolicyMappings_element* elem);
   ASN1T_IMP_PolicyMappings_element* NewElement ();
   ASN1T_IMP_PolicyMappings_element* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_PolicyMappings (OSCTXT* pctxt,
   ASN1T_IMP_PolicyMappings *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_PolicyMappings (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyMappings* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_PolicyMappings 
   (const char* name, const ASN1T_IMP_PolicyMappings* pvalue);

EXTERN int asn1PrtToStrm_IMP_PolicyMappings (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyMappings* pvalue);

EXTERN OSBOOL asn1Compare_IMP_PolicyMappings (const char* name, 
   ASN1T_IMP_PolicyMappings* pValue, ASN1T_IMP_PolicyMappings* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_PolicyMappings (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyMappings* pSrcValue, ASN1T_IMP_PolicyMappings* pDstValue);

EXTERN void asn1Init_IMP_PolicyMappings (ASN1T_IMP_PolicyMappings* pvalue);

EXTERN void asn1Free_IMP_PolicyMappings (OSCTXT *pctxt, 
   ASN1T_IMP_PolicyMappings* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicConstraints                                          */
/*                                                            */
/**************************************************************/
/*
BasicConstraints ::= SEQUENCE {
   cA BOOLEAN DEFAULT FALSE,
   pathLenConstraint INTEGER (0..MAX) OPTIONAL
}
*/
#define TV_IMP_BasicConstraints	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_BasicConstraints;

struct EXTERN ASN1T_IMP_BasicConstraints : public ASN1TPDU {
   struct {
      unsigned pathLenConstraintPresent : 1;
   } m;
   OSBOOL cA;
   OSUINT32 pathLenConstraint;
   ASN1T_IMP_BasicConstraints ();
   ASN1T_IMP_BasicConstraints (ASN1C_IMP_BasicConstraints& srcData);
} ;

class EXTERN ASN1C_IMP_BasicConstraints :
public ASN1CType
{
protected:
   ASN1T_IMP_BasicConstraints& msgData;
public:
   ASN1C_IMP_BasicConstraints (ASN1T_IMP_BasicConstraints& data);
   ASN1C_IMP_BasicConstraints (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_BasicConstraints& data);
   ASN1C_IMP_BasicConstraints (OSRTContext &context
      , ASN1T_IMP_BasicConstraints& data);
   ASN1C_IMP_BasicConstraints (ASN1C_IMP_BasicConstraints& original);
   virtual ~ASN1C_IMP_BasicConstraints () {}
   inline ASN1T_IMP_BasicConstraints& getData () { return msgData; }
   inline const ASN1T_IMP_BasicConstraints& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BasicConstraints");
   int toStream (const char* name = "BasicConstraints");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_BasicConstraints* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_BasicConstraints& getCopy (ASN1T_IMP_BasicConstraints* pDstData = 0);
   ASN1T_IMP_BasicConstraints* newCopy ();

   inline ASN1C_IMP_BasicConstraints& operator= (ASN1C_IMP_BasicConstraints& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_BasicConstraints (OSCTXT* pctxt,
   ASN1T_IMP_BasicConstraints *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_BasicConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_BasicConstraints* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_BasicConstraints 
   (const char* name, const ASN1T_IMP_BasicConstraints* pvalue);

EXTERN int asn1PrtToStrm_IMP_BasicConstraints (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_BasicConstraints* pvalue);

EXTERN ASN1T_IMP_BasicConstraints* 
   new_ASN1T_IMP_BasicConstraints (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_BasicConstraints (const char* name, 
   ASN1T_IMP_BasicConstraints* pValue, ASN1T_IMP_BasicConstraints* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_BasicConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_BasicConstraints* pSrcValue, ASN1T_IMP_BasicConstraints*
    pDstValue);

EXTERN void asn1Init_IMP_BasicConstraints (ASN1T_IMP_BasicConstraints* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtKeyUsageSyntax                                         */
/*                                                            */
/**************************************************************/
/*
ExtKeyUsageSyntax ::= SEQUENCE (SIZE (1..MAX)) OF KeyPurposeId
*/
#define TV_IMP_ExtKeyUsageSyntax	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_ExtKeyUsageSyntax;

/* List of ASN1T_IMP_KeyPurposeId */
typedef struct EXTERN ASN1T_IMP_ExtKeyUsageSyntax : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_ExtKeyUsageSyntax();
} ASN1T_IMP_ExtKeyUsageSyntax;

class EXTERN ASN1C_IMP_ExtKeyUsageSyntax :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_ExtKeyUsageSyntax& msgData;
public:
   ASN1C_IMP_ExtKeyUsageSyntax (ASN1T_IMP_ExtKeyUsageSyntax& data);
   ASN1C_IMP_ExtKeyUsageSyntax (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_ExtKeyUsageSyntax& data);
   ASN1C_IMP_ExtKeyUsageSyntax (ASN1CType& ccobj
      , ASN1T_IMP_ExtKeyUsageSyntax& data);
   ASN1C_IMP_ExtKeyUsageSyntax (OSRTContext &context
      , ASN1T_IMP_ExtKeyUsageSyntax& data);
   ASN1C_IMP_ExtKeyUsageSyntax (ASN1C_IMP_ExtKeyUsageSyntax& original);
   virtual ~ASN1C_IMP_ExtKeyUsageSyntax () {}
   inline ASN1T_IMP_ExtKeyUsageSyntax& getData () { return msgData; }
   inline const ASN1T_IMP_ExtKeyUsageSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtKeyUsageSyntax");
   int toStream (const char* name = "ExtKeyUsageSyntax");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_ExtKeyUsageSyntax* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_ExtKeyUsageSyntax& getCopy (ASN1T_IMP_ExtKeyUsageSyntax* pDstData = 0);
   ASN1T_IMP_ExtKeyUsageSyntax* newCopy ();

   ASN1C_IMP_ExtKeyUsageSyntax& operator= (ASN1C_IMP_ExtKeyUsageSyntax& srcData);
   void Append (ASN1T_IMP_KeyPurposeId* elem);
   ASN1T_IMP_KeyPurposeId* NewElement ();
   ASN1T_IMP_KeyPurposeId* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_ExtKeyUsageSyntax (OSCTXT* pctxt,
   ASN1T_IMP_ExtKeyUsageSyntax *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_ExtKeyUsageSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_ExtKeyUsageSyntax* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_ExtKeyUsageSyntax 
   (const char* name, const ASN1T_IMP_ExtKeyUsageSyntax* pvalue);

EXTERN int asn1PrtToStrm_IMP_ExtKeyUsageSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_ExtKeyUsageSyntax* pvalue);

EXTERN OSBOOL asn1Compare_IMP_ExtKeyUsageSyntax (const char* name, 
   ASN1T_IMP_ExtKeyUsageSyntax* pValue, 
   ASN1T_IMP_ExtKeyUsageSyntax* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_ExtKeyUsageSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_ExtKeyUsageSyntax* pSrcValue, ASN1T_IMP_ExtKeyUsageSyntax*
    pDstValue);

EXTERN void asn1Init_IMP_ExtKeyUsageSyntax (ASN1T_IMP_ExtKeyUsageSyntax* pvalue);

EXTERN void asn1Free_IMP_ExtKeyUsageSyntax (OSCTXT *pctxt, 
   ASN1T_IMP_ExtKeyUsageSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  AccessDescription                                         */
/*                                                            */
/**************************************************************/
/*
AccessDescription ::= SEQUENCE {
   accessMethod OBJECT IDENTIFIER,
   accessLocation GeneralName
}
*/
#define TV_IMP_AccessDescription	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_AccessDescription;

struct EXTERN ASN1T_IMP_AccessDescription : public ASN1TPDU {
   ASN1TObjId accessMethod;
   ASN1T_IMP_GeneralName accessLocation;
   ASN1T_IMP_AccessDescription ();
   ASN1T_IMP_AccessDescription (ASN1C_IMP_AccessDescription& srcData);
   ~ASN1T_IMP_AccessDescription ();
} ;

class EXTERN ASN1C_IMP_AccessDescription :
public ASN1CType
{
protected:
   ASN1T_IMP_AccessDescription& msgData;
public:
   ASN1C_IMP_AccessDescription (ASN1T_IMP_AccessDescription& data);
   ASN1C_IMP_AccessDescription (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_AccessDescription& data);
   ASN1C_IMP_AccessDescription (OSRTContext &context
      , ASN1T_IMP_AccessDescription& data);
   ASN1C_IMP_AccessDescription (ASN1C_IMP_AccessDescription& original);
   virtual ~ASN1C_IMP_AccessDescription () {}
   inline ASN1T_IMP_AccessDescription& getData () { return msgData; }
   inline const ASN1T_IMP_AccessDescription& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AccessDescription");
   int toStream (const char* name = "AccessDescription");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_AccessDescription* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_AccessDescription& getCopy (ASN1T_IMP_AccessDescription* pDstData = 0);
   ASN1T_IMP_AccessDescription* newCopy ();

   inline ASN1C_IMP_AccessDescription& operator= (ASN1C_IMP_AccessDescription& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_AccessDescription (OSCTXT* pctxt,
   ASN1T_IMP_AccessDescription *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_AccessDescription (OSCTXT* pctxt, 
   ASN1T_IMP_AccessDescription* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_AccessDescription 
   (const char* name, const ASN1T_IMP_AccessDescription* pvalue);

EXTERN int asn1PrtToStrm_IMP_AccessDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_AccessDescription* pvalue);

EXTERN ASN1T_IMP_AccessDescription* 
   new_ASN1T_IMP_AccessDescription (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_AccessDescription (const char* name, 
   ASN1T_IMP_AccessDescription* pValue, 
   ASN1T_IMP_AccessDescription* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_AccessDescription (OSCTXT* pctxt, 
   ASN1T_IMP_AccessDescription* pSrcValue, ASN1T_IMP_AccessDescription*
    pDstValue);

EXTERN void asn1Init_IMP_AccessDescription (ASN1T_IMP_AccessDescription* pvalue);

EXTERN void asn1Free_IMP_AccessDescription (OSCTXT *pctxt, 
   ASN1T_IMP_AccessDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  AuthorityInfoAccessSyntax                                 */
/*                                                            */
/**************************************************************/
/*
AuthorityInfoAccessSyntax ::= SEQUENCE (SIZE (1..MAX)) OF AccessDescription
*/
#define TV_IMP_AuthorityInfoAccessSyntax	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_AuthorityInfoAccessSyntax;

/* List of ASN1T_IMP_AccessDescription */
typedef struct EXTERN ASN1T_IMP_AuthorityInfoAccessSyntax : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_AuthorityInfoAccessSyntax();
} ASN1T_IMP_AuthorityInfoAccessSyntax;

class EXTERN ASN1C_IMP_AuthorityInfoAccessSyntax :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_AuthorityInfoAccessSyntax& msgData;
public:
   ASN1C_IMP_AuthorityInfoAccessSyntax
       (ASN1T_IMP_AuthorityInfoAccessSyntax& data);
   ASN1C_IMP_AuthorityInfoAccessSyntax (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_AuthorityInfoAccessSyntax& data);
   ASN1C_IMP_AuthorityInfoAccessSyntax (ASN1CType& ccobj
      , ASN1T_IMP_AuthorityInfoAccessSyntax& data);
   ASN1C_IMP_AuthorityInfoAccessSyntax (OSRTContext &context
      , ASN1T_IMP_AuthorityInfoAccessSyntax& data);
   ASN1C_IMP_AuthorityInfoAccessSyntax (ASN1C_IMP_AuthorityInfoAccessSyntax& original);
   virtual ~ASN1C_IMP_AuthorityInfoAccessSyntax () {}
   inline ASN1T_IMP_AuthorityInfoAccessSyntax& getData () { return msgData; }
   inline const ASN1T_IMP_AuthorityInfoAccessSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AuthorityInfoAccessSyntax");
   int toStream (const char* name = "AuthorityInfoAccessSyntax");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_AuthorityInfoAccessSyntax* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_AuthorityInfoAccessSyntax& getCopy (ASN1T_IMP_AuthorityInfoAccessSyntax* pDstData = 0);
   ASN1T_IMP_AuthorityInfoAccessSyntax* newCopy ();

   ASN1C_IMP_AuthorityInfoAccessSyntax& operator= (ASN1C_IMP_AuthorityInfoAccessSyntax& srcData);
   void Append (ASN1T_IMP_AccessDescription* elem);
   ASN1T_IMP_AccessDescription* NewElement ();
   ASN1T_IMP_AccessDescription* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_AuthorityInfoAccessSyntax (OSCTXT* pctxt,
   ASN1T_IMP_AuthorityInfoAccessSyntax *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_AuthorityInfoAccessSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_IMP_AuthorityInfoAccessSyntax 
   (const char* name, const ASN1T_IMP_AuthorityInfoAccessSyntax* pvalue);

EXTERN int asn1PrtToStrm_IMP_AuthorityInfoAccessSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_AuthorityInfoAccessSyntax* pvalue);

EXTERN OSBOOL asn1Compare_IMP_AuthorityInfoAccessSyntax (const char* name, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pValue, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_AuthorityInfoAccessSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pSrcValue, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pDstValue);

EXTERN void asn1Init_IMP_AuthorityInfoAccessSyntax (
   ASN1T_IMP_AuthorityInfoAccessSyntax* pvalue);

EXTERN void asn1Free_IMP_AuthorityInfoAccessSyntax (OSCTXT *pctxt, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectInfoAccessSyntax                                   */
/*                                                            */
/**************************************************************/
/*
SubjectInfoAccessSyntax ::= SEQUENCE (SIZE (1..MAX)) OF AccessDescription
*/
#define TV_IMP_SubjectInfoAccessSyntax	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_SubjectInfoAccessSyntax;

/* List of ASN1T_IMP_AccessDescription */
typedef struct EXTERN ASN1T_IMP_SubjectInfoAccessSyntax : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_SubjectInfoAccessSyntax();
} ASN1T_IMP_SubjectInfoAccessSyntax;

class EXTERN ASN1C_IMP_SubjectInfoAccessSyntax :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_SubjectInfoAccessSyntax& msgData;
public:
   ASN1C_IMP_SubjectInfoAccessSyntax (ASN1T_IMP_SubjectInfoAccessSyntax& data);
   ASN1C_IMP_SubjectInfoAccessSyntax (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_SubjectInfoAccessSyntax& data);
   ASN1C_IMP_SubjectInfoAccessSyntax (ASN1CType& ccobj
      , ASN1T_IMP_SubjectInfoAccessSyntax& data);
   ASN1C_IMP_SubjectInfoAccessSyntax (OSRTContext &context
      , ASN1T_IMP_SubjectInfoAccessSyntax& data);
   ASN1C_IMP_SubjectInfoAccessSyntax (ASN1C_IMP_SubjectInfoAccessSyntax& original);
   virtual ~ASN1C_IMP_SubjectInfoAccessSyntax () {}
   inline ASN1T_IMP_SubjectInfoAccessSyntax& getData () { return msgData; }
   inline const ASN1T_IMP_SubjectInfoAccessSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SubjectInfoAccessSyntax");
   int toStream (const char* name = "SubjectInfoAccessSyntax");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_SubjectInfoAccessSyntax* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_SubjectInfoAccessSyntax& getCopy (ASN1T_IMP_SubjectInfoAccessSyntax* pDstData = 0);
   ASN1T_IMP_SubjectInfoAccessSyntax* newCopy ();

   ASN1C_IMP_SubjectInfoAccessSyntax& operator= (ASN1C_IMP_SubjectInfoAccessSyntax& srcData);
   void Append (ASN1T_IMP_AccessDescription* elem);
   ASN1T_IMP_AccessDescription* NewElement ();
   ASN1T_IMP_AccessDescription* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_SubjectInfoAccessSyntax (OSCTXT* pctxt,
   ASN1T_IMP_SubjectInfoAccessSyntax *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_SubjectInfoAccessSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_SubjectInfoAccessSyntax 
   (const char* name, const ASN1T_IMP_SubjectInfoAccessSyntax* pvalue);

EXTERN int asn1PrtToStrm_IMP_SubjectInfoAccessSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SubjectInfoAccessSyntax* pvalue);

EXTERN OSBOOL asn1Compare_IMP_SubjectInfoAccessSyntax (const char* name, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pValue, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_SubjectInfoAccessSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pSrcValue, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pDstValue);

EXTERN void asn1Init_IMP_SubjectInfoAccessSyntax (
   ASN1T_IMP_SubjectInfoAccessSyntax* pvalue);

EXTERN void asn1Free_IMP_SubjectInfoAccessSyntax (OSCTXT *pctxt, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectDirectoryAttributes                                */
/*                                                            */
/**************************************************************/
/*
SubjectDirectoryAttributes ::= SEQUENCE (SIZE (1..MAX)) OF Attribute
*/
#define TV_IMP_SubjectDirectoryAttributes	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_SubjectDirectoryAttributes;

/* List of ASN1T_EXP_Attribute */
typedef struct EXTERN ASN1T_IMP_SubjectDirectoryAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_SubjectDirectoryAttributes();
} ASN1T_IMP_SubjectDirectoryAttributes;

class EXTERN ASN1C_IMP_SubjectDirectoryAttributes :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_SubjectDirectoryAttributes& msgData;
public:
   ASN1C_IMP_SubjectDirectoryAttributes
       (ASN1T_IMP_SubjectDirectoryAttributes& data);
   ASN1C_IMP_SubjectDirectoryAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_SubjectDirectoryAttributes& data);
   ASN1C_IMP_SubjectDirectoryAttributes (ASN1CType& ccobj
      , ASN1T_IMP_SubjectDirectoryAttributes& data);
   ASN1C_IMP_SubjectDirectoryAttributes (OSRTContext &context
      , ASN1T_IMP_SubjectDirectoryAttributes& data);
   ASN1C_IMP_SubjectDirectoryAttributes (ASN1C_IMP_SubjectDirectoryAttributes& original);
   virtual ~ASN1C_IMP_SubjectDirectoryAttributes () {}
   inline ASN1T_IMP_SubjectDirectoryAttributes& getData () { return msgData; }
   inline const ASN1T_IMP_SubjectDirectoryAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SubjectDirectoryAttributes");
   int toStream (const char* name = "SubjectDirectoryAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_SubjectDirectoryAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_SubjectDirectoryAttributes& getCopy (ASN1T_IMP_SubjectDirectoryAttributes* pDstData = 0);
   ASN1T_IMP_SubjectDirectoryAttributes* newCopy ();

   ASN1C_IMP_SubjectDirectoryAttributes& operator= (ASN1C_IMP_SubjectDirectoryAttributes& srcData);
   void Append (ASN1T_EXP_Attribute* elem);
   ASN1T_EXP_Attribute* NewElement ();
   ASN1T_EXP_Attribute* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_SubjectDirectoryAttributes (OSCTXT* pctxt,
   ASN1T_IMP_SubjectDirectoryAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_SubjectDirectoryAttributes (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectDirectoryAttributes* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_IMP_SubjectDirectoryAttributes 
   (const char* name, const ASN1T_IMP_SubjectDirectoryAttributes* pvalue);

EXTERN int asn1PrtToStrm_IMP_SubjectDirectoryAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_SubjectDirectoryAttributes* pvalue);

EXTERN OSBOOL asn1Compare_IMP_SubjectDirectoryAttributes (const char* name, 
   ASN1T_IMP_SubjectDirectoryAttributes* pValue, 
   ASN1T_IMP_SubjectDirectoryAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_SubjectDirectoryAttributes (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectDirectoryAttributes* pSrcValue, 
   ASN1T_IMP_SubjectDirectoryAttributes* pDstValue);

EXTERN void asn1Init_IMP_SubjectDirectoryAttributes (
   ASN1T_IMP_SubjectDirectoryAttributes* pvalue);

EXTERN void asn1Free_IMP_SubjectDirectoryAttributes (OSCTXT *pctxt, 
   ASN1T_IMP_SubjectDirectoryAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  RoleSyntax                                                */
/*                                                            */
/**************************************************************/
/*
RoleSyntax ::= SEQUENCE {
   roleAuthority [0] GeneralNames OPTIONAL,
   roleName [1] GeneralName
}
*/
#define TV_IMP_RoleSyntax	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_RoleSyntax;

struct EXTERN ASN1T_IMP_RoleSyntax : public ASN1TPDU {
   struct {
      unsigned roleAuthorityPresent : 1;
   } m;
   ASN1T_IMP_GeneralNames roleAuthority;
   ASN1T_IMP_GeneralName roleName;
   ASN1T_IMP_RoleSyntax ();
   ASN1T_IMP_RoleSyntax (ASN1C_IMP_RoleSyntax& srcData);
   ~ASN1T_IMP_RoleSyntax ();
} ;

class EXTERN ASN1C_IMP_RoleSyntax :
public ASN1CType
{
protected:
   ASN1T_IMP_RoleSyntax& msgData;
public:
   ASN1C_IMP_RoleSyntax (ASN1T_IMP_RoleSyntax& data);
   ASN1C_IMP_RoleSyntax (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_RoleSyntax& data);
   ASN1C_IMP_RoleSyntax (OSRTContext &context, ASN1T_IMP_RoleSyntax& data);
   ASN1C_IMP_RoleSyntax (ASN1C_IMP_RoleSyntax& original);
   virtual ~ASN1C_IMP_RoleSyntax () {}
   inline ASN1T_IMP_RoleSyntax& getData () { return msgData; }
   inline const ASN1T_IMP_RoleSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RoleSyntax");
   int toStream (const char* name = "RoleSyntax");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_RoleSyntax* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_RoleSyntax& getCopy (ASN1T_IMP_RoleSyntax* pDstData = 0);
   ASN1T_IMP_RoleSyntax* newCopy ();

   inline ASN1C_IMP_RoleSyntax& operator= (ASN1C_IMP_RoleSyntax& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_RoleSyntax (OSCTXT* pctxt,
   ASN1T_IMP_RoleSyntax *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_RoleSyntax (OSCTXT* pctxt, ASN1T_IMP_RoleSyntax* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_RoleSyntax 
   (const char* name, const ASN1T_IMP_RoleSyntax* pvalue);

EXTERN int asn1PrtToStrm_IMP_RoleSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_RoleSyntax* pvalue);

EXTERN ASN1T_IMP_RoleSyntax* new_ASN1T_IMP_RoleSyntax (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_RoleSyntax (const char* name, 
   ASN1T_IMP_RoleSyntax* pValue, ASN1T_IMP_RoleSyntax* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_RoleSyntax (OSCTXT* pctxt, ASN1T_IMP_RoleSyntax* pSrcValue, 
   ASN1T_IMP_RoleSyntax* pDstValue);

EXTERN void asn1Init_IMP_RoleSyntax (ASN1T_IMP_RoleSyntax* pvalue);

EXTERN void asn1Free_IMP_RoleSyntax (OSCTXT *pctxt, ASN1T_IMP_RoleSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  GeneralSubtree                                            */
/*                                                            */
/**************************************************************/
/*
GeneralSubtree ::= SEQUENCE {
   base GeneralName,
   minimum [0] BaseDistance DEFAULT 0,
   maximum [1] BaseDistance OPTIONAL
}
*/
#define TV_IMP_GeneralSubtree	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_GeneralSubtree;

struct EXTERN ASN1T_IMP_GeneralSubtree : public ASN1TPDU {
   struct {
      unsigned maximumPresent : 1;
   } m;
   ASN1T_IMP_GeneralName base;
   ASN1T_IMP_BaseDistance minimum;
   ASN1T_IMP_BaseDistance maximum;
   ASN1T_IMP_GeneralSubtree ();
   ASN1T_IMP_GeneralSubtree (ASN1C_IMP_GeneralSubtree& srcData);
   ~ASN1T_IMP_GeneralSubtree ();
} ;

class EXTERN ASN1C_IMP_GeneralSubtree :
public ASN1CType
{
protected:
   ASN1T_IMP_GeneralSubtree& msgData;
public:
   ASN1C_IMP_GeneralSubtree (ASN1T_IMP_GeneralSubtree& data);
   ASN1C_IMP_GeneralSubtree (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_GeneralSubtree& data);
   ASN1C_IMP_GeneralSubtree (OSRTContext &context
      , ASN1T_IMP_GeneralSubtree& data);
   ASN1C_IMP_GeneralSubtree (ASN1C_IMP_GeneralSubtree& original);
   virtual ~ASN1C_IMP_GeneralSubtree () {}
   inline ASN1T_IMP_GeneralSubtree& getData () { return msgData; }
   inline const ASN1T_IMP_GeneralSubtree& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "GeneralSubtree");
   int toStream (const char* name = "GeneralSubtree");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_GeneralSubtree* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_GeneralSubtree& getCopy (ASN1T_IMP_GeneralSubtree* pDstData = 0);
   ASN1T_IMP_GeneralSubtree* newCopy ();

   inline ASN1C_IMP_GeneralSubtree& operator= (ASN1C_IMP_GeneralSubtree& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_GeneralSubtree (OSCTXT* pctxt,
   ASN1T_IMP_GeneralSubtree *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_GeneralSubtree (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralSubtree* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_GeneralSubtree 
   (const char* name, const ASN1T_IMP_GeneralSubtree* pvalue);

EXTERN int asn1PrtToStrm_IMP_GeneralSubtree (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_GeneralSubtree* pvalue);

EXTERN ASN1T_IMP_GeneralSubtree* 
   new_ASN1T_IMP_GeneralSubtree (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_GeneralSubtree (const char* name, 
   ASN1T_IMP_GeneralSubtree* pValue, ASN1T_IMP_GeneralSubtree* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_GeneralSubtree (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralSubtree* pSrcValue, ASN1T_IMP_GeneralSubtree* pDstValue);

EXTERN void asn1Init_IMP_GeneralSubtree (ASN1T_IMP_GeneralSubtree* pvalue);

EXTERN void asn1Free_IMP_GeneralSubtree (OSCTXT *pctxt, 
   ASN1T_IMP_GeneralSubtree* pvalue);

/**************************************************************/
/*                                                            */
/*  GeneralSubtrees                                           */
/*                                                            */
/**************************************************************/
/*
GeneralSubtrees ::= SEQUENCE (SIZE (1..MAX)) OF GeneralSubtree
*/
#define TV_IMP_GeneralSubtrees	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_GeneralSubtrees;

/* List of ASN1T_IMP_GeneralSubtree */
typedef struct EXTERN ASN1T_IMP_GeneralSubtrees : public ASN1TPDUSeqOfList {
   ~ASN1T_IMP_GeneralSubtrees();
} ASN1T_IMP_GeneralSubtrees;

class EXTERN ASN1C_IMP_GeneralSubtrees :
public ASN1CSeqOfList
{
protected:
   ASN1T_IMP_GeneralSubtrees& msgData;
public:
   ASN1C_IMP_GeneralSubtrees (ASN1T_IMP_GeneralSubtrees& data);
   ASN1C_IMP_GeneralSubtrees (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_GeneralSubtrees& data);
   ASN1C_IMP_GeneralSubtrees (ASN1CType& ccobj, ASN1T_IMP_GeneralSubtrees& data
      );
   ASN1C_IMP_GeneralSubtrees (OSRTContext &context
      , ASN1T_IMP_GeneralSubtrees& data);
   ASN1C_IMP_GeneralSubtrees (ASN1C_IMP_GeneralSubtrees& original);
   virtual ~ASN1C_IMP_GeneralSubtrees () {}
   inline ASN1T_IMP_GeneralSubtrees& getData () { return msgData; }
   inline const ASN1T_IMP_GeneralSubtrees& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "GeneralSubtrees");
   int toStream (const char* name = "GeneralSubtrees");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_GeneralSubtrees* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_GeneralSubtrees& getCopy (ASN1T_IMP_GeneralSubtrees* pDstData = 0);
   ASN1T_IMP_GeneralSubtrees* newCopy ();

   ASN1C_IMP_GeneralSubtrees& operator= (ASN1C_IMP_GeneralSubtrees& srcData);
   void Append (ASN1T_IMP_GeneralSubtree* elem);
   ASN1T_IMP_GeneralSubtree* NewElement ();
   ASN1T_IMP_GeneralSubtree* AppendNewElement ();
} ;

EXTERN int asn1E_IMP_GeneralSubtrees (OSCTXT* pctxt,
   ASN1T_IMP_GeneralSubtrees *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_GeneralSubtrees (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralSubtrees* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_GeneralSubtrees 
   (const char* name, const ASN1T_IMP_GeneralSubtrees* pvalue);

EXTERN int asn1PrtToStrm_IMP_GeneralSubtrees (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_GeneralSubtrees* pvalue);

EXTERN OSBOOL asn1Compare_IMP_GeneralSubtrees (const char* name, 
   ASN1T_IMP_GeneralSubtrees* pValue, ASN1T_IMP_GeneralSubtrees* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_GeneralSubtrees (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralSubtrees* pSrcValue, ASN1T_IMP_GeneralSubtrees* pDstValue);

EXTERN void asn1Init_IMP_GeneralSubtrees (ASN1T_IMP_GeneralSubtrees* pvalue);

EXTERN void asn1Free_IMP_GeneralSubtrees (OSCTXT *pctxt, 
   ASN1T_IMP_GeneralSubtrees* pvalue);

/**************************************************************/
/*                                                            */
/*  NameConstraints                                           */
/*                                                            */
/**************************************************************/
/*
NameConstraints ::= SEQUENCE {
   permittedSubtrees [0] GeneralSubtrees OPTIONAL,
   excludedSubtrees [1] GeneralSubtrees OPTIONAL
}
*/
#define TV_IMP_NameConstraints	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_NameConstraints;

struct EXTERN ASN1T_IMP_NameConstraints : public ASN1TPDU {
   struct {
      unsigned permittedSubtreesPresent : 1;
      unsigned excludedSubtreesPresent : 1;
   } m;
   ASN1T_IMP_GeneralSubtrees permittedSubtrees;
   ASN1T_IMP_GeneralSubtrees excludedSubtrees;
   ASN1T_IMP_NameConstraints ();
   ASN1T_IMP_NameConstraints (ASN1C_IMP_NameConstraints& srcData);
   ~ASN1T_IMP_NameConstraints ();
} ;

class EXTERN ASN1C_IMP_NameConstraints :
public ASN1CType
{
protected:
   ASN1T_IMP_NameConstraints& msgData;
public:
   ASN1C_IMP_NameConstraints (ASN1T_IMP_NameConstraints& data);
   ASN1C_IMP_NameConstraints (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_NameConstraints& data);
   ASN1C_IMP_NameConstraints (OSRTContext &context
      , ASN1T_IMP_NameConstraints& data);
   ASN1C_IMP_NameConstraints (ASN1C_IMP_NameConstraints& original);
   virtual ~ASN1C_IMP_NameConstraints () {}
   inline ASN1T_IMP_NameConstraints& getData () { return msgData; }
   inline const ASN1T_IMP_NameConstraints& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NameConstraints");
   int toStream (const char* name = "NameConstraints");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_NameConstraints* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_NameConstraints& getCopy (ASN1T_IMP_NameConstraints* pDstData = 0);
   ASN1T_IMP_NameConstraints* newCopy ();

   inline ASN1C_IMP_NameConstraints& operator= (ASN1C_IMP_NameConstraints& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_NameConstraints (OSCTXT* pctxt,
   ASN1T_IMP_NameConstraints *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_NameConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_NameConstraints* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_NameConstraints 
   (const char* name, const ASN1T_IMP_NameConstraints* pvalue);

EXTERN int asn1PrtToStrm_IMP_NameConstraints (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_NameConstraints* pvalue);

EXTERN ASN1T_IMP_NameConstraints* 
   new_ASN1T_IMP_NameConstraints (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_NameConstraints (const char* name, 
   ASN1T_IMP_NameConstraints* pValue, ASN1T_IMP_NameConstraints* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_NameConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_NameConstraints* pSrcValue, ASN1T_IMP_NameConstraints* pDstValue);

EXTERN void asn1Init_IMP_NameConstraints (ASN1T_IMP_NameConstraints* pvalue);

EXTERN void asn1Free_IMP_NameConstraints (OSCTXT *pctxt, 
   ASN1T_IMP_NameConstraints* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyConstraints                                         */
/*                                                            */
/**************************************************************/
/*
PolicyConstraints ::= SEQUENCE {
   requireExplicitPolicy [0] SkipCerts OPTIONAL,
   inhibitPolicyMapping [1] SkipCerts OPTIONAL
}
*/
#define TV_IMP_PolicyConstraints	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_PolicyConstraints;

struct EXTERN ASN1T_IMP_PolicyConstraints : public ASN1TPDU {
   struct {
      unsigned requireExplicitPolicyPresent : 1;
      unsigned inhibitPolicyMappingPresent : 1;
   } m;
   ASN1T_IMP_SkipCerts requireExplicitPolicy;
   ASN1T_IMP_SkipCerts inhibitPolicyMapping;
   ASN1T_IMP_PolicyConstraints ();
   ASN1T_IMP_PolicyConstraints (ASN1C_IMP_PolicyConstraints& srcData);
} ;

class EXTERN ASN1C_IMP_PolicyConstraints :
public ASN1CType
{
protected:
   ASN1T_IMP_PolicyConstraints& msgData;
public:
   ASN1C_IMP_PolicyConstraints (ASN1T_IMP_PolicyConstraints& data);
   ASN1C_IMP_PolicyConstraints (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_PolicyConstraints& data);
   ASN1C_IMP_PolicyConstraints (OSRTContext &context
      , ASN1T_IMP_PolicyConstraints& data);
   ASN1C_IMP_PolicyConstraints (ASN1C_IMP_PolicyConstraints& original);
   virtual ~ASN1C_IMP_PolicyConstraints () {}
   inline ASN1T_IMP_PolicyConstraints& getData () { return msgData; }
   inline const ASN1T_IMP_PolicyConstraints& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PolicyConstraints");
   int toStream (const char* name = "PolicyConstraints");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_PolicyConstraints* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_PolicyConstraints& getCopy (ASN1T_IMP_PolicyConstraints* pDstData = 0);
   ASN1T_IMP_PolicyConstraints* newCopy ();

   inline ASN1C_IMP_PolicyConstraints& operator= (ASN1C_IMP_PolicyConstraints& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_PolicyConstraints (OSCTXT* pctxt,
   ASN1T_IMP_PolicyConstraints *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_PolicyConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyConstraints* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_PolicyConstraints 
   (const char* name, const ASN1T_IMP_PolicyConstraints* pvalue);

EXTERN int asn1PrtToStrm_IMP_PolicyConstraints (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_PolicyConstraints* pvalue);

EXTERN ASN1T_IMP_PolicyConstraints* 
   new_ASN1T_IMP_PolicyConstraints (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_PolicyConstraints (const char* name, 
   ASN1T_IMP_PolicyConstraints* pValue, 
   ASN1T_IMP_PolicyConstraints* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_PolicyConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyConstraints* pSrcValue, ASN1T_IMP_PolicyConstraints*
    pDstValue);

EXTERN void asn1Init_IMP_PolicyConstraints (ASN1T_IMP_PolicyConstraints* pvalue);

/**************************************************************/
/*                                                            */
/*  IssuingDistributionPoint                                  */
/*                                                            */
/**************************************************************/
/*
IssuingDistributionPoint ::= SEQUENCE {
   distributionPoint [0] DistributionPointName OPTIONAL,
   onlyContainsUserCerts [1] BOOLEAN DEFAULT FALSE,
   onlyContainsCACerts [2] BOOLEAN DEFAULT FALSE,
   onlySomeReasons [3] ReasonFlags OPTIONAL,
   indirectCRL [4] BOOLEAN DEFAULT FALSE,
   onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE
}
*/
#define TV_IMP_IssuingDistributionPoint	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_IMP_IssuingDistributionPoint;

struct EXTERN ASN1T_IMP_IssuingDistributionPoint : public ASN1TPDU {
   struct {
      unsigned distributionPointPresent : 1;
      unsigned onlySomeReasonsPresent : 1;
   } m;
   ASN1T_IMP_DistributionPointName distributionPoint;
   OSBOOL onlyContainsUserCerts;
   OSBOOL onlyContainsCACerts;
   ASN1T_IMP_ReasonFlags onlySomeReasons;
   OSBOOL indirectCRL;
   OSBOOL onlyContainsAttributeCerts;
   ASN1T_IMP_IssuingDistributionPoint ();
   ASN1T_IMP_IssuingDistributionPoint (ASN1C_IMP_IssuingDistributionPoint& srcData);
   ~ASN1T_IMP_IssuingDistributionPoint ();
} ;

class EXTERN ASN1C_IMP_IssuingDistributionPoint :
public ASN1CType
{
protected:
   ASN1T_IMP_IssuingDistributionPoint& msgData;
public:
   ASN1C_IMP_IssuingDistributionPoint
       (ASN1T_IMP_IssuingDistributionPoint& data);
   ASN1C_IMP_IssuingDistributionPoint (OSRTMessageBufferIF& msgBuf
      , ASN1T_IMP_IssuingDistributionPoint& data);
   ASN1C_IMP_IssuingDistributionPoint (OSRTContext &context
      , ASN1T_IMP_IssuingDistributionPoint& data);
   ASN1C_IMP_IssuingDistributionPoint (ASN1C_IMP_IssuingDistributionPoint& original);
   virtual ~ASN1C_IMP_IssuingDistributionPoint () {}
   inline ASN1T_IMP_IssuingDistributionPoint& getData () { return msgData; }
   inline const ASN1T_IMP_IssuingDistributionPoint& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "IssuingDistributionPoint");
   int toStream (const char* name = "IssuingDistributionPoint");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_IMP_IssuingDistributionPoint* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_IMP_IssuingDistributionPoint& getCopy (ASN1T_IMP_IssuingDistributionPoint* pDstData = 0);
   ASN1T_IMP_IssuingDistributionPoint* newCopy ();

   inline ASN1C_IMP_IssuingDistributionPoint& operator= (ASN1C_IMP_IssuingDistributionPoint& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_IMP_IssuingDistributionPoint (OSCTXT* pctxt,
   ASN1T_IMP_IssuingDistributionPoint *pvalue, ASN1TagType tagging);

EXTERN int asn1D_IMP_IssuingDistributionPoint (OSCTXT* pctxt, 
   ASN1T_IMP_IssuingDistributionPoint* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_IMP_IssuingDistributionPoint 
   (const char* name, const ASN1T_IMP_IssuingDistributionPoint* pvalue);

EXTERN int asn1PrtToStrm_IMP_IssuingDistributionPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_IMP_IssuingDistributionPoint* pvalue);

EXTERN ASN1T_IMP_IssuingDistributionPoint* 
   new_ASN1T_IMP_IssuingDistributionPoint (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_IMP_IssuingDistributionPoint (const char* name, 
   ASN1T_IMP_IssuingDistributionPoint* pValue, 
   ASN1T_IMP_IssuingDistributionPoint* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_IMP_IssuingDistributionPoint (OSCTXT* pctxt, 
   ASN1T_IMP_IssuingDistributionPoint* pSrcValue, 
   ASN1T_IMP_IssuingDistributionPoint* pDstValue);

EXTERN void asn1Init_IMP_IssuingDistributionPoint (
   ASN1T_IMP_IssuingDistributionPoint* pvalue);

EXTERN void asn1Free_IMP_IssuingDistributionPoint (OSCTXT *pctxt, 
   ASN1T_IMP_IssuingDistributionPoint* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID IMP_id_ce_subjectAltName;
extern EXTERN ASN1OBJID IMP_id_ce;
extern EXTERN ASN1OBJID IMP_id_ce_authorityKeyIdentifier;
extern EXTERN ASN1OBJID IMP_id_ce_subjectKeyIdentifier;
extern EXTERN ASN1OBJID IMP_id_ce_keyUsage;
extern EXTERN ASN1OBJID IMP_id_ce_certificatePolicies;
extern EXTERN ASN1OBJID IMP_anyPolicy;
extern EXTERN ASN1OBJID IMP_id_ce_policyMappings;
extern EXTERN ASN1OBJID IMP_id_ce_basicConstraints;
extern EXTERN ASN1OBJID IMP_id_ce_extKeyUsage;
extern EXTERN ASN1OBJID IMP_anyExtendedKeyUsage;
extern EXTERN ASN1OBJID IMP_id_kp_serverAuth;
extern EXTERN ASN1OBJID IMP_id_kp_clientAuth;
extern EXTERN ASN1OBJID IMP_id_kp_codeSigning;
extern EXTERN ASN1OBJID IMP_id_kp_emailProtection;
extern EXTERN ASN1OBJID IMP_id_kp_ipsecEndSystem;
extern EXTERN ASN1OBJID IMP_id_kp_ipsecTunnel;
extern EXTERN ASN1OBJID IMP_id_kp_ipsecUser;
extern EXTERN ASN1OBJID IMP_id_kp_timeStamping;
extern EXTERN ASN1OBJID IMP_id_kp_OCSPSigning;
extern EXTERN ASN1OBJID IMP_id_kp_dvcs;
extern EXTERN ASN1OBJID IMP_id_ce_cRLDistributionPoints;
extern EXTERN ASN1OBJID IMP_id_pe_authorityInfoAccess;
extern EXTERN ASN1OBJID IMP_id_pe_subjectInfoAccess;
extern EXTERN ASN1OBJID IMP_id_ce_cRLNumber;
extern EXTERN ASN1OBJID IMP_id_ce_cRLReasons;
extern EXTERN ASN1OBJID IMP_id_ce_subjectDirectoryAttributes;
extern EXTERN ASN1OBJID IMP_id_at_role;
extern EXTERN ASN1OBJID IMP_id_win_certTemplate;
extern EXTERN ASN1OBJID IMP_id_ms_smartCardLogon;
extern EXTERN ASN1OBJID IMP_id_win_upn;
extern EXTERN ASN1OBJID IMP_id_win_otherNameforDC;
extern EXTERN ASN1OBJID IMP_id_ce_nameConstraints;
extern EXTERN ASN1OBJID IMP_id_ce_policyConstraints;
extern EXTERN ASN1OBJID IMP_id_ce_inhibitAnyPolicy;
extern EXTERN ASN1OBJID IMP_id_ce_freshestCRL;
extern EXTERN ASN1OBJID IMP_id_ce_deltaCRLIndicator;
extern EXTERN ASN1OBJID IMP_id_ce_issuingDistributionPoint;
extern EXTERN ASN1OBJID IMP_id_ce_issuerAltName;
extern EXTERN ASN1OBJID IMP_id_ce_holdInstructionCode;
extern EXTERN ASN1OBJID IMP_holdInstruction;
extern EXTERN ASN1OBJID IMP_id_holdinstruction_none;
extern EXTERN ASN1OBJID IMP_id_holdinstruction_callissuer;
extern EXTERN ASN1OBJID IMP_id_holdinstruction_reject;
extern EXTERN ASN1OBJID IMP_id_ce_invalidityDate;
extern EXTERN ASN1OBJID IMP_id_ce_certificateIssuer;

#endif
