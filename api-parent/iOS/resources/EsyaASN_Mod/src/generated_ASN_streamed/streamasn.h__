/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.84, Date: 22-Dec-2006.
 */
#ifndef STREAMASN_H
#define STREAMASN_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "ASN1BERInputStream.h"
#include "ASN1BEROutputStream.h"
#include "rtPrintStream.h"
#include "asn1BerCPPTypes.h"


/**************************************************************/
/*                                                            */
/*  ID                                                        */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_ID;

class EXTERN ASN1C_ID :
   public ASN1CType
{
protected:
   ASN1T_ID& msgData;
public:
   ASN1C_ID (ASN1T_ID& data);
   ASN1C_ID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ID& data);
   ASN1C_ID (ASN1C_ID& original);

   inline ASN1T_ID& getData () { return msgData; }
   inline const ASN1T_ID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ID& getCopy (ASN1T_ID* pDstData = 0);
   ASN1T_ID* newCopy ();

   inline ASN1C_ID& operator= (ASN1C_ID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ID (ASN1CTXT* pctxt,
   ASN1T_ID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ID
   (const char* name, ASN1T_ID* pvalue);

EXTERN int asn1PrtToStrm_ID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ID* pvalue);

EXTERN OSBOOL asn1Compare_ID (ASN1ConstCharPtr name, ASN1T_ID* pValue, ASN1T_ID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ID (ASN1CTXT *pctxt, ASN1T_ID* pSrcValue, ASN1T_ID* pDstValue);

/* Value definitions */

extern EXTERN ASN1OBJID ds;
extern EXTERN ASN1OBJID module;
extern EXTERN ASN1OBJID serviceElement;
extern EXTERN ASN1OBJID applicationContext;
extern EXTERN ASN1OBJID attributeType;
extern EXTERN ASN1OBJID attributeSyntax;
extern EXTERN ASN1OBJID objectClass;
extern EXTERN ASN1OBJID algorithm;
extern EXTERN ASN1OBJID abstractSyntax;
extern EXTERN ASN1OBJID dsaOperationalAttribute;
extern EXTERN ASN1OBJID matchingRule;
extern EXTERN ASN1OBJID knowledgeMatchingRule;
extern EXTERN ASN1OBJID nameForm;
extern EXTERN ASN1OBJID group;
extern EXTERN ASN1OBJID subentry;
extern EXTERN ASN1OBJID operationalAttributeType;
extern EXTERN ASN1OBJID operationalBinding;
extern EXTERN ASN1OBJID schemaObjectClass;
extern EXTERN ASN1OBJID schemaOperationalAttribute;
extern EXTERN ASN1OBJID administrativeRoles;
extern EXTERN ASN1OBJID accessControlAttribute;
extern EXTERN ASN1OBJID rosObject;
extern EXTERN ASN1OBJID contract;
extern EXTERN ASN1OBJID package_;
extern EXTERN ASN1OBJID accessControlSchemes;
extern EXTERN ASN1OBJID certificateExtension;
extern EXTERN ASN1OBJID managementObject;
extern EXTERN ASN1OBJID attributeValueContext;
extern EXTERN ASN1OBJID securityExchange;
extern EXTERN ASN1OBJID idmProtocol;
extern EXTERN ASN1OBJID problem;
extern EXTERN ASN1OBJID notification;
extern EXTERN ASN1OBJID matchingRestriction;
extern EXTERN ASN1OBJID controlAttributeType;
extern EXTERN ASN1OBJID usefulDefinitions;
extern EXTERN ASN1OBJID informationFramework;
extern EXTERN ASN1OBJID directoryAbstractService;
extern EXTERN ASN1OBJID distributedOperations;
extern EXTERN ASN1OBJID protocolObjectIdentifiers;
extern EXTERN ASN1OBJID selectedAttributeTypes;
extern EXTERN ASN1OBJID selectedObjectClasses;
extern EXTERN ASN1OBJID authenticationFramework;
extern EXTERN ASN1OBJID algorithmObjectIdentifiers;
extern EXTERN ASN1OBJID directoryObjectIdentifiers;
extern EXTERN ASN1OBJID upperBounds;
extern EXTERN ASN1OBJID dap;
extern EXTERN ASN1OBJID dsp;
extern EXTERN ASN1OBJID distributedDirectoryOIDs;
extern EXTERN ASN1OBJID directoryShadowOIDs;
extern EXTERN ASN1OBJID directoryShadowAbstractService;
extern EXTERN ASN1OBJID disp;
extern EXTERN ASN1OBJID dop;
extern EXTERN ASN1OBJID opBindingManagement;
extern EXTERN ASN1OBJID opBindingOIDs;
extern EXTERN ASN1OBJID hierarchicalOperationalBindings;
extern EXTERN ASN1OBJID dsaOperationalAttributeTypes;
extern EXTERN ASN1OBJID schemaAdministration;
extern EXTERN ASN1OBJID basicAccessControl;
extern EXTERN ASN1OBJID directoryOperationalBindingTypes;
extern EXTERN ASN1OBJID certificateExtensions;
extern EXTERN ASN1OBJID directoryManagement;
extern EXTERN ASN1OBJID enhancedSecurity;
extern EXTERN ASN1OBJID directorySecurityExchanges;
extern EXTERN ASN1OBJID iDMProtocolSpecification;
extern EXTERN ASN1OBJID directoryIDMProtocols;
extern EXTERN ASN1T_ID id_oc;
extern EXTERN ASN1T_ID id_at;
extern EXTERN ASN1T_ID id_as;
extern EXTERN ASN1T_ID id_mr;
extern EXTERN ASN1T_ID id_nf;
extern EXTERN ASN1T_ID id_sc;
extern EXTERN ASN1T_ID id_oa;
extern EXTERN ASN1T_ID id_ob;
extern EXTERN ASN1T_ID id_doa;
extern EXTERN ASN1T_ID id_kmr;
extern EXTERN ASN1T_ID id_soc;
extern EXTERN ASN1T_ID id_soa;
extern EXTERN ASN1T_ID id_ar;
extern EXTERN ASN1T_ID id_aca;
extern EXTERN ASN1T_ID id_ac;
extern EXTERN ASN1T_ID id_rosObject;
extern EXTERN ASN1T_ID id_contract;
extern EXTERN ASN1T_ID id_package;
extern EXTERN ASN1T_ID id_acScheme;
extern EXTERN ASN1T_ID id_ce;
extern EXTERN ASN1T_ID id_mgt;
extern EXTERN ASN1T_ID id_idm;
extern EXTERN ASN1T_ID id_avc;
extern EXTERN ASN1T_ID id_se;
extern EXTERN ASN1T_ID id_pr;
extern EXTERN ASN1T_ID id_not;
extern EXTERN ASN1T_ID id_mre;
extern EXTERN ASN1T_ID id_cat;

#include "ASN1CBitStr.h"
#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  Version                                                   */
/*                                                            */
/**************************************************************/

struct EXTERN EXPStream_Version {
   enum Root {
      v1 = 0,
      v2 = 1,
      v3 = 2
   } ;
} ;

typedef OSUINT32 ASN1T_EXPStream_Version;

class EXTERN ASN1C_EXPStream_Version :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_Version& msgData;
public:
   ASN1C_EXPStream_Version (ASN1T_EXPStream_Version& data);
   ASN1C_EXPStream_Version (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_Version& data);
   ASN1C_EXPStream_Version (ASN1C_EXPStream_Version& original);

   inline ASN1T_EXPStream_Version& getData () { return msgData; }
   inline const ASN1T_EXPStream_Version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_Version* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_Version& getCopy (ASN1T_EXPStream_Version* pDstData = 0);
   ASN1T_EXPStream_Version* newCopy ();

   inline ASN1C_EXPStream_Version& operator= (ASN1C_EXPStream_Version& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_Version (ASN1CTXT* pctxt,
   ASN1T_EXPStream_Version *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_Version
   (const char* name, ASN1T_EXPStream_Version* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_Version
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_Version* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_Version (ASN1ConstCharPtr name, ASN1T_EXPStream_Version* pValue, ASN1T_EXPStream_Version* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_Version (ASN1CTXT *pctxt, ASN1T_EXPStream_Version* pSrcValue, ASN1T_EXPStream_Version* pDstValue);

/**************************************************************/
/*                                                            */
/*  CertificateSerialNumber                                   */
/*                                                            */
/**************************************************************/

typedef ASN1ConstCharPtr ASN1T_EXPStream_CertificateSerialNumber;

class EXTERN ASN1C_EXPStream_CertificateSerialNumber :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_CertificateSerialNumber& msgData;
public:
   ASN1C_EXPStream_CertificateSerialNumber (ASN1T_EXPStream_CertificateSerialNumber& data);
   ASN1C_EXPStream_CertificateSerialNumber (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_CertificateSerialNumber& data);
   ASN1C_EXPStream_CertificateSerialNumber (ASN1C_EXPStream_CertificateSerialNumber& original);

   inline ASN1T_EXPStream_CertificateSerialNumber& getData () { return msgData; }
   inline const ASN1T_EXPStream_CertificateSerialNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_CertificateSerialNumber* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_CertificateSerialNumber& getCopy (ASN1T_EXPStream_CertificateSerialNumber* pDstData = 0);
   ASN1T_EXPStream_CertificateSerialNumber* newCopy ();

   inline ASN1C_EXPStream_CertificateSerialNumber& operator= (ASN1C_EXPStream_CertificateSerialNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_CertificateSerialNumber (ASN1CTXT* pctxt,
   ASN1T_EXPStream_CertificateSerialNumber *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_CertificateSerialNumber
   (const char* name, ASN1T_EXPStream_CertificateSerialNumber* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_CertificateSerialNumber
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_CertificateSerialNumber* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_CertificateSerialNumber (ASN1ConstCharPtr name, ASN1T_EXPStream_CertificateSerialNumber* pValue, ASN1T_EXPStream_CertificateSerialNumber* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_CertificateSerialNumber (ASN1CTXT *pctxt, ASN1T_EXPStream_CertificateSerialNumber* pSrcValue, ASN1T_EXPStream_CertificateSerialNumber* pDstValue);

/**************************************************************/
/*                                                            */
/*  AttributeType                                             */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_EXPStream_AttributeType;

class EXTERN ASN1C_EXPStream_AttributeType :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_AttributeType& msgData;
public:
   ASN1C_EXPStream_AttributeType (ASN1T_EXPStream_AttributeType& data);
   ASN1C_EXPStream_AttributeType (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_AttributeType& data);
   ASN1C_EXPStream_AttributeType (ASN1C_EXPStream_AttributeType& original);

   inline ASN1T_EXPStream_AttributeType& getData () { return msgData; }
   inline const ASN1T_EXPStream_AttributeType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_AttributeType* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_AttributeType& getCopy (ASN1T_EXPStream_AttributeType* pDstData = 0);
   ASN1T_EXPStream_AttributeType* newCopy ();

   inline ASN1C_EXPStream_AttributeType& operator= (ASN1C_EXPStream_AttributeType& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_AttributeType (ASN1CTXT* pctxt,
   ASN1T_EXPStream_AttributeType *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_AttributeType
   (const char* name, ASN1T_EXPStream_AttributeType* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_AttributeType
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_AttributeType* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_AttributeType (ASN1ConstCharPtr name, ASN1T_EXPStream_AttributeType* pValue, ASN1T_EXPStream_AttributeType* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_AttributeType (ASN1CTXT *pctxt, ASN1T_EXPStream_AttributeType* pSrcValue, ASN1T_EXPStream_AttributeType* pDstValue);

/**************************************************************/
/*                                                            */
/*  AttributeValue                                            */
/*                                                            */
/**************************************************************/

typedef ASN1TOpenType ASN1T_EXPStream_AttributeValue;

class EXTERN ASN1C_EXPStream_AttributeValue :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_AttributeValue& msgData;
public:
   ASN1C_EXPStream_AttributeValue (ASN1T_EXPStream_AttributeValue& data);
   ASN1C_EXPStream_AttributeValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_AttributeValue& data);
   ASN1C_EXPStream_AttributeValue (ASN1C_EXPStream_AttributeValue& original);

   inline ASN1T_EXPStream_AttributeValue& getData () { return msgData; }
   inline const ASN1T_EXPStream_AttributeValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_AttributeValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_AttributeValue& getCopy (ASN1T_EXPStream_AttributeValue* pDstData = 0);
   ASN1T_EXPStream_AttributeValue* newCopy ();

   inline ASN1C_EXPStream_AttributeValue& operator= (ASN1C_EXPStream_AttributeValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_AttributeValue (ASN1CTXT* pctxt,
   ASN1T_EXPStream_AttributeValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_AttributeValue
   (const char* name, ASN1T_EXPStream_AttributeValue* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_AttributeValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_AttributeValue* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_AttributeValue (ASN1ConstCharPtr name, ASN1T_EXPStream_AttributeValue* pValue, ASN1T_EXPStream_AttributeValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_AttributeValue (ASN1CTXT *pctxt, ASN1T_EXPStream_AttributeValue* pSrcValue, ASN1T_EXPStream_AttributeValue* pDstValue);

EXTERN void asn1Free_EXPStream_AttributeValue
   (ASN1CTXT *pctxt, ASN1T_EXPStream_AttributeValue* pvalue);

/**************************************************************/
/*                                                            */
/*  UniqueIdentifier                                          */
/*                                                            */
/**************************************************************/

typedef ASN1TDynBitStr ASN1T_EXPStream_UniqueIdentifier;

class EXTERN ASN1C_EXPStream_UniqueIdentifier :
   public ASN1CBitStr
{
protected:
   ASN1T_EXPStream_UniqueIdentifier& msgData;
public:
   ASN1C_EXPStream_UniqueIdentifier (ASN1T_EXPStream_UniqueIdentifier& data);
   ASN1C_EXPStream_UniqueIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_UniqueIdentifier& data);
   ASN1C_EXPStream_UniqueIdentifier (ASN1C_EXPStream_UniqueIdentifier& original);

   inline ASN1T_EXPStream_UniqueIdentifier& getData () { return msgData; }
   inline const ASN1T_EXPStream_UniqueIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_UniqueIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_UniqueIdentifier& getCopy (ASN1T_EXPStream_UniqueIdentifier* pDstData = 0);
   ASN1T_EXPStream_UniqueIdentifier* newCopy ();

   ASN1C_EXPStream_UniqueIdentifier& operator= (ASN1C_EXPStream_UniqueIdentifier& srcData);
} ;

EXTERN int asn1BSD_EXPStream_UniqueIdentifier (ASN1CTXT* pctxt,
   ASN1T_EXPStream_UniqueIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_UniqueIdentifier
   (const char* name, ASN1T_EXPStream_UniqueIdentifier* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_UniqueIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_UniqueIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_UniqueIdentifier (ASN1ConstCharPtr name, ASN1T_EXPStream_UniqueIdentifier* pValue, ASN1T_EXPStream_UniqueIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_UniqueIdentifier (ASN1CTXT *pctxt, ASN1T_EXPStream_UniqueIdentifier* pSrcValue, ASN1T_EXPStream_UniqueIdentifier* pDstValue);

EXTERN void asn1Free_EXPStream_UniqueIdentifier
   (ASN1CTXT *pctxt, ASN1T_EXPStream_UniqueIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  X121Address                                               */
/*                                                            */
/**************************************************************/

typedef ASN1NumericString ASN1T_EXPStream_X121Address;

class EXTERN ASN1C_EXPStream_X121Address :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X121Address& msgData;
public:
   ASN1C_EXPStream_X121Address (ASN1T_EXPStream_X121Address& data);
   ASN1C_EXPStream_X121Address (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X121Address& data);
   ASN1C_EXPStream_X121Address (ASN1C_EXPStream_X121Address& original);

   inline ASN1T_EXPStream_X121Address& getData () { return msgData; }
   inline const ASN1T_EXPStream_X121Address& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X121Address* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X121Address& getCopy (ASN1T_EXPStream_X121Address* pDstData = 0);
   ASN1T_EXPStream_X121Address* newCopy ();

   inline ASN1C_EXPStream_X121Address& operator= (ASN1C_EXPStream_X121Address& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X121Address (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X121Address *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X121Address
   (const char* name, ASN1T_EXPStream_X121Address* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X121Address
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X121Address* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X121Address (ASN1ConstCharPtr name, ASN1T_EXPStream_X121Address* pValue, ASN1T_EXPStream_X121Address* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X121Address (ASN1CTXT *pctxt, ASN1T_EXPStream_X121Address* pSrcValue, ASN1T_EXPStream_X121Address* pDstValue);

EXTERN void asn1Free_EXPStream_X121Address
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X121Address* pvalue);

/**************************************************************/
/*                                                            */
/*  NetworkAddress                                            */
/*                                                            */
/**************************************************************/

typedef ASN1T_EXPStream_X121Address ASN1T_EXPStream_NetworkAddress;

class EXTERN ASN1C_EXPStream_NetworkAddress :
   public ASN1C_EXPStream_X121Address
{
protected:
public:
   ASN1C_EXPStream_NetworkAddress (ASN1T_EXPStream_NetworkAddress& data);
   ASN1C_EXPStream_NetworkAddress (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_NetworkAddress& data);
   ASN1C_EXPStream_NetworkAddress (ASN1C_EXPStream_NetworkAddress& original);

   inline ASN1T_EXPStream_NetworkAddress& getData () { return msgData; }
   inline const ASN1T_EXPStream_NetworkAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_NetworkAddress* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_NetworkAddress& getCopy (ASN1T_EXPStream_NetworkAddress* pDstData = 0);
   ASN1T_EXPStream_NetworkAddress* newCopy ();

   inline ASN1C_EXPStream_NetworkAddress& operator= (ASN1C_EXPStream_NetworkAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_NetworkAddress (ASN1CTXT* pctxt,
   ASN1T_EXPStream_NetworkAddress *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_NetworkAddress
   (const char* name, ASN1T_EXPStream_NetworkAddress* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_NetworkAddress
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_NetworkAddress* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_NetworkAddress (ASN1ConstCharPtr name, ASN1T_EXPStream_NetworkAddress* pValue, ASN1T_EXPStream_NetworkAddress* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_NetworkAddress (ASN1CTXT *pctxt, ASN1T_EXPStream_NetworkAddress* pSrcValue, ASN1T_EXPStream_NetworkAddress* pDstValue);

EXTERN void asn1Free_EXPStream_NetworkAddress
   (ASN1CTXT *pctxt, ASN1T_EXPStream_NetworkAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  TerminalIdentifier                                        */
/*                                                            */
/**************************************************************/

typedef ASN1PrintableString ASN1T_EXPStream_TerminalIdentifier;

class EXTERN ASN1C_EXPStream_TerminalIdentifier :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_TerminalIdentifier& msgData;
public:
   ASN1C_EXPStream_TerminalIdentifier (ASN1T_EXPStream_TerminalIdentifier& data);
   ASN1C_EXPStream_TerminalIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_TerminalIdentifier& data);
   ASN1C_EXPStream_TerminalIdentifier (ASN1C_EXPStream_TerminalIdentifier& original);

   inline ASN1T_EXPStream_TerminalIdentifier& getData () { return msgData; }
   inline const ASN1T_EXPStream_TerminalIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_TerminalIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_TerminalIdentifier& getCopy (ASN1T_EXPStream_TerminalIdentifier* pDstData = 0);
   ASN1T_EXPStream_TerminalIdentifier* newCopy ();

   inline ASN1C_EXPStream_TerminalIdentifier& operator= (ASN1C_EXPStream_TerminalIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_TerminalIdentifier (ASN1CTXT* pctxt,
   ASN1T_EXPStream_TerminalIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_TerminalIdentifier
   (const char* name, ASN1T_EXPStream_TerminalIdentifier* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_TerminalIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_TerminalIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_TerminalIdentifier (ASN1ConstCharPtr name, ASN1T_EXPStream_TerminalIdentifier* pValue, ASN1T_EXPStream_TerminalIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_TerminalIdentifier (ASN1CTXT *pctxt, ASN1T_EXPStream_TerminalIdentifier* pSrcValue, ASN1T_EXPStream_TerminalIdentifier* pDstValue);

EXTERN void asn1Free_EXPStream_TerminalIdentifier
   (ASN1CTXT *pctxt, ASN1T_EXPStream_TerminalIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  OrganizationName                                          */
/*                                                            */
/**************************************************************/

typedef ASN1PrintableString ASN1T_EXPStream_OrganizationName;

class EXTERN ASN1C_EXPStream_OrganizationName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_OrganizationName& msgData;
public:
   ASN1C_EXPStream_OrganizationName (ASN1T_EXPStream_OrganizationName& data);
   ASN1C_EXPStream_OrganizationName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_OrganizationName& data);
   ASN1C_EXPStream_OrganizationName (ASN1C_EXPStream_OrganizationName& original);

   inline ASN1T_EXPStream_OrganizationName& getData () { return msgData; }
   inline const ASN1T_EXPStream_OrganizationName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_OrganizationName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_OrganizationName& getCopy (ASN1T_EXPStream_OrganizationName* pDstData = 0);
   ASN1T_EXPStream_OrganizationName* newCopy ();

   inline ASN1C_EXPStream_OrganizationName& operator= (ASN1C_EXPStream_OrganizationName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_OrganizationName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_OrganizationName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_OrganizationName
   (const char* name, ASN1T_EXPStream_OrganizationName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_OrganizationName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_OrganizationName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_OrganizationName (ASN1ConstCharPtr name, ASN1T_EXPStream_OrganizationName* pValue, ASN1T_EXPStream_OrganizationName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_OrganizationName (ASN1CTXT *pctxt, ASN1T_EXPStream_OrganizationName* pSrcValue, ASN1T_EXPStream_OrganizationName* pDstValue);

EXTERN void asn1Free_EXPStream_OrganizationName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_OrganizationName* pvalue);

/**************************************************************/
/*                                                            */
/*  NumericUserIdentifier                                     */
/*                                                            */
/**************************************************************/

typedef ASN1NumericString ASN1T_EXPStream_NumericUserIdentifier;

class EXTERN ASN1C_EXPStream_NumericUserIdentifier :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_NumericUserIdentifier& msgData;
public:
   ASN1C_EXPStream_NumericUserIdentifier (ASN1T_EXPStream_NumericUserIdentifier& data);
   ASN1C_EXPStream_NumericUserIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_NumericUserIdentifier& data);
   ASN1C_EXPStream_NumericUserIdentifier (ASN1C_EXPStream_NumericUserIdentifier& original);

   inline ASN1T_EXPStream_NumericUserIdentifier& getData () { return msgData; }
   inline const ASN1T_EXPStream_NumericUserIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_NumericUserIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_NumericUserIdentifier& getCopy (ASN1T_EXPStream_NumericUserIdentifier* pDstData = 0);
   ASN1T_EXPStream_NumericUserIdentifier* newCopy ();

   inline ASN1C_EXPStream_NumericUserIdentifier& operator= (ASN1C_EXPStream_NumericUserIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_NumericUserIdentifier (ASN1CTXT* pctxt,
   ASN1T_EXPStream_NumericUserIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_NumericUserIdentifier
   (const char* name, ASN1T_EXPStream_NumericUserIdentifier* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_NumericUserIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_NumericUserIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_NumericUserIdentifier (ASN1ConstCharPtr name, ASN1T_EXPStream_NumericUserIdentifier* pValue, ASN1T_EXPStream_NumericUserIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_NumericUserIdentifier (ASN1CTXT *pctxt, ASN1T_EXPStream_NumericUserIdentifier* pSrcValue, ASN1T_EXPStream_NumericUserIdentifier* pDstValue);

EXTERN void asn1Free_EXPStream_NumericUserIdentifier
   (ASN1CTXT *pctxt, ASN1T_EXPStream_NumericUserIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  OrganizationalUnitName                                    */
/*                                                            */
/**************************************************************/

typedef ASN1PrintableString ASN1T_EXPStream_OrganizationalUnitName;

class EXTERN ASN1C_EXPStream_OrganizationalUnitName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_OrganizationalUnitName& msgData;
public:
   ASN1C_EXPStream_OrganizationalUnitName (ASN1T_EXPStream_OrganizationalUnitName& data);
   ASN1C_EXPStream_OrganizationalUnitName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_OrganizationalUnitName& data);
   ASN1C_EXPStream_OrganizationalUnitName (ASN1C_EXPStream_OrganizationalUnitName& original);

   inline ASN1T_EXPStream_OrganizationalUnitName& getData () { return msgData; }
   inline const ASN1T_EXPStream_OrganizationalUnitName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_OrganizationalUnitName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_OrganizationalUnitName& getCopy (ASN1T_EXPStream_OrganizationalUnitName* pDstData = 0);
   ASN1T_EXPStream_OrganizationalUnitName* newCopy ();

   inline ASN1C_EXPStream_OrganizationalUnitName& operator= (ASN1C_EXPStream_OrganizationalUnitName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_OrganizationalUnitName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_OrganizationalUnitName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_OrganizationalUnitName
   (const char* name, ASN1T_EXPStream_OrganizationalUnitName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_OrganizationalUnitName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_OrganizationalUnitName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_OrganizationalUnitName (ASN1ConstCharPtr name, ASN1T_EXPStream_OrganizationalUnitName* pValue, ASN1T_EXPStream_OrganizationalUnitName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_OrganizationalUnitName (ASN1CTXT *pctxt, ASN1T_EXPStream_OrganizationalUnitName* pSrcValue, ASN1T_EXPStream_OrganizationalUnitName* pDstValue);

EXTERN void asn1Free_EXPStream_OrganizationalUnitName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_OrganizationalUnitName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520countryName                                           */
/*                                                            */
/**************************************************************/

typedef ASN1PrintableString ASN1T_EXPStream_X520countryName;

class EXTERN ASN1C_EXPStream_X520countryName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520countryName& msgData;
public:
   ASN1C_EXPStream_X520countryName (ASN1T_EXPStream_X520countryName& data);
   ASN1C_EXPStream_X520countryName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520countryName& data);
   ASN1C_EXPStream_X520countryName (ASN1C_EXPStream_X520countryName& original);

   inline ASN1T_EXPStream_X520countryName& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520countryName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520countryName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520countryName& getCopy (ASN1T_EXPStream_X520countryName* pDstData = 0);
   ASN1T_EXPStream_X520countryName* newCopy ();

   inline ASN1C_EXPStream_X520countryName& operator= (ASN1C_EXPStream_X520countryName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520countryName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520countryName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520countryName
   (const char* name, ASN1T_EXPStream_X520countryName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520countryName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520countryName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520countryName (ASN1ConstCharPtr name, ASN1T_EXPStream_X520countryName* pValue, ASN1T_EXPStream_X520countryName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520countryName (ASN1CTXT *pctxt, ASN1T_EXPStream_X520countryName* pSrcValue, ASN1T_EXPStream_X520countryName* pDstValue);

EXTERN void asn1Free_EXPStream_X520countryName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520countryName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520SerialNumber                                          */
/*                                                            */
/**************************************************************/

typedef ASN1PrintableString ASN1T_EXPStream_X520SerialNumber;

class EXTERN ASN1C_EXPStream_X520SerialNumber :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520SerialNumber& msgData;
public:
   ASN1C_EXPStream_X520SerialNumber (ASN1T_EXPStream_X520SerialNumber& data);
   ASN1C_EXPStream_X520SerialNumber (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520SerialNumber& data);
   ASN1C_EXPStream_X520SerialNumber (ASN1C_EXPStream_X520SerialNumber& original);

   inline ASN1T_EXPStream_X520SerialNumber& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520SerialNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520SerialNumber* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520SerialNumber& getCopy (ASN1T_EXPStream_X520SerialNumber* pDstData = 0);
   ASN1T_EXPStream_X520SerialNumber* newCopy ();

   inline ASN1C_EXPStream_X520SerialNumber& operator= (ASN1C_EXPStream_X520SerialNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520SerialNumber (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520SerialNumber *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520SerialNumber
   (const char* name, ASN1T_EXPStream_X520SerialNumber* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520SerialNumber
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520SerialNumber* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520SerialNumber (ASN1ConstCharPtr name, ASN1T_EXPStream_X520SerialNumber* pValue, ASN1T_EXPStream_X520SerialNumber* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520SerialNumber (ASN1CTXT *pctxt, ASN1T_EXPStream_X520SerialNumber* pSrcValue, ASN1T_EXPStream_X520SerialNumber* pDstValue);

EXTERN void asn1Free_EXPStream_X520SerialNumber
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520SerialNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  DomainComponent                                           */
/*                                                            */
/**************************************************************/

typedef ASN1IA5String ASN1T_EXPStream_DomainComponent;

class EXTERN ASN1C_EXPStream_DomainComponent :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_DomainComponent& msgData;
public:
   ASN1C_EXPStream_DomainComponent (ASN1T_EXPStream_DomainComponent& data);
   ASN1C_EXPStream_DomainComponent (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_DomainComponent& data);
   ASN1C_EXPStream_DomainComponent (ASN1C_EXPStream_DomainComponent& original);

   inline ASN1T_EXPStream_DomainComponent& getData () { return msgData; }
   inline const ASN1T_EXPStream_DomainComponent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_DomainComponent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_DomainComponent& getCopy (ASN1T_EXPStream_DomainComponent* pDstData = 0);
   ASN1T_EXPStream_DomainComponent* newCopy ();

   inline ASN1C_EXPStream_DomainComponent& operator= (ASN1C_EXPStream_DomainComponent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_DomainComponent (ASN1CTXT* pctxt,
   ASN1T_EXPStream_DomainComponent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_DomainComponent
   (const char* name, ASN1T_EXPStream_DomainComponent* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_DomainComponent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_DomainComponent* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_DomainComponent (ASN1ConstCharPtr name, ASN1T_EXPStream_DomainComponent* pValue, ASN1T_EXPStream_DomainComponent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_DomainComponent (ASN1CTXT *pctxt, ASN1T_EXPStream_DomainComponent* pSrcValue, ASN1T_EXPStream_DomainComponent* pDstValue);

EXTERN void asn1Free_EXPStream_DomainComponent
   (ASN1CTXT *pctxt, ASN1T_EXPStream_DomainComponent* pvalue);

/**************************************************************/
/*                                                            */
/*  EmailAddress                                              */
/*                                                            */
/**************************************************************/

typedef ASN1IA5String ASN1T_EXPStream_EmailAddress;

class EXTERN ASN1C_EXPStream_EmailAddress :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_EmailAddress& msgData;
public:
   ASN1C_EXPStream_EmailAddress (ASN1T_EXPStream_EmailAddress& data);
   ASN1C_EXPStream_EmailAddress (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_EmailAddress& data);
   ASN1C_EXPStream_EmailAddress (ASN1C_EXPStream_EmailAddress& original);

   inline ASN1T_EXPStream_EmailAddress& getData () { return msgData; }
   inline const ASN1T_EXPStream_EmailAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_EmailAddress* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_EmailAddress& getCopy (ASN1T_EXPStream_EmailAddress* pDstData = 0);
   ASN1T_EXPStream_EmailAddress* newCopy ();

   inline ASN1C_EXPStream_EmailAddress& operator= (ASN1C_EXPStream_EmailAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_EmailAddress (ASN1CTXT* pctxt,
   ASN1T_EXPStream_EmailAddress *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_EmailAddress
   (const char* name, ASN1T_EXPStream_EmailAddress* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_EmailAddress
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_EmailAddress* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_EmailAddress (ASN1ConstCharPtr name, ASN1T_EXPStream_EmailAddress* pValue, ASN1T_EXPStream_EmailAddress* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_EmailAddress (ASN1CTXT *pctxt, ASN1T_EXPStream_EmailAddress* pSrcValue, ASN1T_EXPStream_EmailAddress* pDstValue);

EXTERN void asn1Free_EXPStream_EmailAddress
   (ASN1CTXT *pctxt, ASN1T_EXPStream_EmailAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  AlgorithmIdentifier                                       */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_AlgorithmIdentifier;

struct EXTERN ASN1T_EXPStream_AlgorithmIdentifier : public ASN1TPDU {
   struct {
      unsigned parametersPresent : 1;
   } m;
   ASN1TObjId algorithm;
   ASN1TOpenType parameters;
   ASN1T_EXPStream_AlgorithmIdentifier ();
   ASN1T_EXPStream_AlgorithmIdentifier (ASN1C_EXPStream_AlgorithmIdentifier& srcData);
   ~ASN1T_EXPStream_AlgorithmIdentifier ();
} ;

class EXTERN ASN1C_EXPStream_AlgorithmIdentifier :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_AlgorithmIdentifier& msgData;
public:
   ASN1C_EXPStream_AlgorithmIdentifier (ASN1T_EXPStream_AlgorithmIdentifier& data);
   ASN1C_EXPStream_AlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_AlgorithmIdentifier& data);
   ASN1C_EXPStream_AlgorithmIdentifier (ASN1C_EXPStream_AlgorithmIdentifier& original);

   inline ASN1T_EXPStream_AlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_EXPStream_AlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_AlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_AlgorithmIdentifier& getCopy (ASN1T_EXPStream_AlgorithmIdentifier* pDstData = 0);
   ASN1T_EXPStream_AlgorithmIdentifier* newCopy ();

   inline ASN1C_EXPStream_AlgorithmIdentifier& operator= (ASN1C_EXPStream_AlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_AlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_EXPStream_AlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_AlgorithmIdentifier
   (const char* name, ASN1T_EXPStream_AlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_AlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_AlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_AlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_EXPStream_AlgorithmIdentifier* pValue, ASN1T_EXPStream_AlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_AlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_EXPStream_AlgorithmIdentifier* pSrcValue, ASN1T_EXPStream_AlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_EXPStream_AlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_EXPStream_AlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeTypeAndValue                                     */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_AttributeTypeAndValue;

struct EXTERN ASN1T_EXPStream_AttributeTypeAndValue : public ASN1TPDU {
   ASN1T_EXPStream_AttributeType type;
   ASN1T_EXPStream_AttributeValue value;
   ASN1T_EXPStream_AttributeTypeAndValue ();
   ASN1T_EXPStream_AttributeTypeAndValue (ASN1C_EXPStream_AttributeTypeAndValue& srcData);
   ~ASN1T_EXPStream_AttributeTypeAndValue ();
} ;

class EXTERN ASN1C_EXPStream_AttributeTypeAndValue :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_AttributeTypeAndValue& msgData;
public:
   ASN1C_EXPStream_AttributeTypeAndValue (ASN1T_EXPStream_AttributeTypeAndValue& data);
   ASN1C_EXPStream_AttributeTypeAndValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_AttributeTypeAndValue& data);
   ASN1C_EXPStream_AttributeTypeAndValue (ASN1C_EXPStream_AttributeTypeAndValue& original);

   inline ASN1T_EXPStream_AttributeTypeAndValue& getData () { return msgData; }
   inline const ASN1T_EXPStream_AttributeTypeAndValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_AttributeTypeAndValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_AttributeTypeAndValue& getCopy (ASN1T_EXPStream_AttributeTypeAndValue* pDstData = 0);
   ASN1T_EXPStream_AttributeTypeAndValue* newCopy ();

   inline ASN1C_EXPStream_AttributeTypeAndValue& operator= (ASN1C_EXPStream_AttributeTypeAndValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_AttributeTypeAndValue (ASN1CTXT* pctxt,
   ASN1T_EXPStream_AttributeTypeAndValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_AttributeTypeAndValue
   (const char* name, ASN1T_EXPStream_AttributeTypeAndValue* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_AttributeTypeAndValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_AttributeTypeAndValue* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_AttributeTypeAndValue (ASN1ConstCharPtr name, ASN1T_EXPStream_AttributeTypeAndValue* pValue, ASN1T_EXPStream_AttributeTypeAndValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_AttributeTypeAndValue (ASN1CTXT *pctxt, ASN1T_EXPStream_AttributeTypeAndValue* pSrcValue, ASN1T_EXPStream_AttributeTypeAndValue* pDstValue);

EXTERN void asn1Free_EXPStream_AttributeTypeAndValue
   (ASN1CTXT *pctxt, ASN1T_EXPStream_AttributeTypeAndValue* pvalue);

/**************************************************************/
/*                                                            */
/*  RelativeDistinguishedName                                 */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_AttributeTypeAndValue */
typedef struct EXTERN ASN1T_EXPStream_RelativeDistinguishedName : public ASN1TPDUSeqOfList {
   ~ASN1T_EXPStream_RelativeDistinguishedName();
} ASN1T_EXPStream_RelativeDistinguishedName;

class EXTERN ASN1C_EXPStream_RelativeDistinguishedName :
   public ASN1CSeqOfList
{
protected:
   ASN1T_EXPStream_RelativeDistinguishedName& msgData;
public:
   ASN1C_EXPStream_RelativeDistinguishedName (ASN1T_EXPStream_RelativeDistinguishedName& data);
   ASN1C_EXPStream_RelativeDistinguishedName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_RelativeDistinguishedName& data);
   ASN1C_EXPStream_RelativeDistinguishedName (ASN1C_EXPStream_RelativeDistinguishedName& original);

   inline ASN1T_EXPStream_RelativeDistinguishedName& getData () { return msgData; }
   inline const ASN1T_EXPStream_RelativeDistinguishedName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_RelativeDistinguishedName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_RelativeDistinguishedName& getCopy (ASN1T_EXPStream_RelativeDistinguishedName* pDstData = 0);
   ASN1T_EXPStream_RelativeDistinguishedName* newCopy ();

   ASN1C_EXPStream_RelativeDistinguishedName& operator= (ASN1C_EXPStream_RelativeDistinguishedName& srcData);
   void Append (ASN1T_EXPStream_AttributeTypeAndValue *elem);
   ASN1T_EXPStream_AttributeTypeAndValue *NewElement ();
} ;

EXTERN int asn1BSD_EXPStream_RelativeDistinguishedName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_RelativeDistinguishedName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_RelativeDistinguishedName
   (const char* name, ASN1T_EXPStream_RelativeDistinguishedName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_RelativeDistinguishedName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_RelativeDistinguishedName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_RelativeDistinguishedName (ASN1ConstCharPtr name, ASN1T_EXPStream_RelativeDistinguishedName* pValue, ASN1T_EXPStream_RelativeDistinguishedName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_RelativeDistinguishedName (ASN1CTXT *pctxt, ASN1T_EXPStream_RelativeDistinguishedName* pSrcValue, ASN1T_EXPStream_RelativeDistinguishedName* pDstValue);

EXTERN void asn1Free_EXPStream_RelativeDistinguishedName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_RelativeDistinguishedName* pvalue);

/**************************************************************/
/*                                                            */
/*  RDNSequence                                               */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_RelativeDistinguishedName */
typedef struct EXTERN ASN1T_EXPStream_RDNSequence : public ASN1TPDUSeqOfList {
   ~ASN1T_EXPStream_RDNSequence();
} ASN1T_EXPStream_RDNSequence;

class EXTERN ASN1C_EXPStream_RDNSequence :
   public ASN1CSeqOfList
{
protected:
   ASN1T_EXPStream_RDNSequence& msgData;
public:
   ASN1C_EXPStream_RDNSequence (ASN1T_EXPStream_RDNSequence& data);
   ASN1C_EXPStream_RDNSequence (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_RDNSequence& data);
   ASN1C_EXPStream_RDNSequence (ASN1C_EXPStream_RDNSequence& original);

   inline ASN1T_EXPStream_RDNSequence& getData () { return msgData; }
   inline const ASN1T_EXPStream_RDNSequence& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_RDNSequence* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_RDNSequence& getCopy (ASN1T_EXPStream_RDNSequence* pDstData = 0);
   ASN1T_EXPStream_RDNSequence* newCopy ();

   ASN1C_EXPStream_RDNSequence& operator= (ASN1C_EXPStream_RDNSequence& srcData);
   void Append (ASN1T_EXPStream_RelativeDistinguishedName *elem);
   ASN1T_EXPStream_RelativeDistinguishedName *NewElement ();
} ;

EXTERN int asn1BSD_EXPStream_RDNSequence (ASN1CTXT* pctxt,
   ASN1T_EXPStream_RDNSequence *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_RDNSequence
   (const char* name, ASN1T_EXPStream_RDNSequence* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_RDNSequence
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_RDNSequence* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_RDNSequence (ASN1ConstCharPtr name, ASN1T_EXPStream_RDNSequence* pValue, ASN1T_EXPStream_RDNSequence* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_RDNSequence (ASN1CTXT *pctxt, ASN1T_EXPStream_RDNSequence* pSrcValue, ASN1T_EXPStream_RDNSequence* pDstValue);

EXTERN void asn1Free_EXPStream_RDNSequence
   (ASN1CTXT *pctxt, ASN1T_EXPStream_RDNSequence* pvalue);

/**************************************************************/
/*                                                            */
/*  Name                                                      */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_Name_rdnSequence    1

class EXTERN ASN1C_EXPStream_Name;

struct EXTERN ASN1T_EXPStream_Name : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_EXPStream_RDNSequence *rdnSequence;
   } u;
   ASN1T_EXPStream_Name () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_Name (ASN1C_EXPStream_Name& srcData);
   ~ASN1T_EXPStream_Name ();
} ;

class EXTERN ASN1C_EXPStream_Name :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_Name& msgData;
public:
   ASN1C_EXPStream_Name (ASN1T_EXPStream_Name& data);
   ASN1C_EXPStream_Name (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_Name& data);
   ASN1C_EXPStream_Name (ASN1C_EXPStream_Name& original);

   inline ASN1T_EXPStream_Name& getData () { return msgData; }
   inline const ASN1T_EXPStream_Name& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_Name* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_Name& getCopy (ASN1T_EXPStream_Name* pDstData = 0);
   ASN1T_EXPStream_Name* newCopy ();

   inline ASN1C_EXPStream_Name& operator= (ASN1C_EXPStream_Name& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_Name (ASN1CTXT* pctxt,
   ASN1T_EXPStream_Name *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_Name
   (const char* name, ASN1T_EXPStream_Name* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_Name
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_Name* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_Name (ASN1ConstCharPtr name, ASN1T_EXPStream_Name* pValue, ASN1T_EXPStream_Name* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_Name (ASN1CTXT *pctxt, ASN1T_EXPStream_Name* pSrcValue, ASN1T_EXPStream_Name* pDstValue);

EXTERN void asn1Free_EXPStream_Name
   (ASN1CTXT *pctxt, ASN1T_EXPStream_Name* pvalue);

/**************************************************************/
/*                                                            */
/*  Time                                                      */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_Time_utcTime        1
#define T_EXPStream_Time_generalTime    2

class EXTERN ASN1C_EXPStream_Time;

struct EXTERN ASN1T_EXPStream_Time : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTCTime utcTime;
      /* t = 2 */
      ASN1GeneralizedTime generalTime;
   } u;
   ASN1T_EXPStream_Time () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_Time (ASN1C_EXPStream_Time& srcData);
   ~ASN1T_EXPStream_Time ();
} ;

class EXTERN ASN1C_EXPStream_Time :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_Time& msgData;
public:
   ASN1C_EXPStream_Time (ASN1T_EXPStream_Time& data);
   ASN1C_EXPStream_Time (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_Time& data);
   ASN1C_EXPStream_Time (ASN1C_EXPStream_Time& original);

   inline ASN1T_EXPStream_Time& getData () { return msgData; }
   inline const ASN1T_EXPStream_Time& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_Time* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_Time& getCopy (ASN1T_EXPStream_Time* pDstData = 0);
   ASN1T_EXPStream_Time* newCopy ();

   inline ASN1C_EXPStream_Time& operator= (ASN1C_EXPStream_Time& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_Time (ASN1CTXT* pctxt,
   ASN1T_EXPStream_Time *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_Time
   (const char* name, ASN1T_EXPStream_Time* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_Time
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_Time* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_Time (ASN1ConstCharPtr name, ASN1T_EXPStream_Time* pValue, ASN1T_EXPStream_Time* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_Time (ASN1CTXT *pctxt, ASN1T_EXPStream_Time* pSrcValue, ASN1T_EXPStream_Time* pDstValue);

EXTERN void asn1Free_EXPStream_Time
   (ASN1CTXT *pctxt, ASN1T_EXPStream_Time* pvalue);

/**************************************************************/
/*                                                            */
/*  Validity                                                  */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_Validity;

struct EXTERN ASN1T_EXPStream_Validity : public ASN1TPDU {
   ASN1T_EXPStream_Time notBefore;
   ASN1T_EXPStream_Time notAfter;
   ASN1T_EXPStream_Validity ();
   ASN1T_EXPStream_Validity (ASN1C_EXPStream_Validity& srcData);
   ~ASN1T_EXPStream_Validity ();
} ;

class EXTERN ASN1C_EXPStream_Validity :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_Validity& msgData;
public:
   ASN1C_EXPStream_Validity (ASN1T_EXPStream_Validity& data);
   ASN1C_EXPStream_Validity (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_Validity& data);
   ASN1C_EXPStream_Validity (ASN1C_EXPStream_Validity& original);

   inline ASN1T_EXPStream_Validity& getData () { return msgData; }
   inline const ASN1T_EXPStream_Validity& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_Validity* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_Validity& getCopy (ASN1T_EXPStream_Validity* pDstData = 0);
   ASN1T_EXPStream_Validity* newCopy ();

   inline ASN1C_EXPStream_Validity& operator= (ASN1C_EXPStream_Validity& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_Validity (ASN1CTXT* pctxt,
   ASN1T_EXPStream_Validity *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_Validity
   (const char* name, ASN1T_EXPStream_Validity* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_Validity
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_Validity* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_Validity (ASN1ConstCharPtr name, ASN1T_EXPStream_Validity* pValue, ASN1T_EXPStream_Validity* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_Validity (ASN1CTXT *pctxt, ASN1T_EXPStream_Validity* pSrcValue, ASN1T_EXPStream_Validity* pDstValue);

EXTERN void asn1Free_EXPStream_Validity
   (ASN1CTXT *pctxt, ASN1T_EXPStream_Validity* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectPublicKeyInfo                                      */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_SubjectPublicKeyInfo;

struct EXTERN ASN1T_EXPStream_SubjectPublicKeyInfo : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier algorithm;
   ASN1TDynBitStr subjectPublicKey;
   ASN1T_EXPStream_SubjectPublicKeyInfo ();
   ASN1T_EXPStream_SubjectPublicKeyInfo (ASN1C_EXPStream_SubjectPublicKeyInfo& srcData);
   ~ASN1T_EXPStream_SubjectPublicKeyInfo ();
} ;

class EXTERN ASN1C_EXPStream_SubjectPublicKeyInfo :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_SubjectPublicKeyInfo& msgData;
public:
   ASN1C_EXPStream_SubjectPublicKeyInfo (ASN1T_EXPStream_SubjectPublicKeyInfo& data);
   ASN1C_EXPStream_SubjectPublicKeyInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_SubjectPublicKeyInfo& data);
   ASN1C_EXPStream_SubjectPublicKeyInfo (ASN1C_EXPStream_SubjectPublicKeyInfo& original);

   inline ASN1T_EXPStream_SubjectPublicKeyInfo& getData () { return msgData; }
   inline const ASN1T_EXPStream_SubjectPublicKeyInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_SubjectPublicKeyInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_SubjectPublicKeyInfo& getCopy (ASN1T_EXPStream_SubjectPublicKeyInfo* pDstData = 0);
   ASN1T_EXPStream_SubjectPublicKeyInfo* newCopy ();

   inline ASN1C_EXPStream_SubjectPublicKeyInfo& operator= (ASN1C_EXPStream_SubjectPublicKeyInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_SubjectPublicKeyInfo (ASN1CTXT* pctxt,
   ASN1T_EXPStream_SubjectPublicKeyInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_SubjectPublicKeyInfo
   (const char* name, ASN1T_EXPStream_SubjectPublicKeyInfo* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_SubjectPublicKeyInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_SubjectPublicKeyInfo* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_SubjectPublicKeyInfo (ASN1ConstCharPtr name, ASN1T_EXPStream_SubjectPublicKeyInfo* pValue, ASN1T_EXPStream_SubjectPublicKeyInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_SubjectPublicKeyInfo (ASN1CTXT *pctxt, ASN1T_EXPStream_SubjectPublicKeyInfo* pSrcValue, ASN1T_EXPStream_SubjectPublicKeyInfo* pDstValue);

EXTERN void asn1Free_EXPStream_SubjectPublicKeyInfo
   (ASN1CTXT *pctxt, ASN1T_EXPStream_SubjectPublicKeyInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  Extension                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_Extension;

struct EXTERN ASN1T_EXPStream_Extension : public ASN1TPDU {
   ASN1TObjId extnID;
   OSBOOL critical;
   ASN1TDynOctStr extnValue;
   ASN1T_EXPStream_Extension ();
   ASN1T_EXPStream_Extension (ASN1C_EXPStream_Extension& srcData);
   ~ASN1T_EXPStream_Extension ();
} ;

class EXTERN ASN1C_EXPStream_Extension :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_Extension& msgData;
public:
   ASN1C_EXPStream_Extension (ASN1T_EXPStream_Extension& data);
   ASN1C_EXPStream_Extension (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_Extension& data);
   ASN1C_EXPStream_Extension (ASN1C_EXPStream_Extension& original);

   inline ASN1T_EXPStream_Extension& getData () { return msgData; }
   inline const ASN1T_EXPStream_Extension& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_Extension* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_Extension& getCopy (ASN1T_EXPStream_Extension* pDstData = 0);
   ASN1T_EXPStream_Extension* newCopy ();

   inline ASN1C_EXPStream_Extension& operator= (ASN1C_EXPStream_Extension& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_Extension (ASN1CTXT* pctxt,
   ASN1T_EXPStream_Extension *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_Extension
   (const char* name, ASN1T_EXPStream_Extension* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_Extension
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_Extension* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_Extension (ASN1ConstCharPtr name, ASN1T_EXPStream_Extension* pValue, ASN1T_EXPStream_Extension* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_Extension (ASN1CTXT *pctxt, ASN1T_EXPStream_Extension* pSrcValue, ASN1T_EXPStream_Extension* pDstValue);

EXTERN void asn1Free_EXPStream_Extension
   (ASN1CTXT *pctxt, ASN1T_EXPStream_Extension* pvalue);

/**************************************************************/
/*                                                            */
/*  Extensions                                                */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Extension */
typedef struct EXTERN ASN1T_EXPStream_Extensions : public ASN1TPDUSeqOfList {
   ~ASN1T_EXPStream_Extensions();
} ASN1T_EXPStream_Extensions;

class EXTERN ASN1C_EXPStream_Extensions :
   public ASN1CSeqOfList
{
protected:
   ASN1T_EXPStream_Extensions& msgData;
public:
   ASN1C_EXPStream_Extensions (ASN1T_EXPStream_Extensions& data);
   ASN1C_EXPStream_Extensions (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_Extensions& data);
   ASN1C_EXPStream_Extensions (ASN1C_EXPStream_Extensions& original);

   inline ASN1T_EXPStream_Extensions& getData () { return msgData; }
   inline const ASN1T_EXPStream_Extensions& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_Extensions* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_Extensions& getCopy (ASN1T_EXPStream_Extensions* pDstData = 0);
   ASN1T_EXPStream_Extensions* newCopy ();

   ASN1C_EXPStream_Extensions& operator= (ASN1C_EXPStream_Extensions& srcData);
   void Append (ASN1T_EXPStream_Extension *elem);
   ASN1T_EXPStream_Extension *NewElement ();
} ;

EXTERN int asn1BSD_EXPStream_Extensions (ASN1CTXT* pctxt,
   ASN1T_EXPStream_Extensions *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_Extensions
   (const char* name, ASN1T_EXPStream_Extensions* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_Extensions
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_Extensions* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_Extensions (ASN1ConstCharPtr name, ASN1T_EXPStream_Extensions* pValue, ASN1T_EXPStream_Extensions* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_Extensions (ASN1CTXT *pctxt, ASN1T_EXPStream_Extensions* pSrcValue, ASN1T_EXPStream_Extensions* pDstValue);

EXTERN void asn1Free_EXPStream_Extensions
   (ASN1CTXT *pctxt, ASN1T_EXPStream_Extensions* pvalue);

/**************************************************************/
/*                                                            */
/*  TBSCertificate                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_TBSCertificate;

struct EXTERN ASN1T_EXPStream_TBSCertificate : public ASN1TPDU {
   struct {
      unsigned versionPresent : 1;
      unsigned issuerUniqueIDPresent : 1;
      unsigned subjectUniqueIDPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_EXPStream_Version version;
   ASN1T_EXPStream_CertificateSerialNumber serialNumber;
   ASN1T_EXPStream_AlgorithmIdentifier signature;
   ASN1T_EXPStream_Name issuer;
   ASN1T_EXPStream_Validity validity;
   ASN1T_EXPStream_Name subject;
   ASN1T_EXPStream_SubjectPublicKeyInfo subjectPublicKeyInfo;
   ASN1T_EXPStream_UniqueIdentifier issuerUniqueID;
   ASN1T_EXPStream_UniqueIdentifier subjectUniqueID;
   ASN1T_EXPStream_Extensions extensions;
   ASN1T_EXPStream_TBSCertificate ();
   ASN1T_EXPStream_TBSCertificate (ASN1C_EXPStream_TBSCertificate& srcData);
   ~ASN1T_EXPStream_TBSCertificate ();
} ;

class EXTERN ASN1C_EXPStream_TBSCertificate :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_TBSCertificate& msgData;
public:
   ASN1C_EXPStream_TBSCertificate (ASN1T_EXPStream_TBSCertificate& data);
   ASN1C_EXPStream_TBSCertificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_TBSCertificate& data);
   ASN1C_EXPStream_TBSCertificate (ASN1C_EXPStream_TBSCertificate& original);

   inline ASN1T_EXPStream_TBSCertificate& getData () { return msgData; }
   inline const ASN1T_EXPStream_TBSCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_TBSCertificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_TBSCertificate& getCopy (ASN1T_EXPStream_TBSCertificate* pDstData = 0);
   ASN1T_EXPStream_TBSCertificate* newCopy ();

   inline ASN1C_EXPStream_TBSCertificate& operator= (ASN1C_EXPStream_TBSCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_TBSCertificate (ASN1CTXT* pctxt,
   ASN1T_EXPStream_TBSCertificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_TBSCertificate
   (const char* name, ASN1T_EXPStream_TBSCertificate* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_TBSCertificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_TBSCertificate* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_TBSCertificate (ASN1ConstCharPtr name, ASN1T_EXPStream_TBSCertificate* pValue, ASN1T_EXPStream_TBSCertificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_TBSCertificate (ASN1CTXT *pctxt, ASN1T_EXPStream_TBSCertificate* pSrcValue, ASN1T_EXPStream_TBSCertificate* pDstValue);

EXTERN void asn1Free_EXPStream_TBSCertificate
   (ASN1CTXT *pctxt, ASN1T_EXPStream_TBSCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  Certificate                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_Certificate;

struct EXTERN ASN1T_EXPStream_Certificate : public ASN1TPDU {
   ASN1T_EXPStream_TBSCertificate tbsCertificate;
   ASN1T_EXPStream_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature;
   ASN1T_EXPStream_Certificate ();
   ASN1T_EXPStream_Certificate (ASN1C_EXPStream_Certificate& srcData);
   ~ASN1T_EXPStream_Certificate ();
} ;

class EXTERN ASN1C_EXPStream_Certificate :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_Certificate& msgData;
public:
   ASN1C_EXPStream_Certificate (ASN1T_EXPStream_Certificate& data);
   ASN1C_EXPStream_Certificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_Certificate& data);
   ASN1C_EXPStream_Certificate (ASN1C_EXPStream_Certificate& original);

   inline ASN1T_EXPStream_Certificate& getData () { return msgData; }
   inline const ASN1T_EXPStream_Certificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_Certificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_Certificate& getCopy (ASN1T_EXPStream_Certificate* pDstData = 0);
   ASN1T_EXPStream_Certificate* newCopy ();

   inline ASN1C_EXPStream_Certificate& operator= (ASN1C_EXPStream_Certificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_Certificate (ASN1CTXT* pctxt,
   ASN1T_EXPStream_Certificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_Certificate
   (const char* name, ASN1T_EXPStream_Certificate* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_Certificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_Certificate* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_Certificate (ASN1ConstCharPtr name, ASN1T_EXPStream_Certificate* pValue, ASN1T_EXPStream_Certificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_Certificate (ASN1CTXT *pctxt, ASN1T_EXPStream_Certificate* pSrcValue, ASN1T_EXPStream_Certificate* pDstValue);

EXTERN void asn1Free_EXPStream_Certificate
   (ASN1CTXT *pctxt, ASN1T_EXPStream_Certificate* pvalue);

/**************************************************************/
/*                                                            */
/*  _SetOfEXPStream_AttributeValue                            */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_AttributeValue */
typedef struct EXTERN ASN1T_EXPStream__SetOfEXPStream_AttributeValue : public ASN1TPDUSeqOfList {
   ~ASN1T_EXPStream__SetOfEXPStream_AttributeValue();
} ASN1T_EXPStream__SetOfEXPStream_AttributeValue;

class EXTERN ASN1C_EXPStream__SetOfEXPStream_AttributeValue :
   public ASN1CSeqOfList
{
protected:
   ASN1T_EXPStream__SetOfEXPStream_AttributeValue& msgData;
public:
   ASN1C_EXPStream__SetOfEXPStream_AttributeValue (ASN1T_EXPStream__SetOfEXPStream_AttributeValue& data);
   ASN1C_EXPStream__SetOfEXPStream_AttributeValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream__SetOfEXPStream_AttributeValue& data);
   ASN1C_EXPStream__SetOfEXPStream_AttributeValue (ASN1C_EXPStream__SetOfEXPStream_AttributeValue& original);

   inline ASN1T_EXPStream__SetOfEXPStream_AttributeValue& getData () { return msgData; }
   inline const ASN1T_EXPStream__SetOfEXPStream_AttributeValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream__SetOfEXPStream_AttributeValue& getCopy (ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pDstData = 0);
   ASN1T_EXPStream__SetOfEXPStream_AttributeValue* newCopy ();

   ASN1C_EXPStream__SetOfEXPStream_AttributeValue& operator= (ASN1C_EXPStream__SetOfEXPStream_AttributeValue& srcData);
   void Append (ASN1T_EXPStream_AttributeValue *elem);
   ASN1T_EXPStream_AttributeValue *NewElement ();
} ;

EXTERN int asn1BSD_EXPStream__SetOfEXPStream_AttributeValue (ASN1CTXT* pctxt,
   ASN1T_EXPStream__SetOfEXPStream_AttributeValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream__SetOfEXPStream_AttributeValue
   (const char* name, ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pvalue);

EXTERN int asn1PrtToStrm_EXPStream__SetOfEXPStream_AttributeValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream__SetOfEXPStream_AttributeValue (ASN1ConstCharPtr name, ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pValue, ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream__SetOfEXPStream_AttributeValue (ASN1CTXT *pctxt, ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pSrcValue, ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pDstValue);

EXTERN void asn1Free_EXPStream__SetOfEXPStream_AttributeValue
   (ASN1CTXT *pctxt, ASN1T_EXPStream__SetOfEXPStream_AttributeValue* pvalue);

/**************************************************************/
/*                                                            */
/*  Attribute                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_Attribute;

struct EXTERN ASN1T_EXPStream_Attribute : public ASN1TPDU {
   ASN1T_EXPStream_AttributeType type;
   ASN1T_EXPStream__SetOfEXPStream_AttributeValue values;
   ASN1T_EXPStream_Attribute ();
   ASN1T_EXPStream_Attribute (ASN1C_EXPStream_Attribute& srcData);
   ~ASN1T_EXPStream_Attribute ();
} ;

class EXTERN ASN1C_EXPStream_Attribute :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_Attribute& msgData;
public:
   ASN1C_EXPStream_Attribute (ASN1T_EXPStream_Attribute& data);
   ASN1C_EXPStream_Attribute (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_Attribute& data);
   ASN1C_EXPStream_Attribute (ASN1C_EXPStream_Attribute& original);

   inline ASN1T_EXPStream_Attribute& getData () { return msgData; }
   inline const ASN1T_EXPStream_Attribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_Attribute* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_Attribute& getCopy (ASN1T_EXPStream_Attribute* pDstData = 0);
   ASN1T_EXPStream_Attribute* newCopy ();

   inline ASN1C_EXPStream_Attribute& operator= (ASN1C_EXPStream_Attribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_Attribute (ASN1CTXT* pctxt,
   ASN1T_EXPStream_Attribute *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_Attribute
   (const char* name, ASN1T_EXPStream_Attribute* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_Attribute
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_Attribute* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_Attribute (ASN1ConstCharPtr name, ASN1T_EXPStream_Attribute* pValue, ASN1T_EXPStream_Attribute* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_Attribute (ASN1CTXT *pctxt, ASN1T_EXPStream_Attribute* pSrcValue, ASN1T_EXPStream_Attribute* pDstValue);

EXTERN void asn1Free_EXPStream_Attribute
   (ASN1CTXT *pctxt, ASN1T_EXPStream_Attribute* pvalue);

/**************************************************************/
/*                                                            */
/*  TBSCertList_revokedCertificates_element                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_TBSCertList_revokedCertificates_element;

struct EXTERN ASN1T_EXPStream_TBSCertList_revokedCertificates_element : public ASN1TPDU {
   struct {
      unsigned crlEntryExtensionsPresent : 1;
   } m;
   ASN1T_EXPStream_CertificateSerialNumber userCertificate;
   ASN1T_EXPStream_Time revocationDate;
   ASN1T_EXPStream_Extensions crlEntryExtensions;
   ASN1T_EXPStream_TBSCertList_revokedCertificates_element ();
   ASN1T_EXPStream_TBSCertList_revokedCertificates_element (ASN1C_EXPStream_TBSCertList_revokedCertificates_element& srcData);
   ~ASN1T_EXPStream_TBSCertList_revokedCertificates_element ();
} ;

class EXTERN ASN1C_EXPStream_TBSCertList_revokedCertificates_element :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_TBSCertList_revokedCertificates_element& msgData;
public:
   ASN1C_EXPStream_TBSCertList_revokedCertificates_element (ASN1T_EXPStream_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXPStream_TBSCertList_revokedCertificates_element (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXPStream_TBSCertList_revokedCertificates_element (ASN1C_EXPStream_TBSCertList_revokedCertificates_element& original);

   inline ASN1T_EXPStream_TBSCertList_revokedCertificates_element& getData () { return msgData; }
   inline const ASN1T_EXPStream_TBSCertList_revokedCertificates_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_TBSCertList_revokedCertificates_element& getCopy (ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pDstData = 0);
   ASN1T_EXPStream_TBSCertList_revokedCertificates_element* newCopy ();

   inline ASN1C_EXPStream_TBSCertList_revokedCertificates_element& operator= (ASN1C_EXPStream_TBSCertList_revokedCertificates_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_TBSCertList_revokedCertificates_element (ASN1CTXT* pctxt,
   ASN1T_EXPStream_TBSCertList_revokedCertificates_element *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_TBSCertList_revokedCertificates_element
   (const char* name, ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_TBSCertList_revokedCertificates_element
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_TBSCertList_revokedCertificates_element (ASN1ConstCharPtr name, ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pValue, ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_TBSCertList_revokedCertificates_element (ASN1CTXT *pctxt, ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pSrcValue, ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pDstValue);

EXTERN void asn1Free_EXPStream_TBSCertList_revokedCertificates_element
   (ASN1CTXT *pctxt, ASN1T_EXPStream_TBSCertList_revokedCertificates_element* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfEXPStream_TBSCertList_revokedCertificates_element   */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_TBSCertList_revokedCertificates_element */
typedef struct EXTERN ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element : public ASN1TPDUSeqOfList {
   ~ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element();
} ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element;

class EXTERN ASN1C_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element :
   public ASN1CSeqOfList
{
protected:
   ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& msgData;
public:
   ASN1C_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element (ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element (ASN1C_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& original);

   inline ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& getData () { return msgData; }
   inline const ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& getCopy (ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pDstData = 0);
   ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* newCopy ();

   ASN1C_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& operator= (ASN1C_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element& srcData);
   void Append (ASN1T_EXPStream_TBSCertList_revokedCertificates_element *elem);
   ASN1T_EXPStream_TBSCertList_revokedCertificates_element *NewElement ();
} ;

EXTERN int asn1BSD_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element (ASN1CTXT* pctxt,
   ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element
   (const char* name, ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pvalue);

EXTERN int asn1PrtToStrm_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element (ASN1ConstCharPtr name, ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pValue, ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element (ASN1CTXT *pctxt, ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pSrcValue, ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pDstValue);

EXTERN void asn1Free_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element
   (ASN1CTXT *pctxt, ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element* pvalue);

/**************************************************************/
/*                                                            */
/*  TBSCertList                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_TBSCertList;

struct EXTERN ASN1T_EXPStream_TBSCertList : public ASN1TPDU {
   struct {
      unsigned versionPresent : 1;
      unsigned nextUpdatePresent : 1;
      unsigned revokedCertificatesPresent : 1;
      unsigned crlExtensionsPresent : 1;
   } m;
   ASN1T_EXPStream_Version version;
   ASN1T_EXPStream_AlgorithmIdentifier signature;
   ASN1T_EXPStream_Name issuer;
   ASN1T_EXPStream_Time thisUpdate;
   ASN1T_EXPStream_Time nextUpdate;
   ASN1T_EXPStream__SeqOfEXPStream_TBSCertList_revokedCertificates_element revokedCertificates;
   ASN1T_EXPStream_Extensions crlExtensions;
   ASN1T_EXPStream_TBSCertList ();
   ASN1T_EXPStream_TBSCertList (ASN1C_EXPStream_TBSCertList& srcData);
   ~ASN1T_EXPStream_TBSCertList ();
} ;

class EXTERN ASN1C_EXPStream_TBSCertList :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_TBSCertList& msgData;
public:
   ASN1C_EXPStream_TBSCertList (ASN1T_EXPStream_TBSCertList& data);
   ASN1C_EXPStream_TBSCertList (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_TBSCertList& data);
   ASN1C_EXPStream_TBSCertList (ASN1C_EXPStream_TBSCertList& original);

   inline ASN1T_EXPStream_TBSCertList& getData () { return msgData; }
   inline const ASN1T_EXPStream_TBSCertList& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_TBSCertList* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_TBSCertList& getCopy (ASN1T_EXPStream_TBSCertList* pDstData = 0);
   ASN1T_EXPStream_TBSCertList* newCopy ();

   inline ASN1C_EXPStream_TBSCertList& operator= (ASN1C_EXPStream_TBSCertList& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_TBSCertList (ASN1CTXT* pctxt,
   ASN1T_EXPStream_TBSCertList *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_TBSCertList
   (const char* name, ASN1T_EXPStream_TBSCertList* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_TBSCertList
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_TBSCertList* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_TBSCertList (ASN1ConstCharPtr name, ASN1T_EXPStream_TBSCertList* pValue, ASN1T_EXPStream_TBSCertList* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_TBSCertList (ASN1CTXT *pctxt, ASN1T_EXPStream_TBSCertList* pSrcValue, ASN1T_EXPStream_TBSCertList* pDstValue);

EXTERN void asn1Free_EXPStream_TBSCertList
   (ASN1CTXT *pctxt, ASN1T_EXPStream_TBSCertList* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateList                                           */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_CertificateList;

struct EXTERN ASN1T_EXPStream_CertificateList : public ASN1TPDU {
   ASN1T_EXPStream_TBSCertList tbsCertList;
   ASN1T_EXPStream_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature;
   ASN1T_EXPStream_CertificateList ();
   ASN1T_EXPStream_CertificateList (ASN1C_EXPStream_CertificateList& srcData);
   ~ASN1T_EXPStream_CertificateList ();
} ;

class EXTERN ASN1C_EXPStream_CertificateList :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_CertificateList& msgData;
public:
   ASN1C_EXPStream_CertificateList (ASN1T_EXPStream_CertificateList& data);
   ASN1C_EXPStream_CertificateList (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_CertificateList& data);
   ASN1C_EXPStream_CertificateList (ASN1C_EXPStream_CertificateList& original);

   inline ASN1T_EXPStream_CertificateList& getData () { return msgData; }
   inline const ASN1T_EXPStream_CertificateList& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_CertificateList* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_CertificateList& getCopy (ASN1T_EXPStream_CertificateList* pDstData = 0);
   ASN1T_EXPStream_CertificateList* newCopy ();

   inline ASN1C_EXPStream_CertificateList& operator= (ASN1C_EXPStream_CertificateList& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_CertificateList (ASN1CTXT* pctxt,
   ASN1T_EXPStream_CertificateList *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_CertificateList
   (const char* name, ASN1T_EXPStream_CertificateList* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_CertificateList
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_CertificateList* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_CertificateList (ASN1ConstCharPtr name, ASN1T_EXPStream_CertificateList* pValue, ASN1T_EXPStream_CertificateList* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_CertificateList (ASN1CTXT *pctxt, ASN1T_EXPStream_CertificateList* pSrcValue, ASN1T_EXPStream_CertificateList* pDstValue);

EXTERN void asn1Free_EXPStream_CertificateList
   (ASN1CTXT *pctxt, ASN1T_EXPStream_CertificateList* pvalue);

/**************************************************************/
/*                                                            */
/*  CountryName                                               */
/*                                                            */
/**************************************************************/

#define TV_EXPStream_CountryName	(TM_APPL|TM_CONS|1)

/* Choice tag constants */

#define T_EXPStream_CountryName_x121_dcc_code 1
#define T_EXPStream_CountryName_iso_3166_alpha2_code 2

class EXTERN ASN1C_EXPStream_CountryName;

struct EXTERN ASN1T_EXPStream_CountryName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1NumericString x121_dcc_code;
      /* t = 2 */
      ASN1PrintableString iso_3166_alpha2_code;
   } u;
   ASN1T_EXPStream_CountryName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_CountryName (ASN1C_EXPStream_CountryName& srcData);
   ~ASN1T_EXPStream_CountryName ();
} ;

class EXTERN ASN1C_EXPStream_CountryName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_CountryName& msgData;
public:
   ASN1C_EXPStream_CountryName (ASN1T_EXPStream_CountryName& data);
   ASN1C_EXPStream_CountryName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_CountryName& data);
   ASN1C_EXPStream_CountryName (ASN1C_EXPStream_CountryName& original);

   inline ASN1T_EXPStream_CountryName& getData () { return msgData; }
   inline const ASN1T_EXPStream_CountryName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_CountryName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_CountryName& getCopy (ASN1T_EXPStream_CountryName* pDstData = 0);
   ASN1T_EXPStream_CountryName* newCopy ();

   inline ASN1C_EXPStream_CountryName& operator= (ASN1C_EXPStream_CountryName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_CountryName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_CountryName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_CountryName
   (const char* name, ASN1T_EXPStream_CountryName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_CountryName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_CountryName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_CountryName (ASN1ConstCharPtr name, ASN1T_EXPStream_CountryName* pValue, ASN1T_EXPStream_CountryName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_CountryName (ASN1CTXT *pctxt, ASN1T_EXPStream_CountryName* pSrcValue, ASN1T_EXPStream_CountryName* pDstValue);

EXTERN void asn1Free_EXPStream_CountryName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_CountryName* pvalue);

/**************************************************************/
/*                                                            */
/*  AdministrationDomainName                                  */
/*                                                            */
/**************************************************************/

#define TV_EXPStream_AdministrationDomainName	(TM_APPL|TM_CONS|2)

/* Choice tag constants */

#define T_EXPStream_AdministrationDomainName_numeric 1
#define T_EXPStream_AdministrationDomainName_printable 2

class EXTERN ASN1C_EXPStream_AdministrationDomainName;

struct EXTERN ASN1T_EXPStream_AdministrationDomainName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1NumericString numeric;
      /* t = 2 */
      ASN1PrintableString printable;
   } u;
   ASN1T_EXPStream_AdministrationDomainName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_AdministrationDomainName (ASN1C_EXPStream_AdministrationDomainName& srcData);
   ~ASN1T_EXPStream_AdministrationDomainName ();
} ;

class EXTERN ASN1C_EXPStream_AdministrationDomainName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_AdministrationDomainName& msgData;
public:
   ASN1C_EXPStream_AdministrationDomainName (ASN1T_EXPStream_AdministrationDomainName& data);
   ASN1C_EXPStream_AdministrationDomainName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_AdministrationDomainName& data);
   ASN1C_EXPStream_AdministrationDomainName (ASN1C_EXPStream_AdministrationDomainName& original);

   inline ASN1T_EXPStream_AdministrationDomainName& getData () { return msgData; }
   inline const ASN1T_EXPStream_AdministrationDomainName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_AdministrationDomainName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_AdministrationDomainName& getCopy (ASN1T_EXPStream_AdministrationDomainName* pDstData = 0);
   ASN1T_EXPStream_AdministrationDomainName* newCopy ();

   inline ASN1C_EXPStream_AdministrationDomainName& operator= (ASN1C_EXPStream_AdministrationDomainName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_AdministrationDomainName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_AdministrationDomainName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_AdministrationDomainName
   (const char* name, ASN1T_EXPStream_AdministrationDomainName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_AdministrationDomainName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_AdministrationDomainName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_AdministrationDomainName (ASN1ConstCharPtr name, ASN1T_EXPStream_AdministrationDomainName* pValue, ASN1T_EXPStream_AdministrationDomainName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_AdministrationDomainName (ASN1CTXT *pctxt, ASN1T_EXPStream_AdministrationDomainName* pSrcValue, ASN1T_EXPStream_AdministrationDomainName* pDstValue);

EXTERN void asn1Free_EXPStream_AdministrationDomainName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_AdministrationDomainName* pvalue);

/**************************************************************/
/*                                                            */
/*  PrivateDomainName                                         */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_PrivateDomainName_numeric 1
#define T_EXPStream_PrivateDomainName_printable 2

class EXTERN ASN1C_EXPStream_PrivateDomainName;

struct EXTERN ASN1T_EXPStream_PrivateDomainName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1NumericString numeric;
      /* t = 2 */
      ASN1PrintableString printable;
   } u;
   ASN1T_EXPStream_PrivateDomainName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_PrivateDomainName (ASN1C_EXPStream_PrivateDomainName& srcData);
   ~ASN1T_EXPStream_PrivateDomainName ();
} ;

class EXTERN ASN1C_EXPStream_PrivateDomainName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_PrivateDomainName& msgData;
public:
   ASN1C_EXPStream_PrivateDomainName (ASN1T_EXPStream_PrivateDomainName& data);
   ASN1C_EXPStream_PrivateDomainName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_PrivateDomainName& data);
   ASN1C_EXPStream_PrivateDomainName (ASN1C_EXPStream_PrivateDomainName& original);

   inline ASN1T_EXPStream_PrivateDomainName& getData () { return msgData; }
   inline const ASN1T_EXPStream_PrivateDomainName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_PrivateDomainName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_PrivateDomainName& getCopy (ASN1T_EXPStream_PrivateDomainName* pDstData = 0);
   ASN1T_EXPStream_PrivateDomainName* newCopy ();

   inline ASN1C_EXPStream_PrivateDomainName& operator= (ASN1C_EXPStream_PrivateDomainName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_PrivateDomainName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_PrivateDomainName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_PrivateDomainName
   (const char* name, ASN1T_EXPStream_PrivateDomainName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_PrivateDomainName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_PrivateDomainName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_PrivateDomainName (ASN1ConstCharPtr name, ASN1T_EXPStream_PrivateDomainName* pValue, ASN1T_EXPStream_PrivateDomainName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_PrivateDomainName (ASN1CTXT *pctxt, ASN1T_EXPStream_PrivateDomainName* pSrcValue, ASN1T_EXPStream_PrivateDomainName* pDstValue);

EXTERN void asn1Free_EXPStream_PrivateDomainName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_PrivateDomainName* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalName                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_PersonalName;

struct EXTERN ASN1T_EXPStream_PersonalName : public ASN1TPDU {
   struct {
      unsigned given_namePresent : 1;
      unsigned initialsPresent : 1;
      unsigned generation_qualifierPresent : 1;
   } m;
   ASN1PrintableString surname;
   ASN1PrintableString given_name;
   ASN1PrintableString initials;
   ASN1PrintableString generation_qualifier;
   ASN1T_EXPStream_PersonalName ();
   ASN1T_EXPStream_PersonalName (ASN1C_EXPStream_PersonalName& srcData);
   ~ASN1T_EXPStream_PersonalName ();
} ;

class EXTERN ASN1C_EXPStream_PersonalName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_PersonalName& msgData;
public:
   ASN1C_EXPStream_PersonalName (ASN1T_EXPStream_PersonalName& data);
   ASN1C_EXPStream_PersonalName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_PersonalName& data);
   ASN1C_EXPStream_PersonalName (ASN1C_EXPStream_PersonalName& original);

   inline ASN1T_EXPStream_PersonalName& getData () { return msgData; }
   inline const ASN1T_EXPStream_PersonalName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_PersonalName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_PersonalName& getCopy (ASN1T_EXPStream_PersonalName* pDstData = 0);
   ASN1T_EXPStream_PersonalName* newCopy ();

   inline ASN1C_EXPStream_PersonalName& operator= (ASN1C_EXPStream_PersonalName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_PersonalName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_PersonalName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_PersonalName
   (const char* name, ASN1T_EXPStream_PersonalName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_PersonalName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_PersonalName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_PersonalName (ASN1ConstCharPtr name, ASN1T_EXPStream_PersonalName* pValue, ASN1T_EXPStream_PersonalName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_PersonalName (ASN1CTXT *pctxt, ASN1T_EXPStream_PersonalName* pSrcValue, ASN1T_EXPStream_PersonalName* pDstValue);

EXTERN void asn1Free_EXPStream_PersonalName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_PersonalName* pvalue);

/**************************************************************/
/*                                                            */
/*  OrganizationalUnitNames                                   */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_OrganizationalUnitName */
typedef struct EXTERN ASN1T_EXPStream_OrganizationalUnitNames : public ASN1TPDUSeqOfList {
   ~ASN1T_EXPStream_OrganizationalUnitNames();
} ASN1T_EXPStream_OrganizationalUnitNames;

class EXTERN ASN1C_EXPStream_OrganizationalUnitNames :
   public ASN1CSeqOfList
{
protected:
   ASN1T_EXPStream_OrganizationalUnitNames& msgData;
public:
   ASN1C_EXPStream_OrganizationalUnitNames (ASN1T_EXPStream_OrganizationalUnitNames& data);
   ASN1C_EXPStream_OrganizationalUnitNames (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_OrganizationalUnitNames& data);
   ASN1C_EXPStream_OrganizationalUnitNames (ASN1C_EXPStream_OrganizationalUnitNames& original);

   inline ASN1T_EXPStream_OrganizationalUnitNames& getData () { return msgData; }
   inline const ASN1T_EXPStream_OrganizationalUnitNames& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_OrganizationalUnitNames* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_OrganizationalUnitNames& getCopy (ASN1T_EXPStream_OrganizationalUnitNames* pDstData = 0);
   ASN1T_EXPStream_OrganizationalUnitNames* newCopy ();

   ASN1C_EXPStream_OrganizationalUnitNames& operator= (ASN1C_EXPStream_OrganizationalUnitNames& srcData);
   void Append (ASN1T_EXPStream_OrganizationalUnitName *elem);
   ASN1T_EXPStream_OrganizationalUnitName *NewElement ();
} ;

EXTERN int asn1BSD_EXPStream_OrganizationalUnitNames (ASN1CTXT* pctxt,
   ASN1T_EXPStream_OrganizationalUnitNames *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_OrganizationalUnitNames
   (const char* name, ASN1T_EXPStream_OrganizationalUnitNames* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_OrganizationalUnitNames
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_OrganizationalUnitNames* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_OrganizationalUnitNames (ASN1ConstCharPtr name, ASN1T_EXPStream_OrganizationalUnitNames* pValue, ASN1T_EXPStream_OrganizationalUnitNames* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_OrganizationalUnitNames (ASN1CTXT *pctxt, ASN1T_EXPStream_OrganizationalUnitNames* pSrcValue, ASN1T_EXPStream_OrganizationalUnitNames* pDstValue);

EXTERN void asn1Free_EXPStream_OrganizationalUnitNames
   (ASN1CTXT *pctxt, ASN1T_EXPStream_OrganizationalUnitNames* pvalue);

/**************************************************************/
/*                                                            */
/*  BuiltInStandardAttributes                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_BuiltInStandardAttributes;

struct EXTERN ASN1T_EXPStream_BuiltInStandardAttributes : public ASN1TPDU {
   struct {
      unsigned country_namePresent : 1;
      unsigned administration_domain_namePresent : 1;
      unsigned network_addressPresent : 1;
      unsigned terminal_identifierPresent : 1;
      unsigned private_domain_namePresent : 1;
      unsigned organization_namePresent : 1;
      unsigned numeric_user_identifierPresent : 1;
      unsigned personal_namePresent : 1;
      unsigned organizational_unit_namesPresent : 1;
   } m;
   ASN1T_EXPStream_CountryName country_name;
   ASN1T_EXPStream_AdministrationDomainName administration_domain_name;
   ASN1T_EXPStream_NetworkAddress network_address;
   ASN1T_EXPStream_TerminalIdentifier terminal_identifier;
   ASN1T_EXPStream_PrivateDomainName private_domain_name;
   ASN1T_EXPStream_OrganizationName organization_name;
   ASN1T_EXPStream_NumericUserIdentifier numeric_user_identifier;
   ASN1T_EXPStream_PersonalName personal_name;
   ASN1T_EXPStream_OrganizationalUnitNames organizational_unit_names;
   ASN1T_EXPStream_BuiltInStandardAttributes ();
   ASN1T_EXPStream_BuiltInStandardAttributes (ASN1C_EXPStream_BuiltInStandardAttributes& srcData);
   ~ASN1T_EXPStream_BuiltInStandardAttributes ();
} ;

class EXTERN ASN1C_EXPStream_BuiltInStandardAttributes :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_BuiltInStandardAttributes& msgData;
public:
   ASN1C_EXPStream_BuiltInStandardAttributes (ASN1T_EXPStream_BuiltInStandardAttributes& data);
   ASN1C_EXPStream_BuiltInStandardAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_BuiltInStandardAttributes& data);
   ASN1C_EXPStream_BuiltInStandardAttributes (ASN1C_EXPStream_BuiltInStandardAttributes& original);

   inline ASN1T_EXPStream_BuiltInStandardAttributes& getData () { return msgData; }
   inline const ASN1T_EXPStream_BuiltInStandardAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_BuiltInStandardAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_BuiltInStandardAttributes& getCopy (ASN1T_EXPStream_BuiltInStandardAttributes* pDstData = 0);
   ASN1T_EXPStream_BuiltInStandardAttributes* newCopy ();

   inline ASN1C_EXPStream_BuiltInStandardAttributes& operator= (ASN1C_EXPStream_BuiltInStandardAttributes& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_BuiltInStandardAttributes (ASN1CTXT* pctxt,
   ASN1T_EXPStream_BuiltInStandardAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_BuiltInStandardAttributes
   (const char* name, ASN1T_EXPStream_BuiltInStandardAttributes* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_BuiltInStandardAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_BuiltInStandardAttributes* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_BuiltInStandardAttributes (ASN1ConstCharPtr name, ASN1T_EXPStream_BuiltInStandardAttributes* pValue, ASN1T_EXPStream_BuiltInStandardAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_BuiltInStandardAttributes (ASN1CTXT *pctxt, ASN1T_EXPStream_BuiltInStandardAttributes* pSrcValue, ASN1T_EXPStream_BuiltInStandardAttributes* pDstValue);

EXTERN void asn1Free_EXPStream_BuiltInStandardAttributes
   (ASN1CTXT *pctxt, ASN1T_EXPStream_BuiltInStandardAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  BuiltInDomainDefinedAttribute                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_BuiltInDomainDefinedAttribute;

struct EXTERN ASN1T_EXPStream_BuiltInDomainDefinedAttribute : public ASN1TPDU {
   ASN1PrintableString type;
   ASN1PrintableString value;
   ASN1T_EXPStream_BuiltInDomainDefinedAttribute ();
   ASN1T_EXPStream_BuiltInDomainDefinedAttribute (ASN1C_EXPStream_BuiltInDomainDefinedAttribute& srcData);
   ~ASN1T_EXPStream_BuiltInDomainDefinedAttribute ();
} ;

class EXTERN ASN1C_EXPStream_BuiltInDomainDefinedAttribute :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_BuiltInDomainDefinedAttribute& msgData;
public:
   ASN1C_EXPStream_BuiltInDomainDefinedAttribute (ASN1T_EXPStream_BuiltInDomainDefinedAttribute& data);
   ASN1C_EXPStream_BuiltInDomainDefinedAttribute (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_BuiltInDomainDefinedAttribute& data);
   ASN1C_EXPStream_BuiltInDomainDefinedAttribute (ASN1C_EXPStream_BuiltInDomainDefinedAttribute& original);

   inline ASN1T_EXPStream_BuiltInDomainDefinedAttribute& getData () { return msgData; }
   inline const ASN1T_EXPStream_BuiltInDomainDefinedAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_BuiltInDomainDefinedAttribute& getCopy (ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pDstData = 0);
   ASN1T_EXPStream_BuiltInDomainDefinedAttribute* newCopy ();

   inline ASN1C_EXPStream_BuiltInDomainDefinedAttribute& operator= (ASN1C_EXPStream_BuiltInDomainDefinedAttribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_BuiltInDomainDefinedAttribute (ASN1CTXT* pctxt,
   ASN1T_EXPStream_BuiltInDomainDefinedAttribute *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_BuiltInDomainDefinedAttribute
   (const char* name, ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_BuiltInDomainDefinedAttribute
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_BuiltInDomainDefinedAttribute (ASN1ConstCharPtr name, ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pValue, ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_BuiltInDomainDefinedAttribute (ASN1CTXT *pctxt, ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pSrcValue, ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pDstValue);

EXTERN void asn1Free_EXPStream_BuiltInDomainDefinedAttribute
   (ASN1CTXT *pctxt, ASN1T_EXPStream_BuiltInDomainDefinedAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  BuiltInDomainDefinedAttributes                            */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_BuiltInDomainDefinedAttribute */
typedef struct EXTERN ASN1T_EXPStream_BuiltInDomainDefinedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_EXPStream_BuiltInDomainDefinedAttributes();
} ASN1T_EXPStream_BuiltInDomainDefinedAttributes;

class EXTERN ASN1C_EXPStream_BuiltInDomainDefinedAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_EXPStream_BuiltInDomainDefinedAttributes& msgData;
public:
   ASN1C_EXPStream_BuiltInDomainDefinedAttributes (ASN1T_EXPStream_BuiltInDomainDefinedAttributes& data);
   ASN1C_EXPStream_BuiltInDomainDefinedAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_BuiltInDomainDefinedAttributes& data);
   ASN1C_EXPStream_BuiltInDomainDefinedAttributes (ASN1C_EXPStream_BuiltInDomainDefinedAttributes& original);

   inline ASN1T_EXPStream_BuiltInDomainDefinedAttributes& getData () { return msgData; }
   inline const ASN1T_EXPStream_BuiltInDomainDefinedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_BuiltInDomainDefinedAttributes& getCopy (ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pDstData = 0);
   ASN1T_EXPStream_BuiltInDomainDefinedAttributes* newCopy ();

   ASN1C_EXPStream_BuiltInDomainDefinedAttributes& operator= (ASN1C_EXPStream_BuiltInDomainDefinedAttributes& srcData);
   void Append (ASN1T_EXPStream_BuiltInDomainDefinedAttribute *elem);
   ASN1T_EXPStream_BuiltInDomainDefinedAttribute *NewElement ();
} ;

EXTERN int asn1BSD_EXPStream_BuiltInDomainDefinedAttributes (ASN1CTXT* pctxt,
   ASN1T_EXPStream_BuiltInDomainDefinedAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_BuiltInDomainDefinedAttributes
   (const char* name, ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_BuiltInDomainDefinedAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_BuiltInDomainDefinedAttributes (ASN1ConstCharPtr name, ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pValue, ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_BuiltInDomainDefinedAttributes (ASN1CTXT *pctxt, ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pSrcValue, ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pDstValue);

EXTERN void asn1Free_EXPStream_BuiltInDomainDefinedAttributes
   (ASN1CTXT *pctxt, ASN1T_EXPStream_BuiltInDomainDefinedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtensionAttribute                                        */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_ExtensionAttribute;

struct EXTERN ASN1T_EXPStream_ExtensionAttribute : public ASN1TPDU {
   OSUINT16 extension_attribute_type;
   ASN1TOpenType extension_attribute_value;
   ASN1T_EXPStream_ExtensionAttribute ();
   ASN1T_EXPStream_ExtensionAttribute (ASN1C_EXPStream_ExtensionAttribute& srcData);
   ~ASN1T_EXPStream_ExtensionAttribute ();
} ;

class EXTERN ASN1C_EXPStream_ExtensionAttribute :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_ExtensionAttribute& msgData;
public:
   ASN1C_EXPStream_ExtensionAttribute (ASN1T_EXPStream_ExtensionAttribute& data);
   ASN1C_EXPStream_ExtensionAttribute (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_ExtensionAttribute& data);
   ASN1C_EXPStream_ExtensionAttribute (ASN1C_EXPStream_ExtensionAttribute& original);

   inline ASN1T_EXPStream_ExtensionAttribute& getData () { return msgData; }
   inline const ASN1T_EXPStream_ExtensionAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_ExtensionAttribute* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_ExtensionAttribute& getCopy (ASN1T_EXPStream_ExtensionAttribute* pDstData = 0);
   ASN1T_EXPStream_ExtensionAttribute* newCopy ();

   inline ASN1C_EXPStream_ExtensionAttribute& operator= (ASN1C_EXPStream_ExtensionAttribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_ExtensionAttribute (ASN1CTXT* pctxt,
   ASN1T_EXPStream_ExtensionAttribute *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_ExtensionAttribute
   (const char* name, ASN1T_EXPStream_ExtensionAttribute* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_ExtensionAttribute
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_ExtensionAttribute* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_ExtensionAttribute (ASN1ConstCharPtr name, ASN1T_EXPStream_ExtensionAttribute* pValue, ASN1T_EXPStream_ExtensionAttribute* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_ExtensionAttribute (ASN1CTXT *pctxt, ASN1T_EXPStream_ExtensionAttribute* pSrcValue, ASN1T_EXPStream_ExtensionAttribute* pDstValue);

EXTERN void asn1Free_EXPStream_ExtensionAttribute
   (ASN1CTXT *pctxt, ASN1T_EXPStream_ExtensionAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtensionAttributes                                       */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_ExtensionAttribute */
typedef struct EXTERN ASN1T_EXPStream_ExtensionAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_EXPStream_ExtensionAttributes();
} ASN1T_EXPStream_ExtensionAttributes;

class EXTERN ASN1C_EXPStream_ExtensionAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_EXPStream_ExtensionAttributes& msgData;
public:
   ASN1C_EXPStream_ExtensionAttributes (ASN1T_EXPStream_ExtensionAttributes& data);
   ASN1C_EXPStream_ExtensionAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_ExtensionAttributes& data);
   ASN1C_EXPStream_ExtensionAttributes (ASN1C_EXPStream_ExtensionAttributes& original);

   inline ASN1T_EXPStream_ExtensionAttributes& getData () { return msgData; }
   inline const ASN1T_EXPStream_ExtensionAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_ExtensionAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_ExtensionAttributes& getCopy (ASN1T_EXPStream_ExtensionAttributes* pDstData = 0);
   ASN1T_EXPStream_ExtensionAttributes* newCopy ();

   ASN1C_EXPStream_ExtensionAttributes& operator= (ASN1C_EXPStream_ExtensionAttributes& srcData);
   void Append (ASN1T_EXPStream_ExtensionAttribute *elem);
   ASN1T_EXPStream_ExtensionAttribute *NewElement ();
} ;

EXTERN int asn1BSD_EXPStream_ExtensionAttributes (ASN1CTXT* pctxt,
   ASN1T_EXPStream_ExtensionAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_ExtensionAttributes
   (const char* name, ASN1T_EXPStream_ExtensionAttributes* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_ExtensionAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_ExtensionAttributes* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_ExtensionAttributes (ASN1ConstCharPtr name, ASN1T_EXPStream_ExtensionAttributes* pValue, ASN1T_EXPStream_ExtensionAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_ExtensionAttributes (ASN1CTXT *pctxt, ASN1T_EXPStream_ExtensionAttributes* pSrcValue, ASN1T_EXPStream_ExtensionAttributes* pDstValue);

EXTERN void asn1Free_EXPStream_ExtensionAttributes
   (ASN1CTXT *pctxt, ASN1T_EXPStream_ExtensionAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  ORAddress                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_EXPStream_ORAddress;

struct EXTERN ASN1T_EXPStream_ORAddress : public ASN1TPDU {
   struct {
      unsigned built_in_domain_defined_attributesPresent : 1;
      unsigned extension_attributesPresent : 1;
   } m;
   ASN1T_EXPStream_BuiltInStandardAttributes built_in_standard_attributes;
   ASN1T_EXPStream_BuiltInDomainDefinedAttributes built_in_domain_defined_attributes;
   ASN1T_EXPStream_ExtensionAttributes extension_attributes;
   ASN1T_EXPStream_ORAddress ();
   ASN1T_EXPStream_ORAddress (ASN1C_EXPStream_ORAddress& srcData);
   ~ASN1T_EXPStream_ORAddress ();
} ;

class EXTERN ASN1C_EXPStream_ORAddress :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_ORAddress& msgData;
public:
   ASN1C_EXPStream_ORAddress (ASN1T_EXPStream_ORAddress& data);
   ASN1C_EXPStream_ORAddress (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_ORAddress& data);
   ASN1C_EXPStream_ORAddress (ASN1C_EXPStream_ORAddress& original);

   inline ASN1T_EXPStream_ORAddress& getData () { return msgData; }
   inline const ASN1T_EXPStream_ORAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_ORAddress* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_ORAddress& getCopy (ASN1T_EXPStream_ORAddress* pDstData = 0);
   ASN1T_EXPStream_ORAddress* newCopy ();

   inline ASN1C_EXPStream_ORAddress& operator= (ASN1C_EXPStream_ORAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_ORAddress (ASN1CTXT* pctxt,
   ASN1T_EXPStream_ORAddress *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_ORAddress
   (const char* name, ASN1T_EXPStream_ORAddress* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_ORAddress
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_ORAddress* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_ORAddress (ASN1ConstCharPtr name, ASN1T_EXPStream_ORAddress* pValue, ASN1T_EXPStream_ORAddress* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_ORAddress (ASN1CTXT *pctxt, ASN1T_EXPStream_ORAddress* pSrcValue, ASN1T_EXPStream_ORAddress* pDstValue);

EXTERN void asn1Free_EXPStream_ORAddress
   (ASN1CTXT *pctxt, ASN1T_EXPStream_ORAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  DirectoryString                                           */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_DirectoryString_utf8String 1
#define T_EXPStream_DirectoryString_printableString 2
#define T_EXPStream_DirectoryString_teletexString 3
#define T_EXPStream_DirectoryString_universalString 4
#define T_EXPStream_DirectoryString_bmpString 5

class EXTERN ASN1C_EXPStream_DirectoryString;

struct EXTERN ASN1T_EXPStream_DirectoryString : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_DirectoryString () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_DirectoryString (ASN1C_EXPStream_DirectoryString& srcData);
   ~ASN1T_EXPStream_DirectoryString ();
} ;

class EXTERN ASN1C_EXPStream_DirectoryString :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_DirectoryString& msgData;
public:
   ASN1C_EXPStream_DirectoryString (ASN1T_EXPStream_DirectoryString& data);
   ASN1C_EXPStream_DirectoryString (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_DirectoryString& data);
   ASN1C_EXPStream_DirectoryString (ASN1C_EXPStream_DirectoryString& original);

   inline ASN1T_EXPStream_DirectoryString& getData () { return msgData; }
   inline const ASN1T_EXPStream_DirectoryString& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_DirectoryString* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_DirectoryString& getCopy (ASN1T_EXPStream_DirectoryString* pDstData = 0);
   ASN1T_EXPStream_DirectoryString* newCopy ();

   inline ASN1C_EXPStream_DirectoryString& operator= (ASN1C_EXPStream_DirectoryString& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_DirectoryString (ASN1CTXT* pctxt,
   ASN1T_EXPStream_DirectoryString *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_DirectoryString
   (const char* name, ASN1T_EXPStream_DirectoryString* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_DirectoryString
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_DirectoryString* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_DirectoryString (ASN1ConstCharPtr name, ASN1T_EXPStream_DirectoryString* pValue, ASN1T_EXPStream_DirectoryString* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_DirectoryString (ASN1CTXT *pctxt, ASN1T_EXPStream_DirectoryString* pSrcValue, ASN1T_EXPStream_DirectoryString* pDstValue);

EXTERN void asn1Free_EXPStream_DirectoryString
   (ASN1CTXT *pctxt, ASN1T_EXPStream_DirectoryString* pvalue);

/**************************************************************/
/*                                                            */
/*  X520name                                                  */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520name_utf8String 1
#define T_EXPStream_X520name_printableString 2
#define T_EXPStream_X520name_teletexString 3
#define T_EXPStream_X520name_universalString 4
#define T_EXPStream_X520name_bmpString  5

class EXTERN ASN1C_EXPStream_X520name;

struct EXTERN ASN1T_EXPStream_X520name : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520name () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520name (ASN1C_EXPStream_X520name& srcData);
   ~ASN1T_EXPStream_X520name ();
} ;

class EXTERN ASN1C_EXPStream_X520name :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520name& msgData;
public:
   ASN1C_EXPStream_X520name (ASN1T_EXPStream_X520name& data);
   ASN1C_EXPStream_X520name (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520name& data);
   ASN1C_EXPStream_X520name (ASN1C_EXPStream_X520name& original);

   inline ASN1T_EXPStream_X520name& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520name& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520name* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520name& getCopy (ASN1T_EXPStream_X520name* pDstData = 0);
   ASN1T_EXPStream_X520name* newCopy ();

   inline ASN1C_EXPStream_X520name& operator= (ASN1C_EXPStream_X520name& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520name (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520name *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520name
   (const char* name, ASN1T_EXPStream_X520name* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520name
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520name* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520name (ASN1ConstCharPtr name, ASN1T_EXPStream_X520name* pValue, ASN1T_EXPStream_X520name* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520name (ASN1CTXT *pctxt, ASN1T_EXPStream_X520name* pSrcValue, ASN1T_EXPStream_X520name* pDstValue);

EXTERN void asn1Free_EXPStream_X520name
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520name* pvalue);

/**************************************************************/
/*                                                            */
/*  X520CommonName                                            */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520CommonName_utf8String 1
#define T_EXPStream_X520CommonName_printableString 2
#define T_EXPStream_X520CommonName_teletexString 3
#define T_EXPStream_X520CommonName_universalString 4
#define T_EXPStream_X520CommonName_bmpString 5

class EXTERN ASN1C_EXPStream_X520CommonName;

struct EXTERN ASN1T_EXPStream_X520CommonName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520CommonName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520CommonName (ASN1C_EXPStream_X520CommonName& srcData);
   ~ASN1T_EXPStream_X520CommonName ();
} ;

class EXTERN ASN1C_EXPStream_X520CommonName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520CommonName& msgData;
public:
   ASN1C_EXPStream_X520CommonName (ASN1T_EXPStream_X520CommonName& data);
   ASN1C_EXPStream_X520CommonName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520CommonName& data);
   ASN1C_EXPStream_X520CommonName (ASN1C_EXPStream_X520CommonName& original);

   inline ASN1T_EXPStream_X520CommonName& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520CommonName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520CommonName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520CommonName& getCopy (ASN1T_EXPStream_X520CommonName* pDstData = 0);
   ASN1T_EXPStream_X520CommonName* newCopy ();

   inline ASN1C_EXPStream_X520CommonName& operator= (ASN1C_EXPStream_X520CommonName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520CommonName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520CommonName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520CommonName
   (const char* name, ASN1T_EXPStream_X520CommonName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520CommonName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520CommonName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520CommonName (ASN1ConstCharPtr name, ASN1T_EXPStream_X520CommonName* pValue, ASN1T_EXPStream_X520CommonName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520CommonName (ASN1CTXT *pctxt, ASN1T_EXPStream_X520CommonName* pSrcValue, ASN1T_EXPStream_X520CommonName* pDstValue);

EXTERN void asn1Free_EXPStream_X520CommonName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520CommonName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520LocalityName                                          */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520LocalityName_utf8String 1
#define T_EXPStream_X520LocalityName_printableString 2
#define T_EXPStream_X520LocalityName_teletexString 3
#define T_EXPStream_X520LocalityName_universalString 4
#define T_EXPStream_X520LocalityName_bmpString 5

class EXTERN ASN1C_EXPStream_X520LocalityName;

struct EXTERN ASN1T_EXPStream_X520LocalityName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520LocalityName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520LocalityName (ASN1C_EXPStream_X520LocalityName& srcData);
   ~ASN1T_EXPStream_X520LocalityName ();
} ;

class EXTERN ASN1C_EXPStream_X520LocalityName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520LocalityName& msgData;
public:
   ASN1C_EXPStream_X520LocalityName (ASN1T_EXPStream_X520LocalityName& data);
   ASN1C_EXPStream_X520LocalityName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520LocalityName& data);
   ASN1C_EXPStream_X520LocalityName (ASN1C_EXPStream_X520LocalityName& original);

   inline ASN1T_EXPStream_X520LocalityName& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520LocalityName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520LocalityName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520LocalityName& getCopy (ASN1T_EXPStream_X520LocalityName* pDstData = 0);
   ASN1T_EXPStream_X520LocalityName* newCopy ();

   inline ASN1C_EXPStream_X520LocalityName& operator= (ASN1C_EXPStream_X520LocalityName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520LocalityName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520LocalityName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520LocalityName
   (const char* name, ASN1T_EXPStream_X520LocalityName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520LocalityName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520LocalityName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520LocalityName (ASN1ConstCharPtr name, ASN1T_EXPStream_X520LocalityName* pValue, ASN1T_EXPStream_X520LocalityName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520LocalityName (ASN1CTXT *pctxt, ASN1T_EXPStream_X520LocalityName* pSrcValue, ASN1T_EXPStream_X520LocalityName* pDstValue);

EXTERN void asn1Free_EXPStream_X520LocalityName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520LocalityName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520StateOrProvinceName                                   */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520StateOrProvinceName_utf8String 1
#define T_EXPStream_X520StateOrProvinceName_printableString 2
#define T_EXPStream_X520StateOrProvinceName_teletexString 3
#define T_EXPStream_X520StateOrProvinceName_universalString 4
#define T_EXPStream_X520StateOrProvinceName_bmpString 5

class EXTERN ASN1C_EXPStream_X520StateOrProvinceName;

struct EXTERN ASN1T_EXPStream_X520StateOrProvinceName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520StateOrProvinceName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520StateOrProvinceName (ASN1C_EXPStream_X520StateOrProvinceName& srcData);
   ~ASN1T_EXPStream_X520StateOrProvinceName ();
} ;

class EXTERN ASN1C_EXPStream_X520StateOrProvinceName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520StateOrProvinceName& msgData;
public:
   ASN1C_EXPStream_X520StateOrProvinceName (ASN1T_EXPStream_X520StateOrProvinceName& data);
   ASN1C_EXPStream_X520StateOrProvinceName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520StateOrProvinceName& data);
   ASN1C_EXPStream_X520StateOrProvinceName (ASN1C_EXPStream_X520StateOrProvinceName& original);

   inline ASN1T_EXPStream_X520StateOrProvinceName& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520StateOrProvinceName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520StateOrProvinceName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520StateOrProvinceName& getCopy (ASN1T_EXPStream_X520StateOrProvinceName* pDstData = 0);
   ASN1T_EXPStream_X520StateOrProvinceName* newCopy ();

   inline ASN1C_EXPStream_X520StateOrProvinceName& operator= (ASN1C_EXPStream_X520StateOrProvinceName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520StateOrProvinceName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520StateOrProvinceName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520StateOrProvinceName
   (const char* name, ASN1T_EXPStream_X520StateOrProvinceName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520StateOrProvinceName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520StateOrProvinceName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520StateOrProvinceName (ASN1ConstCharPtr name, ASN1T_EXPStream_X520StateOrProvinceName* pValue, ASN1T_EXPStream_X520StateOrProvinceName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520StateOrProvinceName (ASN1CTXT *pctxt, ASN1T_EXPStream_X520StateOrProvinceName* pSrcValue, ASN1T_EXPStream_X520StateOrProvinceName* pDstValue);

EXTERN void asn1Free_EXPStream_X520StateOrProvinceName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520StateOrProvinceName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520OrganizationName                                      */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520OrganizationName_utf8String 1
#define T_EXPStream_X520OrganizationName_printableString 2
#define T_EXPStream_X520OrganizationName_teletexString 3
#define T_EXPStream_X520OrganizationName_universalString 4
#define T_EXPStream_X520OrganizationName_bmpString 5

class EXTERN ASN1C_EXPStream_X520OrganizationName;

struct EXTERN ASN1T_EXPStream_X520OrganizationName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520OrganizationName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520OrganizationName (ASN1C_EXPStream_X520OrganizationName& srcData);
   ~ASN1T_EXPStream_X520OrganizationName ();
} ;

class EXTERN ASN1C_EXPStream_X520OrganizationName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520OrganizationName& msgData;
public:
   ASN1C_EXPStream_X520OrganizationName (ASN1T_EXPStream_X520OrganizationName& data);
   ASN1C_EXPStream_X520OrganizationName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520OrganizationName& data);
   ASN1C_EXPStream_X520OrganizationName (ASN1C_EXPStream_X520OrganizationName& original);

   inline ASN1T_EXPStream_X520OrganizationName& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520OrganizationName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520OrganizationName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520OrganizationName& getCopy (ASN1T_EXPStream_X520OrganizationName* pDstData = 0);
   ASN1T_EXPStream_X520OrganizationName* newCopy ();

   inline ASN1C_EXPStream_X520OrganizationName& operator= (ASN1C_EXPStream_X520OrganizationName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520OrganizationName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520OrganizationName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520OrganizationName
   (const char* name, ASN1T_EXPStream_X520OrganizationName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520OrganizationName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520OrganizationName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520OrganizationName (ASN1ConstCharPtr name, ASN1T_EXPStream_X520OrganizationName* pValue, ASN1T_EXPStream_X520OrganizationName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520OrganizationName (ASN1CTXT *pctxt, ASN1T_EXPStream_X520OrganizationName* pSrcValue, ASN1T_EXPStream_X520OrganizationName* pDstValue);

EXTERN void asn1Free_EXPStream_X520OrganizationName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520OrganizationName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520OrganizationalUnitName                                */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520OrganizationalUnitName_utf8String 1
#define T_EXPStream_X520OrganizationalUnitName_printableString 2
#define T_EXPStream_X520OrganizationalUnitName_teletexString 3
#define T_EXPStream_X520OrganizationalUnitName_universalString 4
#define T_EXPStream_X520OrganizationalUnitName_bmpString 5

class EXTERN ASN1C_EXPStream_X520OrganizationalUnitName;

struct EXTERN ASN1T_EXPStream_X520OrganizationalUnitName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520OrganizationalUnitName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520OrganizationalUnitName (ASN1C_EXPStream_X520OrganizationalUnitName& srcData);
   ~ASN1T_EXPStream_X520OrganizationalUnitName ();
} ;

class EXTERN ASN1C_EXPStream_X520OrganizationalUnitName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520OrganizationalUnitName& msgData;
public:
   ASN1C_EXPStream_X520OrganizationalUnitName (ASN1T_EXPStream_X520OrganizationalUnitName& data);
   ASN1C_EXPStream_X520OrganizationalUnitName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520OrganizationalUnitName& data);
   ASN1C_EXPStream_X520OrganizationalUnitName (ASN1C_EXPStream_X520OrganizationalUnitName& original);

   inline ASN1T_EXPStream_X520OrganizationalUnitName& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520OrganizationalUnitName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520OrganizationalUnitName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520OrganizationalUnitName& getCopy (ASN1T_EXPStream_X520OrganizationalUnitName* pDstData = 0);
   ASN1T_EXPStream_X520OrganizationalUnitName* newCopy ();

   inline ASN1C_EXPStream_X520OrganizationalUnitName& operator= (ASN1C_EXPStream_X520OrganizationalUnitName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520OrganizationalUnitName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520OrganizationalUnitName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520OrganizationalUnitName
   (const char* name, ASN1T_EXPStream_X520OrganizationalUnitName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520OrganizationalUnitName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520OrganizationalUnitName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520OrganizationalUnitName (ASN1ConstCharPtr name, ASN1T_EXPStream_X520OrganizationalUnitName* pValue, ASN1T_EXPStream_X520OrganizationalUnitName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520OrganizationalUnitName (ASN1CTXT *pctxt, ASN1T_EXPStream_X520OrganizationalUnitName* pSrcValue, ASN1T_EXPStream_X520OrganizationalUnitName* pDstValue);

EXTERN void asn1Free_EXPStream_X520OrganizationalUnitName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520OrganizationalUnitName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520Title                                                 */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520Title_utf8String 1
#define T_EXPStream_X520Title_printableString 2
#define T_EXPStream_X520Title_teletexString 3
#define T_EXPStream_X520Title_universalString 4
#define T_EXPStream_X520Title_bmpString 5

class EXTERN ASN1C_EXPStream_X520Title;

struct EXTERN ASN1T_EXPStream_X520Title : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520Title () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520Title (ASN1C_EXPStream_X520Title& srcData);
   ~ASN1T_EXPStream_X520Title ();
} ;

class EXTERN ASN1C_EXPStream_X520Title :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520Title& msgData;
public:
   ASN1C_EXPStream_X520Title (ASN1T_EXPStream_X520Title& data);
   ASN1C_EXPStream_X520Title (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520Title& data);
   ASN1C_EXPStream_X520Title (ASN1C_EXPStream_X520Title& original);

   inline ASN1T_EXPStream_X520Title& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520Title& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520Title* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520Title& getCopy (ASN1T_EXPStream_X520Title* pDstData = 0);
   ASN1T_EXPStream_X520Title* newCopy ();

   inline ASN1C_EXPStream_X520Title& operator= (ASN1C_EXPStream_X520Title& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520Title (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520Title *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520Title
   (const char* name, ASN1T_EXPStream_X520Title* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520Title
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520Title* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520Title (ASN1ConstCharPtr name, ASN1T_EXPStream_X520Title* pValue, ASN1T_EXPStream_X520Title* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520Title (ASN1CTXT *pctxt, ASN1T_EXPStream_X520Title* pSrcValue, ASN1T_EXPStream_X520Title* pDstValue);

EXTERN void asn1Free_EXPStream_X520Title
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520Title* pvalue);

/**************************************************************/
/*                                                            */
/*  X520CountrySerialUTF8liUcubeName                          */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520CountrySerialUTF8liUcubeName_utf8String 1
#define T_EXPStream_X520CountrySerialUTF8liUcubeName_printableString 2
#define T_EXPStream_X520CountrySerialUTF8liUcubeName_teletexString 3
#define T_EXPStream_X520CountrySerialUTF8liUcubeName_universalString 4
#define T_EXPStream_X520CountrySerialUTF8liUcubeName_bmpString 5

class EXTERN ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName;

struct EXTERN ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName (ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName& srcData);
   ~ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName ();
} ;

class EXTERN ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName& msgData;
public:
   ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName (ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName& data);
   ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName& data);
   ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName (ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName& original);

   inline ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName& getCopy (ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pDstData = 0);
   ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* newCopy ();

   inline ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName& operator= (ASN1C_EXPStream_X520CountrySerialUTF8liUcubeName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520CountrySerialUTF8liUcubeName (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520CountrySerialUTF8liUcubeName
   (const char* name, ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520CountrySerialUTF8liUcubeName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520CountrySerialUTF8liUcubeName (ASN1ConstCharPtr name, ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pValue, ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520CountrySerialUTF8liUcubeName (ASN1CTXT *pctxt, ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pSrcValue, ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pDstValue);

EXTERN void asn1Free_EXPStream_X520CountrySerialUTF8liUcubeName
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520CountrySerialUTF8liUcubeName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520Pseudonym                                             */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_EXPStream_X520Pseudonym_utf8String 1
#define T_EXPStream_X520Pseudonym_printableString 2
#define T_EXPStream_X520Pseudonym_teletexString 3
#define T_EXPStream_X520Pseudonym_universalString 4
#define T_EXPStream_X520Pseudonym_bmpString 5

class EXTERN ASN1C_EXPStream_X520Pseudonym;

struct EXTERN ASN1T_EXPStream_X520Pseudonym : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1PrintableString printableString;
      /* t = 3 */
      ASN1T61String teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXPStream_X520Pseudonym () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_EXPStream_X520Pseudonym (ASN1C_EXPStream_X520Pseudonym& srcData);
   ~ASN1T_EXPStream_X520Pseudonym ();
} ;

class EXTERN ASN1C_EXPStream_X520Pseudonym :
   public ASN1CType
{
protected:
   ASN1T_EXPStream_X520Pseudonym& msgData;
public:
   ASN1C_EXPStream_X520Pseudonym (ASN1T_EXPStream_X520Pseudonym& data);
   ASN1C_EXPStream_X520Pseudonym (
      ASN1MessageBufferIF& msgBuf, ASN1T_EXPStream_X520Pseudonym& data);
   ASN1C_EXPStream_X520Pseudonym (ASN1C_EXPStream_X520Pseudonym& original);

   inline ASN1T_EXPStream_X520Pseudonym& getData () { return msgData; }
   inline const ASN1T_EXPStream_X520Pseudonym& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_EXPStream_X520Pseudonym* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_EXPStream_X520Pseudonym& getCopy (ASN1T_EXPStream_X520Pseudonym* pDstData = 0);
   ASN1T_EXPStream_X520Pseudonym* newCopy ();

   inline ASN1C_EXPStream_X520Pseudonym& operator= (ASN1C_EXPStream_X520Pseudonym& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_EXPStream_X520Pseudonym (ASN1CTXT* pctxt,
   ASN1T_EXPStream_X520Pseudonym *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_EXPStream_X520Pseudonym
   (const char* name, ASN1T_EXPStream_X520Pseudonym* pvalue);

EXTERN int asn1PrtToStrm_EXPStream_X520Pseudonym
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_EXPStream_X520Pseudonym* pvalue);

EXTERN OSBOOL asn1Compare_EXPStream_X520Pseudonym (ASN1ConstCharPtr name, ASN1T_EXPStream_X520Pseudonym* pValue, ASN1T_EXPStream_X520Pseudonym* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_EXPStream_X520Pseudonym (ASN1CTXT *pctxt, ASN1T_EXPStream_X520Pseudonym* pSrcValue, ASN1T_EXPStream_X520Pseudonym* pDstValue);

EXTERN void asn1Free_EXPStream_X520Pseudonym
   (ASN1CTXT *pctxt, ASN1T_EXPStream_X520Pseudonym* pvalue);

/* Value definitions */

#define ASN1V_EXPStream_ub_name 32768
#define ASN1V_EXPStream_ub_common_name 64
#define ASN1V_EXPStream_ub_locality_name 128
#define ASN1V_EXPStream_ub_state_name 128
#define ASN1V_EXPStream_ub_organization_name 64
#define ASN1V_EXPStream_ub_organizational_unit_name 64
#define ASN1V_EXPStream_ub_title 64
#define ASN1V_EXPStream_ub_serial_number 64
#define ASN1V_EXPStream_ub_match 128
#define ASN1V_EXPStream_ub_emailaddress_length 128
#define ASN1V_EXPStream_ub_common_name_length 64
#define ASN1V_EXPStream_ub_country_name_alpha_length 2
#define ASN1V_EXPStream_ub_country_name_numeric_length 3
#define ASN1V_EXPStream_ub_domain_defined_attributes 4
#define ASN1V_EXPStream_ub_domain_defined_attribute_type_length 8
#define ASN1V_EXPStream_ub_domain_defined_attribute_value_length 128
#define ASN1V_EXPStream_ub_domain_name_length 16
#define ASN1V_EXPStream_ub_extension_attributes 256
#define ASN1V_EXPStream_ub_e163_4_number_length 15
#define ASN1V_EXPStream_ub_e163_4_sub_address_length 40
#define ASN1V_EXPStream_ub_generation_qualifier_length 3
#define ASN1V_EXPStream_ub_given_name_length 16
#define ASN1V_EXPStream_ub_initials_length 5
#define ASN1V_EXPStream_ub_integer_options 256
#define ASN1V_EXPStream_ub_numeric_user_id_length 32
#define ASN1V_EXPStream_ub_organization_name_length 64
#define ASN1V_EXPStream_ub_organizational_unit_name_length 32
#define ASN1V_EXPStream_ub_organizational_units 4
#define ASN1V_EXPStream_ub_pds_name_length 16
#define ASN1V_EXPStream_ub_pds_parameter_length 30
#define ASN1V_EXPStream_ub_pds_physical_address_lines 6
#define ASN1V_EXPStream_ub_postal_code_length 16
#define ASN1V_EXPStream_ub_pseudonym 128
#define ASN1V_EXPStream_ub_surname_length 40
#define ASN1V_EXPStream_ub_terminal_id_length 24
#define ASN1V_EXPStream_ub_unformatted_address_length 180
#define ASN1V_EXPStream_ub_x121_address_length 16
extern EXTERN ASN1OBJID EXPStream_id_pkix;
extern EXTERN ASN1OBJID EXPStream_id_pe;
extern EXTERN ASN1OBJID EXPStream_id_qt;
extern EXTERN ASN1OBJID EXPStream_id_kp;
extern EXTERN ASN1OBJID EXPStream_id_ad;
extern EXTERN ASN1OBJID EXPStream_id_ad_ocsp;
extern EXTERN ASN1OBJID EXPStream_id_ad_caIssuers;
extern EXTERN ASN1OBJID EXPStream_id_ad_timeStamping;
extern EXTERN ASN1OBJID EXPStream_id_ad_caRepository;
extern EXTERN ASN1OBJID EXPStream_id_qt_cps;
extern EXTERN ASN1OBJID EXPStream_id_qt_unotice;
extern EXTERN ASN1OBJID EXPStream_id_at_name;
extern EXTERN ASN1OBJID EXPStream_id_at_surname;
extern EXTERN ASN1OBJID EXPStream_id_at_givenName;
extern EXTERN ASN1OBJID EXPStream_id_at_commonName;
extern EXTERN ASN1OBJID EXPStream_id_at_localityName;
extern EXTERN ASN1OBJID EXPStream_id_at_stateOrProvinceName;
extern EXTERN ASN1OBJID EXPStream_id_at_organizationName;
extern EXTERN ASN1OBJID EXPStream_id_at_organizationalUnitName;
extern EXTERN ASN1OBJID EXPStream_id_at_title;
extern EXTERN ASN1OBJID EXPStream_id_at_countryName;
extern EXTERN ASN1OBJID EXPStream_id_at_serialNumber;
#define ASN1V_EXPStream_ub_ucube_name 128
extern EXTERN ASN1OBJID EXPStream_id_at_pseudonym;
extern EXTERN ASN1OBJID EXPStream_id_domainComponent;
extern EXTERN ASN1OBJID EXPStream_pkcs_9;
extern EXTERN ASN1OBJID EXPStream_id_emailAddress;

#include "ASN1CSeqOfList.h"
#include "ASN1CBitStr.h"

/**************************************************************/
/*                                                            */
/*  AnotherName                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_AnotherName;

struct EXTERN ASN1T_IMPStream_AnotherName : public ASN1TPDU {
   ASN1TObjId type_id;
   ASN1TOpenType value;
   ASN1T_IMPStream_AnotherName ();
   ASN1T_IMPStream_AnotherName (ASN1C_IMPStream_AnotherName& srcData);
   ~ASN1T_IMPStream_AnotherName ();
} ;

class EXTERN ASN1C_IMPStream_AnotherName :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_AnotherName& msgData;
public:
   ASN1C_IMPStream_AnotherName (ASN1T_IMPStream_AnotherName& data);
   ASN1C_IMPStream_AnotherName (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_AnotherName& data);
   ASN1C_IMPStream_AnotherName (ASN1C_IMPStream_AnotherName& original);

   inline ASN1T_IMPStream_AnotherName& getData () { return msgData; }
   inline const ASN1T_IMPStream_AnotherName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_AnotherName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_AnotherName& getCopy (ASN1T_IMPStream_AnotherName* pDstData = 0);
   ASN1T_IMPStream_AnotherName* newCopy ();

   inline ASN1C_IMPStream_AnotherName& operator= (ASN1C_IMPStream_AnotherName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_AnotherName (ASN1CTXT* pctxt,
   ASN1T_IMPStream_AnotherName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_AnotherName
   (const char* name, ASN1T_IMPStream_AnotherName* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_AnotherName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_AnotherName* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_AnotherName (ASN1ConstCharPtr name, ASN1T_IMPStream_AnotherName* pValue, ASN1T_IMPStream_AnotherName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_AnotherName (ASN1CTXT *pctxt, ASN1T_IMPStream_AnotherName* pSrcValue, ASN1T_IMPStream_AnotherName* pDstValue);

EXTERN void asn1Free_IMPStream_AnotherName
   (ASN1CTXT *pctxt, ASN1T_IMPStream_AnotherName* pvalue);

/**************************************************************/
/*                                                            */
/*  EDIPartyName                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_EDIPartyName;

struct EXTERN ASN1T_IMPStream_EDIPartyName : public ASN1TPDU {
   struct {
      unsigned nameAssignerPresent : 1;
   } m;
   ASN1T_EXPStream_DirectoryString nameAssigner;
   ASN1T_EXPStream_DirectoryString partyName;
   ASN1T_IMPStream_EDIPartyName ();
   ASN1T_IMPStream_EDIPartyName (ASN1C_IMPStream_EDIPartyName& srcData);
   ~ASN1T_IMPStream_EDIPartyName ();
} ;

class EXTERN ASN1C_IMPStream_EDIPartyName :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_EDIPartyName& msgData;
public:
   ASN1C_IMPStream_EDIPartyName (ASN1T_IMPStream_EDIPartyName& data);
   ASN1C_IMPStream_EDIPartyName (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_EDIPartyName& data);
   ASN1C_IMPStream_EDIPartyName (ASN1C_IMPStream_EDIPartyName& original);

   inline ASN1T_IMPStream_EDIPartyName& getData () { return msgData; }
   inline const ASN1T_IMPStream_EDIPartyName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_EDIPartyName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_EDIPartyName& getCopy (ASN1T_IMPStream_EDIPartyName* pDstData = 0);
   ASN1T_IMPStream_EDIPartyName* newCopy ();

   inline ASN1C_IMPStream_EDIPartyName& operator= (ASN1C_IMPStream_EDIPartyName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_EDIPartyName (ASN1CTXT* pctxt,
   ASN1T_IMPStream_EDIPartyName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_EDIPartyName
   (const char* name, ASN1T_IMPStream_EDIPartyName* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_EDIPartyName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_EDIPartyName* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_EDIPartyName (ASN1ConstCharPtr name, ASN1T_IMPStream_EDIPartyName* pValue, ASN1T_IMPStream_EDIPartyName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_EDIPartyName (ASN1CTXT *pctxt, ASN1T_IMPStream_EDIPartyName* pSrcValue, ASN1T_IMPStream_EDIPartyName* pDstValue);

EXTERN void asn1Free_IMPStream_EDIPartyName
   (ASN1CTXT *pctxt, ASN1T_IMPStream_EDIPartyName* pvalue);

/**************************************************************/
/*                                                            */
/*  GeneralName                                               */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_IMPStream_GeneralName_otherName 1
#define T_IMPStream_GeneralName_rfc822Name 2
#define T_IMPStream_GeneralName_dNSName 3
#define T_IMPStream_GeneralName_x400Address 4
#define T_IMPStream_GeneralName_directoryName 5
#define T_IMPStream_GeneralName_ediPartyName 6
#define T_IMPStream_GeneralName_uniformResourceIdentifier 7
#define T_IMPStream_GeneralName_iPAddress 8
#define T_IMPStream_GeneralName_registeredID 9

class EXTERN ASN1C_IMPStream_GeneralName;

struct EXTERN ASN1T_IMPStream_GeneralName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_IMPStream_AnotherName *otherName;
      /* t = 2 */
      ASN1IA5String rfc822Name;
      /* t = 3 */
      ASN1IA5String dNSName;
      /* t = 4 */
      ASN1T_EXPStream_ORAddress *x400Address;
      /* t = 5 */
      ASN1T_EXPStream_Name *directoryName;
      /* t = 6 */
      ASN1T_IMPStream_EDIPartyName *ediPartyName;
      /* t = 7 */
      ASN1IA5String uniformResourceIdentifier;
      /* t = 8 */
      ASN1TDynOctStr *iPAddress;
      /* t = 9 */
      ASN1TObjId *registeredID;
   } u;
   ASN1T_IMPStream_GeneralName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_IMPStream_GeneralName (ASN1C_IMPStream_GeneralName& srcData);
   ~ASN1T_IMPStream_GeneralName ();
} ;

class EXTERN ASN1C_IMPStream_GeneralName :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_GeneralName& msgData;
public:
   ASN1C_IMPStream_GeneralName (ASN1T_IMPStream_GeneralName& data);
   ASN1C_IMPStream_GeneralName (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_GeneralName& data);
   ASN1C_IMPStream_GeneralName (ASN1C_IMPStream_GeneralName& original);

   inline ASN1T_IMPStream_GeneralName& getData () { return msgData; }
   inline const ASN1T_IMPStream_GeneralName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_GeneralName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_GeneralName& getCopy (ASN1T_IMPStream_GeneralName* pDstData = 0);
   ASN1T_IMPStream_GeneralName* newCopy ();

   inline ASN1C_IMPStream_GeneralName& operator= (ASN1C_IMPStream_GeneralName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_GeneralName (ASN1CTXT* pctxt,
   ASN1T_IMPStream_GeneralName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_GeneralName
   (const char* name, ASN1T_IMPStream_GeneralName* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_GeneralName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_GeneralName* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_GeneralName (ASN1ConstCharPtr name, ASN1T_IMPStream_GeneralName* pValue, ASN1T_IMPStream_GeneralName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_GeneralName (ASN1CTXT *pctxt, ASN1T_IMPStream_GeneralName* pSrcValue, ASN1T_IMPStream_GeneralName* pDstValue);

EXTERN void asn1Free_IMPStream_GeneralName
   (ASN1CTXT *pctxt, ASN1T_IMPStream_GeneralName* pvalue);

/**************************************************************/
/*                                                            */
/*  GeneralNames                                              */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_GeneralName */
typedef struct EXTERN ASN1T_IMPStream_GeneralNames : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_GeneralNames();
} ASN1T_IMPStream_GeneralNames;

class EXTERN ASN1C_IMPStream_GeneralNames :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_GeneralNames& msgData;
public:
   ASN1C_IMPStream_GeneralNames (ASN1T_IMPStream_GeneralNames& data);
   ASN1C_IMPStream_GeneralNames (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_GeneralNames& data);
   ASN1C_IMPStream_GeneralNames (ASN1C_IMPStream_GeneralNames& original);

   inline ASN1T_IMPStream_GeneralNames& getData () { return msgData; }
   inline const ASN1T_IMPStream_GeneralNames& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_GeneralNames* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_GeneralNames& getCopy (ASN1T_IMPStream_GeneralNames* pDstData = 0);
   ASN1T_IMPStream_GeneralNames* newCopy ();

   ASN1C_IMPStream_GeneralNames& operator= (ASN1C_IMPStream_GeneralNames& srcData);
   void Append (ASN1T_IMPStream_GeneralName *elem);
   ASN1T_IMPStream_GeneralName *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_GeneralNames (ASN1CTXT* pctxt,
   ASN1T_IMPStream_GeneralNames *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_GeneralNames
   (const char* name, ASN1T_IMPStream_GeneralNames* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_GeneralNames
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_GeneralNames* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_GeneralNames (ASN1ConstCharPtr name, ASN1T_IMPStream_GeneralNames* pValue, ASN1T_IMPStream_GeneralNames* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_GeneralNames (ASN1CTXT *pctxt, ASN1T_IMPStream_GeneralNames* pSrcValue, ASN1T_IMPStream_GeneralNames* pDstValue);

EXTERN void asn1Free_IMPStream_GeneralNames
   (ASN1CTXT *pctxt, ASN1T_IMPStream_GeneralNames* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectAltName                                            */
/*                                                            */
/**************************************************************/

typedef ASN1T_IMPStream_GeneralNames ASN1T_IMPStream_SubjectAltName;

class EXTERN ASN1C_IMPStream_SubjectAltName :
   public ASN1C_IMPStream_GeneralNames
{
protected:
public:
   ASN1C_IMPStream_SubjectAltName (ASN1T_IMPStream_SubjectAltName& data);
   ASN1C_IMPStream_SubjectAltName (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_SubjectAltName& data);
   ASN1C_IMPStream_SubjectAltName (ASN1C_IMPStream_SubjectAltName& original);

   inline ASN1T_IMPStream_SubjectAltName& getData () { return msgData; }
   inline const ASN1T_IMPStream_SubjectAltName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_SubjectAltName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_SubjectAltName& getCopy (ASN1T_IMPStream_SubjectAltName* pDstData = 0);
   ASN1T_IMPStream_SubjectAltName* newCopy ();

   inline ASN1C_IMPStream_SubjectAltName& operator= (ASN1C_IMPStream_SubjectAltName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_SubjectAltName (ASN1CTXT* pctxt,
   ASN1T_IMPStream_SubjectAltName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_SubjectAltName
   (const char* name, ASN1T_IMPStream_SubjectAltName* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_SubjectAltName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_SubjectAltName* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_SubjectAltName (ASN1ConstCharPtr name, ASN1T_IMPStream_SubjectAltName* pValue, ASN1T_IMPStream_SubjectAltName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_SubjectAltName (ASN1CTXT *pctxt, ASN1T_IMPStream_SubjectAltName* pSrcValue, ASN1T_IMPStream_SubjectAltName* pDstValue);

EXTERN void asn1Free_IMPStream_SubjectAltName
   (ASN1CTXT *pctxt, ASN1T_IMPStream_SubjectAltName* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyIdentifier                                             */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_IMPStream_KeyIdentifier;

class EXTERN ASN1C_IMPStream_KeyIdentifier :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_KeyIdentifier& msgData;
public:
   ASN1C_IMPStream_KeyIdentifier (ASN1T_IMPStream_KeyIdentifier& data);
   ASN1C_IMPStream_KeyIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_KeyIdentifier& data);
   ASN1C_IMPStream_KeyIdentifier (ASN1C_IMPStream_KeyIdentifier& original);

   inline ASN1T_IMPStream_KeyIdentifier& getData () { return msgData; }
   inline const ASN1T_IMPStream_KeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_KeyIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_KeyIdentifier& getCopy (ASN1T_IMPStream_KeyIdentifier* pDstData = 0);
   ASN1T_IMPStream_KeyIdentifier* newCopy ();

   inline ASN1C_IMPStream_KeyIdentifier& operator= (ASN1C_IMPStream_KeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_KeyIdentifier (ASN1CTXT* pctxt,
   ASN1T_IMPStream_KeyIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_KeyIdentifier
   (const char* name, ASN1T_IMPStream_KeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_KeyIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_KeyIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_KeyIdentifier (ASN1ConstCharPtr name, ASN1T_IMPStream_KeyIdentifier* pValue, ASN1T_IMPStream_KeyIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_KeyIdentifier (ASN1CTXT *pctxt, ASN1T_IMPStream_KeyIdentifier* pSrcValue, ASN1T_IMPStream_KeyIdentifier* pDstValue);

EXTERN void asn1Free_IMPStream_KeyIdentifier
   (ASN1CTXT *pctxt, ASN1T_IMPStream_KeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectKeyIdentifier                                      */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_IMPStream_SubjectKeyIdentifier;

class EXTERN ASN1C_IMPStream_SubjectKeyIdentifier :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_SubjectKeyIdentifier& msgData;
public:
   ASN1C_IMPStream_SubjectKeyIdentifier (ASN1T_IMPStream_SubjectKeyIdentifier& data);
   ASN1C_IMPStream_SubjectKeyIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_SubjectKeyIdentifier& data);
   ASN1C_IMPStream_SubjectKeyIdentifier (ASN1C_IMPStream_SubjectKeyIdentifier& original);

   inline ASN1T_IMPStream_SubjectKeyIdentifier& getData () { return msgData; }
   inline const ASN1T_IMPStream_SubjectKeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_SubjectKeyIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_SubjectKeyIdentifier& getCopy (ASN1T_IMPStream_SubjectKeyIdentifier* pDstData = 0);
   ASN1T_IMPStream_SubjectKeyIdentifier* newCopy ();

   inline ASN1C_IMPStream_SubjectKeyIdentifier& operator= (ASN1C_IMPStream_SubjectKeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_SubjectKeyIdentifier (ASN1CTXT* pctxt,
   ASN1T_IMPStream_SubjectKeyIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_SubjectKeyIdentifier
   (const char* name, ASN1T_IMPStream_SubjectKeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_SubjectKeyIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_SubjectKeyIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_SubjectKeyIdentifier (ASN1ConstCharPtr name, ASN1T_IMPStream_SubjectKeyIdentifier* pValue, ASN1T_IMPStream_SubjectKeyIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_SubjectKeyIdentifier (ASN1CTXT *pctxt, ASN1T_IMPStream_SubjectKeyIdentifier* pSrcValue, ASN1T_IMPStream_SubjectKeyIdentifier* pDstValue);

EXTERN void asn1Free_IMPStream_SubjectKeyIdentifier
   (ASN1CTXT *pctxt, ASN1T_IMPStream_SubjectKeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyUsage                                                  */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_KeyUsage;

struct EXTERN ASN1T_IMPStream_KeyUsage {
   OSUINT32  numbits;
   OSOCTET data[2];
   // ctors
   ASN1T_IMPStream_KeyUsage () : numbits(0) {}
   ASN1T_IMPStream_KeyUsage (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits(_numbits) {
      memcpy (data, _data, sizeof(data));
   }
   ASN1T_IMPStream_KeyUsage (ASN1C_IMPStream_KeyUsage& srcData);
} ;

class EXTERN ASN1C_IMPStream_KeyUsage :
   public ASN1CBitStr
{
protected:
   ASN1T_IMPStream_KeyUsage& msgData;
public:
   // named bits
   enum { digitalSignature = 0, nonRepudiation = 1, keyEncipherment = 2, dataEncipherment = 3, keyAgreement = 4, keyCertSign = 5, cRLSign = 6, encipherOnly = 7, decipherOnly = 8 };

   ASN1C_IMPStream_KeyUsage (ASN1T_IMPStream_KeyUsage& data);
   ASN1C_IMPStream_KeyUsage (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_KeyUsage& data);
   ASN1C_IMPStream_KeyUsage (ASN1C_IMPStream_KeyUsage& original);

   inline ASN1T_IMPStream_KeyUsage& getData () { return msgData; }
   inline const ASN1T_IMPStream_KeyUsage& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_KeyUsage* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_KeyUsage& getCopy (ASN1T_IMPStream_KeyUsage* pDstData = 0);
   ASN1T_IMPStream_KeyUsage* newCopy ();

   ASN1C_IMPStream_KeyUsage& operator= (ASN1C_IMPStream_KeyUsage& srcData);
} ;

EXTERN int asn1BSD_IMPStream_KeyUsage (ASN1CTXT* pctxt,
   ASN1T_IMPStream_KeyUsage *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_KeyUsage
   (const char* name, ASN1T_IMPStream_KeyUsage* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_KeyUsage
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_KeyUsage* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_KeyUsage (ASN1ConstCharPtr name, ASN1T_IMPStream_KeyUsage* pValue, ASN1T_IMPStream_KeyUsage* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_KeyUsage (ASN1CTXT *pctxt, ASN1T_IMPStream_KeyUsage* pSrcValue, ASN1T_IMPStream_KeyUsage* pDstValue);

/**************************************************************/
/*                                                            */
/*  CertPolicyId                                              */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_IMPStream_CertPolicyId;

class EXTERN ASN1C_IMPStream_CertPolicyId :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_CertPolicyId& msgData;
public:
   ASN1C_IMPStream_CertPolicyId (ASN1T_IMPStream_CertPolicyId& data);
   ASN1C_IMPStream_CertPolicyId (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_CertPolicyId& data);
   ASN1C_IMPStream_CertPolicyId (ASN1C_IMPStream_CertPolicyId& original);

   inline ASN1T_IMPStream_CertPolicyId& getData () { return msgData; }
   inline const ASN1T_IMPStream_CertPolicyId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_CertPolicyId* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_CertPolicyId& getCopy (ASN1T_IMPStream_CertPolicyId* pDstData = 0);
   ASN1T_IMPStream_CertPolicyId* newCopy ();

   inline ASN1C_IMPStream_CertPolicyId& operator= (ASN1C_IMPStream_CertPolicyId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_CertPolicyId (ASN1CTXT* pctxt,
   ASN1T_IMPStream_CertPolicyId *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_CertPolicyId
   (const char* name, ASN1T_IMPStream_CertPolicyId* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_CertPolicyId
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_CertPolicyId* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_CertPolicyId (ASN1ConstCharPtr name, ASN1T_IMPStream_CertPolicyId* pValue, ASN1T_IMPStream_CertPolicyId* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_CertPolicyId (ASN1CTXT *pctxt, ASN1T_IMPStream_CertPolicyId* pSrcValue, ASN1T_IMPStream_CertPolicyId* pDstValue);

/**************************************************************/
/*                                                            */
/*  PolicyQualifierId                                         */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_IMPStream_PolicyQualifierId;

class EXTERN ASN1C_IMPStream_PolicyQualifierId :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_PolicyQualifierId& msgData;
public:
   ASN1C_IMPStream_PolicyQualifierId (ASN1T_IMPStream_PolicyQualifierId& data);
   ASN1C_IMPStream_PolicyQualifierId (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_PolicyQualifierId& data);
   ASN1C_IMPStream_PolicyQualifierId (ASN1C_IMPStream_PolicyQualifierId& original);

   inline ASN1T_IMPStream_PolicyQualifierId& getData () { return msgData; }
   inline const ASN1T_IMPStream_PolicyQualifierId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_PolicyQualifierId* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_PolicyQualifierId& getCopy (ASN1T_IMPStream_PolicyQualifierId* pDstData = 0);
   ASN1T_IMPStream_PolicyQualifierId* newCopy ();

   inline ASN1C_IMPStream_PolicyQualifierId& operator= (ASN1C_IMPStream_PolicyQualifierId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_PolicyQualifierId (ASN1CTXT* pctxt,
   ASN1T_IMPStream_PolicyQualifierId *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_PolicyQualifierId
   (const char* name, ASN1T_IMPStream_PolicyQualifierId* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_PolicyQualifierId
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyQualifierId* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_PolicyQualifierId (ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyQualifierId* pValue, ASN1T_IMPStream_PolicyQualifierId* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_PolicyQualifierId (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyQualifierId* pSrcValue, ASN1T_IMPStream_PolicyQualifierId* pDstValue);

/**************************************************************/
/*                                                            */
/*  CPSuri                                                    */
/*                                                            */
/**************************************************************/

typedef ASN1IA5String ASN1T_IMPStream_CPSuri;

class EXTERN ASN1C_IMPStream_CPSuri :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_CPSuri& msgData;
public:
   ASN1C_IMPStream_CPSuri (ASN1T_IMPStream_CPSuri& data);
   ASN1C_IMPStream_CPSuri (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_CPSuri& data);
   ASN1C_IMPStream_CPSuri (ASN1C_IMPStream_CPSuri& original);

   inline ASN1T_IMPStream_CPSuri& getData () { return msgData; }
   inline const ASN1T_IMPStream_CPSuri& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_CPSuri* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_CPSuri& getCopy (ASN1T_IMPStream_CPSuri* pDstData = 0);
   ASN1T_IMPStream_CPSuri* newCopy ();

   inline ASN1C_IMPStream_CPSuri& operator= (ASN1C_IMPStream_CPSuri& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_CPSuri (ASN1CTXT* pctxt,
   ASN1T_IMPStream_CPSuri *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_CPSuri
   (const char* name, ASN1T_IMPStream_CPSuri* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_CPSuri
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_CPSuri* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_CPSuri (ASN1ConstCharPtr name, ASN1T_IMPStream_CPSuri* pValue, ASN1T_IMPStream_CPSuri* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_CPSuri (ASN1CTXT *pctxt, ASN1T_IMPStream_CPSuri* pSrcValue, ASN1T_IMPStream_CPSuri* pDstValue);

EXTERN void asn1Free_IMPStream_CPSuri
   (ASN1CTXT *pctxt, ASN1T_IMPStream_CPSuri* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyPurposeId                                              */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_IMPStream_KeyPurposeId;

class EXTERN ASN1C_IMPStream_KeyPurposeId :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_KeyPurposeId& msgData;
public:
   ASN1C_IMPStream_KeyPurposeId (ASN1T_IMPStream_KeyPurposeId& data);
   ASN1C_IMPStream_KeyPurposeId (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_KeyPurposeId& data);
   ASN1C_IMPStream_KeyPurposeId (ASN1C_IMPStream_KeyPurposeId& original);

   inline ASN1T_IMPStream_KeyPurposeId& getData () { return msgData; }
   inline const ASN1T_IMPStream_KeyPurposeId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_KeyPurposeId* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_KeyPurposeId& getCopy (ASN1T_IMPStream_KeyPurposeId* pDstData = 0);
   ASN1T_IMPStream_KeyPurposeId* newCopy ();

   inline ASN1C_IMPStream_KeyPurposeId& operator= (ASN1C_IMPStream_KeyPurposeId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_KeyPurposeId (ASN1CTXT* pctxt,
   ASN1T_IMPStream_KeyPurposeId *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_KeyPurposeId
   (const char* name, ASN1T_IMPStream_KeyPurposeId* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_KeyPurposeId
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_KeyPurposeId* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_KeyPurposeId (ASN1ConstCharPtr name, ASN1T_IMPStream_KeyPurposeId* pValue, ASN1T_IMPStream_KeyPurposeId* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_KeyPurposeId (ASN1CTXT *pctxt, ASN1T_IMPStream_KeyPurposeId* pSrcValue, ASN1T_IMPStream_KeyPurposeId* pDstValue);

/**************************************************************/
/*                                                            */
/*  ReasonFlags                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_ReasonFlags;

struct EXTERN ASN1T_IMPStream_ReasonFlags {
   OSUINT32  numbits;
   OSOCTET data[2];
   // ctors
   ASN1T_IMPStream_ReasonFlags () : numbits(0) {}
   ASN1T_IMPStream_ReasonFlags (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits(_numbits) {
      memcpy (data, _data, sizeof(data));
   }
   ASN1T_IMPStream_ReasonFlags (ASN1C_IMPStream_ReasonFlags& srcData);
} ;

class EXTERN ASN1C_IMPStream_ReasonFlags :
   public ASN1CBitStr
{
protected:
   ASN1T_IMPStream_ReasonFlags& msgData;
public:
   // named bits
   enum { unused = 0, keyCompromise = 1, cACompromise = 2, affiliationChanged = 3, superseded = 4, cessationOfOperation = 5, certificateHold = 6, privilegeWithdrawn = 7, aACompromise = 8 };

   ASN1C_IMPStream_ReasonFlags (ASN1T_IMPStream_ReasonFlags& data);
   ASN1C_IMPStream_ReasonFlags (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_ReasonFlags& data);
   ASN1C_IMPStream_ReasonFlags (ASN1C_IMPStream_ReasonFlags& original);

   inline ASN1T_IMPStream_ReasonFlags& getData () { return msgData; }
   inline const ASN1T_IMPStream_ReasonFlags& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_ReasonFlags* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_ReasonFlags& getCopy (ASN1T_IMPStream_ReasonFlags* pDstData = 0);
   ASN1T_IMPStream_ReasonFlags* newCopy ();

   ASN1C_IMPStream_ReasonFlags& operator= (ASN1C_IMPStream_ReasonFlags& srcData);
} ;

EXTERN int asn1BSD_IMPStream_ReasonFlags (ASN1CTXT* pctxt,
   ASN1T_IMPStream_ReasonFlags *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_ReasonFlags
   (const char* name, ASN1T_IMPStream_ReasonFlags* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_ReasonFlags
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_ReasonFlags* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_ReasonFlags (ASN1ConstCharPtr name, ASN1T_IMPStream_ReasonFlags* pValue, ASN1T_IMPStream_ReasonFlags* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_ReasonFlags (ASN1CTXT *pctxt, ASN1T_IMPStream_ReasonFlags* pSrcValue, ASN1T_IMPStream_ReasonFlags* pDstValue);

/**************************************************************/
/*                                                            */
/*  CRLNumber                                                 */
/*                                                            */
/**************************************************************/

typedef OSUINT32 ASN1T_IMPStream_CRLNumber;

class EXTERN ASN1C_IMPStream_CRLNumber :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_CRLNumber& msgData;
public:
   ASN1C_IMPStream_CRLNumber (ASN1T_IMPStream_CRLNumber& data);
   ASN1C_IMPStream_CRLNumber (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_CRLNumber& data);
   ASN1C_IMPStream_CRLNumber (ASN1C_IMPStream_CRLNumber& original);

   inline ASN1T_IMPStream_CRLNumber& getData () { return msgData; }
   inline const ASN1T_IMPStream_CRLNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_CRLNumber* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_CRLNumber& getCopy (ASN1T_IMPStream_CRLNumber* pDstData = 0);
   ASN1T_IMPStream_CRLNumber* newCopy ();

   inline ASN1C_IMPStream_CRLNumber& operator= (ASN1C_IMPStream_CRLNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_CRLNumber (ASN1CTXT* pctxt,
   ASN1T_IMPStream_CRLNumber *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_CRLNumber
   (const char* name, ASN1T_IMPStream_CRLNumber* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_CRLNumber
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_CRLNumber* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_CRLNumber (ASN1ConstCharPtr name, ASN1T_IMPStream_CRLNumber* pValue, ASN1T_IMPStream_CRLNumber* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_CRLNumber (ASN1CTXT *pctxt, ASN1T_IMPStream_CRLNumber* pSrcValue, ASN1T_IMPStream_CRLNumber* pDstValue);

/**************************************************************/
/*                                                            */
/*  CRLReason                                                 */
/*                                                            */
/**************************************************************/

struct EXTERN IMPStream_CRLReason {
   enum Root {
      unspecified = 0,
      keyCompromise = 1,
      cACompromise = 2,
      affiliationChanged = 3,
      superseded = 4,
      cessationOfOperation = 5,
      certificateHold = 6,
      removeFromCRL = 8,
      privilegeWithdrawn = 9,
      aACompromise = 10
   } ;
} ;

typedef OSUINT32 ASN1T_IMPStream_CRLReason;

class EXTERN ASN1C_IMPStream_CRLReason :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_CRLReason& msgData;
public:
   ASN1C_IMPStream_CRLReason (ASN1T_IMPStream_CRLReason& data);
   ASN1C_IMPStream_CRLReason (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_CRLReason& data);
   ASN1C_IMPStream_CRLReason (ASN1C_IMPStream_CRLReason& original);

   inline ASN1T_IMPStream_CRLReason& getData () { return msgData; }
   inline const ASN1T_IMPStream_CRLReason& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_CRLReason* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_CRLReason& getCopy (ASN1T_IMPStream_CRLReason* pDstData = 0);
   ASN1T_IMPStream_CRLReason* newCopy ();

   inline ASN1C_IMPStream_CRLReason& operator= (ASN1C_IMPStream_CRLReason& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_CRLReason (ASN1CTXT* pctxt,
   ASN1T_IMPStream_CRLReason *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_CRLReason
   (const char* name, ASN1T_IMPStream_CRLReason* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_CRLReason
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_CRLReason* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_CRLReason (ASN1ConstCharPtr name, ASN1T_IMPStream_CRLReason* pValue, ASN1T_IMPStream_CRLReason* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_CRLReason (ASN1CTXT *pctxt, ASN1T_IMPStream_CRLReason* pSrcValue, ASN1T_IMPStream_CRLReason* pDstValue);

/**************************************************************/
/*                                                            */
/*  AuthorityKeyIdentifier                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_AuthorityKeyIdentifier;

struct EXTERN ASN1T_IMPStream_AuthorityKeyIdentifier : public ASN1TPDU {
   struct {
      unsigned keyIdentifierPresent : 1;
      unsigned authorityCertIssuerPresent : 1;
      unsigned authorityCertSerialNumberPresent : 1;
   } m;
   ASN1T_IMPStream_KeyIdentifier keyIdentifier;
   ASN1T_IMPStream_GeneralNames authorityCertIssuer;
   ASN1T_EXPStream_CertificateSerialNumber authorityCertSerialNumber;
   ASN1T_IMPStream_AuthorityKeyIdentifier ();
   ASN1T_IMPStream_AuthorityKeyIdentifier (ASN1C_IMPStream_AuthorityKeyIdentifier& srcData);
   ~ASN1T_IMPStream_AuthorityKeyIdentifier ();
} ;

class EXTERN ASN1C_IMPStream_AuthorityKeyIdentifier :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_AuthorityKeyIdentifier& msgData;
public:
   ASN1C_IMPStream_AuthorityKeyIdentifier (ASN1T_IMPStream_AuthorityKeyIdentifier& data);
   ASN1C_IMPStream_AuthorityKeyIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_AuthorityKeyIdentifier& data);
   ASN1C_IMPStream_AuthorityKeyIdentifier (ASN1C_IMPStream_AuthorityKeyIdentifier& original);

   inline ASN1T_IMPStream_AuthorityKeyIdentifier& getData () { return msgData; }
   inline const ASN1T_IMPStream_AuthorityKeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_AuthorityKeyIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_AuthorityKeyIdentifier& getCopy (ASN1T_IMPStream_AuthorityKeyIdentifier* pDstData = 0);
   ASN1T_IMPStream_AuthorityKeyIdentifier* newCopy ();

   inline ASN1C_IMPStream_AuthorityKeyIdentifier& operator= (ASN1C_IMPStream_AuthorityKeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_AuthorityKeyIdentifier (ASN1CTXT* pctxt,
   ASN1T_IMPStream_AuthorityKeyIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_AuthorityKeyIdentifier
   (const char* name, ASN1T_IMPStream_AuthorityKeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_AuthorityKeyIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_AuthorityKeyIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_AuthorityKeyIdentifier (ASN1ConstCharPtr name, ASN1T_IMPStream_AuthorityKeyIdentifier* pValue, ASN1T_IMPStream_AuthorityKeyIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_AuthorityKeyIdentifier (ASN1CTXT *pctxt, ASN1T_IMPStream_AuthorityKeyIdentifier* pSrcValue, ASN1T_IMPStream_AuthorityKeyIdentifier* pDstValue);

EXTERN void asn1Free_IMPStream_AuthorityKeyIdentifier
   (ASN1CTXT *pctxt, ASN1T_IMPStream_AuthorityKeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyQualifierInfo                                       */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_PolicyQualifierInfo;

struct EXTERN ASN1T_IMPStream_PolicyQualifierInfo : public ASN1TPDU {
   ASN1T_IMPStream_PolicyQualifierId policyQualifierId;
   ASN1TOpenType qualifier;
   ASN1T_IMPStream_PolicyQualifierInfo ();
   ASN1T_IMPStream_PolicyQualifierInfo (ASN1C_IMPStream_PolicyQualifierInfo& srcData);
   ~ASN1T_IMPStream_PolicyQualifierInfo ();
} ;

class EXTERN ASN1C_IMPStream_PolicyQualifierInfo :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_PolicyQualifierInfo& msgData;
public:
   ASN1C_IMPStream_PolicyQualifierInfo (ASN1T_IMPStream_PolicyQualifierInfo& data);
   ASN1C_IMPStream_PolicyQualifierInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_PolicyQualifierInfo& data);
   ASN1C_IMPStream_PolicyQualifierInfo (ASN1C_IMPStream_PolicyQualifierInfo& original);

   inline ASN1T_IMPStream_PolicyQualifierInfo& getData () { return msgData; }
   inline const ASN1T_IMPStream_PolicyQualifierInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_PolicyQualifierInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_PolicyQualifierInfo& getCopy (ASN1T_IMPStream_PolicyQualifierInfo* pDstData = 0);
   ASN1T_IMPStream_PolicyQualifierInfo* newCopy ();

   inline ASN1C_IMPStream_PolicyQualifierInfo& operator= (ASN1C_IMPStream_PolicyQualifierInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_PolicyQualifierInfo (ASN1CTXT* pctxt,
   ASN1T_IMPStream_PolicyQualifierInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_PolicyQualifierInfo
   (const char* name, ASN1T_IMPStream_PolicyQualifierInfo* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_PolicyQualifierInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyQualifierInfo* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_PolicyQualifierInfo (ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyQualifierInfo* pValue, ASN1T_IMPStream_PolicyQualifierInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_PolicyQualifierInfo (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyQualifierInfo* pSrcValue, ASN1T_IMPStream_PolicyQualifierInfo* pDstValue);

EXTERN void asn1Free_IMPStream_PolicyQualifierInfo
   (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyQualifierInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyInformation_policyQualifiers                        */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_PolicyQualifierInfo */
typedef struct EXTERN ASN1T_IMPStream_PolicyInformation_policyQualifiers : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_PolicyInformation_policyQualifiers();
} ASN1T_IMPStream_PolicyInformation_policyQualifiers;

class EXTERN ASN1C_IMPStream_PolicyInformation_policyQualifiers :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_PolicyInformation_policyQualifiers& msgData;
public:
   ASN1C_IMPStream_PolicyInformation_policyQualifiers (ASN1T_IMPStream_PolicyInformation_policyQualifiers& data);
   ASN1C_IMPStream_PolicyInformation_policyQualifiers (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_PolicyInformation_policyQualifiers& data);
   ASN1C_IMPStream_PolicyInformation_policyQualifiers (ASN1C_IMPStream_PolicyInformation_policyQualifiers& original);

   inline ASN1T_IMPStream_PolicyInformation_policyQualifiers& getData () { return msgData; }
   inline const ASN1T_IMPStream_PolicyInformation_policyQualifiers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_PolicyInformation_policyQualifiers* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_PolicyInformation_policyQualifiers& getCopy (ASN1T_IMPStream_PolicyInformation_policyQualifiers* pDstData = 0);
   ASN1T_IMPStream_PolicyInformation_policyQualifiers* newCopy ();

   ASN1C_IMPStream_PolicyInformation_policyQualifiers& operator= (ASN1C_IMPStream_PolicyInformation_policyQualifiers& srcData);
   void Append (ASN1T_IMPStream_PolicyQualifierInfo *elem);
   ASN1T_IMPStream_PolicyQualifierInfo *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_PolicyInformation_policyQualifiers (ASN1CTXT* pctxt,
   ASN1T_IMPStream_PolicyInformation_policyQualifiers *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_PolicyInformation_policyQualifiers
   (const char* name, ASN1T_IMPStream_PolicyInformation_policyQualifiers* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_PolicyInformation_policyQualifiers
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyInformation_policyQualifiers* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_PolicyInformation_policyQualifiers (ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyInformation_policyQualifiers* pValue, ASN1T_IMPStream_PolicyInformation_policyQualifiers* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_PolicyInformation_policyQualifiers (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyInformation_policyQualifiers* pSrcValue, ASN1T_IMPStream_PolicyInformation_policyQualifiers* pDstValue);

EXTERN void asn1Free_IMPStream_PolicyInformation_policyQualifiers
   (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyInformation_policyQualifiers* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyInformation                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_PolicyInformation;

struct EXTERN ASN1T_IMPStream_PolicyInformation : public ASN1TPDU {
   struct {
      unsigned policyQualifiersPresent : 1;
   } m;
   ASN1T_IMPStream_CertPolicyId policyIdentifier;
   ASN1T_IMPStream_PolicyInformation_policyQualifiers policyQualifiers;
   ASN1T_IMPStream_PolicyInformation ();
   ASN1T_IMPStream_PolicyInformation (ASN1C_IMPStream_PolicyInformation& srcData);
   ~ASN1T_IMPStream_PolicyInformation ();
} ;

class EXTERN ASN1C_IMPStream_PolicyInformation :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_PolicyInformation& msgData;
public:
   ASN1C_IMPStream_PolicyInformation (ASN1T_IMPStream_PolicyInformation& data);
   ASN1C_IMPStream_PolicyInformation (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_PolicyInformation& data);
   ASN1C_IMPStream_PolicyInformation (ASN1C_IMPStream_PolicyInformation& original);

   inline ASN1T_IMPStream_PolicyInformation& getData () { return msgData; }
   inline const ASN1T_IMPStream_PolicyInformation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_PolicyInformation* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_PolicyInformation& getCopy (ASN1T_IMPStream_PolicyInformation* pDstData = 0);
   ASN1T_IMPStream_PolicyInformation* newCopy ();

   inline ASN1C_IMPStream_PolicyInformation& operator= (ASN1C_IMPStream_PolicyInformation& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_PolicyInformation (ASN1CTXT* pctxt,
   ASN1T_IMPStream_PolicyInformation *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_PolicyInformation
   (const char* name, ASN1T_IMPStream_PolicyInformation* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_PolicyInformation
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyInformation* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_PolicyInformation (ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyInformation* pValue, ASN1T_IMPStream_PolicyInformation* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_PolicyInformation (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyInformation* pSrcValue, ASN1T_IMPStream_PolicyInformation* pDstValue);

EXTERN void asn1Free_IMPStream_PolicyInformation
   (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificatePolicies                                       */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_PolicyInformation */
typedef struct EXTERN ASN1T_IMPStream_CertificatePolicies : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_CertificatePolicies();
} ASN1T_IMPStream_CertificatePolicies;

class EXTERN ASN1C_IMPStream_CertificatePolicies :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_CertificatePolicies& msgData;
public:
   ASN1C_IMPStream_CertificatePolicies (ASN1T_IMPStream_CertificatePolicies& data);
   ASN1C_IMPStream_CertificatePolicies (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_CertificatePolicies& data);
   ASN1C_IMPStream_CertificatePolicies (ASN1C_IMPStream_CertificatePolicies& original);

   inline ASN1T_IMPStream_CertificatePolicies& getData () { return msgData; }
   inline const ASN1T_IMPStream_CertificatePolicies& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_CertificatePolicies* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_CertificatePolicies& getCopy (ASN1T_IMPStream_CertificatePolicies* pDstData = 0);
   ASN1T_IMPStream_CertificatePolicies* newCopy ();

   ASN1C_IMPStream_CertificatePolicies& operator= (ASN1C_IMPStream_CertificatePolicies& srcData);
   void Append (ASN1T_IMPStream_PolicyInformation *elem);
   ASN1T_IMPStream_PolicyInformation *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_CertificatePolicies (ASN1CTXT* pctxt,
   ASN1T_IMPStream_CertificatePolicies *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_CertificatePolicies
   (const char* name, ASN1T_IMPStream_CertificatePolicies* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_CertificatePolicies
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_CertificatePolicies* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_CertificatePolicies (ASN1ConstCharPtr name, ASN1T_IMPStream_CertificatePolicies* pValue, ASN1T_IMPStream_CertificatePolicies* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_CertificatePolicies (ASN1CTXT *pctxt, ASN1T_IMPStream_CertificatePolicies* pSrcValue, ASN1T_IMPStream_CertificatePolicies* pDstValue);

EXTERN void asn1Free_IMPStream_CertificatePolicies
   (ASN1CTXT *pctxt, ASN1T_IMPStream_CertificatePolicies* pvalue);

/**************************************************************/
/*                                                            */
/*  DisplayText                                               */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_IMPStream_DisplayText_utf8String 1
#define T_IMPStream_DisplayText_ia5String 2
#define T_IMPStream_DisplayText_visibleString 3
#define T_IMPStream_DisplayText_bmpString 4

class EXTERN ASN1C_IMPStream_DisplayText;

struct EXTERN ASN1T_IMPStream_DisplayText : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1IA5String ia5String;
      /* t = 3 */
      ASN1VisibleString visibleString;
      /* t = 4 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_IMPStream_DisplayText () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_IMPStream_DisplayText (ASN1C_IMPStream_DisplayText& srcData);
   ~ASN1T_IMPStream_DisplayText ();
} ;

class EXTERN ASN1C_IMPStream_DisplayText :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_DisplayText& msgData;
public:
   ASN1C_IMPStream_DisplayText (ASN1T_IMPStream_DisplayText& data);
   ASN1C_IMPStream_DisplayText (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_DisplayText& data);
   ASN1C_IMPStream_DisplayText (ASN1C_IMPStream_DisplayText& original);

   inline ASN1T_IMPStream_DisplayText& getData () { return msgData; }
   inline const ASN1T_IMPStream_DisplayText& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_DisplayText* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_DisplayText& getCopy (ASN1T_IMPStream_DisplayText* pDstData = 0);
   ASN1T_IMPStream_DisplayText* newCopy ();

   inline ASN1C_IMPStream_DisplayText& operator= (ASN1C_IMPStream_DisplayText& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_DisplayText (ASN1CTXT* pctxt,
   ASN1T_IMPStream_DisplayText *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_DisplayText
   (const char* name, ASN1T_IMPStream_DisplayText* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_DisplayText
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_DisplayText* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_DisplayText (ASN1ConstCharPtr name, ASN1T_IMPStream_DisplayText* pValue, ASN1T_IMPStream_DisplayText* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_DisplayText (ASN1CTXT *pctxt, ASN1T_IMPStream_DisplayText* pSrcValue, ASN1T_IMPStream_DisplayText* pDstValue);

EXTERN void asn1Free_IMPStream_DisplayText
   (ASN1CTXT *pctxt, ASN1T_IMPStream_DisplayText* pvalue);

/**************************************************************/
/*                                                            */
/*  NoticeReference_noticeNumbers                             */
/*                                                            */
/**************************************************************/

/* List of OSINT32 */
typedef struct EXTERN ASN1T_IMPStream_NoticeReference_noticeNumbers : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_NoticeReference_noticeNumbers();
} ASN1T_IMPStream_NoticeReference_noticeNumbers;

class EXTERN ASN1C_IMPStream_NoticeReference_noticeNumbers :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_NoticeReference_noticeNumbers& msgData;
public:
   ASN1C_IMPStream_NoticeReference_noticeNumbers (ASN1T_IMPStream_NoticeReference_noticeNumbers& data);
   ASN1C_IMPStream_NoticeReference_noticeNumbers (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_NoticeReference_noticeNumbers& data);
   ASN1C_IMPStream_NoticeReference_noticeNumbers (ASN1C_IMPStream_NoticeReference_noticeNumbers& original);

   inline ASN1T_IMPStream_NoticeReference_noticeNumbers& getData () { return msgData; }
   inline const ASN1T_IMPStream_NoticeReference_noticeNumbers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_NoticeReference_noticeNumbers* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_NoticeReference_noticeNumbers& getCopy (ASN1T_IMPStream_NoticeReference_noticeNumbers* pDstData = 0);
   ASN1T_IMPStream_NoticeReference_noticeNumbers* newCopy ();

   ASN1C_IMPStream_NoticeReference_noticeNumbers& operator= (ASN1C_IMPStream_NoticeReference_noticeNumbers& srcData);
   void Append (OSINT32 *elem);
   OSINT32 *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_NoticeReference_noticeNumbers (ASN1CTXT* pctxt,
   ASN1T_IMPStream_NoticeReference_noticeNumbers *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_NoticeReference_noticeNumbers
   (const char* name, ASN1T_IMPStream_NoticeReference_noticeNumbers* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_NoticeReference_noticeNumbers
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_NoticeReference_noticeNumbers* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_NoticeReference_noticeNumbers (ASN1ConstCharPtr name, ASN1T_IMPStream_NoticeReference_noticeNumbers* pValue, ASN1T_IMPStream_NoticeReference_noticeNumbers* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_NoticeReference_noticeNumbers (ASN1CTXT *pctxt, ASN1T_IMPStream_NoticeReference_noticeNumbers* pSrcValue, ASN1T_IMPStream_NoticeReference_noticeNumbers* pDstValue);

EXTERN void asn1Free_IMPStream_NoticeReference_noticeNumbers
   (ASN1CTXT *pctxt, ASN1T_IMPStream_NoticeReference_noticeNumbers* pvalue);

/**************************************************************/
/*                                                            */
/*  NoticeReference                                           */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_NoticeReference;

struct EXTERN ASN1T_IMPStream_NoticeReference : public ASN1TPDU {
   ASN1T_IMPStream_DisplayText organization;
   ASN1T_IMPStream_NoticeReference_noticeNumbers noticeNumbers;
   ASN1T_IMPStream_NoticeReference ();
   ASN1T_IMPStream_NoticeReference (ASN1C_IMPStream_NoticeReference& srcData);
   ~ASN1T_IMPStream_NoticeReference ();
} ;

class EXTERN ASN1C_IMPStream_NoticeReference :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_NoticeReference& msgData;
public:
   ASN1C_IMPStream_NoticeReference (ASN1T_IMPStream_NoticeReference& data);
   ASN1C_IMPStream_NoticeReference (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_NoticeReference& data);
   ASN1C_IMPStream_NoticeReference (ASN1C_IMPStream_NoticeReference& original);

   inline ASN1T_IMPStream_NoticeReference& getData () { return msgData; }
   inline const ASN1T_IMPStream_NoticeReference& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_NoticeReference* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_NoticeReference& getCopy (ASN1T_IMPStream_NoticeReference* pDstData = 0);
   ASN1T_IMPStream_NoticeReference* newCopy ();

   inline ASN1C_IMPStream_NoticeReference& operator= (ASN1C_IMPStream_NoticeReference& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_NoticeReference (ASN1CTXT* pctxt,
   ASN1T_IMPStream_NoticeReference *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_NoticeReference
   (const char* name, ASN1T_IMPStream_NoticeReference* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_NoticeReference
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_NoticeReference* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_NoticeReference (ASN1ConstCharPtr name, ASN1T_IMPStream_NoticeReference* pValue, ASN1T_IMPStream_NoticeReference* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_NoticeReference (ASN1CTXT *pctxt, ASN1T_IMPStream_NoticeReference* pSrcValue, ASN1T_IMPStream_NoticeReference* pDstValue);

EXTERN void asn1Free_IMPStream_NoticeReference
   (ASN1CTXT *pctxt, ASN1T_IMPStream_NoticeReference* pvalue);

/**************************************************************/
/*                                                            */
/*  UserNotice                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_UserNotice;

struct EXTERN ASN1T_IMPStream_UserNotice : public ASN1TPDU {
   struct {
      unsigned noticeRefPresent : 1;
      unsigned explicitTextPresent : 1;
   } m;
   ASN1T_IMPStream_NoticeReference noticeRef;
   ASN1T_IMPStream_DisplayText explicitText;
   ASN1T_IMPStream_UserNotice ();
   ASN1T_IMPStream_UserNotice (ASN1C_IMPStream_UserNotice& srcData);
   ~ASN1T_IMPStream_UserNotice ();
} ;

class EXTERN ASN1C_IMPStream_UserNotice :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_UserNotice& msgData;
public:
   ASN1C_IMPStream_UserNotice (ASN1T_IMPStream_UserNotice& data);
   ASN1C_IMPStream_UserNotice (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_UserNotice& data);
   ASN1C_IMPStream_UserNotice (ASN1C_IMPStream_UserNotice& original);

   inline ASN1T_IMPStream_UserNotice& getData () { return msgData; }
   inline const ASN1T_IMPStream_UserNotice& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_UserNotice* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_UserNotice& getCopy (ASN1T_IMPStream_UserNotice* pDstData = 0);
   ASN1T_IMPStream_UserNotice* newCopy ();

   inline ASN1C_IMPStream_UserNotice& operator= (ASN1C_IMPStream_UserNotice& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_UserNotice (ASN1CTXT* pctxt,
   ASN1T_IMPStream_UserNotice *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_UserNotice
   (const char* name, ASN1T_IMPStream_UserNotice* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_UserNotice
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_UserNotice* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_UserNotice (ASN1ConstCharPtr name, ASN1T_IMPStream_UserNotice* pValue, ASN1T_IMPStream_UserNotice* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_UserNotice (ASN1CTXT *pctxt, ASN1T_IMPStream_UserNotice* pSrcValue, ASN1T_IMPStream_UserNotice* pDstValue);

EXTERN void asn1Free_IMPStream_UserNotice
   (ASN1CTXT *pctxt, ASN1T_IMPStream_UserNotice* pvalue);

/**************************************************************/
/*                                                            */
/*  Qualifier                                                 */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_IMPStream_Qualifier_userNotice 1
#define T_IMPStream_Qualifier_cPSuri    2

class EXTERN ASN1C_IMPStream_Qualifier;

struct EXTERN ASN1T_IMPStream_Qualifier : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_IMPStream_UserNotice *userNotice;
      /* t = 2 */
      ASN1T_IMPStream_CPSuri cPSuri;
   } u;
   ASN1T_IMPStream_Qualifier () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_IMPStream_Qualifier (ASN1C_IMPStream_Qualifier& srcData);
   ~ASN1T_IMPStream_Qualifier ();
} ;

class EXTERN ASN1C_IMPStream_Qualifier :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_Qualifier& msgData;
public:
   ASN1C_IMPStream_Qualifier (ASN1T_IMPStream_Qualifier& data);
   ASN1C_IMPStream_Qualifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_Qualifier& data);
   ASN1C_IMPStream_Qualifier (ASN1C_IMPStream_Qualifier& original);

   inline ASN1T_IMPStream_Qualifier& getData () { return msgData; }
   inline const ASN1T_IMPStream_Qualifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_Qualifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_Qualifier& getCopy (ASN1T_IMPStream_Qualifier* pDstData = 0);
   ASN1T_IMPStream_Qualifier* newCopy ();

   inline ASN1C_IMPStream_Qualifier& operator= (ASN1C_IMPStream_Qualifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_Qualifier (ASN1CTXT* pctxt,
   ASN1T_IMPStream_Qualifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_Qualifier
   (const char* name, ASN1T_IMPStream_Qualifier* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_Qualifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_Qualifier* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_Qualifier (ASN1ConstCharPtr name, ASN1T_IMPStream_Qualifier* pValue, ASN1T_IMPStream_Qualifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_Qualifier (ASN1CTXT *pctxt, ASN1T_IMPStream_Qualifier* pSrcValue, ASN1T_IMPStream_Qualifier* pDstValue);

EXTERN void asn1Free_IMPStream_Qualifier
   (ASN1CTXT *pctxt, ASN1T_IMPStream_Qualifier* pvalue);

/**************************************************************/
/*                                                            */
/*  PolicyMappings_element                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_PolicyMappings_element;

struct EXTERN ASN1T_IMPStream_PolicyMappings_element : public ASN1TPDU {
   ASN1T_IMPStream_CertPolicyId issuerDomainPolicy;
   ASN1T_IMPStream_CertPolicyId subjectDomainPolicy;
   ASN1T_IMPStream_PolicyMappings_element ();
   ASN1T_IMPStream_PolicyMappings_element (ASN1C_IMPStream_PolicyMappings_element& srcData);
} ;

class EXTERN ASN1C_IMPStream_PolicyMappings_element :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_PolicyMappings_element& msgData;
public:
   ASN1C_IMPStream_PolicyMappings_element (ASN1T_IMPStream_PolicyMappings_element& data);
   ASN1C_IMPStream_PolicyMappings_element (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_PolicyMappings_element& data);
   ASN1C_IMPStream_PolicyMappings_element (ASN1C_IMPStream_PolicyMappings_element& original);

   inline ASN1T_IMPStream_PolicyMappings_element& getData () { return msgData; }
   inline const ASN1T_IMPStream_PolicyMappings_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_PolicyMappings_element* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_PolicyMappings_element& getCopy (ASN1T_IMPStream_PolicyMappings_element* pDstData = 0);
   ASN1T_IMPStream_PolicyMappings_element* newCopy ();

   inline ASN1C_IMPStream_PolicyMappings_element& operator= (ASN1C_IMPStream_PolicyMappings_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_PolicyMappings_element (ASN1CTXT* pctxt,
   ASN1T_IMPStream_PolicyMappings_element *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_PolicyMappings_element
   (const char* name, ASN1T_IMPStream_PolicyMappings_element* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_PolicyMappings_element
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyMappings_element* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_PolicyMappings_element (ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyMappings_element* pValue, ASN1T_IMPStream_PolicyMappings_element* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_PolicyMappings_element (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyMappings_element* pSrcValue, ASN1T_IMPStream_PolicyMappings_element* pDstValue);

/**************************************************************/
/*                                                            */
/*  PolicyMappings                                            */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_PolicyMappings_element */
typedef struct EXTERN ASN1T_IMPStream_PolicyMappings : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_PolicyMappings();
} ASN1T_IMPStream_PolicyMappings;

class EXTERN ASN1C_IMPStream_PolicyMappings :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_PolicyMappings& msgData;
public:
   ASN1C_IMPStream_PolicyMappings (ASN1T_IMPStream_PolicyMappings& data);
   ASN1C_IMPStream_PolicyMappings (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_PolicyMappings& data);
   ASN1C_IMPStream_PolicyMappings (ASN1C_IMPStream_PolicyMappings& original);

   inline ASN1T_IMPStream_PolicyMappings& getData () { return msgData; }
   inline const ASN1T_IMPStream_PolicyMappings& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_PolicyMappings* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_PolicyMappings& getCopy (ASN1T_IMPStream_PolicyMappings* pDstData = 0);
   ASN1T_IMPStream_PolicyMappings* newCopy ();

   ASN1C_IMPStream_PolicyMappings& operator= (ASN1C_IMPStream_PolicyMappings& srcData);
   void Append (ASN1T_IMPStream_PolicyMappings_element *elem);
   ASN1T_IMPStream_PolicyMappings_element *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_PolicyMappings (ASN1CTXT* pctxt,
   ASN1T_IMPStream_PolicyMappings *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_PolicyMappings
   (const char* name, ASN1T_IMPStream_PolicyMappings* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_PolicyMappings
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyMappings* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_PolicyMappings (ASN1ConstCharPtr name, ASN1T_IMPStream_PolicyMappings* pValue, ASN1T_IMPStream_PolicyMappings* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_PolicyMappings (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyMappings* pSrcValue, ASN1T_IMPStream_PolicyMappings* pDstValue);

EXTERN void asn1Free_IMPStream_PolicyMappings
   (ASN1CTXT *pctxt, ASN1T_IMPStream_PolicyMappings* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicConstraints                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_BasicConstraints;

struct EXTERN ASN1T_IMPStream_BasicConstraints : public ASN1TPDU {
   struct {
      unsigned pathLenConstraintPresent : 1;
   } m;
   OSBOOL cA;
   OSUINT32 pathLenConstraint;
   ASN1T_IMPStream_BasicConstraints ();
   ASN1T_IMPStream_BasicConstraints (ASN1C_IMPStream_BasicConstraints& srcData);
} ;

class EXTERN ASN1C_IMPStream_BasicConstraints :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_BasicConstraints& msgData;
public:
   ASN1C_IMPStream_BasicConstraints (ASN1T_IMPStream_BasicConstraints& data);
   ASN1C_IMPStream_BasicConstraints (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_BasicConstraints& data);
   ASN1C_IMPStream_BasicConstraints (ASN1C_IMPStream_BasicConstraints& original);

   inline ASN1T_IMPStream_BasicConstraints& getData () { return msgData; }
   inline const ASN1T_IMPStream_BasicConstraints& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_BasicConstraints* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_BasicConstraints& getCopy (ASN1T_IMPStream_BasicConstraints* pDstData = 0);
   ASN1T_IMPStream_BasicConstraints* newCopy ();

   inline ASN1C_IMPStream_BasicConstraints& operator= (ASN1C_IMPStream_BasicConstraints& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_BasicConstraints (ASN1CTXT* pctxt,
   ASN1T_IMPStream_BasicConstraints *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_BasicConstraints
   (const char* name, ASN1T_IMPStream_BasicConstraints* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_BasicConstraints
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_BasicConstraints* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_BasicConstraints (ASN1ConstCharPtr name, ASN1T_IMPStream_BasicConstraints* pValue, ASN1T_IMPStream_BasicConstraints* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_BasicConstraints (ASN1CTXT *pctxt, ASN1T_IMPStream_BasicConstraints* pSrcValue, ASN1T_IMPStream_BasicConstraints* pDstValue);

/**************************************************************/
/*                                                            */
/*  ExtKeyUsageSyntax                                         */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_KeyPurposeId */
typedef struct EXTERN ASN1T_IMPStream_ExtKeyUsageSyntax : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_ExtKeyUsageSyntax();
} ASN1T_IMPStream_ExtKeyUsageSyntax;

class EXTERN ASN1C_IMPStream_ExtKeyUsageSyntax :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_ExtKeyUsageSyntax& msgData;
public:
   ASN1C_IMPStream_ExtKeyUsageSyntax (ASN1T_IMPStream_ExtKeyUsageSyntax& data);
   ASN1C_IMPStream_ExtKeyUsageSyntax (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_ExtKeyUsageSyntax& data);
   ASN1C_IMPStream_ExtKeyUsageSyntax (ASN1C_IMPStream_ExtKeyUsageSyntax& original);

   inline ASN1T_IMPStream_ExtKeyUsageSyntax& getData () { return msgData; }
   inline const ASN1T_IMPStream_ExtKeyUsageSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_ExtKeyUsageSyntax* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_ExtKeyUsageSyntax& getCopy (ASN1T_IMPStream_ExtKeyUsageSyntax* pDstData = 0);
   ASN1T_IMPStream_ExtKeyUsageSyntax* newCopy ();

   ASN1C_IMPStream_ExtKeyUsageSyntax& operator= (ASN1C_IMPStream_ExtKeyUsageSyntax& srcData);
   void Append (ASN1T_IMPStream_KeyPurposeId *elem);
   ASN1T_IMPStream_KeyPurposeId *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_ExtKeyUsageSyntax (ASN1CTXT* pctxt,
   ASN1T_IMPStream_ExtKeyUsageSyntax *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_ExtKeyUsageSyntax
   (const char* name, ASN1T_IMPStream_ExtKeyUsageSyntax* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_ExtKeyUsageSyntax
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_ExtKeyUsageSyntax* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_ExtKeyUsageSyntax (ASN1ConstCharPtr name, ASN1T_IMPStream_ExtKeyUsageSyntax* pValue, ASN1T_IMPStream_ExtKeyUsageSyntax* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_ExtKeyUsageSyntax (ASN1CTXT *pctxt, ASN1T_IMPStream_ExtKeyUsageSyntax* pSrcValue, ASN1T_IMPStream_ExtKeyUsageSyntax* pDstValue);

EXTERN void asn1Free_IMPStream_ExtKeyUsageSyntax
   (ASN1CTXT *pctxt, ASN1T_IMPStream_ExtKeyUsageSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  DistributionPointName                                     */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_IMPStream_DistributionPointName_fullName 1
#define T_IMPStream_DistributionPointName_nameRelativeToCRLIssuer 2

class EXTERN ASN1C_IMPStream_DistributionPointName;

struct EXTERN ASN1T_IMPStream_DistributionPointName : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_IMPStream_GeneralNames *fullName;
      /* t = 2 */
      ASN1T_EXPStream_RelativeDistinguishedName *nameRelativeToCRLIssuer;
   } u;
   ASN1T_IMPStream_DistributionPointName () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_IMPStream_DistributionPointName (ASN1C_IMPStream_DistributionPointName& srcData);
   ~ASN1T_IMPStream_DistributionPointName ();
} ;

class EXTERN ASN1C_IMPStream_DistributionPointName :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_DistributionPointName& msgData;
public:
   ASN1C_IMPStream_DistributionPointName (ASN1T_IMPStream_DistributionPointName& data);
   ASN1C_IMPStream_DistributionPointName (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_DistributionPointName& data);
   ASN1C_IMPStream_DistributionPointName (ASN1C_IMPStream_DistributionPointName& original);

   inline ASN1T_IMPStream_DistributionPointName& getData () { return msgData; }
   inline const ASN1T_IMPStream_DistributionPointName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_DistributionPointName* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_DistributionPointName& getCopy (ASN1T_IMPStream_DistributionPointName* pDstData = 0);
   ASN1T_IMPStream_DistributionPointName* newCopy ();

   inline ASN1C_IMPStream_DistributionPointName& operator= (ASN1C_IMPStream_DistributionPointName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_DistributionPointName (ASN1CTXT* pctxt,
   ASN1T_IMPStream_DistributionPointName *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_DistributionPointName
   (const char* name, ASN1T_IMPStream_DistributionPointName* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_DistributionPointName
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_DistributionPointName* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_DistributionPointName (ASN1ConstCharPtr name, ASN1T_IMPStream_DistributionPointName* pValue, ASN1T_IMPStream_DistributionPointName* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_DistributionPointName (ASN1CTXT *pctxt, ASN1T_IMPStream_DistributionPointName* pSrcValue, ASN1T_IMPStream_DistributionPointName* pDstValue);

EXTERN void asn1Free_IMPStream_DistributionPointName
   (ASN1CTXT *pctxt, ASN1T_IMPStream_DistributionPointName* pvalue);

/**************************************************************/
/*                                                            */
/*  DistributionPoint                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_DistributionPoint;

struct EXTERN ASN1T_IMPStream_DistributionPoint : public ASN1TPDU {
   struct {
      unsigned distributionPointPresent : 1;
      unsigned reasonsPresent : 1;
      unsigned cRLIssuerPresent : 1;
   } m;
   ASN1T_IMPStream_DistributionPointName distributionPoint;
   ASN1T_IMPStream_ReasonFlags reasons;
   ASN1T_IMPStream_GeneralNames cRLIssuer;
   ASN1T_IMPStream_DistributionPoint ();
   ASN1T_IMPStream_DistributionPoint (ASN1C_IMPStream_DistributionPoint& srcData);
   ~ASN1T_IMPStream_DistributionPoint ();
} ;

class EXTERN ASN1C_IMPStream_DistributionPoint :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_DistributionPoint& msgData;
public:
   ASN1C_IMPStream_DistributionPoint (ASN1T_IMPStream_DistributionPoint& data);
   ASN1C_IMPStream_DistributionPoint (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_DistributionPoint& data);
   ASN1C_IMPStream_DistributionPoint (ASN1C_IMPStream_DistributionPoint& original);

   inline ASN1T_IMPStream_DistributionPoint& getData () { return msgData; }
   inline const ASN1T_IMPStream_DistributionPoint& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_DistributionPoint* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_DistributionPoint& getCopy (ASN1T_IMPStream_DistributionPoint* pDstData = 0);
   ASN1T_IMPStream_DistributionPoint* newCopy ();

   inline ASN1C_IMPStream_DistributionPoint& operator= (ASN1C_IMPStream_DistributionPoint& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_DistributionPoint (ASN1CTXT* pctxt,
   ASN1T_IMPStream_DistributionPoint *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_DistributionPoint
   (const char* name, ASN1T_IMPStream_DistributionPoint* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_DistributionPoint
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_DistributionPoint* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_DistributionPoint (ASN1ConstCharPtr name, ASN1T_IMPStream_DistributionPoint* pValue, ASN1T_IMPStream_DistributionPoint* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_DistributionPoint (ASN1CTXT *pctxt, ASN1T_IMPStream_DistributionPoint* pSrcValue, ASN1T_IMPStream_DistributionPoint* pDstValue);

EXTERN void asn1Free_IMPStream_DistributionPoint
   (ASN1CTXT *pctxt, ASN1T_IMPStream_DistributionPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLDistributionPoints                                     */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_DistributionPoint */
typedef struct EXTERN ASN1T_IMPStream_CRLDistributionPoints : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_CRLDistributionPoints();
} ASN1T_IMPStream_CRLDistributionPoints;

class EXTERN ASN1C_IMPStream_CRLDistributionPoints :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_CRLDistributionPoints& msgData;
public:
   ASN1C_IMPStream_CRLDistributionPoints (ASN1T_IMPStream_CRLDistributionPoints& data);
   ASN1C_IMPStream_CRLDistributionPoints (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_CRLDistributionPoints& data);
   ASN1C_IMPStream_CRLDistributionPoints (ASN1C_IMPStream_CRLDistributionPoints& original);

   inline ASN1T_IMPStream_CRLDistributionPoints& getData () { return msgData; }
   inline const ASN1T_IMPStream_CRLDistributionPoints& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_CRLDistributionPoints* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_CRLDistributionPoints& getCopy (ASN1T_IMPStream_CRLDistributionPoints* pDstData = 0);
   ASN1T_IMPStream_CRLDistributionPoints* newCopy ();

   ASN1C_IMPStream_CRLDistributionPoints& operator= (ASN1C_IMPStream_CRLDistributionPoints& srcData);
   void Append (ASN1T_IMPStream_DistributionPoint *elem);
   ASN1T_IMPStream_DistributionPoint *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_CRLDistributionPoints (ASN1CTXT* pctxt,
   ASN1T_IMPStream_CRLDistributionPoints *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_CRLDistributionPoints
   (const char* name, ASN1T_IMPStream_CRLDistributionPoints* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_CRLDistributionPoints
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_CRLDistributionPoints* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_CRLDistributionPoints (ASN1ConstCharPtr name, ASN1T_IMPStream_CRLDistributionPoints* pValue, ASN1T_IMPStream_CRLDistributionPoints* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_CRLDistributionPoints (ASN1CTXT *pctxt, ASN1T_IMPStream_CRLDistributionPoints* pSrcValue, ASN1T_IMPStream_CRLDistributionPoints* pDstValue);

EXTERN void asn1Free_IMPStream_CRLDistributionPoints
   (ASN1CTXT *pctxt, ASN1T_IMPStream_CRLDistributionPoints* pvalue);

/**************************************************************/
/*                                                            */
/*  AccessDescription                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_AccessDescription;

struct EXTERN ASN1T_IMPStream_AccessDescription : public ASN1TPDU {
   ASN1TObjId accessMethod;
   ASN1T_IMPStream_GeneralName accessLocation;
   ASN1T_IMPStream_AccessDescription ();
   ASN1T_IMPStream_AccessDescription (ASN1C_IMPStream_AccessDescription& srcData);
   ~ASN1T_IMPStream_AccessDescription ();
} ;

class EXTERN ASN1C_IMPStream_AccessDescription :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_AccessDescription& msgData;
public:
   ASN1C_IMPStream_AccessDescription (ASN1T_IMPStream_AccessDescription& data);
   ASN1C_IMPStream_AccessDescription (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_AccessDescription& data);
   ASN1C_IMPStream_AccessDescription (ASN1C_IMPStream_AccessDescription& original);

   inline ASN1T_IMPStream_AccessDescription& getData () { return msgData; }
   inline const ASN1T_IMPStream_AccessDescription& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_AccessDescription* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_AccessDescription& getCopy (ASN1T_IMPStream_AccessDescription* pDstData = 0);
   ASN1T_IMPStream_AccessDescription* newCopy ();

   inline ASN1C_IMPStream_AccessDescription& operator= (ASN1C_IMPStream_AccessDescription& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_AccessDescription (ASN1CTXT* pctxt,
   ASN1T_IMPStream_AccessDescription *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_AccessDescription
   (const char* name, ASN1T_IMPStream_AccessDescription* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_AccessDescription
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_AccessDescription* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_AccessDescription (ASN1ConstCharPtr name, ASN1T_IMPStream_AccessDescription* pValue, ASN1T_IMPStream_AccessDescription* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_AccessDescription (ASN1CTXT *pctxt, ASN1T_IMPStream_AccessDescription* pSrcValue, ASN1T_IMPStream_AccessDescription* pDstValue);

EXTERN void asn1Free_IMPStream_AccessDescription
   (ASN1CTXT *pctxt, ASN1T_IMPStream_AccessDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  AuthorityInfoAccessSyntax                                 */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_AccessDescription */
typedef struct EXTERN ASN1T_IMPStream_AuthorityInfoAccessSyntax : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_AuthorityInfoAccessSyntax();
} ASN1T_IMPStream_AuthorityInfoAccessSyntax;

class EXTERN ASN1C_IMPStream_AuthorityInfoAccessSyntax :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_AuthorityInfoAccessSyntax& msgData;
public:
   ASN1C_IMPStream_AuthorityInfoAccessSyntax (ASN1T_IMPStream_AuthorityInfoAccessSyntax& data);
   ASN1C_IMPStream_AuthorityInfoAccessSyntax (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_AuthorityInfoAccessSyntax& data);
   ASN1C_IMPStream_AuthorityInfoAccessSyntax (ASN1C_IMPStream_AuthorityInfoAccessSyntax& original);

   inline ASN1T_IMPStream_AuthorityInfoAccessSyntax& getData () { return msgData; }
   inline const ASN1T_IMPStream_AuthorityInfoAccessSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_AuthorityInfoAccessSyntax* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_AuthorityInfoAccessSyntax& getCopy (ASN1T_IMPStream_AuthorityInfoAccessSyntax* pDstData = 0);
   ASN1T_IMPStream_AuthorityInfoAccessSyntax* newCopy ();

   ASN1C_IMPStream_AuthorityInfoAccessSyntax& operator= (ASN1C_IMPStream_AuthorityInfoAccessSyntax& srcData);
   void Append (ASN1T_IMPStream_AccessDescription *elem);
   ASN1T_IMPStream_AccessDescription *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_AuthorityInfoAccessSyntax (ASN1CTXT* pctxt,
   ASN1T_IMPStream_AuthorityInfoAccessSyntax *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_AuthorityInfoAccessSyntax
   (const char* name, ASN1T_IMPStream_AuthorityInfoAccessSyntax* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_AuthorityInfoAccessSyntax
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_AuthorityInfoAccessSyntax* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_AuthorityInfoAccessSyntax (ASN1ConstCharPtr name, ASN1T_IMPStream_AuthorityInfoAccessSyntax* pValue, ASN1T_IMPStream_AuthorityInfoAccessSyntax* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_AuthorityInfoAccessSyntax (ASN1CTXT *pctxt, ASN1T_IMPStream_AuthorityInfoAccessSyntax* pSrcValue, ASN1T_IMPStream_AuthorityInfoAccessSyntax* pDstValue);

EXTERN void asn1Free_IMPStream_AuthorityInfoAccessSyntax
   (ASN1CTXT *pctxt, ASN1T_IMPStream_AuthorityInfoAccessSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectInfoAccessSyntax                                   */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_AccessDescription */
typedef struct EXTERN ASN1T_IMPStream_SubjectInfoAccessSyntax : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_SubjectInfoAccessSyntax();
} ASN1T_IMPStream_SubjectInfoAccessSyntax;

class EXTERN ASN1C_IMPStream_SubjectInfoAccessSyntax :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_SubjectInfoAccessSyntax& msgData;
public:
   ASN1C_IMPStream_SubjectInfoAccessSyntax (ASN1T_IMPStream_SubjectInfoAccessSyntax& data);
   ASN1C_IMPStream_SubjectInfoAccessSyntax (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_SubjectInfoAccessSyntax& data);
   ASN1C_IMPStream_SubjectInfoAccessSyntax (ASN1C_IMPStream_SubjectInfoAccessSyntax& original);

   inline ASN1T_IMPStream_SubjectInfoAccessSyntax& getData () { return msgData; }
   inline const ASN1T_IMPStream_SubjectInfoAccessSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_SubjectInfoAccessSyntax* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_SubjectInfoAccessSyntax& getCopy (ASN1T_IMPStream_SubjectInfoAccessSyntax* pDstData = 0);
   ASN1T_IMPStream_SubjectInfoAccessSyntax* newCopy ();

   ASN1C_IMPStream_SubjectInfoAccessSyntax& operator= (ASN1C_IMPStream_SubjectInfoAccessSyntax& srcData);
   void Append (ASN1T_IMPStream_AccessDescription *elem);
   ASN1T_IMPStream_AccessDescription *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_SubjectInfoAccessSyntax (ASN1CTXT* pctxt,
   ASN1T_IMPStream_SubjectInfoAccessSyntax *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_SubjectInfoAccessSyntax
   (const char* name, ASN1T_IMPStream_SubjectInfoAccessSyntax* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_SubjectInfoAccessSyntax
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_SubjectInfoAccessSyntax* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_SubjectInfoAccessSyntax (ASN1ConstCharPtr name, ASN1T_IMPStream_SubjectInfoAccessSyntax* pValue, ASN1T_IMPStream_SubjectInfoAccessSyntax* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_SubjectInfoAccessSyntax (ASN1CTXT *pctxt, ASN1T_IMPStream_SubjectInfoAccessSyntax* pSrcValue, ASN1T_IMPStream_SubjectInfoAccessSyntax* pDstValue);

EXTERN void asn1Free_IMPStream_SubjectInfoAccessSyntax
   (ASN1CTXT *pctxt, ASN1T_IMPStream_SubjectInfoAccessSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectDirectoryAttributes                                */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_IMPStream_SubjectDirectoryAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_IMPStream_SubjectDirectoryAttributes();
} ASN1T_IMPStream_SubjectDirectoryAttributes;

class EXTERN ASN1C_IMPStream_SubjectDirectoryAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_IMPStream_SubjectDirectoryAttributes& msgData;
public:
   ASN1C_IMPStream_SubjectDirectoryAttributes (ASN1T_IMPStream_SubjectDirectoryAttributes& data);
   ASN1C_IMPStream_SubjectDirectoryAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_SubjectDirectoryAttributes& data);
   ASN1C_IMPStream_SubjectDirectoryAttributes (ASN1C_IMPStream_SubjectDirectoryAttributes& original);

   inline ASN1T_IMPStream_SubjectDirectoryAttributes& getData () { return msgData; }
   inline const ASN1T_IMPStream_SubjectDirectoryAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_SubjectDirectoryAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_SubjectDirectoryAttributes& getCopy (ASN1T_IMPStream_SubjectDirectoryAttributes* pDstData = 0);
   ASN1T_IMPStream_SubjectDirectoryAttributes* newCopy ();

   ASN1C_IMPStream_SubjectDirectoryAttributes& operator= (ASN1C_IMPStream_SubjectDirectoryAttributes& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_IMPStream_SubjectDirectoryAttributes (ASN1CTXT* pctxt,
   ASN1T_IMPStream_SubjectDirectoryAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_SubjectDirectoryAttributes
   (const char* name, ASN1T_IMPStream_SubjectDirectoryAttributes* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_SubjectDirectoryAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_SubjectDirectoryAttributes* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_SubjectDirectoryAttributes (ASN1ConstCharPtr name, ASN1T_IMPStream_SubjectDirectoryAttributes* pValue, ASN1T_IMPStream_SubjectDirectoryAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_SubjectDirectoryAttributes (ASN1CTXT *pctxt, ASN1T_IMPStream_SubjectDirectoryAttributes* pSrcValue, ASN1T_IMPStream_SubjectDirectoryAttributes* pDstValue);

EXTERN void asn1Free_IMPStream_SubjectDirectoryAttributes
   (ASN1CTXT *pctxt, ASN1T_IMPStream_SubjectDirectoryAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  RoleSyntax                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_IMPStream_RoleSyntax;

struct EXTERN ASN1T_IMPStream_RoleSyntax : public ASN1TPDU {
   struct {
      unsigned roleAuthorityPresent : 1;
   } m;
   ASN1T_IMPStream_GeneralNames roleAuthority;
   ASN1T_IMPStream_GeneralName roleName;
   ASN1T_IMPStream_RoleSyntax ();
   ASN1T_IMPStream_RoleSyntax (ASN1C_IMPStream_RoleSyntax& srcData);
   ~ASN1T_IMPStream_RoleSyntax ();
} ;

class EXTERN ASN1C_IMPStream_RoleSyntax :
   public ASN1CType
{
protected:
   ASN1T_IMPStream_RoleSyntax& msgData;
public:
   ASN1C_IMPStream_RoleSyntax (ASN1T_IMPStream_RoleSyntax& data);
   ASN1C_IMPStream_RoleSyntax (
      ASN1MessageBufferIF& msgBuf, ASN1T_IMPStream_RoleSyntax& data);
   ASN1C_IMPStream_RoleSyntax (ASN1C_IMPStream_RoleSyntax& original);

   inline ASN1T_IMPStream_RoleSyntax& getData () { return msgData; }
   inline const ASN1T_IMPStream_RoleSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_IMPStream_RoleSyntax* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_IMPStream_RoleSyntax& getCopy (ASN1T_IMPStream_RoleSyntax* pDstData = 0);
   ASN1T_IMPStream_RoleSyntax* newCopy ();

   inline ASN1C_IMPStream_RoleSyntax& operator= (ASN1C_IMPStream_RoleSyntax& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_IMPStream_RoleSyntax (ASN1CTXT* pctxt,
   ASN1T_IMPStream_RoleSyntax *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_IMPStream_RoleSyntax
   (const char* name, ASN1T_IMPStream_RoleSyntax* pvalue);

EXTERN int asn1PrtToStrm_IMPStream_RoleSyntax
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_IMPStream_RoleSyntax* pvalue);

EXTERN OSBOOL asn1Compare_IMPStream_RoleSyntax (ASN1ConstCharPtr name, ASN1T_IMPStream_RoleSyntax* pValue, ASN1T_IMPStream_RoleSyntax* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_IMPStream_RoleSyntax (ASN1CTXT *pctxt, ASN1T_IMPStream_RoleSyntax* pSrcValue, ASN1T_IMPStream_RoleSyntax* pDstValue);

EXTERN void asn1Free_IMPStream_RoleSyntax
   (ASN1CTXT *pctxt, ASN1T_IMPStream_RoleSyntax* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID IMPStream_id_ce;
extern EXTERN ASN1OBJID IMPStream_id_ce_authorityKeyIdentifier;
extern EXTERN ASN1OBJID IMPStream_id_ce_subjectKeyIdentifier;
extern EXTERN ASN1OBJID IMPStream_id_ce_keyUsage;
extern EXTERN ASN1OBJID IMPStream_id_ce_certificatePolicies;
extern EXTERN ASN1OBJID IMPStream_anyPolicy;
extern EXTERN ASN1OBJID IMPStream_id_ce_policyMappings;
extern EXTERN ASN1OBJID IMPStream_id_ce_basicConstraints;
extern EXTERN ASN1OBJID IMPStream_id_ce_extKeyUsage;
extern EXTERN ASN1OBJID IMPStream_anyExtendedKeyUsage;
extern EXTERN ASN1OBJID IMPStream_id_kp_serverAuth;
extern EXTERN ASN1OBJID IMPStream_id_kp_clientAuth;
extern EXTERN ASN1OBJID IMPStream_id_kp_codeSigning;
extern EXTERN ASN1OBJID IMPStream_id_kp_emailProtection;
extern EXTERN ASN1OBJID IMPStream_id_kp_ipsecEndSystem;
extern EXTERN ASN1OBJID IMPStream_id_kp_ipsecTunnel;
extern EXTERN ASN1OBJID IMPStream_id_kp_ipsecUser;
extern EXTERN ASN1OBJID IMPStream_id_kp_timeStamping;
extern EXTERN ASN1OBJID IMPStream_id_kp_OCSPSigning;
extern EXTERN ASN1OBJID IMPStream_id_kp_dvcs;
extern EXTERN ASN1OBJID IMPStream_id_ce_cRLDistributionPoints;
extern EXTERN ASN1OBJID IMPStream_id_pe_authorityInfoAccess;
extern EXTERN ASN1OBJID IMPStream_id_pe_subjectInfoAccess;
extern EXTERN ASN1OBJID IMPStream_id_ce_cRLNumber;
extern EXTERN ASN1OBJID IMPStream_id_ce_cRLReasons;
extern EXTERN ASN1OBJID IMPStream_id_ce_subjectDirectoryAttributes;
extern EXTERN ASN1OBJID IMPStream_id_at_role;
extern EXTERN ASN1OBJID IMPStream_id_win_certTemplate;
extern EXTERN ASN1OBJID IMPStream_id_ms_smartCardLogon;
extern EXTERN ASN1OBJID IMPStream_id_win_upn;
extern EXTERN ASN1OBJID IMPStream_id_win_otherNameforDC;
extern EXTERN ASN1OBJID IMPStream_id_ce_subjectAltName;

/**************************************************************/
/*                                                            */
/*  PrivateKey                                                */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_PKCS18Stream_PrivateKey;

class EXTERN ASN1C_PKCS18Stream_PrivateKey :
   public ASN1CType
{
protected:
   ASN1T_PKCS18Stream_PrivateKey& msgData;
public:
   ASN1C_PKCS18Stream_PrivateKey (ASN1T_PKCS18Stream_PrivateKey& data);
   ASN1C_PKCS18Stream_PrivateKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS18Stream_PrivateKey& data);
   ASN1C_PKCS18Stream_PrivateKey (ASN1C_PKCS18Stream_PrivateKey& original);

   inline ASN1T_PKCS18Stream_PrivateKey& getData () { return msgData; }
   inline const ASN1T_PKCS18Stream_PrivateKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS18Stream_PrivateKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS18Stream_PrivateKey& getCopy (ASN1T_PKCS18Stream_PrivateKey* pDstData = 0);
   ASN1T_PKCS18Stream_PrivateKey* newCopy ();

   inline ASN1C_PKCS18Stream_PrivateKey& operator= (ASN1C_PKCS18Stream_PrivateKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS18Stream_PrivateKey (ASN1CTXT* pctxt,
   ASN1T_PKCS18Stream_PrivateKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS18Stream_PrivateKey
   (const char* name, ASN1T_PKCS18Stream_PrivateKey* pvalue);

EXTERN int asn1PrtToStrm_PKCS18Stream_PrivateKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS18Stream_PrivateKey* pvalue);

EXTERN OSBOOL asn1Compare_PKCS18Stream_PrivateKey (ASN1ConstCharPtr name, ASN1T_PKCS18Stream_PrivateKey* pValue, ASN1T_PKCS18Stream_PrivateKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS18Stream_PrivateKey (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_PrivateKey* pSrcValue, ASN1T_PKCS18Stream_PrivateKey* pDstValue);

EXTERN void asn1Free_PKCS18Stream_PrivateKey
   (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_PrivateKey* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedData                                             */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_PKCS18Stream_EncryptedData;

class EXTERN ASN1C_PKCS18Stream_EncryptedData :
   public ASN1CType
{
protected:
   ASN1T_PKCS18Stream_EncryptedData& msgData;
public:
   ASN1C_PKCS18Stream_EncryptedData (ASN1T_PKCS18Stream_EncryptedData& data);
   ASN1C_PKCS18Stream_EncryptedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS18Stream_EncryptedData& data);
   ASN1C_PKCS18Stream_EncryptedData (ASN1C_PKCS18Stream_EncryptedData& original);

   inline ASN1T_PKCS18Stream_EncryptedData& getData () { return msgData; }
   inline const ASN1T_PKCS18Stream_EncryptedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS18Stream_EncryptedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS18Stream_EncryptedData& getCopy (ASN1T_PKCS18Stream_EncryptedData* pDstData = 0);
   ASN1T_PKCS18Stream_EncryptedData* newCopy ();

   inline ASN1C_PKCS18Stream_EncryptedData& operator= (ASN1C_PKCS18Stream_EncryptedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS18Stream_EncryptedData (ASN1CTXT* pctxt,
   ASN1T_PKCS18Stream_EncryptedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS18Stream_EncryptedData
   (const char* name, ASN1T_PKCS18Stream_EncryptedData* pvalue);

EXTERN int asn1PrtToStrm_PKCS18Stream_EncryptedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS18Stream_EncryptedData* pvalue);

EXTERN OSBOOL asn1Compare_PKCS18Stream_EncryptedData (ASN1ConstCharPtr name, ASN1T_PKCS18Stream_EncryptedData* pValue, ASN1T_PKCS18Stream_EncryptedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS18Stream_EncryptedData (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_EncryptedData* pSrcValue, ASN1T_PKCS18Stream_EncryptedData* pDstValue);

EXTERN void asn1Free_PKCS18Stream_EncryptedData
   (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_EncryptedData* pvalue);

/**************************************************************/
/*                                                            */
/*  PrivateKeyInfo                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS18Stream_PrivateKeyInfo;

struct EXTERN ASN1T_PKCS18Stream_PrivateKeyInfo : public ASN1TPDU {
   ASN1T_EXPStream_Version version;
   ASN1T_EXPStream_AlgorithmIdentifier privateKeyAlgorithm;
   ASN1T_PKCS18Stream_PrivateKey privateKey;
   ASN1T_PKCS18Stream_PrivateKeyInfo ();
   ASN1T_PKCS18Stream_PrivateKeyInfo (ASN1C_PKCS18Stream_PrivateKeyInfo& srcData);
   ~ASN1T_PKCS18Stream_PrivateKeyInfo ();
} ;

class EXTERN ASN1C_PKCS18Stream_PrivateKeyInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS18Stream_PrivateKeyInfo& msgData;
public:
   ASN1C_PKCS18Stream_PrivateKeyInfo (ASN1T_PKCS18Stream_PrivateKeyInfo& data);
   ASN1C_PKCS18Stream_PrivateKeyInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS18Stream_PrivateKeyInfo& data);
   ASN1C_PKCS18Stream_PrivateKeyInfo (ASN1C_PKCS18Stream_PrivateKeyInfo& original);

   inline ASN1T_PKCS18Stream_PrivateKeyInfo& getData () { return msgData; }
   inline const ASN1T_PKCS18Stream_PrivateKeyInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS18Stream_PrivateKeyInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS18Stream_PrivateKeyInfo& getCopy (ASN1T_PKCS18Stream_PrivateKeyInfo* pDstData = 0);
   ASN1T_PKCS18Stream_PrivateKeyInfo* newCopy ();

   inline ASN1C_PKCS18Stream_PrivateKeyInfo& operator= (ASN1C_PKCS18Stream_PrivateKeyInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS18Stream_PrivateKeyInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS18Stream_PrivateKeyInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS18Stream_PrivateKeyInfo
   (const char* name, ASN1T_PKCS18Stream_PrivateKeyInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS18Stream_PrivateKeyInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS18Stream_PrivateKeyInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS18Stream_PrivateKeyInfo (ASN1ConstCharPtr name, ASN1T_PKCS18Stream_PrivateKeyInfo* pValue, ASN1T_PKCS18Stream_PrivateKeyInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS18Stream_PrivateKeyInfo (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_PrivateKeyInfo* pSrcValue, ASN1T_PKCS18Stream_PrivateKeyInfo* pDstValue);

EXTERN void asn1Free_PKCS18Stream_PrivateKeyInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_PrivateKeyInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedPrivateKeyInfo                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo;

struct EXTERN ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier encryptionAlgorithm;
   ASN1T_PKCS18Stream_EncryptedData encryptedData;
   ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo ();
   ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo (ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo& srcData);
   ~ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo ();
} ;

class EXTERN ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo& msgData;
public:
   ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo (ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo& data);
   ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo& data);
   ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo (ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo& original);

   inline ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo& getData () { return msgData; }
   inline const ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo& getCopy (ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pDstData = 0);
   ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* newCopy ();

   inline ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo& operator= (ASN1C_PKCS18Stream_EncryptedPrivateKeyInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS18Stream_EncryptedPrivateKeyInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS18Stream_EncryptedPrivateKeyInfo
   (const char* name, ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS18Stream_EncryptedPrivateKeyInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS18Stream_EncryptedPrivateKeyInfo (ASN1ConstCharPtr name, ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pValue, ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS18Stream_EncryptedPrivateKeyInfo (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pSrcValue, ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pDstValue);

EXTERN void asn1Free_PKCS18Stream_EncryptedPrivateKeyInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_EncryptedPrivateKeyInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RSAPublicKey                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS18Stream_RSAPublicKey;

struct EXTERN ASN1T_PKCS18Stream_RSAPublicKey : public ASN1TPDU {
   ASN1ConstCharPtr modulus;
   ASN1ConstCharPtr publicExponent;
   ASN1T_PKCS18Stream_RSAPublicKey ();
   ASN1T_PKCS18Stream_RSAPublicKey (ASN1C_PKCS18Stream_RSAPublicKey& srcData);
} ;

class EXTERN ASN1C_PKCS18Stream_RSAPublicKey :
   public ASN1CType
{
protected:
   ASN1T_PKCS18Stream_RSAPublicKey& msgData;
public:
   ASN1C_PKCS18Stream_RSAPublicKey (ASN1T_PKCS18Stream_RSAPublicKey& data);
   ASN1C_PKCS18Stream_RSAPublicKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS18Stream_RSAPublicKey& data);
   ASN1C_PKCS18Stream_RSAPublicKey (ASN1C_PKCS18Stream_RSAPublicKey& original);

   inline ASN1T_PKCS18Stream_RSAPublicKey& getData () { return msgData; }
   inline const ASN1T_PKCS18Stream_RSAPublicKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS18Stream_RSAPublicKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS18Stream_RSAPublicKey& getCopy (ASN1T_PKCS18Stream_RSAPublicKey* pDstData = 0);
   ASN1T_PKCS18Stream_RSAPublicKey* newCopy ();

   inline ASN1C_PKCS18Stream_RSAPublicKey& operator= (ASN1C_PKCS18Stream_RSAPublicKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS18Stream_RSAPublicKey (ASN1CTXT* pctxt,
   ASN1T_PKCS18Stream_RSAPublicKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS18Stream_RSAPublicKey
   (const char* name, ASN1T_PKCS18Stream_RSAPublicKey* pvalue);

EXTERN int asn1PrtToStrm_PKCS18Stream_RSAPublicKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS18Stream_RSAPublicKey* pvalue);

EXTERN OSBOOL asn1Compare_PKCS18Stream_RSAPublicKey (ASN1ConstCharPtr name, ASN1T_PKCS18Stream_RSAPublicKey* pValue, ASN1T_PKCS18Stream_RSAPublicKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS18Stream_RSAPublicKey (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_RSAPublicKey* pSrcValue, ASN1T_PKCS18Stream_RSAPublicKey* pDstValue);

/**************************************************************/
/*                                                            */
/*  RSAPrivateKey                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS18Stream_RSAPrivateKey;

struct EXTERN ASN1T_PKCS18Stream_RSAPrivateKey : public ASN1TPDU {
   ASN1T_EXPStream_Version version;
   ASN1ConstCharPtr modulus;
   ASN1ConstCharPtr publicExponent;
   ASN1ConstCharPtr privateExponent;
   ASN1ConstCharPtr prime1;
   ASN1ConstCharPtr prime2;
   ASN1ConstCharPtr exponent1;
   ASN1ConstCharPtr exponent2;
   ASN1ConstCharPtr coefficient;
   ASN1T_PKCS18Stream_RSAPrivateKey ();
   ASN1T_PKCS18Stream_RSAPrivateKey (ASN1C_PKCS18Stream_RSAPrivateKey& srcData);
} ;

class EXTERN ASN1C_PKCS18Stream_RSAPrivateKey :
   public ASN1CType
{
protected:
   ASN1T_PKCS18Stream_RSAPrivateKey& msgData;
public:
   ASN1C_PKCS18Stream_RSAPrivateKey (ASN1T_PKCS18Stream_RSAPrivateKey& data);
   ASN1C_PKCS18Stream_RSAPrivateKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS18Stream_RSAPrivateKey& data);
   ASN1C_PKCS18Stream_RSAPrivateKey (ASN1C_PKCS18Stream_RSAPrivateKey& original);

   inline ASN1T_PKCS18Stream_RSAPrivateKey& getData () { return msgData; }
   inline const ASN1T_PKCS18Stream_RSAPrivateKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS18Stream_RSAPrivateKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS18Stream_RSAPrivateKey& getCopy (ASN1T_PKCS18Stream_RSAPrivateKey* pDstData = 0);
   ASN1T_PKCS18Stream_RSAPrivateKey* newCopy ();

   inline ASN1C_PKCS18Stream_RSAPrivateKey& operator= (ASN1C_PKCS18Stream_RSAPrivateKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS18Stream_RSAPrivateKey (ASN1CTXT* pctxt,
   ASN1T_PKCS18Stream_RSAPrivateKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS18Stream_RSAPrivateKey
   (const char* name, ASN1T_PKCS18Stream_RSAPrivateKey* pvalue);

EXTERN int asn1PrtToStrm_PKCS18Stream_RSAPrivateKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS18Stream_RSAPrivateKey* pvalue);

EXTERN OSBOOL asn1Compare_PKCS18Stream_RSAPrivateKey (ASN1ConstCharPtr name, ASN1T_PKCS18Stream_RSAPrivateKey* pValue, ASN1T_PKCS18Stream_RSAPrivateKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS18Stream_RSAPrivateKey (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_RSAPrivateKey* pSrcValue, ASN1T_PKCS18Stream_RSAPrivateKey* pDstValue);

/**************************************************************/
/*                                                            */
/*  DigestInfo                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS18Stream_DigestInfo;

struct EXTERN ASN1T_PKCS18Stream_DigestInfo : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier digestAlgorithm;
   ASN1TDynOctStr digest;
   ASN1T_PKCS18Stream_DigestInfo ();
   ASN1T_PKCS18Stream_DigestInfo (ASN1C_PKCS18Stream_DigestInfo& srcData);
   ~ASN1T_PKCS18Stream_DigestInfo ();
} ;

class EXTERN ASN1C_PKCS18Stream_DigestInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS18Stream_DigestInfo& msgData;
public:
   ASN1C_PKCS18Stream_DigestInfo (ASN1T_PKCS18Stream_DigestInfo& data);
   ASN1C_PKCS18Stream_DigestInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS18Stream_DigestInfo& data);
   ASN1C_PKCS18Stream_DigestInfo (ASN1C_PKCS18Stream_DigestInfo& original);

   inline ASN1T_PKCS18Stream_DigestInfo& getData () { return msgData; }
   inline const ASN1T_PKCS18Stream_DigestInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS18Stream_DigestInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS18Stream_DigestInfo& getCopy (ASN1T_PKCS18Stream_DigestInfo* pDstData = 0);
   ASN1T_PKCS18Stream_DigestInfo* newCopy ();

   inline ASN1C_PKCS18Stream_DigestInfo& operator= (ASN1C_PKCS18Stream_DigestInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS18Stream_DigestInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS18Stream_DigestInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS18Stream_DigestInfo
   (const char* name, ASN1T_PKCS18Stream_DigestInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS18Stream_DigestInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS18Stream_DigestInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS18Stream_DigestInfo (ASN1ConstCharPtr name, ASN1T_PKCS18Stream_DigestInfo* pValue, ASN1T_PKCS18Stream_DigestInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS18Stream_DigestInfo (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_DigestInfo* pSrcValue, ASN1T_PKCS18Stream_DigestInfo* pDstValue);

EXTERN void asn1Free_PKCS18Stream_DigestInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS18Stream_DigestInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  AES_IV                                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_AESStream_AES_IV;

struct EXTERN ASN1T_AESStream_AES_IV {
   OSUINT32 numocts;
   OSOCTET data[16];
   // ctors
   ASN1T_AESStream_AES_IV () : numocts(0) {}
   ASN1T_AESStream_AES_IV (OSUINT32 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      memcpy (data, _data, ASN1MIN (numocts, sizeof(data)));
   }
   ASN1T_AESStream_AES_IV (const char* cstring) {
      if (strlen(cstring) > 0) {
         numocts = ASN1MIN ((strlen(cstring)+1), sizeof(data));
         strncpy ((char*)data, cstring, sizeof(data));
      }
      else numocts = 0;
   }
   ASN1T_AESStream_AES_IV (ASN1C_AESStream_AES_IV& srcData);
   // assignment operators
   ASN1T_AESStream_AES_IV& operator= (const char* cstring) {
      if (strlen(cstring) > 0) {
         numocts = ASN1MIN ((strlen(cstring)+1), sizeof(data));
         strncpy ((char*)data, cstring, sizeof(data));
      }
      else numocts = 0;
      return *this;
   }
} ;

class EXTERN ASN1C_AESStream_AES_IV :
   public ASN1CType
{
protected:
   ASN1T_AESStream_AES_IV& msgData;
public:
   ASN1C_AESStream_AES_IV (ASN1T_AESStream_AES_IV& data);
   ASN1C_AESStream_AES_IV (
      ASN1MessageBufferIF& msgBuf, ASN1T_AESStream_AES_IV& data);
   ASN1C_AESStream_AES_IV (ASN1C_AESStream_AES_IV& original);

   inline ASN1T_AESStream_AES_IV& getData () { return msgData; }
   inline const ASN1T_AESStream_AES_IV& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_AESStream_AES_IV* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_AESStream_AES_IV& getCopy (ASN1T_AESStream_AES_IV* pDstData = 0);
   ASN1T_AESStream_AES_IV* newCopy ();

   inline ASN1C_AESStream_AES_IV& operator= (ASN1C_AESStream_AES_IV& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_AESStream_AES_IV (ASN1CTXT* pctxt,
   ASN1T_AESStream_AES_IV *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_AESStream_AES_IV
   (const char* name, ASN1T_AESStream_AES_IV* pvalue);

EXTERN int asn1PrtToStrm_AESStream_AES_IV
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_AESStream_AES_IV* pvalue);

EXTERN OSBOOL asn1Compare_AESStream_AES_IV (ASN1ConstCharPtr name, ASN1T_AESStream_AES_IV* pValue, ASN1T_AESStream_AES_IV* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_AESStream_AES_IV (ASN1CTXT *pctxt, ASN1T_AESStream_AES_IV* pSrcValue, ASN1T_AESStream_AES_IV* pDstValue);

/**************************************************************/
/*                                                            */
/*  NumberOfBits                                              */
/*                                                            */
/**************************************************************/

typedef OSUINT8 ASN1T_AESStream_NumberOfBits;

class EXTERN ASN1C_AESStream_NumberOfBits :
   public ASN1CType
{
protected:
   ASN1T_AESStream_NumberOfBits& msgData;
public:
   ASN1C_AESStream_NumberOfBits (ASN1T_AESStream_NumberOfBits& data);
   ASN1C_AESStream_NumberOfBits (
      ASN1MessageBufferIF& msgBuf, ASN1T_AESStream_NumberOfBits& data);
   ASN1C_AESStream_NumberOfBits (ASN1C_AESStream_NumberOfBits& original);

   inline ASN1T_AESStream_NumberOfBits& getData () { return msgData; }
   inline const ASN1T_AESStream_NumberOfBits& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_AESStream_NumberOfBits* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_AESStream_NumberOfBits& getCopy (ASN1T_AESStream_NumberOfBits* pDstData = 0);
   ASN1T_AESStream_NumberOfBits* newCopy ();

   inline ASN1C_AESStream_NumberOfBits& operator= (ASN1C_AESStream_NumberOfBits& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_AESStream_NumberOfBits (ASN1CTXT* pctxt,
   ASN1T_AESStream_NumberOfBits *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_AESStream_NumberOfBits
   (const char* name, ASN1T_AESStream_NumberOfBits* pvalue);

EXTERN int asn1PrtToStrm_AESStream_NumberOfBits
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_AESStream_NumberOfBits* pvalue);

EXTERN OSBOOL asn1Compare_AESStream_NumberOfBits (ASN1ConstCharPtr name, ASN1T_AESStream_NumberOfBits* pValue, ASN1T_AESStream_NumberOfBits* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_AESStream_NumberOfBits (ASN1CTXT *pctxt, ASN1T_AESStream_NumberOfBits* pSrcValue, ASN1T_AESStream_NumberOfBits* pDstValue);

/**************************************************************/
/*                                                            */
/*  CFBParameters                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_AESStream_CFBParameters;

struct EXTERN ASN1T_AESStream_CFBParameters : public ASN1TPDU {
   ASN1T_AESStream_AES_IV aes_IV;
   ASN1T_AESStream_NumberOfBits numberOfBits;
   ASN1T_AESStream_CFBParameters ();
   ASN1T_AESStream_CFBParameters (ASN1C_AESStream_CFBParameters& srcData);
} ;

class EXTERN ASN1C_AESStream_CFBParameters :
   public ASN1CType
{
protected:
   ASN1T_AESStream_CFBParameters& msgData;
public:
   ASN1C_AESStream_CFBParameters (ASN1T_AESStream_CFBParameters& data);
   ASN1C_AESStream_CFBParameters (
      ASN1MessageBufferIF& msgBuf, ASN1T_AESStream_CFBParameters& data);
   ASN1C_AESStream_CFBParameters (ASN1C_AESStream_CFBParameters& original);

   inline ASN1T_AESStream_CFBParameters& getData () { return msgData; }
   inline const ASN1T_AESStream_CFBParameters& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_AESStream_CFBParameters* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_AESStream_CFBParameters& getCopy (ASN1T_AESStream_CFBParameters* pDstData = 0);
   ASN1T_AESStream_CFBParameters* newCopy ();

   inline ASN1C_AESStream_CFBParameters& operator= (ASN1C_AESStream_CFBParameters& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_AESStream_CFBParameters (ASN1CTXT* pctxt,
   ASN1T_AESStream_CFBParameters *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_AESStream_CFBParameters
   (const char* name, ASN1T_AESStream_CFBParameters* pvalue);

EXTERN int asn1PrtToStrm_AESStream_CFBParameters
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_AESStream_CFBParameters* pvalue);

EXTERN OSBOOL asn1Compare_AESStream_CFBParameters (ASN1ConstCharPtr name, ASN1T_AESStream_CFBParameters* pValue, ASN1T_AESStream_CFBParameters* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_AESStream_CFBParameters (ASN1CTXT *pctxt, ASN1T_AESStream_CFBParameters* pSrcValue, ASN1T_AESStream_CFBParameters* pDstValue);

/* Value definitions */

extern EXTERN ASN1OBJID AESStream_csor;
extern EXTERN ASN1OBJID AESStream_nistAlgorithms;
extern EXTERN ASN1OBJID AESStream_aes;
extern EXTERN ASN1OBJID AESStream_id_aes128_ECB;
extern EXTERN ASN1OBJID AESStream_id_aes128_CBC;
extern EXTERN ASN1OBJID AESStream_id_aes128_OFB;
extern EXTERN ASN1OBJID AESStream_id_aes128_CFB;
extern EXTERN ASN1OBJID AESStream_id_aes192_ECB;
extern EXTERN ASN1OBJID AESStream_id_aes192_CBC;
extern EXTERN ASN1OBJID AESStream_id_aes192_OFB;
extern EXTERN ASN1OBJID AESStream_id_aes192_CFB;
extern EXTERN ASN1OBJID AESStream_id_aes256_ECB;
extern EXTERN ASN1OBJID AESStream_id_aes256_CBC;
extern EXTERN ASN1OBJID AESStream_id_aes256_OFB;
extern EXTERN ASN1OBJID AESStream_id_aes256_CFB;

/**************************************************************/
/*                                                            */
/*  KEA_Parms_Id                                              */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_ALGOSStream_KEA_Parms_Id;

class EXTERN ASN1C_ALGOSStream_KEA_Parms_Id :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_KEA_Parms_Id& msgData;
public:
   ASN1C_ALGOSStream_KEA_Parms_Id (ASN1T_ALGOSStream_KEA_Parms_Id& data);
   ASN1C_ALGOSStream_KEA_Parms_Id (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_KEA_Parms_Id& data);
   ASN1C_ALGOSStream_KEA_Parms_Id (ASN1C_ALGOSStream_KEA_Parms_Id& original);

   inline ASN1T_ALGOSStream_KEA_Parms_Id& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_KEA_Parms_Id& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_KEA_Parms_Id* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_KEA_Parms_Id& getCopy (ASN1T_ALGOSStream_KEA_Parms_Id* pDstData = 0);
   ASN1T_ALGOSStream_KEA_Parms_Id* newCopy ();

   inline ASN1C_ALGOSStream_KEA_Parms_Id& operator= (ASN1C_ALGOSStream_KEA_Parms_Id& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_KEA_Parms_Id (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_KEA_Parms_Id *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_KEA_Parms_Id
   (const char* name, ASN1T_ALGOSStream_KEA_Parms_Id* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_KEA_Parms_Id
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_KEA_Parms_Id* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_KEA_Parms_Id (ASN1ConstCharPtr name, ASN1T_ALGOSStream_KEA_Parms_Id* pValue, ASN1T_ALGOSStream_KEA_Parms_Id* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_KEA_Parms_Id (ASN1CTXT *pctxt, ASN1T_ALGOSStream_KEA_Parms_Id* pSrcValue, ASN1T_ALGOSStream_KEA_Parms_Id* pDstValue);

EXTERN void asn1Free_ALGOSStream_KEA_Parms_Id
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_KEA_Parms_Id* pvalue);

/**************************************************************/
/*                                                            */
/*  Prime_p                                                   */
/*                                                            */
/**************************************************************/

typedef OSINT32 ASN1T_ALGOSStream_Prime_p;

class EXTERN ASN1C_ALGOSStream_Prime_p :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_Prime_p& msgData;
public:
   ASN1C_ALGOSStream_Prime_p (ASN1T_ALGOSStream_Prime_p& data);
   ASN1C_ALGOSStream_Prime_p (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_Prime_p& data);
   ASN1C_ALGOSStream_Prime_p (ASN1C_ALGOSStream_Prime_p& original);

   inline ASN1T_ALGOSStream_Prime_p& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_Prime_p& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_Prime_p* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_Prime_p& getCopy (ASN1T_ALGOSStream_Prime_p* pDstData = 0);
   ASN1T_ALGOSStream_Prime_p* newCopy ();

   inline ASN1C_ALGOSStream_Prime_p& operator= (ASN1C_ALGOSStream_Prime_p& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_Prime_p (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_Prime_p *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_Prime_p
   (const char* name, ASN1T_ALGOSStream_Prime_p* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_Prime_p
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_Prime_p* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_Prime_p (ASN1ConstCharPtr name, ASN1T_ALGOSStream_Prime_p* pValue, ASN1T_ALGOSStream_Prime_p* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_Prime_p (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Prime_p* pSrcValue, ASN1T_ALGOSStream_Prime_p* pDstValue);

/**************************************************************/
/*                                                            */
/*  Trinomial                                                 */
/*                                                            */
/**************************************************************/

typedef OSINT32 ASN1T_ALGOSStream_Trinomial;

class EXTERN ASN1C_ALGOSStream_Trinomial :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_Trinomial& msgData;
public:
   ASN1C_ALGOSStream_Trinomial (ASN1T_ALGOSStream_Trinomial& data);
   ASN1C_ALGOSStream_Trinomial (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_Trinomial& data);
   ASN1C_ALGOSStream_Trinomial (ASN1C_ALGOSStream_Trinomial& original);

   inline ASN1T_ALGOSStream_Trinomial& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_Trinomial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_Trinomial* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_Trinomial& getCopy (ASN1T_ALGOSStream_Trinomial* pDstData = 0);
   ASN1T_ALGOSStream_Trinomial* newCopy ();

   inline ASN1C_ALGOSStream_Trinomial& operator= (ASN1C_ALGOSStream_Trinomial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_Trinomial (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_Trinomial *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_Trinomial
   (const char* name, ASN1T_ALGOSStream_Trinomial* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_Trinomial
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_Trinomial* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_Trinomial (ASN1ConstCharPtr name, ASN1T_ALGOSStream_Trinomial* pValue, ASN1T_ALGOSStream_Trinomial* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_Trinomial (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Trinomial* pSrcValue, ASN1T_ALGOSStream_Trinomial* pDstValue);

/**************************************************************/
/*                                                            */
/*  FieldElement                                              */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_ALGOSStream_FieldElement;

class EXTERN ASN1C_ALGOSStream_FieldElement :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_FieldElement& msgData;
public:
   ASN1C_ALGOSStream_FieldElement (ASN1T_ALGOSStream_FieldElement& data);
   ASN1C_ALGOSStream_FieldElement (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_FieldElement& data);
   ASN1C_ALGOSStream_FieldElement (ASN1C_ALGOSStream_FieldElement& original);

   inline ASN1T_ALGOSStream_FieldElement& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_FieldElement& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_FieldElement* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_FieldElement& getCopy (ASN1T_ALGOSStream_FieldElement* pDstData = 0);
   ASN1T_ALGOSStream_FieldElement* newCopy ();

   inline ASN1C_ALGOSStream_FieldElement& operator= (ASN1C_ALGOSStream_FieldElement& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_FieldElement (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_FieldElement *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_FieldElement
   (const char* name, ASN1T_ALGOSStream_FieldElement* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_FieldElement
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_FieldElement* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_FieldElement (ASN1ConstCharPtr name, ASN1T_ALGOSStream_FieldElement* pValue, ASN1T_ALGOSStream_FieldElement* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_FieldElement (ASN1CTXT *pctxt, ASN1T_ALGOSStream_FieldElement* pSrcValue, ASN1T_ALGOSStream_FieldElement* pDstValue);

EXTERN void asn1Free_ALGOSStream_FieldElement
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_FieldElement* pvalue);

/**************************************************************/
/*                                                            */
/*  ECPoint                                                   */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_ALGOSStream_ECPoint;

class EXTERN ASN1C_ALGOSStream_ECPoint :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_ECPoint& msgData;
public:
   ASN1C_ALGOSStream_ECPoint (ASN1T_ALGOSStream_ECPoint& data);
   ASN1C_ALGOSStream_ECPoint (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_ECPoint& data);
   ASN1C_ALGOSStream_ECPoint (ASN1C_ALGOSStream_ECPoint& original);

   inline ASN1T_ALGOSStream_ECPoint& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_ECPoint& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_ECPoint* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_ECPoint& getCopy (ASN1T_ALGOSStream_ECPoint* pDstData = 0);
   ASN1T_ALGOSStream_ECPoint* newCopy ();

   inline ASN1C_ALGOSStream_ECPoint& operator= (ASN1C_ALGOSStream_ECPoint& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_ECPoint (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_ECPoint *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_ECPoint
   (const char* name, ASN1T_ALGOSStream_ECPoint* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_ECPoint
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_ECPoint* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_ECPoint (ASN1ConstCharPtr name, ASN1T_ALGOSStream_ECPoint* pValue, ASN1T_ALGOSStream_ECPoint* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_ECPoint (ASN1CTXT *pctxt, ASN1T_ALGOSStream_ECPoint* pSrcValue, ASN1T_ALGOSStream_ECPoint* pDstValue);

EXTERN void asn1Free_ALGOSStream_ECPoint
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_ECPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  ECPVer                                                    */
/*                                                            */
/**************************************************************/

struct EXTERN ALGOSStream_ECPVer {
   enum Root {
      ecpVer1 = 1
   } ;
} ;

typedef OSUINT32 ASN1T_ALGOSStream_ECPVer;

class EXTERN ASN1C_ALGOSStream_ECPVer :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_ECPVer& msgData;
public:
   ASN1C_ALGOSStream_ECPVer (ASN1T_ALGOSStream_ECPVer& data);
   ASN1C_ALGOSStream_ECPVer (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_ECPVer& data);
   ASN1C_ALGOSStream_ECPVer (ASN1C_ALGOSStream_ECPVer& original);

   inline ASN1T_ALGOSStream_ECPVer& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_ECPVer& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_ECPVer* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_ECPVer& getCopy (ASN1T_ALGOSStream_ECPVer* pDstData = 0);
   ASN1T_ALGOSStream_ECPVer* newCopy ();

   inline ASN1C_ALGOSStream_ECPVer& operator= (ASN1C_ALGOSStream_ECPVer& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_ECPVer (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_ECPVer *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_ECPVer
   (const char* name, ASN1T_ALGOSStream_ECPVer* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_ECPVer
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_ECPVer* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_ECPVer (ASN1ConstCharPtr name, ASN1T_ALGOSStream_ECPVer* pValue, ASN1T_ALGOSStream_ECPVer* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_ECPVer (ASN1CTXT *pctxt, ASN1T_ALGOSStream_ECPVer* pSrcValue, ASN1T_ALGOSStream_ECPVer* pDstValue);

/**************************************************************/
/*                                                            */
/*  Dss_Parms                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_Dss_Parms;

struct EXTERN ASN1T_ALGOSStream_Dss_Parms : public ASN1TPDU {
   OSINT32 p;
   OSINT32 q;
   OSINT32 g;
   ASN1T_ALGOSStream_Dss_Parms ();
   ASN1T_ALGOSStream_Dss_Parms (ASN1C_ALGOSStream_Dss_Parms& srcData);
} ;

class EXTERN ASN1C_ALGOSStream_Dss_Parms :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_Dss_Parms& msgData;
public:
   ASN1C_ALGOSStream_Dss_Parms (ASN1T_ALGOSStream_Dss_Parms& data);
   ASN1C_ALGOSStream_Dss_Parms (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_Dss_Parms& data);
   ASN1C_ALGOSStream_Dss_Parms (ASN1C_ALGOSStream_Dss_Parms& original);

   inline ASN1T_ALGOSStream_Dss_Parms& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_Dss_Parms& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_Dss_Parms* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_Dss_Parms& getCopy (ASN1T_ALGOSStream_Dss_Parms* pDstData = 0);
   ASN1T_ALGOSStream_Dss_Parms* newCopy ();

   inline ASN1C_ALGOSStream_Dss_Parms& operator= (ASN1C_ALGOSStream_Dss_Parms& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_Dss_Parms (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_Dss_Parms *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_Dss_Parms
   (const char* name, ASN1T_ALGOSStream_Dss_Parms* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_Dss_Parms
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_Dss_Parms* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_Dss_Parms (ASN1ConstCharPtr name, ASN1T_ALGOSStream_Dss_Parms* pValue, ASN1T_ALGOSStream_Dss_Parms* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_Dss_Parms (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Dss_Parms* pSrcValue, ASN1T_ALGOSStream_Dss_Parms* pDstValue);

/**************************************************************/
/*                                                            */
/*  Dss_Sig_Value                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_Dss_Sig_Value;

struct EXTERN ASN1T_ALGOSStream_Dss_Sig_Value : public ASN1TPDU {
   OSINT32 r;
   OSINT32 s;
   ASN1T_ALGOSStream_Dss_Sig_Value ();
   ASN1T_ALGOSStream_Dss_Sig_Value (ASN1C_ALGOSStream_Dss_Sig_Value& srcData);
} ;

class EXTERN ASN1C_ALGOSStream_Dss_Sig_Value :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_Dss_Sig_Value& msgData;
public:
   ASN1C_ALGOSStream_Dss_Sig_Value (ASN1T_ALGOSStream_Dss_Sig_Value& data);
   ASN1C_ALGOSStream_Dss_Sig_Value (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_Dss_Sig_Value& data);
   ASN1C_ALGOSStream_Dss_Sig_Value (ASN1C_ALGOSStream_Dss_Sig_Value& original);

   inline ASN1T_ALGOSStream_Dss_Sig_Value& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_Dss_Sig_Value& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_Dss_Sig_Value* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_Dss_Sig_Value& getCopy (ASN1T_ALGOSStream_Dss_Sig_Value* pDstData = 0);
   ASN1T_ALGOSStream_Dss_Sig_Value* newCopy ();

   inline ASN1C_ALGOSStream_Dss_Sig_Value& operator= (ASN1C_ALGOSStream_Dss_Sig_Value& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_Dss_Sig_Value (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_Dss_Sig_Value *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_Dss_Sig_Value
   (const char* name, ASN1T_ALGOSStream_Dss_Sig_Value* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_Dss_Sig_Value
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_Dss_Sig_Value* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_Dss_Sig_Value (ASN1ConstCharPtr name, ASN1T_ALGOSStream_Dss_Sig_Value* pValue, ASN1T_ALGOSStream_Dss_Sig_Value* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_Dss_Sig_Value (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Dss_Sig_Value* pSrcValue, ASN1T_ALGOSStream_Dss_Sig_Value* pDstValue);

/**************************************************************/
/*                                                            */
/*  ValidationParms                                           */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_ValidationParms;

struct EXTERN ASN1T_ALGOSStream_ValidationParms : public ASN1TPDU {
   ASN1TDynBitStr seed;
   OSINT32 pgenCounter;
   ASN1T_ALGOSStream_ValidationParms ();
   ASN1T_ALGOSStream_ValidationParms (ASN1C_ALGOSStream_ValidationParms& srcData);
   ~ASN1T_ALGOSStream_ValidationParms ();
} ;

class EXTERN ASN1C_ALGOSStream_ValidationParms :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_ValidationParms& msgData;
public:
   ASN1C_ALGOSStream_ValidationParms (ASN1T_ALGOSStream_ValidationParms& data);
   ASN1C_ALGOSStream_ValidationParms (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_ValidationParms& data);
   ASN1C_ALGOSStream_ValidationParms (ASN1C_ALGOSStream_ValidationParms& original);

   inline ASN1T_ALGOSStream_ValidationParms& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_ValidationParms& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_ValidationParms* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_ValidationParms& getCopy (ASN1T_ALGOSStream_ValidationParms* pDstData = 0);
   ASN1T_ALGOSStream_ValidationParms* newCopy ();

   inline ASN1C_ALGOSStream_ValidationParms& operator= (ASN1C_ALGOSStream_ValidationParms& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_ValidationParms (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_ValidationParms *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_ValidationParms
   (const char* name, ASN1T_ALGOSStream_ValidationParms* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_ValidationParms
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_ValidationParms* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_ValidationParms (ASN1ConstCharPtr name, ASN1T_ALGOSStream_ValidationParms* pValue, ASN1T_ALGOSStream_ValidationParms* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_ValidationParms (ASN1CTXT *pctxt, ASN1T_ALGOSStream_ValidationParms* pSrcValue, ASN1T_ALGOSStream_ValidationParms* pDstValue);

EXTERN void asn1Free_ALGOSStream_ValidationParms
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_ValidationParms* pvalue);

/**************************************************************/
/*                                                            */
/*  DomainParameters                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_DomainParameters;

struct EXTERN ASN1T_ALGOSStream_DomainParameters : public ASN1TPDU {
   struct {
      unsigned jPresent : 1;
      unsigned validationParmsPresent : 1;
   } m;
   OSINT32 p;
   OSINT32 g;
   OSINT32 q;
   OSINT32 j;
   ASN1T_ALGOSStream_ValidationParms validationParms;
   ASN1T_ALGOSStream_DomainParameters ();
   ASN1T_ALGOSStream_DomainParameters (ASN1C_ALGOSStream_DomainParameters& srcData);
   ~ASN1T_ALGOSStream_DomainParameters ();
} ;

class EXTERN ASN1C_ALGOSStream_DomainParameters :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_DomainParameters& msgData;
public:
   ASN1C_ALGOSStream_DomainParameters (ASN1T_ALGOSStream_DomainParameters& data);
   ASN1C_ALGOSStream_DomainParameters (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_DomainParameters& data);
   ASN1C_ALGOSStream_DomainParameters (ASN1C_ALGOSStream_DomainParameters& original);

   inline ASN1T_ALGOSStream_DomainParameters& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_DomainParameters& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_DomainParameters* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_DomainParameters& getCopy (ASN1T_ALGOSStream_DomainParameters* pDstData = 0);
   ASN1T_ALGOSStream_DomainParameters* newCopy ();

   inline ASN1C_ALGOSStream_DomainParameters& operator= (ASN1C_ALGOSStream_DomainParameters& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_DomainParameters (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_DomainParameters *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_DomainParameters
   (const char* name, ASN1T_ALGOSStream_DomainParameters* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_DomainParameters
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_DomainParameters* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_DomainParameters (ASN1ConstCharPtr name, ASN1T_ALGOSStream_DomainParameters* pValue, ASN1T_ALGOSStream_DomainParameters* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_DomainParameters (ASN1CTXT *pctxt, ASN1T_ALGOSStream_DomainParameters* pSrcValue, ASN1T_ALGOSStream_DomainParameters* pDstValue);

EXTERN void asn1Free_ALGOSStream_DomainParameters
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_DomainParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  FieldID                                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_FieldID;

struct EXTERN ASN1T_ALGOSStream_FieldID : public ASN1TPDU {
   ASN1TObjId fieldType;
   ASN1TOpenType parameters;
   ASN1T_ALGOSStream_FieldID ();
   ASN1T_ALGOSStream_FieldID (ASN1C_ALGOSStream_FieldID& srcData);
   ~ASN1T_ALGOSStream_FieldID ();
} ;

class EXTERN ASN1C_ALGOSStream_FieldID :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_FieldID& msgData;
public:
   ASN1C_ALGOSStream_FieldID (ASN1T_ALGOSStream_FieldID& data);
   ASN1C_ALGOSStream_FieldID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_FieldID& data);
   ASN1C_ALGOSStream_FieldID (ASN1C_ALGOSStream_FieldID& original);

   inline ASN1T_ALGOSStream_FieldID& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_FieldID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_FieldID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_FieldID& getCopy (ASN1T_ALGOSStream_FieldID* pDstData = 0);
   ASN1T_ALGOSStream_FieldID* newCopy ();

   inline ASN1C_ALGOSStream_FieldID& operator= (ASN1C_ALGOSStream_FieldID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_FieldID (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_FieldID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_FieldID
   (const char* name, ASN1T_ALGOSStream_FieldID* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_FieldID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_FieldID* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_FieldID (ASN1ConstCharPtr name, ASN1T_ALGOSStream_FieldID* pValue, ASN1T_ALGOSStream_FieldID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_FieldID (ASN1CTXT *pctxt, ASN1T_ALGOSStream_FieldID* pSrcValue, ASN1T_ALGOSStream_FieldID* pDstValue);

EXTERN void asn1Free_ALGOSStream_FieldID
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_FieldID* pvalue);

/**************************************************************/
/*                                                            */
/*  ECDSA_Sig_Value                                           */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_ECDSA_Sig_Value;

struct EXTERN ASN1T_ALGOSStream_ECDSA_Sig_Value : public ASN1TPDU {
   OSINT32 r;
   OSINT32 s;
   ASN1T_ALGOSStream_ECDSA_Sig_Value ();
   ASN1T_ALGOSStream_ECDSA_Sig_Value (ASN1C_ALGOSStream_ECDSA_Sig_Value& srcData);
} ;

class EXTERN ASN1C_ALGOSStream_ECDSA_Sig_Value :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_ECDSA_Sig_Value& msgData;
public:
   ASN1C_ALGOSStream_ECDSA_Sig_Value (ASN1T_ALGOSStream_ECDSA_Sig_Value& data);
   ASN1C_ALGOSStream_ECDSA_Sig_Value (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_ECDSA_Sig_Value& data);
   ASN1C_ALGOSStream_ECDSA_Sig_Value (ASN1C_ALGOSStream_ECDSA_Sig_Value& original);

   inline ASN1T_ALGOSStream_ECDSA_Sig_Value& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_ECDSA_Sig_Value& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_ECDSA_Sig_Value* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_ECDSA_Sig_Value& getCopy (ASN1T_ALGOSStream_ECDSA_Sig_Value* pDstData = 0);
   ASN1T_ALGOSStream_ECDSA_Sig_Value* newCopy ();

   inline ASN1C_ALGOSStream_ECDSA_Sig_Value& operator= (ASN1C_ALGOSStream_ECDSA_Sig_Value& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_ECDSA_Sig_Value (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_ECDSA_Sig_Value *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_ECDSA_Sig_Value
   (const char* name, ASN1T_ALGOSStream_ECDSA_Sig_Value* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_ECDSA_Sig_Value
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_ECDSA_Sig_Value* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_ECDSA_Sig_Value (ASN1ConstCharPtr name, ASN1T_ALGOSStream_ECDSA_Sig_Value* pValue, ASN1T_ALGOSStream_ECDSA_Sig_Value* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_ECDSA_Sig_Value (ASN1CTXT *pctxt, ASN1T_ALGOSStream_ECDSA_Sig_Value* pSrcValue, ASN1T_ALGOSStream_ECDSA_Sig_Value* pDstValue);

/**************************************************************/
/*                                                            */
/*  Characteristic_two                                        */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_Characteristic_two;

struct EXTERN ASN1T_ALGOSStream_Characteristic_two : public ASN1TPDU {
   OSINT32 m;
   ASN1TObjId basis;
   ASN1TOpenType parameters;
   ASN1T_ALGOSStream_Characteristic_two ();
   ASN1T_ALGOSStream_Characteristic_two (ASN1C_ALGOSStream_Characteristic_two& srcData);
   ~ASN1T_ALGOSStream_Characteristic_two ();
} ;

class EXTERN ASN1C_ALGOSStream_Characteristic_two :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_Characteristic_two& msgData;
public:
   ASN1C_ALGOSStream_Characteristic_two (ASN1T_ALGOSStream_Characteristic_two& data);
   ASN1C_ALGOSStream_Characteristic_two (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_Characteristic_two& data);
   ASN1C_ALGOSStream_Characteristic_two (ASN1C_ALGOSStream_Characteristic_two& original);

   inline ASN1T_ALGOSStream_Characteristic_two& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_Characteristic_two& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_Characteristic_two* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_Characteristic_two& getCopy (ASN1T_ALGOSStream_Characteristic_two* pDstData = 0);
   ASN1T_ALGOSStream_Characteristic_two* newCopy ();

   inline ASN1C_ALGOSStream_Characteristic_two& operator= (ASN1C_ALGOSStream_Characteristic_two& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_Characteristic_two (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_Characteristic_two *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_Characteristic_two
   (const char* name, ASN1T_ALGOSStream_Characteristic_two* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_Characteristic_two
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_Characteristic_two* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_Characteristic_two (ASN1ConstCharPtr name, ASN1T_ALGOSStream_Characteristic_two* pValue, ASN1T_ALGOSStream_Characteristic_two* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_Characteristic_two (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Characteristic_two* pSrcValue, ASN1T_ALGOSStream_Characteristic_two* pDstValue);

EXTERN void asn1Free_ALGOSStream_Characteristic_two
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Characteristic_two* pvalue);

/**************************************************************/
/*                                                            */
/*  Pentanomial                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_Pentanomial;

struct EXTERN ASN1T_ALGOSStream_Pentanomial : public ASN1TPDU {
   OSINT32 k1;
   OSINT32 k2;
   OSINT32 k3;
   ASN1T_ALGOSStream_Pentanomial ();
   ASN1T_ALGOSStream_Pentanomial (ASN1C_ALGOSStream_Pentanomial& srcData);
} ;

class EXTERN ASN1C_ALGOSStream_Pentanomial :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_Pentanomial& msgData;
public:
   ASN1C_ALGOSStream_Pentanomial (ASN1T_ALGOSStream_Pentanomial& data);
   ASN1C_ALGOSStream_Pentanomial (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_Pentanomial& data);
   ASN1C_ALGOSStream_Pentanomial (ASN1C_ALGOSStream_Pentanomial& original);

   inline ASN1T_ALGOSStream_Pentanomial& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_Pentanomial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_Pentanomial* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_Pentanomial& getCopy (ASN1T_ALGOSStream_Pentanomial* pDstData = 0);
   ASN1T_ALGOSStream_Pentanomial* newCopy ();

   inline ASN1C_ALGOSStream_Pentanomial& operator= (ASN1C_ALGOSStream_Pentanomial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_Pentanomial (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_Pentanomial *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_Pentanomial
   (const char* name, ASN1T_ALGOSStream_Pentanomial* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_Pentanomial
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_Pentanomial* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_Pentanomial (ASN1ConstCharPtr name, ASN1T_ALGOSStream_Pentanomial* pValue, ASN1T_ALGOSStream_Pentanomial* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_Pentanomial (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Pentanomial* pSrcValue, ASN1T_ALGOSStream_Pentanomial* pDstValue);

/**************************************************************/
/*                                                            */
/*  Curve                                                     */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_Curve;

struct EXTERN ASN1T_ALGOSStream_Curve : public ASN1TPDU {
   struct {
      unsigned seedPresent : 1;
   } m;
   ASN1T_ALGOSStream_FieldElement a;
   ASN1T_ALGOSStream_FieldElement b;
   ASN1TDynBitStr seed;
   ASN1T_ALGOSStream_Curve ();
   ASN1T_ALGOSStream_Curve (ASN1C_ALGOSStream_Curve& srcData);
   ~ASN1T_ALGOSStream_Curve ();
} ;

class EXTERN ASN1C_ALGOSStream_Curve :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_Curve& msgData;
public:
   ASN1C_ALGOSStream_Curve (ASN1T_ALGOSStream_Curve& data);
   ASN1C_ALGOSStream_Curve (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_Curve& data);
   ASN1C_ALGOSStream_Curve (ASN1C_ALGOSStream_Curve& original);

   inline ASN1T_ALGOSStream_Curve& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_Curve& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_Curve* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_Curve& getCopy (ASN1T_ALGOSStream_Curve* pDstData = 0);
   ASN1T_ALGOSStream_Curve* newCopy ();

   inline ASN1C_ALGOSStream_Curve& operator= (ASN1C_ALGOSStream_Curve& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_Curve (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_Curve *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_Curve
   (const char* name, ASN1T_ALGOSStream_Curve* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_Curve
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_Curve* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_Curve (ASN1ConstCharPtr name, ASN1T_ALGOSStream_Curve* pValue, ASN1T_ALGOSStream_Curve* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_Curve (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Curve* pSrcValue, ASN1T_ALGOSStream_Curve* pDstValue);

EXTERN void asn1Free_ALGOSStream_Curve
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_Curve* pvalue);

/**************************************************************/
/*                                                            */
/*  ECParameters                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_ECParameters;

struct EXTERN ASN1T_ALGOSStream_ECParameters : public ASN1TPDU {
   struct {
      unsigned cofactorPresent : 1;
   } m;
   ASN1T_ALGOSStream_ECPVer version;
   ASN1T_ALGOSStream_FieldID fieldID;
   ASN1T_ALGOSStream_Curve curve;
   ASN1T_ALGOSStream_ECPoint base;
   ASN1ConstCharPtr order;
   ASN1ConstCharPtr cofactor;
   ASN1T_ALGOSStream_ECParameters ();
   ASN1T_ALGOSStream_ECParameters (ASN1C_ALGOSStream_ECParameters& srcData);
   ~ASN1T_ALGOSStream_ECParameters ();
} ;

class EXTERN ASN1C_ALGOSStream_ECParameters :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_ECParameters& msgData;
public:
   ASN1C_ALGOSStream_ECParameters (ASN1T_ALGOSStream_ECParameters& data);
   ASN1C_ALGOSStream_ECParameters (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_ECParameters& data);
   ASN1C_ALGOSStream_ECParameters (ASN1C_ALGOSStream_ECParameters& original);

   inline ASN1T_ALGOSStream_ECParameters& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_ECParameters& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_ECParameters* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_ECParameters& getCopy (ASN1T_ALGOSStream_ECParameters* pDstData = 0);
   ASN1T_ALGOSStream_ECParameters* newCopy ();

   inline ASN1C_ALGOSStream_ECParameters& operator= (ASN1C_ALGOSStream_ECParameters& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_ECParameters (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_ECParameters *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_ECParameters
   (const char* name, ASN1T_ALGOSStream_ECParameters* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_ECParameters
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_ECParameters* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_ECParameters (ASN1ConstCharPtr name, ASN1T_ALGOSStream_ECParameters* pValue, ASN1T_ALGOSStream_ECParameters* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_ECParameters (ASN1CTXT *pctxt, ASN1T_ALGOSStream_ECParameters* pSrcValue, ASN1T_ALGOSStream_ECParameters* pDstValue);

EXTERN void asn1Free_ALGOSStream_ECParameters
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_ECParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  EcpkParameters                                            */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ALGOSStream_EcpkParameters_implicitlyCA 1
#define T_ALGOSStream_EcpkParameters_namedCurve 2
#define T_ALGOSStream_EcpkParameters_ecParameters 3

class EXTERN ASN1C_ALGOSStream_EcpkParameters;

struct EXTERN ASN1T_ALGOSStream_EcpkParameters : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      /* t = 2 */
      ASN1TObjId *namedCurve;
      /* t = 3 */
      ASN1T_ALGOSStream_ECParameters *ecParameters;
   } u;
   ASN1T_ALGOSStream_EcpkParameters () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ALGOSStream_EcpkParameters (ASN1C_ALGOSStream_EcpkParameters& srcData);
   ~ASN1T_ALGOSStream_EcpkParameters ();
} ;

class EXTERN ASN1C_ALGOSStream_EcpkParameters :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_EcpkParameters& msgData;
public:
   ASN1C_ALGOSStream_EcpkParameters (ASN1T_ALGOSStream_EcpkParameters& data);
   ASN1C_ALGOSStream_EcpkParameters (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_EcpkParameters& data);
   ASN1C_ALGOSStream_EcpkParameters (ASN1C_ALGOSStream_EcpkParameters& original);

   inline ASN1T_ALGOSStream_EcpkParameters& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_EcpkParameters& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_EcpkParameters* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_EcpkParameters& getCopy (ASN1T_ALGOSStream_EcpkParameters* pDstData = 0);
   ASN1T_ALGOSStream_EcpkParameters* newCopy ();

   inline ASN1C_ALGOSStream_EcpkParameters& operator= (ASN1C_ALGOSStream_EcpkParameters& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_EcpkParameters (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_EcpkParameters *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_EcpkParameters
   (const char* name, ASN1T_ALGOSStream_EcpkParameters* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_EcpkParameters
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_EcpkParameters* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_EcpkParameters (ASN1ConstCharPtr name, ASN1T_ALGOSStream_EcpkParameters* pValue, ASN1T_ALGOSStream_EcpkParameters* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_EcpkParameters (ASN1CTXT *pctxt, ASN1T_ALGOSStream_EcpkParameters* pSrcValue, ASN1T_ALGOSStream_EcpkParameters* pDstValue);

EXTERN void asn1Free_ALGOSStream_EcpkParameters
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_EcpkParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  RSASSA_PSS_params                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ALGOSStream_RSASSA_PSS_params;

struct EXTERN ASN1T_ALGOSStream_RSASSA_PSS_params : public ASN1TPDU {
   struct {
      unsigned hashAlgorithmPresent : 1;
      unsigned maskGenAlgorithmPresent : 1;
   } m;
   ASN1T_EXPStream_AlgorithmIdentifier hashAlgorithm;
   ASN1T_EXPStream_AlgorithmIdentifier maskGenAlgorithm;
   OSINT32 saltLength;
   OSINT32 trailerField;
   ASN1T_ALGOSStream_RSASSA_PSS_params ();
   ASN1T_ALGOSStream_RSASSA_PSS_params (ASN1C_ALGOSStream_RSASSA_PSS_params& srcData);
   ~ASN1T_ALGOSStream_RSASSA_PSS_params ();
} ;

class EXTERN ASN1C_ALGOSStream_RSASSA_PSS_params :
   public ASN1CType
{
protected:
   ASN1T_ALGOSStream_RSASSA_PSS_params& msgData;
public:
   ASN1C_ALGOSStream_RSASSA_PSS_params (ASN1T_ALGOSStream_RSASSA_PSS_params& data);
   ASN1C_ALGOSStream_RSASSA_PSS_params (
      ASN1MessageBufferIF& msgBuf, ASN1T_ALGOSStream_RSASSA_PSS_params& data);
   ASN1C_ALGOSStream_RSASSA_PSS_params (ASN1C_ALGOSStream_RSASSA_PSS_params& original);

   inline ASN1T_ALGOSStream_RSASSA_PSS_params& getData () { return msgData; }
   inline const ASN1T_ALGOSStream_RSASSA_PSS_params& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ALGOSStream_RSASSA_PSS_params* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ALGOSStream_RSASSA_PSS_params& getCopy (ASN1T_ALGOSStream_RSASSA_PSS_params* pDstData = 0);
   ASN1T_ALGOSStream_RSASSA_PSS_params* newCopy ();

   inline ASN1C_ALGOSStream_RSASSA_PSS_params& operator= (ASN1C_ALGOSStream_RSASSA_PSS_params& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ALGOSStream_RSASSA_PSS_params (ASN1CTXT* pctxt,
   ASN1T_ALGOSStream_RSASSA_PSS_params *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ALGOSStream_RSASSA_PSS_params
   (const char* name, ASN1T_ALGOSStream_RSASSA_PSS_params* pvalue);

EXTERN int asn1PrtToStrm_ALGOSStream_RSASSA_PSS_params
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ALGOSStream_RSASSA_PSS_params* pvalue);

EXTERN OSBOOL asn1Compare_ALGOSStream_RSASSA_PSS_params (ASN1ConstCharPtr name, ASN1T_ALGOSStream_RSASSA_PSS_params* pValue, ASN1T_ALGOSStream_RSASSA_PSS_params* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ALGOSStream_RSASSA_PSS_params (ASN1CTXT *pctxt, ASN1T_ALGOSStream_RSASSA_PSS_params* pSrcValue, ASN1T_ALGOSStream_RSASSA_PSS_params* pDstValue);

EXTERN void asn1Free_ALGOSStream_RSASSA_PSS_params
   (ASN1CTXT *pctxt, ASN1T_ALGOSStream_RSASSA_PSS_params* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ALGOSStream_id_dsa;
extern EXTERN ASN1OBJID ALGOSStream_id_dsa_with_sha1;
extern EXTERN ASN1OBJID ALGOSStream_pkcs_1;
extern EXTERN ASN1OBJID ALGOSStream_rsaEncryption;
extern EXTERN ASN1OBJID ALGOSStream_md2WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOSStream_md5WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOSStream_sha1WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOSStream_dhpublicnumber;
extern EXTERN ASN1OBJID ALGOSStream_id_keyExchangeAlgorithm;
extern EXTERN ASN1OBJID ALGOSStream_ansi_X9_62;
extern EXTERN ASN1OBJID ALGOSStream_id_ecSigType;
extern EXTERN ASN1OBJID ALGOSStream_ecdsa_with_SHA1;
extern EXTERN ASN1OBJID ALGOSStream_id_fieldType;
extern EXTERN ASN1OBJID ALGOSStream_prime_field;
extern EXTERN ASN1OBJID ALGOSStream_characteristic_two_field;
extern EXTERN ASN1OBJID ALGOSStream_id_characteristic_two_basis;
extern EXTERN ASN1OBJID ALGOSStream_gnBasis;
extern EXTERN ASN1OBJID ALGOSStream_tpBasis;
extern EXTERN ASN1OBJID ALGOSStream_ppBasis;
extern EXTERN ASN1OBJID ALGOSStream_id_publicKeyType;
extern EXTERN ASN1OBJID ALGOSStream_id_ecPublicKey;
extern EXTERN ASN1OBJID ALGOSStream_ellipticCurve;
extern EXTERN ASN1OBJID ALGOSStream_c_TwoCurve;
extern EXTERN ASN1OBJID ALGOSStream_primeCurve;
extern EXTERN ASN1OBJID ALGOSStream_c2pnb163v1;
extern EXTERN ASN1OBJID ALGOSStream_c2pnb163v2;
extern EXTERN ASN1OBJID ALGOSStream_c2pnb163v3;
extern EXTERN ASN1OBJID ALGOSStream_c2pnb176w1;
extern EXTERN ASN1OBJID ALGOSStream_c2tnb191v1;
extern EXTERN ASN1OBJID ALGOSStream_c2tnb191v2;
extern EXTERN ASN1OBJID ALGOSStream_c2tnb191v3;
extern EXTERN ASN1OBJID ALGOSStream_c2onb191v4;
extern EXTERN ASN1OBJID ALGOSStream_c2onb191v5;
extern EXTERN ASN1OBJID ALGOSStream_c2pnb208w1;
extern EXTERN ASN1OBJID ALGOSStream_c2tnb239v1;
extern EXTERN ASN1OBJID ALGOSStream_c2tnb239v2;
extern EXTERN ASN1OBJID ALGOSStream_c2tnb239v3;
extern EXTERN ASN1OBJID ALGOSStream_c2onb239v4;
extern EXTERN ASN1OBJID ALGOSStream_c2onb239v5;
extern EXTERN ASN1OBJID ALGOSStream_c2pnb272w1;
extern EXTERN ASN1OBJID ALGOSStream_c2pnb304w1;
extern EXTERN ASN1OBJID ALGOSStream_c2tnb359v1;
extern EXTERN ASN1OBJID ALGOSStream_c2pnb368w1;
extern EXTERN ASN1OBJID ALGOSStream_c2tnb431r1;
extern EXTERN ASN1OBJID ALGOSStream_prime192v1;
extern EXTERN ASN1OBJID ALGOSStream_prime192v2;
extern EXTERN ASN1OBJID ALGOSStream_prime192v3;
extern EXTERN ASN1OBJID ALGOSStream_prime239v1;
extern EXTERN ASN1OBJID ALGOSStream_prime239v2;
extern EXTERN ASN1OBJID ALGOSStream_prime239v3;
extern EXTERN ASN1OBJID ALGOSStream_prime256v1;
extern EXTERN ASN1OBJID ALGOSStream_sha_1;
extern EXTERN ASN1OBJID ALGOSStream_md5;
extern EXTERN ASN1OBJID ALGOSStream_ripemd_160;
extern EXTERN ASN1OBJID ALGOSStream_id_sha224;
extern EXTERN ASN1OBJID ALGOSStream_id_sha256;
extern EXTERN ASN1OBJID ALGOSStream_id_sha384;
extern EXTERN ASN1OBJID ALGOSStream_id_sha512;
extern EXTERN ASN1OBJID ALGOSStream_sha224WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOSStream_sha256WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOSStream_sha384WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOSStream_sha512WithRSAEncryption;
extern EXTERN ASN1OBJID ALGOSStream_id_RSASSA_PSS;
extern EXTERN ASN1OBJID ALGOSStream_id_mgf1;
extern EXTERN ASN1OBJID ALGOSStream_ecdsa_with_Sha224;
extern EXTERN ASN1OBJID ALGOSStream_ecdsa_with_Sha256;
extern EXTERN ASN1OBJID ALGOSStream_ecdsa_with_Sha384;
extern EXTERN ASN1OBJID ALGOSStream_ecdsa_with_Sha512;

#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  Attributes                                                */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_PKCS10Stream_Attributes : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS10Stream_Attributes();
} ASN1T_PKCS10Stream_Attributes;

class EXTERN ASN1C_PKCS10Stream_Attributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS10Stream_Attributes& msgData;
public:
   ASN1C_PKCS10Stream_Attributes (ASN1T_PKCS10Stream_Attributes& data);
   ASN1C_PKCS10Stream_Attributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS10Stream_Attributes& data);
   ASN1C_PKCS10Stream_Attributes (ASN1C_PKCS10Stream_Attributes& original);

   inline ASN1T_PKCS10Stream_Attributes& getData () { return msgData; }
   inline const ASN1T_PKCS10Stream_Attributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS10Stream_Attributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS10Stream_Attributes& getCopy (ASN1T_PKCS10Stream_Attributes* pDstData = 0);
   ASN1T_PKCS10Stream_Attributes* newCopy ();

   ASN1C_PKCS10Stream_Attributes& operator= (ASN1C_PKCS10Stream_Attributes& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_PKCS10Stream_Attributes (ASN1CTXT* pctxt,
   ASN1T_PKCS10Stream_Attributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS10Stream_Attributes
   (const char* name, ASN1T_PKCS10Stream_Attributes* pvalue);

EXTERN int asn1PrtToStrm_PKCS10Stream_Attributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS10Stream_Attributes* pvalue);

EXTERN OSBOOL asn1Compare_PKCS10Stream_Attributes (ASN1ConstCharPtr name, ASN1T_PKCS10Stream_Attributes* pValue, ASN1T_PKCS10Stream_Attributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS10Stream_Attributes (ASN1CTXT *pctxt, ASN1T_PKCS10Stream_Attributes* pSrcValue, ASN1T_PKCS10Stream_Attributes* pDstValue);

EXTERN void asn1Free_PKCS10Stream_Attributes
   (ASN1CTXT *pctxt, ASN1T_PKCS10Stream_Attributes* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificationRequestInfo                                  */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS10Stream_CertificationRequestInfo;

struct EXTERN ASN1T_PKCS10Stream_CertificationRequestInfo : public ASN1TPDU {
   OSINT32 version;
   ASN1T_EXPStream_Name subject;
   ASN1T_EXPStream_SubjectPublicKeyInfo subjectPKInfo;
   ASN1T_PKCS10Stream_Attributes attributes;
   ASN1T_PKCS10Stream_CertificationRequestInfo ();
   ASN1T_PKCS10Stream_CertificationRequestInfo (ASN1C_PKCS10Stream_CertificationRequestInfo& srcData);
   ~ASN1T_PKCS10Stream_CertificationRequestInfo ();
} ;

class EXTERN ASN1C_PKCS10Stream_CertificationRequestInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS10Stream_CertificationRequestInfo& msgData;
public:
   ASN1C_PKCS10Stream_CertificationRequestInfo (ASN1T_PKCS10Stream_CertificationRequestInfo& data);
   ASN1C_PKCS10Stream_CertificationRequestInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS10Stream_CertificationRequestInfo& data);
   ASN1C_PKCS10Stream_CertificationRequestInfo (ASN1C_PKCS10Stream_CertificationRequestInfo& original);

   inline ASN1T_PKCS10Stream_CertificationRequestInfo& getData () { return msgData; }
   inline const ASN1T_PKCS10Stream_CertificationRequestInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS10Stream_CertificationRequestInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS10Stream_CertificationRequestInfo& getCopy (ASN1T_PKCS10Stream_CertificationRequestInfo* pDstData = 0);
   ASN1T_PKCS10Stream_CertificationRequestInfo* newCopy ();

   inline ASN1C_PKCS10Stream_CertificationRequestInfo& operator= (ASN1C_PKCS10Stream_CertificationRequestInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS10Stream_CertificationRequestInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS10Stream_CertificationRequestInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS10Stream_CertificationRequestInfo
   (const char* name, ASN1T_PKCS10Stream_CertificationRequestInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS10Stream_CertificationRequestInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS10Stream_CertificationRequestInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS10Stream_CertificationRequestInfo (ASN1ConstCharPtr name, ASN1T_PKCS10Stream_CertificationRequestInfo* pValue, ASN1T_PKCS10Stream_CertificationRequestInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS10Stream_CertificationRequestInfo (ASN1CTXT *pctxt, ASN1T_PKCS10Stream_CertificationRequestInfo* pSrcValue, ASN1T_PKCS10Stream_CertificationRequestInfo* pDstValue);

EXTERN void asn1Free_PKCS10Stream_CertificationRequestInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS10Stream_CertificationRequestInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificationRequest                                      */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS10Stream_CertificationRequest;

struct EXTERN ASN1T_PKCS10Stream_CertificationRequest : public ASN1TPDU {
   ASN1T_PKCS10Stream_CertificationRequestInfo certificationRequestInfo;
   ASN1T_EXPStream_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature;
   ASN1T_PKCS10Stream_CertificationRequest ();
   ASN1T_PKCS10Stream_CertificationRequest (ASN1C_PKCS10Stream_CertificationRequest& srcData);
   ~ASN1T_PKCS10Stream_CertificationRequest ();
} ;

class EXTERN ASN1C_PKCS10Stream_CertificationRequest :
   public ASN1CType
{
protected:
   ASN1T_PKCS10Stream_CertificationRequest& msgData;
public:
   ASN1C_PKCS10Stream_CertificationRequest (ASN1T_PKCS10Stream_CertificationRequest& data);
   ASN1C_PKCS10Stream_CertificationRequest (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS10Stream_CertificationRequest& data);
   ASN1C_PKCS10Stream_CertificationRequest (ASN1C_PKCS10Stream_CertificationRequest& original);

   inline ASN1T_PKCS10Stream_CertificationRequest& getData () { return msgData; }
   inline const ASN1T_PKCS10Stream_CertificationRequest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS10Stream_CertificationRequest* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS10Stream_CertificationRequest& getCopy (ASN1T_PKCS10Stream_CertificationRequest* pDstData = 0);
   ASN1T_PKCS10Stream_CertificationRequest* newCopy ();

   inline ASN1C_PKCS10Stream_CertificationRequest& operator= (ASN1C_PKCS10Stream_CertificationRequest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS10Stream_CertificationRequest (ASN1CTXT* pctxt,
   ASN1T_PKCS10Stream_CertificationRequest *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS10Stream_CertificationRequest
   (const char* name, ASN1T_PKCS10Stream_CertificationRequest* pvalue);

EXTERN int asn1PrtToStrm_PKCS10Stream_CertificationRequest
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS10Stream_CertificationRequest* pvalue);

EXTERN OSBOOL asn1Compare_PKCS10Stream_CertificationRequest (ASN1ConstCharPtr name, ASN1T_PKCS10Stream_CertificationRequest* pValue, ASN1T_PKCS10Stream_CertificationRequest* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS10Stream_CertificationRequest (ASN1CTXT *pctxt, ASN1T_PKCS10Stream_CertificationRequest* pSrcValue, ASN1T_PKCS10Stream_CertificationRequest* pDstValue);

EXTERN void asn1Free_PKCS10Stream_CertificationRequest
   (ASN1CTXT *pctxt, ASN1T_PKCS10Stream_CertificationRequest* pvalue);

#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  SubsequentMessage                                         */
/*                                                            */
/**************************************************************/

struct EXTERN CRMFStream_SubsequentMessage {
   enum Root {
      encrCert = 0,
      challengeResp = 1
   } ;
} ;

typedef OSUINT32 ASN1T_CRMFStream_SubsequentMessage;

class EXTERN ASN1C_CRMFStream_SubsequentMessage :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_SubsequentMessage& msgData;
public:
   ASN1C_CRMFStream_SubsequentMessage (ASN1T_CRMFStream_SubsequentMessage& data);
   ASN1C_CRMFStream_SubsequentMessage (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_SubsequentMessage& data);
   ASN1C_CRMFStream_SubsequentMessage (ASN1C_CRMFStream_SubsequentMessage& original);

   inline ASN1T_CRMFStream_SubsequentMessage& getData () { return msgData; }
   inline const ASN1T_CRMFStream_SubsequentMessage& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_SubsequentMessage* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_SubsequentMessage& getCopy (ASN1T_CRMFStream_SubsequentMessage* pDstData = 0);
   ASN1T_CRMFStream_SubsequentMessage* newCopy ();

   inline ASN1C_CRMFStream_SubsequentMessage& operator= (ASN1C_CRMFStream_SubsequentMessage& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_SubsequentMessage (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_SubsequentMessage *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_SubsequentMessage
   (const char* name, ASN1T_CRMFStream_SubsequentMessage* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_SubsequentMessage
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_SubsequentMessage* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_SubsequentMessage (ASN1ConstCharPtr name, ASN1T_CRMFStream_SubsequentMessage* pValue, ASN1T_CRMFStream_SubsequentMessage* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_SubsequentMessage (ASN1CTXT *pctxt, ASN1T_CRMFStream_SubsequentMessage* pSrcValue, ASN1T_CRMFStream_SubsequentMessage* pDstValue);

/**************************************************************/
/*                                                            */
/*  PKIPublicationInfo_action                                 */
/*                                                            */
/**************************************************************/

struct EXTERN CRMFStream_PKIPublicationInfo_action {
   enum Root {
      dontPublish = 0,
      pleasePublish = 1
   } ;
} ;

typedef OSUINT32 ASN1T_CRMFStream_PKIPublicationInfo_action;

class EXTERN ASN1C_CRMFStream_PKIPublicationInfo_action :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_PKIPublicationInfo_action& msgData;
public:
   ASN1C_CRMFStream_PKIPublicationInfo_action (ASN1T_CRMFStream_PKIPublicationInfo_action& data);
   ASN1C_CRMFStream_PKIPublicationInfo_action (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_PKIPublicationInfo_action& data);
   ASN1C_CRMFStream_PKIPublicationInfo_action (ASN1C_CRMFStream_PKIPublicationInfo_action& original);

   inline ASN1T_CRMFStream_PKIPublicationInfo_action& getData () { return msgData; }
   inline const ASN1T_CRMFStream_PKIPublicationInfo_action& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_PKIPublicationInfo_action* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_PKIPublicationInfo_action& getCopy (ASN1T_CRMFStream_PKIPublicationInfo_action* pDstData = 0);
   ASN1T_CRMFStream_PKIPublicationInfo_action* newCopy ();

   inline ASN1C_CRMFStream_PKIPublicationInfo_action& operator= (ASN1C_CRMFStream_PKIPublicationInfo_action& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_PKIPublicationInfo_action (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_PKIPublicationInfo_action *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_PKIPublicationInfo_action
   (const char* name, ASN1T_CRMFStream_PKIPublicationInfo_action* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_PKIPublicationInfo_action
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_PKIPublicationInfo_action* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_PKIPublicationInfo_action (ASN1ConstCharPtr name, ASN1T_CRMFStream_PKIPublicationInfo_action* pValue, ASN1T_CRMFStream_PKIPublicationInfo_action* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_PKIPublicationInfo_action (ASN1CTXT *pctxt, ASN1T_CRMFStream_PKIPublicationInfo_action* pSrcValue, ASN1T_CRMFStream_PKIPublicationInfo_action* pDstValue);

/**************************************************************/
/*                                                            */
/*  SinglePubInfo_pubMethod                                   */
/*                                                            */
/**************************************************************/

struct EXTERN CRMFStream_SinglePubInfo_pubMethod {
   enum Root {
      dontCare = 0,
      x500 = 1,
      web = 2,
      ldap = 3
   } ;
} ;

typedef OSUINT32 ASN1T_CRMFStream_SinglePubInfo_pubMethod;

class EXTERN ASN1C_CRMFStream_SinglePubInfo_pubMethod :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_SinglePubInfo_pubMethod& msgData;
public:
   ASN1C_CRMFStream_SinglePubInfo_pubMethod (ASN1T_CRMFStream_SinglePubInfo_pubMethod& data);
   ASN1C_CRMFStream_SinglePubInfo_pubMethod (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_SinglePubInfo_pubMethod& data);
   ASN1C_CRMFStream_SinglePubInfo_pubMethod (ASN1C_CRMFStream_SinglePubInfo_pubMethod& original);

   inline ASN1T_CRMFStream_SinglePubInfo_pubMethod& getData () { return msgData; }
   inline const ASN1T_CRMFStream_SinglePubInfo_pubMethod& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_SinglePubInfo_pubMethod* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_SinglePubInfo_pubMethod& getCopy (ASN1T_CRMFStream_SinglePubInfo_pubMethod* pDstData = 0);
   ASN1T_CRMFStream_SinglePubInfo_pubMethod* newCopy ();

   inline ASN1C_CRMFStream_SinglePubInfo_pubMethod& operator= (ASN1C_CRMFStream_SinglePubInfo_pubMethod& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_SinglePubInfo_pubMethod (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_SinglePubInfo_pubMethod *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_SinglePubInfo_pubMethod
   (const char* name, ASN1T_CRMFStream_SinglePubInfo_pubMethod* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_SinglePubInfo_pubMethod
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_SinglePubInfo_pubMethod* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_SinglePubInfo_pubMethod (ASN1ConstCharPtr name, ASN1T_CRMFStream_SinglePubInfo_pubMethod* pValue, ASN1T_CRMFStream_SinglePubInfo_pubMethod* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_SinglePubInfo_pubMethod (ASN1CTXT *pctxt, ASN1T_CRMFStream_SinglePubInfo_pubMethod* pSrcValue, ASN1T_CRMFStream_SinglePubInfo_pubMethod* pDstValue);

/**************************************************************/
/*                                                            */
/*  OptionalValidity                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_OptionalValidity;

struct EXTERN ASN1T_CRMFStream_OptionalValidity : public ASN1TPDU {
   struct {
      unsigned notBeforePresent : 1;
      unsigned notAfterPresent : 1;
   } m;
   ASN1T_EXPStream_Time notBefore;
   ASN1T_EXPStream_Time notAfter;
   ASN1T_CRMFStream_OptionalValidity ();
   ASN1T_CRMFStream_OptionalValidity (ASN1C_CRMFStream_OptionalValidity& srcData);
   ~ASN1T_CRMFStream_OptionalValidity ();
} ;

class EXTERN ASN1C_CRMFStream_OptionalValidity :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_OptionalValidity& msgData;
public:
   ASN1C_CRMFStream_OptionalValidity (ASN1T_CRMFStream_OptionalValidity& data);
   ASN1C_CRMFStream_OptionalValidity (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_OptionalValidity& data);
   ASN1C_CRMFStream_OptionalValidity (ASN1C_CRMFStream_OptionalValidity& original);

   inline ASN1T_CRMFStream_OptionalValidity& getData () { return msgData; }
   inline const ASN1T_CRMFStream_OptionalValidity& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_OptionalValidity* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_OptionalValidity& getCopy (ASN1T_CRMFStream_OptionalValidity* pDstData = 0);
   ASN1T_CRMFStream_OptionalValidity* newCopy ();

   inline ASN1C_CRMFStream_OptionalValidity& operator= (ASN1C_CRMFStream_OptionalValidity& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_OptionalValidity (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_OptionalValidity *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_OptionalValidity
   (const char* name, ASN1T_CRMFStream_OptionalValidity* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_OptionalValidity
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_OptionalValidity* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_OptionalValidity (ASN1ConstCharPtr name, ASN1T_CRMFStream_OptionalValidity* pValue, ASN1T_CRMFStream_OptionalValidity* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_OptionalValidity (ASN1CTXT *pctxt, ASN1T_CRMFStream_OptionalValidity* pSrcValue, ASN1T_CRMFStream_OptionalValidity* pDstValue);

EXTERN void asn1Free_CRMFStream_OptionalValidity
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_OptionalValidity* pvalue);

/**************************************************************/
/*                                                            */
/*  CertTemplate                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_CertTemplate;

struct EXTERN ASN1T_CRMFStream_CertTemplate : public ASN1TPDU {
   struct {
      unsigned versionPresent : 1;
      unsigned serialNumberPresent : 1;
      unsigned signingAlgPresent : 1;
      unsigned issuerPresent : 1;
      unsigned validityPresent : 1;
      unsigned subjectPresent : 1;
      unsigned publicKeyPresent : 1;
      unsigned issuerUIDPresent : 1;
      unsigned subjectUIDPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_EXPStream_Version version;
   ASN1T_EXPStream_CertificateSerialNumber serialNumber;
   ASN1T_EXPStream_AlgorithmIdentifier signingAlg;
   ASN1T_EXPStream_Name issuer;
   ASN1T_CRMFStream_OptionalValidity validity;
   ASN1T_EXPStream_Name subject;
   ASN1T_EXPStream_SubjectPublicKeyInfo publicKey;
   ASN1T_EXPStream_UniqueIdentifier issuerUID;
   ASN1T_EXPStream_UniqueIdentifier subjectUID;
   ASN1T_EXPStream_Extensions extensions;
   ASN1T_CRMFStream_CertTemplate ();
   ASN1T_CRMFStream_CertTemplate (ASN1C_CRMFStream_CertTemplate& srcData);
   ~ASN1T_CRMFStream_CertTemplate ();
} ;

class EXTERN ASN1C_CRMFStream_CertTemplate :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_CertTemplate& msgData;
public:
   ASN1C_CRMFStream_CertTemplate (ASN1T_CRMFStream_CertTemplate& data);
   ASN1C_CRMFStream_CertTemplate (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_CertTemplate& data);
   ASN1C_CRMFStream_CertTemplate (ASN1C_CRMFStream_CertTemplate& original);

   inline ASN1T_CRMFStream_CertTemplate& getData () { return msgData; }
   inline const ASN1T_CRMFStream_CertTemplate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_CertTemplate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_CertTemplate& getCopy (ASN1T_CRMFStream_CertTemplate* pDstData = 0);
   ASN1T_CRMFStream_CertTemplate* newCopy ();

   inline ASN1C_CRMFStream_CertTemplate& operator= (ASN1C_CRMFStream_CertTemplate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_CertTemplate (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_CertTemplate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_CertTemplate
   (const char* name, ASN1T_CRMFStream_CertTemplate* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_CertTemplate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_CertTemplate* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_CertTemplate (ASN1ConstCharPtr name, ASN1T_CRMFStream_CertTemplate* pValue, ASN1T_CRMFStream_CertTemplate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_CertTemplate (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertTemplate* pSrcValue, ASN1T_CRMFStream_CertTemplate* pDstValue);

EXTERN void asn1Free_CRMFStream_CertTemplate
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertTemplate* pvalue);

/**************************************************************/
/*                                                            */
/*  SinglePubInfo                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_SinglePubInfo;

struct EXTERN ASN1T_CRMFStream_SinglePubInfo : public ASN1TPDU {
   struct {
      unsigned pubLocationPresent : 1;
   } m;
   ASN1T_CRMFStream_SinglePubInfo_pubMethod pubMethod;
   ASN1T_IMPStream_GeneralName pubLocation;
   ASN1T_CRMFStream_SinglePubInfo ();
   ASN1T_CRMFStream_SinglePubInfo (ASN1C_CRMFStream_SinglePubInfo& srcData);
   ~ASN1T_CRMFStream_SinglePubInfo ();
} ;

class EXTERN ASN1C_CRMFStream_SinglePubInfo :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_SinglePubInfo& msgData;
public:
   ASN1C_CRMFStream_SinglePubInfo (ASN1T_CRMFStream_SinglePubInfo& data);
   ASN1C_CRMFStream_SinglePubInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_SinglePubInfo& data);
   ASN1C_CRMFStream_SinglePubInfo (ASN1C_CRMFStream_SinglePubInfo& original);

   inline ASN1T_CRMFStream_SinglePubInfo& getData () { return msgData; }
   inline const ASN1T_CRMFStream_SinglePubInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_SinglePubInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_SinglePubInfo& getCopy (ASN1T_CRMFStream_SinglePubInfo* pDstData = 0);
   ASN1T_CRMFStream_SinglePubInfo* newCopy ();

   inline ASN1C_CRMFStream_SinglePubInfo& operator= (ASN1C_CRMFStream_SinglePubInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_SinglePubInfo (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_SinglePubInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_SinglePubInfo
   (const char* name, ASN1T_CRMFStream_SinglePubInfo* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_SinglePubInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_SinglePubInfo* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_SinglePubInfo (ASN1ConstCharPtr name, ASN1T_CRMFStream_SinglePubInfo* pValue, ASN1T_CRMFStream_SinglePubInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_SinglePubInfo (ASN1CTXT *pctxt, ASN1T_CRMFStream_SinglePubInfo* pSrcValue, ASN1T_CRMFStream_SinglePubInfo* pDstValue);

EXTERN void asn1Free_CRMFStream_SinglePubInfo
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_SinglePubInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIPublicationInfo_pubInfos                               */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CRMFStream_SinglePubInfo */
typedef struct EXTERN ASN1T_CRMFStream_PKIPublicationInfo_pubInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_CRMFStream_PKIPublicationInfo_pubInfos();
} ASN1T_CRMFStream_PKIPublicationInfo_pubInfos;

class EXTERN ASN1C_CRMFStream_PKIPublicationInfo_pubInfos :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CRMFStream_PKIPublicationInfo_pubInfos& msgData;
public:
   ASN1C_CRMFStream_PKIPublicationInfo_pubInfos (ASN1T_CRMFStream_PKIPublicationInfo_pubInfos& data);
   ASN1C_CRMFStream_PKIPublicationInfo_pubInfos (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_PKIPublicationInfo_pubInfos& data);
   ASN1C_CRMFStream_PKIPublicationInfo_pubInfos (ASN1C_CRMFStream_PKIPublicationInfo_pubInfos& original);

   inline ASN1T_CRMFStream_PKIPublicationInfo_pubInfos& getData () { return msgData; }
   inline const ASN1T_CRMFStream_PKIPublicationInfo_pubInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_PKIPublicationInfo_pubInfos& getCopy (ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pDstData = 0);
   ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* newCopy ();

   ASN1C_CRMFStream_PKIPublicationInfo_pubInfos& operator= (ASN1C_CRMFStream_PKIPublicationInfo_pubInfos& srcData);
   void Append (ASN1T_CRMFStream_SinglePubInfo *elem);
   ASN1T_CRMFStream_SinglePubInfo *NewElement ();
} ;

EXTERN int asn1BSD_CRMFStream_PKIPublicationInfo_pubInfos (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_PKIPublicationInfo_pubInfos *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_PKIPublicationInfo_pubInfos
   (const char* name, ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_PKIPublicationInfo_pubInfos
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_PKIPublicationInfo_pubInfos (ASN1ConstCharPtr name, ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pValue, ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_PKIPublicationInfo_pubInfos (ASN1CTXT *pctxt, ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pSrcValue, ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pDstValue);

EXTERN void asn1Free_CRMFStream_PKIPublicationInfo_pubInfos
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_PKIPublicationInfo_pubInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIPublicationInfo                                        */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_PKIPublicationInfo;

struct EXTERN ASN1T_CRMFStream_PKIPublicationInfo : public ASN1TPDU {
   struct {
      unsigned pubInfosPresent : 1;
   } m;
   ASN1T_CRMFStream_PKIPublicationInfo_action action;
   ASN1T_CRMFStream_PKIPublicationInfo_pubInfos pubInfos;
   ASN1T_CRMFStream_PKIPublicationInfo ();
   ASN1T_CRMFStream_PKIPublicationInfo (ASN1C_CRMFStream_PKIPublicationInfo& srcData);
   ~ASN1T_CRMFStream_PKIPublicationInfo ();
} ;

class EXTERN ASN1C_CRMFStream_PKIPublicationInfo :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_PKIPublicationInfo& msgData;
public:
   ASN1C_CRMFStream_PKIPublicationInfo (ASN1T_CRMFStream_PKIPublicationInfo& data);
   ASN1C_CRMFStream_PKIPublicationInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_PKIPublicationInfo& data);
   ASN1C_CRMFStream_PKIPublicationInfo (ASN1C_CRMFStream_PKIPublicationInfo& original);

   inline ASN1T_CRMFStream_PKIPublicationInfo& getData () { return msgData; }
   inline const ASN1T_CRMFStream_PKIPublicationInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_PKIPublicationInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_PKIPublicationInfo& getCopy (ASN1T_CRMFStream_PKIPublicationInfo* pDstData = 0);
   ASN1T_CRMFStream_PKIPublicationInfo* newCopy ();

   inline ASN1C_CRMFStream_PKIPublicationInfo& operator= (ASN1C_CRMFStream_PKIPublicationInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_PKIPublicationInfo (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_PKIPublicationInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_PKIPublicationInfo
   (const char* name, ASN1T_CRMFStream_PKIPublicationInfo* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_PKIPublicationInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_PKIPublicationInfo* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_PKIPublicationInfo (ASN1ConstCharPtr name, ASN1T_CRMFStream_PKIPublicationInfo* pValue, ASN1T_CRMFStream_PKIPublicationInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_PKIPublicationInfo (ASN1CTXT *pctxt, ASN1T_CRMFStream_PKIPublicationInfo* pSrcValue, ASN1T_CRMFStream_PKIPublicationInfo* pDstValue);

EXTERN void asn1Free_CRMFStream_PKIPublicationInfo
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_PKIPublicationInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedValue                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_EncryptedValue;

struct EXTERN ASN1T_CRMFStream_EncryptedValue : public ASN1TPDU {
   struct {
      unsigned intendedAlgPresent : 1;
      unsigned symmAlgPresent : 1;
      unsigned encSymmKeyPresent : 1;
      unsigned keyAlgPresent : 1;
      unsigned valueHintPresent : 1;
   } m;
   ASN1T_EXPStream_AlgorithmIdentifier intendedAlg;
   ASN1T_EXPStream_AlgorithmIdentifier symmAlg;
   ASN1TDynBitStr encSymmKey;
   ASN1T_EXPStream_AlgorithmIdentifier keyAlg;
   ASN1TDynOctStr valueHint;
   ASN1TDynBitStr encValue;
   ASN1T_CRMFStream_EncryptedValue ();
   ASN1T_CRMFStream_EncryptedValue (ASN1C_CRMFStream_EncryptedValue& srcData);
   ~ASN1T_CRMFStream_EncryptedValue ();
} ;

class EXTERN ASN1C_CRMFStream_EncryptedValue :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_EncryptedValue& msgData;
public:
   ASN1C_CRMFStream_EncryptedValue (ASN1T_CRMFStream_EncryptedValue& data);
   ASN1C_CRMFStream_EncryptedValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_EncryptedValue& data);
   ASN1C_CRMFStream_EncryptedValue (ASN1C_CRMFStream_EncryptedValue& original);

   inline ASN1T_CRMFStream_EncryptedValue& getData () { return msgData; }
   inline const ASN1T_CRMFStream_EncryptedValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_EncryptedValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_EncryptedValue& getCopy (ASN1T_CRMFStream_EncryptedValue* pDstData = 0);
   ASN1T_CRMFStream_EncryptedValue* newCopy ();

   inline ASN1C_CRMFStream_EncryptedValue& operator= (ASN1C_CRMFStream_EncryptedValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_EncryptedValue (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_EncryptedValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_EncryptedValue
   (const char* name, ASN1T_CRMFStream_EncryptedValue* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_EncryptedValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_EncryptedValue* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_EncryptedValue (ASN1ConstCharPtr name, ASN1T_CRMFStream_EncryptedValue* pValue, ASN1T_CRMFStream_EncryptedValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_EncryptedValue (ASN1CTXT *pctxt, ASN1T_CRMFStream_EncryptedValue* pSrcValue, ASN1T_CRMFStream_EncryptedValue* pDstValue);

EXTERN void asn1Free_CRMFStream_EncryptedValue
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_EncryptedValue* pvalue);

/**************************************************************/
/*                                                            */
/*  CertId                                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_CertId;

struct EXTERN ASN1T_CRMFStream_CertId : public ASN1TPDU {
   ASN1T_IMPStream_GeneralName issuer;
   ASN1T_EXPStream_CertificateSerialNumber serialNumber;
   ASN1T_CRMFStream_CertId ();
   ASN1T_CRMFStream_CertId (ASN1C_CRMFStream_CertId& srcData);
   ~ASN1T_CRMFStream_CertId ();
} ;

class EXTERN ASN1C_CRMFStream_CertId :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_CertId& msgData;
public:
   ASN1C_CRMFStream_CertId (ASN1T_CRMFStream_CertId& data);
   ASN1C_CRMFStream_CertId (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_CertId& data);
   ASN1C_CRMFStream_CertId (ASN1C_CRMFStream_CertId& original);

   inline ASN1T_CRMFStream_CertId& getData () { return msgData; }
   inline const ASN1T_CRMFStream_CertId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_CertId* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_CertId& getCopy (ASN1T_CRMFStream_CertId* pDstData = 0);
   ASN1T_CRMFStream_CertId* newCopy ();

   inline ASN1C_CRMFStream_CertId& operator= (ASN1C_CRMFStream_CertId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_CertId (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_CertId *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_CertId
   (const char* name, ASN1T_CRMFStream_CertId* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_CertId
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_CertId* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_CertId (ASN1ConstCharPtr name, ASN1T_CRMFStream_CertId* pValue, ASN1T_CRMFStream_CertId* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_CertId (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertId* pSrcValue, ASN1T_CRMFStream_CertId* pDstValue);

EXTERN void asn1Free_CRMFStream_CertId
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertId* pvalue);

/**************************************************************/
/*                                                            */
/*  Controls                                                  */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_AttributeTypeAndValue */
typedef struct EXTERN ASN1T_CRMFStream_Controls : public ASN1TPDUSeqOfList {
   ~ASN1T_CRMFStream_Controls();
} ASN1T_CRMFStream_Controls;

class EXTERN ASN1C_CRMFStream_Controls :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CRMFStream_Controls& msgData;
public:
   ASN1C_CRMFStream_Controls (ASN1T_CRMFStream_Controls& data);
   ASN1C_CRMFStream_Controls (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_Controls& data);
   ASN1C_CRMFStream_Controls (ASN1C_CRMFStream_Controls& original);

   inline ASN1T_CRMFStream_Controls& getData () { return msgData; }
   inline const ASN1T_CRMFStream_Controls& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_Controls* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_Controls& getCopy (ASN1T_CRMFStream_Controls* pDstData = 0);
   ASN1T_CRMFStream_Controls* newCopy ();

   ASN1C_CRMFStream_Controls& operator= (ASN1C_CRMFStream_Controls& srcData);
   void Append (ASN1T_EXPStream_AttributeTypeAndValue *elem);
   ASN1T_EXPStream_AttributeTypeAndValue *NewElement ();
} ;

EXTERN int asn1BSD_CRMFStream_Controls (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_Controls *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_Controls
   (const char* name, ASN1T_CRMFStream_Controls* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_Controls
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_Controls* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_Controls (ASN1ConstCharPtr name, ASN1T_CRMFStream_Controls* pValue, ASN1T_CRMFStream_Controls* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_Controls (ASN1CTXT *pctxt, ASN1T_CRMFStream_Controls* pSrcValue, ASN1T_CRMFStream_Controls* pDstValue);

EXTERN void asn1Free_CRMFStream_Controls
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_Controls* pvalue);

/**************************************************************/
/*                                                            */
/*  CertRequest                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_CertRequest;

struct EXTERN ASN1T_CRMFStream_CertRequest : public ASN1TPDU {
   struct {
      unsigned controlsPresent : 1;
   } m;
   OSINT32 certReqId;
   ASN1T_CRMFStream_CertTemplate certTemplate;
   ASN1T_CRMFStream_Controls controls;
   ASN1T_CRMFStream_CertRequest ();
   ASN1T_CRMFStream_CertRequest (ASN1C_CRMFStream_CertRequest& srcData);
   ~ASN1T_CRMFStream_CertRequest ();
} ;

class EXTERN ASN1C_CRMFStream_CertRequest :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_CertRequest& msgData;
public:
   ASN1C_CRMFStream_CertRequest (ASN1T_CRMFStream_CertRequest& data);
   ASN1C_CRMFStream_CertRequest (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_CertRequest& data);
   ASN1C_CRMFStream_CertRequest (ASN1C_CRMFStream_CertRequest& original);

   inline ASN1T_CRMFStream_CertRequest& getData () { return msgData; }
   inline const ASN1T_CRMFStream_CertRequest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_CertRequest* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_CertRequest& getCopy (ASN1T_CRMFStream_CertRequest* pDstData = 0);
   ASN1T_CRMFStream_CertRequest* newCopy ();

   inline ASN1C_CRMFStream_CertRequest& operator= (ASN1C_CRMFStream_CertRequest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_CertRequest (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_CertRequest *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_CertRequest
   (const char* name, ASN1T_CRMFStream_CertRequest* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_CertRequest
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_CertRequest* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_CertRequest (ASN1ConstCharPtr name, ASN1T_CRMFStream_CertRequest* pValue, ASN1T_CRMFStream_CertRequest* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_CertRequest (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertRequest* pSrcValue, ASN1T_CRMFStream_CertRequest* pDstValue);

EXTERN void asn1Free_CRMFStream_CertRequest
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  PKMACValue                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_PKMACValue;

struct EXTERN ASN1T_CRMFStream_PKMACValue : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier algId;
   ASN1TDynBitStr value;
   ASN1T_CRMFStream_PKMACValue ();
   ASN1T_CRMFStream_PKMACValue (ASN1C_CRMFStream_PKMACValue& srcData);
   ~ASN1T_CRMFStream_PKMACValue ();
} ;

class EXTERN ASN1C_CRMFStream_PKMACValue :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_PKMACValue& msgData;
public:
   ASN1C_CRMFStream_PKMACValue (ASN1T_CRMFStream_PKMACValue& data);
   ASN1C_CRMFStream_PKMACValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_PKMACValue& data);
   ASN1C_CRMFStream_PKMACValue (ASN1C_CRMFStream_PKMACValue& original);

   inline ASN1T_CRMFStream_PKMACValue& getData () { return msgData; }
   inline const ASN1T_CRMFStream_PKMACValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_PKMACValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_PKMACValue& getCopy (ASN1T_CRMFStream_PKMACValue* pDstData = 0);
   ASN1T_CRMFStream_PKMACValue* newCopy ();

   inline ASN1C_CRMFStream_PKMACValue& operator= (ASN1C_CRMFStream_PKMACValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_PKMACValue (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_PKMACValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_PKMACValue
   (const char* name, ASN1T_CRMFStream_PKMACValue* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_PKMACValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_PKMACValue* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_PKMACValue (ASN1ConstCharPtr name, ASN1T_CRMFStream_PKMACValue* pValue, ASN1T_CRMFStream_PKMACValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_PKMACValue (ASN1CTXT *pctxt, ASN1T_CRMFStream_PKMACValue* pSrcValue, ASN1T_CRMFStream_PKMACValue* pDstValue);

EXTERN void asn1Free_CRMFStream_PKMACValue
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_PKMACValue* pvalue);

/**************************************************************/
/*                                                            */
/*  POPOSigningKeyInput_authInfo                              */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CRMFStream_POPOSigningKeyInput_authInfo_publicKeyMAC 1
#define T_CRMFStream_POPOSigningKeyInput_authInfo_sender 2

class EXTERN ASN1C_CRMFStream_POPOSigningKeyInput_authInfo;

struct EXTERN ASN1T_CRMFStream_POPOSigningKeyInput_authInfo : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_CRMFStream_PKMACValue *publicKeyMAC;
      /* t = 2 */
      ASN1T_IMPStream_GeneralName *sender;
   } u;
   ASN1T_CRMFStream_POPOSigningKeyInput_authInfo () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CRMFStream_POPOSigningKeyInput_authInfo (ASN1C_CRMFStream_POPOSigningKeyInput_authInfo& srcData);
   ~ASN1T_CRMFStream_POPOSigningKeyInput_authInfo ();
} ;

class EXTERN ASN1C_CRMFStream_POPOSigningKeyInput_authInfo :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_POPOSigningKeyInput_authInfo& msgData;
public:
   ASN1C_CRMFStream_POPOSigningKeyInput_authInfo (ASN1T_CRMFStream_POPOSigningKeyInput_authInfo& data);
   ASN1C_CRMFStream_POPOSigningKeyInput_authInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_POPOSigningKeyInput_authInfo& data);
   ASN1C_CRMFStream_POPOSigningKeyInput_authInfo (ASN1C_CRMFStream_POPOSigningKeyInput_authInfo& original);

   inline ASN1T_CRMFStream_POPOSigningKeyInput_authInfo& getData () { return msgData; }
   inline const ASN1T_CRMFStream_POPOSigningKeyInput_authInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_POPOSigningKeyInput_authInfo& getCopy (ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pDstData = 0);
   ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* newCopy ();

   inline ASN1C_CRMFStream_POPOSigningKeyInput_authInfo& operator= (ASN1C_CRMFStream_POPOSigningKeyInput_authInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_POPOSigningKeyInput_authInfo (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_POPOSigningKeyInput_authInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_POPOSigningKeyInput_authInfo
   (const char* name, ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_POPOSigningKeyInput_authInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_POPOSigningKeyInput_authInfo (ASN1ConstCharPtr name, ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pValue, ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_POPOSigningKeyInput_authInfo (ASN1CTXT *pctxt, ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pSrcValue, ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pDstValue);

EXTERN void asn1Free_CRMFStream_POPOSigningKeyInput_authInfo
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_POPOSigningKeyInput_authInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  POPOSigningKeyInput                                       */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_POPOSigningKeyInput;

struct EXTERN ASN1T_CRMFStream_POPOSigningKeyInput : public ASN1TPDU {
   ASN1T_CRMFStream_POPOSigningKeyInput_authInfo authInfo;
   ASN1T_EXPStream_SubjectPublicKeyInfo publicKey;
   ASN1T_CRMFStream_POPOSigningKeyInput ();
   ASN1T_CRMFStream_POPOSigningKeyInput (ASN1C_CRMFStream_POPOSigningKeyInput& srcData);
   ~ASN1T_CRMFStream_POPOSigningKeyInput ();
} ;

class EXTERN ASN1C_CRMFStream_POPOSigningKeyInput :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_POPOSigningKeyInput& msgData;
public:
   ASN1C_CRMFStream_POPOSigningKeyInput (ASN1T_CRMFStream_POPOSigningKeyInput& data);
   ASN1C_CRMFStream_POPOSigningKeyInput (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_POPOSigningKeyInput& data);
   ASN1C_CRMFStream_POPOSigningKeyInput (ASN1C_CRMFStream_POPOSigningKeyInput& original);

   inline ASN1T_CRMFStream_POPOSigningKeyInput& getData () { return msgData; }
   inline const ASN1T_CRMFStream_POPOSigningKeyInput& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_POPOSigningKeyInput* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_POPOSigningKeyInput& getCopy (ASN1T_CRMFStream_POPOSigningKeyInput* pDstData = 0);
   ASN1T_CRMFStream_POPOSigningKeyInput* newCopy ();

   inline ASN1C_CRMFStream_POPOSigningKeyInput& operator= (ASN1C_CRMFStream_POPOSigningKeyInput& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_POPOSigningKeyInput (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_POPOSigningKeyInput *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_POPOSigningKeyInput
   (const char* name, ASN1T_CRMFStream_POPOSigningKeyInput* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_POPOSigningKeyInput
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_POPOSigningKeyInput* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_POPOSigningKeyInput (ASN1ConstCharPtr name, ASN1T_CRMFStream_POPOSigningKeyInput* pValue, ASN1T_CRMFStream_POPOSigningKeyInput* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_POPOSigningKeyInput (ASN1CTXT *pctxt, ASN1T_CRMFStream_POPOSigningKeyInput* pSrcValue, ASN1T_CRMFStream_POPOSigningKeyInput* pDstValue);

EXTERN void asn1Free_CRMFStream_POPOSigningKeyInput
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_POPOSigningKeyInput* pvalue);

/**************************************************************/
/*                                                            */
/*  POPOSigningKey                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_POPOSigningKey;

struct EXTERN ASN1T_CRMFStream_POPOSigningKey : public ASN1TPDU {
   struct {
      unsigned poposkInputPresent : 1;
   } m;
   ASN1T_CRMFStream_POPOSigningKeyInput poposkInput;
   ASN1T_EXPStream_AlgorithmIdentifier algorithmIdentifier;
   ASN1TDynBitStr signature;
   ASN1T_CRMFStream_POPOSigningKey ();
   ASN1T_CRMFStream_POPOSigningKey (ASN1C_CRMFStream_POPOSigningKey& srcData);
   ~ASN1T_CRMFStream_POPOSigningKey ();
} ;

class EXTERN ASN1C_CRMFStream_POPOSigningKey :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_POPOSigningKey& msgData;
public:
   ASN1C_CRMFStream_POPOSigningKey (ASN1T_CRMFStream_POPOSigningKey& data);
   ASN1C_CRMFStream_POPOSigningKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_POPOSigningKey& data);
   ASN1C_CRMFStream_POPOSigningKey (ASN1C_CRMFStream_POPOSigningKey& original);

   inline ASN1T_CRMFStream_POPOSigningKey& getData () { return msgData; }
   inline const ASN1T_CRMFStream_POPOSigningKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_POPOSigningKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_POPOSigningKey& getCopy (ASN1T_CRMFStream_POPOSigningKey* pDstData = 0);
   ASN1T_CRMFStream_POPOSigningKey* newCopy ();

   inline ASN1C_CRMFStream_POPOSigningKey& operator= (ASN1C_CRMFStream_POPOSigningKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_POPOSigningKey (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_POPOSigningKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_POPOSigningKey
   (const char* name, ASN1T_CRMFStream_POPOSigningKey* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_POPOSigningKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_POPOSigningKey* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_POPOSigningKey (ASN1ConstCharPtr name, ASN1T_CRMFStream_POPOSigningKey* pValue, ASN1T_CRMFStream_POPOSigningKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_POPOSigningKey (ASN1CTXT *pctxt, ASN1T_CRMFStream_POPOSigningKey* pSrcValue, ASN1T_CRMFStream_POPOSigningKey* pDstValue);

EXTERN void asn1Free_CRMFStream_POPOSigningKey
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_POPOSigningKey* pvalue);

/**************************************************************/
/*                                                            */
/*  POPOPrivKey                                               */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CRMFStream_POPOPrivKey_thisMessage 1
#define T_CRMFStream_POPOPrivKey_subsequentMessage 2
#define T_CRMFStream_POPOPrivKey_dhMAC  3

class EXTERN ASN1C_CRMFStream_POPOPrivKey;

struct EXTERN ASN1T_CRMFStream_POPOPrivKey : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1TDynBitStr *thisMessage;
      /* t = 2 */
      ASN1T_CRMFStream_SubsequentMessage subsequentMessage;
      /* t = 3 */
      ASN1TDynBitStr *dhMAC;
   } u;
   ASN1T_CRMFStream_POPOPrivKey () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CRMFStream_POPOPrivKey (ASN1C_CRMFStream_POPOPrivKey& srcData);
   ~ASN1T_CRMFStream_POPOPrivKey ();
} ;

class EXTERN ASN1C_CRMFStream_POPOPrivKey :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_POPOPrivKey& msgData;
public:
   ASN1C_CRMFStream_POPOPrivKey (ASN1T_CRMFStream_POPOPrivKey& data);
   ASN1C_CRMFStream_POPOPrivKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_POPOPrivKey& data);
   ASN1C_CRMFStream_POPOPrivKey (ASN1C_CRMFStream_POPOPrivKey& original);

   inline ASN1T_CRMFStream_POPOPrivKey& getData () { return msgData; }
   inline const ASN1T_CRMFStream_POPOPrivKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_POPOPrivKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_POPOPrivKey& getCopy (ASN1T_CRMFStream_POPOPrivKey* pDstData = 0);
   ASN1T_CRMFStream_POPOPrivKey* newCopy ();

   inline ASN1C_CRMFStream_POPOPrivKey& operator= (ASN1C_CRMFStream_POPOPrivKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_POPOPrivKey (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_POPOPrivKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_POPOPrivKey
   (const char* name, ASN1T_CRMFStream_POPOPrivKey* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_POPOPrivKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_POPOPrivKey* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_POPOPrivKey (ASN1ConstCharPtr name, ASN1T_CRMFStream_POPOPrivKey* pValue, ASN1T_CRMFStream_POPOPrivKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_POPOPrivKey (ASN1CTXT *pctxt, ASN1T_CRMFStream_POPOPrivKey* pSrcValue, ASN1T_CRMFStream_POPOPrivKey* pDstValue);

EXTERN void asn1Free_CRMFStream_POPOPrivKey
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_POPOPrivKey* pvalue);

/**************************************************************/
/*                                                            */
/*  ProofOfPossession                                         */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CRMFStream_ProofOfPossession_raVerified 1
#define T_CRMFStream_ProofOfPossession_signature 2
#define T_CRMFStream_ProofOfPossession_keyEncipherment 3
#define T_CRMFStream_ProofOfPossession_keyAgreement 4

class EXTERN ASN1C_CRMFStream_ProofOfPossession;

struct EXTERN ASN1T_CRMFStream_ProofOfPossession : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      /* t = 2 */
      ASN1T_CRMFStream_POPOSigningKey *signature;
      /* t = 3 */
      ASN1T_CRMFStream_POPOPrivKey *keyEncipherment;
      /* t = 4 */
      ASN1T_CRMFStream_POPOPrivKey *keyAgreement;
   } u;
   ASN1T_CRMFStream_ProofOfPossession () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CRMFStream_ProofOfPossession (ASN1C_CRMFStream_ProofOfPossession& srcData);
   ~ASN1T_CRMFStream_ProofOfPossession ();
} ;

class EXTERN ASN1C_CRMFStream_ProofOfPossession :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_ProofOfPossession& msgData;
public:
   ASN1C_CRMFStream_ProofOfPossession (ASN1T_CRMFStream_ProofOfPossession& data);
   ASN1C_CRMFStream_ProofOfPossession (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_ProofOfPossession& data);
   ASN1C_CRMFStream_ProofOfPossession (ASN1C_CRMFStream_ProofOfPossession& original);

   inline ASN1T_CRMFStream_ProofOfPossession& getData () { return msgData; }
   inline const ASN1T_CRMFStream_ProofOfPossession& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_ProofOfPossession* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_ProofOfPossession& getCopy (ASN1T_CRMFStream_ProofOfPossession* pDstData = 0);
   ASN1T_CRMFStream_ProofOfPossession* newCopy ();

   inline ASN1C_CRMFStream_ProofOfPossession& operator= (ASN1C_CRMFStream_ProofOfPossession& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_ProofOfPossession (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_ProofOfPossession *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_ProofOfPossession
   (const char* name, ASN1T_CRMFStream_ProofOfPossession* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_ProofOfPossession
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_ProofOfPossession* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_ProofOfPossession (ASN1ConstCharPtr name, ASN1T_CRMFStream_ProofOfPossession* pValue, ASN1T_CRMFStream_ProofOfPossession* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_ProofOfPossession (ASN1CTXT *pctxt, ASN1T_CRMFStream_ProofOfPossession* pSrcValue, ASN1T_CRMFStream_ProofOfPossession* pDstValue);

EXTERN void asn1Free_CRMFStream_ProofOfPossession
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_ProofOfPossession* pvalue);

/**************************************************************/
/*                                                            */
/*  CertReqMsg_regInfo                                        */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_AttributeTypeAndValue */
typedef struct EXTERN ASN1T_CRMFStream_CertReqMsg_regInfo : public ASN1TPDUSeqOfList {
   ~ASN1T_CRMFStream_CertReqMsg_regInfo();
} ASN1T_CRMFStream_CertReqMsg_regInfo;

class EXTERN ASN1C_CRMFStream_CertReqMsg_regInfo :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CRMFStream_CertReqMsg_regInfo& msgData;
public:
   ASN1C_CRMFStream_CertReqMsg_regInfo (ASN1T_CRMFStream_CertReqMsg_regInfo& data);
   ASN1C_CRMFStream_CertReqMsg_regInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_CertReqMsg_regInfo& data);
   ASN1C_CRMFStream_CertReqMsg_regInfo (ASN1C_CRMFStream_CertReqMsg_regInfo& original);

   inline ASN1T_CRMFStream_CertReqMsg_regInfo& getData () { return msgData; }
   inline const ASN1T_CRMFStream_CertReqMsg_regInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_CertReqMsg_regInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_CertReqMsg_regInfo& getCopy (ASN1T_CRMFStream_CertReqMsg_regInfo* pDstData = 0);
   ASN1T_CRMFStream_CertReqMsg_regInfo* newCopy ();

   ASN1C_CRMFStream_CertReqMsg_regInfo& operator= (ASN1C_CRMFStream_CertReqMsg_regInfo& srcData);
   void Append (ASN1T_EXPStream_AttributeTypeAndValue *elem);
   ASN1T_EXPStream_AttributeTypeAndValue *NewElement ();
} ;

EXTERN int asn1BSD_CRMFStream_CertReqMsg_regInfo (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_CertReqMsg_regInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_CertReqMsg_regInfo
   (const char* name, ASN1T_CRMFStream_CertReqMsg_regInfo* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_CertReqMsg_regInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_CertReqMsg_regInfo* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_CertReqMsg_regInfo (ASN1ConstCharPtr name, ASN1T_CRMFStream_CertReqMsg_regInfo* pValue, ASN1T_CRMFStream_CertReqMsg_regInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_CertReqMsg_regInfo (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertReqMsg_regInfo* pSrcValue, ASN1T_CRMFStream_CertReqMsg_regInfo* pDstValue);

EXTERN void asn1Free_CRMFStream_CertReqMsg_regInfo
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertReqMsg_regInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertReqMsg                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CRMFStream_CertReqMsg;

struct EXTERN ASN1T_CRMFStream_CertReqMsg : public ASN1TPDU {
   struct {
      unsigned popPresent : 1;
      unsigned regInfoPresent : 1;
   } m;
   ASN1T_CRMFStream_CertRequest certReq;
   ASN1T_CRMFStream_ProofOfPossession pop;
   ASN1T_CRMFStream_CertReqMsg_regInfo regInfo;
   ASN1T_CRMFStream_CertReqMsg ();
   ASN1T_CRMFStream_CertReqMsg (ASN1C_CRMFStream_CertReqMsg& srcData);
   ~ASN1T_CRMFStream_CertReqMsg ();
} ;

class EXTERN ASN1C_CRMFStream_CertReqMsg :
   public ASN1CType
{
protected:
   ASN1T_CRMFStream_CertReqMsg& msgData;
public:
   ASN1C_CRMFStream_CertReqMsg (ASN1T_CRMFStream_CertReqMsg& data);
   ASN1C_CRMFStream_CertReqMsg (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_CertReqMsg& data);
   ASN1C_CRMFStream_CertReqMsg (ASN1C_CRMFStream_CertReqMsg& original);

   inline ASN1T_CRMFStream_CertReqMsg& getData () { return msgData; }
   inline const ASN1T_CRMFStream_CertReqMsg& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_CertReqMsg* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_CertReqMsg& getCopy (ASN1T_CRMFStream_CertReqMsg* pDstData = 0);
   ASN1T_CRMFStream_CertReqMsg* newCopy ();

   inline ASN1C_CRMFStream_CertReqMsg& operator= (ASN1C_CRMFStream_CertReqMsg& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CRMFStream_CertReqMsg (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_CertReqMsg *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_CertReqMsg
   (const char* name, ASN1T_CRMFStream_CertReqMsg* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_CertReqMsg
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_CertReqMsg* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_CertReqMsg (ASN1ConstCharPtr name, ASN1T_CRMFStream_CertReqMsg* pValue, ASN1T_CRMFStream_CertReqMsg* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_CertReqMsg (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertReqMsg* pSrcValue, ASN1T_CRMFStream_CertReqMsg* pDstValue);

EXTERN void asn1Free_CRMFStream_CertReqMsg
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertReqMsg* pvalue);

/**************************************************************/
/*                                                            */
/*  CertReqMessages                                           */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CRMFStream_CertReqMsg */
typedef struct EXTERN ASN1T_CRMFStream_CertReqMessages : public ASN1TPDUSeqOfList {
   ~ASN1T_CRMFStream_CertReqMessages();
} ASN1T_CRMFStream_CertReqMessages;

class EXTERN ASN1C_CRMFStream_CertReqMessages :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CRMFStream_CertReqMessages& msgData;
public:
   ASN1C_CRMFStream_CertReqMessages (ASN1T_CRMFStream_CertReqMessages& data);
   ASN1C_CRMFStream_CertReqMessages (
      ASN1MessageBufferIF& msgBuf, ASN1T_CRMFStream_CertReqMessages& data);
   ASN1C_CRMFStream_CertReqMessages (ASN1C_CRMFStream_CertReqMessages& original);

   inline ASN1T_CRMFStream_CertReqMessages& getData () { return msgData; }
   inline const ASN1T_CRMFStream_CertReqMessages& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CRMFStream_CertReqMessages* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CRMFStream_CertReqMessages& getCopy (ASN1T_CRMFStream_CertReqMessages* pDstData = 0);
   ASN1T_CRMFStream_CertReqMessages* newCopy ();

   ASN1C_CRMFStream_CertReqMessages& operator= (ASN1C_CRMFStream_CertReqMessages& srcData);
   void Append (ASN1T_CRMFStream_CertReqMsg *elem);
   ASN1T_CRMFStream_CertReqMsg *NewElement ();
} ;

EXTERN int asn1BSD_CRMFStream_CertReqMessages (ASN1CTXT* pctxt,
   ASN1T_CRMFStream_CertReqMessages *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CRMFStream_CertReqMessages
   (const char* name, ASN1T_CRMFStream_CertReqMessages* pvalue);

EXTERN int asn1PrtToStrm_CRMFStream_CertReqMessages
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CRMFStream_CertReqMessages* pvalue);

EXTERN OSBOOL asn1Compare_CRMFStream_CertReqMessages (ASN1ConstCharPtr name, ASN1T_CRMFStream_CertReqMessages* pValue, ASN1T_CRMFStream_CertReqMessages* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CRMFStream_CertReqMessages (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertReqMessages* pSrcValue, ASN1T_CRMFStream_CertReqMessages* pDstValue);

EXTERN void asn1Free_CRMFStream_CertReqMessages
   (ASN1CTXT *pctxt, ASN1T_CRMFStream_CertReqMessages* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID CRMFStream_id_pkix;
extern EXTERN ASN1OBJID CRMFStream_id_pkip;
extern EXTERN ASN1OBJID CRMFStream_id_regCtrl;
extern EXTERN ASN1OBJID CRMFStream_id_regCtrl_protocolEncrKey;

#include "ASN1CBitStr.h"
#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  PKIProtection                                             */
/*                                                            */
/**************************************************************/

typedef ASN1TDynBitStr ASN1T_CMPStream_PKIProtection;

class EXTERN ASN1C_CMPStream_PKIProtection :
   public ASN1CBitStr
{
protected:
   ASN1T_CMPStream_PKIProtection& msgData;
public:
   ASN1C_CMPStream_PKIProtection (ASN1T_CMPStream_PKIProtection& data);
   ASN1C_CMPStream_PKIProtection (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIProtection& data);
   ASN1C_CMPStream_PKIProtection (ASN1C_CMPStream_PKIProtection& original);

   inline ASN1T_CMPStream_PKIProtection& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIProtection& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIProtection* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIProtection& getCopy (ASN1T_CMPStream_PKIProtection* pDstData = 0);
   ASN1T_CMPStream_PKIProtection* newCopy ();

   ASN1C_CMPStream_PKIProtection& operator= (ASN1C_CMPStream_PKIProtection& srcData);
} ;

EXTERN int asn1BSD_CMPStream_PKIProtection (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIProtection *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIProtection
   (const char* name, ASN1T_CMPStream_PKIProtection* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIProtection
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIProtection* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIProtection (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIProtection* pValue, ASN1T_CMPStream_PKIProtection* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIProtection (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIProtection* pSrcValue, ASN1T_CMPStream_PKIProtection* pDstValue);

EXTERN void asn1Free_CMPStream_PKIProtection
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIProtection* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIHeader_pvno                                            */
/*                                                            */
/**************************************************************/

struct EXTERN CMPStream_PKIHeader_pvno {
   enum Root {
      cmp1999 = 1,
      cmp2000 = 2
   } ;
} ;

typedef OSUINT32 ASN1T_CMPStream_PKIHeader_pvno;

class EXTERN ASN1C_CMPStream_PKIHeader_pvno :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_PKIHeader_pvno& msgData;
public:
   ASN1C_CMPStream_PKIHeader_pvno (ASN1T_CMPStream_PKIHeader_pvno& data);
   ASN1C_CMPStream_PKIHeader_pvno (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIHeader_pvno& data);
   ASN1C_CMPStream_PKIHeader_pvno (ASN1C_CMPStream_PKIHeader_pvno& original);

   inline ASN1T_CMPStream_PKIHeader_pvno& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIHeader_pvno& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIHeader_pvno* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIHeader_pvno& getCopy (ASN1T_CMPStream_PKIHeader_pvno* pDstData = 0);
   ASN1T_CMPStream_PKIHeader_pvno* newCopy ();

   inline ASN1C_CMPStream_PKIHeader_pvno& operator= (ASN1C_CMPStream_PKIHeader_pvno& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_PKIHeader_pvno (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIHeader_pvno *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIHeader_pvno
   (const char* name, ASN1T_CMPStream_PKIHeader_pvno* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIHeader_pvno
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIHeader_pvno* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIHeader_pvno (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIHeader_pvno* pValue, ASN1T_CMPStream_PKIHeader_pvno* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIHeader_pvno (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIHeader_pvno* pSrcValue, ASN1T_CMPStream_PKIHeader_pvno* pDstValue);

/**************************************************************/
/*                                                            */
/*  PKIFreeText                                               */
/*                                                            */
/**************************************************************/

/* List of ASN1UTF8String */
typedef struct EXTERN ASN1T_CMPStream_PKIFreeText : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_PKIFreeText();
} ASN1T_CMPStream_PKIFreeText;

class EXTERN ASN1C_CMPStream_PKIFreeText :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_PKIFreeText& msgData;
public:
   ASN1C_CMPStream_PKIFreeText (ASN1T_CMPStream_PKIFreeText& data);
   ASN1C_CMPStream_PKIFreeText (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIFreeText& data);
   ASN1C_CMPStream_PKIFreeText (ASN1C_CMPStream_PKIFreeText& original);

   inline ASN1T_CMPStream_PKIFreeText& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIFreeText& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIFreeText* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIFreeText& getCopy (ASN1T_CMPStream_PKIFreeText* pDstData = 0);
   ASN1T_CMPStream_PKIFreeText* newCopy ();

   ASN1C_CMPStream_PKIFreeText& operator= (ASN1C_CMPStream_PKIFreeText& srcData);
   void Append (ASN1UTF8String *elem);
   ASN1UTF8String *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_PKIFreeText (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIFreeText *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIFreeText
   (const char* name, ASN1T_CMPStream_PKIFreeText* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIFreeText
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIFreeText* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIFreeText (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIFreeText* pValue, ASN1T_CMPStream_PKIFreeText* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIFreeText (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIFreeText* pSrcValue, ASN1T_CMPStream_PKIFreeText* pDstValue);

EXTERN void asn1Free_CMPStream_PKIFreeText
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIFreeText* pvalue);

/**************************************************************/
/*                                                            */
/*  InfoTypeAndValue                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_InfoTypeAndValue;

struct EXTERN ASN1T_CMPStream_InfoTypeAndValue : public ASN1TPDU {
   struct {
      unsigned infoValuePresent : 1;
   } m;
   ASN1TObjId infoType;
   ASN1TOpenType infoValue;
   ASN1T_CMPStream_InfoTypeAndValue ();
   ASN1T_CMPStream_InfoTypeAndValue (ASN1C_CMPStream_InfoTypeAndValue& srcData);
   ~ASN1T_CMPStream_InfoTypeAndValue ();
} ;

class EXTERN ASN1C_CMPStream_InfoTypeAndValue :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_InfoTypeAndValue& msgData;
public:
   ASN1C_CMPStream_InfoTypeAndValue (ASN1T_CMPStream_InfoTypeAndValue& data);
   ASN1C_CMPStream_InfoTypeAndValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_InfoTypeAndValue& data);
   ASN1C_CMPStream_InfoTypeAndValue (ASN1C_CMPStream_InfoTypeAndValue& original);

   inline ASN1T_CMPStream_InfoTypeAndValue& getData () { return msgData; }
   inline const ASN1T_CMPStream_InfoTypeAndValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_InfoTypeAndValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_InfoTypeAndValue& getCopy (ASN1T_CMPStream_InfoTypeAndValue* pDstData = 0);
   ASN1T_CMPStream_InfoTypeAndValue* newCopy ();

   inline ASN1C_CMPStream_InfoTypeAndValue& operator= (ASN1C_CMPStream_InfoTypeAndValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_InfoTypeAndValue (ASN1CTXT* pctxt,
   ASN1T_CMPStream_InfoTypeAndValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_InfoTypeAndValue
   (const char* name, ASN1T_CMPStream_InfoTypeAndValue* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_InfoTypeAndValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_InfoTypeAndValue* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_InfoTypeAndValue (ASN1ConstCharPtr name, ASN1T_CMPStream_InfoTypeAndValue* pValue, ASN1T_CMPStream_InfoTypeAndValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_InfoTypeAndValue (ASN1CTXT *pctxt, ASN1T_CMPStream_InfoTypeAndValue* pSrcValue, ASN1T_CMPStream_InfoTypeAndValue* pDstValue);

EXTERN void asn1Free_CMPStream_InfoTypeAndValue
   (ASN1CTXT *pctxt, ASN1T_CMPStream_InfoTypeAndValue* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIHeader_generalInfo                                     */
/*                                                            */
/**************************************************************/

#define TV_CMPStream_PKIHeader_generalInfo	(TM_CTXT|TM_CONS|8)

/* List of ASN1T_CMPStream_InfoTypeAndValue */
typedef struct EXTERN ASN1T_CMPStream_PKIHeader_generalInfo : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_PKIHeader_generalInfo();
} ASN1T_CMPStream_PKIHeader_generalInfo;

class EXTERN ASN1C_CMPStream_PKIHeader_generalInfo :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_PKIHeader_generalInfo& msgData;
public:
   ASN1C_CMPStream_PKIHeader_generalInfo (ASN1T_CMPStream_PKIHeader_generalInfo& data);
   ASN1C_CMPStream_PKIHeader_generalInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIHeader_generalInfo& data);
   ASN1C_CMPStream_PKIHeader_generalInfo (ASN1C_CMPStream_PKIHeader_generalInfo& original);

   inline ASN1T_CMPStream_PKIHeader_generalInfo& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIHeader_generalInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIHeader_generalInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIHeader_generalInfo& getCopy (ASN1T_CMPStream_PKIHeader_generalInfo* pDstData = 0);
   ASN1T_CMPStream_PKIHeader_generalInfo* newCopy ();

   ASN1C_CMPStream_PKIHeader_generalInfo& operator= (ASN1C_CMPStream_PKIHeader_generalInfo& srcData);
   void Append (ASN1T_CMPStream_InfoTypeAndValue *elem);
   ASN1T_CMPStream_InfoTypeAndValue *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_PKIHeader_generalInfo (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIHeader_generalInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIHeader_generalInfo
   (const char* name, ASN1T_CMPStream_PKIHeader_generalInfo* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIHeader_generalInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIHeader_generalInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIHeader_generalInfo (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIHeader_generalInfo* pValue, ASN1T_CMPStream_PKIHeader_generalInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIHeader_generalInfo (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIHeader_generalInfo* pSrcValue, ASN1T_CMPStream_PKIHeader_generalInfo* pDstValue);

EXTERN void asn1Free_CMPStream_PKIHeader_generalInfo
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIHeader_generalInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIHeader                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_PKIHeader;

struct EXTERN ASN1T_CMPStream_PKIHeader : public ASN1TPDU {
   struct {
      unsigned messageTimePresent : 1;
      unsigned protectionAlgPresent : 1;
      unsigned senderKIDPresent : 1;
      unsigned recipKIDPresent : 1;
      unsigned transactionIDPresent : 1;
      unsigned senderNoncePresent : 1;
      unsigned recipNoncePresent : 1;
      unsigned freeTextPresent : 1;
      unsigned generalInfoPresent : 1;
   } m;
   ASN1T_CMPStream_PKIHeader_pvno pvno;
   ASN1T_IMPStream_GeneralName sender;
   ASN1T_IMPStream_GeneralName recipient;
   ASN1GeneralizedTime messageTime;
   ASN1T_EXPStream_AlgorithmIdentifier protectionAlg;
   ASN1T_IMPStream_KeyIdentifier senderKID;
   ASN1T_IMPStream_KeyIdentifier recipKID;
   ASN1TDynOctStr transactionID;
   ASN1TDynOctStr senderNonce;
   ASN1TDynOctStr recipNonce;
   ASN1T_CMPStream_PKIFreeText freeText;
   ASN1T_CMPStream_PKIHeader_generalInfo generalInfo;
   ASN1T_CMPStream_PKIHeader ();
   ASN1T_CMPStream_PKIHeader (ASN1C_CMPStream_PKIHeader& srcData);
   ~ASN1T_CMPStream_PKIHeader ();
} ;

class EXTERN ASN1C_CMPStream_PKIHeader :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_PKIHeader& msgData;
public:
   ASN1C_CMPStream_PKIHeader (ASN1T_CMPStream_PKIHeader& data);
   ASN1C_CMPStream_PKIHeader (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIHeader& data);
   ASN1C_CMPStream_PKIHeader (ASN1C_CMPStream_PKIHeader& original);

   inline ASN1T_CMPStream_PKIHeader& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIHeader& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIHeader* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIHeader& getCopy (ASN1T_CMPStream_PKIHeader* pDstData = 0);
   ASN1T_CMPStream_PKIHeader* newCopy ();

   inline ASN1C_CMPStream_PKIHeader& operator= (ASN1C_CMPStream_PKIHeader& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_PKIHeader (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIHeader *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIHeader
   (const char* name, ASN1T_CMPStream_PKIHeader* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIHeader
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIHeader* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIHeader (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIHeader* pValue, ASN1T_CMPStream_PKIHeader* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIHeader (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIHeader* pSrcValue, ASN1T_CMPStream_PKIHeader* pDstValue);

EXTERN void asn1Free_CMPStream_PKIHeader
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIHeader* pvalue);

/**************************************************************/
/*                                                            */
/*  CMPCertificate                                            */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMPStream_CMPCertificate_x509v3PKCert 1

class EXTERN ASN1C_CMPStream_CMPCertificate;

struct EXTERN ASN1T_CMPStream_CMPCertificate : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_EXPStream_Certificate *x509v3PKCert;
   } u;
   ASN1T_CMPStream_CMPCertificate () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMPStream_CMPCertificate (ASN1C_CMPStream_CMPCertificate& srcData);
   ~ASN1T_CMPStream_CMPCertificate ();
} ;

class EXTERN ASN1C_CMPStream_CMPCertificate :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_CMPCertificate& msgData;
public:
   ASN1C_CMPStream_CMPCertificate (ASN1T_CMPStream_CMPCertificate& data);
   ASN1C_CMPStream_CMPCertificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CMPCertificate& data);
   ASN1C_CMPStream_CMPCertificate (ASN1C_CMPStream_CMPCertificate& original);

   inline ASN1T_CMPStream_CMPCertificate& getData () { return msgData; }
   inline const ASN1T_CMPStream_CMPCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CMPCertificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CMPCertificate& getCopy (ASN1T_CMPStream_CMPCertificate* pDstData = 0);
   ASN1T_CMPStream_CMPCertificate* newCopy ();

   inline ASN1C_CMPStream_CMPCertificate& operator= (ASN1C_CMPStream_CMPCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_CMPCertificate (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CMPCertificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CMPCertificate
   (const char* name, ASN1T_CMPStream_CMPCertificate* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CMPCertificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CMPCertificate* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CMPCertificate (ASN1ConstCharPtr name, ASN1T_CMPStream_CMPCertificate* pValue, ASN1T_CMPStream_CMPCertificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CMPCertificate (ASN1CTXT *pctxt, ASN1T_CMPStream_CMPCertificate* pSrcValue, ASN1T_CMPStream_CMPCertificate* pDstValue);

EXTERN void asn1Free_CMPStream_CMPCertificate
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CMPCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  CertRepMessage_caPubs                                     */
/*                                                            */
/**************************************************************/

#define TV_CMPStream_CertRepMessage_caPubs	(TM_CTXT|TM_CONS|1)

/* List of ASN1T_CMPStream_CMPCertificate */
typedef struct EXTERN ASN1T_CMPStream_CertRepMessage_caPubs : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_CertRepMessage_caPubs();
} ASN1T_CMPStream_CertRepMessage_caPubs;

class EXTERN ASN1C_CMPStream_CertRepMessage_caPubs :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_CertRepMessage_caPubs& msgData;
public:
   ASN1C_CMPStream_CertRepMessage_caPubs (ASN1T_CMPStream_CertRepMessage_caPubs& data);
   ASN1C_CMPStream_CertRepMessage_caPubs (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CertRepMessage_caPubs& data);
   ASN1C_CMPStream_CertRepMessage_caPubs (ASN1C_CMPStream_CertRepMessage_caPubs& original);

   inline ASN1T_CMPStream_CertRepMessage_caPubs& getData () { return msgData; }
   inline const ASN1T_CMPStream_CertRepMessage_caPubs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CertRepMessage_caPubs* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CertRepMessage_caPubs& getCopy (ASN1T_CMPStream_CertRepMessage_caPubs* pDstData = 0);
   ASN1T_CMPStream_CertRepMessage_caPubs* newCopy ();

   ASN1C_CMPStream_CertRepMessage_caPubs& operator= (ASN1C_CMPStream_CertRepMessage_caPubs& srcData);
   void Append (ASN1T_CMPStream_CMPCertificate *elem);
   ASN1T_CMPStream_CMPCertificate *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_CertRepMessage_caPubs (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CertRepMessage_caPubs *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CertRepMessage_caPubs
   (const char* name, ASN1T_CMPStream_CertRepMessage_caPubs* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CertRepMessage_caPubs
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CertRepMessage_caPubs* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CertRepMessage_caPubs (ASN1ConstCharPtr name, ASN1T_CMPStream_CertRepMessage_caPubs* pValue, ASN1T_CMPStream_CertRepMessage_caPubs* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CertRepMessage_caPubs (ASN1CTXT *pctxt, ASN1T_CMPStream_CertRepMessage_caPubs* pSrcValue, ASN1T_CMPStream_CertRepMessage_caPubs* pDstValue);

EXTERN void asn1Free_CMPStream_CertRepMessage_caPubs
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CertRepMessage_caPubs* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIStatus                                                 */
/*                                                            */
/**************************************************************/

struct EXTERN CMPStream_PKIStatus {
   enum Root {
      accepted = 0,
      grantedWithMods = 1,
      rejection = 2,
      waiting = 3,
      revocationWarning = 4,
      revocationNotification = 5,
      keyUpdateWarning = 6
   } ;
} ;

typedef OSUINT32 ASN1T_CMPStream_PKIStatus;

class EXTERN ASN1C_CMPStream_PKIStatus :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_PKIStatus& msgData;
public:
   ASN1C_CMPStream_PKIStatus (ASN1T_CMPStream_PKIStatus& data);
   ASN1C_CMPStream_PKIStatus (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIStatus& data);
   ASN1C_CMPStream_PKIStatus (ASN1C_CMPStream_PKIStatus& original);

   inline ASN1T_CMPStream_PKIStatus& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIStatus* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIStatus& getCopy (ASN1T_CMPStream_PKIStatus* pDstData = 0);
   ASN1T_CMPStream_PKIStatus* newCopy ();

   inline ASN1C_CMPStream_PKIStatus& operator= (ASN1C_CMPStream_PKIStatus& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_PKIStatus (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIStatus *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIStatus
   (const char* name, ASN1T_CMPStream_PKIStatus* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIStatus
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIStatus* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIStatus (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIStatus* pValue, ASN1T_CMPStream_PKIStatus* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIStatus (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIStatus* pSrcValue, ASN1T_CMPStream_PKIStatus* pDstValue);

/**************************************************************/
/*                                                            */
/*  PKIFailureInfo                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_PKIFailureInfo;

struct EXTERN ASN1T_CMPStream_PKIFailureInfo {
   OSUINT32  numbits;
   OSOCTET data[4];
   // ctors
   ASN1T_CMPStream_PKIFailureInfo () : numbits(0) {}
   ASN1T_CMPStream_PKIFailureInfo (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits(_numbits) {
      memcpy (data, _data, sizeof(data));
   }
   ASN1T_CMPStream_PKIFailureInfo (ASN1C_CMPStream_PKIFailureInfo& srcData);
} ;

class EXTERN ASN1C_CMPStream_PKIFailureInfo :
   public ASN1CBitStr
{
protected:
   ASN1T_CMPStream_PKIFailureInfo& msgData;
public:
   // named bits
   enum { badAlg = 0, badMessageCheck = 1, badRequest = 2, badTime = 3, badCertId = 4, badDataFormat = 5, wrongAuthority = 6, incorrectData = 7, missingTimeStamp = 8, badPOP = 9, certRevoked = 10, certConfirmed = 11, wrongIntegrity = 12, badRecipientNonce = 13, timeNotAvailable = 14, unacceptedPolicy = 15, unacceptedExtension = 16, addInfoNotAvailable = 17, badSenderNonce = 18, badCertTemplate = 19, signerNotTrusted = 20, transactionIdInUse = 21, unsupportedVersion = 22, notAuthorized = 23, systemUnavail = 24, systemFailure = 25, duplicateCertReq = 26 };

   ASN1C_CMPStream_PKIFailureInfo (ASN1T_CMPStream_PKIFailureInfo& data);
   ASN1C_CMPStream_PKIFailureInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIFailureInfo& data);
   ASN1C_CMPStream_PKIFailureInfo (ASN1C_CMPStream_PKIFailureInfo& original);

   inline ASN1T_CMPStream_PKIFailureInfo& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIFailureInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIFailureInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIFailureInfo& getCopy (ASN1T_CMPStream_PKIFailureInfo* pDstData = 0);
   ASN1T_CMPStream_PKIFailureInfo* newCopy ();

   ASN1C_CMPStream_PKIFailureInfo& operator= (ASN1C_CMPStream_PKIFailureInfo& srcData);
} ;

EXTERN int asn1BSD_CMPStream_PKIFailureInfo (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIFailureInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIFailureInfo
   (const char* name, ASN1T_CMPStream_PKIFailureInfo* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIFailureInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIFailureInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIFailureInfo (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIFailureInfo* pValue, ASN1T_CMPStream_PKIFailureInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIFailureInfo (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIFailureInfo* pSrcValue, ASN1T_CMPStream_PKIFailureInfo* pDstValue);

/**************************************************************/
/*                                                            */
/*  PKIStatusInfo                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_PKIStatusInfo;

struct EXTERN ASN1T_CMPStream_PKIStatusInfo : public ASN1TPDU {
   struct {
      unsigned statusStringPresent : 1;
      unsigned failInfoPresent : 1;
   } m;
   ASN1T_CMPStream_PKIStatus status;
   ASN1T_CMPStream_PKIFreeText statusString;
   ASN1T_CMPStream_PKIFailureInfo failInfo;
   ASN1T_CMPStream_PKIStatusInfo ();
   ASN1T_CMPStream_PKIStatusInfo (ASN1C_CMPStream_PKIStatusInfo& srcData);
   ~ASN1T_CMPStream_PKIStatusInfo ();
} ;

class EXTERN ASN1C_CMPStream_PKIStatusInfo :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_PKIStatusInfo& msgData;
public:
   ASN1C_CMPStream_PKIStatusInfo (ASN1T_CMPStream_PKIStatusInfo& data);
   ASN1C_CMPStream_PKIStatusInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIStatusInfo& data);
   ASN1C_CMPStream_PKIStatusInfo (ASN1C_CMPStream_PKIStatusInfo& original);

   inline ASN1T_CMPStream_PKIStatusInfo& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIStatusInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIStatusInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIStatusInfo& getCopy (ASN1T_CMPStream_PKIStatusInfo* pDstData = 0);
   ASN1T_CMPStream_PKIStatusInfo* newCopy ();

   inline ASN1C_CMPStream_PKIStatusInfo& operator= (ASN1C_CMPStream_PKIStatusInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_PKIStatusInfo (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIStatusInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIStatusInfo
   (const char* name, ASN1T_CMPStream_PKIStatusInfo* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIStatusInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIStatusInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIStatusInfo (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIStatusInfo* pValue, ASN1T_CMPStream_PKIStatusInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIStatusInfo (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIStatusInfo* pSrcValue, ASN1T_CMPStream_PKIStatusInfo* pDstValue);

EXTERN void asn1Free_CMPStream_PKIStatusInfo
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIStatusInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertOrEncCert                                             */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMPStream_CertOrEncCert_certificate 1
#define T_CMPStream_CertOrEncCert_encryptedCert 2

class EXTERN ASN1C_CMPStream_CertOrEncCert;

struct EXTERN ASN1T_CMPStream_CertOrEncCert : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_CMPStream_CMPCertificate *certificate;
      /* t = 2 */
      ASN1T_CRMFStream_EncryptedValue *encryptedCert;
   } u;
   ASN1T_CMPStream_CertOrEncCert () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMPStream_CertOrEncCert (ASN1C_CMPStream_CertOrEncCert& srcData);
   ~ASN1T_CMPStream_CertOrEncCert ();
} ;

class EXTERN ASN1C_CMPStream_CertOrEncCert :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_CertOrEncCert& msgData;
public:
   ASN1C_CMPStream_CertOrEncCert (ASN1T_CMPStream_CertOrEncCert& data);
   ASN1C_CMPStream_CertOrEncCert (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CertOrEncCert& data);
   ASN1C_CMPStream_CertOrEncCert (ASN1C_CMPStream_CertOrEncCert& original);

   inline ASN1T_CMPStream_CertOrEncCert& getData () { return msgData; }
   inline const ASN1T_CMPStream_CertOrEncCert& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CertOrEncCert* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CertOrEncCert& getCopy (ASN1T_CMPStream_CertOrEncCert* pDstData = 0);
   ASN1T_CMPStream_CertOrEncCert* newCopy ();

   inline ASN1C_CMPStream_CertOrEncCert& operator= (ASN1C_CMPStream_CertOrEncCert& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_CertOrEncCert (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CertOrEncCert *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CertOrEncCert
   (const char* name, ASN1T_CMPStream_CertOrEncCert* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CertOrEncCert
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CertOrEncCert* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CertOrEncCert (ASN1ConstCharPtr name, ASN1T_CMPStream_CertOrEncCert* pValue, ASN1T_CMPStream_CertOrEncCert* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CertOrEncCert (ASN1CTXT *pctxt, ASN1T_CMPStream_CertOrEncCert* pSrcValue, ASN1T_CMPStream_CertOrEncCert* pDstValue);

EXTERN void asn1Free_CMPStream_CertOrEncCert
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CertOrEncCert* pvalue);

/**************************************************************/
/*                                                            */
/*  CertifiedKeyPair                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_CertifiedKeyPair;

struct EXTERN ASN1T_CMPStream_CertifiedKeyPair : public ASN1TPDU {
   struct {
      unsigned privateKeyPresent : 1;
      unsigned publicationInfoPresent : 1;
   } m;
   ASN1T_CMPStream_CertOrEncCert certOrEncCert;
   ASN1T_CRMFStream_EncryptedValue privateKey;
   ASN1T_CRMFStream_PKIPublicationInfo publicationInfo;
   ASN1T_CMPStream_CertifiedKeyPair ();
   ASN1T_CMPStream_CertifiedKeyPair (ASN1C_CMPStream_CertifiedKeyPair& srcData);
   ~ASN1T_CMPStream_CertifiedKeyPair ();
} ;

class EXTERN ASN1C_CMPStream_CertifiedKeyPair :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_CertifiedKeyPair& msgData;
public:
   ASN1C_CMPStream_CertifiedKeyPair (ASN1T_CMPStream_CertifiedKeyPair& data);
   ASN1C_CMPStream_CertifiedKeyPair (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CertifiedKeyPair& data);
   ASN1C_CMPStream_CertifiedKeyPair (ASN1C_CMPStream_CertifiedKeyPair& original);

   inline ASN1T_CMPStream_CertifiedKeyPair& getData () { return msgData; }
   inline const ASN1T_CMPStream_CertifiedKeyPair& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CertifiedKeyPair* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CertifiedKeyPair& getCopy (ASN1T_CMPStream_CertifiedKeyPair* pDstData = 0);
   ASN1T_CMPStream_CertifiedKeyPair* newCopy ();

   inline ASN1C_CMPStream_CertifiedKeyPair& operator= (ASN1C_CMPStream_CertifiedKeyPair& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_CertifiedKeyPair (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CertifiedKeyPair *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CertifiedKeyPair
   (const char* name, ASN1T_CMPStream_CertifiedKeyPair* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CertifiedKeyPair
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CertifiedKeyPair* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CertifiedKeyPair (ASN1ConstCharPtr name, ASN1T_CMPStream_CertifiedKeyPair* pValue, ASN1T_CMPStream_CertifiedKeyPair* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CertifiedKeyPair (ASN1CTXT *pctxt, ASN1T_CMPStream_CertifiedKeyPair* pSrcValue, ASN1T_CMPStream_CertifiedKeyPair* pDstValue);

EXTERN void asn1Free_CMPStream_CertifiedKeyPair
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CertifiedKeyPair* pvalue);

/**************************************************************/
/*                                                            */
/*  CertResponse                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_CertResponse;

struct EXTERN ASN1T_CMPStream_CertResponse : public ASN1TPDU {
   struct {
      unsigned certifiedKeyPairPresent : 1;
      unsigned rspInfoPresent : 1;
   } m;
   OSINT32 certReqId;
   ASN1T_CMPStream_PKIStatusInfo status;
   ASN1T_CMPStream_CertifiedKeyPair certifiedKeyPair;
   ASN1TDynOctStr rspInfo;
   ASN1T_CMPStream_CertResponse ();
   ASN1T_CMPStream_CertResponse (ASN1C_CMPStream_CertResponse& srcData);
   ~ASN1T_CMPStream_CertResponse ();
} ;

class EXTERN ASN1C_CMPStream_CertResponse :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_CertResponse& msgData;
public:
   ASN1C_CMPStream_CertResponse (ASN1T_CMPStream_CertResponse& data);
   ASN1C_CMPStream_CertResponse (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CertResponse& data);
   ASN1C_CMPStream_CertResponse (ASN1C_CMPStream_CertResponse& original);

   inline ASN1T_CMPStream_CertResponse& getData () { return msgData; }
   inline const ASN1T_CMPStream_CertResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CertResponse* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CertResponse& getCopy (ASN1T_CMPStream_CertResponse* pDstData = 0);
   ASN1T_CMPStream_CertResponse* newCopy ();

   inline ASN1C_CMPStream_CertResponse& operator= (ASN1C_CMPStream_CertResponse& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_CertResponse (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CertResponse *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CertResponse
   (const char* name, ASN1T_CMPStream_CertResponse* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CertResponse
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CertResponse* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CertResponse (ASN1ConstCharPtr name, ASN1T_CMPStream_CertResponse* pValue, ASN1T_CMPStream_CertResponse* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CertResponse (ASN1CTXT *pctxt, ASN1T_CMPStream_CertResponse* pSrcValue, ASN1T_CMPStream_CertResponse* pDstValue);

EXTERN void asn1Free_CMPStream_CertResponse
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CertResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfCMPStream_CertResponse                              */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMPStream_CertResponse */
typedef struct EXTERN ASN1T_CMPStream__SeqOfCMPStream_CertResponse : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream__SeqOfCMPStream_CertResponse();
} ASN1T_CMPStream__SeqOfCMPStream_CertResponse;

class EXTERN ASN1C_CMPStream__SeqOfCMPStream_CertResponse :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream__SeqOfCMPStream_CertResponse& msgData;
public:
   ASN1C_CMPStream__SeqOfCMPStream_CertResponse (ASN1T_CMPStream__SeqOfCMPStream_CertResponse& data);
   ASN1C_CMPStream__SeqOfCMPStream_CertResponse (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream__SeqOfCMPStream_CertResponse& data);
   ASN1C_CMPStream__SeqOfCMPStream_CertResponse (ASN1C_CMPStream__SeqOfCMPStream_CertResponse& original);

   inline ASN1T_CMPStream__SeqOfCMPStream_CertResponse& getData () { return msgData; }
   inline const ASN1T_CMPStream__SeqOfCMPStream_CertResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream__SeqOfCMPStream_CertResponse& getCopy (ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pDstData = 0);
   ASN1T_CMPStream__SeqOfCMPStream_CertResponse* newCopy ();

   ASN1C_CMPStream__SeqOfCMPStream_CertResponse& operator= (ASN1C_CMPStream__SeqOfCMPStream_CertResponse& srcData);
   void Append (ASN1T_CMPStream_CertResponse *elem);
   ASN1T_CMPStream_CertResponse *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream__SeqOfCMPStream_CertResponse (ASN1CTXT* pctxt,
   ASN1T_CMPStream__SeqOfCMPStream_CertResponse *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream__SeqOfCMPStream_CertResponse
   (const char* name, ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pvalue);

EXTERN int asn1PrtToStrm_CMPStream__SeqOfCMPStream_CertResponse
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream__SeqOfCMPStream_CertResponse (ASN1ConstCharPtr name, ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pValue, ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream__SeqOfCMPStream_CertResponse (ASN1CTXT *pctxt, ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pSrcValue, ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pDstValue);

EXTERN void asn1Free_CMPStream__SeqOfCMPStream_CertResponse
   (ASN1CTXT *pctxt, ASN1T_CMPStream__SeqOfCMPStream_CertResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  CertRepMessage                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_CertRepMessage;

struct EXTERN ASN1T_CMPStream_CertRepMessage : public ASN1TPDU {
   struct {
      unsigned caPubsPresent : 1;
   } m;
   ASN1T_CMPStream_CertRepMessage_caPubs caPubs;
   ASN1T_CMPStream__SeqOfCMPStream_CertResponse response;
   ASN1T_CMPStream_CertRepMessage ();
   ASN1T_CMPStream_CertRepMessage (ASN1C_CMPStream_CertRepMessage& srcData);
   ~ASN1T_CMPStream_CertRepMessage ();
} ;

class EXTERN ASN1C_CMPStream_CertRepMessage :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_CertRepMessage& msgData;
public:
   ASN1C_CMPStream_CertRepMessage (ASN1T_CMPStream_CertRepMessage& data);
   ASN1C_CMPStream_CertRepMessage (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CertRepMessage& data);
   ASN1C_CMPStream_CertRepMessage (ASN1C_CMPStream_CertRepMessage& original);

   inline ASN1T_CMPStream_CertRepMessage& getData () { return msgData; }
   inline const ASN1T_CMPStream_CertRepMessage& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CertRepMessage* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CertRepMessage& getCopy (ASN1T_CMPStream_CertRepMessage* pDstData = 0);
   ASN1T_CMPStream_CertRepMessage* newCopy ();

   inline ASN1C_CMPStream_CertRepMessage& operator= (ASN1C_CMPStream_CertRepMessage& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_CertRepMessage (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CertRepMessage *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CertRepMessage
   (const char* name, ASN1T_CMPStream_CertRepMessage* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CertRepMessage
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CertRepMessage* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CertRepMessage (ASN1ConstCharPtr name, ASN1T_CMPStream_CertRepMessage* pValue, ASN1T_CMPStream_CertRepMessage* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CertRepMessage (ASN1CTXT *pctxt, ASN1T_CMPStream_CertRepMessage* pSrcValue, ASN1T_CMPStream_CertRepMessage* pDstValue);

EXTERN void asn1Free_CMPStream_CertRepMessage
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CertRepMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  Challenge                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_Challenge;

struct EXTERN ASN1T_CMPStream_Challenge : public ASN1TPDU {
   struct {
      unsigned owfPresent : 1;
   } m;
   ASN1T_EXPStream_AlgorithmIdentifier owf;
   ASN1TDynOctStr witness;
   ASN1TDynOctStr challenge;
   ASN1T_CMPStream_Challenge ();
   ASN1T_CMPStream_Challenge (ASN1C_CMPStream_Challenge& srcData);
   ~ASN1T_CMPStream_Challenge ();
} ;

class EXTERN ASN1C_CMPStream_Challenge :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_Challenge& msgData;
public:
   ASN1C_CMPStream_Challenge (ASN1T_CMPStream_Challenge& data);
   ASN1C_CMPStream_Challenge (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_Challenge& data);
   ASN1C_CMPStream_Challenge (ASN1C_CMPStream_Challenge& original);

   inline ASN1T_CMPStream_Challenge& getData () { return msgData; }
   inline const ASN1T_CMPStream_Challenge& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_Challenge* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_Challenge& getCopy (ASN1T_CMPStream_Challenge* pDstData = 0);
   ASN1T_CMPStream_Challenge* newCopy ();

   inline ASN1C_CMPStream_Challenge& operator= (ASN1C_CMPStream_Challenge& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_Challenge (ASN1CTXT* pctxt,
   ASN1T_CMPStream_Challenge *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_Challenge
   (const char* name, ASN1T_CMPStream_Challenge* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_Challenge
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_Challenge* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_Challenge (ASN1ConstCharPtr name, ASN1T_CMPStream_Challenge* pValue, ASN1T_CMPStream_Challenge* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_Challenge (ASN1CTXT *pctxt, ASN1T_CMPStream_Challenge* pSrcValue, ASN1T_CMPStream_Challenge* pDstValue);

EXTERN void asn1Free_CMPStream_Challenge
   (ASN1CTXT *pctxt, ASN1T_CMPStream_Challenge* pvalue);

/**************************************************************/
/*                                                            */
/*  POPODecKeyChallContent                                    */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMPStream_Challenge */
typedef struct EXTERN ASN1T_CMPStream_POPODecKeyChallContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_POPODecKeyChallContent();
} ASN1T_CMPStream_POPODecKeyChallContent;

class EXTERN ASN1C_CMPStream_POPODecKeyChallContent :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_POPODecKeyChallContent& msgData;
public:
   ASN1C_CMPStream_POPODecKeyChallContent (ASN1T_CMPStream_POPODecKeyChallContent& data);
   ASN1C_CMPStream_POPODecKeyChallContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_POPODecKeyChallContent& data);
   ASN1C_CMPStream_POPODecKeyChallContent (ASN1C_CMPStream_POPODecKeyChallContent& original);

   inline ASN1T_CMPStream_POPODecKeyChallContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_POPODecKeyChallContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_POPODecKeyChallContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_POPODecKeyChallContent& getCopy (ASN1T_CMPStream_POPODecKeyChallContent* pDstData = 0);
   ASN1T_CMPStream_POPODecKeyChallContent* newCopy ();

   ASN1C_CMPStream_POPODecKeyChallContent& operator= (ASN1C_CMPStream_POPODecKeyChallContent& srcData);
   void Append (ASN1T_CMPStream_Challenge *elem);
   ASN1T_CMPStream_Challenge *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_POPODecKeyChallContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_POPODecKeyChallContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_POPODecKeyChallContent
   (const char* name, ASN1T_CMPStream_POPODecKeyChallContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_POPODecKeyChallContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_POPODecKeyChallContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_POPODecKeyChallContent (ASN1ConstCharPtr name, ASN1T_CMPStream_POPODecKeyChallContent* pValue, ASN1T_CMPStream_POPODecKeyChallContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_POPODecKeyChallContent (ASN1CTXT *pctxt, ASN1T_CMPStream_POPODecKeyChallContent* pSrcValue, ASN1T_CMPStream_POPODecKeyChallContent* pDstValue);

EXTERN void asn1Free_CMPStream_POPODecKeyChallContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_POPODecKeyChallContent* pvalue);

/**************************************************************/
/*                                                            */
/*  POPODecKeyRespContent                                     */
/*                                                            */
/**************************************************************/

/* List of OSINT32 */
typedef struct EXTERN ASN1T_CMPStream_POPODecKeyRespContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_POPODecKeyRespContent();
} ASN1T_CMPStream_POPODecKeyRespContent;

class EXTERN ASN1C_CMPStream_POPODecKeyRespContent :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_POPODecKeyRespContent& msgData;
public:
   ASN1C_CMPStream_POPODecKeyRespContent (ASN1T_CMPStream_POPODecKeyRespContent& data);
   ASN1C_CMPStream_POPODecKeyRespContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_POPODecKeyRespContent& data);
   ASN1C_CMPStream_POPODecKeyRespContent (ASN1C_CMPStream_POPODecKeyRespContent& original);

   inline ASN1T_CMPStream_POPODecKeyRespContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_POPODecKeyRespContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_POPODecKeyRespContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_POPODecKeyRespContent& getCopy (ASN1T_CMPStream_POPODecKeyRespContent* pDstData = 0);
   ASN1T_CMPStream_POPODecKeyRespContent* newCopy ();

   ASN1C_CMPStream_POPODecKeyRespContent& operator= (ASN1C_CMPStream_POPODecKeyRespContent& srcData);
   void Append (OSINT32 *elem);
   OSINT32 *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_POPODecKeyRespContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_POPODecKeyRespContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_POPODecKeyRespContent
   (const char* name, ASN1T_CMPStream_POPODecKeyRespContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_POPODecKeyRespContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_POPODecKeyRespContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_POPODecKeyRespContent (ASN1ConstCharPtr name, ASN1T_CMPStream_POPODecKeyRespContent* pValue, ASN1T_CMPStream_POPODecKeyRespContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_POPODecKeyRespContent (ASN1CTXT *pctxt, ASN1T_CMPStream_POPODecKeyRespContent* pSrcValue, ASN1T_CMPStream_POPODecKeyRespContent* pDstValue);

EXTERN void asn1Free_CMPStream_POPODecKeyRespContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_POPODecKeyRespContent* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyRecRepContent_caCerts                                  */
/*                                                            */
/**************************************************************/

#define TV_CMPStream_KeyRecRepContent_caCerts	(TM_CTXT|TM_CONS|1)

/* List of ASN1T_CMPStream_CMPCertificate */
typedef struct EXTERN ASN1T_CMPStream_KeyRecRepContent_caCerts : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_KeyRecRepContent_caCerts();
} ASN1T_CMPStream_KeyRecRepContent_caCerts;

class EXTERN ASN1C_CMPStream_KeyRecRepContent_caCerts :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_KeyRecRepContent_caCerts& msgData;
public:
   ASN1C_CMPStream_KeyRecRepContent_caCerts (ASN1T_CMPStream_KeyRecRepContent_caCerts& data);
   ASN1C_CMPStream_KeyRecRepContent_caCerts (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_KeyRecRepContent_caCerts& data);
   ASN1C_CMPStream_KeyRecRepContent_caCerts (ASN1C_CMPStream_KeyRecRepContent_caCerts& original);

   inline ASN1T_CMPStream_KeyRecRepContent_caCerts& getData () { return msgData; }
   inline const ASN1T_CMPStream_KeyRecRepContent_caCerts& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_KeyRecRepContent_caCerts* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_KeyRecRepContent_caCerts& getCopy (ASN1T_CMPStream_KeyRecRepContent_caCerts* pDstData = 0);
   ASN1T_CMPStream_KeyRecRepContent_caCerts* newCopy ();

   ASN1C_CMPStream_KeyRecRepContent_caCerts& operator= (ASN1C_CMPStream_KeyRecRepContent_caCerts& srcData);
   void Append (ASN1T_CMPStream_CMPCertificate *elem);
   ASN1T_CMPStream_CMPCertificate *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_KeyRecRepContent_caCerts (ASN1CTXT* pctxt,
   ASN1T_CMPStream_KeyRecRepContent_caCerts *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_KeyRecRepContent_caCerts
   (const char* name, ASN1T_CMPStream_KeyRecRepContent_caCerts* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_KeyRecRepContent_caCerts
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_KeyRecRepContent_caCerts* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_KeyRecRepContent_caCerts (ASN1ConstCharPtr name, ASN1T_CMPStream_KeyRecRepContent_caCerts* pValue, ASN1T_CMPStream_KeyRecRepContent_caCerts* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_KeyRecRepContent_caCerts (ASN1CTXT *pctxt, ASN1T_CMPStream_KeyRecRepContent_caCerts* pSrcValue, ASN1T_CMPStream_KeyRecRepContent_caCerts* pDstValue);

EXTERN void asn1Free_CMPStream_KeyRecRepContent_caCerts
   (ASN1CTXT *pctxt, ASN1T_CMPStream_KeyRecRepContent_caCerts* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyRecRepContent_keyPairHist                              */
/*                                                            */
/**************************************************************/

#define TV_CMPStream_KeyRecRepContent_keyPairHist	(TM_CTXT|TM_CONS|2)

/* List of ASN1T_CMPStream_CertifiedKeyPair */
typedef struct EXTERN ASN1T_CMPStream_KeyRecRepContent_keyPairHist : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_KeyRecRepContent_keyPairHist();
} ASN1T_CMPStream_KeyRecRepContent_keyPairHist;

class EXTERN ASN1C_CMPStream_KeyRecRepContent_keyPairHist :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_KeyRecRepContent_keyPairHist& msgData;
public:
   ASN1C_CMPStream_KeyRecRepContent_keyPairHist (ASN1T_CMPStream_KeyRecRepContent_keyPairHist& data);
   ASN1C_CMPStream_KeyRecRepContent_keyPairHist (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_KeyRecRepContent_keyPairHist& data);
   ASN1C_CMPStream_KeyRecRepContent_keyPairHist (ASN1C_CMPStream_KeyRecRepContent_keyPairHist& original);

   inline ASN1T_CMPStream_KeyRecRepContent_keyPairHist& getData () { return msgData; }
   inline const ASN1T_CMPStream_KeyRecRepContent_keyPairHist& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_KeyRecRepContent_keyPairHist& getCopy (ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pDstData = 0);
   ASN1T_CMPStream_KeyRecRepContent_keyPairHist* newCopy ();

   ASN1C_CMPStream_KeyRecRepContent_keyPairHist& operator= (ASN1C_CMPStream_KeyRecRepContent_keyPairHist& srcData);
   void Append (ASN1T_CMPStream_CertifiedKeyPair *elem);
   ASN1T_CMPStream_CertifiedKeyPair *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_KeyRecRepContent_keyPairHist (ASN1CTXT* pctxt,
   ASN1T_CMPStream_KeyRecRepContent_keyPairHist *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_KeyRecRepContent_keyPairHist
   (const char* name, ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_KeyRecRepContent_keyPairHist
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_KeyRecRepContent_keyPairHist (ASN1ConstCharPtr name, ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pValue, ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_KeyRecRepContent_keyPairHist (ASN1CTXT *pctxt, ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pSrcValue, ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pDstValue);

EXTERN void asn1Free_CMPStream_KeyRecRepContent_keyPairHist
   (ASN1CTXT *pctxt, ASN1T_CMPStream_KeyRecRepContent_keyPairHist* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyRecRepContent                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_KeyRecRepContent;

struct EXTERN ASN1T_CMPStream_KeyRecRepContent : public ASN1TPDU {
   struct {
      unsigned newSigCertPresent : 1;
      unsigned caCertsPresent : 1;
      unsigned keyPairHistPresent : 1;
   } m;
   ASN1T_CMPStream_PKIStatusInfo status;
   ASN1T_CMPStream_CMPCertificate newSigCert;
   ASN1T_CMPStream_KeyRecRepContent_caCerts caCerts;
   ASN1T_CMPStream_KeyRecRepContent_keyPairHist keyPairHist;
   ASN1T_CMPStream_KeyRecRepContent ();
   ASN1T_CMPStream_KeyRecRepContent (ASN1C_CMPStream_KeyRecRepContent& srcData);
   ~ASN1T_CMPStream_KeyRecRepContent ();
} ;

class EXTERN ASN1C_CMPStream_KeyRecRepContent :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_KeyRecRepContent& msgData;
public:
   ASN1C_CMPStream_KeyRecRepContent (ASN1T_CMPStream_KeyRecRepContent& data);
   ASN1C_CMPStream_KeyRecRepContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_KeyRecRepContent& data);
   ASN1C_CMPStream_KeyRecRepContent (ASN1C_CMPStream_KeyRecRepContent& original);

   inline ASN1T_CMPStream_KeyRecRepContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_KeyRecRepContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_KeyRecRepContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_KeyRecRepContent& getCopy (ASN1T_CMPStream_KeyRecRepContent* pDstData = 0);
   ASN1T_CMPStream_KeyRecRepContent* newCopy ();

   inline ASN1C_CMPStream_KeyRecRepContent& operator= (ASN1C_CMPStream_KeyRecRepContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_KeyRecRepContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_KeyRecRepContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_KeyRecRepContent
   (const char* name, ASN1T_CMPStream_KeyRecRepContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_KeyRecRepContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_KeyRecRepContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_KeyRecRepContent (ASN1ConstCharPtr name, ASN1T_CMPStream_KeyRecRepContent* pValue, ASN1T_CMPStream_KeyRecRepContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_KeyRecRepContent (ASN1CTXT *pctxt, ASN1T_CMPStream_KeyRecRepContent* pSrcValue, ASN1T_CMPStream_KeyRecRepContent* pDstValue);

EXTERN void asn1Free_CMPStream_KeyRecRepContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_KeyRecRepContent* pvalue);

/**************************************************************/
/*                                                            */
/*  RevDetails                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_RevDetails;

struct EXTERN ASN1T_CMPStream_RevDetails : public ASN1TPDU {
   struct {
      unsigned crlEntryDetailsPresent : 1;
   } m;
   ASN1T_CRMFStream_CertTemplate certDetails;
   ASN1T_EXPStream_Extensions crlEntryDetails;
   ASN1T_CMPStream_RevDetails ();
   ASN1T_CMPStream_RevDetails (ASN1C_CMPStream_RevDetails& srcData);
   ~ASN1T_CMPStream_RevDetails ();
} ;

class EXTERN ASN1C_CMPStream_RevDetails :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_RevDetails& msgData;
public:
   ASN1C_CMPStream_RevDetails (ASN1T_CMPStream_RevDetails& data);
   ASN1C_CMPStream_RevDetails (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_RevDetails& data);
   ASN1C_CMPStream_RevDetails (ASN1C_CMPStream_RevDetails& original);

   inline ASN1T_CMPStream_RevDetails& getData () { return msgData; }
   inline const ASN1T_CMPStream_RevDetails& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_RevDetails* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_RevDetails& getCopy (ASN1T_CMPStream_RevDetails* pDstData = 0);
   ASN1T_CMPStream_RevDetails* newCopy ();

   inline ASN1C_CMPStream_RevDetails& operator= (ASN1C_CMPStream_RevDetails& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_RevDetails (ASN1CTXT* pctxt,
   ASN1T_CMPStream_RevDetails *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_RevDetails
   (const char* name, ASN1T_CMPStream_RevDetails* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_RevDetails
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_RevDetails* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_RevDetails (ASN1ConstCharPtr name, ASN1T_CMPStream_RevDetails* pValue, ASN1T_CMPStream_RevDetails* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_RevDetails (ASN1CTXT *pctxt, ASN1T_CMPStream_RevDetails* pSrcValue, ASN1T_CMPStream_RevDetails* pDstValue);

EXTERN void asn1Free_CMPStream_RevDetails
   (ASN1CTXT *pctxt, ASN1T_CMPStream_RevDetails* pvalue);

/**************************************************************/
/*                                                            */
/*  RevReqContent                                             */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMPStream_RevDetails */
typedef struct EXTERN ASN1T_CMPStream_RevReqContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_RevReqContent();
} ASN1T_CMPStream_RevReqContent;

class EXTERN ASN1C_CMPStream_RevReqContent :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_RevReqContent& msgData;
public:
   ASN1C_CMPStream_RevReqContent (ASN1T_CMPStream_RevReqContent& data);
   ASN1C_CMPStream_RevReqContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_RevReqContent& data);
   ASN1C_CMPStream_RevReqContent (ASN1C_CMPStream_RevReqContent& original);

   inline ASN1T_CMPStream_RevReqContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_RevReqContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_RevReqContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_RevReqContent& getCopy (ASN1T_CMPStream_RevReqContent* pDstData = 0);
   ASN1T_CMPStream_RevReqContent* newCopy ();

   ASN1C_CMPStream_RevReqContent& operator= (ASN1C_CMPStream_RevReqContent& srcData);
   void Append (ASN1T_CMPStream_RevDetails *elem);
   ASN1T_CMPStream_RevDetails *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_RevReqContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_RevReqContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_RevReqContent
   (const char* name, ASN1T_CMPStream_RevReqContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_RevReqContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_RevReqContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_RevReqContent (ASN1ConstCharPtr name, ASN1T_CMPStream_RevReqContent* pValue, ASN1T_CMPStream_RevReqContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_RevReqContent (ASN1CTXT *pctxt, ASN1T_CMPStream_RevReqContent* pSrcValue, ASN1T_CMPStream_RevReqContent* pDstValue);

EXTERN void asn1Free_CMPStream_RevReqContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_RevReqContent* pvalue);

/**************************************************************/
/*                                                            */
/*  RevRepContent_status                                      */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMPStream_PKIStatusInfo */
typedef struct EXTERN ASN1T_CMPStream_RevRepContent_status : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_RevRepContent_status();
} ASN1T_CMPStream_RevRepContent_status;

class EXTERN ASN1C_CMPStream_RevRepContent_status :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_RevRepContent_status& msgData;
public:
   ASN1C_CMPStream_RevRepContent_status (ASN1T_CMPStream_RevRepContent_status& data);
   ASN1C_CMPStream_RevRepContent_status (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_RevRepContent_status& data);
   ASN1C_CMPStream_RevRepContent_status (ASN1C_CMPStream_RevRepContent_status& original);

   inline ASN1T_CMPStream_RevRepContent_status& getData () { return msgData; }
   inline const ASN1T_CMPStream_RevRepContent_status& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_RevRepContent_status* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_RevRepContent_status& getCopy (ASN1T_CMPStream_RevRepContent_status* pDstData = 0);
   ASN1T_CMPStream_RevRepContent_status* newCopy ();

   ASN1C_CMPStream_RevRepContent_status& operator= (ASN1C_CMPStream_RevRepContent_status& srcData);
   void Append (ASN1T_CMPStream_PKIStatusInfo *elem);
   ASN1T_CMPStream_PKIStatusInfo *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_RevRepContent_status (ASN1CTXT* pctxt,
   ASN1T_CMPStream_RevRepContent_status *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_RevRepContent_status
   (const char* name, ASN1T_CMPStream_RevRepContent_status* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_RevRepContent_status
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_RevRepContent_status* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_RevRepContent_status (ASN1ConstCharPtr name, ASN1T_CMPStream_RevRepContent_status* pValue, ASN1T_CMPStream_RevRepContent_status* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_RevRepContent_status (ASN1CTXT *pctxt, ASN1T_CMPStream_RevRepContent_status* pSrcValue, ASN1T_CMPStream_RevRepContent_status* pDstValue);

EXTERN void asn1Free_CMPStream_RevRepContent_status
   (ASN1CTXT *pctxt, ASN1T_CMPStream_RevRepContent_status* pvalue);

/**************************************************************/
/*                                                            */
/*  RevRepContent_revCerts                                    */
/*                                                            */
/**************************************************************/

#define TV_CMPStream_RevRepContent_revCerts	(TM_CTXT|TM_CONS|0)

/* List of ASN1T_CRMFStream_CertId */
typedef struct EXTERN ASN1T_CMPStream_RevRepContent_revCerts : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_RevRepContent_revCerts();
} ASN1T_CMPStream_RevRepContent_revCerts;

class EXTERN ASN1C_CMPStream_RevRepContent_revCerts :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_RevRepContent_revCerts& msgData;
public:
   ASN1C_CMPStream_RevRepContent_revCerts (ASN1T_CMPStream_RevRepContent_revCerts& data);
   ASN1C_CMPStream_RevRepContent_revCerts (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_RevRepContent_revCerts& data);
   ASN1C_CMPStream_RevRepContent_revCerts (ASN1C_CMPStream_RevRepContent_revCerts& original);

   inline ASN1T_CMPStream_RevRepContent_revCerts& getData () { return msgData; }
   inline const ASN1T_CMPStream_RevRepContent_revCerts& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_RevRepContent_revCerts* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_RevRepContent_revCerts& getCopy (ASN1T_CMPStream_RevRepContent_revCerts* pDstData = 0);
   ASN1T_CMPStream_RevRepContent_revCerts* newCopy ();

   ASN1C_CMPStream_RevRepContent_revCerts& operator= (ASN1C_CMPStream_RevRepContent_revCerts& srcData);
   void Append (ASN1T_CRMFStream_CertId *elem);
   ASN1T_CRMFStream_CertId *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_RevRepContent_revCerts (ASN1CTXT* pctxt,
   ASN1T_CMPStream_RevRepContent_revCerts *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_RevRepContent_revCerts
   (const char* name, ASN1T_CMPStream_RevRepContent_revCerts* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_RevRepContent_revCerts
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_RevRepContent_revCerts* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_RevRepContent_revCerts (ASN1ConstCharPtr name, ASN1T_CMPStream_RevRepContent_revCerts* pValue, ASN1T_CMPStream_RevRepContent_revCerts* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_RevRepContent_revCerts (ASN1CTXT *pctxt, ASN1T_CMPStream_RevRepContent_revCerts* pSrcValue, ASN1T_CMPStream_RevRepContent_revCerts* pDstValue);

EXTERN void asn1Free_CMPStream_RevRepContent_revCerts
   (ASN1CTXT *pctxt, ASN1T_CMPStream_RevRepContent_revCerts* pvalue);

/**************************************************************/
/*                                                            */
/*  RevRepContent_crls                                        */
/*                                                            */
/**************************************************************/

#define TV_CMPStream_RevRepContent_crls	(TM_CTXT|TM_CONS|1)

/* List of ASN1T_EXPStream_CertificateList */
typedef struct EXTERN ASN1T_CMPStream_RevRepContent_crls : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_RevRepContent_crls();
} ASN1T_CMPStream_RevRepContent_crls;

class EXTERN ASN1C_CMPStream_RevRepContent_crls :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_RevRepContent_crls& msgData;
public:
   ASN1C_CMPStream_RevRepContent_crls (ASN1T_CMPStream_RevRepContent_crls& data);
   ASN1C_CMPStream_RevRepContent_crls (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_RevRepContent_crls& data);
   ASN1C_CMPStream_RevRepContent_crls (ASN1C_CMPStream_RevRepContent_crls& original);

   inline ASN1T_CMPStream_RevRepContent_crls& getData () { return msgData; }
   inline const ASN1T_CMPStream_RevRepContent_crls& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_RevRepContent_crls* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_RevRepContent_crls& getCopy (ASN1T_CMPStream_RevRepContent_crls* pDstData = 0);
   ASN1T_CMPStream_RevRepContent_crls* newCopy ();

   ASN1C_CMPStream_RevRepContent_crls& operator= (ASN1C_CMPStream_RevRepContent_crls& srcData);
   void Append (ASN1T_EXPStream_CertificateList *elem);
   ASN1T_EXPStream_CertificateList *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_RevRepContent_crls (ASN1CTXT* pctxt,
   ASN1T_CMPStream_RevRepContent_crls *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_RevRepContent_crls
   (const char* name, ASN1T_CMPStream_RevRepContent_crls* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_RevRepContent_crls
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_RevRepContent_crls* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_RevRepContent_crls (ASN1ConstCharPtr name, ASN1T_CMPStream_RevRepContent_crls* pValue, ASN1T_CMPStream_RevRepContent_crls* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_RevRepContent_crls (ASN1CTXT *pctxt, ASN1T_CMPStream_RevRepContent_crls* pSrcValue, ASN1T_CMPStream_RevRepContent_crls* pDstValue);

EXTERN void asn1Free_CMPStream_RevRepContent_crls
   (ASN1CTXT *pctxt, ASN1T_CMPStream_RevRepContent_crls* pvalue);

/**************************************************************/
/*                                                            */
/*  RevRepContent                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_RevRepContent;

struct EXTERN ASN1T_CMPStream_RevRepContent : public ASN1TPDU {
   struct {
      unsigned revCertsPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_CMPStream_RevRepContent_status status;
   ASN1T_CMPStream_RevRepContent_revCerts revCerts;
   ASN1T_CMPStream_RevRepContent_crls crls;
   ASN1T_CMPStream_RevRepContent ();
   ASN1T_CMPStream_RevRepContent (ASN1C_CMPStream_RevRepContent& srcData);
   ~ASN1T_CMPStream_RevRepContent ();
} ;

class EXTERN ASN1C_CMPStream_RevRepContent :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_RevRepContent& msgData;
public:
   ASN1C_CMPStream_RevRepContent (ASN1T_CMPStream_RevRepContent& data);
   ASN1C_CMPStream_RevRepContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_RevRepContent& data);
   ASN1C_CMPStream_RevRepContent (ASN1C_CMPStream_RevRepContent& original);

   inline ASN1T_CMPStream_RevRepContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_RevRepContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_RevRepContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_RevRepContent& getCopy (ASN1T_CMPStream_RevRepContent* pDstData = 0);
   ASN1T_CMPStream_RevRepContent* newCopy ();

   inline ASN1C_CMPStream_RevRepContent& operator= (ASN1C_CMPStream_RevRepContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_RevRepContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_RevRepContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_RevRepContent
   (const char* name, ASN1T_CMPStream_RevRepContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_RevRepContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_RevRepContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_RevRepContent (ASN1ConstCharPtr name, ASN1T_CMPStream_RevRepContent* pValue, ASN1T_CMPStream_RevRepContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_RevRepContent (ASN1CTXT *pctxt, ASN1T_CMPStream_RevRepContent* pSrcValue, ASN1T_CMPStream_RevRepContent* pDstValue);

EXTERN void asn1Free_CMPStream_RevRepContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_RevRepContent* pvalue);

/**************************************************************/
/*                                                            */
/*  CAKeyUpdAnnContent                                        */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_CAKeyUpdAnnContent;

struct EXTERN ASN1T_CMPStream_CAKeyUpdAnnContent : public ASN1TPDU {
   ASN1T_CMPStream_CMPCertificate oldWithNew;
   ASN1T_CMPStream_CMPCertificate newWithOld;
   ASN1T_CMPStream_CMPCertificate newWithNew;
   ASN1T_CMPStream_CAKeyUpdAnnContent ();
   ASN1T_CMPStream_CAKeyUpdAnnContent (ASN1C_CMPStream_CAKeyUpdAnnContent& srcData);
   ~ASN1T_CMPStream_CAKeyUpdAnnContent ();
} ;

class EXTERN ASN1C_CMPStream_CAKeyUpdAnnContent :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_CAKeyUpdAnnContent& msgData;
public:
   ASN1C_CMPStream_CAKeyUpdAnnContent (ASN1T_CMPStream_CAKeyUpdAnnContent& data);
   ASN1C_CMPStream_CAKeyUpdAnnContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CAKeyUpdAnnContent& data);
   ASN1C_CMPStream_CAKeyUpdAnnContent (ASN1C_CMPStream_CAKeyUpdAnnContent& original);

   inline ASN1T_CMPStream_CAKeyUpdAnnContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_CAKeyUpdAnnContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CAKeyUpdAnnContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CAKeyUpdAnnContent& getCopy (ASN1T_CMPStream_CAKeyUpdAnnContent* pDstData = 0);
   ASN1T_CMPStream_CAKeyUpdAnnContent* newCopy ();

   inline ASN1C_CMPStream_CAKeyUpdAnnContent& operator= (ASN1C_CMPStream_CAKeyUpdAnnContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_CAKeyUpdAnnContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CAKeyUpdAnnContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CAKeyUpdAnnContent
   (const char* name, ASN1T_CMPStream_CAKeyUpdAnnContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CAKeyUpdAnnContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CAKeyUpdAnnContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CAKeyUpdAnnContent (ASN1ConstCharPtr name, ASN1T_CMPStream_CAKeyUpdAnnContent* pValue, ASN1T_CMPStream_CAKeyUpdAnnContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CAKeyUpdAnnContent (ASN1CTXT *pctxt, ASN1T_CMPStream_CAKeyUpdAnnContent* pSrcValue, ASN1T_CMPStream_CAKeyUpdAnnContent* pDstValue);

EXTERN void asn1Free_CMPStream_CAKeyUpdAnnContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CAKeyUpdAnnContent* pvalue);

/**************************************************************/
/*                                                            */
/*  CertAnnContent                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_CertAnnContent;

typedef ASN1T_CMPStream_CMPCertificate ASN1T_CMPStream_CertAnnContent;

class EXTERN ASN1C_CMPStream_CertAnnContent :
   public ASN1C_CMPStream_CMPCertificate
{
protected:
public:
   ASN1C_CMPStream_CertAnnContent (ASN1T_CMPStream_CertAnnContent& data);
   ASN1C_CMPStream_CertAnnContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CertAnnContent& data);
   ASN1C_CMPStream_CertAnnContent (ASN1C_CMPStream_CertAnnContent& original);

   inline ASN1T_CMPStream_CertAnnContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_CertAnnContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CertAnnContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CertAnnContent& getCopy (ASN1T_CMPStream_CertAnnContent* pDstData = 0);
   ASN1T_CMPStream_CertAnnContent* newCopy ();

   inline ASN1C_CMPStream_CertAnnContent& operator= (ASN1C_CMPStream_CertAnnContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_CertAnnContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CertAnnContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CertAnnContent
   (const char* name, ASN1T_CMPStream_CertAnnContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CertAnnContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CertAnnContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CertAnnContent (ASN1ConstCharPtr name, ASN1T_CMPStream_CertAnnContent* pValue, ASN1T_CMPStream_CertAnnContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CertAnnContent (ASN1CTXT *pctxt, ASN1T_CMPStream_CertAnnContent* pSrcValue, ASN1T_CMPStream_CertAnnContent* pDstValue);

EXTERN void asn1Free_CMPStream_CertAnnContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CertAnnContent* pvalue);

/**************************************************************/
/*                                                            */
/*  RevAnnContent                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_RevAnnContent;

struct EXTERN ASN1T_CMPStream_RevAnnContent : public ASN1TPDU {
   struct {
      unsigned crlDetailsPresent : 1;
   } m;
   ASN1T_CMPStream_PKIStatus status;
   ASN1T_CRMFStream_CertId certId;
   ASN1GeneralizedTime willBeRevokedAt;
   ASN1GeneralizedTime badSinceDate;
   ASN1T_EXPStream_Extensions crlDetails;
   ASN1T_CMPStream_RevAnnContent ();
   ASN1T_CMPStream_RevAnnContent (ASN1C_CMPStream_RevAnnContent& srcData);
   ~ASN1T_CMPStream_RevAnnContent ();
} ;

class EXTERN ASN1C_CMPStream_RevAnnContent :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_RevAnnContent& msgData;
public:
   ASN1C_CMPStream_RevAnnContent (ASN1T_CMPStream_RevAnnContent& data);
   ASN1C_CMPStream_RevAnnContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_RevAnnContent& data);
   ASN1C_CMPStream_RevAnnContent (ASN1C_CMPStream_RevAnnContent& original);

   inline ASN1T_CMPStream_RevAnnContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_RevAnnContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_RevAnnContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_RevAnnContent& getCopy (ASN1T_CMPStream_RevAnnContent* pDstData = 0);
   ASN1T_CMPStream_RevAnnContent* newCopy ();

   inline ASN1C_CMPStream_RevAnnContent& operator= (ASN1C_CMPStream_RevAnnContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_RevAnnContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_RevAnnContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_RevAnnContent
   (const char* name, ASN1T_CMPStream_RevAnnContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_RevAnnContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_RevAnnContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_RevAnnContent (ASN1ConstCharPtr name, ASN1T_CMPStream_RevAnnContent* pValue, ASN1T_CMPStream_RevAnnContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_RevAnnContent (ASN1CTXT *pctxt, ASN1T_CMPStream_RevAnnContent* pSrcValue, ASN1T_CMPStream_RevAnnContent* pDstValue);

EXTERN void asn1Free_CMPStream_RevAnnContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_RevAnnContent* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLAnnContent                                             */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_CertificateList */
typedef struct EXTERN ASN1T_CMPStream_CRLAnnContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_CRLAnnContent();
} ASN1T_CMPStream_CRLAnnContent;

class EXTERN ASN1C_CMPStream_CRLAnnContent :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_CRLAnnContent& msgData;
public:
   ASN1C_CMPStream_CRLAnnContent (ASN1T_CMPStream_CRLAnnContent& data);
   ASN1C_CMPStream_CRLAnnContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CRLAnnContent& data);
   ASN1C_CMPStream_CRLAnnContent (ASN1C_CMPStream_CRLAnnContent& original);

   inline ASN1T_CMPStream_CRLAnnContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_CRLAnnContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CRLAnnContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CRLAnnContent& getCopy (ASN1T_CMPStream_CRLAnnContent* pDstData = 0);
   ASN1T_CMPStream_CRLAnnContent* newCopy ();

   ASN1C_CMPStream_CRLAnnContent& operator= (ASN1C_CMPStream_CRLAnnContent& srcData);
   void Append (ASN1T_EXPStream_CertificateList *elem);
   ASN1T_EXPStream_CertificateList *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_CRLAnnContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CRLAnnContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CRLAnnContent
   (const char* name, ASN1T_CMPStream_CRLAnnContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CRLAnnContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CRLAnnContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CRLAnnContent (ASN1ConstCharPtr name, ASN1T_CMPStream_CRLAnnContent* pValue, ASN1T_CMPStream_CRLAnnContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CRLAnnContent (ASN1CTXT *pctxt, ASN1T_CMPStream_CRLAnnContent* pSrcValue, ASN1T_CMPStream_CRLAnnContent* pDstValue);

EXTERN void asn1Free_CMPStream_CRLAnnContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CRLAnnContent* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIConfirmContent                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_PKIConfirmContent :
   public ASN1CType
{
protected:
public:
   ASN1C_CMPStream_PKIConfirmContent ();
   ASN1C_CMPStream_PKIConfirmContent (
      ASN1MessageBufferIF& msgBuf);
   ASN1C_CMPStream_PKIConfirmContent (ASN1C_CMPStream_PKIConfirmContent& original);

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals ();

   inline ASN1C_CMPStream_PKIConfirmContent& operator= (ASN1C_CMPStream_PKIConfirmContent& srcData) {
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_PKIConfirmContent (ASN1CTXT* pctxt,
   ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIConfirmContent_
   (const char* name, void* pvalue);
#define asn1Print_CMPStream_PKIConfirmContent(name) \
asn1Print_CMPStream_PKIConfirmContent_(name, NULL)

EXTERN int asn1PrtToStrm_CMPStream_PKIConfirmContent_
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, void* pvalue);
#define asn1PrtToStrm_CMPStream_PKIConfirmContent(pctxt, name) \
asn1PrtToStrm_CMPStream_PKIConfirmContent_(pctxt, name, NULL)

EXTERN OSBOOL asn1Compare_CMPStream_PKIConfirmContent (ASN1ConstCharPtr name);

EXTERN void asn1Copy_CMPStream_PKIConfirmContent_ (ASN1CTXT *pctxt, void* pSrcValue, void* pDstValue);
#define asn1Copy_CMPStream_PKIConfirmContent(name) \
asn1Copy_CMPStream_PKIConfirmContent_(name, NULL, NULL)

/**************************************************************/
/*                                                            */
/*  GenMsgContent                                             */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMPStream_InfoTypeAndValue */
typedef struct EXTERN ASN1T_CMPStream_GenMsgContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_GenMsgContent();
} ASN1T_CMPStream_GenMsgContent;

class EXTERN ASN1C_CMPStream_GenMsgContent :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_GenMsgContent& msgData;
public:
   ASN1C_CMPStream_GenMsgContent (ASN1T_CMPStream_GenMsgContent& data);
   ASN1C_CMPStream_GenMsgContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_GenMsgContent& data);
   ASN1C_CMPStream_GenMsgContent (ASN1C_CMPStream_GenMsgContent& original);

   inline ASN1T_CMPStream_GenMsgContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_GenMsgContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_GenMsgContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_GenMsgContent& getCopy (ASN1T_CMPStream_GenMsgContent* pDstData = 0);
   ASN1T_CMPStream_GenMsgContent* newCopy ();

   ASN1C_CMPStream_GenMsgContent& operator= (ASN1C_CMPStream_GenMsgContent& srcData);
   void Append (ASN1T_CMPStream_InfoTypeAndValue *elem);
   ASN1T_CMPStream_InfoTypeAndValue *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_GenMsgContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_GenMsgContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_GenMsgContent
   (const char* name, ASN1T_CMPStream_GenMsgContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_GenMsgContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_GenMsgContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_GenMsgContent (ASN1ConstCharPtr name, ASN1T_CMPStream_GenMsgContent* pValue, ASN1T_CMPStream_GenMsgContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_GenMsgContent (ASN1CTXT *pctxt, ASN1T_CMPStream_GenMsgContent* pSrcValue, ASN1T_CMPStream_GenMsgContent* pDstValue);

EXTERN void asn1Free_CMPStream_GenMsgContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_GenMsgContent* pvalue);

/**************************************************************/
/*                                                            */
/*  GenRepContent                                             */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMPStream_InfoTypeAndValue */
typedef struct EXTERN ASN1T_CMPStream_GenRepContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_GenRepContent();
} ASN1T_CMPStream_GenRepContent;

class EXTERN ASN1C_CMPStream_GenRepContent :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_GenRepContent& msgData;
public:
   ASN1C_CMPStream_GenRepContent (ASN1T_CMPStream_GenRepContent& data);
   ASN1C_CMPStream_GenRepContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_GenRepContent& data);
   ASN1C_CMPStream_GenRepContent (ASN1C_CMPStream_GenRepContent& original);

   inline ASN1T_CMPStream_GenRepContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_GenRepContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_GenRepContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_GenRepContent& getCopy (ASN1T_CMPStream_GenRepContent* pDstData = 0);
   ASN1T_CMPStream_GenRepContent* newCopy ();

   ASN1C_CMPStream_GenRepContent& operator= (ASN1C_CMPStream_GenRepContent& srcData);
   void Append (ASN1T_CMPStream_InfoTypeAndValue *elem);
   ASN1T_CMPStream_InfoTypeAndValue *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_GenRepContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_GenRepContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_GenRepContent
   (const char* name, ASN1T_CMPStream_GenRepContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_GenRepContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_GenRepContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_GenRepContent (ASN1ConstCharPtr name, ASN1T_CMPStream_GenRepContent* pValue, ASN1T_CMPStream_GenRepContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_GenRepContent (ASN1CTXT *pctxt, ASN1T_CMPStream_GenRepContent* pSrcValue, ASN1T_CMPStream_GenRepContent* pDstValue);

EXTERN void asn1Free_CMPStream_GenRepContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_GenRepContent* pvalue);

/**************************************************************/
/*                                                            */
/*  ErrorMsgContent                                           */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_ErrorMsgContent;

struct EXTERN ASN1T_CMPStream_ErrorMsgContent : public ASN1TPDU {
   struct {
      unsigned errorCodePresent : 1;
      unsigned errorDetailsPresent : 1;
   } m;
   ASN1T_CMPStream_PKIStatusInfo pKIStatusInfo;
   OSINT32 errorCode;
   ASN1T_CMPStream_PKIFreeText errorDetails;
   ASN1T_CMPStream_ErrorMsgContent ();
   ASN1T_CMPStream_ErrorMsgContent (ASN1C_CMPStream_ErrorMsgContent& srcData);
   ~ASN1T_CMPStream_ErrorMsgContent ();
} ;

class EXTERN ASN1C_CMPStream_ErrorMsgContent :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_ErrorMsgContent& msgData;
public:
   ASN1C_CMPStream_ErrorMsgContent (ASN1T_CMPStream_ErrorMsgContent& data);
   ASN1C_CMPStream_ErrorMsgContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_ErrorMsgContent& data);
   ASN1C_CMPStream_ErrorMsgContent (ASN1C_CMPStream_ErrorMsgContent& original);

   inline ASN1T_CMPStream_ErrorMsgContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_ErrorMsgContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_ErrorMsgContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_ErrorMsgContent& getCopy (ASN1T_CMPStream_ErrorMsgContent* pDstData = 0);
   ASN1T_CMPStream_ErrorMsgContent* newCopy ();

   inline ASN1C_CMPStream_ErrorMsgContent& operator= (ASN1C_CMPStream_ErrorMsgContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_ErrorMsgContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_ErrorMsgContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_ErrorMsgContent
   (const char* name, ASN1T_CMPStream_ErrorMsgContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_ErrorMsgContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_ErrorMsgContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_ErrorMsgContent (ASN1ConstCharPtr name, ASN1T_CMPStream_ErrorMsgContent* pValue, ASN1T_CMPStream_ErrorMsgContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_ErrorMsgContent (ASN1CTXT *pctxt, ASN1T_CMPStream_ErrorMsgContent* pSrcValue, ASN1T_CMPStream_ErrorMsgContent* pDstValue);

EXTERN void asn1Free_CMPStream_ErrorMsgContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_ErrorMsgContent* pvalue);

/**************************************************************/
/*                                                            */
/*  CertStatus                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_CertStatus;

struct EXTERN ASN1T_CMPStream_CertStatus : public ASN1TPDU {
   struct {
      unsigned statusInfoPresent : 1;
   } m;
   ASN1TDynOctStr certHash;
   OSINT32 certReqId;
   ASN1T_CMPStream_PKIStatusInfo statusInfo;
   ASN1T_CMPStream_CertStatus ();
   ASN1T_CMPStream_CertStatus (ASN1C_CMPStream_CertStatus& srcData);
   ~ASN1T_CMPStream_CertStatus ();
} ;

class EXTERN ASN1C_CMPStream_CertStatus :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_CertStatus& msgData;
public:
   ASN1C_CMPStream_CertStatus (ASN1T_CMPStream_CertStatus& data);
   ASN1C_CMPStream_CertStatus (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CertStatus& data);
   ASN1C_CMPStream_CertStatus (ASN1C_CMPStream_CertStatus& original);

   inline ASN1T_CMPStream_CertStatus& getData () { return msgData; }
   inline const ASN1T_CMPStream_CertStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CertStatus* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CertStatus& getCopy (ASN1T_CMPStream_CertStatus* pDstData = 0);
   ASN1T_CMPStream_CertStatus* newCopy ();

   inline ASN1C_CMPStream_CertStatus& operator= (ASN1C_CMPStream_CertStatus& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_CertStatus (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CertStatus *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CertStatus
   (const char* name, ASN1T_CMPStream_CertStatus* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CertStatus
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CertStatus* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CertStatus (ASN1ConstCharPtr name, ASN1T_CMPStream_CertStatus* pValue, ASN1T_CMPStream_CertStatus* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CertStatus (ASN1CTXT *pctxt, ASN1T_CMPStream_CertStatus* pSrcValue, ASN1T_CMPStream_CertStatus* pDstValue);

EXTERN void asn1Free_CMPStream_CertStatus
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CertStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  CertConfirmContent                                        */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMPStream_CertStatus */
typedef struct EXTERN ASN1T_CMPStream_CertConfirmContent : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_CertConfirmContent();
} ASN1T_CMPStream_CertConfirmContent;

class EXTERN ASN1C_CMPStream_CertConfirmContent :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_CertConfirmContent& msgData;
public:
   ASN1C_CMPStream_CertConfirmContent (ASN1T_CMPStream_CertConfirmContent& data);
   ASN1C_CMPStream_CertConfirmContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_CertConfirmContent& data);
   ASN1C_CMPStream_CertConfirmContent (ASN1C_CMPStream_CertConfirmContent& original);

   inline ASN1T_CMPStream_CertConfirmContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_CertConfirmContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_CertConfirmContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_CertConfirmContent& getCopy (ASN1T_CMPStream_CertConfirmContent* pDstData = 0);
   ASN1T_CMPStream_CertConfirmContent* newCopy ();

   ASN1C_CMPStream_CertConfirmContent& operator= (ASN1C_CMPStream_CertConfirmContent& srcData);
   void Append (ASN1T_CMPStream_CertStatus *elem);
   ASN1T_CMPStream_CertStatus *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_CertConfirmContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_CertConfirmContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_CertConfirmContent
   (const char* name, ASN1T_CMPStream_CertConfirmContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_CertConfirmContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_CertConfirmContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_CertConfirmContent (ASN1ConstCharPtr name, ASN1T_CMPStream_CertConfirmContent* pValue, ASN1T_CMPStream_CertConfirmContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_CertConfirmContent (ASN1CTXT *pctxt, ASN1T_CMPStream_CertConfirmContent* pSrcValue, ASN1T_CMPStream_CertConfirmContent* pDstValue);

EXTERN void asn1Free_CMPStream_CertConfirmContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_CertConfirmContent* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIBody                                                   */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMPStream_PKIBody_ir          1
#define T_CMPStream_PKIBody_ip          2
#define T_CMPStream_PKIBody_cr          3
#define T_CMPStream_PKIBody_cp          4
#define T_CMPStream_PKIBody_p10cr       5
#define T_CMPStream_PKIBody_popdecc     6
#define T_CMPStream_PKIBody_popdecr     7
#define T_CMPStream_PKIBody_kur         8
#define T_CMPStream_PKIBody_kup         9
#define T_CMPStream_PKIBody_krr         10
#define T_CMPStream_PKIBody_krp         11
#define T_CMPStream_PKIBody_rr          12
#define T_CMPStream_PKIBody_rp          13
#define T_CMPStream_PKIBody_ccr         14
#define T_CMPStream_PKIBody_ccp         15
#define T_CMPStream_PKIBody_ckuann      16
#define T_CMPStream_PKIBody_cann        17
#define T_CMPStream_PKIBody_rann        18
#define T_CMPStream_PKIBody_crlann      19
#define T_CMPStream_PKIBody_pkiconf     20
#define T_CMPStream_PKIBody_nested      21
#define T_CMPStream_PKIBody_genm        22
#define T_CMPStream_PKIBody_genp        23
#define T_CMPStream_PKIBody_error       24
#define T_CMPStream_PKIBody_certConf    25

class EXTERN ASN1C_CMPStream_PKIBody;

struct EXTERN ASN1T_CMPStream_PKIBody : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_CRMFStream_CertReqMessages *ir;
      /* t = 2 */
      ASN1T_CMPStream_CertRepMessage *ip;
      /* t = 3 */
      ASN1T_CRMFStream_CertReqMessages *cr;
      /* t = 4 */
      ASN1T_CMPStream_CertRepMessage *cp;
      /* t = 5 */
      ASN1T_PKCS10Stream_CertificationRequest *p10cr;
      /* t = 6 */
      ASN1T_CMPStream_POPODecKeyChallContent *popdecc;
      /* t = 7 */
      ASN1T_CMPStream_POPODecKeyRespContent *popdecr;
      /* t = 8 */
      ASN1T_CRMFStream_CertReqMessages *kur;
      /* t = 9 */
      ASN1T_CMPStream_CertRepMessage *kup;
      /* t = 10 */
      ASN1T_CRMFStream_CertReqMessages *krr;
      /* t = 11 */
      ASN1T_CMPStream_KeyRecRepContent *krp;
      /* t = 12 */
      ASN1T_CMPStream_RevReqContent *rr;
      /* t = 13 */
      ASN1T_CMPStream_RevRepContent *rp;
      /* t = 14 */
      ASN1T_CRMFStream_CertReqMessages *ccr;
      /* t = 15 */
      ASN1T_CMPStream_CertRepMessage *ccp;
      /* t = 16 */
      ASN1T_CMPStream_CAKeyUpdAnnContent *ckuann;
      /* t = 17 */
      ASN1T_CMPStream_CertAnnContent *cann;
      /* t = 18 */
      ASN1T_CMPStream_RevAnnContent *rann;
      /* t = 19 */
      ASN1T_CMPStream_CRLAnnContent *crlann;
      /* t = 20 */
      /* t = 21 */
      ASN1TSeqOfList *nested;
      /* t = 22 */
      ASN1T_CMPStream_GenMsgContent *genm;
      /* t = 23 */
      ASN1T_CMPStream_GenRepContent *genp;
      /* t = 24 */
      ASN1T_CMPStream_ErrorMsgContent *error;
      /* t = 25 */
      ASN1T_CMPStream_CertConfirmContent *certConf;
   } u;
   ASN1T_CMPStream_PKIBody () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMPStream_PKIBody (ASN1C_CMPStream_PKIBody& srcData);
   ~ASN1T_CMPStream_PKIBody ();
} ;

class EXTERN ASN1C_CMPStream_PKIBody :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_PKIBody& msgData;
public:
   ASN1C_CMPStream_PKIBody (ASN1T_CMPStream_PKIBody& data);
   ASN1C_CMPStream_PKIBody (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIBody& data);
   ASN1C_CMPStream_PKIBody (ASN1C_CMPStream_PKIBody& original);

   inline ASN1T_CMPStream_PKIBody& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIBody& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIBody* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIBody& getCopy (ASN1T_CMPStream_PKIBody* pDstData = 0);
   ASN1T_CMPStream_PKIBody* newCopy ();

   inline ASN1C_CMPStream_PKIBody& operator= (ASN1C_CMPStream_PKIBody& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_PKIBody (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIBody *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIBody
   (const char* name, ASN1T_CMPStream_PKIBody* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIBody
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIBody* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIBody (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIBody* pValue, ASN1T_CMPStream_PKIBody* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIBody (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIBody* pSrcValue, ASN1T_CMPStream_PKIBody* pDstValue);

EXTERN void asn1Free_CMPStream_PKIBody
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIBody* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIMessage_extraCerts                                     */
/*                                                            */
/**************************************************************/

#define TV_CMPStream_PKIMessage_extraCerts	(TM_CTXT|TM_CONS|1)

/* List of ASN1T_CMPStream_CMPCertificate */
typedef struct EXTERN ASN1T_CMPStream_PKIMessage_extraCerts : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_PKIMessage_extraCerts();
} ASN1T_CMPStream_PKIMessage_extraCerts;

class EXTERN ASN1C_CMPStream_PKIMessage_extraCerts :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_PKIMessage_extraCerts& msgData;
public:
   ASN1C_CMPStream_PKIMessage_extraCerts (ASN1T_CMPStream_PKIMessage_extraCerts& data);
   ASN1C_CMPStream_PKIMessage_extraCerts (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIMessage_extraCerts& data);
   ASN1C_CMPStream_PKIMessage_extraCerts (ASN1C_CMPStream_PKIMessage_extraCerts& original);

   inline ASN1T_CMPStream_PKIMessage_extraCerts& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIMessage_extraCerts& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIMessage_extraCerts* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIMessage_extraCerts& getCopy (ASN1T_CMPStream_PKIMessage_extraCerts* pDstData = 0);
   ASN1T_CMPStream_PKIMessage_extraCerts* newCopy ();

   ASN1C_CMPStream_PKIMessage_extraCerts& operator= (ASN1C_CMPStream_PKIMessage_extraCerts& srcData);
   void Append (ASN1T_CMPStream_CMPCertificate *elem);
   ASN1T_CMPStream_CMPCertificate *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_PKIMessage_extraCerts (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIMessage_extraCerts *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIMessage_extraCerts
   (const char* name, ASN1T_CMPStream_PKIMessage_extraCerts* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIMessage_extraCerts
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIMessage_extraCerts* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIMessage_extraCerts (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIMessage_extraCerts* pValue, ASN1T_CMPStream_PKIMessage_extraCerts* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIMessage_extraCerts (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIMessage_extraCerts* pSrcValue, ASN1T_CMPStream_PKIMessage_extraCerts* pDstValue);

EXTERN void asn1Free_CMPStream_PKIMessage_extraCerts
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIMessage_extraCerts* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIMessage                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_PKIMessage;

struct EXTERN ASN1T_CMPStream_PKIMessage : public ASN1TPDU {
   struct {
      unsigned protectionPresent : 1;
      unsigned extraCertsPresent : 1;
   } m;
   ASN1T_CMPStream_PKIHeader header;
   ASN1T_CMPStream_PKIBody body;
   ASN1T_CMPStream_PKIProtection protection;
   ASN1T_CMPStream_PKIMessage_extraCerts extraCerts;
   ASN1T_CMPStream_PKIMessage ();
   ASN1T_CMPStream_PKIMessage (ASN1C_CMPStream_PKIMessage& srcData);
   ~ASN1T_CMPStream_PKIMessage ();
} ;

class EXTERN ASN1C_CMPStream_PKIMessage :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_PKIMessage& msgData;
public:
   ASN1C_CMPStream_PKIMessage (ASN1T_CMPStream_PKIMessage& data);
   ASN1C_CMPStream_PKIMessage (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIMessage& data);
   ASN1C_CMPStream_PKIMessage (ASN1C_CMPStream_PKIMessage& original);

   inline ASN1T_CMPStream_PKIMessage& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIMessage& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIMessage* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIMessage& getCopy (ASN1T_CMPStream_PKIMessage* pDstData = 0);
   ASN1T_CMPStream_PKIMessage* newCopy ();

   inline ASN1C_CMPStream_PKIMessage& operator= (ASN1C_CMPStream_PKIMessage& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_PKIMessage (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIMessage *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIMessage
   (const char* name, ASN1T_CMPStream_PKIMessage* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIMessage
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIMessage* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIMessage (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIMessage* pValue, ASN1T_CMPStream_PKIMessage* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIMessage (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIMessage* pSrcValue, ASN1T_CMPStream_PKIMessage* pDstValue);

EXTERN void asn1Free_CMPStream_PKIMessage
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIMessages                                               */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMPStream_PKIMessage */
typedef struct EXTERN ASN1T_CMPStream_PKIMessages : public ASN1TPDUSeqOfList {
   ~ASN1T_CMPStream_PKIMessages();
} ASN1T_CMPStream_PKIMessages;

class EXTERN ASN1C_CMPStream_PKIMessages :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMPStream_PKIMessages& msgData;
public:
   ASN1C_CMPStream_PKIMessages (ASN1T_CMPStream_PKIMessages& data);
   ASN1C_CMPStream_PKIMessages (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PKIMessages& data);
   ASN1C_CMPStream_PKIMessages (ASN1C_CMPStream_PKIMessages& original);

   inline ASN1T_CMPStream_PKIMessages& getData () { return msgData; }
   inline const ASN1T_CMPStream_PKIMessages& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PKIMessages* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PKIMessages& getCopy (ASN1T_CMPStream_PKIMessages* pDstData = 0);
   ASN1T_CMPStream_PKIMessages* newCopy ();

   ASN1C_CMPStream_PKIMessages& operator= (ASN1C_CMPStream_PKIMessages& srcData);
   void Append (ASN1T_CMPStream_PKIMessage *elem);
   ASN1T_CMPStream_PKIMessage *NewElement ();
} ;

EXTERN int asn1BSD_CMPStream_PKIMessages (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PKIMessages *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PKIMessages
   (const char* name, ASN1T_CMPStream_PKIMessages* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PKIMessages
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PKIMessages* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PKIMessages (ASN1ConstCharPtr name, ASN1T_CMPStream_PKIMessages* pValue, ASN1T_CMPStream_PKIMessages* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PKIMessages (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIMessages* pSrcValue, ASN1T_CMPStream_PKIMessages* pDstValue);

EXTERN void asn1Free_CMPStream_PKIMessages
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PKIMessages* pvalue);

/**************************************************************/
/*                                                            */
/*  NestedMessageContent                                      */
/*                                                            */
/**************************************************************/

typedef ASN1T_CMPStream_PKIMessages ASN1T_CMPStream_NestedMessageContent;

class EXTERN ASN1C_CMPStream_NestedMessageContent :
   public ASN1C_CMPStream_PKIMessages
{
protected:
public:
   ASN1C_CMPStream_NestedMessageContent (ASN1T_CMPStream_NestedMessageContent& data);
   ASN1C_CMPStream_NestedMessageContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_NestedMessageContent& data);
   ASN1C_CMPStream_NestedMessageContent (ASN1C_CMPStream_NestedMessageContent& original);

   inline ASN1T_CMPStream_NestedMessageContent& getData () { return msgData; }
   inline const ASN1T_CMPStream_NestedMessageContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_NestedMessageContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_NestedMessageContent& getCopy (ASN1T_CMPStream_NestedMessageContent* pDstData = 0);
   ASN1T_CMPStream_NestedMessageContent* newCopy ();

   inline ASN1C_CMPStream_NestedMessageContent& operator= (ASN1C_CMPStream_NestedMessageContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_NestedMessageContent (ASN1CTXT* pctxt,
   ASN1T_CMPStream_NestedMessageContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_NestedMessageContent
   (const char* name, ASN1T_CMPStream_NestedMessageContent* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_NestedMessageContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_NestedMessageContent* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_NestedMessageContent (ASN1ConstCharPtr name, ASN1T_CMPStream_NestedMessageContent* pValue, ASN1T_CMPStream_NestedMessageContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_NestedMessageContent (ASN1CTXT *pctxt, ASN1T_CMPStream_NestedMessageContent* pSrcValue, ASN1T_CMPStream_NestedMessageContent* pDstValue);

EXTERN void asn1Free_CMPStream_NestedMessageContent
   (ASN1CTXT *pctxt, ASN1T_CMPStream_NestedMessageContent* pvalue);

/**************************************************************/
/*                                                            */
/*  OOBCert                                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_OOBCert;

typedef ASN1T_CMPStream_CMPCertificate ASN1T_CMPStream_OOBCert;

class EXTERN ASN1C_CMPStream_OOBCert :
   public ASN1C_CMPStream_CMPCertificate
{
protected:
public:
   ASN1C_CMPStream_OOBCert (ASN1T_CMPStream_OOBCert& data);
   ASN1C_CMPStream_OOBCert (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_OOBCert& data);
   ASN1C_CMPStream_OOBCert (ASN1C_CMPStream_OOBCert& original);

   inline ASN1T_CMPStream_OOBCert& getData () { return msgData; }
   inline const ASN1T_CMPStream_OOBCert& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_OOBCert* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_OOBCert& getCopy (ASN1T_CMPStream_OOBCert* pDstData = 0);
   ASN1T_CMPStream_OOBCert* newCopy ();

   inline ASN1C_CMPStream_OOBCert& operator= (ASN1C_CMPStream_OOBCert& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_OOBCert (ASN1CTXT* pctxt,
   ASN1T_CMPStream_OOBCert *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_OOBCert
   (const char* name, ASN1T_CMPStream_OOBCert* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_OOBCert
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_OOBCert* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_OOBCert (ASN1ConstCharPtr name, ASN1T_CMPStream_OOBCert* pValue, ASN1T_CMPStream_OOBCert* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_OOBCert (ASN1CTXT *pctxt, ASN1T_CMPStream_OOBCert* pSrcValue, ASN1T_CMPStream_OOBCert* pDstValue);

EXTERN void asn1Free_CMPStream_OOBCert
   (ASN1CTXT *pctxt, ASN1T_CMPStream_OOBCert* pvalue);

/**************************************************************/
/*                                                            */
/*  ProtectedPart                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_ProtectedPart;

struct EXTERN ASN1T_CMPStream_ProtectedPart : public ASN1TPDU {
   ASN1T_CMPStream_PKIHeader header;
   ASN1T_CMPStream_PKIBody body;
   ASN1T_CMPStream_ProtectedPart ();
   ASN1T_CMPStream_ProtectedPart (ASN1C_CMPStream_ProtectedPart& srcData);
   ~ASN1T_CMPStream_ProtectedPart ();
} ;

class EXTERN ASN1C_CMPStream_ProtectedPart :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_ProtectedPart& msgData;
public:
   ASN1C_CMPStream_ProtectedPart (ASN1T_CMPStream_ProtectedPart& data);
   ASN1C_CMPStream_ProtectedPart (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_ProtectedPart& data);
   ASN1C_CMPStream_ProtectedPart (ASN1C_CMPStream_ProtectedPart& original);

   inline ASN1T_CMPStream_ProtectedPart& getData () { return msgData; }
   inline const ASN1T_CMPStream_ProtectedPart& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_ProtectedPart* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_ProtectedPart& getCopy (ASN1T_CMPStream_ProtectedPart* pDstData = 0);
   ASN1T_CMPStream_ProtectedPart* newCopy ();

   inline ASN1C_CMPStream_ProtectedPart& operator= (ASN1C_CMPStream_ProtectedPart& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_ProtectedPart (ASN1CTXT* pctxt,
   ASN1T_CMPStream_ProtectedPart *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_ProtectedPart
   (const char* name, ASN1T_CMPStream_ProtectedPart* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_ProtectedPart
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_ProtectedPart* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_ProtectedPart (ASN1ConstCharPtr name, ASN1T_CMPStream_ProtectedPart* pValue, ASN1T_CMPStream_ProtectedPart* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_ProtectedPart (ASN1CTXT *pctxt, ASN1T_CMPStream_ProtectedPart* pSrcValue, ASN1T_CMPStream_ProtectedPart* pDstValue);

EXTERN void asn1Free_CMPStream_ProtectedPart
   (ASN1CTXT *pctxt, ASN1T_CMPStream_ProtectedPart* pvalue);

/**************************************************************/
/*                                                            */
/*  PBMParameter                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_PBMParameter;

struct EXTERN ASN1T_CMPStream_PBMParameter : public ASN1TPDU {
   ASN1TDynOctStr salt;
   ASN1T_EXPStream_AlgorithmIdentifier owf;
   OSINT32 iterationCount;
   ASN1T_EXPStream_AlgorithmIdentifier mac;
   ASN1T_CMPStream_PBMParameter ();
   ASN1T_CMPStream_PBMParameter (ASN1C_CMPStream_PBMParameter& srcData);
   ~ASN1T_CMPStream_PBMParameter ();
} ;

class EXTERN ASN1C_CMPStream_PBMParameter :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_PBMParameter& msgData;
public:
   ASN1C_CMPStream_PBMParameter (ASN1T_CMPStream_PBMParameter& data);
   ASN1C_CMPStream_PBMParameter (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_PBMParameter& data);
   ASN1C_CMPStream_PBMParameter (ASN1C_CMPStream_PBMParameter& original);

   inline ASN1T_CMPStream_PBMParameter& getData () { return msgData; }
   inline const ASN1T_CMPStream_PBMParameter& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_PBMParameter* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_PBMParameter& getCopy (ASN1T_CMPStream_PBMParameter* pDstData = 0);
   ASN1T_CMPStream_PBMParameter* newCopy ();

   inline ASN1C_CMPStream_PBMParameter& operator= (ASN1C_CMPStream_PBMParameter& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_PBMParameter (ASN1CTXT* pctxt,
   ASN1T_CMPStream_PBMParameter *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_PBMParameter
   (const char* name, ASN1T_CMPStream_PBMParameter* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_PBMParameter
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_PBMParameter* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_PBMParameter (ASN1ConstCharPtr name, ASN1T_CMPStream_PBMParameter* pValue, ASN1T_CMPStream_PBMParameter* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_PBMParameter (ASN1CTXT *pctxt, ASN1T_CMPStream_PBMParameter* pSrcValue, ASN1T_CMPStream_PBMParameter* pDstValue);

EXTERN void asn1Free_CMPStream_PBMParameter
   (ASN1CTXT *pctxt, ASN1T_CMPStream_PBMParameter* pvalue);

/**************************************************************/
/*                                                            */
/*  DHBMParameter                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_DHBMParameter;

struct EXTERN ASN1T_CMPStream_DHBMParameter : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier owf;
   ASN1T_EXPStream_AlgorithmIdentifier mac;
   ASN1T_CMPStream_DHBMParameter ();
   ASN1T_CMPStream_DHBMParameter (ASN1C_CMPStream_DHBMParameter& srcData);
   ~ASN1T_CMPStream_DHBMParameter ();
} ;

class EXTERN ASN1C_CMPStream_DHBMParameter :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_DHBMParameter& msgData;
public:
   ASN1C_CMPStream_DHBMParameter (ASN1T_CMPStream_DHBMParameter& data);
   ASN1C_CMPStream_DHBMParameter (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_DHBMParameter& data);
   ASN1C_CMPStream_DHBMParameter (ASN1C_CMPStream_DHBMParameter& original);

   inline ASN1T_CMPStream_DHBMParameter& getData () { return msgData; }
   inline const ASN1T_CMPStream_DHBMParameter& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_DHBMParameter* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_DHBMParameter& getCopy (ASN1T_CMPStream_DHBMParameter* pDstData = 0);
   ASN1T_CMPStream_DHBMParameter* newCopy ();

   inline ASN1C_CMPStream_DHBMParameter& operator= (ASN1C_CMPStream_DHBMParameter& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_DHBMParameter (ASN1CTXT* pctxt,
   ASN1T_CMPStream_DHBMParameter *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_DHBMParameter
   (const char* name, ASN1T_CMPStream_DHBMParameter* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_DHBMParameter
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_DHBMParameter* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_DHBMParameter (ASN1ConstCharPtr name, ASN1T_CMPStream_DHBMParameter* pValue, ASN1T_CMPStream_DHBMParameter* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_DHBMParameter (ASN1CTXT *pctxt, ASN1T_CMPStream_DHBMParameter* pSrcValue, ASN1T_CMPStream_DHBMParameter* pDstValue);

EXTERN void asn1Free_CMPStream_DHBMParameter
   (ASN1CTXT *pctxt, ASN1T_CMPStream_DHBMParameter* pvalue);

/**************************************************************/
/*                                                            */
/*  OOBCertHash                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMPStream_OOBCertHash;

struct EXTERN ASN1T_CMPStream_OOBCertHash : public ASN1TPDU {
   struct {
      unsigned hashAlgPresent : 1;
      unsigned certIdPresent : 1;
   } m;
   ASN1T_EXPStream_AlgorithmIdentifier hashAlg;
   ASN1T_CRMFStream_CertId certId;
   ASN1TDynBitStr hashVal;
   ASN1T_CMPStream_OOBCertHash ();
   ASN1T_CMPStream_OOBCertHash (ASN1C_CMPStream_OOBCertHash& srcData);
   ~ASN1T_CMPStream_OOBCertHash ();
} ;

class EXTERN ASN1C_CMPStream_OOBCertHash :
   public ASN1CType
{
protected:
   ASN1T_CMPStream_OOBCertHash& msgData;
public:
   ASN1C_CMPStream_OOBCertHash (ASN1T_CMPStream_OOBCertHash& data);
   ASN1C_CMPStream_OOBCertHash (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMPStream_OOBCertHash& data);
   ASN1C_CMPStream_OOBCertHash (ASN1C_CMPStream_OOBCertHash& original);

   inline ASN1T_CMPStream_OOBCertHash& getData () { return msgData; }
   inline const ASN1T_CMPStream_OOBCertHash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMPStream_OOBCertHash* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMPStream_OOBCertHash& getCopy (ASN1T_CMPStream_OOBCertHash* pDstData = 0);
   ASN1T_CMPStream_OOBCertHash* newCopy ();

   inline ASN1C_CMPStream_OOBCertHash& operator= (ASN1C_CMPStream_OOBCertHash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMPStream_OOBCertHash (ASN1CTXT* pctxt,
   ASN1T_CMPStream_OOBCertHash *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMPStream_OOBCertHash
   (const char* name, ASN1T_CMPStream_OOBCertHash* pvalue);

EXTERN int asn1PrtToStrm_CMPStream_OOBCertHash
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMPStream_OOBCertHash* pvalue);

EXTERN OSBOOL asn1Compare_CMPStream_OOBCertHash (ASN1ConstCharPtr name, ASN1T_CMPStream_OOBCertHash* pValue, ASN1T_CMPStream_OOBCertHash* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMPStream_OOBCertHash (ASN1CTXT *pctxt, ASN1T_CMPStream_OOBCertHash* pSrcValue, ASN1T_CMPStream_OOBCertHash* pDstValue);

EXTERN void asn1Free_CMPStream_OOBCertHash
   (ASN1CTXT *pctxt, ASN1T_CMPStream_OOBCertHash* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID CMPStream_id_PasswordBasedMac;
extern EXTERN ASN1OBJID CMPStream_id_HMAC_SHA1;
extern EXTERN ASN1OBJID CMPStream_id_DHBasedMac;

#include "ASN1CGeneralizedTime.h"
#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  DateOfBirth                                               */
/*                                                            */
/**************************************************************/

typedef ASN1GeneralizedTime ASN1T_PKIXQUALStream_DateOfBirth;

class EXTERN ASN1C_PKIXQUALStream_DateOfBirth :
   public ASN1CGeneralizedTime
{
protected:
   ASN1T_PKIXQUALStream_DateOfBirth& msgData;
public:
   ASN1C_PKIXQUALStream_DateOfBirth (ASN1T_PKIXQUALStream_DateOfBirth& data);
   ASN1C_PKIXQUALStream_DateOfBirth (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_DateOfBirth& data);
   ASN1C_PKIXQUALStream_DateOfBirth (ASN1C_PKIXQUALStream_DateOfBirth& original);

   inline ASN1T_PKIXQUALStream_DateOfBirth& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_DateOfBirth& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_DateOfBirth* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_DateOfBirth& getCopy (ASN1T_PKIXQUALStream_DateOfBirth* pDstData = 0);
   ASN1T_PKIXQUALStream_DateOfBirth* newCopy ();

   ASN1C_PKIXQUALStream_DateOfBirth& operator= (ASN1C_PKIXQUALStream_DateOfBirth& srcData);
} ;

EXTERN int asn1BSD_PKIXQUALStream_DateOfBirth (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_DateOfBirth *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_DateOfBirth
   (const char* name, ASN1T_PKIXQUALStream_DateOfBirth* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_DateOfBirth
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_DateOfBirth* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_DateOfBirth (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_DateOfBirth* pValue, ASN1T_PKIXQUALStream_DateOfBirth* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_DateOfBirth (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_DateOfBirth* pSrcValue, ASN1T_PKIXQUALStream_DateOfBirth* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_DateOfBirth
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_DateOfBirth* pvalue);

/**************************************************************/
/*                                                            */
/*  PlaceOfBirth                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKIXQUALStream_PlaceOfBirth;

typedef ASN1T_EXPStream_DirectoryString ASN1T_PKIXQUALStream_PlaceOfBirth;

class EXTERN ASN1C_PKIXQUALStream_PlaceOfBirth :
   public ASN1C_EXPStream_DirectoryString
{
protected:
public:
   ASN1C_PKIXQUALStream_PlaceOfBirth (ASN1T_PKIXQUALStream_PlaceOfBirth& data);
   ASN1C_PKIXQUALStream_PlaceOfBirth (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_PlaceOfBirth& data);
   ASN1C_PKIXQUALStream_PlaceOfBirth (ASN1C_PKIXQUALStream_PlaceOfBirth& original);

   inline ASN1T_PKIXQUALStream_PlaceOfBirth& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_PlaceOfBirth& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_PlaceOfBirth* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_PlaceOfBirth& getCopy (ASN1T_PKIXQUALStream_PlaceOfBirth* pDstData = 0);
   ASN1T_PKIXQUALStream_PlaceOfBirth* newCopy ();

   inline ASN1C_PKIXQUALStream_PlaceOfBirth& operator= (ASN1C_PKIXQUALStream_PlaceOfBirth& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_PlaceOfBirth (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_PlaceOfBirth *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_PlaceOfBirth
   (const char* name, ASN1T_PKIXQUALStream_PlaceOfBirth* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_PlaceOfBirth
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_PlaceOfBirth* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_PlaceOfBirth (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_PlaceOfBirth* pValue, ASN1T_PKIXQUALStream_PlaceOfBirth* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_PlaceOfBirth (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_PlaceOfBirth* pSrcValue, ASN1T_PKIXQUALStream_PlaceOfBirth* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_PlaceOfBirth
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_PlaceOfBirth* pvalue);

/**************************************************************/
/*                                                            */
/*  Gender                                                    */
/*                                                            */
/**************************************************************/

typedef ASN1PrintableString ASN1T_PKIXQUALStream_Gender;

class EXTERN ASN1C_PKIXQUALStream_Gender :
   public ASN1CType
{
protected:
   ASN1T_PKIXQUALStream_Gender& msgData;
public:
   ASN1C_PKIXQUALStream_Gender (ASN1T_PKIXQUALStream_Gender& data);
   ASN1C_PKIXQUALStream_Gender (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_Gender& data);
   ASN1C_PKIXQUALStream_Gender (ASN1C_PKIXQUALStream_Gender& original);

   inline ASN1T_PKIXQUALStream_Gender& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_Gender& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_Gender* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_Gender& getCopy (ASN1T_PKIXQUALStream_Gender* pDstData = 0);
   ASN1T_PKIXQUALStream_Gender* newCopy ();

   inline ASN1C_PKIXQUALStream_Gender& operator= (ASN1C_PKIXQUALStream_Gender& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_Gender (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_Gender *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_Gender
   (const char* name, ASN1T_PKIXQUALStream_Gender* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_Gender
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_Gender* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_Gender (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_Gender* pValue, ASN1T_PKIXQUALStream_Gender* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_Gender (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_Gender* pSrcValue, ASN1T_PKIXQUALStream_Gender* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_Gender
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_Gender* pvalue);

/**************************************************************/
/*                                                            */
/*  CountryOfCitizenship                                      */
/*                                                            */
/**************************************************************/

typedef ASN1PrintableString ASN1T_PKIXQUALStream_CountryOfCitizenship;

class EXTERN ASN1C_PKIXQUALStream_CountryOfCitizenship :
   public ASN1CType
{
protected:
   ASN1T_PKIXQUALStream_CountryOfCitizenship& msgData;
public:
   ASN1C_PKIXQUALStream_CountryOfCitizenship (ASN1T_PKIXQUALStream_CountryOfCitizenship& data);
   ASN1C_PKIXQUALStream_CountryOfCitizenship (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_CountryOfCitizenship& data);
   ASN1C_PKIXQUALStream_CountryOfCitizenship (ASN1C_PKIXQUALStream_CountryOfCitizenship& original);

   inline ASN1T_PKIXQUALStream_CountryOfCitizenship& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_CountryOfCitizenship& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_CountryOfCitizenship* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_CountryOfCitizenship& getCopy (ASN1T_PKIXQUALStream_CountryOfCitizenship* pDstData = 0);
   ASN1T_PKIXQUALStream_CountryOfCitizenship* newCopy ();

   inline ASN1C_PKIXQUALStream_CountryOfCitizenship& operator= (ASN1C_PKIXQUALStream_CountryOfCitizenship& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_CountryOfCitizenship (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_CountryOfCitizenship *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_CountryOfCitizenship
   (const char* name, ASN1T_PKIXQUALStream_CountryOfCitizenship* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_CountryOfCitizenship
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_CountryOfCitizenship* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_CountryOfCitizenship (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_CountryOfCitizenship* pValue, ASN1T_PKIXQUALStream_CountryOfCitizenship* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_CountryOfCitizenship (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_CountryOfCitizenship* pSrcValue, ASN1T_PKIXQUALStream_CountryOfCitizenship* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_CountryOfCitizenship
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_CountryOfCitizenship* pvalue);

/**************************************************************/
/*                                                            */
/*  CountryOfResidence                                        */
/*                                                            */
/**************************************************************/

typedef ASN1PrintableString ASN1T_PKIXQUALStream_CountryOfResidence;

class EXTERN ASN1C_PKIXQUALStream_CountryOfResidence :
   public ASN1CType
{
protected:
   ASN1T_PKIXQUALStream_CountryOfResidence& msgData;
public:
   ASN1C_PKIXQUALStream_CountryOfResidence (ASN1T_PKIXQUALStream_CountryOfResidence& data);
   ASN1C_PKIXQUALStream_CountryOfResidence (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_CountryOfResidence& data);
   ASN1C_PKIXQUALStream_CountryOfResidence (ASN1C_PKIXQUALStream_CountryOfResidence& original);

   inline ASN1T_PKIXQUALStream_CountryOfResidence& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_CountryOfResidence& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_CountryOfResidence* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_CountryOfResidence& getCopy (ASN1T_PKIXQUALStream_CountryOfResidence* pDstData = 0);
   ASN1T_PKIXQUALStream_CountryOfResidence* newCopy ();

   inline ASN1C_PKIXQUALStream_CountryOfResidence& operator= (ASN1C_PKIXQUALStream_CountryOfResidence& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_CountryOfResidence (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_CountryOfResidence *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_CountryOfResidence
   (const char* name, ASN1T_PKIXQUALStream_CountryOfResidence* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_CountryOfResidence
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_CountryOfResidence* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_CountryOfResidence (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_CountryOfResidence* pValue, ASN1T_PKIXQUALStream_CountryOfResidence* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_CountryOfResidence (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_CountryOfResidence* pSrcValue, ASN1T_PKIXQUALStream_CountryOfResidence* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_CountryOfResidence
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_CountryOfResidence* pvalue);

/**************************************************************/
/*                                                            */
/*  PredefinedBiometricType                                   */
/*                                                            */
/**************************************************************/

struct EXTERN PKIXQUALStream_PredefinedBiometricType {
   enum Root {
      picture = 0,
      handwritten_signature = 1
   } ;
} ;

typedef OSUINT8 ASN1T_PKIXQUALStream_PredefinedBiometricType;

class EXTERN ASN1C_PKIXQUALStream_PredefinedBiometricType :
   public ASN1CType
{
protected:
   ASN1T_PKIXQUALStream_PredefinedBiometricType& msgData;
public:
   ASN1C_PKIXQUALStream_PredefinedBiometricType (ASN1T_PKIXQUALStream_PredefinedBiometricType& data);
   ASN1C_PKIXQUALStream_PredefinedBiometricType (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_PredefinedBiometricType& data);
   ASN1C_PKIXQUALStream_PredefinedBiometricType (ASN1C_PKIXQUALStream_PredefinedBiometricType& original);

   inline ASN1T_PKIXQUALStream_PredefinedBiometricType& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_PredefinedBiometricType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_PredefinedBiometricType* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_PredefinedBiometricType& getCopy (ASN1T_PKIXQUALStream_PredefinedBiometricType* pDstData = 0);
   ASN1T_PKIXQUALStream_PredefinedBiometricType* newCopy ();

   inline ASN1C_PKIXQUALStream_PredefinedBiometricType& operator= (ASN1C_PKIXQUALStream_PredefinedBiometricType& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_PredefinedBiometricType (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_PredefinedBiometricType *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_PredefinedBiometricType
   (const char* name, ASN1T_PKIXQUALStream_PredefinedBiometricType* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_PredefinedBiometricType
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_PredefinedBiometricType* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_PredefinedBiometricType (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_PredefinedBiometricType* pValue, ASN1T_PKIXQUALStream_PredefinedBiometricType* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_PredefinedBiometricType (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_PredefinedBiometricType* pSrcValue, ASN1T_PKIXQUALStream_PredefinedBiometricType* pDstValue);

/**************************************************************/
/*                                                            */
/*  TypeOfBiometricData                                       */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_PKIXQUALStream_TypeOfBiometricData_predefinedBiometricType 1
#define T_PKIXQUALStream_TypeOfBiometricData_biometricDataOid 2

class EXTERN ASN1C_PKIXQUALStream_TypeOfBiometricData;

struct EXTERN ASN1T_PKIXQUALStream_TypeOfBiometricData : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_PKIXQUALStream_PredefinedBiometricType predefinedBiometricType;
      /* t = 2 */
      ASN1TObjId *biometricDataOid;
   } u;
   ASN1T_PKIXQUALStream_TypeOfBiometricData () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_PKIXQUALStream_TypeOfBiometricData (ASN1C_PKIXQUALStream_TypeOfBiometricData& srcData);
   ~ASN1T_PKIXQUALStream_TypeOfBiometricData ();
} ;

class EXTERN ASN1C_PKIXQUALStream_TypeOfBiometricData :
   public ASN1CType
{
protected:
   ASN1T_PKIXQUALStream_TypeOfBiometricData& msgData;
public:
   ASN1C_PKIXQUALStream_TypeOfBiometricData (ASN1T_PKIXQUALStream_TypeOfBiometricData& data);
   ASN1C_PKIXQUALStream_TypeOfBiometricData (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_TypeOfBiometricData& data);
   ASN1C_PKIXQUALStream_TypeOfBiometricData (ASN1C_PKIXQUALStream_TypeOfBiometricData& original);

   inline ASN1T_PKIXQUALStream_TypeOfBiometricData& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_TypeOfBiometricData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_TypeOfBiometricData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_TypeOfBiometricData& getCopy (ASN1T_PKIXQUALStream_TypeOfBiometricData* pDstData = 0);
   ASN1T_PKIXQUALStream_TypeOfBiometricData* newCopy ();

   inline ASN1C_PKIXQUALStream_TypeOfBiometricData& operator= (ASN1C_PKIXQUALStream_TypeOfBiometricData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_TypeOfBiometricData (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_TypeOfBiometricData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_TypeOfBiometricData
   (const char* name, ASN1T_PKIXQUALStream_TypeOfBiometricData* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_TypeOfBiometricData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_TypeOfBiometricData* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_TypeOfBiometricData (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_TypeOfBiometricData* pValue, ASN1T_PKIXQUALStream_TypeOfBiometricData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_TypeOfBiometricData (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_TypeOfBiometricData* pSrcValue, ASN1T_PKIXQUALStream_TypeOfBiometricData* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_TypeOfBiometricData
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_TypeOfBiometricData* pvalue);

/**************************************************************/
/*                                                            */
/*  BiometricData                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKIXQUALStream_BiometricData;

struct EXTERN ASN1T_PKIXQUALStream_BiometricData : public ASN1TPDU {
   struct {
      unsigned sourceDataUriPresent : 1;
   } m;
   ASN1T_PKIXQUALStream_TypeOfBiometricData typeOfBiometricData;
   ASN1T_EXPStream_AlgorithmIdentifier hashAlgorithm;
   ASN1TDynOctStr biometricDataHash;
   ASN1IA5String sourceDataUri;
   ASN1T_PKIXQUALStream_BiometricData ();
   ASN1T_PKIXQUALStream_BiometricData (ASN1C_PKIXQUALStream_BiometricData& srcData);
   ~ASN1T_PKIXQUALStream_BiometricData ();
} ;

class EXTERN ASN1C_PKIXQUALStream_BiometricData :
   public ASN1CType
{
protected:
   ASN1T_PKIXQUALStream_BiometricData& msgData;
public:
   ASN1C_PKIXQUALStream_BiometricData (ASN1T_PKIXQUALStream_BiometricData& data);
   ASN1C_PKIXQUALStream_BiometricData (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_BiometricData& data);
   ASN1C_PKIXQUALStream_BiometricData (ASN1C_PKIXQUALStream_BiometricData& original);

   inline ASN1T_PKIXQUALStream_BiometricData& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_BiometricData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_BiometricData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_BiometricData& getCopy (ASN1T_PKIXQUALStream_BiometricData* pDstData = 0);
   ASN1T_PKIXQUALStream_BiometricData* newCopy ();

   inline ASN1C_PKIXQUALStream_BiometricData& operator= (ASN1C_PKIXQUALStream_BiometricData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_BiometricData (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_BiometricData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_BiometricData
   (const char* name, ASN1T_PKIXQUALStream_BiometricData* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_BiometricData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_BiometricData* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_BiometricData (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_BiometricData* pValue, ASN1T_PKIXQUALStream_BiometricData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_BiometricData (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_BiometricData* pSrcValue, ASN1T_PKIXQUALStream_BiometricData* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_BiometricData
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_BiometricData* pvalue);

/**************************************************************/
/*                                                            */
/*  BiometricSyntax                                           */
/*                                                            */
/**************************************************************/

/* List of ASN1T_PKIXQUALStream_BiometricData */
typedef struct EXTERN ASN1T_PKIXQUALStream_BiometricSyntax : public ASN1TPDUSeqOfList {
   ~ASN1T_PKIXQUALStream_BiometricSyntax();
} ASN1T_PKIXQUALStream_BiometricSyntax;

class EXTERN ASN1C_PKIXQUALStream_BiometricSyntax :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKIXQUALStream_BiometricSyntax& msgData;
public:
   ASN1C_PKIXQUALStream_BiometricSyntax (ASN1T_PKIXQUALStream_BiometricSyntax& data);
   ASN1C_PKIXQUALStream_BiometricSyntax (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_BiometricSyntax& data);
   ASN1C_PKIXQUALStream_BiometricSyntax (ASN1C_PKIXQUALStream_BiometricSyntax& original);

   inline ASN1T_PKIXQUALStream_BiometricSyntax& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_BiometricSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_BiometricSyntax* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_BiometricSyntax& getCopy (ASN1T_PKIXQUALStream_BiometricSyntax* pDstData = 0);
   ASN1T_PKIXQUALStream_BiometricSyntax* newCopy ();

   ASN1C_PKIXQUALStream_BiometricSyntax& operator= (ASN1C_PKIXQUALStream_BiometricSyntax& srcData);
   void Append (ASN1T_PKIXQUALStream_BiometricData *elem);
   ASN1T_PKIXQUALStream_BiometricData *NewElement ();
} ;

EXTERN int asn1BSD_PKIXQUALStream_BiometricSyntax (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_BiometricSyntax *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_BiometricSyntax
   (const char* name, ASN1T_PKIXQUALStream_BiometricSyntax* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_BiometricSyntax
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_BiometricSyntax* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_BiometricSyntax (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_BiometricSyntax* pValue, ASN1T_PKIXQUALStream_BiometricSyntax* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_BiometricSyntax (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_BiometricSyntax* pSrcValue, ASN1T_PKIXQUALStream_BiometricSyntax* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_BiometricSyntax
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_BiometricSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  QCStatement                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKIXQUALStream_QCStatement;

struct EXTERN ASN1T_PKIXQUALStream_QCStatement : public ASN1TPDU {
   struct {
      unsigned statementInfoPresent : 1;
   } m;
   ASN1TObjId statementId;
   ASN1TOpenType statementInfo;
   ASN1T_PKIXQUALStream_QCStatement ();
   ASN1T_PKIXQUALStream_QCStatement (ASN1C_PKIXQUALStream_QCStatement& srcData);
   ~ASN1T_PKIXQUALStream_QCStatement ();
} ;

class EXTERN ASN1C_PKIXQUALStream_QCStatement :
   public ASN1CType
{
protected:
   ASN1T_PKIXQUALStream_QCStatement& msgData;
public:
   ASN1C_PKIXQUALStream_QCStatement (ASN1T_PKIXQUALStream_QCStatement& data);
   ASN1C_PKIXQUALStream_QCStatement (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_QCStatement& data);
   ASN1C_PKIXQUALStream_QCStatement (ASN1C_PKIXQUALStream_QCStatement& original);

   inline ASN1T_PKIXQUALStream_QCStatement& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_QCStatement& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_QCStatement* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_QCStatement& getCopy (ASN1T_PKIXQUALStream_QCStatement* pDstData = 0);
   ASN1T_PKIXQUALStream_QCStatement* newCopy ();

   inline ASN1C_PKIXQUALStream_QCStatement& operator= (ASN1C_PKIXQUALStream_QCStatement& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_QCStatement (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_QCStatement *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_QCStatement
   (const char* name, ASN1T_PKIXQUALStream_QCStatement* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_QCStatement
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_QCStatement* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_QCStatement (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_QCStatement* pValue, ASN1T_PKIXQUALStream_QCStatement* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_QCStatement (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_QCStatement* pSrcValue, ASN1T_PKIXQUALStream_QCStatement* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_QCStatement
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_QCStatement* pvalue);

/**************************************************************/
/*                                                            */
/*  QCStatements                                              */
/*                                                            */
/**************************************************************/

/* List of ASN1T_PKIXQUALStream_QCStatement */
typedef struct EXTERN ASN1T_PKIXQUALStream_QCStatements : public ASN1TPDUSeqOfList {
   ~ASN1T_PKIXQUALStream_QCStatements();
} ASN1T_PKIXQUALStream_QCStatements;

class EXTERN ASN1C_PKIXQUALStream_QCStatements :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKIXQUALStream_QCStatements& msgData;
public:
   ASN1C_PKIXQUALStream_QCStatements (ASN1T_PKIXQUALStream_QCStatements& data);
   ASN1C_PKIXQUALStream_QCStatements (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_QCStatements& data);
   ASN1C_PKIXQUALStream_QCStatements (ASN1C_PKIXQUALStream_QCStatements& original);

   inline ASN1T_PKIXQUALStream_QCStatements& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_QCStatements& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_QCStatements* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_QCStatements& getCopy (ASN1T_PKIXQUALStream_QCStatements* pDstData = 0);
   ASN1T_PKIXQUALStream_QCStatements* newCopy ();

   ASN1C_PKIXQUALStream_QCStatements& operator= (ASN1C_PKIXQUALStream_QCStatements& srcData);
   void Append (ASN1T_PKIXQUALStream_QCStatement *elem);
   ASN1T_PKIXQUALStream_QCStatement *NewElement ();
} ;

EXTERN int asn1BSD_PKIXQUALStream_QCStatements (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_QCStatements *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_QCStatements
   (const char* name, ASN1T_PKIXQUALStream_QCStatements* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_QCStatements
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_QCStatements* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_QCStatements (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_QCStatements* pValue, ASN1T_PKIXQUALStream_QCStatements* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_QCStatements (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_QCStatements* pSrcValue, ASN1T_PKIXQUALStream_QCStatements* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_QCStatements
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_QCStatements* pvalue);

/**************************************************************/
/*                                                            */
/*  NameRegistrationAuthorities                               */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_GeneralName */
typedef struct EXTERN ASN1T_PKIXQUALStream_NameRegistrationAuthorities : public ASN1TPDUSeqOfList {
   ~ASN1T_PKIXQUALStream_NameRegistrationAuthorities();
} ASN1T_PKIXQUALStream_NameRegistrationAuthorities;

class EXTERN ASN1C_PKIXQUALStream_NameRegistrationAuthorities :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKIXQUALStream_NameRegistrationAuthorities& msgData;
public:
   ASN1C_PKIXQUALStream_NameRegistrationAuthorities (ASN1T_PKIXQUALStream_NameRegistrationAuthorities& data);
   ASN1C_PKIXQUALStream_NameRegistrationAuthorities (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_NameRegistrationAuthorities& data);
   ASN1C_PKIXQUALStream_NameRegistrationAuthorities (ASN1C_PKIXQUALStream_NameRegistrationAuthorities& original);

   inline ASN1T_PKIXQUALStream_NameRegistrationAuthorities& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_NameRegistrationAuthorities& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_NameRegistrationAuthorities& getCopy (ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pDstData = 0);
   ASN1T_PKIXQUALStream_NameRegistrationAuthorities* newCopy ();

   ASN1C_PKIXQUALStream_NameRegistrationAuthorities& operator= (ASN1C_PKIXQUALStream_NameRegistrationAuthorities& srcData);
   void Append (ASN1T_IMPStream_GeneralName *elem);
   ASN1T_IMPStream_GeneralName *NewElement ();
} ;

EXTERN int asn1BSD_PKIXQUALStream_NameRegistrationAuthorities (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_NameRegistrationAuthorities *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_NameRegistrationAuthorities
   (const char* name, ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_NameRegistrationAuthorities
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_NameRegistrationAuthorities (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pValue, ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_NameRegistrationAuthorities (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pSrcValue, ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_NameRegistrationAuthorities
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_NameRegistrationAuthorities* pvalue);

/**************************************************************/
/*                                                            */
/*  SemanticsInformation                                      */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKIXQUALStream_SemanticsInformation;

struct EXTERN ASN1T_PKIXQUALStream_SemanticsInformation : public ASN1TPDU {
   struct {
      unsigned semanticsIndentifierPresent : 1;
      unsigned nameRegistrationAuthoritiesPresent : 1;
   } m;
   ASN1TObjId semanticsIndentifier;
   ASN1T_PKIXQUALStream_NameRegistrationAuthorities nameRegistrationAuthorities;
   ASN1T_PKIXQUALStream_SemanticsInformation ();
   ASN1T_PKIXQUALStream_SemanticsInformation (ASN1C_PKIXQUALStream_SemanticsInformation& srcData);
   ~ASN1T_PKIXQUALStream_SemanticsInformation ();
} ;

class EXTERN ASN1C_PKIXQUALStream_SemanticsInformation :
   public ASN1CType
{
protected:
   ASN1T_PKIXQUALStream_SemanticsInformation& msgData;
public:
   ASN1C_PKIXQUALStream_SemanticsInformation (ASN1T_PKIXQUALStream_SemanticsInformation& data);
   ASN1C_PKIXQUALStream_SemanticsInformation (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKIXQUALStream_SemanticsInformation& data);
   ASN1C_PKIXQUALStream_SemanticsInformation (ASN1C_PKIXQUALStream_SemanticsInformation& original);

   inline ASN1T_PKIXQUALStream_SemanticsInformation& getData () { return msgData; }
   inline const ASN1T_PKIXQUALStream_SemanticsInformation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKIXQUALStream_SemanticsInformation* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKIXQUALStream_SemanticsInformation& getCopy (ASN1T_PKIXQUALStream_SemanticsInformation* pDstData = 0);
   ASN1T_PKIXQUALStream_SemanticsInformation* newCopy ();

   inline ASN1C_PKIXQUALStream_SemanticsInformation& operator= (ASN1C_PKIXQUALStream_SemanticsInformation& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKIXQUALStream_SemanticsInformation (ASN1CTXT* pctxt,
   ASN1T_PKIXQUALStream_SemanticsInformation *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKIXQUALStream_SemanticsInformation
   (const char* name, ASN1T_PKIXQUALStream_SemanticsInformation* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUALStream_SemanticsInformation
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_SemanticsInformation* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUALStream_SemanticsInformation (ASN1ConstCharPtr name, ASN1T_PKIXQUALStream_SemanticsInformation* pValue, ASN1T_PKIXQUALStream_SemanticsInformation* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKIXQUALStream_SemanticsInformation (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_SemanticsInformation* pSrcValue, ASN1T_PKIXQUALStream_SemanticsInformation* pDstValue);

EXTERN void asn1Free_PKIXQUALStream_SemanticsInformation
   (ASN1CTXT *pctxt, ASN1T_PKIXQUALStream_SemanticsInformation* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID PKIXQUALStream_id_pda;
extern EXTERN ASN1OBJID PKIXQUALStream_id_qcs;
extern EXTERN ASN1OBJID PKIXQUALStream_id_pda_dateOfBirth;
extern EXTERN ASN1OBJID PKIXQUALStream_id_pda_placeOfBirth;
extern EXTERN ASN1OBJID PKIXQUALStream_id_pda_gender;
extern EXTERN ASN1OBJID PKIXQUALStream_id_pda_countryOfCitizenship;
extern EXTERN ASN1OBJID PKIXQUALStream_id_pda_countryOfResidence;
extern EXTERN ASN1OBJID PKIXQUALStream_id_pe_biometricInfo;
extern EXTERN ASN1OBJID PKIXQUALStream_id_pe_qcStatements;
extern EXTERN ASN1OBJID PKIXQUALStream_id_qcs_pkixQCSyntax_v1;
extern EXTERN ASN1OBJID PKIXQUALStream_id_qcs_pkixQCSyntax_v2;

/**************************************************************/
/*                                                            */
/*  Iso4217CurrencyCode                                       */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ETSIQCStream_Iso4217CurrencyCode_numeric 1
#define T_ETSIQCStream_Iso4217CurrencyCode_alphabetic 2

class EXTERN ASN1C_ETSIQCStream_Iso4217CurrencyCode;

struct EXTERN ASN1T_ETSIQCStream_Iso4217CurrencyCode : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      OSUINT16 numeric;
      /* t = 2 */
      ASN1PrintableString alphabetic;
   } u;
   ASN1T_ETSIQCStream_Iso4217CurrencyCode () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ETSIQCStream_Iso4217CurrencyCode (ASN1C_ETSIQCStream_Iso4217CurrencyCode& srcData);
   ~ASN1T_ETSIQCStream_Iso4217CurrencyCode ();
} ;

class EXTERN ASN1C_ETSIQCStream_Iso4217CurrencyCode :
   public ASN1CType
{
protected:
   ASN1T_ETSIQCStream_Iso4217CurrencyCode& msgData;
public:
   ASN1C_ETSIQCStream_Iso4217CurrencyCode (ASN1T_ETSIQCStream_Iso4217CurrencyCode& data);
   ASN1C_ETSIQCStream_Iso4217CurrencyCode (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSIQCStream_Iso4217CurrencyCode& data);
   ASN1C_ETSIQCStream_Iso4217CurrencyCode (ASN1C_ETSIQCStream_Iso4217CurrencyCode& original);

   inline ASN1T_ETSIQCStream_Iso4217CurrencyCode& getData () { return msgData; }
   inline const ASN1T_ETSIQCStream_Iso4217CurrencyCode& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSIQCStream_Iso4217CurrencyCode* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSIQCStream_Iso4217CurrencyCode& getCopy (ASN1T_ETSIQCStream_Iso4217CurrencyCode* pDstData = 0);
   ASN1T_ETSIQCStream_Iso4217CurrencyCode* newCopy ();

   inline ASN1C_ETSIQCStream_Iso4217CurrencyCode& operator= (ASN1C_ETSIQCStream_Iso4217CurrencyCode& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSIQCStream_Iso4217CurrencyCode (ASN1CTXT* pctxt,
   ASN1T_ETSIQCStream_Iso4217CurrencyCode *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSIQCStream_Iso4217CurrencyCode
   (const char* name, ASN1T_ETSIQCStream_Iso4217CurrencyCode* pvalue);

EXTERN int asn1PrtToStrm_ETSIQCStream_Iso4217CurrencyCode
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSIQCStream_Iso4217CurrencyCode* pvalue);

EXTERN OSBOOL asn1Compare_ETSIQCStream_Iso4217CurrencyCode (ASN1ConstCharPtr name, ASN1T_ETSIQCStream_Iso4217CurrencyCode* pValue, ASN1T_ETSIQCStream_Iso4217CurrencyCode* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSIQCStream_Iso4217CurrencyCode (ASN1CTXT *pctxt, ASN1T_ETSIQCStream_Iso4217CurrencyCode* pSrcValue, ASN1T_ETSIQCStream_Iso4217CurrencyCode* pDstValue);

EXTERN void asn1Free_ETSIQCStream_Iso4217CurrencyCode
   (ASN1CTXT *pctxt, ASN1T_ETSIQCStream_Iso4217CurrencyCode* pvalue);

/**************************************************************/
/*                                                            */
/*  MonetaryValue                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSIQCStream_MonetaryValue;

struct EXTERN ASN1T_ETSIQCStream_MonetaryValue : public ASN1TPDU {
   ASN1T_ETSIQCStream_Iso4217CurrencyCode currency;
   OSINT32 amount;
   OSINT32 exponent;
   ASN1T_ETSIQCStream_MonetaryValue ();
   ASN1T_ETSIQCStream_MonetaryValue (ASN1C_ETSIQCStream_MonetaryValue& srcData);
   ~ASN1T_ETSIQCStream_MonetaryValue ();
} ;

class EXTERN ASN1C_ETSIQCStream_MonetaryValue :
   public ASN1CType
{
protected:
   ASN1T_ETSIQCStream_MonetaryValue& msgData;
public:
   ASN1C_ETSIQCStream_MonetaryValue (ASN1T_ETSIQCStream_MonetaryValue& data);
   ASN1C_ETSIQCStream_MonetaryValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSIQCStream_MonetaryValue& data);
   ASN1C_ETSIQCStream_MonetaryValue (ASN1C_ETSIQCStream_MonetaryValue& original);

   inline ASN1T_ETSIQCStream_MonetaryValue& getData () { return msgData; }
   inline const ASN1T_ETSIQCStream_MonetaryValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSIQCStream_MonetaryValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSIQCStream_MonetaryValue& getCopy (ASN1T_ETSIQCStream_MonetaryValue* pDstData = 0);
   ASN1T_ETSIQCStream_MonetaryValue* newCopy ();

   inline ASN1C_ETSIQCStream_MonetaryValue& operator= (ASN1C_ETSIQCStream_MonetaryValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSIQCStream_MonetaryValue (ASN1CTXT* pctxt,
   ASN1T_ETSIQCStream_MonetaryValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSIQCStream_MonetaryValue
   (const char* name, ASN1T_ETSIQCStream_MonetaryValue* pvalue);

EXTERN int asn1PrtToStrm_ETSIQCStream_MonetaryValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSIQCStream_MonetaryValue* pvalue);

EXTERN OSBOOL asn1Compare_ETSIQCStream_MonetaryValue (ASN1ConstCharPtr name, ASN1T_ETSIQCStream_MonetaryValue* pValue, ASN1T_ETSIQCStream_MonetaryValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSIQCStream_MonetaryValue (ASN1CTXT *pctxt, ASN1T_ETSIQCStream_MonetaryValue* pSrcValue, ASN1T_ETSIQCStream_MonetaryValue* pDstValue);

EXTERN void asn1Free_ETSIQCStream_MonetaryValue
   (ASN1CTXT *pctxt, ASN1T_ETSIQCStream_MonetaryValue* pvalue);

/**************************************************************/
/*                                                            */
/*  QcEuLimitValue                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSIQCStream_QcEuLimitValue;

typedef ASN1T_ETSIQCStream_MonetaryValue ASN1T_ETSIQCStream_QcEuLimitValue;

class EXTERN ASN1C_ETSIQCStream_QcEuLimitValue :
   public ASN1C_ETSIQCStream_MonetaryValue
{
protected:
public:
   ASN1C_ETSIQCStream_QcEuLimitValue (ASN1T_ETSIQCStream_QcEuLimitValue& data);
   ASN1C_ETSIQCStream_QcEuLimitValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSIQCStream_QcEuLimitValue& data);
   ASN1C_ETSIQCStream_QcEuLimitValue (ASN1C_ETSIQCStream_QcEuLimitValue& original);

   inline ASN1T_ETSIQCStream_QcEuLimitValue& getData () { return msgData; }
   inline const ASN1T_ETSIQCStream_QcEuLimitValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSIQCStream_QcEuLimitValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSIQCStream_QcEuLimitValue& getCopy (ASN1T_ETSIQCStream_QcEuLimitValue* pDstData = 0);
   ASN1T_ETSIQCStream_QcEuLimitValue* newCopy ();

   inline ASN1C_ETSIQCStream_QcEuLimitValue& operator= (ASN1C_ETSIQCStream_QcEuLimitValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSIQCStream_QcEuLimitValue (ASN1CTXT* pctxt,
   ASN1T_ETSIQCStream_QcEuLimitValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSIQCStream_QcEuLimitValue
   (const char* name, ASN1T_ETSIQCStream_QcEuLimitValue* pvalue);

EXTERN int asn1PrtToStrm_ETSIQCStream_QcEuLimitValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSIQCStream_QcEuLimitValue* pvalue);

EXTERN OSBOOL asn1Compare_ETSIQCStream_QcEuLimitValue (ASN1ConstCharPtr name, ASN1T_ETSIQCStream_QcEuLimitValue* pValue, ASN1T_ETSIQCStream_QcEuLimitValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSIQCStream_QcEuLimitValue (ASN1CTXT *pctxt, ASN1T_ETSIQCStream_QcEuLimitValue* pSrcValue, ASN1T_ETSIQCStream_QcEuLimitValue* pDstValue);

EXTERN void asn1Free_ETSIQCStream_QcEuLimitValue
   (ASN1CTXT *pctxt, ASN1T_ETSIQCStream_QcEuLimitValue* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ETSIQCStream_id_etsi_qcs;
extern EXTERN ASN1OBJID ETSIQCStream_id_etsi_qcs_QcCompliance;
extern EXTERN ASN1OBJID ETSIQCStream_id_etsi_qcs_QcLimitValue;
extern EXTERN ASN1OBJID ETSIQCStream_id_etsi_qcs_QcRetentionPeriod;

#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  IssuerAndSerialNumber                                     */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_IssuerAndSerialNumber;

struct EXTERN ASN1T_PKCS7Stream_IssuerAndSerialNumber : public ASN1TPDU {
   ASN1T_EXPStream_Name issuer;
   ASN1T_EXPStream_CertificateSerialNumber serialNumber;
   ASN1T_PKCS7Stream_IssuerAndSerialNumber ();
   ASN1T_PKCS7Stream_IssuerAndSerialNumber (ASN1C_PKCS7Stream_IssuerAndSerialNumber& srcData);
   ~ASN1T_PKCS7Stream_IssuerAndSerialNumber ();
} ;

class EXTERN ASN1C_PKCS7Stream_IssuerAndSerialNumber :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_IssuerAndSerialNumber& msgData;
public:
   ASN1C_PKCS7Stream_IssuerAndSerialNumber (ASN1T_PKCS7Stream_IssuerAndSerialNumber& data);
   ASN1C_PKCS7Stream_IssuerAndSerialNumber (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_IssuerAndSerialNumber& data);
   ASN1C_PKCS7Stream_IssuerAndSerialNumber (ASN1C_PKCS7Stream_IssuerAndSerialNumber& original);

   inline ASN1T_PKCS7Stream_IssuerAndSerialNumber& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_IssuerAndSerialNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_IssuerAndSerialNumber* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_IssuerAndSerialNumber& getCopy (ASN1T_PKCS7Stream_IssuerAndSerialNumber* pDstData = 0);
   ASN1T_PKCS7Stream_IssuerAndSerialNumber* newCopy ();

   inline ASN1C_PKCS7Stream_IssuerAndSerialNumber& operator= (ASN1C_PKCS7Stream_IssuerAndSerialNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_IssuerAndSerialNumber (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_IssuerAndSerialNumber *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_IssuerAndSerialNumber
   (const char* name, ASN1T_PKCS7Stream_IssuerAndSerialNumber* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_IssuerAndSerialNumber
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_IssuerAndSerialNumber* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_IssuerAndSerialNumber (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_IssuerAndSerialNumber* pValue, ASN1T_PKCS7Stream_IssuerAndSerialNumber* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_IssuerAndSerialNumber (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_IssuerAndSerialNumber* pSrcValue, ASN1T_PKCS7Stream_IssuerAndSerialNumber* pDstValue);

EXTERN void asn1Free_PKCS7Stream_IssuerAndSerialNumber
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_IssuerAndSerialNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentType                                               */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_PKCS7Stream_ContentType;

class EXTERN ASN1C_PKCS7Stream_ContentType :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_ContentType& msgData;
public:
   ASN1C_PKCS7Stream_ContentType (ASN1T_PKCS7Stream_ContentType& data);
   ASN1C_PKCS7Stream_ContentType (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_ContentType& data);
   ASN1C_PKCS7Stream_ContentType (ASN1C_PKCS7Stream_ContentType& original);

   inline ASN1T_PKCS7Stream_ContentType& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_ContentType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_ContentType* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_ContentType& getCopy (ASN1T_PKCS7Stream_ContentType* pDstData = 0);
   ASN1T_PKCS7Stream_ContentType* newCopy ();

   inline ASN1C_PKCS7Stream_ContentType& operator= (ASN1C_PKCS7Stream_ContentType& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_ContentType (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_ContentType *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_ContentType
   (const char* name, ASN1T_PKCS7Stream_ContentType* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_ContentType
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ContentType* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_ContentType (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ContentType* pValue, ASN1T_PKCS7Stream_ContentType* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_ContentType (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ContentType* pSrcValue, ASN1T_PKCS7Stream_ContentType* pDstValue);

/**************************************************************/
/*                                                            */
/*  Data                                                      */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_PKCS7Stream_Data;

class EXTERN ASN1C_PKCS7Stream_Data :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_Data& msgData;
public:
   ASN1C_PKCS7Stream_Data (ASN1T_PKCS7Stream_Data& data);
   ASN1C_PKCS7Stream_Data (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_Data& data);
   ASN1C_PKCS7Stream_Data (ASN1C_PKCS7Stream_Data& original);

   inline ASN1T_PKCS7Stream_Data& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_Data& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_Data* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_Data& getCopy (ASN1T_PKCS7Stream_Data* pDstData = 0);
   ASN1T_PKCS7Stream_Data* newCopy ();

   inline ASN1C_PKCS7Stream_Data& operator= (ASN1C_PKCS7Stream_Data& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_Data (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_Data *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_Data
   (const char* name, ASN1T_PKCS7Stream_Data* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_Data
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_Data* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_Data (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_Data* pValue, ASN1T_PKCS7Stream_Data* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_Data (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_Data* pSrcValue, ASN1T_PKCS7Stream_Data* pDstValue);

EXTERN void asn1Free_PKCS7Stream_Data
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_Data* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentEncryptionAlgorithmIdentifier                      */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_ContentEncryptionAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_PKCS7Stream_ContentEncryptionAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_PKCS7Stream_ContentEncryptionAlgorithmIdentifier (ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7Stream_ContentEncryptionAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7Stream_ContentEncryptionAlgorithmIdentifier (ASN1C_PKCS7Stream_ContentEncryptionAlgorithmIdentifier& original);

   inline ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier& getCopy (ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_PKCS7Stream_ContentEncryptionAlgorithmIdentifier& operator= (ASN1C_PKCS7Stream_ContentEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_ContentEncryptionAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_ContentEncryptionAlgorithmIdentifier
   (const char* name, ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_ContentEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_ContentEncryptionAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pValue, ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_ContentEncryptionAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pSrcValue, ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_PKCS7Stream_ContentEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestAlgorithmIdentifier                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_DigestAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_PKCS7Stream_DigestAlgorithmIdentifier;

class EXTERN ASN1C_PKCS7Stream_DigestAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_PKCS7Stream_DigestAlgorithmIdentifier (ASN1T_PKCS7Stream_DigestAlgorithmIdentifier& data);
   ASN1C_PKCS7Stream_DigestAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_DigestAlgorithmIdentifier& data);
   ASN1C_PKCS7Stream_DigestAlgorithmIdentifier (ASN1C_PKCS7Stream_DigestAlgorithmIdentifier& original);

   inline ASN1T_PKCS7Stream_DigestAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_DigestAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifier& getCopy (ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pDstData = 0);
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* newCopy ();

   inline ASN1C_PKCS7Stream_DigestAlgorithmIdentifier& operator= (ASN1C_PKCS7Stream_DigestAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_DigestAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_DigestAlgorithmIdentifier
   (const char* name, ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_DigestAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_DigestAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pValue, ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_DigestAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pSrcValue, ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_PKCS7Stream_DigestAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_DigestAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestEncryptionAlgorithmIdentifier                       */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_DigestEncryptionAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_PKCS7Stream_DigestEncryptionAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_PKCS7Stream_DigestEncryptionAlgorithmIdentifier (ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7Stream_DigestEncryptionAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7Stream_DigestEncryptionAlgorithmIdentifier (ASN1C_PKCS7Stream_DigestEncryptionAlgorithmIdentifier& original);

   inline ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier& getCopy (ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_PKCS7Stream_DigestEncryptionAlgorithmIdentifier& operator= (ASN1C_PKCS7Stream_DigestEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_DigestEncryptionAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_DigestEncryptionAlgorithmIdentifier
   (const char* name, ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_DigestEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_DigestEncryptionAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pValue, ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_DigestEncryptionAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pSrcValue, ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_PKCS7Stream_DigestEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyEncryptionAlgorithmIdentifier                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_KeyEncryptionAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_PKCS7Stream_KeyEncryptionAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_PKCS7Stream_KeyEncryptionAlgorithmIdentifier (ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7Stream_KeyEncryptionAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_PKCS7Stream_KeyEncryptionAlgorithmIdentifier (ASN1C_PKCS7Stream_KeyEncryptionAlgorithmIdentifier& original);

   inline ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier& getCopy (ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_PKCS7Stream_KeyEncryptionAlgorithmIdentifier& operator= (ASN1C_PKCS7Stream_KeyEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_KeyEncryptionAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_KeyEncryptionAlgorithmIdentifier
   (const char* name, ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_KeyEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_KeyEncryptionAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pValue, ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_KeyEncryptionAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pSrcValue, ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_PKCS7Stream_KeyEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  Version                                                   */
/*                                                            */
/**************************************************************/

typedef OSINT32 ASN1T_PKCS7Stream_Version;

class EXTERN ASN1C_PKCS7Stream_Version :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_Version& msgData;
public:
   ASN1C_PKCS7Stream_Version (ASN1T_PKCS7Stream_Version& data);
   ASN1C_PKCS7Stream_Version (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_Version& data);
   ASN1C_PKCS7Stream_Version (ASN1C_PKCS7Stream_Version& original);

   inline ASN1T_PKCS7Stream_Version& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_Version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_Version* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_Version& getCopy (ASN1T_PKCS7Stream_Version* pDstData = 0);
   ASN1T_PKCS7Stream_Version* newCopy ();

   inline ASN1C_PKCS7Stream_Version& operator= (ASN1C_PKCS7Stream_Version& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_Version (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_Version *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_Version
   (const char* name, ASN1T_PKCS7Stream_Version* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_Version
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_Version* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_Version (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_Version* pValue, ASN1T_PKCS7Stream_Version* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_Version (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_Version* pSrcValue, ASN1T_PKCS7Stream_Version* pDstValue);

/**************************************************************/
/*                                                            */
/*  EncryptedDigest                                           */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_PKCS7Stream_EncryptedDigest;

class EXTERN ASN1C_PKCS7Stream_EncryptedDigest :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_EncryptedDigest& msgData;
public:
   ASN1C_PKCS7Stream_EncryptedDigest (ASN1T_PKCS7Stream_EncryptedDigest& data);
   ASN1C_PKCS7Stream_EncryptedDigest (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_EncryptedDigest& data);
   ASN1C_PKCS7Stream_EncryptedDigest (ASN1C_PKCS7Stream_EncryptedDigest& original);

   inline ASN1T_PKCS7Stream_EncryptedDigest& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_EncryptedDigest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_EncryptedDigest* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_EncryptedDigest& getCopy (ASN1T_PKCS7Stream_EncryptedDigest* pDstData = 0);
   ASN1T_PKCS7Stream_EncryptedDigest* newCopy ();

   inline ASN1C_PKCS7Stream_EncryptedDigest& operator= (ASN1C_PKCS7Stream_EncryptedDigest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_EncryptedDigest (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_EncryptedDigest *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_EncryptedDigest
   (const char* name, ASN1T_PKCS7Stream_EncryptedDigest* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_EncryptedDigest
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EncryptedDigest* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_EncryptedDigest (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EncryptedDigest* pValue, ASN1T_PKCS7Stream_EncryptedDigest* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_EncryptedDigest (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EncryptedDigest* pSrcValue, ASN1T_PKCS7Stream_EncryptedDigest* pDstValue);

EXTERN void asn1Free_PKCS7Stream_EncryptedDigest
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EncryptedDigest* pvalue);

/**************************************************************/
/*                                                            */
/*  Digest                                                    */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_PKCS7Stream_Digest;

class EXTERN ASN1C_PKCS7Stream_Digest :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_Digest& msgData;
public:
   ASN1C_PKCS7Stream_Digest (ASN1T_PKCS7Stream_Digest& data);
   ASN1C_PKCS7Stream_Digest (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_Digest& data);
   ASN1C_PKCS7Stream_Digest (ASN1C_PKCS7Stream_Digest& original);

   inline ASN1T_PKCS7Stream_Digest& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_Digest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_Digest* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_Digest& getCopy (ASN1T_PKCS7Stream_Digest* pDstData = 0);
   ASN1T_PKCS7Stream_Digest* newCopy ();

   inline ASN1C_PKCS7Stream_Digest& operator= (ASN1C_PKCS7Stream_Digest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_Digest (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_Digest *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_Digest
   (const char* name, ASN1T_PKCS7Stream_Digest* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_Digest
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_Digest* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_Digest (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_Digest* pValue, ASN1T_PKCS7Stream_Digest* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_Digest (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_Digest* pSrcValue, ASN1T_PKCS7Stream_Digest* pDstValue);

EXTERN void asn1Free_PKCS7Stream_Digest
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_Digest* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedContent                                          */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_PKCS7Stream_EncryptedContent;

class EXTERN ASN1C_PKCS7Stream_EncryptedContent :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_EncryptedContent& msgData;
public:
   ASN1C_PKCS7Stream_EncryptedContent (ASN1T_PKCS7Stream_EncryptedContent& data);
   ASN1C_PKCS7Stream_EncryptedContent (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_EncryptedContent& data);
   ASN1C_PKCS7Stream_EncryptedContent (ASN1C_PKCS7Stream_EncryptedContent& original);

   inline ASN1T_PKCS7Stream_EncryptedContent& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_EncryptedContent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_EncryptedContent* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_EncryptedContent& getCopy (ASN1T_PKCS7Stream_EncryptedContent* pDstData = 0);
   ASN1T_PKCS7Stream_EncryptedContent* newCopy ();

   inline ASN1C_PKCS7Stream_EncryptedContent& operator= (ASN1C_PKCS7Stream_EncryptedContent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_EncryptedContent (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_EncryptedContent *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_EncryptedContent
   (const char* name, ASN1T_PKCS7Stream_EncryptedContent* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_EncryptedContent
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EncryptedContent* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_EncryptedContent (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EncryptedContent* pValue, ASN1T_PKCS7Stream_EncryptedContent* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_EncryptedContent (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EncryptedContent* pSrcValue, ASN1T_PKCS7Stream_EncryptedContent* pDstValue);

EXTERN void asn1Free_PKCS7Stream_EncryptedContent
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EncryptedContent* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedKey                                              */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_PKCS7Stream_EncryptedKey;

class EXTERN ASN1C_PKCS7Stream_EncryptedKey :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_EncryptedKey& msgData;
public:
   ASN1C_PKCS7Stream_EncryptedKey (ASN1T_PKCS7Stream_EncryptedKey& data);
   ASN1C_PKCS7Stream_EncryptedKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_EncryptedKey& data);
   ASN1C_PKCS7Stream_EncryptedKey (ASN1C_PKCS7Stream_EncryptedKey& original);

   inline ASN1T_PKCS7Stream_EncryptedKey& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_EncryptedKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_EncryptedKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_EncryptedKey& getCopy (ASN1T_PKCS7Stream_EncryptedKey* pDstData = 0);
   ASN1T_PKCS7Stream_EncryptedKey* newCopy ();

   inline ASN1C_PKCS7Stream_EncryptedKey& operator= (ASN1C_PKCS7Stream_EncryptedKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_EncryptedKey (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_EncryptedKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_EncryptedKey
   (const char* name, ASN1T_PKCS7Stream_EncryptedKey* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_EncryptedKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EncryptedKey* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_EncryptedKey (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EncryptedKey* pValue, ASN1T_PKCS7Stream_EncryptedKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_EncryptedKey (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EncryptedKey* pSrcValue, ASN1T_PKCS7Stream_EncryptedKey* pDstValue);

EXTERN void asn1Free_PKCS7Stream_EncryptedKey
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EncryptedKey* pvalue);

/**************************************************************/
/*                                                            */
/*  Hash                                                      */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_PKCS7Stream_Hash;

class EXTERN ASN1C_PKCS7Stream_Hash :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_Hash& msgData;
public:
   ASN1C_PKCS7Stream_Hash (ASN1T_PKCS7Stream_Hash& data);
   ASN1C_PKCS7Stream_Hash (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_Hash& data);
   ASN1C_PKCS7Stream_Hash (ASN1C_PKCS7Stream_Hash& original);

   inline ASN1T_PKCS7Stream_Hash& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_Hash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_Hash* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_Hash& getCopy (ASN1T_PKCS7Stream_Hash* pDstData = 0);
   ASN1T_PKCS7Stream_Hash* newCopy ();

   inline ASN1C_PKCS7Stream_Hash& operator= (ASN1C_PKCS7Stream_Hash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_Hash (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_Hash *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_Hash
   (const char* name, ASN1T_PKCS7Stream_Hash* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_Hash
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_Hash* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_Hash (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_Hash* pValue, ASN1T_PKCS7Stream_Hash* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_Hash (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_Hash* pSrcValue, ASN1T_PKCS7Stream_Hash* pDstValue);

EXTERN void asn1Free_PKCS7Stream_Hash
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_Hash* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentInfo                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_ContentInfo;

struct EXTERN ASN1T_PKCS7Stream_ContentInfo : public ASN1TPDU {
   struct {
      unsigned contentPresent : 1;
   } m;
   ASN1T_PKCS7Stream_ContentType contentType;
   ASN1TOpenType content;
   ASN1T_PKCS7Stream_ContentInfo ();
   ASN1T_PKCS7Stream_ContentInfo (ASN1C_PKCS7Stream_ContentInfo& srcData);
   ~ASN1T_PKCS7Stream_ContentInfo ();
} ;

class EXTERN ASN1C_PKCS7Stream_ContentInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_ContentInfo& msgData;
public:
   ASN1C_PKCS7Stream_ContentInfo (ASN1T_PKCS7Stream_ContentInfo& data);
   ASN1C_PKCS7Stream_ContentInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_ContentInfo& data);
   ASN1C_PKCS7Stream_ContentInfo (ASN1C_PKCS7Stream_ContentInfo& original);

   inline ASN1T_PKCS7Stream_ContentInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_ContentInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_ContentInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_ContentInfo& getCopy (ASN1T_PKCS7Stream_ContentInfo* pDstData = 0);
   ASN1T_PKCS7Stream_ContentInfo* newCopy ();

   inline ASN1C_PKCS7Stream_ContentInfo& operator= (ASN1C_PKCS7Stream_ContentInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_ContentInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_ContentInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_ContentInfo
   (const char* name, ASN1T_PKCS7Stream_ContentInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_ContentInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ContentInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_ContentInfo (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ContentInfo* pValue, ASN1T_PKCS7Stream_ContentInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_ContentInfo (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ContentInfo* pSrcValue, ASN1T_PKCS7Stream_ContentInfo* pDstValue);

EXTERN void asn1Free_PKCS7Stream_ContentInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ContentInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateRevocationLists                                */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_CertificateList */
typedef struct EXTERN ASN1T_PKCS7Stream_CertificateRevocationLists : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7Stream_CertificateRevocationLists();
} ASN1T_PKCS7Stream_CertificateRevocationLists;

class EXTERN ASN1C_PKCS7Stream_CertificateRevocationLists :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7Stream_CertificateRevocationLists& msgData;
public:
   ASN1C_PKCS7Stream_CertificateRevocationLists (ASN1T_PKCS7Stream_CertificateRevocationLists& data);
   ASN1C_PKCS7Stream_CertificateRevocationLists (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_CertificateRevocationLists& data);
   ASN1C_PKCS7Stream_CertificateRevocationLists (ASN1C_PKCS7Stream_CertificateRevocationLists& original);

   inline ASN1T_PKCS7Stream_CertificateRevocationLists& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_CertificateRevocationLists& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_CertificateRevocationLists* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_CertificateRevocationLists& getCopy (ASN1T_PKCS7Stream_CertificateRevocationLists* pDstData = 0);
   ASN1T_PKCS7Stream_CertificateRevocationLists* newCopy ();

   ASN1C_PKCS7Stream_CertificateRevocationLists& operator= (ASN1C_PKCS7Stream_CertificateRevocationLists& srcData);
   void Append (ASN1T_EXPStream_CertificateList *elem);
   ASN1T_EXPStream_CertificateList *NewElement ();
} ;

EXTERN int asn1BSD_PKCS7Stream_CertificateRevocationLists (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_CertificateRevocationLists *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_CertificateRevocationLists
   (const char* name, ASN1T_PKCS7Stream_CertificateRevocationLists* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_CertificateRevocationLists
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_CertificateRevocationLists* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_CertificateRevocationLists (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_CertificateRevocationLists* pValue, ASN1T_PKCS7Stream_CertificateRevocationLists* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_CertificateRevocationLists (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_CertificateRevocationLists* pSrcValue, ASN1T_PKCS7Stream_CertificateRevocationLists* pDstValue);

EXTERN void asn1Free_PKCS7Stream_CertificateRevocationLists
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_CertificateRevocationLists* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificateOrCertificate                          */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_PKCS7Stream_ExtendedCertificateOrCertificate_certificate 1

class EXTERN ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate;

struct EXTERN ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_EXPStream_Certificate *certificate;
   } u;
   ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate (ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate& srcData);
   ~ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate ();
} ;

class EXTERN ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate& msgData;
public:
   ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate (ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate& data);
   ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate& data);
   ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate (ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate& original);

   inline ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate& getCopy (ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pDstData = 0);
   ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* newCopy ();

   inline ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate& operator= (ASN1C_PKCS7Stream_ExtendedCertificateOrCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_ExtendedCertificateOrCertificate (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_ExtendedCertificateOrCertificate
   (const char* name, ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_ExtendedCertificateOrCertificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_ExtendedCertificateOrCertificate (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pValue, ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_ExtendedCertificateOrCertificate (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pSrcValue, ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pDstValue);

EXTERN void asn1Free_PKCS7Stream_ExtendedCertificateOrCertificate
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificatesAndCertificates                       */
/*                                                            */
/**************************************************************/

/* List of ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate */
typedef struct EXTERN ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates();
} ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates;

class EXTERN ASN1C_PKCS7Stream_ExtendedCertificatesAndCertificates :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates& msgData;
public:
   ASN1C_PKCS7Stream_ExtendedCertificatesAndCertificates (ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates& data);
   ASN1C_PKCS7Stream_ExtendedCertificatesAndCertificates (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates& data);
   ASN1C_PKCS7Stream_ExtendedCertificatesAndCertificates (ASN1C_PKCS7Stream_ExtendedCertificatesAndCertificates& original);

   inline ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates& getCopy (ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pDstData = 0);
   ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* newCopy ();

   ASN1C_PKCS7Stream_ExtendedCertificatesAndCertificates& operator= (ASN1C_PKCS7Stream_ExtendedCertificatesAndCertificates& srcData);
   void Append (ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate *elem);
   ASN1T_PKCS7Stream_ExtendedCertificateOrCertificate *NewElement ();
} ;

EXTERN int asn1BSD_PKCS7Stream_ExtendedCertificatesAndCertificates (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_ExtendedCertificatesAndCertificates
   (const char* name, ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_ExtendedCertificatesAndCertificates
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_ExtendedCertificatesAndCertificates (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pValue, ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_ExtendedCertificatesAndCertificates (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pSrcValue, ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pDstValue);

EXTERN void asn1Free_PKCS7Stream_ExtendedCertificatesAndCertificates
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestAlgorithmIdentifiers                                */
/*                                                            */
/**************************************************************/

/* List of ASN1T_PKCS7Stream_DigestAlgorithmIdentifier */
typedef struct EXTERN ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers();
} ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers;

class EXTERN ASN1C_PKCS7Stream_DigestAlgorithmIdentifiers :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers& msgData;
public:
   ASN1C_PKCS7Stream_DigestAlgorithmIdentifiers (ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers& data);
   ASN1C_PKCS7Stream_DigestAlgorithmIdentifiers (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers& data);
   ASN1C_PKCS7Stream_DigestAlgorithmIdentifiers (ASN1C_PKCS7Stream_DigestAlgorithmIdentifiers& original);

   inline ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers& getCopy (ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pDstData = 0);
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* newCopy ();

   ASN1C_PKCS7Stream_DigestAlgorithmIdentifiers& operator= (ASN1C_PKCS7Stream_DigestAlgorithmIdentifiers& srcData);
   void Append (ASN1T_PKCS7Stream_DigestAlgorithmIdentifier *elem);
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifier *NewElement ();
} ;

EXTERN int asn1BSD_PKCS7Stream_DigestAlgorithmIdentifiers (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_DigestAlgorithmIdentifiers
   (const char* name, ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_DigestAlgorithmIdentifiers
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_DigestAlgorithmIdentifiers (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pValue, ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_DigestAlgorithmIdentifiers (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pSrcValue, ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pDstValue);

EXTERN void asn1Free_PKCS7Stream_DigestAlgorithmIdentifiers
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerInfo                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_SignerInfo;

struct EXTERN ASN1T_PKCS7Stream_SignerInfo : public ASN1TPDU {
   struct {
      unsigned authenticatedAttributesPresent : 1;
      unsigned unauthenticatedAttributesPresent : 1;
   } m;
   ASN1T_PKCS7Stream_Version version;
   ASN1T_PKCS7Stream_IssuerAndSerialNumber issuerAndSerialNumber;
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_PKCS10Stream_Attributes authenticatedAttributes;
   ASN1T_PKCS7Stream_DigestEncryptionAlgorithmIdentifier digestEncryptionAlgorithm;
   ASN1T_PKCS7Stream_EncryptedDigest encryptedDigest;
   ASN1T_PKCS10Stream_Attributes unauthenticatedAttributes;
   ASN1T_PKCS7Stream_SignerInfo ();
   ASN1T_PKCS7Stream_SignerInfo (ASN1C_PKCS7Stream_SignerInfo& srcData);
   ~ASN1T_PKCS7Stream_SignerInfo ();
} ;

class EXTERN ASN1C_PKCS7Stream_SignerInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_SignerInfo& msgData;
public:
   ASN1C_PKCS7Stream_SignerInfo (ASN1T_PKCS7Stream_SignerInfo& data);
   ASN1C_PKCS7Stream_SignerInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_SignerInfo& data);
   ASN1C_PKCS7Stream_SignerInfo (ASN1C_PKCS7Stream_SignerInfo& original);

   inline ASN1T_PKCS7Stream_SignerInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_SignerInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_SignerInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_SignerInfo& getCopy (ASN1T_PKCS7Stream_SignerInfo* pDstData = 0);
   ASN1T_PKCS7Stream_SignerInfo* newCopy ();

   inline ASN1C_PKCS7Stream_SignerInfo& operator= (ASN1C_PKCS7Stream_SignerInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_SignerInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_SignerInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_SignerInfo
   (const char* name, ASN1T_PKCS7Stream_SignerInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_SignerInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SignerInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_SignerInfo (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SignerInfo* pValue, ASN1T_PKCS7Stream_SignerInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_SignerInfo (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SignerInfo* pSrcValue, ASN1T_PKCS7Stream_SignerInfo* pDstValue);

EXTERN void asn1Free_PKCS7Stream_SignerInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SignerInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerInfos                                               */
/*                                                            */
/**************************************************************/

/* List of ASN1T_PKCS7Stream_SignerInfo */
typedef struct EXTERN ASN1T_PKCS7Stream_SignerInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7Stream_SignerInfos();
} ASN1T_PKCS7Stream_SignerInfos;

class EXTERN ASN1C_PKCS7Stream_SignerInfos :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7Stream_SignerInfos& msgData;
public:
   ASN1C_PKCS7Stream_SignerInfos (ASN1T_PKCS7Stream_SignerInfos& data);
   ASN1C_PKCS7Stream_SignerInfos (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_SignerInfos& data);
   ASN1C_PKCS7Stream_SignerInfos (ASN1C_PKCS7Stream_SignerInfos& original);

   inline ASN1T_PKCS7Stream_SignerInfos& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_SignerInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_SignerInfos* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_SignerInfos& getCopy (ASN1T_PKCS7Stream_SignerInfos* pDstData = 0);
   ASN1T_PKCS7Stream_SignerInfos* newCopy ();

   ASN1C_PKCS7Stream_SignerInfos& operator= (ASN1C_PKCS7Stream_SignerInfos& srcData);
   void Append (ASN1T_PKCS7Stream_SignerInfo *elem);
   ASN1T_PKCS7Stream_SignerInfo *NewElement ();
} ;

EXTERN int asn1BSD_PKCS7Stream_SignerInfos (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_SignerInfos *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_SignerInfos
   (const char* name, ASN1T_PKCS7Stream_SignerInfos* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_SignerInfos
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SignerInfos* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_SignerInfos (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SignerInfos* pValue, ASN1T_PKCS7Stream_SignerInfos* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_SignerInfos (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SignerInfos* pSrcValue, ASN1T_PKCS7Stream_SignerInfos* pDstValue);

EXTERN void asn1Free_PKCS7Stream_SignerInfos
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SignerInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  SignedData                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_SignedData;

struct EXTERN ASN1T_PKCS7Stream_SignedData : public ASN1TPDU {
   struct {
      unsigned certificatesPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_PKCS7Stream_Version version;
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers digestAlgorithms;
   ASN1T_PKCS7Stream_ContentInfo contentInfo;
   ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates certificates;
   ASN1T_PKCS7Stream_CertificateRevocationLists crls;
   ASN1T_PKCS7Stream_SignerInfos signerInfos;
   ASN1T_PKCS7Stream_SignedData ();
   ASN1T_PKCS7Stream_SignedData (ASN1C_PKCS7Stream_SignedData& srcData);
   ~ASN1T_PKCS7Stream_SignedData ();
} ;

class EXTERN ASN1C_PKCS7Stream_SignedData :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_SignedData& msgData;
public:
   ASN1C_PKCS7Stream_SignedData (ASN1T_PKCS7Stream_SignedData& data);
   ASN1C_PKCS7Stream_SignedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_SignedData& data);
   ASN1C_PKCS7Stream_SignedData (ASN1C_PKCS7Stream_SignedData& original);

   inline ASN1T_PKCS7Stream_SignedData& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_SignedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_SignedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_SignedData& getCopy (ASN1T_PKCS7Stream_SignedData* pDstData = 0);
   ASN1T_PKCS7Stream_SignedData* newCopy ();

   inline ASN1C_PKCS7Stream_SignedData& operator= (ASN1C_PKCS7Stream_SignedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_SignedData (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_SignedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_SignedData
   (const char* name, ASN1T_PKCS7Stream_SignedData* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_SignedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SignedData* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_SignedData (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SignedData* pValue, ASN1T_PKCS7Stream_SignedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_SignedData (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SignedData* pSrcValue, ASN1T_PKCS7Stream_SignedData* pDstValue);

EXTERN void asn1Free_PKCS7Stream_SignedData
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SignedData* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestInfo                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_DigestInfo;

struct EXTERN ASN1T_PKCS7Stream_DigestInfo : public ASN1TPDU {
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_PKCS7Stream_Digest digest;
   ASN1T_PKCS7Stream_DigestInfo ();
   ASN1T_PKCS7Stream_DigestInfo (ASN1C_PKCS7Stream_DigestInfo& srcData);
   ~ASN1T_PKCS7Stream_DigestInfo ();
} ;

class EXTERN ASN1C_PKCS7Stream_DigestInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_DigestInfo& msgData;
public:
   ASN1C_PKCS7Stream_DigestInfo (ASN1T_PKCS7Stream_DigestInfo& data);
   ASN1C_PKCS7Stream_DigestInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_DigestInfo& data);
   ASN1C_PKCS7Stream_DigestInfo (ASN1C_PKCS7Stream_DigestInfo& original);

   inline ASN1T_PKCS7Stream_DigestInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_DigestInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_DigestInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_DigestInfo& getCopy (ASN1T_PKCS7Stream_DigestInfo* pDstData = 0);
   ASN1T_PKCS7Stream_DigestInfo* newCopy ();

   inline ASN1C_PKCS7Stream_DigestInfo& operator= (ASN1C_PKCS7Stream_DigestInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_DigestInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_DigestInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_DigestInfo
   (const char* name, ASN1T_PKCS7Stream_DigestInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_DigestInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_DigestInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_DigestInfo (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_DigestInfo* pValue, ASN1T_PKCS7Stream_DigestInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_DigestInfo (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_DigestInfo* pSrcValue, ASN1T_PKCS7Stream_DigestInfo* pDstValue);

EXTERN void asn1Free_PKCS7Stream_DigestInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_DigestInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientInfo                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_RecipientInfo;

struct EXTERN ASN1T_PKCS7Stream_RecipientInfo : public ASN1TPDU {
   ASN1T_PKCS7Stream_Version version;
   ASN1T_PKCS7Stream_IssuerAndSerialNumber issuerAndSerialNumber;
   ASN1T_PKCS7Stream_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_PKCS7Stream_EncryptedKey encryptedKey;
   ASN1T_PKCS7Stream_RecipientInfo ();
   ASN1T_PKCS7Stream_RecipientInfo (ASN1C_PKCS7Stream_RecipientInfo& srcData);
   ~ASN1T_PKCS7Stream_RecipientInfo ();
} ;

class EXTERN ASN1C_PKCS7Stream_RecipientInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_RecipientInfo& msgData;
public:
   ASN1C_PKCS7Stream_RecipientInfo (ASN1T_PKCS7Stream_RecipientInfo& data);
   ASN1C_PKCS7Stream_RecipientInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_RecipientInfo& data);
   ASN1C_PKCS7Stream_RecipientInfo (ASN1C_PKCS7Stream_RecipientInfo& original);

   inline ASN1T_PKCS7Stream_RecipientInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_RecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_RecipientInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_RecipientInfo& getCopy (ASN1T_PKCS7Stream_RecipientInfo* pDstData = 0);
   ASN1T_PKCS7Stream_RecipientInfo* newCopy ();

   inline ASN1C_PKCS7Stream_RecipientInfo& operator= (ASN1C_PKCS7Stream_RecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_RecipientInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_RecipientInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_RecipientInfo
   (const char* name, ASN1T_PKCS7Stream_RecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_RecipientInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_RecipientInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_RecipientInfo (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_RecipientInfo* pValue, ASN1T_PKCS7Stream_RecipientInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_RecipientInfo (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_RecipientInfo* pSrcValue, ASN1T_PKCS7Stream_RecipientInfo* pDstValue);

EXTERN void asn1Free_PKCS7Stream_RecipientInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_RecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientInfos                                            */
/*                                                            */
/**************************************************************/

/* List of ASN1T_PKCS7Stream_RecipientInfo */
typedef struct EXTERN ASN1T_PKCS7Stream_RecipientInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7Stream_RecipientInfos();
} ASN1T_PKCS7Stream_RecipientInfos;

class EXTERN ASN1C_PKCS7Stream_RecipientInfos :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7Stream_RecipientInfos& msgData;
public:
   ASN1C_PKCS7Stream_RecipientInfos (ASN1T_PKCS7Stream_RecipientInfos& data);
   ASN1C_PKCS7Stream_RecipientInfos (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_RecipientInfos& data);
   ASN1C_PKCS7Stream_RecipientInfos (ASN1C_PKCS7Stream_RecipientInfos& original);

   inline ASN1T_PKCS7Stream_RecipientInfos& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_RecipientInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_RecipientInfos* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_RecipientInfos& getCopy (ASN1T_PKCS7Stream_RecipientInfos* pDstData = 0);
   ASN1T_PKCS7Stream_RecipientInfos* newCopy ();

   ASN1C_PKCS7Stream_RecipientInfos& operator= (ASN1C_PKCS7Stream_RecipientInfos& srcData);
   void Append (ASN1T_PKCS7Stream_RecipientInfo *elem);
   ASN1T_PKCS7Stream_RecipientInfo *NewElement ();
} ;

EXTERN int asn1BSD_PKCS7Stream_RecipientInfos (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_RecipientInfos *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_RecipientInfos
   (const char* name, ASN1T_PKCS7Stream_RecipientInfos* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_RecipientInfos
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_RecipientInfos* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_RecipientInfos (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_RecipientInfos* pValue, ASN1T_PKCS7Stream_RecipientInfos* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_RecipientInfos (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_RecipientInfos* pSrcValue, ASN1T_PKCS7Stream_RecipientInfos* pDstValue);

EXTERN void asn1Free_PKCS7Stream_RecipientInfos
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_RecipientInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedContentInfo                                      */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_EncryptedContentInfo;

struct EXTERN ASN1T_PKCS7Stream_EncryptedContentInfo : public ASN1TPDU {
   struct {
      unsigned encryptedContentPresent : 1;
   } m;
   ASN1T_PKCS7Stream_ContentType contentType;
   ASN1T_PKCS7Stream_ContentEncryptionAlgorithmIdentifier contentEncryptionAlgorithm;
   ASN1T_PKCS7Stream_EncryptedContent encryptedContent;
   ASN1T_PKCS7Stream_EncryptedContentInfo ();
   ASN1T_PKCS7Stream_EncryptedContentInfo (ASN1C_PKCS7Stream_EncryptedContentInfo& srcData);
   ~ASN1T_PKCS7Stream_EncryptedContentInfo ();
} ;

class EXTERN ASN1C_PKCS7Stream_EncryptedContentInfo :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_EncryptedContentInfo& msgData;
public:
   ASN1C_PKCS7Stream_EncryptedContentInfo (ASN1T_PKCS7Stream_EncryptedContentInfo& data);
   ASN1C_PKCS7Stream_EncryptedContentInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_EncryptedContentInfo& data);
   ASN1C_PKCS7Stream_EncryptedContentInfo (ASN1C_PKCS7Stream_EncryptedContentInfo& original);

   inline ASN1T_PKCS7Stream_EncryptedContentInfo& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_EncryptedContentInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_EncryptedContentInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_EncryptedContentInfo& getCopy (ASN1T_PKCS7Stream_EncryptedContentInfo* pDstData = 0);
   ASN1T_PKCS7Stream_EncryptedContentInfo* newCopy ();

   inline ASN1C_PKCS7Stream_EncryptedContentInfo& operator= (ASN1C_PKCS7Stream_EncryptedContentInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_EncryptedContentInfo (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_EncryptedContentInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_EncryptedContentInfo
   (const char* name, ASN1T_PKCS7Stream_EncryptedContentInfo* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_EncryptedContentInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EncryptedContentInfo* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_EncryptedContentInfo (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EncryptedContentInfo* pValue, ASN1T_PKCS7Stream_EncryptedContentInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_EncryptedContentInfo (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EncryptedContentInfo* pSrcValue, ASN1T_PKCS7Stream_EncryptedContentInfo* pDstValue);

EXTERN void asn1Free_PKCS7Stream_EncryptedContentInfo
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EncryptedContentInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  EnvelopedData                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_EnvelopedData;

struct EXTERN ASN1T_PKCS7Stream_EnvelopedData : public ASN1TPDU {
   ASN1T_PKCS7Stream_Version version;
   ASN1T_PKCS7Stream_RecipientInfos recipientInfos;
   ASN1T_PKCS7Stream_EncryptedContentInfo encryptedContentInfo;
   ASN1T_PKCS7Stream_EnvelopedData ();
   ASN1T_PKCS7Stream_EnvelopedData (ASN1C_PKCS7Stream_EnvelopedData& srcData);
   ~ASN1T_PKCS7Stream_EnvelopedData ();
} ;

class EXTERN ASN1C_PKCS7Stream_EnvelopedData :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_EnvelopedData& msgData;
public:
   ASN1C_PKCS7Stream_EnvelopedData (ASN1T_PKCS7Stream_EnvelopedData& data);
   ASN1C_PKCS7Stream_EnvelopedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_EnvelopedData& data);
   ASN1C_PKCS7Stream_EnvelopedData (ASN1C_PKCS7Stream_EnvelopedData& original);

   inline ASN1T_PKCS7Stream_EnvelopedData& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_EnvelopedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_EnvelopedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_EnvelopedData& getCopy (ASN1T_PKCS7Stream_EnvelopedData* pDstData = 0);
   ASN1T_PKCS7Stream_EnvelopedData* newCopy ();

   inline ASN1C_PKCS7Stream_EnvelopedData& operator= (ASN1C_PKCS7Stream_EnvelopedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_EnvelopedData (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_EnvelopedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_EnvelopedData
   (const char* name, ASN1T_PKCS7Stream_EnvelopedData* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_EnvelopedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EnvelopedData* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_EnvelopedData (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_EnvelopedData* pValue, ASN1T_PKCS7Stream_EnvelopedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_EnvelopedData (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EnvelopedData* pSrcValue, ASN1T_PKCS7Stream_EnvelopedData* pDstValue);

EXTERN void asn1Free_PKCS7Stream_EnvelopedData
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_EnvelopedData* pvalue);

/**************************************************************/
/*                                                            */
/*  SignedAndEnvelopedData                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_SignedAndEnvelopedData;

struct EXTERN ASN1T_PKCS7Stream_SignedAndEnvelopedData : public ASN1TPDU {
   struct {
      unsigned certificatesPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_PKCS7Stream_Version version;
   ASN1T_PKCS7Stream_RecipientInfos recipientInfos;
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers digestAlgorithms;
   ASN1T_PKCS7Stream_EncryptedContentInfo encryptedContentInfo;
   ASN1T_PKCS7Stream_ExtendedCertificatesAndCertificates certificates;
   ASN1T_PKCS7Stream_CertificateRevocationLists crls;
   ASN1T_PKCS7Stream_SignerInfos signerInfos;
   ASN1T_PKCS7Stream_SignedAndEnvelopedData ();
   ASN1T_PKCS7Stream_SignedAndEnvelopedData (ASN1C_PKCS7Stream_SignedAndEnvelopedData& srcData);
   ~ASN1T_PKCS7Stream_SignedAndEnvelopedData ();
} ;

class EXTERN ASN1C_PKCS7Stream_SignedAndEnvelopedData :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_SignedAndEnvelopedData& msgData;
public:
   ASN1C_PKCS7Stream_SignedAndEnvelopedData (ASN1T_PKCS7Stream_SignedAndEnvelopedData& data);
   ASN1C_PKCS7Stream_SignedAndEnvelopedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_SignedAndEnvelopedData& data);
   ASN1C_PKCS7Stream_SignedAndEnvelopedData (ASN1C_PKCS7Stream_SignedAndEnvelopedData& original);

   inline ASN1T_PKCS7Stream_SignedAndEnvelopedData& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_SignedAndEnvelopedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_SignedAndEnvelopedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_SignedAndEnvelopedData& getCopy (ASN1T_PKCS7Stream_SignedAndEnvelopedData* pDstData = 0);
   ASN1T_PKCS7Stream_SignedAndEnvelopedData* newCopy ();

   inline ASN1C_PKCS7Stream_SignedAndEnvelopedData& operator= (ASN1C_PKCS7Stream_SignedAndEnvelopedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_SignedAndEnvelopedData (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_SignedAndEnvelopedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_SignedAndEnvelopedData
   (const char* name, ASN1T_PKCS7Stream_SignedAndEnvelopedData* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_SignedAndEnvelopedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SignedAndEnvelopedData* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_SignedAndEnvelopedData (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SignedAndEnvelopedData* pValue, ASN1T_PKCS7Stream_SignedAndEnvelopedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_SignedAndEnvelopedData (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SignedAndEnvelopedData* pSrcValue, ASN1T_PKCS7Stream_SignedAndEnvelopedData* pDstValue);

EXTERN void asn1Free_PKCS7Stream_SignedAndEnvelopedData
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SignedAndEnvelopedData* pvalue);

/**************************************************************/
/*                                                            */
/*  IssuerSerial                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_IssuerSerial;

struct EXTERN ASN1T_PKCS7Stream_IssuerSerial : public ASN1TPDU {
   ASN1T_IMPStream_GeneralNames issuer;
   ASN1T_EXPStream_CertificateSerialNumber serialNumber;
   ASN1T_PKCS7Stream_IssuerSerial ();
   ASN1T_PKCS7Stream_IssuerSerial (ASN1C_PKCS7Stream_IssuerSerial& srcData);
   ~ASN1T_PKCS7Stream_IssuerSerial ();
} ;

class EXTERN ASN1C_PKCS7Stream_IssuerSerial :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_IssuerSerial& msgData;
public:
   ASN1C_PKCS7Stream_IssuerSerial (ASN1T_PKCS7Stream_IssuerSerial& data);
   ASN1C_PKCS7Stream_IssuerSerial (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_IssuerSerial& data);
   ASN1C_PKCS7Stream_IssuerSerial (ASN1C_PKCS7Stream_IssuerSerial& original);

   inline ASN1T_PKCS7Stream_IssuerSerial& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_IssuerSerial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_IssuerSerial* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_IssuerSerial& getCopy (ASN1T_PKCS7Stream_IssuerSerial* pDstData = 0);
   ASN1T_PKCS7Stream_IssuerSerial* newCopy ();

   inline ASN1C_PKCS7Stream_IssuerSerial& operator= (ASN1C_PKCS7Stream_IssuerSerial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_IssuerSerial (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_IssuerSerial *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_IssuerSerial
   (const char* name, ASN1T_PKCS7Stream_IssuerSerial* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_IssuerSerial
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_IssuerSerial* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_IssuerSerial (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_IssuerSerial* pValue, ASN1T_PKCS7Stream_IssuerSerial* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_IssuerSerial (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_IssuerSerial* pSrcValue, ASN1T_PKCS7Stream_IssuerSerial* pDstValue);

EXTERN void asn1Free_PKCS7Stream_IssuerSerial
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_IssuerSerial* pvalue);

/**************************************************************/
/*                                                            */
/*  ESSCertID                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_ESSCertID;

struct EXTERN ASN1T_PKCS7Stream_ESSCertID : public ASN1TPDU {
   struct {
      unsigned issuerSerialPresent : 1;
   } m;
   ASN1T_PKCS7Stream_Hash certHash;
   ASN1T_PKCS7Stream_IssuerSerial issuerSerial;
   ASN1T_PKCS7Stream_ESSCertID ();
   ASN1T_PKCS7Stream_ESSCertID (ASN1C_PKCS7Stream_ESSCertID& srcData);
   ~ASN1T_PKCS7Stream_ESSCertID ();
} ;

class EXTERN ASN1C_PKCS7Stream_ESSCertID :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_ESSCertID& msgData;
public:
   ASN1C_PKCS7Stream_ESSCertID (ASN1T_PKCS7Stream_ESSCertID& data);
   ASN1C_PKCS7Stream_ESSCertID (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_ESSCertID& data);
   ASN1C_PKCS7Stream_ESSCertID (ASN1C_PKCS7Stream_ESSCertID& original);

   inline ASN1T_PKCS7Stream_ESSCertID& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_ESSCertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_ESSCertID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_ESSCertID& getCopy (ASN1T_PKCS7Stream_ESSCertID* pDstData = 0);
   ASN1T_PKCS7Stream_ESSCertID* newCopy ();

   inline ASN1C_PKCS7Stream_ESSCertID& operator= (ASN1C_PKCS7Stream_ESSCertID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_ESSCertID (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_ESSCertID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_ESSCertID
   (const char* name, ASN1T_PKCS7Stream_ESSCertID* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_ESSCertID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ESSCertID* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_ESSCertID (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_ESSCertID* pValue, ASN1T_PKCS7Stream_ESSCertID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_ESSCertID (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ESSCertID* pSrcValue, ASN1T_PKCS7Stream_ESSCertID* pDstValue);

EXTERN void asn1Free_PKCS7Stream_ESSCertID
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_ESSCertID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfPKCS7Stream_ESSCertID                               */
/*                                                            */
/**************************************************************/

/* List of ASN1T_PKCS7Stream_ESSCertID */
typedef struct EXTERN ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID();
} ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID;

class EXTERN ASN1C_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& msgData;
public:
   ASN1C_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID (ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& data);
   ASN1C_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& data);
   ASN1C_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID (ASN1C_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& original);

   inline ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& getCopy (ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pDstData = 0);
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* newCopy ();

   ASN1C_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& operator= (ASN1C_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID& srcData);
   void Append (ASN1T_PKCS7Stream_ESSCertID *elem);
   ASN1T_PKCS7Stream_ESSCertID *NewElement ();
} ;

EXTERN int asn1BSD_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID
   (const char* name, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID (ASN1ConstCharPtr name, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pValue, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID (ASN1CTXT *pctxt, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pSrcValue, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pDstValue);

EXTERN void asn1Free_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfPKCS7Stream_PolicyInformation                       */
/*                                                            */
/**************************************************************/

/* List of ASN1T_IMPStream_PolicyInformation */
typedef struct EXTERN ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation : public ASN1TPDUSeqOfList {
   ~ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation();
} ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation;

class EXTERN ASN1C_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation :
   public ASN1CSeqOfList
{
protected:
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& msgData;
public:
   ASN1C_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation (ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& data);
   ASN1C_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& data);
   ASN1C_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation (ASN1C_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& original);

   inline ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& getCopy (ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pDstData = 0);
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* newCopy ();

   ASN1C_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& operator= (ASN1C_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation& srcData);
   void Append (ASN1T_IMPStream_PolicyInformation *elem);
   ASN1T_IMPStream_PolicyInformation *NewElement ();
} ;

EXTERN int asn1BSD_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation
   (const char* name, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation (ASN1ConstCharPtr name, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pValue, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation (ASN1CTXT *pctxt, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pSrcValue, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pDstValue);

EXTERN void asn1Free_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  SigningCertificate                                        */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_PKCS7Stream_SigningCertificate;

struct EXTERN ASN1T_PKCS7Stream_SigningCertificate : public ASN1TPDU {
   struct {
      unsigned policiesPresent : 1;
   } m;
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_ESSCertID certs;
   ASN1T_PKCS7Stream__SeqOfPKCS7Stream_PolicyInformation policies;
   ASN1T_PKCS7Stream_SigningCertificate ();
   ASN1T_PKCS7Stream_SigningCertificate (ASN1C_PKCS7Stream_SigningCertificate& srcData);
   ~ASN1T_PKCS7Stream_SigningCertificate ();
} ;

class EXTERN ASN1C_PKCS7Stream_SigningCertificate :
   public ASN1CType
{
protected:
   ASN1T_PKCS7Stream_SigningCertificate& msgData;
public:
   ASN1C_PKCS7Stream_SigningCertificate (ASN1T_PKCS7Stream_SigningCertificate& data);
   ASN1C_PKCS7Stream_SigningCertificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_PKCS7Stream_SigningCertificate& data);
   ASN1C_PKCS7Stream_SigningCertificate (ASN1C_PKCS7Stream_SigningCertificate& original);

   inline ASN1T_PKCS7Stream_SigningCertificate& getData () { return msgData; }
   inline const ASN1T_PKCS7Stream_SigningCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_PKCS7Stream_SigningCertificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_PKCS7Stream_SigningCertificate& getCopy (ASN1T_PKCS7Stream_SigningCertificate* pDstData = 0);
   ASN1T_PKCS7Stream_SigningCertificate* newCopy ();

   inline ASN1C_PKCS7Stream_SigningCertificate& operator= (ASN1C_PKCS7Stream_SigningCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_PKCS7Stream_SigningCertificate (ASN1CTXT* pctxt,
   ASN1T_PKCS7Stream_SigningCertificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_PKCS7Stream_SigningCertificate
   (const char* name, ASN1T_PKCS7Stream_SigningCertificate* pvalue);

EXTERN int asn1PrtToStrm_PKCS7Stream_SigningCertificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SigningCertificate* pvalue);

EXTERN OSBOOL asn1Compare_PKCS7Stream_SigningCertificate (ASN1ConstCharPtr name, ASN1T_PKCS7Stream_SigningCertificate* pValue, ASN1T_PKCS7Stream_SigningCertificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_PKCS7Stream_SigningCertificate (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SigningCertificate* pSrcValue, ASN1T_PKCS7Stream_SigningCertificate* pDstValue);

EXTERN void asn1Free_PKCS7Stream_SigningCertificate
   (ASN1CTXT *pctxt, ASN1T_PKCS7Stream_SigningCertificate* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID PKCS7Stream_pkcs_7;
extern EXTERN ASN1OBJID PKCS7Stream_data;
extern EXTERN ASN1OBJID PKCS7Stream_signedData;
extern EXTERN ASN1OBJID PKCS7Stream_envelopedData;
extern EXTERN ASN1OBJID PKCS7Stream_signedAndEnvelopedData;
extern EXTERN ASN1OBJID PKCS7Stream_digestedData;
extern EXTERN ASN1OBJID PKCS7Stream_encryptedData;
extern EXTERN ASN1OBJID PKCS7Stream_id_aa_signingCertificate;

#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  Version                                                   */
/*                                                            */
/**************************************************************/

struct EXTERN OCSPStream_Version {
   enum Root {
      v1 = 0,
      v2 = 1
   } ;
} ;

typedef OSUINT32 ASN1T_OCSPStream_Version;

class EXTERN ASN1C_OCSPStream_Version :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_Version& msgData;
public:
   ASN1C_OCSPStream_Version (ASN1T_OCSPStream_Version& data);
   ASN1C_OCSPStream_Version (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_Version& data);
   ASN1C_OCSPStream_Version (ASN1C_OCSPStream_Version& original);

   inline ASN1T_OCSPStream_Version& getData () { return msgData; }
   inline const ASN1T_OCSPStream_Version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_Version* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_Version& getCopy (ASN1T_OCSPStream_Version* pDstData = 0);
   ASN1T_OCSPStream_Version* newCopy ();

   inline ASN1C_OCSPStream_Version& operator= (ASN1C_OCSPStream_Version& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_Version (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_Version *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_Version
   (const char* name, ASN1T_OCSPStream_Version* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_Version
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_Version* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_Version (ASN1ConstCharPtr name, ASN1T_OCSPStream_Version* pValue, ASN1T_OCSPStream_Version* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_Version (ASN1CTXT *pctxt, ASN1T_OCSPStream_Version* pSrcValue, ASN1T_OCSPStream_Version* pDstValue);

/**************************************************************/
/*                                                            */
/*  OCSPResponseStatus                                        */
/*                                                            */
/**************************************************************/

struct EXTERN OCSPStream_OCSPResponseStatus {
   enum Root {
      successful = 0,
      malformedRequest = 1,
      internalError = 2,
      tryLater = 3,
      sigRequired = 5,
      unauthorized = 6,
      noMoreData = 7
   } ;
} ;

typedef OSUINT32 ASN1T_OCSPStream_OCSPResponseStatus;

class EXTERN ASN1C_OCSPStream_OCSPResponseStatus :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_OCSPResponseStatus& msgData;
public:
   ASN1C_OCSPStream_OCSPResponseStatus (ASN1T_OCSPStream_OCSPResponseStatus& data);
   ASN1C_OCSPStream_OCSPResponseStatus (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_OCSPResponseStatus& data);
   ASN1C_OCSPStream_OCSPResponseStatus (ASN1C_OCSPStream_OCSPResponseStatus& original);

   inline ASN1T_OCSPStream_OCSPResponseStatus& getData () { return msgData; }
   inline const ASN1T_OCSPStream_OCSPResponseStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_OCSPResponseStatus* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_OCSPResponseStatus& getCopy (ASN1T_OCSPStream_OCSPResponseStatus* pDstData = 0);
   ASN1T_OCSPStream_OCSPResponseStatus* newCopy ();

   inline ASN1C_OCSPStream_OCSPResponseStatus& operator= (ASN1C_OCSPStream_OCSPResponseStatus& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_OCSPResponseStatus (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_OCSPResponseStatus *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_OCSPResponseStatus
   (const char* name, ASN1T_OCSPStream_OCSPResponseStatus* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_OCSPResponseStatus
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_OCSPResponseStatus* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_OCSPResponseStatus (ASN1ConstCharPtr name, ASN1T_OCSPStream_OCSPResponseStatus* pValue, ASN1T_OCSPStream_OCSPResponseStatus* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_OCSPResponseStatus (ASN1CTXT *pctxt, ASN1T_OCSPStream_OCSPResponseStatus* pSrcValue, ASN1T_OCSPStream_OCSPResponseStatus* pDstValue);

/**************************************************************/
/*                                                            */
/*  KeyHash                                                   */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_OCSPStream_KeyHash;

class EXTERN ASN1C_OCSPStream_KeyHash :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_KeyHash& msgData;
public:
   ASN1C_OCSPStream_KeyHash (ASN1T_OCSPStream_KeyHash& data);
   ASN1C_OCSPStream_KeyHash (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_KeyHash& data);
   ASN1C_OCSPStream_KeyHash (ASN1C_OCSPStream_KeyHash& original);

   inline ASN1T_OCSPStream_KeyHash& getData () { return msgData; }
   inline const ASN1T_OCSPStream_KeyHash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_KeyHash* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_KeyHash& getCopy (ASN1T_OCSPStream_KeyHash* pDstData = 0);
   ASN1T_OCSPStream_KeyHash* newCopy ();

   inline ASN1C_OCSPStream_KeyHash& operator= (ASN1C_OCSPStream_KeyHash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_KeyHash (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_KeyHash *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_KeyHash
   (const char* name, ASN1T_OCSPStream_KeyHash* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_KeyHash
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_KeyHash* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_KeyHash (ASN1ConstCharPtr name, ASN1T_OCSPStream_KeyHash* pValue, ASN1T_OCSPStream_KeyHash* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_KeyHash (ASN1CTXT *pctxt, ASN1T_OCSPStream_KeyHash* pSrcValue, ASN1T_OCSPStream_KeyHash* pDstValue);

EXTERN void asn1Free_OCSPStream_KeyHash
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_KeyHash* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLReason                                                 */
/*                                                            */
/**************************************************************/

struct EXTERN OCSPStream_CRLReason {
   enum Root {
      unspecified = 0,
      keyCompromise = 1,
      cACompromise = 2,
      affiliationChanged = 3,
      superseded = 4,
      cessationOfOperation = 5,
      certificateHold = 6,
      removeFromCRL = 8
   } ;
} ;

typedef OSUINT32 ASN1T_OCSPStream_CRLReason;

class EXTERN ASN1C_OCSPStream_CRLReason :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_CRLReason& msgData;
public:
   ASN1C_OCSPStream_CRLReason (ASN1T_OCSPStream_CRLReason& data);
   ASN1C_OCSPStream_CRLReason (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_CRLReason& data);
   ASN1C_OCSPStream_CRLReason (ASN1C_OCSPStream_CRLReason& original);

   inline ASN1T_OCSPStream_CRLReason& getData () { return msgData; }
   inline const ASN1T_OCSPStream_CRLReason& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_CRLReason* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_CRLReason& getCopy (ASN1T_OCSPStream_CRLReason* pDstData = 0);
   ASN1T_OCSPStream_CRLReason* newCopy ();

   inline ASN1C_OCSPStream_CRLReason& operator= (ASN1C_OCSPStream_CRLReason& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_CRLReason (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_CRLReason *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_CRLReason
   (const char* name, ASN1T_OCSPStream_CRLReason* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_CRLReason
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_CRLReason* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_CRLReason (ASN1ConstCharPtr name, ASN1T_OCSPStream_CRLReason* pValue, ASN1T_OCSPStream_CRLReason* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_CRLReason (ASN1CTXT *pctxt, ASN1T_OCSPStream_CRLReason* pSrcValue, ASN1T_OCSPStream_CRLReason* pDstValue);

/**************************************************************/
/*                                                            */
/*  CertID                                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_CertID;

struct EXTERN ASN1T_OCSPStream_CertID : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier hashAlgorithm;
   ASN1TDynOctStr issuerNameHash;
   ASN1TDynOctStr issuerKeyHash;
   ASN1T_EXPStream_CertificateSerialNumber serialNumber;
   ASN1T_OCSPStream_CertID ();
   ASN1T_OCSPStream_CertID (ASN1C_OCSPStream_CertID& srcData);
   ~ASN1T_OCSPStream_CertID ();
} ;

class EXTERN ASN1C_OCSPStream_CertID :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_CertID& msgData;
public:
   ASN1C_OCSPStream_CertID (ASN1T_OCSPStream_CertID& data);
   ASN1C_OCSPStream_CertID (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_CertID& data);
   ASN1C_OCSPStream_CertID (ASN1C_OCSPStream_CertID& original);

   inline ASN1T_OCSPStream_CertID& getData () { return msgData; }
   inline const ASN1T_OCSPStream_CertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_CertID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_CertID& getCopy (ASN1T_OCSPStream_CertID* pDstData = 0);
   ASN1T_OCSPStream_CertID* newCopy ();

   inline ASN1C_OCSPStream_CertID& operator= (ASN1C_OCSPStream_CertID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_CertID (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_CertID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_CertID
   (const char* name, ASN1T_OCSPStream_CertID* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_CertID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_CertID* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_CertID (ASN1ConstCharPtr name, ASN1T_OCSPStream_CertID* pValue, ASN1T_OCSPStream_CertID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_CertID (ASN1CTXT *pctxt, ASN1T_OCSPStream_CertID* pSrcValue, ASN1T_OCSPStream_CertID* pDstValue);

EXTERN void asn1Free_OCSPStream_CertID
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_CertID* pvalue);

/**************************************************************/
/*                                                            */
/*  ReqCert                                                   */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_OCSPStream_ReqCert_certID     1
#define T_OCSPStream_ReqCert_issuerSerial 2
#define T_OCSPStream_ReqCert_pKCert     3
#define T_OCSPStream_ReqCert_name       4
#define T_OCSPStream_ReqCert_certHash   5

class EXTERN ASN1C_OCSPStream_ReqCert;

struct EXTERN ASN1T_OCSPStream_ReqCert : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_OCSPStream_CertID *certID;
      /* t = 2 */
      ASN1T_PKCS7Stream_IssuerAndSerialNumber *issuerSerial;
      /* t = 3 */
      ASN1T_EXPStream_Certificate *pKCert;
      /* t = 4 */
      ASN1T_IMPStream_GeneralName *name;
      /* t = 5 */
      ASN1TDynOctStr *certHash;
   } u;
   ASN1T_OCSPStream_ReqCert () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_OCSPStream_ReqCert (ASN1C_OCSPStream_ReqCert& srcData);
   ~ASN1T_OCSPStream_ReqCert ();
} ;

class EXTERN ASN1C_OCSPStream_ReqCert :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_ReqCert& msgData;
public:
   ASN1C_OCSPStream_ReqCert (ASN1T_OCSPStream_ReqCert& data);
   ASN1C_OCSPStream_ReqCert (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_ReqCert& data);
   ASN1C_OCSPStream_ReqCert (ASN1C_OCSPStream_ReqCert& original);

   inline ASN1T_OCSPStream_ReqCert& getData () { return msgData; }
   inline const ASN1T_OCSPStream_ReqCert& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_ReqCert* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_ReqCert& getCopy (ASN1T_OCSPStream_ReqCert* pDstData = 0);
   ASN1T_OCSPStream_ReqCert* newCopy ();

   inline ASN1C_OCSPStream_ReqCert& operator= (ASN1C_OCSPStream_ReqCert& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_ReqCert (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_ReqCert *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_ReqCert
   (const char* name, ASN1T_OCSPStream_ReqCert* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_ReqCert
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_ReqCert* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_ReqCert (ASN1ConstCharPtr name, ASN1T_OCSPStream_ReqCert* pValue, ASN1T_OCSPStream_ReqCert* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_ReqCert (ASN1CTXT *pctxt, ASN1T_OCSPStream_ReqCert* pSrcValue, ASN1T_OCSPStream_ReqCert* pDstValue);

EXTERN void asn1Free_OCSPStream_ReqCert
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_ReqCert* pvalue);

/**************************************************************/
/*                                                            */
/*  Request                                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_Request;

struct EXTERN ASN1T_OCSPStream_Request : public ASN1TPDU {
   struct {
      unsigned singleRequestExtensionsPresent : 1;
   } m;
   ASN1T_OCSPStream_ReqCert reqCert;
   ASN1T_EXPStream_Extensions singleRequestExtensions;
   ASN1T_OCSPStream_Request ();
   ASN1T_OCSPStream_Request (ASN1C_OCSPStream_Request& srcData);
   ~ASN1T_OCSPStream_Request ();
} ;

class EXTERN ASN1C_OCSPStream_Request :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_Request& msgData;
public:
   ASN1C_OCSPStream_Request (ASN1T_OCSPStream_Request& data);
   ASN1C_OCSPStream_Request (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_Request& data);
   ASN1C_OCSPStream_Request (ASN1C_OCSPStream_Request& original);

   inline ASN1T_OCSPStream_Request& getData () { return msgData; }
   inline const ASN1T_OCSPStream_Request& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_Request* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_Request& getCopy (ASN1T_OCSPStream_Request* pDstData = 0);
   ASN1T_OCSPStream_Request* newCopy ();

   inline ASN1C_OCSPStream_Request& operator= (ASN1C_OCSPStream_Request& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_Request (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_Request *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_Request
   (const char* name, ASN1T_OCSPStream_Request* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_Request
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_Request* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_Request (ASN1ConstCharPtr name, ASN1T_OCSPStream_Request* pValue, ASN1T_OCSPStream_Request* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_Request (ASN1CTXT *pctxt, ASN1T_OCSPStream_Request* pSrcValue, ASN1T_OCSPStream_Request* pDstValue);

EXTERN void asn1Free_OCSPStream_Request
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_Request* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfOCSPStream_Request                                  */
/*                                                            */
/**************************************************************/

/* List of ASN1T_OCSPStream_Request */
typedef struct EXTERN ASN1T_OCSPStream__SeqOfOCSPStream_Request : public ASN1TPDUSeqOfList {
   ~ASN1T_OCSPStream__SeqOfOCSPStream_Request();
} ASN1T_OCSPStream__SeqOfOCSPStream_Request;

class EXTERN ASN1C_OCSPStream__SeqOfOCSPStream_Request :
   public ASN1CSeqOfList
{
protected:
   ASN1T_OCSPStream__SeqOfOCSPStream_Request& msgData;
public:
   ASN1C_OCSPStream__SeqOfOCSPStream_Request (ASN1T_OCSPStream__SeqOfOCSPStream_Request& data);
   ASN1C_OCSPStream__SeqOfOCSPStream_Request (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream__SeqOfOCSPStream_Request& data);
   ASN1C_OCSPStream__SeqOfOCSPStream_Request (ASN1C_OCSPStream__SeqOfOCSPStream_Request& original);

   inline ASN1T_OCSPStream__SeqOfOCSPStream_Request& getData () { return msgData; }
   inline const ASN1T_OCSPStream__SeqOfOCSPStream_Request& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream__SeqOfOCSPStream_Request* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream__SeqOfOCSPStream_Request& getCopy (ASN1T_OCSPStream__SeqOfOCSPStream_Request* pDstData = 0);
   ASN1T_OCSPStream__SeqOfOCSPStream_Request* newCopy ();

   ASN1C_OCSPStream__SeqOfOCSPStream_Request& operator= (ASN1C_OCSPStream__SeqOfOCSPStream_Request& srcData);
   void Append (ASN1T_OCSPStream_Request *elem);
   ASN1T_OCSPStream_Request *NewElement ();
} ;

EXTERN int asn1BSD_OCSPStream__SeqOfOCSPStream_Request (ASN1CTXT* pctxt,
   ASN1T_OCSPStream__SeqOfOCSPStream_Request *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream__SeqOfOCSPStream_Request
   (const char* name, ASN1T_OCSPStream__SeqOfOCSPStream_Request* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream__SeqOfOCSPStream_Request
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream__SeqOfOCSPStream_Request* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream__SeqOfOCSPStream_Request (ASN1ConstCharPtr name, ASN1T_OCSPStream__SeqOfOCSPStream_Request* pValue, ASN1T_OCSPStream__SeqOfOCSPStream_Request* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream__SeqOfOCSPStream_Request (ASN1CTXT *pctxt, ASN1T_OCSPStream__SeqOfOCSPStream_Request* pSrcValue, ASN1T_OCSPStream__SeqOfOCSPStream_Request* pDstValue);

EXTERN void asn1Free_OCSPStream__SeqOfOCSPStream_Request
   (ASN1CTXT *pctxt, ASN1T_OCSPStream__SeqOfOCSPStream_Request* pvalue);

/**************************************************************/
/*                                                            */
/*  TBSRequest                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_TBSRequest;

struct EXTERN ASN1T_OCSPStream_TBSRequest : public ASN1TPDU {
   struct {
      unsigned versionPresent : 1;
      unsigned requestorNamePresent : 1;
      unsigned requestExtensionsPresent : 1;
   } m;
   ASN1T_OCSPStream_Version version;
   ASN1T_IMPStream_GeneralName requestorName;
   ASN1T_OCSPStream__SeqOfOCSPStream_Request requestList;
   ASN1T_EXPStream_Extensions requestExtensions;
   ASN1T_OCSPStream_TBSRequest ();
   ASN1T_OCSPStream_TBSRequest (ASN1C_OCSPStream_TBSRequest& srcData);
   ~ASN1T_OCSPStream_TBSRequest ();
} ;

class EXTERN ASN1C_OCSPStream_TBSRequest :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_TBSRequest& msgData;
public:
   ASN1C_OCSPStream_TBSRequest (ASN1T_OCSPStream_TBSRequest& data);
   ASN1C_OCSPStream_TBSRequest (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_TBSRequest& data);
   ASN1C_OCSPStream_TBSRequest (ASN1C_OCSPStream_TBSRequest& original);

   inline ASN1T_OCSPStream_TBSRequest& getData () { return msgData; }
   inline const ASN1T_OCSPStream_TBSRequest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_TBSRequest* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_TBSRequest& getCopy (ASN1T_OCSPStream_TBSRequest* pDstData = 0);
   ASN1T_OCSPStream_TBSRequest* newCopy ();

   inline ASN1C_OCSPStream_TBSRequest& operator= (ASN1C_OCSPStream_TBSRequest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_TBSRequest (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_TBSRequest *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_TBSRequest
   (const char* name, ASN1T_OCSPStream_TBSRequest* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_TBSRequest
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_TBSRequest* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_TBSRequest (ASN1ConstCharPtr name, ASN1T_OCSPStream_TBSRequest* pValue, ASN1T_OCSPStream_TBSRequest* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_TBSRequest (ASN1CTXT *pctxt, ASN1T_OCSPStream_TBSRequest* pSrcValue, ASN1T_OCSPStream_TBSRequest* pDstValue);

EXTERN void asn1Free_OCSPStream_TBSRequest
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_TBSRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfOCSPStream_Certificate                              */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Certificate */
typedef struct EXTERN ASN1T_OCSPStream__SeqOfOCSPStream_Certificate : public ASN1TPDUSeqOfList {
   ~ASN1T_OCSPStream__SeqOfOCSPStream_Certificate();
} ASN1T_OCSPStream__SeqOfOCSPStream_Certificate;

class EXTERN ASN1C_OCSPStream__SeqOfOCSPStream_Certificate :
   public ASN1CSeqOfList
{
protected:
   ASN1T_OCSPStream__SeqOfOCSPStream_Certificate& msgData;
public:
   ASN1C_OCSPStream__SeqOfOCSPStream_Certificate (ASN1T_OCSPStream__SeqOfOCSPStream_Certificate& data);
   ASN1C_OCSPStream__SeqOfOCSPStream_Certificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream__SeqOfOCSPStream_Certificate& data);
   ASN1C_OCSPStream__SeqOfOCSPStream_Certificate (ASN1C_OCSPStream__SeqOfOCSPStream_Certificate& original);

   inline ASN1T_OCSPStream__SeqOfOCSPStream_Certificate& getData () { return msgData; }
   inline const ASN1T_OCSPStream__SeqOfOCSPStream_Certificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream__SeqOfOCSPStream_Certificate& getCopy (ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pDstData = 0);
   ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* newCopy ();

   ASN1C_OCSPStream__SeqOfOCSPStream_Certificate& operator= (ASN1C_OCSPStream__SeqOfOCSPStream_Certificate& srcData);
   void Append (ASN1T_EXPStream_Certificate *elem);
   ASN1T_EXPStream_Certificate *NewElement ();
} ;

EXTERN int asn1BSD_OCSPStream__SeqOfOCSPStream_Certificate (ASN1CTXT* pctxt,
   ASN1T_OCSPStream__SeqOfOCSPStream_Certificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream__SeqOfOCSPStream_Certificate
   (const char* name, ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream__SeqOfOCSPStream_Certificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream__SeqOfOCSPStream_Certificate (ASN1ConstCharPtr name, ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pValue, ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream__SeqOfOCSPStream_Certificate (ASN1CTXT *pctxt, ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pSrcValue, ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pDstValue);

EXTERN void asn1Free_OCSPStream__SeqOfOCSPStream_Certificate
   (ASN1CTXT *pctxt, ASN1T_OCSPStream__SeqOfOCSPStream_Certificate* pvalue);

/**************************************************************/
/*                                                            */
/*  Signature                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_Signature;

struct EXTERN ASN1T_OCSPStream_Signature : public ASN1TPDU {
   struct {
      unsigned certsPresent : 1;
   } m;
   ASN1T_EXPStream_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature;
   ASN1T_OCSPStream__SeqOfOCSPStream_Certificate certs;
   ASN1T_OCSPStream_Signature ();
   ASN1T_OCSPStream_Signature (ASN1C_OCSPStream_Signature& srcData);
   ~ASN1T_OCSPStream_Signature ();
} ;

class EXTERN ASN1C_OCSPStream_Signature :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_Signature& msgData;
public:
   ASN1C_OCSPStream_Signature (ASN1T_OCSPStream_Signature& data);
   ASN1C_OCSPStream_Signature (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_Signature& data);
   ASN1C_OCSPStream_Signature (ASN1C_OCSPStream_Signature& original);

   inline ASN1T_OCSPStream_Signature& getData () { return msgData; }
   inline const ASN1T_OCSPStream_Signature& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_Signature* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_Signature& getCopy (ASN1T_OCSPStream_Signature* pDstData = 0);
   ASN1T_OCSPStream_Signature* newCopy ();

   inline ASN1C_OCSPStream_Signature& operator= (ASN1C_OCSPStream_Signature& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_Signature (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_Signature *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_Signature
   (const char* name, ASN1T_OCSPStream_Signature* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_Signature
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_Signature* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_Signature (ASN1ConstCharPtr name, ASN1T_OCSPStream_Signature* pValue, ASN1T_OCSPStream_Signature* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_Signature (ASN1CTXT *pctxt, ASN1T_OCSPStream_Signature* pSrcValue, ASN1T_OCSPStream_Signature* pDstValue);

EXTERN void asn1Free_OCSPStream_Signature
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_Signature* pvalue);

/**************************************************************/
/*                                                            */
/*  OCSPRequest                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_OCSPRequest;

struct EXTERN ASN1T_OCSPStream_OCSPRequest : public ASN1TPDU {
   struct {
      unsigned optionalSignaturePresent : 1;
   } m;
   ASN1T_OCSPStream_TBSRequest tbsRequest;
   ASN1T_OCSPStream_Signature optionalSignature;
   ASN1T_OCSPStream_OCSPRequest ();
   ASN1T_OCSPStream_OCSPRequest (ASN1C_OCSPStream_OCSPRequest& srcData);
   ~ASN1T_OCSPStream_OCSPRequest ();
} ;

class EXTERN ASN1C_OCSPStream_OCSPRequest :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_OCSPRequest& msgData;
public:
   ASN1C_OCSPStream_OCSPRequest (ASN1T_OCSPStream_OCSPRequest& data);
   ASN1C_OCSPStream_OCSPRequest (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_OCSPRequest& data);
   ASN1C_OCSPStream_OCSPRequest (ASN1C_OCSPStream_OCSPRequest& original);

   inline ASN1T_OCSPStream_OCSPRequest& getData () { return msgData; }
   inline const ASN1T_OCSPStream_OCSPRequest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_OCSPRequest* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_OCSPRequest& getCopy (ASN1T_OCSPStream_OCSPRequest* pDstData = 0);
   ASN1T_OCSPStream_OCSPRequest* newCopy ();

   inline ASN1C_OCSPStream_OCSPRequest& operator= (ASN1C_OCSPStream_OCSPRequest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_OCSPRequest (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_OCSPRequest *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_OCSPRequest
   (const char* name, ASN1T_OCSPStream_OCSPRequest* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_OCSPRequest
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_OCSPRequest* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_OCSPRequest (ASN1ConstCharPtr name, ASN1T_OCSPStream_OCSPRequest* pValue, ASN1T_OCSPStream_OCSPRequest* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_OCSPRequest (ASN1CTXT *pctxt, ASN1T_OCSPStream_OCSPRequest* pSrcValue, ASN1T_OCSPStream_OCSPRequest* pDstValue);

EXTERN void asn1Free_OCSPStream_OCSPRequest
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_OCSPRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  ResponseBytes                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_ResponseBytes;

struct EXTERN ASN1T_OCSPStream_ResponseBytes : public ASN1TPDU {
   ASN1TObjId responseType;
   ASN1TDynOctStr response;
   ASN1T_OCSPStream_ResponseBytes ();
   ASN1T_OCSPStream_ResponseBytes (ASN1C_OCSPStream_ResponseBytes& srcData);
   ~ASN1T_OCSPStream_ResponseBytes ();
} ;

class EXTERN ASN1C_OCSPStream_ResponseBytes :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_ResponseBytes& msgData;
public:
   ASN1C_OCSPStream_ResponseBytes (ASN1T_OCSPStream_ResponseBytes& data);
   ASN1C_OCSPStream_ResponseBytes (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_ResponseBytes& data);
   ASN1C_OCSPStream_ResponseBytes (ASN1C_OCSPStream_ResponseBytes& original);

   inline ASN1T_OCSPStream_ResponseBytes& getData () { return msgData; }
   inline const ASN1T_OCSPStream_ResponseBytes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_ResponseBytes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_ResponseBytes& getCopy (ASN1T_OCSPStream_ResponseBytes* pDstData = 0);
   ASN1T_OCSPStream_ResponseBytes* newCopy ();

   inline ASN1C_OCSPStream_ResponseBytes& operator= (ASN1C_OCSPStream_ResponseBytes& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_ResponseBytes (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_ResponseBytes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_ResponseBytes
   (const char* name, ASN1T_OCSPStream_ResponseBytes* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_ResponseBytes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_ResponseBytes* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_ResponseBytes (ASN1ConstCharPtr name, ASN1T_OCSPStream_ResponseBytes* pValue, ASN1T_OCSPStream_ResponseBytes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_ResponseBytes (ASN1CTXT *pctxt, ASN1T_OCSPStream_ResponseBytes* pSrcValue, ASN1T_OCSPStream_ResponseBytes* pDstValue);

EXTERN void asn1Free_OCSPStream_ResponseBytes
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_ResponseBytes* pvalue);

/**************************************************************/
/*                                                            */
/*  OCSPResponse                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_OCSPResponse;

struct EXTERN ASN1T_OCSPStream_OCSPResponse : public ASN1TPDU {
   struct {
      unsigned responseBytesPresent : 1;
   } m;
   ASN1T_OCSPStream_OCSPResponseStatus responseStatus;
   ASN1T_OCSPStream_ResponseBytes responseBytes;
   ASN1T_OCSPStream_OCSPResponse ();
   ASN1T_OCSPStream_OCSPResponse (ASN1C_OCSPStream_OCSPResponse& srcData);
   ~ASN1T_OCSPStream_OCSPResponse ();
} ;

class EXTERN ASN1C_OCSPStream_OCSPResponse :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_OCSPResponse& msgData;
public:
   ASN1C_OCSPStream_OCSPResponse (ASN1T_OCSPStream_OCSPResponse& data);
   ASN1C_OCSPStream_OCSPResponse (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_OCSPResponse& data);
   ASN1C_OCSPStream_OCSPResponse (ASN1C_OCSPStream_OCSPResponse& original);

   inline ASN1T_OCSPStream_OCSPResponse& getData () { return msgData; }
   inline const ASN1T_OCSPStream_OCSPResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_OCSPResponse* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_OCSPResponse& getCopy (ASN1T_OCSPStream_OCSPResponse* pDstData = 0);
   ASN1T_OCSPStream_OCSPResponse* newCopy ();

   inline ASN1C_OCSPStream_OCSPResponse& operator= (ASN1C_OCSPStream_OCSPResponse& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_OCSPResponse (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_OCSPResponse *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_OCSPResponse
   (const char* name, ASN1T_OCSPStream_OCSPResponse* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_OCSPResponse
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_OCSPResponse* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_OCSPResponse (ASN1ConstCharPtr name, ASN1T_OCSPStream_OCSPResponse* pValue, ASN1T_OCSPStream_OCSPResponse* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_OCSPResponse (ASN1CTXT *pctxt, ASN1T_OCSPStream_OCSPResponse* pSrcValue, ASN1T_OCSPStream_OCSPResponse* pDstValue);

EXTERN void asn1Free_OCSPStream_OCSPResponse
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_OCSPResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  ResponderID                                               */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_OCSPStream_ResponderID_byName 1
#define T_OCSPStream_ResponderID_byKey  2

class EXTERN ASN1C_OCSPStream_ResponderID;

struct EXTERN ASN1T_OCSPStream_ResponderID : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_EXPStream_Name *byName;
      /* t = 2 */
      ASN1T_OCSPStream_KeyHash *byKey;
   } u;
   ASN1T_OCSPStream_ResponderID () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_OCSPStream_ResponderID (ASN1C_OCSPStream_ResponderID& srcData);
   ~ASN1T_OCSPStream_ResponderID ();
} ;

class EXTERN ASN1C_OCSPStream_ResponderID :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_ResponderID& msgData;
public:
   ASN1C_OCSPStream_ResponderID (ASN1T_OCSPStream_ResponderID& data);
   ASN1C_OCSPStream_ResponderID (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_ResponderID& data);
   ASN1C_OCSPStream_ResponderID (ASN1C_OCSPStream_ResponderID& original);

   inline ASN1T_OCSPStream_ResponderID& getData () { return msgData; }
   inline const ASN1T_OCSPStream_ResponderID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_ResponderID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_ResponderID& getCopy (ASN1T_OCSPStream_ResponderID* pDstData = 0);
   ASN1T_OCSPStream_ResponderID* newCopy ();

   inline ASN1C_OCSPStream_ResponderID& operator= (ASN1C_OCSPStream_ResponderID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_ResponderID (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_ResponderID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_ResponderID
   (const char* name, ASN1T_OCSPStream_ResponderID* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_ResponderID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_ResponderID* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_ResponderID (ASN1ConstCharPtr name, ASN1T_OCSPStream_ResponderID* pValue, ASN1T_OCSPStream_ResponderID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_ResponderID (ASN1CTXT *pctxt, ASN1T_OCSPStream_ResponderID* pSrcValue, ASN1T_OCSPStream_ResponderID* pDstValue);

EXTERN void asn1Free_OCSPStream_ResponderID
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_ResponderID* pvalue);

/**************************************************************/
/*                                                            */
/*  RevokedInfo                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_RevokedInfo;

struct EXTERN ASN1T_OCSPStream_RevokedInfo : public ASN1TPDU {
   struct {
      unsigned revocationReasonPresent : 1;
   } m;
   ASN1GeneralizedTime revocationTime;
   ASN1T_OCSPStream_CRLReason revocationReason;
   ASN1T_OCSPStream_RevokedInfo ();
   ASN1T_OCSPStream_RevokedInfo (ASN1C_OCSPStream_RevokedInfo& srcData);
   ~ASN1T_OCSPStream_RevokedInfo ();
} ;

class EXTERN ASN1C_OCSPStream_RevokedInfo :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_RevokedInfo& msgData;
public:
   ASN1C_OCSPStream_RevokedInfo (ASN1T_OCSPStream_RevokedInfo& data);
   ASN1C_OCSPStream_RevokedInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_RevokedInfo& data);
   ASN1C_OCSPStream_RevokedInfo (ASN1C_OCSPStream_RevokedInfo& original);

   inline ASN1T_OCSPStream_RevokedInfo& getData () { return msgData; }
   inline const ASN1T_OCSPStream_RevokedInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_RevokedInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_RevokedInfo& getCopy (ASN1T_OCSPStream_RevokedInfo* pDstData = 0);
   ASN1T_OCSPStream_RevokedInfo* newCopy ();

   inline ASN1C_OCSPStream_RevokedInfo& operator= (ASN1C_OCSPStream_RevokedInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_RevokedInfo (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_RevokedInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_RevokedInfo
   (const char* name, ASN1T_OCSPStream_RevokedInfo* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_RevokedInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_RevokedInfo* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_RevokedInfo (ASN1ConstCharPtr name, ASN1T_OCSPStream_RevokedInfo* pValue, ASN1T_OCSPStream_RevokedInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_RevokedInfo (ASN1CTXT *pctxt, ASN1T_OCSPStream_RevokedInfo* pSrcValue, ASN1T_OCSPStream_RevokedInfo* pDstValue);

EXTERN void asn1Free_OCSPStream_RevokedInfo
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_RevokedInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  CertStatus                                                */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_OCSPStream_CertStatus_good    1
#define T_OCSPStream_CertStatus_revoked 2
#define T_OCSPStream_CertStatus_unknown 3

class EXTERN ASN1C_OCSPStream_CertStatus;

struct EXTERN ASN1T_OCSPStream_CertStatus : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      /* t = 2 */
      ASN1T_OCSPStream_RevokedInfo *revoked;
      /* t = 3 */
   } u;
   ASN1T_OCSPStream_CertStatus () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_OCSPStream_CertStatus (ASN1C_OCSPStream_CertStatus& srcData);
   ~ASN1T_OCSPStream_CertStatus ();
} ;

class EXTERN ASN1C_OCSPStream_CertStatus :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_CertStatus& msgData;
public:
   ASN1C_OCSPStream_CertStatus (ASN1T_OCSPStream_CertStatus& data);
   ASN1C_OCSPStream_CertStatus (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_CertStatus& data);
   ASN1C_OCSPStream_CertStatus (ASN1C_OCSPStream_CertStatus& original);

   inline ASN1T_OCSPStream_CertStatus& getData () { return msgData; }
   inline const ASN1T_OCSPStream_CertStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_CertStatus* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_CertStatus& getCopy (ASN1T_OCSPStream_CertStatus* pDstData = 0);
   ASN1T_OCSPStream_CertStatus* newCopy ();

   inline ASN1C_OCSPStream_CertStatus& operator= (ASN1C_OCSPStream_CertStatus& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_CertStatus (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_CertStatus *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_CertStatus
   (const char* name, ASN1T_OCSPStream_CertStatus* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_CertStatus
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_CertStatus* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_CertStatus (ASN1ConstCharPtr name, ASN1T_OCSPStream_CertStatus* pValue, ASN1T_OCSPStream_CertStatus* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_CertStatus (ASN1CTXT *pctxt, ASN1T_OCSPStream_CertStatus* pSrcValue, ASN1T_OCSPStream_CertStatus* pDstValue);

EXTERN void asn1Free_OCSPStream_CertStatus
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_CertStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  SingleResponse                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_SingleResponse;

struct EXTERN ASN1T_OCSPStream_SingleResponse : public ASN1TPDU {
   struct {
      unsigned nextUpdatePresent : 1;
      unsigned singleExtensionsPresent : 1;
   } m;
   ASN1T_OCSPStream_ReqCert reqCert;
   ASN1T_OCSPStream_CertStatus certStatus;
   ASN1GeneralizedTime thisUpdate;
   ASN1GeneralizedTime nextUpdate;
   ASN1T_EXPStream_Extensions singleExtensions;
   ASN1T_OCSPStream_SingleResponse ();
   ASN1T_OCSPStream_SingleResponse (ASN1C_OCSPStream_SingleResponse& srcData);
   ~ASN1T_OCSPStream_SingleResponse ();
} ;

class EXTERN ASN1C_OCSPStream_SingleResponse :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_SingleResponse& msgData;
public:
   ASN1C_OCSPStream_SingleResponse (ASN1T_OCSPStream_SingleResponse& data);
   ASN1C_OCSPStream_SingleResponse (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_SingleResponse& data);
   ASN1C_OCSPStream_SingleResponse (ASN1C_OCSPStream_SingleResponse& original);

   inline ASN1T_OCSPStream_SingleResponse& getData () { return msgData; }
   inline const ASN1T_OCSPStream_SingleResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_SingleResponse* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_SingleResponse& getCopy (ASN1T_OCSPStream_SingleResponse* pDstData = 0);
   ASN1T_OCSPStream_SingleResponse* newCopy ();

   inline ASN1C_OCSPStream_SingleResponse& operator= (ASN1C_OCSPStream_SingleResponse& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_SingleResponse (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_SingleResponse *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_SingleResponse
   (const char* name, ASN1T_OCSPStream_SingleResponse* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_SingleResponse
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_SingleResponse* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_SingleResponse (ASN1ConstCharPtr name, ASN1T_OCSPStream_SingleResponse* pValue, ASN1T_OCSPStream_SingleResponse* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_SingleResponse (ASN1CTXT *pctxt, ASN1T_OCSPStream_SingleResponse* pSrcValue, ASN1T_OCSPStream_SingleResponse* pDstValue);

EXTERN void asn1Free_OCSPStream_SingleResponse
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_SingleResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfOCSPStream_SingleResponse                           */
/*                                                            */
/**************************************************************/

/* List of ASN1T_OCSPStream_SingleResponse */
typedef struct EXTERN ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse : public ASN1TPDUSeqOfList {
   ~ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse();
} ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse;

class EXTERN ASN1C_OCSPStream__SeqOfOCSPStream_SingleResponse :
   public ASN1CSeqOfList
{
protected:
   ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse& msgData;
public:
   ASN1C_OCSPStream__SeqOfOCSPStream_SingleResponse (ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse& data);
   ASN1C_OCSPStream__SeqOfOCSPStream_SingleResponse (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse& data);
   ASN1C_OCSPStream__SeqOfOCSPStream_SingleResponse (ASN1C_OCSPStream__SeqOfOCSPStream_SingleResponse& original);

   inline ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse& getData () { return msgData; }
   inline const ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse& getCopy (ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pDstData = 0);
   ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* newCopy ();

   ASN1C_OCSPStream__SeqOfOCSPStream_SingleResponse& operator= (ASN1C_OCSPStream__SeqOfOCSPStream_SingleResponse& srcData);
   void Append (ASN1T_OCSPStream_SingleResponse *elem);
   ASN1T_OCSPStream_SingleResponse *NewElement ();
} ;

EXTERN int asn1BSD_OCSPStream__SeqOfOCSPStream_SingleResponse (ASN1CTXT* pctxt,
   ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream__SeqOfOCSPStream_SingleResponse
   (const char* name, ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream__SeqOfOCSPStream_SingleResponse
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream__SeqOfOCSPStream_SingleResponse (ASN1ConstCharPtr name, ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pValue, ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream__SeqOfOCSPStream_SingleResponse (ASN1CTXT *pctxt, ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pSrcValue, ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pDstValue);

EXTERN void asn1Free_OCSPStream__SeqOfOCSPStream_SingleResponse
   (ASN1CTXT *pctxt, ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  ResponseData                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_ResponseData;

struct EXTERN ASN1T_OCSPStream_ResponseData : public ASN1TPDU {
   struct {
      unsigned versionPresent : 1;
      unsigned responseExtensionsPresent : 1;
   } m;
   ASN1T_OCSPStream_Version version;
   ASN1T_OCSPStream_ResponderID responderID;
   ASN1GeneralizedTime producedAt;
   ASN1T_OCSPStream__SeqOfOCSPStream_SingleResponse responses;
   ASN1T_EXPStream_Extensions responseExtensions;
   ASN1T_OCSPStream_ResponseData ();
   ASN1T_OCSPStream_ResponseData (ASN1C_OCSPStream_ResponseData& srcData);
   ~ASN1T_OCSPStream_ResponseData ();
} ;

class EXTERN ASN1C_OCSPStream_ResponseData :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_ResponseData& msgData;
public:
   ASN1C_OCSPStream_ResponseData (ASN1T_OCSPStream_ResponseData& data);
   ASN1C_OCSPStream_ResponseData (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_ResponseData& data);
   ASN1C_OCSPStream_ResponseData (ASN1C_OCSPStream_ResponseData& original);

   inline ASN1T_OCSPStream_ResponseData& getData () { return msgData; }
   inline const ASN1T_OCSPStream_ResponseData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_ResponseData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_ResponseData& getCopy (ASN1T_OCSPStream_ResponseData* pDstData = 0);
   ASN1T_OCSPStream_ResponseData* newCopy ();

   inline ASN1C_OCSPStream_ResponseData& operator= (ASN1C_OCSPStream_ResponseData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_ResponseData (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_ResponseData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_ResponseData
   (const char* name, ASN1T_OCSPStream_ResponseData* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_ResponseData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_ResponseData* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_ResponseData (ASN1ConstCharPtr name, ASN1T_OCSPStream_ResponseData* pValue, ASN1T_OCSPStream_ResponseData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_ResponseData (ASN1CTXT *pctxt, ASN1T_OCSPStream_ResponseData* pSrcValue, ASN1T_OCSPStream_ResponseData* pDstValue);

EXTERN void asn1Free_OCSPStream_ResponseData
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_ResponseData* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicOCSPResponse                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_OCSPStream_BasicOCSPResponse;

struct EXTERN ASN1T_OCSPStream_BasicOCSPResponse : public ASN1TPDU {
   struct {
      unsigned certsPresent : 1;
   } m;
   ASN1T_OCSPStream_ResponseData tbsResponseData;
   ASN1T_EXPStream_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature;
   ASN1T_OCSPStream__SeqOfOCSPStream_Certificate certs;
   ASN1T_OCSPStream_BasicOCSPResponse ();
   ASN1T_OCSPStream_BasicOCSPResponse (ASN1C_OCSPStream_BasicOCSPResponse& srcData);
   ~ASN1T_OCSPStream_BasicOCSPResponse ();
} ;

class EXTERN ASN1C_OCSPStream_BasicOCSPResponse :
   public ASN1CType
{
protected:
   ASN1T_OCSPStream_BasicOCSPResponse& msgData;
public:
   ASN1C_OCSPStream_BasicOCSPResponse (ASN1T_OCSPStream_BasicOCSPResponse& data);
   ASN1C_OCSPStream_BasicOCSPResponse (
      ASN1MessageBufferIF& msgBuf, ASN1T_OCSPStream_BasicOCSPResponse& data);
   ASN1C_OCSPStream_BasicOCSPResponse (ASN1C_OCSPStream_BasicOCSPResponse& original);

   inline ASN1T_OCSPStream_BasicOCSPResponse& getData () { return msgData; }
   inline const ASN1T_OCSPStream_BasicOCSPResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_OCSPStream_BasicOCSPResponse* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_OCSPStream_BasicOCSPResponse& getCopy (ASN1T_OCSPStream_BasicOCSPResponse* pDstData = 0);
   ASN1T_OCSPStream_BasicOCSPResponse* newCopy ();

   inline ASN1C_OCSPStream_BasicOCSPResponse& operator= (ASN1C_OCSPStream_BasicOCSPResponse& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_OCSPStream_BasicOCSPResponse (ASN1CTXT* pctxt,
   ASN1T_OCSPStream_BasicOCSPResponse *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_OCSPStream_BasicOCSPResponse
   (const char* name, ASN1T_OCSPStream_BasicOCSPResponse* pvalue);

EXTERN int asn1PrtToStrm_OCSPStream_BasicOCSPResponse
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_OCSPStream_BasicOCSPResponse* pvalue);

EXTERN OSBOOL asn1Compare_OCSPStream_BasicOCSPResponse (ASN1ConstCharPtr name, ASN1T_OCSPStream_BasicOCSPResponse* pValue, ASN1T_OCSPStream_BasicOCSPResponse* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_OCSPStream_BasicOCSPResponse (ASN1CTXT *pctxt, ASN1T_OCSPStream_BasicOCSPResponse* pSrcValue, ASN1T_OCSPStream_BasicOCSPResponse* pDstValue);

EXTERN void asn1Free_OCSPStream_BasicOCSPResponse
   (ASN1CTXT *pctxt, ASN1T_OCSPStream_BasicOCSPResponse* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID OCSPStream_id_at_initials;
extern EXTERN ASN1OBJID OCSPStream_id_at_generationQualifier;
extern EXTERN ASN1OBJID OCSPStream_id_pkix_ocsp;
extern EXTERN ASN1OBJID OCSPStream_id_pkix_ocsp_basic;

#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  SignatureValue                                            */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_DERCMSStream_SignatureValue;

class EXTERN ASN1C_DERCMSStream_SignatureValue :
   public ASN1CType
{
protected:
   ASN1T_DERCMSStream_SignatureValue& msgData;
public:
   ASN1C_DERCMSStream_SignatureValue (ASN1T_DERCMSStream_SignatureValue& data);
   ASN1C_DERCMSStream_SignatureValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_DERCMSStream_SignatureValue& data);
   ASN1C_DERCMSStream_SignatureValue (ASN1C_DERCMSStream_SignatureValue& original);

   inline ASN1T_DERCMSStream_SignatureValue& getData () { return msgData; }
   inline const ASN1T_DERCMSStream_SignatureValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_DERCMSStream_SignatureValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_DERCMSStream_SignatureValue& getCopy (ASN1T_DERCMSStream_SignatureValue* pDstData = 0);
   ASN1T_DERCMSStream_SignatureValue* newCopy ();

   inline ASN1C_DERCMSStream_SignatureValue& operator= (ASN1C_DERCMSStream_SignatureValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_DERCMSStream_SignatureValue (ASN1CTXT* pctxt,
   ASN1T_DERCMSStream_SignatureValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_DERCMSStream_SignatureValue
   (const char* name, ASN1T_DERCMSStream_SignatureValue* pvalue);

EXTERN int asn1PrtToStrm_DERCMSStream_SignatureValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_DERCMSStream_SignatureValue* pvalue);

EXTERN OSBOOL asn1Compare_DERCMSStream_SignatureValue (ASN1ConstCharPtr name, ASN1T_DERCMSStream_SignatureValue* pValue, ASN1T_DERCMSStream_SignatureValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_DERCMSStream_SignatureValue (ASN1CTXT *pctxt, ASN1T_DERCMSStream_SignatureValue* pSrcValue, ASN1T_DERCMSStream_SignatureValue* pDstValue);

EXTERN void asn1Free_DERCMSStream_SignatureValue
   (ASN1CTXT *pctxt, ASN1T_DERCMSStream_SignatureValue* pvalue);

/**************************************************************/
/*                                                            */
/*  AuthAttributes                                            */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_DERCMSStream_AuthAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_DERCMSStream_AuthAttributes();
} ASN1T_DERCMSStream_AuthAttributes;

class EXTERN ASN1C_DERCMSStream_AuthAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_DERCMSStream_AuthAttributes& msgData;
public:
   ASN1C_DERCMSStream_AuthAttributes (ASN1T_DERCMSStream_AuthAttributes& data);
   ASN1C_DERCMSStream_AuthAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_DERCMSStream_AuthAttributes& data);
   ASN1C_DERCMSStream_AuthAttributes (ASN1C_DERCMSStream_AuthAttributes& original);

   inline ASN1T_DERCMSStream_AuthAttributes& getData () { return msgData; }
   inline const ASN1T_DERCMSStream_AuthAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_DERCMSStream_AuthAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_DERCMSStream_AuthAttributes& getCopy (ASN1T_DERCMSStream_AuthAttributes* pDstData = 0);
   ASN1T_DERCMSStream_AuthAttributes* newCopy ();

   ASN1C_DERCMSStream_AuthAttributes& operator= (ASN1C_DERCMSStream_AuthAttributes& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_DERCMSStream_AuthAttributes (ASN1CTXT* pctxt,
   ASN1T_DERCMSStream_AuthAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_DERCMSStream_AuthAttributes
   (const char* name, ASN1T_DERCMSStream_AuthAttributes* pvalue);

EXTERN int asn1PrtToStrm_DERCMSStream_AuthAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_DERCMSStream_AuthAttributes* pvalue);

EXTERN OSBOOL asn1Compare_DERCMSStream_AuthAttributes (ASN1ConstCharPtr name, ASN1T_DERCMSStream_AuthAttributes* pValue, ASN1T_DERCMSStream_AuthAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_DERCMSStream_AuthAttributes (ASN1CTXT *pctxt, ASN1T_DERCMSStream_AuthAttributes* pSrcValue, ASN1T_DERCMSStream_AuthAttributes* pDstValue);

EXTERN void asn1Free_DERCMSStream_AuthAttributes
   (ASN1CTXT *pctxt, ASN1T_DERCMSStream_AuthAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  SignedAttributes                                          */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_DERCMSStream_SignedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_DERCMSStream_SignedAttributes();
} ASN1T_DERCMSStream_SignedAttributes;

class EXTERN ASN1C_DERCMSStream_SignedAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_DERCMSStream_SignedAttributes& msgData;
public:
   ASN1C_DERCMSStream_SignedAttributes (ASN1T_DERCMSStream_SignedAttributes& data);
   ASN1C_DERCMSStream_SignedAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_DERCMSStream_SignedAttributes& data);
   ASN1C_DERCMSStream_SignedAttributes (ASN1C_DERCMSStream_SignedAttributes& original);

   inline ASN1T_DERCMSStream_SignedAttributes& getData () { return msgData; }
   inline const ASN1T_DERCMSStream_SignedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_DERCMSStream_SignedAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_DERCMSStream_SignedAttributes& getCopy (ASN1T_DERCMSStream_SignedAttributes* pDstData = 0);
   ASN1T_DERCMSStream_SignedAttributes* newCopy ();

   ASN1C_DERCMSStream_SignedAttributes& operator= (ASN1C_DERCMSStream_SignedAttributes& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_DERCMSStream_SignedAttributes (ASN1CTXT* pctxt,
   ASN1T_DERCMSStream_SignedAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_DERCMSStream_SignedAttributes
   (const char* name, ASN1T_DERCMSStream_SignedAttributes* pvalue);

EXTERN int asn1PrtToStrm_DERCMSStream_SignedAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_DERCMSStream_SignedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_DERCMSStream_SignedAttributes (ASN1ConstCharPtr name, ASN1T_DERCMSStream_SignedAttributes* pValue, ASN1T_DERCMSStream_SignedAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_DERCMSStream_SignedAttributes (ASN1CTXT *pctxt, ASN1T_DERCMSStream_SignedAttributes* pSrcValue, ASN1T_DERCMSStream_SignedAttributes* pDstValue);

EXTERN void asn1Free_DERCMSStream_SignedAttributes
   (ASN1CTXT *pctxt, ASN1T_DERCMSStream_SignedAttributes* pvalue);

#include "ASN1CBitStr.h"
#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  AttCertVersion                                            */
/*                                                            */
/**************************************************************/

struct EXTERN ATTRCERTStream_AttCertVersion {
   enum Root {
      v2 = 1
   } ;
} ;

typedef OSUINT32 ASN1T_ATTRCERTStream_AttCertVersion;

class EXTERN ASN1C_ATTRCERTStream_AttCertVersion :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttCertVersion& msgData;
public:
   ASN1C_ATTRCERTStream_AttCertVersion (ASN1T_ATTRCERTStream_AttCertVersion& data);
   ASN1C_ATTRCERTStream_AttCertVersion (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttCertVersion& data);
   ASN1C_ATTRCERTStream_AttCertVersion (ASN1C_ATTRCERTStream_AttCertVersion& original);

   inline ASN1T_ATTRCERTStream_AttCertVersion& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttCertVersion& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttCertVersion* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttCertVersion& getCopy (ASN1T_ATTRCERTStream_AttCertVersion* pDstData = 0);
   ASN1T_ATTRCERTStream_AttCertVersion* newCopy ();

   inline ASN1C_ATTRCERTStream_AttCertVersion& operator= (ASN1C_ATTRCERTStream_AttCertVersion& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttCertVersion (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttCertVersion *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttCertVersion
   (const char* name, ASN1T_ATTRCERTStream_AttCertVersion* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttCertVersion
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttCertVersion* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttCertVersion (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttCertVersion* pValue, ASN1T_ATTRCERTStream_AttCertVersion* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttCertVersion (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttCertVersion* pSrcValue, ASN1T_ATTRCERTStream_AttCertVersion* pDstValue);

/**************************************************************/
/*                                                            */
/*  ClassList                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_ClassList;

struct EXTERN ASN1T_ATTRCERTStream_ClassList {
   OSUINT32  numbits;
   OSOCTET data[1];
   // ctors
   ASN1T_ATTRCERTStream_ClassList () : numbits(0) {}
   ASN1T_ATTRCERTStream_ClassList (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits(_numbits) {
      memcpy (data, _data, sizeof(data));
   }
   ASN1T_ATTRCERTStream_ClassList (ASN1C_ATTRCERTStream_ClassList& srcData);
} ;

class EXTERN ASN1C_ATTRCERTStream_ClassList :
   public ASN1CBitStr
{
protected:
   ASN1T_ATTRCERTStream_ClassList& msgData;
public:
   // named bits
   enum { unmarked = 0, unclassified = 1, restricted = 2, confidential = 3, secret = 4, topSecret = 5 };

   ASN1C_ATTRCERTStream_ClassList (ASN1T_ATTRCERTStream_ClassList& data);
   ASN1C_ATTRCERTStream_ClassList (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_ClassList& data);
   ASN1C_ATTRCERTStream_ClassList (ASN1C_ATTRCERTStream_ClassList& original);

   inline ASN1T_ATTRCERTStream_ClassList& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_ClassList& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_ClassList* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_ClassList& getCopy (ASN1T_ATTRCERTStream_ClassList* pDstData = 0);
   ASN1T_ATTRCERTStream_ClassList* newCopy ();

   ASN1C_ATTRCERTStream_ClassList& operator= (ASN1C_ATTRCERTStream_ClassList& srcData);
} ;

EXTERN int asn1BSD_ATTRCERTStream_ClassList (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_ClassList *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_ClassList
   (const char* name, ASN1T_ATTRCERTStream_ClassList* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_ClassList
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ClassList* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_ClassList (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ClassList* pValue, ASN1T_ATTRCERTStream_ClassList* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_ClassList (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_ClassList* pSrcValue, ASN1T_ATTRCERTStream_ClassList* pDstValue);

/**************************************************************/
/*                                                            */
/*  AttCertVersionV1                                          */
/*                                                            */
/**************************************************************/

struct EXTERN ATTRCERTStream_AttCertVersionV1 {
   enum Root {
      v1 = 0
   } ;
} ;

typedef OSUINT32 ASN1T_ATTRCERTStream_AttCertVersionV1;

class EXTERN ASN1C_ATTRCERTStream_AttCertVersionV1 :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttCertVersionV1& msgData;
public:
   ASN1C_ATTRCERTStream_AttCertVersionV1 (ASN1T_ATTRCERTStream_AttCertVersionV1& data);
   ASN1C_ATTRCERTStream_AttCertVersionV1 (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttCertVersionV1& data);
   ASN1C_ATTRCERTStream_AttCertVersionV1 (ASN1C_ATTRCERTStream_AttCertVersionV1& original);

   inline ASN1T_ATTRCERTStream_AttCertVersionV1& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttCertVersionV1& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttCertVersionV1* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttCertVersionV1& getCopy (ASN1T_ATTRCERTStream_AttCertVersionV1* pDstData = 0);
   ASN1T_ATTRCERTStream_AttCertVersionV1* newCopy ();

   inline ASN1C_ATTRCERTStream_AttCertVersionV1& operator= (ASN1C_ATTRCERTStream_AttCertVersionV1& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttCertVersionV1 (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttCertVersionV1 *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttCertVersionV1
   (const char* name, ASN1T_ATTRCERTStream_AttCertVersionV1* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttCertVersionV1
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttCertVersionV1* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttCertVersionV1 (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttCertVersionV1* pValue, ASN1T_ATTRCERTStream_AttCertVersionV1* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttCertVersionV1 (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttCertVersionV1* pSrcValue, ASN1T_ATTRCERTStream_AttCertVersionV1* pDstValue);

/**************************************************************/
/*                                                            */
/*  ObjectDigestInfo_digestedObjectType                       */
/*                                                            */
/**************************************************************/

struct EXTERN ATTRCERTStream_ObjectDigestInfo_digestedObjectType {
   enum Root {
      publicKey = 0,
      publicKeyCert = 1,
      otherObjectTypes = 2
   } ;
} ;

typedef OSUINT32 ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType;

class EXTERN ASN1C_ATTRCERTStream_ObjectDigestInfo_digestedObjectType :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& msgData;
public:
   ASN1C_ATTRCERTStream_ObjectDigestInfo_digestedObjectType (ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& data);
   ASN1C_ATTRCERTStream_ObjectDigestInfo_digestedObjectType (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& data);
   ASN1C_ATTRCERTStream_ObjectDigestInfo_digestedObjectType (ASN1C_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& original);

   inline ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& getCopy (ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* pDstData = 0);
   ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* newCopy ();

   inline ASN1C_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& operator= (ASN1C_ATTRCERTStream_ObjectDigestInfo_digestedObjectType& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_ObjectDigestInfo_digestedObjectType (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_ObjectDigestInfo_digestedObjectType
   (const char* name, ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_ObjectDigestInfo_digestedObjectType
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_ObjectDigestInfo_digestedObjectType (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* pValue, ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_ObjectDigestInfo_digestedObjectType (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* pSrcValue, ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType* pDstValue);

/**************************************************************/
/*                                                            */
/*  IssuerSerial                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_IssuerSerial;

struct EXTERN ASN1T_ATTRCERTStream_IssuerSerial : public ASN1TPDU {
   struct {
      unsigned issuerUIDPresent : 1;
   } m;
   ASN1T_IMPStream_GeneralNames issuer;
   ASN1T_EXPStream_CertificateSerialNumber serial;
   ASN1T_EXPStream_UniqueIdentifier issuerUID;
   ASN1T_ATTRCERTStream_IssuerSerial ();
   ASN1T_ATTRCERTStream_IssuerSerial (ASN1C_ATTRCERTStream_IssuerSerial& srcData);
   ~ASN1T_ATTRCERTStream_IssuerSerial ();
} ;

class EXTERN ASN1C_ATTRCERTStream_IssuerSerial :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_IssuerSerial& msgData;
public:
   ASN1C_ATTRCERTStream_IssuerSerial (ASN1T_ATTRCERTStream_IssuerSerial& data);
   ASN1C_ATTRCERTStream_IssuerSerial (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_IssuerSerial& data);
   ASN1C_ATTRCERTStream_IssuerSerial (ASN1C_ATTRCERTStream_IssuerSerial& original);

   inline ASN1T_ATTRCERTStream_IssuerSerial& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_IssuerSerial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_IssuerSerial* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_IssuerSerial& getCopy (ASN1T_ATTRCERTStream_IssuerSerial* pDstData = 0);
   ASN1T_ATTRCERTStream_IssuerSerial* newCopy ();

   inline ASN1C_ATTRCERTStream_IssuerSerial& operator= (ASN1C_ATTRCERTStream_IssuerSerial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_IssuerSerial (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_IssuerSerial *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_IssuerSerial
   (const char* name, ASN1T_ATTRCERTStream_IssuerSerial* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_IssuerSerial
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_IssuerSerial* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_IssuerSerial (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_IssuerSerial* pValue, ASN1T_ATTRCERTStream_IssuerSerial* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_IssuerSerial (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_IssuerSerial* pSrcValue, ASN1T_ATTRCERTStream_IssuerSerial* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_IssuerSerial
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_IssuerSerial* pvalue);

/**************************************************************/
/*                                                            */
/*  ObjectDigestInfo                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_ObjectDigestInfo;

struct EXTERN ASN1T_ATTRCERTStream_ObjectDigestInfo : public ASN1TPDU {
   struct {
      unsigned otherObjectTypeIDPresent : 1;
   } m;
   ASN1T_ATTRCERTStream_ObjectDigestInfo_digestedObjectType digestedObjectType;
   ASN1TObjId otherObjectTypeID;
   ASN1T_EXPStream_AlgorithmIdentifier digestAlgorithm;
   ASN1TDynBitStr objectDigest;
   ASN1T_ATTRCERTStream_ObjectDigestInfo ();
   ASN1T_ATTRCERTStream_ObjectDigestInfo (ASN1C_ATTRCERTStream_ObjectDigestInfo& srcData);
   ~ASN1T_ATTRCERTStream_ObjectDigestInfo ();
} ;

class EXTERN ASN1C_ATTRCERTStream_ObjectDigestInfo :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_ObjectDigestInfo& msgData;
public:
   ASN1C_ATTRCERTStream_ObjectDigestInfo (ASN1T_ATTRCERTStream_ObjectDigestInfo& data);
   ASN1C_ATTRCERTStream_ObjectDigestInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_ObjectDigestInfo& data);
   ASN1C_ATTRCERTStream_ObjectDigestInfo (ASN1C_ATTRCERTStream_ObjectDigestInfo& original);

   inline ASN1T_ATTRCERTStream_ObjectDigestInfo& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_ObjectDigestInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_ObjectDigestInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_ObjectDigestInfo& getCopy (ASN1T_ATTRCERTStream_ObjectDigestInfo* pDstData = 0);
   ASN1T_ATTRCERTStream_ObjectDigestInfo* newCopy ();

   inline ASN1C_ATTRCERTStream_ObjectDigestInfo& operator= (ASN1C_ATTRCERTStream_ObjectDigestInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_ObjectDigestInfo (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_ObjectDigestInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_ObjectDigestInfo
   (const char* name, ASN1T_ATTRCERTStream_ObjectDigestInfo* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_ObjectDigestInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ObjectDigestInfo* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_ObjectDigestInfo (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ObjectDigestInfo* pValue, ASN1T_ATTRCERTStream_ObjectDigestInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_ObjectDigestInfo (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_ObjectDigestInfo* pSrcValue, ASN1T_ATTRCERTStream_ObjectDigestInfo* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_ObjectDigestInfo
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_ObjectDigestInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  Holder                                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_Holder;

struct EXTERN ASN1T_ATTRCERTStream_Holder : public ASN1TPDU {
   struct {
      unsigned baseCertificateIDPresent : 1;
      unsigned entityNamePresent : 1;
      unsigned objectDigestInfoPresent : 1;
   } m;
   ASN1T_ATTRCERTStream_IssuerSerial baseCertificateID;
   ASN1T_IMPStream_GeneralNames entityName;
   ASN1T_ATTRCERTStream_ObjectDigestInfo objectDigestInfo;
   ASN1T_ATTRCERTStream_Holder ();
   ASN1T_ATTRCERTStream_Holder (ASN1C_ATTRCERTStream_Holder& srcData);
   ~ASN1T_ATTRCERTStream_Holder ();
} ;

class EXTERN ASN1C_ATTRCERTStream_Holder :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_Holder& msgData;
public:
   ASN1C_ATTRCERTStream_Holder (ASN1T_ATTRCERTStream_Holder& data);
   ASN1C_ATTRCERTStream_Holder (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_Holder& data);
   ASN1C_ATTRCERTStream_Holder (ASN1C_ATTRCERTStream_Holder& original);

   inline ASN1T_ATTRCERTStream_Holder& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_Holder& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_Holder* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_Holder& getCopy (ASN1T_ATTRCERTStream_Holder* pDstData = 0);
   ASN1T_ATTRCERTStream_Holder* newCopy ();

   inline ASN1C_ATTRCERTStream_Holder& operator= (ASN1C_ATTRCERTStream_Holder& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_Holder (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_Holder *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_Holder
   (const char* name, ASN1T_ATTRCERTStream_Holder* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_Holder
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_Holder* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_Holder (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_Holder* pValue, ASN1T_ATTRCERTStream_Holder* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_Holder (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_Holder* pSrcValue, ASN1T_ATTRCERTStream_Holder* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_Holder
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_Holder* pvalue);

/**************************************************************/
/*                                                            */
/*  V2Form                                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_V2Form;

struct EXTERN ASN1T_ATTRCERTStream_V2Form : public ASN1TPDU {
   struct {
      unsigned issuerNamePresent : 1;
      unsigned baseCertificateIDPresent : 1;
      unsigned objectDigestInfoPresent : 1;
   } m;
   ASN1T_IMPStream_GeneralNames issuerName;
   ASN1T_ATTRCERTStream_IssuerSerial baseCertificateID;
   ASN1T_ATTRCERTStream_ObjectDigestInfo objectDigestInfo;
   ASN1T_ATTRCERTStream_V2Form ();
   ASN1T_ATTRCERTStream_V2Form (ASN1C_ATTRCERTStream_V2Form& srcData);
   ~ASN1T_ATTRCERTStream_V2Form ();
} ;

class EXTERN ASN1C_ATTRCERTStream_V2Form :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_V2Form& msgData;
public:
   ASN1C_ATTRCERTStream_V2Form (ASN1T_ATTRCERTStream_V2Form& data);
   ASN1C_ATTRCERTStream_V2Form (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_V2Form& data);
   ASN1C_ATTRCERTStream_V2Form (ASN1C_ATTRCERTStream_V2Form& original);

   inline ASN1T_ATTRCERTStream_V2Form& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_V2Form& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_V2Form* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_V2Form& getCopy (ASN1T_ATTRCERTStream_V2Form* pDstData = 0);
   ASN1T_ATTRCERTStream_V2Form* newCopy ();

   inline ASN1C_ATTRCERTStream_V2Form& operator= (ASN1C_ATTRCERTStream_V2Form& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_V2Form (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_V2Form *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_V2Form
   (const char* name, ASN1T_ATTRCERTStream_V2Form* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_V2Form
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_V2Form* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_V2Form (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_V2Form* pValue, ASN1T_ATTRCERTStream_V2Form* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_V2Form (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_V2Form* pSrcValue, ASN1T_ATTRCERTStream_V2Form* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_V2Form
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_V2Form* pvalue);

/**************************************************************/
/*                                                            */
/*  AttCertIssuer                                             */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ATTRCERTStream_AttCertIssuer_v1Form 1
#define T_ATTRCERTStream_AttCertIssuer_v2Form 2

class EXTERN ASN1C_ATTRCERTStream_AttCertIssuer;

struct EXTERN ASN1T_ATTRCERTStream_AttCertIssuer : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_IMPStream_GeneralNames *v1Form;
      /* t = 2 */
      ASN1T_ATTRCERTStream_V2Form *v2Form;
   } u;
   ASN1T_ATTRCERTStream_AttCertIssuer () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ATTRCERTStream_AttCertIssuer (ASN1C_ATTRCERTStream_AttCertIssuer& srcData);
   ~ASN1T_ATTRCERTStream_AttCertIssuer ();
} ;

class EXTERN ASN1C_ATTRCERTStream_AttCertIssuer :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttCertIssuer& msgData;
public:
   ASN1C_ATTRCERTStream_AttCertIssuer (ASN1T_ATTRCERTStream_AttCertIssuer& data);
   ASN1C_ATTRCERTStream_AttCertIssuer (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttCertIssuer& data);
   ASN1C_ATTRCERTStream_AttCertIssuer (ASN1C_ATTRCERTStream_AttCertIssuer& original);

   inline ASN1T_ATTRCERTStream_AttCertIssuer& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttCertIssuer& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttCertIssuer* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttCertIssuer& getCopy (ASN1T_ATTRCERTStream_AttCertIssuer* pDstData = 0);
   ASN1T_ATTRCERTStream_AttCertIssuer* newCopy ();

   inline ASN1C_ATTRCERTStream_AttCertIssuer& operator= (ASN1C_ATTRCERTStream_AttCertIssuer& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttCertIssuer (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttCertIssuer *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttCertIssuer
   (const char* name, ASN1T_ATTRCERTStream_AttCertIssuer* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttCertIssuer
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttCertIssuer* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttCertIssuer (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttCertIssuer* pValue, ASN1T_ATTRCERTStream_AttCertIssuer* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttCertIssuer (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttCertIssuer* pSrcValue, ASN1T_ATTRCERTStream_AttCertIssuer* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AttCertIssuer
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttCertIssuer* pvalue);

/**************************************************************/
/*                                                            */
/*  AttCertValidityPeriod                                     */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_AttCertValidityPeriod;

struct EXTERN ASN1T_ATTRCERTStream_AttCertValidityPeriod : public ASN1TPDU {
   ASN1GeneralizedTime notBeforeTime;
   ASN1GeneralizedTime notAfterTime;
   ASN1T_ATTRCERTStream_AttCertValidityPeriod ();
   ASN1T_ATTRCERTStream_AttCertValidityPeriod (ASN1C_ATTRCERTStream_AttCertValidityPeriod& srcData);
   ~ASN1T_ATTRCERTStream_AttCertValidityPeriod ();
} ;

class EXTERN ASN1C_ATTRCERTStream_AttCertValidityPeriod :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttCertValidityPeriod& msgData;
public:
   ASN1C_ATTRCERTStream_AttCertValidityPeriod (ASN1T_ATTRCERTStream_AttCertValidityPeriod& data);
   ASN1C_ATTRCERTStream_AttCertValidityPeriod (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttCertValidityPeriod& data);
   ASN1C_ATTRCERTStream_AttCertValidityPeriod (ASN1C_ATTRCERTStream_AttCertValidityPeriod& original);

   inline ASN1T_ATTRCERTStream_AttCertValidityPeriod& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttCertValidityPeriod& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttCertValidityPeriod* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttCertValidityPeriod& getCopy (ASN1T_ATTRCERTStream_AttCertValidityPeriod* pDstData = 0);
   ASN1T_ATTRCERTStream_AttCertValidityPeriod* newCopy ();

   inline ASN1C_ATTRCERTStream_AttCertValidityPeriod& operator= (ASN1C_ATTRCERTStream_AttCertValidityPeriod& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttCertValidityPeriod (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttCertValidityPeriod *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttCertValidityPeriod
   (const char* name, ASN1T_ATTRCERTStream_AttCertValidityPeriod* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttCertValidityPeriod
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttCertValidityPeriod* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttCertValidityPeriod (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttCertValidityPeriod* pValue, ASN1T_ATTRCERTStream_AttCertValidityPeriod* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttCertValidityPeriod (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttCertValidityPeriod* pSrcValue, ASN1T_ATTRCERTStream_AttCertValidityPeriod* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AttCertValidityPeriod
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttCertValidityPeriod* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfATTRCERTStream_Attribute                            */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute();
} ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute;

class EXTERN ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_Attribute :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& msgData;
public:
   ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_Attribute (ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& data);
   ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_Attribute (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& data);
   ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_Attribute (ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& original);

   inline ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& getCopy (ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pDstData = 0);
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* newCopy ();

   ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& operator= (ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_Attribute& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_ATTRCERTStream__SeqOfATTRCERTStream_Attribute (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream__SeqOfATTRCERTStream_Attribute
   (const char* name, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream__SeqOfATTRCERTStream_Attribute
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream__SeqOfATTRCERTStream_Attribute (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pValue, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream__SeqOfATTRCERTStream_Attribute (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pSrcValue, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pDstValue);

EXTERN void asn1Free_ATTRCERTStream__SeqOfATTRCERTStream_Attribute
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateInfo                                  */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificateInfo;

struct EXTERN ASN1T_ATTRCERTStream_AttributeCertificateInfo : public ASN1TPDU {
   struct {
      unsigned issuerUniqueIDPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_ATTRCERTStream_AttCertVersion version;
   ASN1T_ATTRCERTStream_Holder holder;
   ASN1T_ATTRCERTStream_AttCertIssuer issuer;
   ASN1T_EXPStream_AlgorithmIdentifier signature;
   ASN1T_EXPStream_CertificateSerialNumber serialNumber;
   ASN1T_ATTRCERTStream_AttCertValidityPeriod attrCertValidityPeriod;
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute attributes;
   ASN1T_EXPStream_UniqueIdentifier issuerUniqueID;
   ASN1T_EXPStream_Extensions extensions;
   ASN1T_ATTRCERTStream_AttributeCertificateInfo ();
   ASN1T_ATTRCERTStream_AttributeCertificateInfo (ASN1C_ATTRCERTStream_AttributeCertificateInfo& srcData);
   ~ASN1T_ATTRCERTStream_AttributeCertificateInfo ();
} ;

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificateInfo :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttributeCertificateInfo& msgData;
public:
   ASN1C_ATTRCERTStream_AttributeCertificateInfo (ASN1T_ATTRCERTStream_AttributeCertificateInfo& data);
   ASN1C_ATTRCERTStream_AttributeCertificateInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttributeCertificateInfo& data);
   ASN1C_ATTRCERTStream_AttributeCertificateInfo (ASN1C_ATTRCERTStream_AttributeCertificateInfo& original);

   inline ASN1T_ATTRCERTStream_AttributeCertificateInfo& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttributeCertificateInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttributeCertificateInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttributeCertificateInfo& getCopy (ASN1T_ATTRCERTStream_AttributeCertificateInfo* pDstData = 0);
   ASN1T_ATTRCERTStream_AttributeCertificateInfo* newCopy ();

   inline ASN1C_ATTRCERTStream_AttributeCertificateInfo& operator= (ASN1C_ATTRCERTStream_AttributeCertificateInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttributeCertificateInfo (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttributeCertificateInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttributeCertificateInfo
   (const char* name, ASN1T_ATTRCERTStream_AttributeCertificateInfo* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttributeCertificateInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificateInfo* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttributeCertificateInfo (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificateInfo* pValue, ASN1T_ATTRCERTStream_AttributeCertificateInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttributeCertificateInfo (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificateInfo* pSrcValue, ASN1T_ATTRCERTStream_AttributeCertificateInfo* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AttributeCertificateInfo
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificateInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificate                                      */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificate;

struct EXTERN ASN1T_ATTRCERTStream_AttributeCertificate : public ASN1TPDU {
   ASN1T_ATTRCERTStream_AttributeCertificateInfo acinfo;
   ASN1T_EXPStream_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signatureValue;
   ASN1T_ATTRCERTStream_AttributeCertificate ();
   ASN1T_ATTRCERTStream_AttributeCertificate (ASN1C_ATTRCERTStream_AttributeCertificate& srcData);
   ~ASN1T_ATTRCERTStream_AttributeCertificate ();
} ;

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificate :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttributeCertificate& msgData;
public:
   ASN1C_ATTRCERTStream_AttributeCertificate (ASN1T_ATTRCERTStream_AttributeCertificate& data);
   ASN1C_ATTRCERTStream_AttributeCertificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttributeCertificate& data);
   ASN1C_ATTRCERTStream_AttributeCertificate (ASN1C_ATTRCERTStream_AttributeCertificate& original);

   inline ASN1T_ATTRCERTStream_AttributeCertificate& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttributeCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttributeCertificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttributeCertificate& getCopy (ASN1T_ATTRCERTStream_AttributeCertificate* pDstData = 0);
   ASN1T_ATTRCERTStream_AttributeCertificate* newCopy ();

   inline ASN1C_ATTRCERTStream_AttributeCertificate& operator= (ASN1C_ATTRCERTStream_AttributeCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttributeCertificate (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttributeCertificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttributeCertificate
   (const char* name, ASN1T_ATTRCERTStream_AttributeCertificate* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttributeCertificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificate* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttributeCertificate (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificate* pValue, ASN1T_ATTRCERTStream_AttributeCertificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttributeCertificate (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificate* pSrcValue, ASN1T_ATTRCERTStream_AttributeCertificate* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AttributeCertificate
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  TargetCert                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_TargetCert;

struct EXTERN ASN1T_ATTRCERTStream_TargetCert : public ASN1TPDU {
   struct {
      unsigned targetNamePresent : 1;
      unsigned certDigestInfoPresent : 1;
   } m;
   ASN1T_ATTRCERTStream_IssuerSerial targetCertificate;
   ASN1T_IMPStream_GeneralName targetName;
   ASN1T_ATTRCERTStream_ObjectDigestInfo certDigestInfo;
   ASN1T_ATTRCERTStream_TargetCert ();
   ASN1T_ATTRCERTStream_TargetCert (ASN1C_ATTRCERTStream_TargetCert& srcData);
   ~ASN1T_ATTRCERTStream_TargetCert ();
} ;

class EXTERN ASN1C_ATTRCERTStream_TargetCert :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_TargetCert& msgData;
public:
   ASN1C_ATTRCERTStream_TargetCert (ASN1T_ATTRCERTStream_TargetCert& data);
   ASN1C_ATTRCERTStream_TargetCert (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_TargetCert& data);
   ASN1C_ATTRCERTStream_TargetCert (ASN1C_ATTRCERTStream_TargetCert& original);

   inline ASN1T_ATTRCERTStream_TargetCert& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_TargetCert& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_TargetCert* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_TargetCert& getCopy (ASN1T_ATTRCERTStream_TargetCert* pDstData = 0);
   ASN1T_ATTRCERTStream_TargetCert* newCopy ();

   inline ASN1C_ATTRCERTStream_TargetCert& operator= (ASN1C_ATTRCERTStream_TargetCert& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_TargetCert (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_TargetCert *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_TargetCert
   (const char* name, ASN1T_ATTRCERTStream_TargetCert* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_TargetCert
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_TargetCert* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_TargetCert (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_TargetCert* pValue, ASN1T_ATTRCERTStream_TargetCert* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_TargetCert (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_TargetCert* pSrcValue, ASN1T_ATTRCERTStream_TargetCert* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_TargetCert
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_TargetCert* pvalue);

/**************************************************************/
/*                                                            */
/*  Target                                                    */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ATTRCERTStream_Target_targetName 1
#define T_ATTRCERTStream_Target_targetGroup 2
#define T_ATTRCERTStream_Target_targetCert 3

class EXTERN ASN1C_ATTRCERTStream_Target;

struct EXTERN ASN1T_ATTRCERTStream_Target : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_IMPStream_GeneralName *targetName;
      /* t = 2 */
      ASN1T_IMPStream_GeneralName *targetGroup;
      /* t = 3 */
      ASN1T_ATTRCERTStream_TargetCert *targetCert;
   } u;
   ASN1T_ATTRCERTStream_Target () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ATTRCERTStream_Target (ASN1C_ATTRCERTStream_Target& srcData);
   ~ASN1T_ATTRCERTStream_Target ();
} ;

class EXTERN ASN1C_ATTRCERTStream_Target :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_Target& msgData;
public:
   ASN1C_ATTRCERTStream_Target (ASN1T_ATTRCERTStream_Target& data);
   ASN1C_ATTRCERTStream_Target (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_Target& data);
   ASN1C_ATTRCERTStream_Target (ASN1C_ATTRCERTStream_Target& original);

   inline ASN1T_ATTRCERTStream_Target& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_Target& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_Target* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_Target& getCopy (ASN1T_ATTRCERTStream_Target* pDstData = 0);
   ASN1T_ATTRCERTStream_Target* newCopy ();

   inline ASN1C_ATTRCERTStream_Target& operator= (ASN1C_ATTRCERTStream_Target& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_Target (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_Target *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_Target
   (const char* name, ASN1T_ATTRCERTStream_Target* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_Target
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_Target* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_Target (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_Target* pValue, ASN1T_ATTRCERTStream_Target* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_Target (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_Target* pSrcValue, ASN1T_ATTRCERTStream_Target* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_Target
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_Target* pvalue);

/**************************************************************/
/*                                                            */
/*  Targets                                                   */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ATTRCERTStream_Target */
typedef struct EXTERN ASN1T_ATTRCERTStream_Targets : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERTStream_Targets();
} ASN1T_ATTRCERTStream_Targets;

class EXTERN ASN1C_ATTRCERTStream_Targets :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERTStream_Targets& msgData;
public:
   ASN1C_ATTRCERTStream_Targets (ASN1T_ATTRCERTStream_Targets& data);
   ASN1C_ATTRCERTStream_Targets (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_Targets& data);
   ASN1C_ATTRCERTStream_Targets (ASN1C_ATTRCERTStream_Targets& original);

   inline ASN1T_ATTRCERTStream_Targets& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_Targets& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_Targets* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_Targets& getCopy (ASN1T_ATTRCERTStream_Targets* pDstData = 0);
   ASN1T_ATTRCERTStream_Targets* newCopy ();

   ASN1C_ATTRCERTStream_Targets& operator= (ASN1C_ATTRCERTStream_Targets& srcData);
   void Append (ASN1T_ATTRCERTStream_Target *elem);
   ASN1T_ATTRCERTStream_Target *NewElement ();
} ;

EXTERN int asn1BSD_ATTRCERTStream_Targets (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_Targets *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_Targets
   (const char* name, ASN1T_ATTRCERTStream_Targets* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_Targets
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_Targets* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_Targets (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_Targets* pValue, ASN1T_ATTRCERTStream_Targets* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_Targets (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_Targets* pSrcValue, ASN1T_ATTRCERTStream_Targets* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_Targets
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_Targets* pvalue);

/**************************************************************/
/*                                                            */
/*  IetfAttrSyntax_values_element                             */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ATTRCERTStream_IetfAttrSyntax_values_element_octets 1
#define T_ATTRCERTStream_IetfAttrSyntax_values_element_oid 2
#define T_ATTRCERTStream_IetfAttrSyntax_values_element_string 3

class EXTERN ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element;

struct EXTERN ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1TDynOctStr *octets;
      /* t = 2 */
      ASN1TObjId *oid;
      /* t = 3 */
      ASN1UTF8String string;
   } u;
   ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element (ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element& srcData);
   ~ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element ();
} ;

class EXTERN ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element& msgData;
public:
   ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element (ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element (ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element& original);

   inline ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element& getCopy (ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pDstData = 0);
   ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* newCopy ();

   inline ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element& operator= (ASN1C_ATTRCERTStream_IetfAttrSyntax_values_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_IetfAttrSyntax_values_element (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_IetfAttrSyntax_values_element
   (const char* name, ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_IetfAttrSyntax_values_element
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_IetfAttrSyntax_values_element (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pValue, ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_IetfAttrSyntax_values_element (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pSrcValue, ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_IetfAttrSyntax_values_element
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfATTRCERTStream_IetfAttrSyntax_values_element        */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element */
typedef struct EXTERN ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element();
} ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element;

class EXTERN ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& msgData;
public:
   ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element (ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& data);
   ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element (ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& original);

   inline ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& getCopy (ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pDstData = 0);
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* newCopy ();

   ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& operator= (ASN1C_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element& srcData);
   void Append (ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element *elem);
   ASN1T_ATTRCERTStream_IetfAttrSyntax_values_element *NewElement ();
} ;

EXTERN int asn1BSD_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element
   (const char* name, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pValue, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pSrcValue, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pDstValue);

EXTERN void asn1Free_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element* pvalue);

/**************************************************************/
/*                                                            */
/*  IetfAttrSyntax                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_IetfAttrSyntax;

struct EXTERN ASN1T_ATTRCERTStream_IetfAttrSyntax : public ASN1TPDU {
   struct {
      unsigned policyAuthorityPresent : 1;
   } m;
   ASN1T_IMPStream_GeneralNames policyAuthority;
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_IetfAttrSyntax_values_element values;
   ASN1T_ATTRCERTStream_IetfAttrSyntax ();
   ASN1T_ATTRCERTStream_IetfAttrSyntax (ASN1C_ATTRCERTStream_IetfAttrSyntax& srcData);
   ~ASN1T_ATTRCERTStream_IetfAttrSyntax ();
} ;

class EXTERN ASN1C_ATTRCERTStream_IetfAttrSyntax :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_IetfAttrSyntax& msgData;
public:
   ASN1C_ATTRCERTStream_IetfAttrSyntax (ASN1T_ATTRCERTStream_IetfAttrSyntax& data);
   ASN1C_ATTRCERTStream_IetfAttrSyntax (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_IetfAttrSyntax& data);
   ASN1C_ATTRCERTStream_IetfAttrSyntax (ASN1C_ATTRCERTStream_IetfAttrSyntax& original);

   inline ASN1T_ATTRCERTStream_IetfAttrSyntax& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_IetfAttrSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_IetfAttrSyntax* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_IetfAttrSyntax& getCopy (ASN1T_ATTRCERTStream_IetfAttrSyntax* pDstData = 0);
   ASN1T_ATTRCERTStream_IetfAttrSyntax* newCopy ();

   inline ASN1C_ATTRCERTStream_IetfAttrSyntax& operator= (ASN1C_ATTRCERTStream_IetfAttrSyntax& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_IetfAttrSyntax (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_IetfAttrSyntax *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_IetfAttrSyntax
   (const char* name, ASN1T_ATTRCERTStream_IetfAttrSyntax* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_IetfAttrSyntax
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_IetfAttrSyntax* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_IetfAttrSyntax (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_IetfAttrSyntax* pValue, ASN1T_ATTRCERTStream_IetfAttrSyntax* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_IetfAttrSyntax (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_IetfAttrSyntax* pSrcValue, ASN1T_ATTRCERTStream_IetfAttrSyntax* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_IetfAttrSyntax
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_IetfAttrSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  SvceAuthInfo                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_SvceAuthInfo;

struct EXTERN ASN1T_ATTRCERTStream_SvceAuthInfo : public ASN1TPDU {
   struct {
      unsigned authInfoPresent : 1;
   } m;
   ASN1T_IMPStream_GeneralName service;
   ASN1T_IMPStream_GeneralName ident;
   ASN1TDynOctStr authInfo;
   ASN1T_ATTRCERTStream_SvceAuthInfo ();
   ASN1T_ATTRCERTStream_SvceAuthInfo (ASN1C_ATTRCERTStream_SvceAuthInfo& srcData);
   ~ASN1T_ATTRCERTStream_SvceAuthInfo ();
} ;

class EXTERN ASN1C_ATTRCERTStream_SvceAuthInfo :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_SvceAuthInfo& msgData;
public:
   ASN1C_ATTRCERTStream_SvceAuthInfo (ASN1T_ATTRCERTStream_SvceAuthInfo& data);
   ASN1C_ATTRCERTStream_SvceAuthInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_SvceAuthInfo& data);
   ASN1C_ATTRCERTStream_SvceAuthInfo (ASN1C_ATTRCERTStream_SvceAuthInfo& original);

   inline ASN1T_ATTRCERTStream_SvceAuthInfo& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_SvceAuthInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_SvceAuthInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_SvceAuthInfo& getCopy (ASN1T_ATTRCERTStream_SvceAuthInfo* pDstData = 0);
   ASN1T_ATTRCERTStream_SvceAuthInfo* newCopy ();

   inline ASN1C_ATTRCERTStream_SvceAuthInfo& operator= (ASN1C_ATTRCERTStream_SvceAuthInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_SvceAuthInfo (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_SvceAuthInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_SvceAuthInfo
   (const char* name, ASN1T_ATTRCERTStream_SvceAuthInfo* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_SvceAuthInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_SvceAuthInfo* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_SvceAuthInfo (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_SvceAuthInfo* pValue, ASN1T_ATTRCERTStream_SvceAuthInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_SvceAuthInfo (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_SvceAuthInfo* pSrcValue, ASN1T_ATTRCERTStream_SvceAuthInfo* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_SvceAuthInfo
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_SvceAuthInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RoleSyntax                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_RoleSyntax;

struct EXTERN ASN1T_ATTRCERTStream_RoleSyntax : public ASN1TPDU {
   struct {
      unsigned roleAuthorityPresent : 1;
   } m;
   ASN1T_IMPStream_GeneralNames roleAuthority;
   ASN1T_IMPStream_GeneralName roleName;
   ASN1T_ATTRCERTStream_RoleSyntax ();
   ASN1T_ATTRCERTStream_RoleSyntax (ASN1C_ATTRCERTStream_RoleSyntax& srcData);
   ~ASN1T_ATTRCERTStream_RoleSyntax ();
} ;

class EXTERN ASN1C_ATTRCERTStream_RoleSyntax :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_RoleSyntax& msgData;
public:
   ASN1C_ATTRCERTStream_RoleSyntax (ASN1T_ATTRCERTStream_RoleSyntax& data);
   ASN1C_ATTRCERTStream_RoleSyntax (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_RoleSyntax& data);
   ASN1C_ATTRCERTStream_RoleSyntax (ASN1C_ATTRCERTStream_RoleSyntax& original);

   inline ASN1T_ATTRCERTStream_RoleSyntax& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_RoleSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_RoleSyntax* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_RoleSyntax& getCopy (ASN1T_ATTRCERTStream_RoleSyntax* pDstData = 0);
   ASN1T_ATTRCERTStream_RoleSyntax* newCopy ();

   inline ASN1C_ATTRCERTStream_RoleSyntax& operator= (ASN1C_ATTRCERTStream_RoleSyntax& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_RoleSyntax (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_RoleSyntax *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_RoleSyntax
   (const char* name, ASN1T_ATTRCERTStream_RoleSyntax* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_RoleSyntax
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_RoleSyntax* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_RoleSyntax (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_RoleSyntax* pValue, ASN1T_ATTRCERTStream_RoleSyntax* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_RoleSyntax (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_RoleSyntax* pSrcValue, ASN1T_ATTRCERTStream_RoleSyntax* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_RoleSyntax
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_RoleSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  SecurityCategory                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_SecurityCategory;

struct EXTERN ASN1T_ATTRCERTStream_SecurityCategory : public ASN1TPDU {
   ASN1TObjId type;
   ASN1TOpenType value;
   ASN1T_ATTRCERTStream_SecurityCategory ();
   ASN1T_ATTRCERTStream_SecurityCategory (ASN1C_ATTRCERTStream_SecurityCategory& srcData);
   ~ASN1T_ATTRCERTStream_SecurityCategory ();
} ;

class EXTERN ASN1C_ATTRCERTStream_SecurityCategory :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_SecurityCategory& msgData;
public:
   ASN1C_ATTRCERTStream_SecurityCategory (ASN1T_ATTRCERTStream_SecurityCategory& data);
   ASN1C_ATTRCERTStream_SecurityCategory (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_SecurityCategory& data);
   ASN1C_ATTRCERTStream_SecurityCategory (ASN1C_ATTRCERTStream_SecurityCategory& original);

   inline ASN1T_ATTRCERTStream_SecurityCategory& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_SecurityCategory& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_SecurityCategory* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_SecurityCategory& getCopy (ASN1T_ATTRCERTStream_SecurityCategory* pDstData = 0);
   ASN1T_ATTRCERTStream_SecurityCategory* newCopy ();

   inline ASN1C_ATTRCERTStream_SecurityCategory& operator= (ASN1C_ATTRCERTStream_SecurityCategory& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_SecurityCategory (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_SecurityCategory *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_SecurityCategory
   (const char* name, ASN1T_ATTRCERTStream_SecurityCategory* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_SecurityCategory
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_SecurityCategory* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_SecurityCategory (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_SecurityCategory* pValue, ASN1T_ATTRCERTStream_SecurityCategory* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_SecurityCategory (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_SecurityCategory* pSrcValue, ASN1T_ATTRCERTStream_SecurityCategory* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_SecurityCategory
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_SecurityCategory* pvalue);

/**************************************************************/
/*                                                            */
/*  _SetOfATTRCERTStream_SecurityCategory                     */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ATTRCERTStream_SecurityCategory */
typedef struct EXTERN ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory();
} ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory;

class EXTERN ASN1C_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& msgData;
public:
   ASN1C_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory (ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& data);
   ASN1C_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& data);
   ASN1C_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory (ASN1C_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& original);

   inline ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& getCopy (ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pDstData = 0);
   ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* newCopy ();

   ASN1C_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& operator= (ASN1C_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory& srcData);
   void Append (ASN1T_ATTRCERTStream_SecurityCategory *elem);
   ASN1T_ATTRCERTStream_SecurityCategory *NewElement ();
} ;

EXTERN int asn1BSD_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory
   (const char* name, ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pValue, ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pSrcValue, ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pDstValue);

EXTERN void asn1Free_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory* pvalue);

/**************************************************************/
/*                                                            */
/*  Clearance                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_Clearance;

struct EXTERN ASN1T_ATTRCERTStream_Clearance : public ASN1TPDU {
   struct {
      unsigned classListPresent : 1;
      unsigned securityCategoriesPresent : 1;
   } m;
   ASN1TObjId policyId;
   ASN1T_ATTRCERTStream_ClassList classList;
   ASN1T_ATTRCERTStream__SetOfATTRCERTStream_SecurityCategory securityCategories;
   ASN1T_ATTRCERTStream_Clearance ();
   ASN1T_ATTRCERTStream_Clearance (ASN1C_ATTRCERTStream_Clearance& srcData);
   ~ASN1T_ATTRCERTStream_Clearance ();
} ;

class EXTERN ASN1C_ATTRCERTStream_Clearance :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_Clearance& msgData;
public:
   ASN1C_ATTRCERTStream_Clearance (ASN1T_ATTRCERTStream_Clearance& data);
   ASN1C_ATTRCERTStream_Clearance (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_Clearance& data);
   ASN1C_ATTRCERTStream_Clearance (ASN1C_ATTRCERTStream_Clearance& original);

   inline ASN1T_ATTRCERTStream_Clearance& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_Clearance& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_Clearance* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_Clearance& getCopy (ASN1T_ATTRCERTStream_Clearance* pDstData = 0);
   ASN1T_ATTRCERTStream_Clearance* newCopy ();

   inline ASN1C_ATTRCERTStream_Clearance& operator= (ASN1C_ATTRCERTStream_Clearance& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_Clearance (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_Clearance *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_Clearance
   (const char* name, ASN1T_ATTRCERTStream_Clearance* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_Clearance
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_Clearance* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_Clearance (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_Clearance* pValue, ASN1T_ATTRCERTStream_Clearance* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_Clearance (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_Clearance* pSrcValue, ASN1T_ATTRCERTStream_Clearance* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_Clearance
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_Clearance* pvalue);

/**************************************************************/
/*                                                            */
/*  AttrSpec                                                  */
/*                                                            */
/**************************************************************/

/* List of ASN1TObjId */
typedef struct EXTERN ASN1T_ATTRCERTStream_AttrSpec : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERTStream_AttrSpec();
} ASN1T_ATTRCERTStream_AttrSpec;

class EXTERN ASN1C_ATTRCERTStream_AttrSpec :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERTStream_AttrSpec& msgData;
public:
   ASN1C_ATTRCERTStream_AttrSpec (ASN1T_ATTRCERTStream_AttrSpec& data);
   ASN1C_ATTRCERTStream_AttrSpec (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttrSpec& data);
   ASN1C_ATTRCERTStream_AttrSpec (ASN1C_ATTRCERTStream_AttrSpec& original);

   inline ASN1T_ATTRCERTStream_AttrSpec& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttrSpec& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttrSpec* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttrSpec& getCopy (ASN1T_ATTRCERTStream_AttrSpec* pDstData = 0);
   ASN1T_ATTRCERTStream_AttrSpec* newCopy ();

   ASN1C_ATTRCERTStream_AttrSpec& operator= (ASN1C_ATTRCERTStream_AttrSpec& srcData);
   void Append (ASN1TObjId *elem);
   ASN1TObjId *NewElement ();
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttrSpec (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttrSpec *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttrSpec
   (const char* name, ASN1T_ATTRCERTStream_AttrSpec* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttrSpec
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttrSpec* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttrSpec (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttrSpec* pValue, ASN1T_ATTRCERTStream_AttrSpec* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttrSpec (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttrSpec* pSrcValue, ASN1T_ATTRCERTStream_AttrSpec* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AttrSpec
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttrSpec* pvalue);

/**************************************************************/
/*                                                            */
/*  AAControls                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_AAControls;

struct EXTERN ASN1T_ATTRCERTStream_AAControls : public ASN1TPDU {
   struct {
      unsigned pathLenConstraintPresent : 1;
      unsigned permittedAttrsPresent : 1;
      unsigned excludedAttrsPresent : 1;
   } m;
   OSUINT32 pathLenConstraint;
   ASN1T_ATTRCERTStream_AttrSpec permittedAttrs;
   ASN1T_ATTRCERTStream_AttrSpec excludedAttrs;
   OSBOOL permitUnSpecified;
   ASN1T_ATTRCERTStream_AAControls ();
   ASN1T_ATTRCERTStream_AAControls (ASN1C_ATTRCERTStream_AAControls& srcData);
   ~ASN1T_ATTRCERTStream_AAControls ();
} ;

class EXTERN ASN1C_ATTRCERTStream_AAControls :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AAControls& msgData;
public:
   ASN1C_ATTRCERTStream_AAControls (ASN1T_ATTRCERTStream_AAControls& data);
   ASN1C_ATTRCERTStream_AAControls (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AAControls& data);
   ASN1C_ATTRCERTStream_AAControls (ASN1C_ATTRCERTStream_AAControls& original);

   inline ASN1T_ATTRCERTStream_AAControls& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AAControls& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AAControls* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AAControls& getCopy (ASN1T_ATTRCERTStream_AAControls* pDstData = 0);
   ASN1T_ATTRCERTStream_AAControls* newCopy ();

   inline ASN1C_ATTRCERTStream_AAControls& operator= (ASN1C_ATTRCERTStream_AAControls& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AAControls (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AAControls *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AAControls
   (const char* name, ASN1T_ATTRCERTStream_AAControls* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AAControls
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AAControls* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AAControls (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AAControls* pValue, ASN1T_ATTRCERTStream_AAControls* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AAControls (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AAControls* pSrcValue, ASN1T_ATTRCERTStream_AAControls* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AAControls
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AAControls* pvalue);

/**************************************************************/
/*                                                            */
/*  ACClearAttrs                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_ACClearAttrs;

struct EXTERN ASN1T_ATTRCERTStream_ACClearAttrs : public ASN1TPDU {
   ASN1T_IMPStream_GeneralName acIssuer;
   OSINT32 acSerial;
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute attrs;
   ASN1T_ATTRCERTStream_ACClearAttrs ();
   ASN1T_ATTRCERTStream_ACClearAttrs (ASN1C_ATTRCERTStream_ACClearAttrs& srcData);
   ~ASN1T_ATTRCERTStream_ACClearAttrs ();
} ;

class EXTERN ASN1C_ATTRCERTStream_ACClearAttrs :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_ACClearAttrs& msgData;
public:
   ASN1C_ATTRCERTStream_ACClearAttrs (ASN1T_ATTRCERTStream_ACClearAttrs& data);
   ASN1C_ATTRCERTStream_ACClearAttrs (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_ACClearAttrs& data);
   ASN1C_ATTRCERTStream_ACClearAttrs (ASN1C_ATTRCERTStream_ACClearAttrs& original);

   inline ASN1T_ATTRCERTStream_ACClearAttrs& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_ACClearAttrs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_ACClearAttrs* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_ACClearAttrs& getCopy (ASN1T_ATTRCERTStream_ACClearAttrs* pDstData = 0);
   ASN1T_ATTRCERTStream_ACClearAttrs* newCopy ();

   inline ASN1C_ATTRCERTStream_ACClearAttrs& operator= (ASN1C_ATTRCERTStream_ACClearAttrs& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_ACClearAttrs (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_ACClearAttrs *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_ACClearAttrs
   (const char* name, ASN1T_ATTRCERTStream_ACClearAttrs* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_ACClearAttrs
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ACClearAttrs* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_ACClearAttrs (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ACClearAttrs* pValue, ASN1T_ATTRCERTStream_ACClearAttrs* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_ACClearAttrs (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_ACClearAttrs* pSrcValue, ASN1T_ATTRCERTStream_ACClearAttrs* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_ACClearAttrs
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_ACClearAttrs* pvalue);

/**************************************************************/
/*                                                            */
/*  ProxyInfo                                                 */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ATTRCERTStream_Targets */
typedef struct EXTERN ASN1T_ATTRCERTStream_ProxyInfo : public ASN1TPDUSeqOfList {
   ~ASN1T_ATTRCERTStream_ProxyInfo();
} ASN1T_ATTRCERTStream_ProxyInfo;

class EXTERN ASN1C_ATTRCERTStream_ProxyInfo :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ATTRCERTStream_ProxyInfo& msgData;
public:
   ASN1C_ATTRCERTStream_ProxyInfo (ASN1T_ATTRCERTStream_ProxyInfo& data);
   ASN1C_ATTRCERTStream_ProxyInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_ProxyInfo& data);
   ASN1C_ATTRCERTStream_ProxyInfo (ASN1C_ATTRCERTStream_ProxyInfo& original);

   inline ASN1T_ATTRCERTStream_ProxyInfo& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_ProxyInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_ProxyInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_ProxyInfo& getCopy (ASN1T_ATTRCERTStream_ProxyInfo* pDstData = 0);
   ASN1T_ATTRCERTStream_ProxyInfo* newCopy ();

   ASN1C_ATTRCERTStream_ProxyInfo& operator= (ASN1C_ATTRCERTStream_ProxyInfo& srcData);
   void Append (ASN1T_ATTRCERTStream_Targets *elem);
   ASN1T_ATTRCERTStream_Targets *NewElement ();
} ;

EXTERN int asn1BSD_ATTRCERTStream_ProxyInfo (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_ProxyInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_ProxyInfo
   (const char* name, ASN1T_ATTRCERTStream_ProxyInfo* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_ProxyInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ProxyInfo* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_ProxyInfo (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_ProxyInfo* pValue, ASN1T_ATTRCERTStream_ProxyInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_ProxyInfo (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_ProxyInfo* pSrcValue, ASN1T_ATTRCERTStream_ProxyInfo* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_ProxyInfo
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_ProxyInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateInfoV1_subject                        */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ATTRCERTStream_AttributeCertificateInfoV1_subject_baseCertificateID 1
#define T_ATTRCERTStream_AttributeCertificateInfoV1_subject_subjectName 2

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject;

struct EXTERN ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_ATTRCERTStream_IssuerSerial *baseCertificateID;
      /* t = 2 */
      ASN1T_IMPStream_GeneralNames *subjectName;
   } u;
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject (ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject& srcData);
   ~ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject ();
} ;

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject& msgData;
public:
   ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject (ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject& data);
   ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject& data);
   ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject (ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject& original);

   inline ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject& getCopy (ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pDstData = 0);
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* newCopy ();

   inline ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject& operator= (ASN1C_ATTRCERTStream_AttributeCertificateInfoV1_subject& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttributeCertificateInfoV1_subject (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttributeCertificateInfoV1_subject
   (const char* name, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttributeCertificateInfoV1_subject
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttributeCertificateInfoV1_subject (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pValue, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttributeCertificateInfoV1_subject (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pSrcValue, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AttributeCertificateInfoV1_subject
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateInfoV1                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificateInfoV1;

struct EXTERN ASN1T_ATTRCERTStream_AttributeCertificateInfoV1 : public ASN1TPDU {
   struct {
      unsigned versionPresent : 1;
      unsigned issuerUniqueIDPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_ATTRCERTStream_AttCertVersionV1 version;
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1_subject subject;
   ASN1T_IMPStream_GeneralNames issuer;
   ASN1T_EXPStream_AlgorithmIdentifier signature;
   ASN1T_EXPStream_CertificateSerialNumber serialNumber;
   ASN1T_ATTRCERTStream_AttCertValidityPeriod attCertValidityPeriod;
   ASN1T_ATTRCERTStream__SeqOfATTRCERTStream_Attribute attributes;
   ASN1T_EXPStream_UniqueIdentifier issuerUniqueID;
   ASN1T_EXPStream_Extensions extensions;
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1 ();
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1 (ASN1C_ATTRCERTStream_AttributeCertificateInfoV1& srcData);
   ~ASN1T_ATTRCERTStream_AttributeCertificateInfoV1 ();
} ;

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificateInfoV1 :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1& msgData;
public:
   ASN1C_ATTRCERTStream_AttributeCertificateInfoV1 (ASN1T_ATTRCERTStream_AttributeCertificateInfoV1& data);
   ASN1C_ATTRCERTStream_AttributeCertificateInfoV1 (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1& data);
   ASN1C_ATTRCERTStream_AttributeCertificateInfoV1 (ASN1C_ATTRCERTStream_AttributeCertificateInfoV1& original);

   inline ASN1T_ATTRCERTStream_AttributeCertificateInfoV1& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttributeCertificateInfoV1& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1& getCopy (ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pDstData = 0);
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* newCopy ();

   inline ASN1C_ATTRCERTStream_AttributeCertificateInfoV1& operator= (ASN1C_ATTRCERTStream_AttributeCertificateInfoV1& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttributeCertificateInfoV1 (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1 *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttributeCertificateInfoV1
   (const char* name, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttributeCertificateInfoV1
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttributeCertificateInfoV1 (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pValue, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttributeCertificateInfoV1 (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pSrcValue, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AttributeCertificateInfoV1
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificateInfoV1* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateV1                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificateV1;

struct EXTERN ASN1T_ATTRCERTStream_AttributeCertificateV1 : public ASN1TPDU {
   ASN1T_ATTRCERTStream_AttributeCertificateInfoV1 acInfo;
   ASN1T_EXPStream_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature;
   ASN1T_ATTRCERTStream_AttributeCertificateV1 ();
   ASN1T_ATTRCERTStream_AttributeCertificateV1 (ASN1C_ATTRCERTStream_AttributeCertificateV1& srcData);
   ~ASN1T_ATTRCERTStream_AttributeCertificateV1 ();
} ;

class EXTERN ASN1C_ATTRCERTStream_AttributeCertificateV1 :
   public ASN1CType
{
protected:
   ASN1T_ATTRCERTStream_AttributeCertificateV1& msgData;
public:
   ASN1C_ATTRCERTStream_AttributeCertificateV1 (ASN1T_ATTRCERTStream_AttributeCertificateV1& data);
   ASN1C_ATTRCERTStream_AttributeCertificateV1 (
      ASN1MessageBufferIF& msgBuf, ASN1T_ATTRCERTStream_AttributeCertificateV1& data);
   ASN1C_ATTRCERTStream_AttributeCertificateV1 (ASN1C_ATTRCERTStream_AttributeCertificateV1& original);

   inline ASN1T_ATTRCERTStream_AttributeCertificateV1& getData () { return msgData; }
   inline const ASN1T_ATTRCERTStream_AttributeCertificateV1& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ATTRCERTStream_AttributeCertificateV1* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ATTRCERTStream_AttributeCertificateV1& getCopy (ASN1T_ATTRCERTStream_AttributeCertificateV1* pDstData = 0);
   ASN1T_ATTRCERTStream_AttributeCertificateV1* newCopy ();

   inline ASN1C_ATTRCERTStream_AttributeCertificateV1& operator= (ASN1C_ATTRCERTStream_AttributeCertificateV1& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ATTRCERTStream_AttributeCertificateV1 (ASN1CTXT* pctxt,
   ASN1T_ATTRCERTStream_AttributeCertificateV1 *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ATTRCERTStream_AttributeCertificateV1
   (const char* name, ASN1T_ATTRCERTStream_AttributeCertificateV1* pvalue);

EXTERN int asn1PrtToStrm_ATTRCERTStream_AttributeCertificateV1
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificateV1* pvalue);

EXTERN OSBOOL asn1Compare_ATTRCERTStream_AttributeCertificateV1 (ASN1ConstCharPtr name, ASN1T_ATTRCERTStream_AttributeCertificateV1* pValue, ASN1T_ATTRCERTStream_AttributeCertificateV1* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ATTRCERTStream_AttributeCertificateV1 (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificateV1* pSrcValue, ASN1T_ATTRCERTStream_AttributeCertificateV1* pDstValue);

EXTERN void asn1Free_ATTRCERTStream_AttributeCertificateV1
   (ASN1CTXT *pctxt, ASN1T_ATTRCERTStream_AttributeCertificateV1* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ATTRCERTStream_id_pe_ac_auditIdentity;
extern EXTERN ASN1OBJID ATTRCERTStream_id_pe_aaControls;
extern EXTERN ASN1OBJID ATTRCERTStream_id_pe_ac_proxying;
extern EXTERN ASN1OBJID ATTRCERTStream_id_ce_targetInformation;
extern EXTERN ASN1OBJID ATTRCERTStream_id_aca;
extern EXTERN ASN1OBJID ATTRCERTStream_id_aca_authenticationInfo;
extern EXTERN ASN1OBJID ATTRCERTStream_id_aca_accessIdentity;
extern EXTERN ASN1OBJID ATTRCERTStream_id_aca_chargingIdentity;
extern EXTERN ASN1OBJID ATTRCERTStream_id_aca_group;
extern EXTERN ASN1OBJID ATTRCERTStream_id_aca_encAttrs;
extern EXTERN ASN1OBJID ATTRCERTStream_id_at_role;
extern EXTERN ASN1OBJID ATTRCERTStream_id_at_clearance;

#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  ESYASifreliVeri                                           */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ESYAStream_ESYASifreliVeri;

struct EXTERN ASN1T_ESYAStream_ESYASifreliVeri : public ASN1TPDU {
   ASN1TDynOctStr sifreliAnahtar;
   ASN1TDynOctStr sifreliVeri;
   ASN1T_ESYAStream_ESYASifreliVeri ();
   ASN1T_ESYAStream_ESYASifreliVeri (ASN1C_ESYAStream_ESYASifreliVeri& srcData);
   ~ASN1T_ESYAStream_ESYASifreliVeri ();
} ;

class EXTERN ASN1C_ESYAStream_ESYASifreliVeri :
   public ASN1CType
{
protected:
   ASN1T_ESYAStream_ESYASifreliVeri& msgData;
public:
   ASN1C_ESYAStream_ESYASifreliVeri (ASN1T_ESYAStream_ESYASifreliVeri& data);
   ASN1C_ESYAStream_ESYASifreliVeri (
      ASN1MessageBufferIF& msgBuf, ASN1T_ESYAStream_ESYASifreliVeri& data);
   ASN1C_ESYAStream_ESYASifreliVeri (ASN1C_ESYAStream_ESYASifreliVeri& original);

   inline ASN1T_ESYAStream_ESYASifreliVeri& getData () { return msgData; }
   inline const ASN1T_ESYAStream_ESYASifreliVeri& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ESYAStream_ESYASifreliVeri* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ESYAStream_ESYASifreliVeri& getCopy (ASN1T_ESYAStream_ESYASifreliVeri* pDstData = 0);
   ASN1T_ESYAStream_ESYASifreliVeri* newCopy ();

   inline ASN1C_ESYAStream_ESYASifreliVeri& operator= (ASN1C_ESYAStream_ESYASifreliVeri& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ESYAStream_ESYASifreliVeri (ASN1CTXT* pctxt,
   ASN1T_ESYAStream_ESYASifreliVeri *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ESYAStream_ESYASifreliVeri
   (const char* name, ASN1T_ESYAStream_ESYASifreliVeri* pvalue);

EXTERN int asn1PrtToStrm_ESYAStream_ESYASifreliVeri
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYASifreliVeri* pvalue);

EXTERN OSBOOL asn1Compare_ESYAStream_ESYASifreliVeri (ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYASifreliVeri* pValue, ASN1T_ESYAStream_ESYASifreliVeri* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ESYAStream_ESYASifreliVeri (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYASifreliVeri* pSrcValue, ASN1T_ESYAStream_ESYASifreliVeri* pDstValue);

EXTERN void asn1Free_ESYAStream_ESYASifreliVeri
   (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYASifreliVeri* pvalue);

/**************************************************************/
/*                                                            */
/*  ESYASimetrikAnahtar                                       */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ESYAStream_ESYASimetrikAnahtar;

struct EXTERN ASN1T_ESYAStream_ESYASimetrikAnahtar : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier algorithm;
   ASN1TDynOctStr simetrikAnahtar;
   ASN1T_ESYAStream_ESYASimetrikAnahtar ();
   ASN1T_ESYAStream_ESYASimetrikAnahtar (ASN1C_ESYAStream_ESYASimetrikAnahtar& srcData);
   ~ASN1T_ESYAStream_ESYASimetrikAnahtar ();
} ;

class EXTERN ASN1C_ESYAStream_ESYASimetrikAnahtar :
   public ASN1CType
{
protected:
   ASN1T_ESYAStream_ESYASimetrikAnahtar& msgData;
public:
   ASN1C_ESYAStream_ESYASimetrikAnahtar (ASN1T_ESYAStream_ESYASimetrikAnahtar& data);
   ASN1C_ESYAStream_ESYASimetrikAnahtar (
      ASN1MessageBufferIF& msgBuf, ASN1T_ESYAStream_ESYASimetrikAnahtar& data);
   ASN1C_ESYAStream_ESYASimetrikAnahtar (ASN1C_ESYAStream_ESYASimetrikAnahtar& original);

   inline ASN1T_ESYAStream_ESYASimetrikAnahtar& getData () { return msgData; }
   inline const ASN1T_ESYAStream_ESYASimetrikAnahtar& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ESYAStream_ESYASimetrikAnahtar* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ESYAStream_ESYASimetrikAnahtar& getCopy (ASN1T_ESYAStream_ESYASimetrikAnahtar* pDstData = 0);
   ASN1T_ESYAStream_ESYASimetrikAnahtar* newCopy ();

   inline ASN1C_ESYAStream_ESYASimetrikAnahtar& operator= (ASN1C_ESYAStream_ESYASimetrikAnahtar& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ESYAStream_ESYASimetrikAnahtar (ASN1CTXT* pctxt,
   ASN1T_ESYAStream_ESYASimetrikAnahtar *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ESYAStream_ESYASimetrikAnahtar
   (const char* name, ASN1T_ESYAStream_ESYASimetrikAnahtar* pvalue);

EXTERN int asn1PrtToStrm_ESYAStream_ESYASimetrikAnahtar
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYASimetrikAnahtar* pvalue);

EXTERN OSBOOL asn1Compare_ESYAStream_ESYASimetrikAnahtar (ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYASimetrikAnahtar* pValue, ASN1T_ESYAStream_ESYASimetrikAnahtar* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ESYAStream_ESYASimetrikAnahtar (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYASimetrikAnahtar* pSrcValue, ASN1T_ESYAStream_ESYASimetrikAnahtar* pDstValue);

EXTERN void asn1Free_ESYAStream_ESYASimetrikAnahtar
   (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYASimetrikAnahtar* pvalue);

/**************************************************************/
/*                                                            */
/*  ESYASimImzAnahtari                                        */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ESYAStream_ESYASimImzAnahtari;

struct EXTERN ASN1T_ESYAStream_ESYASimImzAnahtari : public ASN1TPDU {
   OSINT32 anahNo;
   ASN1T_EXPStream_AlgorithmIdentifier hashAlg;
   ASN1T_EXPStream_AlgorithmIdentifier simetrikAlg;
   ASN1TDynOctStr anahtarBytes;
   ASN1T_ESYAStream_ESYASimImzAnahtari ();
   ASN1T_ESYAStream_ESYASimImzAnahtari (ASN1C_ESYAStream_ESYASimImzAnahtari& srcData);
   ~ASN1T_ESYAStream_ESYASimImzAnahtari ();
} ;

class EXTERN ASN1C_ESYAStream_ESYASimImzAnahtari :
   public ASN1CType
{
protected:
   ASN1T_ESYAStream_ESYASimImzAnahtari& msgData;
public:
   ASN1C_ESYAStream_ESYASimImzAnahtari (ASN1T_ESYAStream_ESYASimImzAnahtari& data);
   ASN1C_ESYAStream_ESYASimImzAnahtari (
      ASN1MessageBufferIF& msgBuf, ASN1T_ESYAStream_ESYASimImzAnahtari& data);
   ASN1C_ESYAStream_ESYASimImzAnahtari (ASN1C_ESYAStream_ESYASimImzAnahtari& original);

   inline ASN1T_ESYAStream_ESYASimImzAnahtari& getData () { return msgData; }
   inline const ASN1T_ESYAStream_ESYASimImzAnahtari& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ESYAStream_ESYASimImzAnahtari* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ESYAStream_ESYASimImzAnahtari& getCopy (ASN1T_ESYAStream_ESYASimImzAnahtari* pDstData = 0);
   ASN1T_ESYAStream_ESYASimImzAnahtari* newCopy ();

   inline ASN1C_ESYAStream_ESYASimImzAnahtari& operator= (ASN1C_ESYAStream_ESYASimImzAnahtari& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ESYAStream_ESYASimImzAnahtari (ASN1CTXT* pctxt,
   ASN1T_ESYAStream_ESYASimImzAnahtari *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ESYAStream_ESYASimImzAnahtari
   (const char* name, ASN1T_ESYAStream_ESYASimImzAnahtari* pvalue);

EXTERN int asn1PrtToStrm_ESYAStream_ESYASimImzAnahtari
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYASimImzAnahtari* pvalue);

EXTERN OSBOOL asn1Compare_ESYAStream_ESYASimImzAnahtari (ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYASimImzAnahtari* pValue, ASN1T_ESYAStream_ESYASimImzAnahtari* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ESYAStream_ESYASimImzAnahtari (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYASimImzAnahtari* pSrcValue, ASN1T_ESYAStream_ESYASimImzAnahtari* pDstValue);

EXTERN void asn1Free_ESYAStream_ESYASimImzAnahtari
   (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYASimImzAnahtari* pvalue);

/**************************************************************/
/*                                                            */
/*  ESYASimImzAnahtarlari                                     */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ESYAStream_ESYASimImzAnahtari */
typedef struct EXTERN ASN1T_ESYAStream_ESYASimImzAnahtarlari : public ASN1TPDUSeqOfList {
   ~ASN1T_ESYAStream_ESYASimImzAnahtarlari();
} ASN1T_ESYAStream_ESYASimImzAnahtarlari;

class EXTERN ASN1C_ESYAStream_ESYASimImzAnahtarlari :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ESYAStream_ESYASimImzAnahtarlari& msgData;
public:
   ASN1C_ESYAStream_ESYASimImzAnahtarlari (ASN1T_ESYAStream_ESYASimImzAnahtarlari& data);
   ASN1C_ESYAStream_ESYASimImzAnahtarlari (
      ASN1MessageBufferIF& msgBuf, ASN1T_ESYAStream_ESYASimImzAnahtarlari& data);
   ASN1C_ESYAStream_ESYASimImzAnahtarlari (ASN1C_ESYAStream_ESYASimImzAnahtarlari& original);

   inline ASN1T_ESYAStream_ESYASimImzAnahtarlari& getData () { return msgData; }
   inline const ASN1T_ESYAStream_ESYASimImzAnahtarlari& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ESYAStream_ESYASimImzAnahtarlari* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ESYAStream_ESYASimImzAnahtarlari& getCopy (ASN1T_ESYAStream_ESYASimImzAnahtarlari* pDstData = 0);
   ASN1T_ESYAStream_ESYASimImzAnahtarlari* newCopy ();

   ASN1C_ESYAStream_ESYASimImzAnahtarlari& operator= (ASN1C_ESYAStream_ESYASimImzAnahtarlari& srcData);
   void Append (ASN1T_ESYAStream_ESYASimImzAnahtari *elem);
   ASN1T_ESYAStream_ESYASimImzAnahtari *NewElement ();
} ;

EXTERN int asn1BSD_ESYAStream_ESYASimImzAnahtarlari (ASN1CTXT* pctxt,
   ASN1T_ESYAStream_ESYASimImzAnahtarlari *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ESYAStream_ESYASimImzAnahtarlari
   (const char* name, ASN1T_ESYAStream_ESYASimImzAnahtarlari* pvalue);

EXTERN int asn1PrtToStrm_ESYAStream_ESYASimImzAnahtarlari
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYASimImzAnahtarlari* pvalue);

EXTERN OSBOOL asn1Compare_ESYAStream_ESYASimImzAnahtarlari (ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYASimImzAnahtarlari* pValue, ASN1T_ESYAStream_ESYASimImzAnahtarlari* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ESYAStream_ESYASimImzAnahtarlari (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYASimImzAnahtarlari* pSrcValue, ASN1T_ESYAStream_ESYASimImzAnahtarlari* pDstValue);

EXTERN void asn1Free_ESYAStream_ESYASimImzAnahtarlari
   (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYASimImzAnahtarlari* pvalue);

/**************************************************************/
/*                                                            */
/*  ESYAVTImza                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ESYAStream_ESYAVTImza;

struct EXTERN ASN1T_ESYAStream_ESYAVTImza : public ASN1TPDU {
   OSINT32 anahNo;
   ASN1TDynOctStr imzaliVeri;
   ASN1T_ESYAStream_ESYAVTImza ();
   ASN1T_ESYAStream_ESYAVTImza (ASN1C_ESYAStream_ESYAVTImza& srcData);
   ~ASN1T_ESYAStream_ESYAVTImza ();
} ;

class EXTERN ASN1C_ESYAStream_ESYAVTImza :
   public ASN1CType
{
protected:
   ASN1T_ESYAStream_ESYAVTImza& msgData;
public:
   ASN1C_ESYAStream_ESYAVTImza (ASN1T_ESYAStream_ESYAVTImza& data);
   ASN1C_ESYAStream_ESYAVTImza (
      ASN1MessageBufferIF& msgBuf, ASN1T_ESYAStream_ESYAVTImza& data);
   ASN1C_ESYAStream_ESYAVTImza (ASN1C_ESYAStream_ESYAVTImza& original);

   inline ASN1T_ESYAStream_ESYAVTImza& getData () { return msgData; }
   inline const ASN1T_ESYAStream_ESYAVTImza& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ESYAStream_ESYAVTImza* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ESYAStream_ESYAVTImza& getCopy (ASN1T_ESYAStream_ESYAVTImza* pDstData = 0);
   ASN1T_ESYAStream_ESYAVTImza* newCopy ();

   inline ASN1C_ESYAStream_ESYAVTImza& operator= (ASN1C_ESYAStream_ESYAVTImza& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ESYAStream_ESYAVTImza (ASN1CTXT* pctxt,
   ASN1T_ESYAStream_ESYAVTImza *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ESYAStream_ESYAVTImza
   (const char* name, ASN1T_ESYAStream_ESYAVTImza* pvalue);

EXTERN int asn1PrtToStrm_ESYAStream_ESYAVTImza
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYAVTImza* pvalue);

EXTERN OSBOOL asn1Compare_ESYAStream_ESYAVTImza (ASN1ConstCharPtr name, ASN1T_ESYAStream_ESYAVTImza* pValue, ASN1T_ESYAStream_ESYAVTImza* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ESYAStream_ESYAVTImza (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYAVTImza* pSrcValue, ASN1T_ESYAStream_ESYAVTImza* pDstValue);

EXTERN void asn1Free_ESYAStream_ESYAVTImza
   (ASN1CTXT *pctxt, ASN1T_ESYAStream_ESYAVTImza* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ESYAStream_id_uekae;
extern EXTERN ASN1OBJID ESYAStream_id_esya;
extern EXTERN ASN1OBJID ESYAStream_id_servisler;
extern EXTERN ASN1OBJID ESYAStream_id_refno;
extern EXTERN ASN1OBJID ESYAStream_id_kartSeriNo;
extern EXTERN ASN1OBJID ESYAStream_id_kartUreticiNo;
extern EXTERN ASN1OBJID ESYAStream_id_sablonNo;
extern EXTERN ASN1OBJID ESYAStream_id_ESYAyonetici;
extern EXTERN ASN1OBJID ESYAStream_id_ESYAkayitci;

#include "ASN1CSeqOfList.h"
#include "ASN1CBitStr.h"

/**************************************************************/
/*                                                            */
/*  ContentType                                               */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_CMSStream_ContentType;

class EXTERN ASN1C_CMSStream_ContentType :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_ContentType& msgData;
public:
   ASN1C_CMSStream_ContentType (ASN1T_CMSStream_ContentType& data);
   ASN1C_CMSStream_ContentType (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_ContentType& data);
   ASN1C_CMSStream_ContentType (ASN1C_CMSStream_ContentType& original);

   inline ASN1T_CMSStream_ContentType& getData () { return msgData; }
   inline const ASN1T_CMSStream_ContentType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_ContentType* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_ContentType& getCopy (ASN1T_CMSStream_ContentType* pDstData = 0);
   ASN1T_CMSStream_ContentType* newCopy ();

   inline ASN1C_CMSStream_ContentType& operator= (ASN1C_CMSStream_ContentType& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_ContentType (ASN1CTXT* pctxt,
   ASN1T_CMSStream_ContentType *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_ContentType
   (const char* name, ASN1T_CMSStream_ContentType* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_ContentType
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_ContentType* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_ContentType (ASN1ConstCharPtr name, ASN1T_CMSStream_ContentType* pValue, ASN1T_CMSStream_ContentType* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_ContentType (ASN1CTXT *pctxt, ASN1T_CMSStream_ContentType* pSrcValue, ASN1T_CMSStream_ContentType* pDstValue);

/**************************************************************/
/*                                                            */
/*  EncryptedKey                                              */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_CMSStream_EncryptedKey;

class EXTERN ASN1C_CMSStream_EncryptedKey :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_EncryptedKey& msgData;
public:
   ASN1C_CMSStream_EncryptedKey (ASN1T_CMSStream_EncryptedKey& data);
   ASN1C_CMSStream_EncryptedKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_EncryptedKey& data);
   ASN1C_CMSStream_EncryptedKey (ASN1C_CMSStream_EncryptedKey& original);

   inline ASN1T_CMSStream_EncryptedKey& getData () { return msgData; }
   inline const ASN1T_CMSStream_EncryptedKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_EncryptedKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_EncryptedKey& getCopy (ASN1T_CMSStream_EncryptedKey* pDstData = 0);
   ASN1T_CMSStream_EncryptedKey* newCopy ();

   inline ASN1C_CMSStream_EncryptedKey& operator= (ASN1C_CMSStream_EncryptedKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_EncryptedKey (ASN1CTXT* pctxt,
   ASN1T_CMSStream_EncryptedKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_EncryptedKey
   (const char* name, ASN1T_CMSStream_EncryptedKey* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_EncryptedKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_EncryptedKey* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_EncryptedKey (ASN1ConstCharPtr name, ASN1T_CMSStream_EncryptedKey* pValue, ASN1T_CMSStream_EncryptedKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_EncryptedKey (ASN1CTXT *pctxt, ASN1T_CMSStream_EncryptedKey* pSrcValue, ASN1T_CMSStream_EncryptedKey* pDstValue);

EXTERN void asn1Free_CMSStream_EncryptedKey
   (ASN1CTXT *pctxt, ASN1T_CMSStream_EncryptedKey* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectKeyIdentifier                                      */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_CMSStream_SubjectKeyIdentifier;

class EXTERN ASN1C_CMSStream_SubjectKeyIdentifier :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_SubjectKeyIdentifier& msgData;
public:
   ASN1C_CMSStream_SubjectKeyIdentifier (ASN1T_CMSStream_SubjectKeyIdentifier& data);
   ASN1C_CMSStream_SubjectKeyIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_SubjectKeyIdentifier& data);
   ASN1C_CMSStream_SubjectKeyIdentifier (ASN1C_CMSStream_SubjectKeyIdentifier& original);

   inline ASN1T_CMSStream_SubjectKeyIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_SubjectKeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_SubjectKeyIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_SubjectKeyIdentifier& getCopy (ASN1T_CMSStream_SubjectKeyIdentifier* pDstData = 0);
   ASN1T_CMSStream_SubjectKeyIdentifier* newCopy ();

   inline ASN1C_CMSStream_SubjectKeyIdentifier& operator= (ASN1C_CMSStream_SubjectKeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_SubjectKeyIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_SubjectKeyIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_SubjectKeyIdentifier
   (const char* name, ASN1T_CMSStream_SubjectKeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_SubjectKeyIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_SubjectKeyIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_SubjectKeyIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_SubjectKeyIdentifier* pValue, ASN1T_CMSStream_SubjectKeyIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_SubjectKeyIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_SubjectKeyIdentifier* pSrcValue, ASN1T_CMSStream_SubjectKeyIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_SubjectKeyIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_SubjectKeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  Digest                                                    */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_CMSStream_Digest;

class EXTERN ASN1C_CMSStream_Digest :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_Digest& msgData;
public:
   ASN1C_CMSStream_Digest (ASN1T_CMSStream_Digest& data);
   ASN1C_CMSStream_Digest (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_Digest& data);
   ASN1C_CMSStream_Digest (ASN1C_CMSStream_Digest& original);

   inline ASN1T_CMSStream_Digest& getData () { return msgData; }
   inline const ASN1T_CMSStream_Digest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_Digest* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_Digest& getCopy (ASN1T_CMSStream_Digest* pDstData = 0);
   ASN1T_CMSStream_Digest* newCopy ();

   inline ASN1C_CMSStream_Digest& operator= (ASN1C_CMSStream_Digest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_Digest (ASN1CTXT* pctxt,
   ASN1T_CMSStream_Digest *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_Digest
   (const char* name, ASN1T_CMSStream_Digest* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_Digest
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_Digest* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_Digest (ASN1ConstCharPtr name, ASN1T_CMSStream_Digest* pValue, ASN1T_CMSStream_Digest* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_Digest (ASN1CTXT *pctxt, ASN1T_CMSStream_Digest* pSrcValue, ASN1T_CMSStream_Digest* pDstValue);

EXTERN void asn1Free_CMSStream_Digest
   (ASN1CTXT *pctxt, ASN1T_CMSStream_Digest* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageAuthenticationCode                                 */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_CMSStream_MessageAuthenticationCode;

class EXTERN ASN1C_CMSStream_MessageAuthenticationCode :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_MessageAuthenticationCode& msgData;
public:
   ASN1C_CMSStream_MessageAuthenticationCode (ASN1T_CMSStream_MessageAuthenticationCode& data);
   ASN1C_CMSStream_MessageAuthenticationCode (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_MessageAuthenticationCode& data);
   ASN1C_CMSStream_MessageAuthenticationCode (ASN1C_CMSStream_MessageAuthenticationCode& original);

   inline ASN1T_CMSStream_MessageAuthenticationCode& getData () { return msgData; }
   inline const ASN1T_CMSStream_MessageAuthenticationCode& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_MessageAuthenticationCode* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_MessageAuthenticationCode& getCopy (ASN1T_CMSStream_MessageAuthenticationCode* pDstData = 0);
   ASN1T_CMSStream_MessageAuthenticationCode* newCopy ();

   inline ASN1C_CMSStream_MessageAuthenticationCode& operator= (ASN1C_CMSStream_MessageAuthenticationCode& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_MessageAuthenticationCode (ASN1CTXT* pctxt,
   ASN1T_CMSStream_MessageAuthenticationCode *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_MessageAuthenticationCode
   (const char* name, ASN1T_CMSStream_MessageAuthenticationCode* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_MessageAuthenticationCode
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_MessageAuthenticationCode* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_MessageAuthenticationCode (ASN1ConstCharPtr name, ASN1T_CMSStream_MessageAuthenticationCode* pValue, ASN1T_CMSStream_MessageAuthenticationCode* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_MessageAuthenticationCode (ASN1CTXT *pctxt, ASN1T_CMSStream_MessageAuthenticationCode* pSrcValue, ASN1T_CMSStream_MessageAuthenticationCode* pDstValue);

EXTERN void asn1Free_CMSStream_MessageAuthenticationCode
   (ASN1CTXT *pctxt, ASN1T_CMSStream_MessageAuthenticationCode* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestAlgorithmIdentifier                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_DigestAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_CMSStream_DigestAlgorithmIdentifier;

class EXTERN ASN1C_CMSStream_DigestAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMSStream_DigestAlgorithmIdentifier (ASN1T_CMSStream_DigestAlgorithmIdentifier& data);
   ASN1C_CMSStream_DigestAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_DigestAlgorithmIdentifier& data);
   ASN1C_CMSStream_DigestAlgorithmIdentifier (ASN1C_CMSStream_DigestAlgorithmIdentifier& original);

   inline ASN1T_CMSStream_DigestAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_DigestAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_DigestAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_DigestAlgorithmIdentifier& getCopy (ASN1T_CMSStream_DigestAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMSStream_DigestAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMSStream_DigestAlgorithmIdentifier& operator= (ASN1C_CMSStream_DigestAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_DigestAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_DigestAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_DigestAlgorithmIdentifier
   (const char* name, ASN1T_CMSStream_DigestAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_DigestAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_DigestAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_DigestAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_DigestAlgorithmIdentifier* pValue, ASN1T_CMSStream_DigestAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_DigestAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_DigestAlgorithmIdentifier* pSrcValue, ASN1T_CMSStream_DigestAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_DigestAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_DigestAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  SignatureAlgorithmIdentifier                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_SignatureAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_CMSStream_SignatureAlgorithmIdentifier;

class EXTERN ASN1C_CMSStream_SignatureAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMSStream_SignatureAlgorithmIdentifier (ASN1T_CMSStream_SignatureAlgorithmIdentifier& data);
   ASN1C_CMSStream_SignatureAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_SignatureAlgorithmIdentifier& data);
   ASN1C_CMSStream_SignatureAlgorithmIdentifier (ASN1C_CMSStream_SignatureAlgorithmIdentifier& original);

   inline ASN1T_CMSStream_SignatureAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_SignatureAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_SignatureAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_SignatureAlgorithmIdentifier& getCopy (ASN1T_CMSStream_SignatureAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMSStream_SignatureAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMSStream_SignatureAlgorithmIdentifier& operator= (ASN1C_CMSStream_SignatureAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_SignatureAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_SignatureAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_SignatureAlgorithmIdentifier
   (const char* name, ASN1T_CMSStream_SignatureAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_SignatureAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_SignatureAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_SignatureAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_SignatureAlgorithmIdentifier* pValue, ASN1T_CMSStream_SignatureAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_SignatureAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_SignatureAlgorithmIdentifier* pSrcValue, ASN1T_CMSStream_SignatureAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_SignatureAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_SignatureAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyEncryptionAlgorithmIdentifier                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_KeyEncryptionAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_CMSStream_KeyEncryptionAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMSStream_KeyEncryptionAlgorithmIdentifier (ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_CMSStream_KeyEncryptionAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier& data);
   ASN1C_CMSStream_KeyEncryptionAlgorithmIdentifier (ASN1C_CMSStream_KeyEncryptionAlgorithmIdentifier& original);

   inline ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier& getCopy (ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMSStream_KeyEncryptionAlgorithmIdentifier& operator= (ASN1C_CMSStream_KeyEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_KeyEncryptionAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_KeyEncryptionAlgorithmIdentifier
   (const char* name, ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_KeyEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_KeyEncryptionAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pValue, ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_KeyEncryptionAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pSrcValue, ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_KeyEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentEncryptionAlgorithmIdentifier                      */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_ContentEncryptionAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier;

class EXTERN ASN1C_CMSStream_ContentEncryptionAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMSStream_ContentEncryptionAlgorithmIdentifier (ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_CMSStream_ContentEncryptionAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier& data);
   ASN1C_CMSStream_ContentEncryptionAlgorithmIdentifier (ASN1C_CMSStream_ContentEncryptionAlgorithmIdentifier& original);

   inline ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier& getCopy (ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMSStream_ContentEncryptionAlgorithmIdentifier& operator= (ASN1C_CMSStream_ContentEncryptionAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_ContentEncryptionAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_ContentEncryptionAlgorithmIdentifier
   (const char* name, ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_ContentEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_ContentEncryptionAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pValue, ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_ContentEncryptionAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pSrcValue, ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_ContentEncryptionAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_ContentEncryptionAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageAuthenticationCodeAlgorithm                        */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_MessageAuthenticationCodeAlgorithm;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm;

class EXTERN ASN1C_CMSStream_MessageAuthenticationCodeAlgorithm :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMSStream_MessageAuthenticationCodeAlgorithm (ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm& data);
   ASN1C_CMSStream_MessageAuthenticationCodeAlgorithm (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm& data);
   ASN1C_CMSStream_MessageAuthenticationCodeAlgorithm (ASN1C_CMSStream_MessageAuthenticationCodeAlgorithm& original);

   inline ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm& getData () { return msgData; }
   inline const ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm& getCopy (ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pDstData = 0);
   ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* newCopy ();

   inline ASN1C_CMSStream_MessageAuthenticationCodeAlgorithm& operator= (ASN1C_CMSStream_MessageAuthenticationCodeAlgorithm& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_MessageAuthenticationCodeAlgorithm (ASN1CTXT* pctxt,
   ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_MessageAuthenticationCodeAlgorithm
   (const char* name, ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_MessageAuthenticationCodeAlgorithm
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_MessageAuthenticationCodeAlgorithm (ASN1ConstCharPtr name, ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pValue, ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_MessageAuthenticationCodeAlgorithm (ASN1CTXT *pctxt, ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pSrcValue, ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pDstValue);

EXTERN void asn1Free_CMSStream_MessageAuthenticationCodeAlgorithm
   (ASN1CTXT *pctxt, ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyDerivationAlgorithmIdentifier                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_KeyDerivationAlgorithmIdentifier;

typedef ASN1T_EXPStream_AlgorithmIdentifier ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier;

class EXTERN ASN1C_CMSStream_KeyDerivationAlgorithmIdentifier :
   public ASN1C_EXPStream_AlgorithmIdentifier
{
protected:
public:
   ASN1C_CMSStream_KeyDerivationAlgorithmIdentifier (ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier& data);
   ASN1C_CMSStream_KeyDerivationAlgorithmIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier& data);
   ASN1C_CMSStream_KeyDerivationAlgorithmIdentifier (ASN1C_CMSStream_KeyDerivationAlgorithmIdentifier& original);

   inline ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier& getCopy (ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pDstData = 0);
   ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* newCopy ();

   inline ASN1C_CMSStream_KeyDerivationAlgorithmIdentifier& operator= (ASN1C_CMSStream_KeyDerivationAlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_KeyDerivationAlgorithmIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_KeyDerivationAlgorithmIdentifier
   (const char* name, ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_KeyDerivationAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_KeyDerivationAlgorithmIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pValue, ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_KeyDerivationAlgorithmIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pSrcValue, ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_KeyDerivationAlgorithmIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateV2                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_AttributeCertificateV2;

typedef ASN1T_ATTRCERTStream_AttributeCertificate ASN1T_CMSStream_AttributeCertificateV2;

class EXTERN ASN1C_CMSStream_AttributeCertificateV2 :
   public ASN1C_ATTRCERTStream_AttributeCertificate
{
protected:
public:
   ASN1C_CMSStream_AttributeCertificateV2 (ASN1T_CMSStream_AttributeCertificateV2& data);
   ASN1C_CMSStream_AttributeCertificateV2 (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_AttributeCertificateV2& data);
   ASN1C_CMSStream_AttributeCertificateV2 (ASN1C_CMSStream_AttributeCertificateV2& original);

   inline ASN1T_CMSStream_AttributeCertificateV2& getData () { return msgData; }
   inline const ASN1T_CMSStream_AttributeCertificateV2& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_AttributeCertificateV2* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_AttributeCertificateV2& getCopy (ASN1T_CMSStream_AttributeCertificateV2* pDstData = 0);
   ASN1T_CMSStream_AttributeCertificateV2* newCopy ();

   inline ASN1C_CMSStream_AttributeCertificateV2& operator= (ASN1C_CMSStream_AttributeCertificateV2& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_AttributeCertificateV2 (ASN1CTXT* pctxt,
   ASN1T_CMSStream_AttributeCertificateV2 *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_AttributeCertificateV2
   (const char* name, ASN1T_CMSStream_AttributeCertificateV2* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_AttributeCertificateV2
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_AttributeCertificateV2* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_AttributeCertificateV2 (ASN1ConstCharPtr name, ASN1T_CMSStream_AttributeCertificateV2* pValue, ASN1T_CMSStream_AttributeCertificateV2* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_AttributeCertificateV2 (ASN1CTXT *pctxt, ASN1T_CMSStream_AttributeCertificateV2* pSrcValue, ASN1T_CMSStream_AttributeCertificateV2* pDstValue);

EXTERN void asn1Free_CMSStream_AttributeCertificateV2
   (ASN1CTXT *pctxt, ASN1T_CMSStream_AttributeCertificateV2* pvalue);

/**************************************************************/
/*                                                            */
/*  CMSVersion                                                */
/*                                                            */
/**************************************************************/

struct EXTERN CMSStream_CMSVersion {
   enum Root {
      v0 = 0,
      v1 = 1,
      v2 = 2,
      v3 = 3,
      v4 = 4,
      v5 = 5
   } ;
} ;

typedef OSUINT32 ASN1T_CMSStream_CMSVersion;

class EXTERN ASN1C_CMSStream_CMSVersion :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_CMSVersion& msgData;
public:
   ASN1C_CMSStream_CMSVersion (ASN1T_CMSStream_CMSVersion& data);
   ASN1C_CMSStream_CMSVersion (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_CMSVersion& data);
   ASN1C_CMSStream_CMSVersion (ASN1C_CMSStream_CMSVersion& original);

   inline ASN1T_CMSStream_CMSVersion& getData () { return msgData; }
   inline const ASN1T_CMSStream_CMSVersion& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_CMSVersion* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_CMSVersion& getCopy (ASN1T_CMSStream_CMSVersion* pDstData = 0);
   ASN1T_CMSStream_CMSVersion* newCopy ();

   inline ASN1C_CMSStream_CMSVersion& operator= (ASN1C_CMSStream_CMSVersion& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_CMSVersion (ASN1CTXT* pctxt,
   ASN1T_CMSStream_CMSVersion *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_CMSVersion
   (const char* name, ASN1T_CMSStream_CMSVersion* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_CMSVersion
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_CMSVersion* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_CMSVersion (ASN1ConstCharPtr name, ASN1T_CMSStream_CMSVersion* pValue, ASN1T_CMSStream_CMSVersion* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_CMSVersion (ASN1CTXT *pctxt, ASN1T_CMSStream_CMSVersion* pSrcValue, ASN1T_CMSStream_CMSVersion* pDstValue);

/**************************************************************/
/*                                                            */
/*  UserKeyingMaterial                                        */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_CMSStream_UserKeyingMaterial;

class EXTERN ASN1C_CMSStream_UserKeyingMaterial :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_UserKeyingMaterial& msgData;
public:
   ASN1C_CMSStream_UserKeyingMaterial (ASN1T_CMSStream_UserKeyingMaterial& data);
   ASN1C_CMSStream_UserKeyingMaterial (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_UserKeyingMaterial& data);
   ASN1C_CMSStream_UserKeyingMaterial (ASN1C_CMSStream_UserKeyingMaterial& original);

   inline ASN1T_CMSStream_UserKeyingMaterial& getData () { return msgData; }
   inline const ASN1T_CMSStream_UserKeyingMaterial& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_UserKeyingMaterial* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_UserKeyingMaterial& getCopy (ASN1T_CMSStream_UserKeyingMaterial* pDstData = 0);
   ASN1T_CMSStream_UserKeyingMaterial* newCopy ();

   inline ASN1C_CMSStream_UserKeyingMaterial& operator= (ASN1C_CMSStream_UserKeyingMaterial& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_UserKeyingMaterial (ASN1CTXT* pctxt,
   ASN1T_CMSStream_UserKeyingMaterial *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_UserKeyingMaterial
   (const char* name, ASN1T_CMSStream_UserKeyingMaterial* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_UserKeyingMaterial
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_UserKeyingMaterial* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_UserKeyingMaterial (ASN1ConstCharPtr name, ASN1T_CMSStream_UserKeyingMaterial* pValue, ASN1T_CMSStream_UserKeyingMaterial* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_UserKeyingMaterial (ASN1CTXT *pctxt, ASN1T_CMSStream_UserKeyingMaterial* pSrcValue, ASN1T_CMSStream_UserKeyingMaterial* pDstValue);

EXTERN void asn1Free_CMSStream_UserKeyingMaterial
   (ASN1CTXT *pctxt, ASN1T_CMSStream_UserKeyingMaterial* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageDigest                                             */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_CMSStream_MessageDigest;

class EXTERN ASN1C_CMSStream_MessageDigest :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_MessageDigest& msgData;
public:
   ASN1C_CMSStream_MessageDigest (ASN1T_CMSStream_MessageDigest& data);
   ASN1C_CMSStream_MessageDigest (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_MessageDigest& data);
   ASN1C_CMSStream_MessageDigest (ASN1C_CMSStream_MessageDigest& original);

   inline ASN1T_CMSStream_MessageDigest& getData () { return msgData; }
   inline const ASN1T_CMSStream_MessageDigest& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_MessageDigest* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_MessageDigest& getCopy (ASN1T_CMSStream_MessageDigest* pDstData = 0);
   ASN1T_CMSStream_MessageDigest* newCopy ();

   inline ASN1C_CMSStream_MessageDigest& operator= (ASN1C_CMSStream_MessageDigest& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_MessageDigest (ASN1CTXT* pctxt,
   ASN1T_CMSStream_MessageDigest *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_MessageDigest
   (const char* name, ASN1T_CMSStream_MessageDigest* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_MessageDigest
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_MessageDigest* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_MessageDigest (ASN1ConstCharPtr name, ASN1T_CMSStream_MessageDigest* pValue, ASN1T_CMSStream_MessageDigest* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_MessageDigest (ASN1CTXT *pctxt, ASN1T_CMSStream_MessageDigest* pSrcValue, ASN1T_CMSStream_MessageDigest* pDstValue);

EXTERN void asn1Free_CMSStream_MessageDigest
   (ASN1CTXT *pctxt, ASN1T_CMSStream_MessageDigest* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerIdentifier                                          */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMSStream_SignerIdentifier_issuerAndSerialNumber 1
#define T_CMSStream_SignerIdentifier_subjectKeyIdentifier 2

class EXTERN ASN1C_CMSStream_SignerIdentifier;

struct EXTERN ASN1T_CMSStream_SignerIdentifier : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_PKCS7Stream_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMSStream_SubjectKeyIdentifier *subjectKeyIdentifier;
   } u;
   ASN1T_CMSStream_SignerIdentifier () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMSStream_SignerIdentifier (ASN1C_CMSStream_SignerIdentifier& srcData);
   ~ASN1T_CMSStream_SignerIdentifier ();
} ;

class EXTERN ASN1C_CMSStream_SignerIdentifier :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_SignerIdentifier& msgData;
public:
   ASN1C_CMSStream_SignerIdentifier (ASN1T_CMSStream_SignerIdentifier& data);
   ASN1C_CMSStream_SignerIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_SignerIdentifier& data);
   ASN1C_CMSStream_SignerIdentifier (ASN1C_CMSStream_SignerIdentifier& original);

   inline ASN1T_CMSStream_SignerIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_SignerIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_SignerIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_SignerIdentifier& getCopy (ASN1T_CMSStream_SignerIdentifier* pDstData = 0);
   ASN1T_CMSStream_SignerIdentifier* newCopy ();

   inline ASN1C_CMSStream_SignerIdentifier& operator= (ASN1C_CMSStream_SignerIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_SignerIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_SignerIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_SignerIdentifier
   (const char* name, ASN1T_CMSStream_SignerIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_SignerIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_SignerIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_SignerIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_SignerIdentifier* pValue, ASN1T_CMSStream_SignerIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_SignerIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_SignerIdentifier* pSrcValue, ASN1T_CMSStream_SignerIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_SignerIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_SignerIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  UnsignedAttributes                                        */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_CMSStream_UnsignedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_CMSStream_UnsignedAttributes();
} ASN1T_CMSStream_UnsignedAttributes;

class EXTERN ASN1C_CMSStream_UnsignedAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMSStream_UnsignedAttributes& msgData;
public:
   ASN1C_CMSStream_UnsignedAttributes (ASN1T_CMSStream_UnsignedAttributes& data);
   ASN1C_CMSStream_UnsignedAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_UnsignedAttributes& data);
   ASN1C_CMSStream_UnsignedAttributes (ASN1C_CMSStream_UnsignedAttributes& original);

   inline ASN1T_CMSStream_UnsignedAttributes& getData () { return msgData; }
   inline const ASN1T_CMSStream_UnsignedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_UnsignedAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_UnsignedAttributes& getCopy (ASN1T_CMSStream_UnsignedAttributes* pDstData = 0);
   ASN1T_CMSStream_UnsignedAttributes* newCopy ();

   ASN1C_CMSStream_UnsignedAttributes& operator= (ASN1C_CMSStream_UnsignedAttributes& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_CMSStream_UnsignedAttributes (ASN1CTXT* pctxt,
   ASN1T_CMSStream_UnsignedAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_UnsignedAttributes
   (const char* name, ASN1T_CMSStream_UnsignedAttributes* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_UnsignedAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_UnsignedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_UnsignedAttributes (ASN1ConstCharPtr name, ASN1T_CMSStream_UnsignedAttributes* pValue, ASN1T_CMSStream_UnsignedAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_UnsignedAttributes (ASN1CTXT *pctxt, ASN1T_CMSStream_UnsignedAttributes* pSrcValue, ASN1T_CMSStream_UnsignedAttributes* pDstValue);

EXTERN void asn1Free_CMSStream_UnsignedAttributes
   (ASN1CTXT *pctxt, ASN1T_CMSStream_UnsignedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerInfo                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_SignerInfo;

struct EXTERN ASN1T_CMSStream_SignerInfo : public ASN1TPDU {
   struct {
      unsigned signedAttrsPresent : 1;
      unsigned unsignedAttrsPresent : 1;
   } m;
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_CMSStream_SignerIdentifier sid;
   ASN1T_CMSStream_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_DERCMSStream_SignedAttributes signedAttrs;
   ASN1T_CMSStream_SignatureAlgorithmIdentifier signatureAlgorithm;
   ASN1T_DERCMSStream_SignatureValue signature;
   ASN1T_CMSStream_UnsignedAttributes unsignedAttrs;
   ASN1T_CMSStream_SignerInfo ();
   ASN1T_CMSStream_SignerInfo (ASN1C_CMSStream_SignerInfo& srcData);
   ~ASN1T_CMSStream_SignerInfo ();
} ;

class EXTERN ASN1C_CMSStream_SignerInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_SignerInfo& msgData;
public:
   ASN1C_CMSStream_SignerInfo (ASN1T_CMSStream_SignerInfo& data);
   ASN1C_CMSStream_SignerInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_SignerInfo& data);
   ASN1C_CMSStream_SignerInfo (ASN1C_CMSStream_SignerInfo& original);

   inline ASN1T_CMSStream_SignerInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_SignerInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_SignerInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_SignerInfo& getCopy (ASN1T_CMSStream_SignerInfo* pDstData = 0);
   ASN1T_CMSStream_SignerInfo* newCopy ();

   inline ASN1C_CMSStream_SignerInfo& operator= (ASN1C_CMSStream_SignerInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_SignerInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_SignerInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_SignerInfo
   (const char* name, ASN1T_CMSStream_SignerInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_SignerInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_SignerInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_SignerInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_SignerInfo* pValue, ASN1T_CMSStream_SignerInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_SignerInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_SignerInfo* pSrcValue, ASN1T_CMSStream_SignerInfo* pDstValue);

EXTERN void asn1Free_CMSStream_SignerInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_SignerInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  Countersignature                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_Countersignature;

typedef ASN1T_CMSStream_SignerInfo ASN1T_CMSStream_Countersignature;

class EXTERN ASN1C_CMSStream_Countersignature :
   public ASN1C_CMSStream_SignerInfo
{
protected:
public:
   ASN1C_CMSStream_Countersignature (ASN1T_CMSStream_Countersignature& data);
   ASN1C_CMSStream_Countersignature (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_Countersignature& data);
   ASN1C_CMSStream_Countersignature (ASN1C_CMSStream_Countersignature& original);

   inline ASN1T_CMSStream_Countersignature& getData () { return msgData; }
   inline const ASN1T_CMSStream_Countersignature& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_Countersignature* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_Countersignature& getCopy (ASN1T_CMSStream_Countersignature* pDstData = 0);
   ASN1T_CMSStream_Countersignature* newCopy ();

   inline ASN1C_CMSStream_Countersignature& operator= (ASN1C_CMSStream_Countersignature& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_Countersignature (ASN1CTXT* pctxt,
   ASN1T_CMSStream_Countersignature *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_Countersignature
   (const char* name, ASN1T_CMSStream_Countersignature* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_Countersignature
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_Countersignature* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_Countersignature (ASN1ConstCharPtr name, ASN1T_CMSStream_Countersignature* pValue, ASN1T_CMSStream_Countersignature* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_Countersignature (ASN1CTXT *pctxt, ASN1T_CMSStream_Countersignature* pSrcValue, ASN1T_CMSStream_Countersignature* pDstValue);

EXTERN void asn1Free_CMSStream_Countersignature
   (ASN1CTXT *pctxt, ASN1T_CMSStream_Countersignature* pvalue);

/**************************************************************/
/*                                                            */
/*  Signature                                                 */
/*                                                            */
/**************************************************************/

typedef ASN1TDynBitStr ASN1T_CMSStream_Signature;

class EXTERN ASN1C_CMSStream_Signature :
   public ASN1CBitStr
{
protected:
   ASN1T_CMSStream_Signature& msgData;
public:
   ASN1C_CMSStream_Signature (ASN1T_CMSStream_Signature& data);
   ASN1C_CMSStream_Signature (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_Signature& data);
   ASN1C_CMSStream_Signature (ASN1C_CMSStream_Signature& original);

   inline ASN1T_CMSStream_Signature& getData () { return msgData; }
   inline const ASN1T_CMSStream_Signature& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_Signature* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_Signature& getCopy (ASN1T_CMSStream_Signature* pDstData = 0);
   ASN1T_CMSStream_Signature* newCopy ();

   ASN1C_CMSStream_Signature& operator= (ASN1C_CMSStream_Signature& srcData);
} ;

EXTERN int asn1BSD_CMSStream_Signature (ASN1CTXT* pctxt,
   ASN1T_CMSStream_Signature *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_Signature
   (const char* name, ASN1T_CMSStream_Signature* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_Signature
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_Signature* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_Signature (ASN1ConstCharPtr name, ASN1T_CMSStream_Signature* pValue, ASN1T_CMSStream_Signature* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_Signature (ASN1CTXT *pctxt, ASN1T_CMSStream_Signature* pSrcValue, ASN1T_CMSStream_Signature* pDstValue);

EXTERN void asn1Free_CMSStream_Signature
   (ASN1CTXT *pctxt, ASN1T_CMSStream_Signature* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentInfo                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_ContentInfo;

struct EXTERN ASN1T_CMSStream_ContentInfo : public ASN1TPDU {
   ASN1T_CMSStream_ContentType contentType;
   ASN1TOpenType content;
   ASN1T_CMSStream_ContentInfo ();
   ASN1T_CMSStream_ContentInfo (ASN1C_CMSStream_ContentInfo& srcData);
   ~ASN1T_CMSStream_ContentInfo ();
} ;

class EXTERN ASN1C_CMSStream_ContentInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_ContentInfo& msgData;
public:
   ASN1C_CMSStream_ContentInfo (ASN1T_CMSStream_ContentInfo& data);
   ASN1C_CMSStream_ContentInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_ContentInfo& data);
   ASN1C_CMSStream_ContentInfo (ASN1C_CMSStream_ContentInfo& original);

   inline ASN1T_CMSStream_ContentInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_ContentInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_ContentInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_ContentInfo& getCopy (ASN1T_CMSStream_ContentInfo* pDstData = 0);
   ASN1T_CMSStream_ContentInfo* newCopy ();

   inline ASN1C_CMSStream_ContentInfo& operator= (ASN1C_CMSStream_ContentInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_ContentInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_ContentInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_ContentInfo
   (const char* name, ASN1T_CMSStream_ContentInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_ContentInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_ContentInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_ContentInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_ContentInfo* pValue, ASN1T_CMSStream_ContentInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_ContentInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_ContentInfo* pSrcValue, ASN1T_CMSStream_ContentInfo* pDstValue);

EXTERN void asn1Free_CMSStream_ContentInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_ContentInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  EncapsulatedContentInfo                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_EncapsulatedContentInfo;

struct EXTERN ASN1T_CMSStream_EncapsulatedContentInfo : public ASN1TPDU {
   struct {
      unsigned eContentPresent : 1;
   } m;
   ASN1T_CMSStream_ContentType eContentType;
   ASN1TDynOctStr eContent;
   ASN1T_CMSStream_EncapsulatedContentInfo ();
   ASN1T_CMSStream_EncapsulatedContentInfo (ASN1C_CMSStream_EncapsulatedContentInfo& srcData);
   ~ASN1T_CMSStream_EncapsulatedContentInfo ();
} ;

class EXTERN ASN1C_CMSStream_EncapsulatedContentInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_EncapsulatedContentInfo& msgData;
public:
   ASN1C_CMSStream_EncapsulatedContentInfo (ASN1T_CMSStream_EncapsulatedContentInfo& data);
   ASN1C_CMSStream_EncapsulatedContentInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_EncapsulatedContentInfo& data);
   ASN1C_CMSStream_EncapsulatedContentInfo (ASN1C_CMSStream_EncapsulatedContentInfo& original);

   inline ASN1T_CMSStream_EncapsulatedContentInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_EncapsulatedContentInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_EncapsulatedContentInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_EncapsulatedContentInfo& getCopy (ASN1T_CMSStream_EncapsulatedContentInfo* pDstData = 0);
   ASN1T_CMSStream_EncapsulatedContentInfo* newCopy ();

   inline ASN1C_CMSStream_EncapsulatedContentInfo& operator= (ASN1C_CMSStream_EncapsulatedContentInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_EncapsulatedContentInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_EncapsulatedContentInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_EncapsulatedContentInfo
   (const char* name, ASN1T_CMSStream_EncapsulatedContentInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_EncapsulatedContentInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_EncapsulatedContentInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_EncapsulatedContentInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_EncapsulatedContentInfo* pValue, ASN1T_CMSStream_EncapsulatedContentInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_EncapsulatedContentInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_EncapsulatedContentInfo* pSrcValue, ASN1T_CMSStream_EncapsulatedContentInfo* pDstValue);

EXTERN void asn1Free_CMSStream_EncapsulatedContentInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_EncapsulatedContentInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  UnauthAttributes                                          */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_CMSStream_UnauthAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_CMSStream_UnauthAttributes();
} ASN1T_CMSStream_UnauthAttributes;

class EXTERN ASN1C_CMSStream_UnauthAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMSStream_UnauthAttributes& msgData;
public:
   ASN1C_CMSStream_UnauthAttributes (ASN1T_CMSStream_UnauthAttributes& data);
   ASN1C_CMSStream_UnauthAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_UnauthAttributes& data);
   ASN1C_CMSStream_UnauthAttributes (ASN1C_CMSStream_UnauthAttributes& original);

   inline ASN1T_CMSStream_UnauthAttributes& getData () { return msgData; }
   inline const ASN1T_CMSStream_UnauthAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_UnauthAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_UnauthAttributes& getCopy (ASN1T_CMSStream_UnauthAttributes* pDstData = 0);
   ASN1T_CMSStream_UnauthAttributes* newCopy ();

   ASN1C_CMSStream_UnauthAttributes& operator= (ASN1C_CMSStream_UnauthAttributes& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_CMSStream_UnauthAttributes (ASN1CTXT* pctxt,
   ASN1T_CMSStream_UnauthAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_UnauthAttributes
   (const char* name, ASN1T_CMSStream_UnauthAttributes* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_UnauthAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_UnauthAttributes* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_UnauthAttributes (ASN1ConstCharPtr name, ASN1T_CMSStream_UnauthAttributes* pValue, ASN1T_CMSStream_UnauthAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_UnauthAttributes (ASN1CTXT *pctxt, ASN1T_CMSStream_UnauthAttributes* pSrcValue, ASN1T_CMSStream_UnauthAttributes* pDstValue);

EXTERN void asn1Free_CMSStream_UnauthAttributes
   (ASN1CTXT *pctxt, ASN1T_CMSStream_UnauthAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificateInfo                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_ExtendedCertificateInfo;

struct EXTERN ASN1T_CMSStream_ExtendedCertificateInfo : public ASN1TPDU {
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_EXPStream_Certificate certificate;
   ASN1T_CMSStream_UnauthAttributes attributes;
   ASN1T_CMSStream_ExtendedCertificateInfo ();
   ASN1T_CMSStream_ExtendedCertificateInfo (ASN1C_CMSStream_ExtendedCertificateInfo& srcData);
   ~ASN1T_CMSStream_ExtendedCertificateInfo ();
} ;

class EXTERN ASN1C_CMSStream_ExtendedCertificateInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_ExtendedCertificateInfo& msgData;
public:
   ASN1C_CMSStream_ExtendedCertificateInfo (ASN1T_CMSStream_ExtendedCertificateInfo& data);
   ASN1C_CMSStream_ExtendedCertificateInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_ExtendedCertificateInfo& data);
   ASN1C_CMSStream_ExtendedCertificateInfo (ASN1C_CMSStream_ExtendedCertificateInfo& original);

   inline ASN1T_CMSStream_ExtendedCertificateInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_ExtendedCertificateInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_ExtendedCertificateInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_ExtendedCertificateInfo& getCopy (ASN1T_CMSStream_ExtendedCertificateInfo* pDstData = 0);
   ASN1T_CMSStream_ExtendedCertificateInfo* newCopy ();

   inline ASN1C_CMSStream_ExtendedCertificateInfo& operator= (ASN1C_CMSStream_ExtendedCertificateInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_ExtendedCertificateInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_ExtendedCertificateInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_ExtendedCertificateInfo
   (const char* name, ASN1T_CMSStream_ExtendedCertificateInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_ExtendedCertificateInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_ExtendedCertificateInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_ExtendedCertificateInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_ExtendedCertificateInfo* pValue, ASN1T_CMSStream_ExtendedCertificateInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_ExtendedCertificateInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_ExtendedCertificateInfo* pSrcValue, ASN1T_CMSStream_ExtendedCertificateInfo* pDstValue);

EXTERN void asn1Free_CMSStream_ExtendedCertificateInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_ExtendedCertificateInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificate                                       */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_ExtendedCertificate;

struct EXTERN ASN1T_CMSStream_ExtendedCertificate : public ASN1TPDU {
   ASN1T_CMSStream_ExtendedCertificateInfo extendedCertificateInfo;
   ASN1T_CMSStream_SignatureAlgorithmIdentifier signatureAlgorithm;
   ASN1T_CMSStream_Signature signature;
   ASN1T_CMSStream_ExtendedCertificate ();
   ASN1T_CMSStream_ExtendedCertificate (ASN1C_CMSStream_ExtendedCertificate& srcData);
   ~ASN1T_CMSStream_ExtendedCertificate ();
} ;

class EXTERN ASN1C_CMSStream_ExtendedCertificate :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_ExtendedCertificate& msgData;
public:
   ASN1C_CMSStream_ExtendedCertificate (ASN1T_CMSStream_ExtendedCertificate& data);
   ASN1C_CMSStream_ExtendedCertificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_ExtendedCertificate& data);
   ASN1C_CMSStream_ExtendedCertificate (ASN1C_CMSStream_ExtendedCertificate& original);

   inline ASN1T_CMSStream_ExtendedCertificate& getData () { return msgData; }
   inline const ASN1T_CMSStream_ExtendedCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_ExtendedCertificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_ExtendedCertificate& getCopy (ASN1T_CMSStream_ExtendedCertificate* pDstData = 0);
   ASN1T_CMSStream_ExtendedCertificate* newCopy ();

   inline ASN1C_CMSStream_ExtendedCertificate& operator= (ASN1C_CMSStream_ExtendedCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_ExtendedCertificate (ASN1CTXT* pctxt,
   ASN1T_CMSStream_ExtendedCertificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_ExtendedCertificate
   (const char* name, ASN1T_CMSStream_ExtendedCertificate* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_ExtendedCertificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_ExtendedCertificate* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_ExtendedCertificate (ASN1ConstCharPtr name, ASN1T_CMSStream_ExtendedCertificate* pValue, ASN1T_CMSStream_ExtendedCertificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_ExtendedCertificate (ASN1CTXT *pctxt, ASN1T_CMSStream_ExtendedCertificate* pSrcValue, ASN1T_CMSStream_ExtendedCertificate* pDstValue);

EXTERN void asn1Free_CMSStream_ExtendedCertificate
   (ASN1CTXT *pctxt, ASN1T_CMSStream_ExtendedCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherCertificateFormat                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_OtherCertificateFormat;

struct EXTERN ASN1T_CMSStream_OtherCertificateFormat : public ASN1TPDU {
   ASN1TObjId otherCertFormat;
   ASN1TOpenType otherCert;
   ASN1T_CMSStream_OtherCertificateFormat ();
   ASN1T_CMSStream_OtherCertificateFormat (ASN1C_CMSStream_OtherCertificateFormat& srcData);
   ~ASN1T_CMSStream_OtherCertificateFormat ();
} ;

class EXTERN ASN1C_CMSStream_OtherCertificateFormat :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_OtherCertificateFormat& msgData;
public:
   ASN1C_CMSStream_OtherCertificateFormat (ASN1T_CMSStream_OtherCertificateFormat& data);
   ASN1C_CMSStream_OtherCertificateFormat (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_OtherCertificateFormat& data);
   ASN1C_CMSStream_OtherCertificateFormat (ASN1C_CMSStream_OtherCertificateFormat& original);

   inline ASN1T_CMSStream_OtherCertificateFormat& getData () { return msgData; }
   inline const ASN1T_CMSStream_OtherCertificateFormat& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_OtherCertificateFormat* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_OtherCertificateFormat& getCopy (ASN1T_CMSStream_OtherCertificateFormat* pDstData = 0);
   ASN1T_CMSStream_OtherCertificateFormat* newCopy ();

   inline ASN1C_CMSStream_OtherCertificateFormat& operator= (ASN1C_CMSStream_OtherCertificateFormat& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_OtherCertificateFormat (ASN1CTXT* pctxt,
   ASN1T_CMSStream_OtherCertificateFormat *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_OtherCertificateFormat
   (const char* name, ASN1T_CMSStream_OtherCertificateFormat* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_OtherCertificateFormat
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_OtherCertificateFormat* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_OtherCertificateFormat (ASN1ConstCharPtr name, ASN1T_CMSStream_OtherCertificateFormat* pValue, ASN1T_CMSStream_OtherCertificateFormat* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_OtherCertificateFormat (ASN1CTXT *pctxt, ASN1T_CMSStream_OtherCertificateFormat* pSrcValue, ASN1T_CMSStream_OtherCertificateFormat* pDstValue);

EXTERN void asn1Free_CMSStream_OtherCertificateFormat
   (ASN1CTXT *pctxt, ASN1T_CMSStream_OtherCertificateFormat* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateChoices                                        */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMSStream_CertificateChoices_certificate 1
#define T_CMSStream_CertificateChoices_extendedCertificate 2
#define T_CMSStream_CertificateChoices_v1AttrCert 3
#define T_CMSStream_CertificateChoices_v2AttrCert 4
#define T_CMSStream_CertificateChoices_other 5

class EXTERN ASN1C_CMSStream_CertificateChoices;

struct EXTERN ASN1T_CMSStream_CertificateChoices : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_EXPStream_Certificate *certificate;
      /* t = 2 */
      ASN1T_CMSStream_ExtendedCertificate *extendedCertificate;
      /* t = 3 */
      ASN1T_ATTRCERTStream_AttributeCertificateV1 *v1AttrCert;
      /* t = 4 */
      ASN1T_CMSStream_AttributeCertificateV2 *v2AttrCert;
      /* t = 5 */
      ASN1T_CMSStream_OtherCertificateFormat *other;
   } u;
   ASN1T_CMSStream_CertificateChoices () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMSStream_CertificateChoices (ASN1C_CMSStream_CertificateChoices& srcData);
   ~ASN1T_CMSStream_CertificateChoices ();
} ;

class EXTERN ASN1C_CMSStream_CertificateChoices :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_CertificateChoices& msgData;
public:
   ASN1C_CMSStream_CertificateChoices (ASN1T_CMSStream_CertificateChoices& data);
   ASN1C_CMSStream_CertificateChoices (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_CertificateChoices& data);
   ASN1C_CMSStream_CertificateChoices (ASN1C_CMSStream_CertificateChoices& original);

   inline ASN1T_CMSStream_CertificateChoices& getData () { return msgData; }
   inline const ASN1T_CMSStream_CertificateChoices& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_CertificateChoices* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_CertificateChoices& getCopy (ASN1T_CMSStream_CertificateChoices* pDstData = 0);
   ASN1T_CMSStream_CertificateChoices* newCopy ();

   inline ASN1C_CMSStream_CertificateChoices& operator= (ASN1C_CMSStream_CertificateChoices& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_CertificateChoices (ASN1CTXT* pctxt,
   ASN1T_CMSStream_CertificateChoices *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_CertificateChoices
   (const char* name, ASN1T_CMSStream_CertificateChoices* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_CertificateChoices
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_CertificateChoices* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_CertificateChoices (ASN1ConstCharPtr name, ASN1T_CMSStream_CertificateChoices* pValue, ASN1T_CMSStream_CertificateChoices* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_CertificateChoices (ASN1CTXT *pctxt, ASN1T_CMSStream_CertificateChoices* pSrcValue, ASN1T_CMSStream_CertificateChoices* pDstValue);

EXTERN void asn1Free_CMSStream_CertificateChoices
   (ASN1CTXT *pctxt, ASN1T_CMSStream_CertificateChoices* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateSet                                            */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMSStream_CertificateChoices */
typedef struct EXTERN ASN1T_CMSStream_CertificateSet : public ASN1TPDUSeqOfList {
   ~ASN1T_CMSStream_CertificateSet();
} ASN1T_CMSStream_CertificateSet;

class EXTERN ASN1C_CMSStream_CertificateSet :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMSStream_CertificateSet& msgData;
public:
   ASN1C_CMSStream_CertificateSet (ASN1T_CMSStream_CertificateSet& data);
   ASN1C_CMSStream_CertificateSet (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_CertificateSet& data);
   ASN1C_CMSStream_CertificateSet (ASN1C_CMSStream_CertificateSet& original);

   inline ASN1T_CMSStream_CertificateSet& getData () { return msgData; }
   inline const ASN1T_CMSStream_CertificateSet& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_CertificateSet* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_CertificateSet& getCopy (ASN1T_CMSStream_CertificateSet* pDstData = 0);
   ASN1T_CMSStream_CertificateSet* newCopy ();

   ASN1C_CMSStream_CertificateSet& operator= (ASN1C_CMSStream_CertificateSet& srcData);
   void Append (ASN1T_CMSStream_CertificateChoices *elem);
   ASN1T_CMSStream_CertificateChoices *NewElement ();
} ;

EXTERN int asn1BSD_CMSStream_CertificateSet (ASN1CTXT* pctxt,
   ASN1T_CMSStream_CertificateSet *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_CertificateSet
   (const char* name, ASN1T_CMSStream_CertificateSet* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_CertificateSet
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_CertificateSet* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_CertificateSet (ASN1ConstCharPtr name, ASN1T_CMSStream_CertificateSet* pValue, ASN1T_CMSStream_CertificateSet* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_CertificateSet (ASN1CTXT *pctxt, ASN1T_CMSStream_CertificateSet* pSrcValue, ASN1T_CMSStream_CertificateSet* pDstValue);

EXTERN void asn1Free_CMSStream_CertificateSet
   (ASN1CTXT *pctxt, ASN1T_CMSStream_CertificateSet* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevocationInfoFormat                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_OtherRevocationInfoFormat;

struct EXTERN ASN1T_CMSStream_OtherRevocationInfoFormat : public ASN1TPDU {
   ASN1TObjId otherRevInfoFormat;
   ASN1TOpenType otherRevInfo;
   ASN1T_CMSStream_OtherRevocationInfoFormat ();
   ASN1T_CMSStream_OtherRevocationInfoFormat (ASN1C_CMSStream_OtherRevocationInfoFormat& srcData);
   ~ASN1T_CMSStream_OtherRevocationInfoFormat ();
} ;

class EXTERN ASN1C_CMSStream_OtherRevocationInfoFormat :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_OtherRevocationInfoFormat& msgData;
public:
   ASN1C_CMSStream_OtherRevocationInfoFormat (ASN1T_CMSStream_OtherRevocationInfoFormat& data);
   ASN1C_CMSStream_OtherRevocationInfoFormat (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_OtherRevocationInfoFormat& data);
   ASN1C_CMSStream_OtherRevocationInfoFormat (ASN1C_CMSStream_OtherRevocationInfoFormat& original);

   inline ASN1T_CMSStream_OtherRevocationInfoFormat& getData () { return msgData; }
   inline const ASN1T_CMSStream_OtherRevocationInfoFormat& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_OtherRevocationInfoFormat* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_OtherRevocationInfoFormat& getCopy (ASN1T_CMSStream_OtherRevocationInfoFormat* pDstData = 0);
   ASN1T_CMSStream_OtherRevocationInfoFormat* newCopy ();

   inline ASN1C_CMSStream_OtherRevocationInfoFormat& operator= (ASN1C_CMSStream_OtherRevocationInfoFormat& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_OtherRevocationInfoFormat (ASN1CTXT* pctxt,
   ASN1T_CMSStream_OtherRevocationInfoFormat *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_OtherRevocationInfoFormat
   (const char* name, ASN1T_CMSStream_OtherRevocationInfoFormat* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_OtherRevocationInfoFormat
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_OtherRevocationInfoFormat* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_OtherRevocationInfoFormat (ASN1ConstCharPtr name, ASN1T_CMSStream_OtherRevocationInfoFormat* pValue, ASN1T_CMSStream_OtherRevocationInfoFormat* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_OtherRevocationInfoFormat (ASN1CTXT *pctxt, ASN1T_CMSStream_OtherRevocationInfoFormat* pSrcValue, ASN1T_CMSStream_OtherRevocationInfoFormat* pDstValue);

EXTERN void asn1Free_CMSStream_OtherRevocationInfoFormat
   (ASN1CTXT *pctxt, ASN1T_CMSStream_OtherRevocationInfoFormat* pvalue);

/**************************************************************/
/*                                                            */
/*  RevocationInfoChoice                                      */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMSStream_RevocationInfoChoice_crl 1
#define T_CMSStream_RevocationInfoChoice_other 2

class EXTERN ASN1C_CMSStream_RevocationInfoChoice;

struct EXTERN ASN1T_CMSStream_RevocationInfoChoice : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_EXPStream_CertificateList *crl;
      /* t = 2 */
      ASN1T_CMSStream_OtherRevocationInfoFormat *other;
   } u;
   ASN1T_CMSStream_RevocationInfoChoice () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMSStream_RevocationInfoChoice (ASN1C_CMSStream_RevocationInfoChoice& srcData);
   ~ASN1T_CMSStream_RevocationInfoChoice ();
} ;

class EXTERN ASN1C_CMSStream_RevocationInfoChoice :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_RevocationInfoChoice& msgData;
public:
   ASN1C_CMSStream_RevocationInfoChoice (ASN1T_CMSStream_RevocationInfoChoice& data);
   ASN1C_CMSStream_RevocationInfoChoice (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_RevocationInfoChoice& data);
   ASN1C_CMSStream_RevocationInfoChoice (ASN1C_CMSStream_RevocationInfoChoice& original);

   inline ASN1T_CMSStream_RevocationInfoChoice& getData () { return msgData; }
   inline const ASN1T_CMSStream_RevocationInfoChoice& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_RevocationInfoChoice* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_RevocationInfoChoice& getCopy (ASN1T_CMSStream_RevocationInfoChoice* pDstData = 0);
   ASN1T_CMSStream_RevocationInfoChoice* newCopy ();

   inline ASN1C_CMSStream_RevocationInfoChoice& operator= (ASN1C_CMSStream_RevocationInfoChoice& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_RevocationInfoChoice (ASN1CTXT* pctxt,
   ASN1T_CMSStream_RevocationInfoChoice *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_RevocationInfoChoice
   (const char* name, ASN1T_CMSStream_RevocationInfoChoice* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_RevocationInfoChoice
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_RevocationInfoChoice* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_RevocationInfoChoice (ASN1ConstCharPtr name, ASN1T_CMSStream_RevocationInfoChoice* pValue, ASN1T_CMSStream_RevocationInfoChoice* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_RevocationInfoChoice (ASN1CTXT *pctxt, ASN1T_CMSStream_RevocationInfoChoice* pSrcValue, ASN1T_CMSStream_RevocationInfoChoice* pDstValue);

EXTERN void asn1Free_CMSStream_RevocationInfoChoice
   (ASN1CTXT *pctxt, ASN1T_CMSStream_RevocationInfoChoice* pvalue);

/**************************************************************/
/*                                                            */
/*  RevocationInfoChoices                                     */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMSStream_RevocationInfoChoice */
typedef struct EXTERN ASN1T_CMSStream_RevocationInfoChoices : public ASN1TPDUSeqOfList {
   ~ASN1T_CMSStream_RevocationInfoChoices();
} ASN1T_CMSStream_RevocationInfoChoices;

class EXTERN ASN1C_CMSStream_RevocationInfoChoices :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMSStream_RevocationInfoChoices& msgData;
public:
   ASN1C_CMSStream_RevocationInfoChoices (ASN1T_CMSStream_RevocationInfoChoices& data);
   ASN1C_CMSStream_RevocationInfoChoices (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_RevocationInfoChoices& data);
   ASN1C_CMSStream_RevocationInfoChoices (ASN1C_CMSStream_RevocationInfoChoices& original);

   inline ASN1T_CMSStream_RevocationInfoChoices& getData () { return msgData; }
   inline const ASN1T_CMSStream_RevocationInfoChoices& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_RevocationInfoChoices* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_RevocationInfoChoices& getCopy (ASN1T_CMSStream_RevocationInfoChoices* pDstData = 0);
   ASN1T_CMSStream_RevocationInfoChoices* newCopy ();

   ASN1C_CMSStream_RevocationInfoChoices& operator= (ASN1C_CMSStream_RevocationInfoChoices& srcData);
   void Append (ASN1T_CMSStream_RevocationInfoChoice *elem);
   ASN1T_CMSStream_RevocationInfoChoice *NewElement ();
} ;

EXTERN int asn1BSD_CMSStream_RevocationInfoChoices (ASN1CTXT* pctxt,
   ASN1T_CMSStream_RevocationInfoChoices *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_RevocationInfoChoices
   (const char* name, ASN1T_CMSStream_RevocationInfoChoices* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_RevocationInfoChoices
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_RevocationInfoChoices* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_RevocationInfoChoices (ASN1ConstCharPtr name, ASN1T_CMSStream_RevocationInfoChoices* pValue, ASN1T_CMSStream_RevocationInfoChoices* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_RevocationInfoChoices (ASN1CTXT *pctxt, ASN1T_CMSStream_RevocationInfoChoices* pSrcValue, ASN1T_CMSStream_RevocationInfoChoices* pDstValue);

EXTERN void asn1Free_CMSStream_RevocationInfoChoices
   (ASN1CTXT *pctxt, ASN1T_CMSStream_RevocationInfoChoices* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerInfos                                               */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMSStream_SignerInfo */
typedef struct EXTERN ASN1T_CMSStream_SignerInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_CMSStream_SignerInfos();
} ASN1T_CMSStream_SignerInfos;

class EXTERN ASN1C_CMSStream_SignerInfos :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMSStream_SignerInfos& msgData;
public:
   ASN1C_CMSStream_SignerInfos (ASN1T_CMSStream_SignerInfos& data);
   ASN1C_CMSStream_SignerInfos (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_SignerInfos& data);
   ASN1C_CMSStream_SignerInfos (ASN1C_CMSStream_SignerInfos& original);

   inline ASN1T_CMSStream_SignerInfos& getData () { return msgData; }
   inline const ASN1T_CMSStream_SignerInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_SignerInfos* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_SignerInfos& getCopy (ASN1T_CMSStream_SignerInfos* pDstData = 0);
   ASN1T_CMSStream_SignerInfos* newCopy ();

   ASN1C_CMSStream_SignerInfos& operator= (ASN1C_CMSStream_SignerInfos& srcData);
   void Append (ASN1T_CMSStream_SignerInfo *elem);
   ASN1T_CMSStream_SignerInfo *NewElement ();
} ;

EXTERN int asn1BSD_CMSStream_SignerInfos (ASN1CTXT* pctxt,
   ASN1T_CMSStream_SignerInfos *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_SignerInfos
   (const char* name, ASN1T_CMSStream_SignerInfos* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_SignerInfos
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_SignerInfos* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_SignerInfos (ASN1ConstCharPtr name, ASN1T_CMSStream_SignerInfos* pValue, ASN1T_CMSStream_SignerInfos* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_SignerInfos (ASN1CTXT *pctxt, ASN1T_CMSStream_SignerInfos* pSrcValue, ASN1T_CMSStream_SignerInfos* pDstValue);

EXTERN void asn1Free_CMSStream_SignerInfos
   (ASN1CTXT *pctxt, ASN1T_CMSStream_SignerInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  SignedData                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_SignedData;

struct EXTERN ASN1T_CMSStream_SignedData : public ASN1TPDU {
   struct {
      unsigned certificatesPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_PKCS7Stream_DigestAlgorithmIdentifiers digestAlgorithms;
   ASN1T_CMSStream_EncapsulatedContentInfo encapContentInfo;
   ASN1T_CMSStream_CertificateSet certificates;
   ASN1T_CMSStream_RevocationInfoChoices crls;
   ASN1T_CMSStream_SignerInfos signerInfos;
   ASN1T_CMSStream_SignedData ();
   ASN1T_CMSStream_SignedData (ASN1C_CMSStream_SignedData& srcData);
   ~ASN1T_CMSStream_SignedData ();
} ;

class EXTERN ASN1C_CMSStream_SignedData :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_SignedData& msgData;
public:
   ASN1C_CMSStream_SignedData (ASN1T_CMSStream_SignedData& data);
   ASN1C_CMSStream_SignedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_SignedData& data);
   ASN1C_CMSStream_SignedData (ASN1C_CMSStream_SignedData& original);

   inline ASN1T_CMSStream_SignedData& getData () { return msgData; }
   inline const ASN1T_CMSStream_SignedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_SignedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_SignedData& getCopy (ASN1T_CMSStream_SignedData* pDstData = 0);
   ASN1T_CMSStream_SignedData* newCopy ();

   inline ASN1C_CMSStream_SignedData& operator= (ASN1C_CMSStream_SignedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_SignedData (ASN1CTXT* pctxt,
   ASN1T_CMSStream_SignedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_SignedData
   (const char* name, ASN1T_CMSStream_SignedData* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_SignedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_SignedData* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_SignedData (ASN1ConstCharPtr name, ASN1T_CMSStream_SignedData* pValue, ASN1T_CMSStream_SignedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_SignedData (ASN1CTXT *pctxt, ASN1T_CMSStream_SignedData* pSrcValue, ASN1T_CMSStream_SignedData* pDstValue);

EXTERN void asn1Free_CMSStream_SignedData
   (ASN1CTXT *pctxt, ASN1T_CMSStream_SignedData* pvalue);

/**************************************************************/
/*                                                            */
/*  OriginatorInfo                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_OriginatorInfo;

struct EXTERN ASN1T_CMSStream_OriginatorInfo : public ASN1TPDU {
   struct {
      unsigned certsPresent : 1;
      unsigned crlsPresent : 1;
   } m;
   ASN1T_CMSStream_CertificateSet certs;
   ASN1T_CMSStream_RevocationInfoChoices crls;
   ASN1T_CMSStream_OriginatorInfo ();
   ASN1T_CMSStream_OriginatorInfo (ASN1C_CMSStream_OriginatorInfo& srcData);
   ~ASN1T_CMSStream_OriginatorInfo ();
} ;

class EXTERN ASN1C_CMSStream_OriginatorInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_OriginatorInfo& msgData;
public:
   ASN1C_CMSStream_OriginatorInfo (ASN1T_CMSStream_OriginatorInfo& data);
   ASN1C_CMSStream_OriginatorInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_OriginatorInfo& data);
   ASN1C_CMSStream_OriginatorInfo (ASN1C_CMSStream_OriginatorInfo& original);

   inline ASN1T_CMSStream_OriginatorInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_OriginatorInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_OriginatorInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_OriginatorInfo& getCopy (ASN1T_CMSStream_OriginatorInfo* pDstData = 0);
   ASN1T_CMSStream_OriginatorInfo* newCopy ();

   inline ASN1C_CMSStream_OriginatorInfo& operator= (ASN1C_CMSStream_OriginatorInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_OriginatorInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_OriginatorInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_OriginatorInfo
   (const char* name, ASN1T_CMSStream_OriginatorInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_OriginatorInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_OriginatorInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_OriginatorInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_OriginatorInfo* pValue, ASN1T_CMSStream_OriginatorInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_OriginatorInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_OriginatorInfo* pSrcValue, ASN1T_CMSStream_OriginatorInfo* pDstValue);

EXTERN void asn1Free_CMSStream_OriginatorInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_OriginatorInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientIdentifier                                       */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMSStream_RecipientIdentifier_issuerAndSerialNumber 1
#define T_CMSStream_RecipientIdentifier_subjectKeyIdentifier 2

class EXTERN ASN1C_CMSStream_RecipientIdentifier;

struct EXTERN ASN1T_CMSStream_RecipientIdentifier : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_PKCS7Stream_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMSStream_SubjectKeyIdentifier *subjectKeyIdentifier;
   } u;
   ASN1T_CMSStream_RecipientIdentifier () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMSStream_RecipientIdentifier (ASN1C_CMSStream_RecipientIdentifier& srcData);
   ~ASN1T_CMSStream_RecipientIdentifier ();
} ;

class EXTERN ASN1C_CMSStream_RecipientIdentifier :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_RecipientIdentifier& msgData;
public:
   ASN1C_CMSStream_RecipientIdentifier (ASN1T_CMSStream_RecipientIdentifier& data);
   ASN1C_CMSStream_RecipientIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_RecipientIdentifier& data);
   ASN1C_CMSStream_RecipientIdentifier (ASN1C_CMSStream_RecipientIdentifier& original);

   inline ASN1T_CMSStream_RecipientIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_RecipientIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_RecipientIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_RecipientIdentifier& getCopy (ASN1T_CMSStream_RecipientIdentifier* pDstData = 0);
   ASN1T_CMSStream_RecipientIdentifier* newCopy ();

   inline ASN1C_CMSStream_RecipientIdentifier& operator= (ASN1C_CMSStream_RecipientIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_RecipientIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_RecipientIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_RecipientIdentifier
   (const char* name, ASN1T_CMSStream_RecipientIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_RecipientIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_RecipientIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientIdentifier* pValue, ASN1T_CMSStream_RecipientIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_RecipientIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientIdentifier* pSrcValue, ASN1T_CMSStream_RecipientIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_RecipientIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyTransRecipientInfo                                     */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_KeyTransRecipientInfo;

struct EXTERN ASN1T_CMSStream_KeyTransRecipientInfo : public ASN1TPDU {
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_CMSStream_RecipientIdentifier rid;
   ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_CMSStream_EncryptedKey encryptedKey;
   ASN1T_CMSStream_KeyTransRecipientInfo ();
   ASN1T_CMSStream_KeyTransRecipientInfo (ASN1C_CMSStream_KeyTransRecipientInfo& srcData);
   ~ASN1T_CMSStream_KeyTransRecipientInfo ();
} ;

class EXTERN ASN1C_CMSStream_KeyTransRecipientInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_KeyTransRecipientInfo& msgData;
public:
   ASN1C_CMSStream_KeyTransRecipientInfo (ASN1T_CMSStream_KeyTransRecipientInfo& data);
   ASN1C_CMSStream_KeyTransRecipientInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_KeyTransRecipientInfo& data);
   ASN1C_CMSStream_KeyTransRecipientInfo (ASN1C_CMSStream_KeyTransRecipientInfo& original);

   inline ASN1T_CMSStream_KeyTransRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_KeyTransRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_KeyTransRecipientInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_KeyTransRecipientInfo& getCopy (ASN1T_CMSStream_KeyTransRecipientInfo* pDstData = 0);
   ASN1T_CMSStream_KeyTransRecipientInfo* newCopy ();

   inline ASN1C_CMSStream_KeyTransRecipientInfo& operator= (ASN1C_CMSStream_KeyTransRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_KeyTransRecipientInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_KeyTransRecipientInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_KeyTransRecipientInfo
   (const char* name, ASN1T_CMSStream_KeyTransRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_KeyTransRecipientInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_KeyTransRecipientInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_KeyTransRecipientInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_KeyTransRecipientInfo* pValue, ASN1T_CMSStream_KeyTransRecipientInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_KeyTransRecipientInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyTransRecipientInfo* pSrcValue, ASN1T_CMSStream_KeyTransRecipientInfo* pDstValue);

EXTERN void asn1Free_CMSStream_KeyTransRecipientInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyTransRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  OriginatorPublicKey                                       */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_OriginatorPublicKey;

struct EXTERN ASN1T_CMSStream_OriginatorPublicKey : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier algorithm;
   ASN1TDynBitStr publicKey;
   ASN1T_CMSStream_OriginatorPublicKey ();
   ASN1T_CMSStream_OriginatorPublicKey (ASN1C_CMSStream_OriginatorPublicKey& srcData);
   ~ASN1T_CMSStream_OriginatorPublicKey ();
} ;

class EXTERN ASN1C_CMSStream_OriginatorPublicKey :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_OriginatorPublicKey& msgData;
public:
   ASN1C_CMSStream_OriginatorPublicKey (ASN1T_CMSStream_OriginatorPublicKey& data);
   ASN1C_CMSStream_OriginatorPublicKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_OriginatorPublicKey& data);
   ASN1C_CMSStream_OriginatorPublicKey (ASN1C_CMSStream_OriginatorPublicKey& original);

   inline ASN1T_CMSStream_OriginatorPublicKey& getData () { return msgData; }
   inline const ASN1T_CMSStream_OriginatorPublicKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_OriginatorPublicKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_OriginatorPublicKey& getCopy (ASN1T_CMSStream_OriginatorPublicKey* pDstData = 0);
   ASN1T_CMSStream_OriginatorPublicKey* newCopy ();

   inline ASN1C_CMSStream_OriginatorPublicKey& operator= (ASN1C_CMSStream_OriginatorPublicKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_OriginatorPublicKey (ASN1CTXT* pctxt,
   ASN1T_CMSStream_OriginatorPublicKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_OriginatorPublicKey
   (const char* name, ASN1T_CMSStream_OriginatorPublicKey* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_OriginatorPublicKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_OriginatorPublicKey* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_OriginatorPublicKey (ASN1ConstCharPtr name, ASN1T_CMSStream_OriginatorPublicKey* pValue, ASN1T_CMSStream_OriginatorPublicKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_OriginatorPublicKey (ASN1CTXT *pctxt, ASN1T_CMSStream_OriginatorPublicKey* pSrcValue, ASN1T_CMSStream_OriginatorPublicKey* pDstValue);

EXTERN void asn1Free_CMSStream_OriginatorPublicKey
   (ASN1CTXT *pctxt, ASN1T_CMSStream_OriginatorPublicKey* pvalue);

/**************************************************************/
/*                                                            */
/*  OriginatorIdentifierOrKey                                 */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMSStream_OriginatorIdentifierOrKey_issuerAndSerialNumber 1
#define T_CMSStream_OriginatorIdentifierOrKey_subjectKeyIdentifier 2
#define T_CMSStream_OriginatorIdentifierOrKey_originatorKey 3

class EXTERN ASN1C_CMSStream_OriginatorIdentifierOrKey;

struct EXTERN ASN1T_CMSStream_OriginatorIdentifierOrKey : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_PKCS7Stream_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMSStream_SubjectKeyIdentifier *subjectKeyIdentifier;
      /* t = 3 */
      ASN1T_CMSStream_OriginatorPublicKey *originatorKey;
   } u;
   ASN1T_CMSStream_OriginatorIdentifierOrKey () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMSStream_OriginatorIdentifierOrKey (ASN1C_CMSStream_OriginatorIdentifierOrKey& srcData);
   ~ASN1T_CMSStream_OriginatorIdentifierOrKey ();
} ;

class EXTERN ASN1C_CMSStream_OriginatorIdentifierOrKey :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_OriginatorIdentifierOrKey& msgData;
public:
   ASN1C_CMSStream_OriginatorIdentifierOrKey (ASN1T_CMSStream_OriginatorIdentifierOrKey& data);
   ASN1C_CMSStream_OriginatorIdentifierOrKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_OriginatorIdentifierOrKey& data);
   ASN1C_CMSStream_OriginatorIdentifierOrKey (ASN1C_CMSStream_OriginatorIdentifierOrKey& original);

   inline ASN1T_CMSStream_OriginatorIdentifierOrKey& getData () { return msgData; }
   inline const ASN1T_CMSStream_OriginatorIdentifierOrKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_OriginatorIdentifierOrKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_OriginatorIdentifierOrKey& getCopy (ASN1T_CMSStream_OriginatorIdentifierOrKey* pDstData = 0);
   ASN1T_CMSStream_OriginatorIdentifierOrKey* newCopy ();

   inline ASN1C_CMSStream_OriginatorIdentifierOrKey& operator= (ASN1C_CMSStream_OriginatorIdentifierOrKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_OriginatorIdentifierOrKey (ASN1CTXT* pctxt,
   ASN1T_CMSStream_OriginatorIdentifierOrKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_OriginatorIdentifierOrKey
   (const char* name, ASN1T_CMSStream_OriginatorIdentifierOrKey* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_OriginatorIdentifierOrKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_OriginatorIdentifierOrKey* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_OriginatorIdentifierOrKey (ASN1ConstCharPtr name, ASN1T_CMSStream_OriginatorIdentifierOrKey* pValue, ASN1T_CMSStream_OriginatorIdentifierOrKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_OriginatorIdentifierOrKey (ASN1CTXT *pctxt, ASN1T_CMSStream_OriginatorIdentifierOrKey* pSrcValue, ASN1T_CMSStream_OriginatorIdentifierOrKey* pDstValue);

EXTERN void asn1Free_CMSStream_OriginatorIdentifierOrKey
   (ASN1CTXT *pctxt, ASN1T_CMSStream_OriginatorIdentifierOrKey* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherKeyAttribute                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_OtherKeyAttribute;

struct EXTERN ASN1T_CMSStream_OtherKeyAttribute : public ASN1TPDU {
   struct {
      unsigned keyAttrPresent : 1;
   } m;
   ASN1TObjId keyAttrId;
   ASN1TOpenType keyAttr;
   ASN1T_CMSStream_OtherKeyAttribute ();
   ASN1T_CMSStream_OtherKeyAttribute (ASN1C_CMSStream_OtherKeyAttribute& srcData);
   ~ASN1T_CMSStream_OtherKeyAttribute ();
} ;

class EXTERN ASN1C_CMSStream_OtherKeyAttribute :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_OtherKeyAttribute& msgData;
public:
   ASN1C_CMSStream_OtherKeyAttribute (ASN1T_CMSStream_OtherKeyAttribute& data);
   ASN1C_CMSStream_OtherKeyAttribute (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_OtherKeyAttribute& data);
   ASN1C_CMSStream_OtherKeyAttribute (ASN1C_CMSStream_OtherKeyAttribute& original);

   inline ASN1T_CMSStream_OtherKeyAttribute& getData () { return msgData; }
   inline const ASN1T_CMSStream_OtherKeyAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_OtherKeyAttribute* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_OtherKeyAttribute& getCopy (ASN1T_CMSStream_OtherKeyAttribute* pDstData = 0);
   ASN1T_CMSStream_OtherKeyAttribute* newCopy ();

   inline ASN1C_CMSStream_OtherKeyAttribute& operator= (ASN1C_CMSStream_OtherKeyAttribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_OtherKeyAttribute (ASN1CTXT* pctxt,
   ASN1T_CMSStream_OtherKeyAttribute *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_OtherKeyAttribute
   (const char* name, ASN1T_CMSStream_OtherKeyAttribute* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_OtherKeyAttribute
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_OtherKeyAttribute* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_OtherKeyAttribute (ASN1ConstCharPtr name, ASN1T_CMSStream_OtherKeyAttribute* pValue, ASN1T_CMSStream_OtherKeyAttribute* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_OtherKeyAttribute (ASN1CTXT *pctxt, ASN1T_CMSStream_OtherKeyAttribute* pSrcValue, ASN1T_CMSStream_OtherKeyAttribute* pDstValue);

EXTERN void asn1Free_CMSStream_OtherKeyAttribute
   (ASN1CTXT *pctxt, ASN1T_CMSStream_OtherKeyAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientKeyIdentifier                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_RecipientKeyIdentifier;

struct EXTERN ASN1T_CMSStream_RecipientKeyIdentifier : public ASN1TPDU {
   struct {
      unsigned datePresent : 1;
      unsigned otherPresent : 1;
   } m;
   ASN1T_CMSStream_SubjectKeyIdentifier subjectKeyIdentifier;
   ASN1GeneralizedTime date;
   ASN1T_CMSStream_OtherKeyAttribute other;
   ASN1T_CMSStream_RecipientKeyIdentifier ();
   ASN1T_CMSStream_RecipientKeyIdentifier (ASN1C_CMSStream_RecipientKeyIdentifier& srcData);
   ~ASN1T_CMSStream_RecipientKeyIdentifier ();
} ;

class EXTERN ASN1C_CMSStream_RecipientKeyIdentifier :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_RecipientKeyIdentifier& msgData;
public:
   ASN1C_CMSStream_RecipientKeyIdentifier (ASN1T_CMSStream_RecipientKeyIdentifier& data);
   ASN1C_CMSStream_RecipientKeyIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_RecipientKeyIdentifier& data);
   ASN1C_CMSStream_RecipientKeyIdentifier (ASN1C_CMSStream_RecipientKeyIdentifier& original);

   inline ASN1T_CMSStream_RecipientKeyIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_RecipientKeyIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_RecipientKeyIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_RecipientKeyIdentifier& getCopy (ASN1T_CMSStream_RecipientKeyIdentifier* pDstData = 0);
   ASN1T_CMSStream_RecipientKeyIdentifier* newCopy ();

   inline ASN1C_CMSStream_RecipientKeyIdentifier& operator= (ASN1C_CMSStream_RecipientKeyIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_RecipientKeyIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_RecipientKeyIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_RecipientKeyIdentifier
   (const char* name, ASN1T_CMSStream_RecipientKeyIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_RecipientKeyIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientKeyIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_RecipientKeyIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientKeyIdentifier* pValue, ASN1T_CMSStream_RecipientKeyIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_RecipientKeyIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientKeyIdentifier* pSrcValue, ASN1T_CMSStream_RecipientKeyIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_RecipientKeyIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientKeyIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyAgreeRecipientIdentifier                               */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMSStream_KeyAgreeRecipientIdentifier_issuerAndSerialNumber 1
#define T_CMSStream_KeyAgreeRecipientIdentifier_rKeyId 2

class EXTERN ASN1C_CMSStream_KeyAgreeRecipientIdentifier;

struct EXTERN ASN1T_CMSStream_KeyAgreeRecipientIdentifier : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_PKCS7Stream_IssuerAndSerialNumber *issuerAndSerialNumber;
      /* t = 2 */
      ASN1T_CMSStream_RecipientKeyIdentifier *rKeyId;
   } u;
   ASN1T_CMSStream_KeyAgreeRecipientIdentifier () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMSStream_KeyAgreeRecipientIdentifier (ASN1C_CMSStream_KeyAgreeRecipientIdentifier& srcData);
   ~ASN1T_CMSStream_KeyAgreeRecipientIdentifier ();
} ;

class EXTERN ASN1C_CMSStream_KeyAgreeRecipientIdentifier :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_KeyAgreeRecipientIdentifier& msgData;
public:
   ASN1C_CMSStream_KeyAgreeRecipientIdentifier (ASN1T_CMSStream_KeyAgreeRecipientIdentifier& data);
   ASN1C_CMSStream_KeyAgreeRecipientIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_KeyAgreeRecipientIdentifier& data);
   ASN1C_CMSStream_KeyAgreeRecipientIdentifier (ASN1C_CMSStream_KeyAgreeRecipientIdentifier& original);

   inline ASN1T_CMSStream_KeyAgreeRecipientIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_KeyAgreeRecipientIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_KeyAgreeRecipientIdentifier& getCopy (ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pDstData = 0);
   ASN1T_CMSStream_KeyAgreeRecipientIdentifier* newCopy ();

   inline ASN1C_CMSStream_KeyAgreeRecipientIdentifier& operator= (ASN1C_CMSStream_KeyAgreeRecipientIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_KeyAgreeRecipientIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_KeyAgreeRecipientIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_KeyAgreeRecipientIdentifier
   (const char* name, ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_KeyAgreeRecipientIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_KeyAgreeRecipientIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pValue, ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_KeyAgreeRecipientIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pSrcValue, ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_KeyAgreeRecipientIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyAgreeRecipientIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientEncryptedKey                                     */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_RecipientEncryptedKey;

struct EXTERN ASN1T_CMSStream_RecipientEncryptedKey : public ASN1TPDU {
   ASN1T_CMSStream_KeyAgreeRecipientIdentifier rid;
   ASN1T_CMSStream_EncryptedKey encryptedKey;
   ASN1T_CMSStream_RecipientEncryptedKey ();
   ASN1T_CMSStream_RecipientEncryptedKey (ASN1C_CMSStream_RecipientEncryptedKey& srcData);
   ~ASN1T_CMSStream_RecipientEncryptedKey ();
} ;

class EXTERN ASN1C_CMSStream_RecipientEncryptedKey :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_RecipientEncryptedKey& msgData;
public:
   ASN1C_CMSStream_RecipientEncryptedKey (ASN1T_CMSStream_RecipientEncryptedKey& data);
   ASN1C_CMSStream_RecipientEncryptedKey (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_RecipientEncryptedKey& data);
   ASN1C_CMSStream_RecipientEncryptedKey (ASN1C_CMSStream_RecipientEncryptedKey& original);

   inline ASN1T_CMSStream_RecipientEncryptedKey& getData () { return msgData; }
   inline const ASN1T_CMSStream_RecipientEncryptedKey& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_RecipientEncryptedKey* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_RecipientEncryptedKey& getCopy (ASN1T_CMSStream_RecipientEncryptedKey* pDstData = 0);
   ASN1T_CMSStream_RecipientEncryptedKey* newCopy ();

   inline ASN1C_CMSStream_RecipientEncryptedKey& operator= (ASN1C_CMSStream_RecipientEncryptedKey& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_RecipientEncryptedKey (ASN1CTXT* pctxt,
   ASN1T_CMSStream_RecipientEncryptedKey *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_RecipientEncryptedKey
   (const char* name, ASN1T_CMSStream_RecipientEncryptedKey* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_RecipientEncryptedKey
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientEncryptedKey* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_RecipientEncryptedKey (ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientEncryptedKey* pValue, ASN1T_CMSStream_RecipientEncryptedKey* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_RecipientEncryptedKey (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientEncryptedKey* pSrcValue, ASN1T_CMSStream_RecipientEncryptedKey* pDstValue);

EXTERN void asn1Free_CMSStream_RecipientEncryptedKey
   (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientEncryptedKey* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientEncryptedKeys                                    */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMSStream_RecipientEncryptedKey */
typedef struct EXTERN ASN1T_CMSStream_RecipientEncryptedKeys : public ASN1TPDUSeqOfList {
   ~ASN1T_CMSStream_RecipientEncryptedKeys();
} ASN1T_CMSStream_RecipientEncryptedKeys;

class EXTERN ASN1C_CMSStream_RecipientEncryptedKeys :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMSStream_RecipientEncryptedKeys& msgData;
public:
   ASN1C_CMSStream_RecipientEncryptedKeys (ASN1T_CMSStream_RecipientEncryptedKeys& data);
   ASN1C_CMSStream_RecipientEncryptedKeys (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_RecipientEncryptedKeys& data);
   ASN1C_CMSStream_RecipientEncryptedKeys (ASN1C_CMSStream_RecipientEncryptedKeys& original);

   inline ASN1T_CMSStream_RecipientEncryptedKeys& getData () { return msgData; }
   inline const ASN1T_CMSStream_RecipientEncryptedKeys& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_RecipientEncryptedKeys* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_RecipientEncryptedKeys& getCopy (ASN1T_CMSStream_RecipientEncryptedKeys* pDstData = 0);
   ASN1T_CMSStream_RecipientEncryptedKeys* newCopy ();

   ASN1C_CMSStream_RecipientEncryptedKeys& operator= (ASN1C_CMSStream_RecipientEncryptedKeys& srcData);
   void Append (ASN1T_CMSStream_RecipientEncryptedKey *elem);
   ASN1T_CMSStream_RecipientEncryptedKey *NewElement ();
} ;

EXTERN int asn1BSD_CMSStream_RecipientEncryptedKeys (ASN1CTXT* pctxt,
   ASN1T_CMSStream_RecipientEncryptedKeys *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_RecipientEncryptedKeys
   (const char* name, ASN1T_CMSStream_RecipientEncryptedKeys* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_RecipientEncryptedKeys
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientEncryptedKeys* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_RecipientEncryptedKeys (ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientEncryptedKeys* pValue, ASN1T_CMSStream_RecipientEncryptedKeys* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_RecipientEncryptedKeys (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientEncryptedKeys* pSrcValue, ASN1T_CMSStream_RecipientEncryptedKeys* pDstValue);

EXTERN void asn1Free_CMSStream_RecipientEncryptedKeys
   (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientEncryptedKeys* pvalue);

/**************************************************************/
/*                                                            */
/*  KeyAgreeRecipientInfo                                     */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_KeyAgreeRecipientInfo;

struct EXTERN ASN1T_CMSStream_KeyAgreeRecipientInfo : public ASN1TPDU {
   struct {
      unsigned ukmPresent : 1;
   } m;
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_CMSStream_OriginatorIdentifierOrKey originator;
   ASN1T_CMSStream_UserKeyingMaterial ukm;
   ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_CMSStream_RecipientEncryptedKeys recipientEncryptedKeys;
   ASN1T_CMSStream_KeyAgreeRecipientInfo ();
   ASN1T_CMSStream_KeyAgreeRecipientInfo (ASN1C_CMSStream_KeyAgreeRecipientInfo& srcData);
   ~ASN1T_CMSStream_KeyAgreeRecipientInfo ();
} ;

class EXTERN ASN1C_CMSStream_KeyAgreeRecipientInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_KeyAgreeRecipientInfo& msgData;
public:
   ASN1C_CMSStream_KeyAgreeRecipientInfo (ASN1T_CMSStream_KeyAgreeRecipientInfo& data);
   ASN1C_CMSStream_KeyAgreeRecipientInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_KeyAgreeRecipientInfo& data);
   ASN1C_CMSStream_KeyAgreeRecipientInfo (ASN1C_CMSStream_KeyAgreeRecipientInfo& original);

   inline ASN1T_CMSStream_KeyAgreeRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_KeyAgreeRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_KeyAgreeRecipientInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_KeyAgreeRecipientInfo& getCopy (ASN1T_CMSStream_KeyAgreeRecipientInfo* pDstData = 0);
   ASN1T_CMSStream_KeyAgreeRecipientInfo* newCopy ();

   inline ASN1C_CMSStream_KeyAgreeRecipientInfo& operator= (ASN1C_CMSStream_KeyAgreeRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_KeyAgreeRecipientInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_KeyAgreeRecipientInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_KeyAgreeRecipientInfo
   (const char* name, ASN1T_CMSStream_KeyAgreeRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_KeyAgreeRecipientInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_KeyAgreeRecipientInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_KeyAgreeRecipientInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_KeyAgreeRecipientInfo* pValue, ASN1T_CMSStream_KeyAgreeRecipientInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_KeyAgreeRecipientInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyAgreeRecipientInfo* pSrcValue, ASN1T_CMSStream_KeyAgreeRecipientInfo* pDstValue);

EXTERN void asn1Free_CMSStream_KeyAgreeRecipientInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_KeyAgreeRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  KEKIdentifier                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_KEKIdentifier;

struct EXTERN ASN1T_CMSStream_KEKIdentifier : public ASN1TPDU {
   struct {
      unsigned datePresent : 1;
      unsigned otherPresent : 1;
   } m;
   ASN1TDynOctStr keyIdentifier;
   ASN1GeneralizedTime date;
   ASN1T_CMSStream_OtherKeyAttribute other;
   ASN1T_CMSStream_KEKIdentifier ();
   ASN1T_CMSStream_KEKIdentifier (ASN1C_CMSStream_KEKIdentifier& srcData);
   ~ASN1T_CMSStream_KEKIdentifier ();
} ;

class EXTERN ASN1C_CMSStream_KEKIdentifier :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_KEKIdentifier& msgData;
public:
   ASN1C_CMSStream_KEKIdentifier (ASN1T_CMSStream_KEKIdentifier& data);
   ASN1C_CMSStream_KEKIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_KEKIdentifier& data);
   ASN1C_CMSStream_KEKIdentifier (ASN1C_CMSStream_KEKIdentifier& original);

   inline ASN1T_CMSStream_KEKIdentifier& getData () { return msgData; }
   inline const ASN1T_CMSStream_KEKIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_KEKIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_KEKIdentifier& getCopy (ASN1T_CMSStream_KEKIdentifier* pDstData = 0);
   ASN1T_CMSStream_KEKIdentifier* newCopy ();

   inline ASN1C_CMSStream_KEKIdentifier& operator= (ASN1C_CMSStream_KEKIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_KEKIdentifier (ASN1CTXT* pctxt,
   ASN1T_CMSStream_KEKIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_KEKIdentifier
   (const char* name, ASN1T_CMSStream_KEKIdentifier* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_KEKIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_KEKIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_KEKIdentifier (ASN1ConstCharPtr name, ASN1T_CMSStream_KEKIdentifier* pValue, ASN1T_CMSStream_KEKIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_KEKIdentifier (ASN1CTXT *pctxt, ASN1T_CMSStream_KEKIdentifier* pSrcValue, ASN1T_CMSStream_KEKIdentifier* pDstValue);

EXTERN void asn1Free_CMSStream_KEKIdentifier
   (ASN1CTXT *pctxt, ASN1T_CMSStream_KEKIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  KEKRecipientInfo                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_KEKRecipientInfo;

struct EXTERN ASN1T_CMSStream_KEKRecipientInfo : public ASN1TPDU {
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_CMSStream_KEKIdentifier kekid;
   ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_CMSStream_EncryptedKey encryptedKey;
   ASN1T_CMSStream_KEKRecipientInfo ();
   ASN1T_CMSStream_KEKRecipientInfo (ASN1C_CMSStream_KEKRecipientInfo& srcData);
   ~ASN1T_CMSStream_KEKRecipientInfo ();
} ;

class EXTERN ASN1C_CMSStream_KEKRecipientInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_KEKRecipientInfo& msgData;
public:
   ASN1C_CMSStream_KEKRecipientInfo (ASN1T_CMSStream_KEKRecipientInfo& data);
   ASN1C_CMSStream_KEKRecipientInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_KEKRecipientInfo& data);
   ASN1C_CMSStream_KEKRecipientInfo (ASN1C_CMSStream_KEKRecipientInfo& original);

   inline ASN1T_CMSStream_KEKRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_KEKRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_KEKRecipientInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_KEKRecipientInfo& getCopy (ASN1T_CMSStream_KEKRecipientInfo* pDstData = 0);
   ASN1T_CMSStream_KEKRecipientInfo* newCopy ();

   inline ASN1C_CMSStream_KEKRecipientInfo& operator= (ASN1C_CMSStream_KEKRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_KEKRecipientInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_KEKRecipientInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_KEKRecipientInfo
   (const char* name, ASN1T_CMSStream_KEKRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_KEKRecipientInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_KEKRecipientInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_KEKRecipientInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_KEKRecipientInfo* pValue, ASN1T_CMSStream_KEKRecipientInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_KEKRecipientInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_KEKRecipientInfo* pSrcValue, ASN1T_CMSStream_KEKRecipientInfo* pDstValue);

EXTERN void asn1Free_CMSStream_KEKRecipientInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_KEKRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  PasswordRecipientInfo                                     */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_PasswordRecipientInfo;

struct EXTERN ASN1T_CMSStream_PasswordRecipientInfo : public ASN1TPDU {
   struct {
      unsigned keyDerivationAlgorithmPresent : 1;
   } m;
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_CMSStream_KeyDerivationAlgorithmIdentifier keyDerivationAlgorithm;
   ASN1T_CMSStream_KeyEncryptionAlgorithmIdentifier keyEncryptionAlgorithm;
   ASN1T_CMSStream_EncryptedKey encryptedKey;
   ASN1T_CMSStream_PasswordRecipientInfo ();
   ASN1T_CMSStream_PasswordRecipientInfo (ASN1C_CMSStream_PasswordRecipientInfo& srcData);
   ~ASN1T_CMSStream_PasswordRecipientInfo ();
} ;

class EXTERN ASN1C_CMSStream_PasswordRecipientInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_PasswordRecipientInfo& msgData;
public:
   ASN1C_CMSStream_PasswordRecipientInfo (ASN1T_CMSStream_PasswordRecipientInfo& data);
   ASN1C_CMSStream_PasswordRecipientInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_PasswordRecipientInfo& data);
   ASN1C_CMSStream_PasswordRecipientInfo (ASN1C_CMSStream_PasswordRecipientInfo& original);

   inline ASN1T_CMSStream_PasswordRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_PasswordRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_PasswordRecipientInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_PasswordRecipientInfo& getCopy (ASN1T_CMSStream_PasswordRecipientInfo* pDstData = 0);
   ASN1T_CMSStream_PasswordRecipientInfo* newCopy ();

   inline ASN1C_CMSStream_PasswordRecipientInfo& operator= (ASN1C_CMSStream_PasswordRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_PasswordRecipientInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_PasswordRecipientInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_PasswordRecipientInfo
   (const char* name, ASN1T_CMSStream_PasswordRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_PasswordRecipientInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_PasswordRecipientInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_PasswordRecipientInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_PasswordRecipientInfo* pValue, ASN1T_CMSStream_PasswordRecipientInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_PasswordRecipientInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_PasswordRecipientInfo* pSrcValue, ASN1T_CMSStream_PasswordRecipientInfo* pDstValue);

EXTERN void asn1Free_CMSStream_PasswordRecipientInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_PasswordRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRecipientInfo                                        */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_OtherRecipientInfo;

struct EXTERN ASN1T_CMSStream_OtherRecipientInfo : public ASN1TPDU {
   ASN1TObjId oriType;
   ASN1TOpenType oriValue;
   ASN1T_CMSStream_OtherRecipientInfo ();
   ASN1T_CMSStream_OtherRecipientInfo (ASN1C_CMSStream_OtherRecipientInfo& srcData);
   ~ASN1T_CMSStream_OtherRecipientInfo ();
} ;

class EXTERN ASN1C_CMSStream_OtherRecipientInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_OtherRecipientInfo& msgData;
public:
   ASN1C_CMSStream_OtherRecipientInfo (ASN1T_CMSStream_OtherRecipientInfo& data);
   ASN1C_CMSStream_OtherRecipientInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_OtherRecipientInfo& data);
   ASN1C_CMSStream_OtherRecipientInfo (ASN1C_CMSStream_OtherRecipientInfo& original);

   inline ASN1T_CMSStream_OtherRecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_OtherRecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_OtherRecipientInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_OtherRecipientInfo& getCopy (ASN1T_CMSStream_OtherRecipientInfo* pDstData = 0);
   ASN1T_CMSStream_OtherRecipientInfo* newCopy ();

   inline ASN1C_CMSStream_OtherRecipientInfo& operator= (ASN1C_CMSStream_OtherRecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_OtherRecipientInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_OtherRecipientInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_OtherRecipientInfo
   (const char* name, ASN1T_CMSStream_OtherRecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_OtherRecipientInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_OtherRecipientInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_OtherRecipientInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_OtherRecipientInfo* pValue, ASN1T_CMSStream_OtherRecipientInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_OtherRecipientInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_OtherRecipientInfo* pSrcValue, ASN1T_CMSStream_OtherRecipientInfo* pDstValue);

EXTERN void asn1Free_CMSStream_OtherRecipientInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_OtherRecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientInfo                                             */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMSStream_RecipientInfo_ktri  1
#define T_CMSStream_RecipientInfo_kari  2
#define T_CMSStream_RecipientInfo_kekri 3
#define T_CMSStream_RecipientInfo_pwri  4
#define T_CMSStream_RecipientInfo_ori   5

class EXTERN ASN1C_CMSStream_RecipientInfo;

struct EXTERN ASN1T_CMSStream_RecipientInfo : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_CMSStream_KeyTransRecipientInfo *ktri;
      /* t = 2 */
      ASN1T_CMSStream_KeyAgreeRecipientInfo *kari;
      /* t = 3 */
      ASN1T_CMSStream_KEKRecipientInfo *kekri;
      /* t = 4 */
      ASN1T_CMSStream_PasswordRecipientInfo *pwri;
      /* t = 5 */
      ASN1T_CMSStream_OtherRecipientInfo *ori;
   } u;
   ASN1T_CMSStream_RecipientInfo () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMSStream_RecipientInfo (ASN1C_CMSStream_RecipientInfo& srcData);
   ~ASN1T_CMSStream_RecipientInfo ();
} ;

class EXTERN ASN1C_CMSStream_RecipientInfo :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_RecipientInfo& msgData;
public:
   ASN1C_CMSStream_RecipientInfo (ASN1T_CMSStream_RecipientInfo& data);
   ASN1C_CMSStream_RecipientInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_RecipientInfo& data);
   ASN1C_CMSStream_RecipientInfo (ASN1C_CMSStream_RecipientInfo& original);

   inline ASN1T_CMSStream_RecipientInfo& getData () { return msgData; }
   inline const ASN1T_CMSStream_RecipientInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_RecipientInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_RecipientInfo& getCopy (ASN1T_CMSStream_RecipientInfo* pDstData = 0);
   ASN1T_CMSStream_RecipientInfo* newCopy ();

   inline ASN1C_CMSStream_RecipientInfo& operator= (ASN1C_CMSStream_RecipientInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_RecipientInfo (ASN1CTXT* pctxt,
   ASN1T_CMSStream_RecipientInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_RecipientInfo
   (const char* name, ASN1T_CMSStream_RecipientInfo* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_RecipientInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientInfo* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_RecipientInfo (ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientInfo* pValue, ASN1T_CMSStream_RecipientInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_RecipientInfo (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientInfo* pSrcValue, ASN1T_CMSStream_RecipientInfo* pDstValue);

EXTERN void asn1Free_CMSStream_RecipientInfo
   (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  RecipientInfos                                            */
/*                                                            */
/**************************************************************/

/* List of ASN1T_CMSStream_RecipientInfo */
typedef struct EXTERN ASN1T_CMSStream_RecipientInfos : public ASN1TPDUSeqOfList {
   ~ASN1T_CMSStream_RecipientInfos();
} ASN1T_CMSStream_RecipientInfos;

class EXTERN ASN1C_CMSStream_RecipientInfos :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMSStream_RecipientInfos& msgData;
public:
   ASN1C_CMSStream_RecipientInfos (ASN1T_CMSStream_RecipientInfos& data);
   ASN1C_CMSStream_RecipientInfos (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_RecipientInfos& data);
   ASN1C_CMSStream_RecipientInfos (ASN1C_CMSStream_RecipientInfos& original);

   inline ASN1T_CMSStream_RecipientInfos& getData () { return msgData; }
   inline const ASN1T_CMSStream_RecipientInfos& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_RecipientInfos* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_RecipientInfos& getCopy (ASN1T_CMSStream_RecipientInfos* pDstData = 0);
   ASN1T_CMSStream_RecipientInfos* newCopy ();

   ASN1C_CMSStream_RecipientInfos& operator= (ASN1C_CMSStream_RecipientInfos& srcData);
   void Append (ASN1T_CMSStream_RecipientInfo *elem);
   ASN1T_CMSStream_RecipientInfo *NewElement ();
} ;

EXTERN int asn1BSD_CMSStream_RecipientInfos (ASN1CTXT* pctxt,
   ASN1T_CMSStream_RecipientInfos *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_RecipientInfos
   (const char* name, ASN1T_CMSStream_RecipientInfos* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_RecipientInfos
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientInfos* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_RecipientInfos (ASN1ConstCharPtr name, ASN1T_CMSStream_RecipientInfos* pValue, ASN1T_CMSStream_RecipientInfos* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_RecipientInfos (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientInfos* pSrcValue, ASN1T_CMSStream_RecipientInfos* pDstValue);

EXTERN void asn1Free_CMSStream_RecipientInfos
   (ASN1CTXT *pctxt, ASN1T_CMSStream_RecipientInfos* pvalue);

/**************************************************************/
/*                                                            */
/*  UnprotectedAttributes                                     */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_CMSStream_UnprotectedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_CMSStream_UnprotectedAttributes();
} ASN1T_CMSStream_UnprotectedAttributes;

class EXTERN ASN1C_CMSStream_UnprotectedAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_CMSStream_UnprotectedAttributes& msgData;
public:
   ASN1C_CMSStream_UnprotectedAttributes (ASN1T_CMSStream_UnprotectedAttributes& data);
   ASN1C_CMSStream_UnprotectedAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_UnprotectedAttributes& data);
   ASN1C_CMSStream_UnprotectedAttributes (ASN1C_CMSStream_UnprotectedAttributes& original);

   inline ASN1T_CMSStream_UnprotectedAttributes& getData () { return msgData; }
   inline const ASN1T_CMSStream_UnprotectedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_UnprotectedAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_UnprotectedAttributes& getCopy (ASN1T_CMSStream_UnprotectedAttributes* pDstData = 0);
   ASN1T_CMSStream_UnprotectedAttributes* newCopy ();

   ASN1C_CMSStream_UnprotectedAttributes& operator= (ASN1C_CMSStream_UnprotectedAttributes& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_CMSStream_UnprotectedAttributes (ASN1CTXT* pctxt,
   ASN1T_CMSStream_UnprotectedAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_UnprotectedAttributes
   (const char* name, ASN1T_CMSStream_UnprotectedAttributes* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_UnprotectedAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_UnprotectedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_UnprotectedAttributes (ASN1ConstCharPtr name, ASN1T_CMSStream_UnprotectedAttributes* pValue, ASN1T_CMSStream_UnprotectedAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_UnprotectedAttributes (ASN1CTXT *pctxt, ASN1T_CMSStream_UnprotectedAttributes* pSrcValue, ASN1T_CMSStream_UnprotectedAttributes* pDstValue);

EXTERN void asn1Free_CMSStream_UnprotectedAttributes
   (ASN1CTXT *pctxt, ASN1T_CMSStream_UnprotectedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  EnvelopedData                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_EnvelopedData;

struct EXTERN ASN1T_CMSStream_EnvelopedData : public ASN1TPDU {
   struct {
      unsigned originatorInfoPresent : 1;
      unsigned unprotectedAttrsPresent : 1;
   } m;
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_CMSStream_OriginatorInfo originatorInfo;
   ASN1T_CMSStream_RecipientInfos recipientInfos;
   ASN1T_PKCS7Stream_EncryptedContentInfo encryptedContentInfo;
   ASN1T_CMSStream_UnprotectedAttributes unprotectedAttrs;
   ASN1T_CMSStream_EnvelopedData ();
   ASN1T_CMSStream_EnvelopedData (ASN1C_CMSStream_EnvelopedData& srcData);
   ~ASN1T_CMSStream_EnvelopedData ();
} ;

class EXTERN ASN1C_CMSStream_EnvelopedData :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_EnvelopedData& msgData;
public:
   ASN1C_CMSStream_EnvelopedData (ASN1T_CMSStream_EnvelopedData& data);
   ASN1C_CMSStream_EnvelopedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_EnvelopedData& data);
   ASN1C_CMSStream_EnvelopedData (ASN1C_CMSStream_EnvelopedData& original);

   inline ASN1T_CMSStream_EnvelopedData& getData () { return msgData; }
   inline const ASN1T_CMSStream_EnvelopedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_EnvelopedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_EnvelopedData& getCopy (ASN1T_CMSStream_EnvelopedData* pDstData = 0);
   ASN1T_CMSStream_EnvelopedData* newCopy ();

   inline ASN1C_CMSStream_EnvelopedData& operator= (ASN1C_CMSStream_EnvelopedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_EnvelopedData (ASN1CTXT* pctxt,
   ASN1T_CMSStream_EnvelopedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_EnvelopedData
   (const char* name, ASN1T_CMSStream_EnvelopedData* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_EnvelopedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_EnvelopedData* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_EnvelopedData (ASN1ConstCharPtr name, ASN1T_CMSStream_EnvelopedData* pValue, ASN1T_CMSStream_EnvelopedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_EnvelopedData (ASN1CTXT *pctxt, ASN1T_CMSStream_EnvelopedData* pSrcValue, ASN1T_CMSStream_EnvelopedData* pDstValue);

EXTERN void asn1Free_CMSStream_EnvelopedData
   (ASN1CTXT *pctxt, ASN1T_CMSStream_EnvelopedData* pvalue);

/**************************************************************/
/*                                                            */
/*  DigestedData                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_DigestedData;

struct EXTERN ASN1T_CMSStream_DigestedData : public ASN1TPDU {
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_CMSStream_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_CMSStream_EncapsulatedContentInfo encapContentInfo;
   ASN1T_CMSStream_Digest digest;
   ASN1T_CMSStream_DigestedData ();
   ASN1T_CMSStream_DigestedData (ASN1C_CMSStream_DigestedData& srcData);
   ~ASN1T_CMSStream_DigestedData ();
} ;

class EXTERN ASN1C_CMSStream_DigestedData :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_DigestedData& msgData;
public:
   ASN1C_CMSStream_DigestedData (ASN1T_CMSStream_DigestedData& data);
   ASN1C_CMSStream_DigestedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_DigestedData& data);
   ASN1C_CMSStream_DigestedData (ASN1C_CMSStream_DigestedData& original);

   inline ASN1T_CMSStream_DigestedData& getData () { return msgData; }
   inline const ASN1T_CMSStream_DigestedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_DigestedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_DigestedData& getCopy (ASN1T_CMSStream_DigestedData* pDstData = 0);
   ASN1T_CMSStream_DigestedData* newCopy ();

   inline ASN1C_CMSStream_DigestedData& operator= (ASN1C_CMSStream_DigestedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_DigestedData (ASN1CTXT* pctxt,
   ASN1T_CMSStream_DigestedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_DigestedData
   (const char* name, ASN1T_CMSStream_DigestedData* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_DigestedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_DigestedData* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_DigestedData (ASN1ConstCharPtr name, ASN1T_CMSStream_DigestedData* pValue, ASN1T_CMSStream_DigestedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_DigestedData (ASN1CTXT *pctxt, ASN1T_CMSStream_DigestedData* pSrcValue, ASN1T_CMSStream_DigestedData* pDstValue);

EXTERN void asn1Free_CMSStream_DigestedData
   (ASN1CTXT *pctxt, ASN1T_CMSStream_DigestedData* pvalue);

/**************************************************************/
/*                                                            */
/*  EncryptedData                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_EncryptedData;

struct EXTERN ASN1T_CMSStream_EncryptedData : public ASN1TPDU {
   struct {
      unsigned unprotectedAttrsPresent : 1;
   } m;
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_PKCS7Stream_EncryptedContentInfo encryptedContentInfo;
   ASN1T_CMSStream_UnprotectedAttributes unprotectedAttrs;
   ASN1T_CMSStream_EncryptedData ();
   ASN1T_CMSStream_EncryptedData (ASN1C_CMSStream_EncryptedData& srcData);
   ~ASN1T_CMSStream_EncryptedData ();
} ;

class EXTERN ASN1C_CMSStream_EncryptedData :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_EncryptedData& msgData;
public:
   ASN1C_CMSStream_EncryptedData (ASN1T_CMSStream_EncryptedData& data);
   ASN1C_CMSStream_EncryptedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_EncryptedData& data);
   ASN1C_CMSStream_EncryptedData (ASN1C_CMSStream_EncryptedData& original);

   inline ASN1T_CMSStream_EncryptedData& getData () { return msgData; }
   inline const ASN1T_CMSStream_EncryptedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_EncryptedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_EncryptedData& getCopy (ASN1T_CMSStream_EncryptedData* pDstData = 0);
   ASN1T_CMSStream_EncryptedData* newCopy ();

   inline ASN1C_CMSStream_EncryptedData& operator= (ASN1C_CMSStream_EncryptedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_EncryptedData (ASN1CTXT* pctxt,
   ASN1T_CMSStream_EncryptedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_EncryptedData
   (const char* name, ASN1T_CMSStream_EncryptedData* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_EncryptedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_EncryptedData* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_EncryptedData (ASN1ConstCharPtr name, ASN1T_CMSStream_EncryptedData* pValue, ASN1T_CMSStream_EncryptedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_EncryptedData (ASN1CTXT *pctxt, ASN1T_CMSStream_EncryptedData* pSrcValue, ASN1T_CMSStream_EncryptedData* pDstValue);

EXTERN void asn1Free_CMSStream_EncryptedData
   (ASN1CTXT *pctxt, ASN1T_CMSStream_EncryptedData* pvalue);

/**************************************************************/
/*                                                            */
/*  AuthenticatedData                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_CMSStream_AuthenticatedData;

struct EXTERN ASN1T_CMSStream_AuthenticatedData : public ASN1TPDU {
   struct {
      unsigned originatorInfoPresent : 1;
      unsigned digestAlgorithmPresent : 1;
      unsigned authAttrsPresent : 1;
      unsigned unauthAttrsPresent : 1;
   } m;
   ASN1T_CMSStream_CMSVersion version;
   ASN1T_CMSStream_OriginatorInfo originatorInfo;
   ASN1T_CMSStream_RecipientInfos recipientInfos;
   ASN1T_CMSStream_MessageAuthenticationCodeAlgorithm macAlgorithm;
   ASN1T_CMSStream_DigestAlgorithmIdentifier digestAlgorithm;
   ASN1T_CMSStream_EncapsulatedContentInfo encapContentInfo;
   ASN1T_DERCMSStream_AuthAttributes authAttrs;
   ASN1T_CMSStream_MessageAuthenticationCode mac;
   ASN1T_CMSStream_UnauthAttributes unauthAttrs;
   ASN1T_CMSStream_AuthenticatedData ();
   ASN1T_CMSStream_AuthenticatedData (ASN1C_CMSStream_AuthenticatedData& srcData);
   ~ASN1T_CMSStream_AuthenticatedData ();
} ;

class EXTERN ASN1C_CMSStream_AuthenticatedData :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_AuthenticatedData& msgData;
public:
   ASN1C_CMSStream_AuthenticatedData (ASN1T_CMSStream_AuthenticatedData& data);
   ASN1C_CMSStream_AuthenticatedData (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_AuthenticatedData& data);
   ASN1C_CMSStream_AuthenticatedData (ASN1C_CMSStream_AuthenticatedData& original);

   inline ASN1T_CMSStream_AuthenticatedData& getData () { return msgData; }
   inline const ASN1T_CMSStream_AuthenticatedData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_AuthenticatedData* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_AuthenticatedData& getCopy (ASN1T_CMSStream_AuthenticatedData* pDstData = 0);
   ASN1T_CMSStream_AuthenticatedData* newCopy ();

   inline ASN1C_CMSStream_AuthenticatedData& operator= (ASN1C_CMSStream_AuthenticatedData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_AuthenticatedData (ASN1CTXT* pctxt,
   ASN1T_CMSStream_AuthenticatedData *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_AuthenticatedData
   (const char* name, ASN1T_CMSStream_AuthenticatedData* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_AuthenticatedData
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_AuthenticatedData* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_AuthenticatedData (ASN1ConstCharPtr name, ASN1T_CMSStream_AuthenticatedData* pValue, ASN1T_CMSStream_AuthenticatedData* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_AuthenticatedData (ASN1CTXT *pctxt, ASN1T_CMSStream_AuthenticatedData* pSrcValue, ASN1T_CMSStream_AuthenticatedData* pDstValue);

EXTERN void asn1Free_CMSStream_AuthenticatedData
   (ASN1CTXT *pctxt, ASN1T_CMSStream_AuthenticatedData* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedCertificateOrCertificate                          */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_CMSStream_ExtendedCertificateOrCertificate_certificate 1
#define T_CMSStream_ExtendedCertificateOrCertificate_extendedCertificate 2

class EXTERN ASN1C_CMSStream_ExtendedCertificateOrCertificate;

struct EXTERN ASN1T_CMSStream_ExtendedCertificateOrCertificate : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_EXPStream_Certificate *certificate;
      /* t = 2 */
      ASN1T_CMSStream_ExtendedCertificate *extendedCertificate;
   } u;
   ASN1T_CMSStream_ExtendedCertificateOrCertificate () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_CMSStream_ExtendedCertificateOrCertificate (ASN1C_CMSStream_ExtendedCertificateOrCertificate& srcData);
   ~ASN1T_CMSStream_ExtendedCertificateOrCertificate ();
} ;

class EXTERN ASN1C_CMSStream_ExtendedCertificateOrCertificate :
   public ASN1CType
{
protected:
   ASN1T_CMSStream_ExtendedCertificateOrCertificate& msgData;
public:
   ASN1C_CMSStream_ExtendedCertificateOrCertificate (ASN1T_CMSStream_ExtendedCertificateOrCertificate& data);
   ASN1C_CMSStream_ExtendedCertificateOrCertificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_CMSStream_ExtendedCertificateOrCertificate& data);
   ASN1C_CMSStream_ExtendedCertificateOrCertificate (ASN1C_CMSStream_ExtendedCertificateOrCertificate& original);

   inline ASN1T_CMSStream_ExtendedCertificateOrCertificate& getData () { return msgData; }
   inline const ASN1T_CMSStream_ExtendedCertificateOrCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_CMSStream_ExtendedCertificateOrCertificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_CMSStream_ExtendedCertificateOrCertificate& getCopy (ASN1T_CMSStream_ExtendedCertificateOrCertificate* pDstData = 0);
   ASN1T_CMSStream_ExtendedCertificateOrCertificate* newCopy ();

   inline ASN1C_CMSStream_ExtendedCertificateOrCertificate& operator= (ASN1C_CMSStream_ExtendedCertificateOrCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_CMSStream_ExtendedCertificateOrCertificate (ASN1CTXT* pctxt,
   ASN1T_CMSStream_ExtendedCertificateOrCertificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_CMSStream_ExtendedCertificateOrCertificate
   (const char* name, ASN1T_CMSStream_ExtendedCertificateOrCertificate* pvalue);

EXTERN int asn1PrtToStrm_CMSStream_ExtendedCertificateOrCertificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_CMSStream_ExtendedCertificateOrCertificate* pvalue);

EXTERN OSBOOL asn1Compare_CMSStream_ExtendedCertificateOrCertificate (ASN1ConstCharPtr name, ASN1T_CMSStream_ExtendedCertificateOrCertificate* pValue, ASN1T_CMSStream_ExtendedCertificateOrCertificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_CMSStream_ExtendedCertificateOrCertificate (ASN1CTXT *pctxt, ASN1T_CMSStream_ExtendedCertificateOrCertificate* pSrcValue, ASN1T_CMSStream_ExtendedCertificateOrCertificate* pDstValue);

EXTERN void asn1Free_CMSStream_ExtendedCertificateOrCertificate
   (ASN1CTXT *pctxt, ASN1T_CMSStream_ExtendedCertificateOrCertificate* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID CMSStream_id_ct_contentInfo;
extern EXTERN ASN1OBJID CMSStream_id_data;
extern EXTERN ASN1OBJID CMSStream_id_signedData;
extern EXTERN ASN1OBJID CMSStream_id_envelopedData;
extern EXTERN ASN1OBJID CMSStream_id_digestedData;
extern EXTERN ASN1OBJID CMSStream_id_encryptedData;
extern EXTERN ASN1OBJID CMSStream_id_ct_authData;
extern EXTERN ASN1OBJID CMSStream_id_contentType;
extern EXTERN ASN1OBJID CMSStream_id_messageDigest;
extern EXTERN ASN1OBJID CMSStream_id_signingTime;
extern EXTERN ASN1OBJID CMSStream_id_countersignature;

#include "ASN1CBitStr.h"

/**************************************************************/
/*                                                            */
/*  TSAPolicyId                                               */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_TSPStream_TSAPolicyId;

class EXTERN ASN1C_TSPStream_TSAPolicyId :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_TSAPolicyId& msgData;
public:
   ASN1C_TSPStream_TSAPolicyId (ASN1T_TSPStream_TSAPolicyId& data);
   ASN1C_TSPStream_TSAPolicyId (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_TSAPolicyId& data);
   ASN1C_TSPStream_TSAPolicyId (ASN1C_TSPStream_TSAPolicyId& original);

   inline ASN1T_TSPStream_TSAPolicyId& getData () { return msgData; }
   inline const ASN1T_TSPStream_TSAPolicyId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_TSAPolicyId* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_TSAPolicyId& getCopy (ASN1T_TSPStream_TSAPolicyId* pDstData = 0);
   ASN1T_TSPStream_TSAPolicyId* newCopy ();

   inline ASN1C_TSPStream_TSAPolicyId& operator= (ASN1C_TSPStream_TSAPolicyId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_TSAPolicyId (ASN1CTXT* pctxt,
   ASN1T_TSPStream_TSAPolicyId *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_TSAPolicyId
   (const char* name, ASN1T_TSPStream_TSAPolicyId* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_TSAPolicyId
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_TSAPolicyId* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_TSAPolicyId (ASN1ConstCharPtr name, ASN1T_TSPStream_TSAPolicyId* pValue, ASN1T_TSPStream_TSAPolicyId* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_TSAPolicyId (ASN1CTXT *pctxt, ASN1T_TSPStream_TSAPolicyId* pSrcValue, ASN1T_TSPStream_TSAPolicyId* pDstValue);

/**************************************************************/
/*                                                            */
/*  PKIStatus                                                 */
/*                                                            */
/**************************************************************/

struct EXTERN TSPStream_PKIStatus {
   enum Root {
      granted = 0,
      grantedWithMods = 1,
      rejection = 2,
      waiting = 3,
      revocationWarning = 4,
      revocationNotification = 5
   } ;
} ;

typedef OSUINT32 ASN1T_TSPStream_PKIStatus;

class EXTERN ASN1C_TSPStream_PKIStatus :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_PKIStatus& msgData;
public:
   ASN1C_TSPStream_PKIStatus (ASN1T_TSPStream_PKIStatus& data);
   ASN1C_TSPStream_PKIStatus (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_PKIStatus& data);
   ASN1C_TSPStream_PKIStatus (ASN1C_TSPStream_PKIStatus& original);

   inline ASN1T_TSPStream_PKIStatus& getData () { return msgData; }
   inline const ASN1T_TSPStream_PKIStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_PKIStatus* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_PKIStatus& getCopy (ASN1T_TSPStream_PKIStatus* pDstData = 0);
   ASN1T_TSPStream_PKIStatus* newCopy ();

   inline ASN1C_TSPStream_PKIStatus& operator= (ASN1C_TSPStream_PKIStatus& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_PKIStatus (ASN1CTXT* pctxt,
   ASN1T_TSPStream_PKIStatus *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_PKIStatus
   (const char* name, ASN1T_TSPStream_PKIStatus* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_PKIStatus
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_PKIStatus* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_PKIStatus (ASN1ConstCharPtr name, ASN1T_TSPStream_PKIStatus* pValue, ASN1T_TSPStream_PKIStatus* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_PKIStatus (ASN1CTXT *pctxt, ASN1T_TSPStream_PKIStatus* pSrcValue, ASN1T_TSPStream_PKIStatus* pDstValue);

/**************************************************************/
/*                                                            */
/*  PKIFailureInfo                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_PKIFailureInfo;

struct EXTERN ASN1T_TSPStream_PKIFailureInfo {
   OSUINT32  numbits;
   OSOCTET data[4];
   // ctors
   ASN1T_TSPStream_PKIFailureInfo () : numbits(0) {}
   ASN1T_TSPStream_PKIFailureInfo (OSUINT32 _numbits, const OSOCTET* _data) :
      numbits(_numbits) {
      memcpy (data, _data, sizeof(data));
   }
   ASN1T_TSPStream_PKIFailureInfo (ASN1C_TSPStream_PKIFailureInfo& srcData);
} ;

class EXTERN ASN1C_TSPStream_PKIFailureInfo :
   public ASN1CBitStr
{
protected:
   ASN1T_TSPStream_PKIFailureInfo& msgData;
public:
   // named bits
   enum { badAlg = 0, badRequest = 2, badDataFormat = 5, timeNotAvailable = 14, unacceptedPolicy = 15, unacceptedExtension = 16, addInfoNotAvailable = 17, systemFailure = 25 };

   ASN1C_TSPStream_PKIFailureInfo (ASN1T_TSPStream_PKIFailureInfo& data);
   ASN1C_TSPStream_PKIFailureInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_PKIFailureInfo& data);
   ASN1C_TSPStream_PKIFailureInfo (ASN1C_TSPStream_PKIFailureInfo& original);

   inline ASN1T_TSPStream_PKIFailureInfo& getData () { return msgData; }
   inline const ASN1T_TSPStream_PKIFailureInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_PKIFailureInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_PKIFailureInfo& getCopy (ASN1T_TSPStream_PKIFailureInfo* pDstData = 0);
   ASN1T_TSPStream_PKIFailureInfo* newCopy ();

   ASN1C_TSPStream_PKIFailureInfo& operator= (ASN1C_TSPStream_PKIFailureInfo& srcData);
} ;

EXTERN int asn1BSD_TSPStream_PKIFailureInfo (ASN1CTXT* pctxt,
   ASN1T_TSPStream_PKIFailureInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_PKIFailureInfo
   (const char* name, ASN1T_TSPStream_PKIFailureInfo* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_PKIFailureInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_PKIFailureInfo* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_PKIFailureInfo (ASN1ConstCharPtr name, ASN1T_TSPStream_PKIFailureInfo* pValue, ASN1T_TSPStream_PKIFailureInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_PKIFailureInfo (ASN1CTXT *pctxt, ASN1T_TSPStream_PKIFailureInfo* pSrcValue, ASN1T_TSPStream_PKIFailureInfo* pDstValue);

/**************************************************************/
/*                                                            */
/*  TimeStampToken                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_TimeStampToken;

typedef ASN1T_CMSStream_ContentInfo ASN1T_TSPStream_TimeStampToken;

class EXTERN ASN1C_TSPStream_TimeStampToken :
   public ASN1C_CMSStream_ContentInfo
{
protected:
public:
   ASN1C_TSPStream_TimeStampToken (ASN1T_TSPStream_TimeStampToken& data);
   ASN1C_TSPStream_TimeStampToken (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_TimeStampToken& data);
   ASN1C_TSPStream_TimeStampToken (ASN1C_TSPStream_TimeStampToken& original);

   inline ASN1T_TSPStream_TimeStampToken& getData () { return msgData; }
   inline const ASN1T_TSPStream_TimeStampToken& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_TimeStampToken* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_TimeStampToken& getCopy (ASN1T_TSPStream_TimeStampToken* pDstData = 0);
   ASN1T_TSPStream_TimeStampToken* newCopy ();

   inline ASN1C_TSPStream_TimeStampToken& operator= (ASN1C_TSPStream_TimeStampToken& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_TimeStampToken (ASN1CTXT* pctxt,
   ASN1T_TSPStream_TimeStampToken *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_TimeStampToken
   (const char* name, ASN1T_TSPStream_TimeStampToken* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_TimeStampToken
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_TimeStampToken* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_TimeStampToken (ASN1ConstCharPtr name, ASN1T_TSPStream_TimeStampToken* pValue, ASN1T_TSPStream_TimeStampToken* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_TimeStampToken (ASN1CTXT *pctxt, ASN1T_TSPStream_TimeStampToken* pSrcValue, ASN1T_TSPStream_TimeStampToken* pDstValue);

EXTERN void asn1Free_TSPStream_TimeStampToken
   (ASN1CTXT *pctxt, ASN1T_TSPStream_TimeStampToken* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeStampReq_version                                      */
/*                                                            */
/**************************************************************/

struct EXTERN TSPStream_TimeStampReq_version {
   enum Root {
      v1 = 1
   } ;
} ;

typedef OSUINT32 ASN1T_TSPStream_TimeStampReq_version;

class EXTERN ASN1C_TSPStream_TimeStampReq_version :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_TimeStampReq_version& msgData;
public:
   ASN1C_TSPStream_TimeStampReq_version (ASN1T_TSPStream_TimeStampReq_version& data);
   ASN1C_TSPStream_TimeStampReq_version (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_TimeStampReq_version& data);
   ASN1C_TSPStream_TimeStampReq_version (ASN1C_TSPStream_TimeStampReq_version& original);

   inline ASN1T_TSPStream_TimeStampReq_version& getData () { return msgData; }
   inline const ASN1T_TSPStream_TimeStampReq_version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_TimeStampReq_version* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_TimeStampReq_version& getCopy (ASN1T_TSPStream_TimeStampReq_version* pDstData = 0);
   ASN1T_TSPStream_TimeStampReq_version* newCopy ();

   inline ASN1C_TSPStream_TimeStampReq_version& operator= (ASN1C_TSPStream_TimeStampReq_version& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_TimeStampReq_version (ASN1CTXT* pctxt,
   ASN1T_TSPStream_TimeStampReq_version *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_TimeStampReq_version
   (const char* name, ASN1T_TSPStream_TimeStampReq_version* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_TimeStampReq_version
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_TimeStampReq_version* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_TimeStampReq_version (ASN1ConstCharPtr name, ASN1T_TSPStream_TimeStampReq_version* pValue, ASN1T_TSPStream_TimeStampReq_version* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_TimeStampReq_version (ASN1CTXT *pctxt, ASN1T_TSPStream_TimeStampReq_version* pSrcValue, ASN1T_TSPStream_TimeStampReq_version* pDstValue);

/**************************************************************/
/*                                                            */
/*  TSTInfo_version                                           */
/*                                                            */
/**************************************************************/

struct EXTERN TSPStream_TSTInfo_version {
   enum Root {
      v1 = 1
   } ;
} ;

typedef OSUINT32 ASN1T_TSPStream_TSTInfo_version;

class EXTERN ASN1C_TSPStream_TSTInfo_version :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_TSTInfo_version& msgData;
public:
   ASN1C_TSPStream_TSTInfo_version (ASN1T_TSPStream_TSTInfo_version& data);
   ASN1C_TSPStream_TSTInfo_version (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_TSTInfo_version& data);
   ASN1C_TSPStream_TSTInfo_version (ASN1C_TSPStream_TSTInfo_version& original);

   inline ASN1T_TSPStream_TSTInfo_version& getData () { return msgData; }
   inline const ASN1T_TSPStream_TSTInfo_version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_TSTInfo_version* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_TSTInfo_version& getCopy (ASN1T_TSPStream_TSTInfo_version* pDstData = 0);
   ASN1T_TSPStream_TSTInfo_version* newCopy ();

   inline ASN1C_TSPStream_TSTInfo_version& operator= (ASN1C_TSPStream_TSTInfo_version& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_TSTInfo_version (ASN1CTXT* pctxt,
   ASN1T_TSPStream_TSTInfo_version *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_TSTInfo_version
   (const char* name, ASN1T_TSPStream_TSTInfo_version* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_TSTInfo_version
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_TSTInfo_version* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_TSTInfo_version (ASN1ConstCharPtr name, ASN1T_TSPStream_TSTInfo_version* pValue, ASN1T_TSPStream_TSTInfo_version* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_TSTInfo_version (ASN1CTXT *pctxt, ASN1T_TSPStream_TSTInfo_version* pSrcValue, ASN1T_TSPStream_TSTInfo_version* pDstValue);

/**************************************************************/
/*                                                            */
/*  MessageImprint                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_MessageImprint;

struct EXTERN ASN1T_TSPStream_MessageImprint : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier hashAlgorithm;
   ASN1TDynOctStr hashedMessage;
   ASN1T_TSPStream_MessageImprint ();
   ASN1T_TSPStream_MessageImprint (ASN1C_TSPStream_MessageImprint& srcData);
   ~ASN1T_TSPStream_MessageImprint ();
} ;

class EXTERN ASN1C_TSPStream_MessageImprint :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_MessageImprint& msgData;
public:
   ASN1C_TSPStream_MessageImprint (ASN1T_TSPStream_MessageImprint& data);
   ASN1C_TSPStream_MessageImprint (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_MessageImprint& data);
   ASN1C_TSPStream_MessageImprint (ASN1C_TSPStream_MessageImprint& original);

   inline ASN1T_TSPStream_MessageImprint& getData () { return msgData; }
   inline const ASN1T_TSPStream_MessageImprint& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_MessageImprint* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_MessageImprint& getCopy (ASN1T_TSPStream_MessageImprint* pDstData = 0);
   ASN1T_TSPStream_MessageImprint* newCopy ();

   inline ASN1C_TSPStream_MessageImprint& operator= (ASN1C_TSPStream_MessageImprint& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_MessageImprint (ASN1CTXT* pctxt,
   ASN1T_TSPStream_MessageImprint *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_MessageImprint
   (const char* name, ASN1T_TSPStream_MessageImprint* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_MessageImprint
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_MessageImprint* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_MessageImprint (ASN1ConstCharPtr name, ASN1T_TSPStream_MessageImprint* pValue, ASN1T_TSPStream_MessageImprint* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_MessageImprint (ASN1CTXT *pctxt, ASN1T_TSPStream_MessageImprint* pSrcValue, ASN1T_TSPStream_MessageImprint* pDstValue);

EXTERN void asn1Free_TSPStream_MessageImprint
   (ASN1CTXT *pctxt, ASN1T_TSPStream_MessageImprint* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeStampReq                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_TimeStampReq;

struct EXTERN ASN1T_TSPStream_TimeStampReq : public ASN1TPDU {
   struct {
      unsigned reqPolicyPresent : 1;
      unsigned noncePresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_TSPStream_TimeStampReq_version version;
   ASN1T_TSPStream_MessageImprint messageImprint;
   ASN1T_TSPStream_TSAPolicyId reqPolicy;
   OSINT32 nonce;
   OSBOOL certReq;
   ASN1T_EXPStream_Extensions extensions;
   ASN1T_TSPStream_TimeStampReq ();
   ASN1T_TSPStream_TimeStampReq (ASN1C_TSPStream_TimeStampReq& srcData);
   ~ASN1T_TSPStream_TimeStampReq ();
} ;

class EXTERN ASN1C_TSPStream_TimeStampReq :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_TimeStampReq& msgData;
public:
   ASN1C_TSPStream_TimeStampReq (ASN1T_TSPStream_TimeStampReq& data);
   ASN1C_TSPStream_TimeStampReq (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_TimeStampReq& data);
   ASN1C_TSPStream_TimeStampReq (ASN1C_TSPStream_TimeStampReq& original);

   inline ASN1T_TSPStream_TimeStampReq& getData () { return msgData; }
   inline const ASN1T_TSPStream_TimeStampReq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_TimeStampReq* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_TimeStampReq& getCopy (ASN1T_TSPStream_TimeStampReq* pDstData = 0);
   ASN1T_TSPStream_TimeStampReq* newCopy ();

   inline ASN1C_TSPStream_TimeStampReq& operator= (ASN1C_TSPStream_TimeStampReq& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_TimeStampReq (ASN1CTXT* pctxt,
   ASN1T_TSPStream_TimeStampReq *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_TimeStampReq
   (const char* name, ASN1T_TSPStream_TimeStampReq* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_TimeStampReq
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_TimeStampReq* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_TimeStampReq (ASN1ConstCharPtr name, ASN1T_TSPStream_TimeStampReq* pValue, ASN1T_TSPStream_TimeStampReq* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_TimeStampReq (ASN1CTXT *pctxt, ASN1T_TSPStream_TimeStampReq* pSrcValue, ASN1T_TSPStream_TimeStampReq* pDstValue);

EXTERN void asn1Free_TSPStream_TimeStampReq
   (ASN1CTXT *pctxt, ASN1T_TSPStream_TimeStampReq* pvalue);

/**************************************************************/
/*                                                            */
/*  PKIStatusInfo                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_PKIStatusInfo;

struct EXTERN ASN1T_TSPStream_PKIStatusInfo : public ASN1TPDU {
   struct {
      unsigned statusStringPresent : 1;
      unsigned failInfoPresent : 1;
   } m;
   ASN1T_TSPStream_PKIStatus status;
   ASN1T_CMPStream_PKIFreeText statusString;
   ASN1T_TSPStream_PKIFailureInfo failInfo;
   ASN1T_TSPStream_PKIStatusInfo ();
   ASN1T_TSPStream_PKIStatusInfo (ASN1C_TSPStream_PKIStatusInfo& srcData);
   ~ASN1T_TSPStream_PKIStatusInfo ();
} ;

class EXTERN ASN1C_TSPStream_PKIStatusInfo :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_PKIStatusInfo& msgData;
public:
   ASN1C_TSPStream_PKIStatusInfo (ASN1T_TSPStream_PKIStatusInfo& data);
   ASN1C_TSPStream_PKIStatusInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_PKIStatusInfo& data);
   ASN1C_TSPStream_PKIStatusInfo (ASN1C_TSPStream_PKIStatusInfo& original);

   inline ASN1T_TSPStream_PKIStatusInfo& getData () { return msgData; }
   inline const ASN1T_TSPStream_PKIStatusInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_PKIStatusInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_PKIStatusInfo& getCopy (ASN1T_TSPStream_PKIStatusInfo* pDstData = 0);
   ASN1T_TSPStream_PKIStatusInfo* newCopy ();

   inline ASN1C_TSPStream_PKIStatusInfo& operator= (ASN1C_TSPStream_PKIStatusInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_PKIStatusInfo (ASN1CTXT* pctxt,
   ASN1T_TSPStream_PKIStatusInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_PKIStatusInfo
   (const char* name, ASN1T_TSPStream_PKIStatusInfo* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_PKIStatusInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_PKIStatusInfo* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_PKIStatusInfo (ASN1ConstCharPtr name, ASN1T_TSPStream_PKIStatusInfo* pValue, ASN1T_TSPStream_PKIStatusInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_PKIStatusInfo (ASN1CTXT *pctxt, ASN1T_TSPStream_PKIStatusInfo* pSrcValue, ASN1T_TSPStream_PKIStatusInfo* pDstValue);

EXTERN void asn1Free_TSPStream_PKIStatusInfo
   (ASN1CTXT *pctxt, ASN1T_TSPStream_PKIStatusInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeStampResp                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_TimeStampResp;

struct EXTERN ASN1T_TSPStream_TimeStampResp : public ASN1TPDU {
   struct {
      unsigned timeStampTokenPresent : 1;
   } m;
   ASN1T_TSPStream_PKIStatusInfo status;
   ASN1T_TSPStream_TimeStampToken timeStampToken;
   ASN1T_TSPStream_TimeStampResp ();
   ASN1T_TSPStream_TimeStampResp (ASN1C_TSPStream_TimeStampResp& srcData);
   ~ASN1T_TSPStream_TimeStampResp ();
} ;

class EXTERN ASN1C_TSPStream_TimeStampResp :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_TimeStampResp& msgData;
public:
   ASN1C_TSPStream_TimeStampResp (ASN1T_TSPStream_TimeStampResp& data);
   ASN1C_TSPStream_TimeStampResp (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_TimeStampResp& data);
   ASN1C_TSPStream_TimeStampResp (ASN1C_TSPStream_TimeStampResp& original);

   inline ASN1T_TSPStream_TimeStampResp& getData () { return msgData; }
   inline const ASN1T_TSPStream_TimeStampResp& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_TimeStampResp* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_TimeStampResp& getCopy (ASN1T_TSPStream_TimeStampResp* pDstData = 0);
   ASN1T_TSPStream_TimeStampResp* newCopy ();

   inline ASN1C_TSPStream_TimeStampResp& operator= (ASN1C_TSPStream_TimeStampResp& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_TimeStampResp (ASN1CTXT* pctxt,
   ASN1T_TSPStream_TimeStampResp *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_TimeStampResp
   (const char* name, ASN1T_TSPStream_TimeStampResp* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_TimeStampResp
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_TimeStampResp* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_TimeStampResp (ASN1ConstCharPtr name, ASN1T_TSPStream_TimeStampResp* pValue, ASN1T_TSPStream_TimeStampResp* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_TimeStampResp (ASN1CTXT *pctxt, ASN1T_TSPStream_TimeStampResp* pSrcValue, ASN1T_TSPStream_TimeStampResp* pDstValue);

EXTERN void asn1Free_TSPStream_TimeStampResp
   (ASN1CTXT *pctxt, ASN1T_TSPStream_TimeStampResp* pvalue);

/**************************************************************/
/*                                                            */
/*  Accuracy                                                  */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_Accuracy;

struct EXTERN ASN1T_TSPStream_Accuracy : public ASN1TPDU {
   struct {
      unsigned secondsPresent : 1;
      unsigned millisPresent : 1;
      unsigned microsPresent : 1;
   } m;
   OSINT32 seconds;
   OSUINT16 millis;
   OSUINT16 micros;
   ASN1T_TSPStream_Accuracy ();
   ASN1T_TSPStream_Accuracy (ASN1C_TSPStream_Accuracy& srcData);
} ;

class EXTERN ASN1C_TSPStream_Accuracy :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_Accuracy& msgData;
public:
   ASN1C_TSPStream_Accuracy (ASN1T_TSPStream_Accuracy& data);
   ASN1C_TSPStream_Accuracy (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_Accuracy& data);
   ASN1C_TSPStream_Accuracy (ASN1C_TSPStream_Accuracy& original);

   inline ASN1T_TSPStream_Accuracy& getData () { return msgData; }
   inline const ASN1T_TSPStream_Accuracy& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_Accuracy* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_Accuracy& getCopy (ASN1T_TSPStream_Accuracy* pDstData = 0);
   ASN1T_TSPStream_Accuracy* newCopy ();

   inline ASN1C_TSPStream_Accuracy& operator= (ASN1C_TSPStream_Accuracy& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_Accuracy (ASN1CTXT* pctxt,
   ASN1T_TSPStream_Accuracy *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_Accuracy
   (const char* name, ASN1T_TSPStream_Accuracy* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_Accuracy
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_Accuracy* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_Accuracy (ASN1ConstCharPtr name, ASN1T_TSPStream_Accuracy* pValue, ASN1T_TSPStream_Accuracy* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_Accuracy (ASN1CTXT *pctxt, ASN1T_TSPStream_Accuracy* pSrcValue, ASN1T_TSPStream_Accuracy* pDstValue);

/**************************************************************/
/*                                                            */
/*  TSTInfo                                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_TSTInfo;

struct EXTERN ASN1T_TSPStream_TSTInfo : public ASN1TPDU {
   struct {
      unsigned accuracyPresent : 1;
      unsigned noncePresent : 1;
      unsigned tsaPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_TSPStream_TSTInfo_version version;
   ASN1T_TSPStream_TSAPolicyId policy;
   ASN1T_TSPStream_MessageImprint messageImprint;
   OSINT32 serialNumber;
   ASN1GeneralizedTime genTime;
   ASN1T_TSPStream_Accuracy accuracy;
   OSBOOL ordering;
   OSINT32 nonce;
   ASN1T_IMPStream_GeneralName tsa;
   ASN1T_EXPStream_Extensions extensions;
   ASN1T_TSPStream_TSTInfo ();
   ASN1T_TSPStream_TSTInfo (ASN1C_TSPStream_TSTInfo& srcData);
   ~ASN1T_TSPStream_TSTInfo ();
} ;

class EXTERN ASN1C_TSPStream_TSTInfo :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_TSTInfo& msgData;
public:
   ASN1C_TSPStream_TSTInfo (ASN1T_TSPStream_TSTInfo& data);
   ASN1C_TSPStream_TSTInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_TSTInfo& data);
   ASN1C_TSPStream_TSTInfo (ASN1C_TSPStream_TSTInfo& original);

   inline ASN1T_TSPStream_TSTInfo& getData () { return msgData; }
   inline const ASN1T_TSPStream_TSTInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_TSTInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_TSTInfo& getCopy (ASN1T_TSPStream_TSTInfo* pDstData = 0);
   ASN1T_TSPStream_TSTInfo* newCopy ();

   inline ASN1C_TSPStream_TSTInfo& operator= (ASN1C_TSPStream_TSTInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_TSTInfo (ASN1CTXT* pctxt,
   ASN1T_TSPStream_TSTInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_TSTInfo
   (const char* name, ASN1T_TSPStream_TSTInfo* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_TSTInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_TSTInfo* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_TSTInfo (ASN1ConstCharPtr name, ASN1T_TSPStream_TSTInfo* pValue, ASN1T_TSPStream_TSTInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_TSTInfo (ASN1CTXT *pctxt, ASN1T_TSPStream_TSTInfo* pSrcValue, ASN1T_TSPStream_TSTInfo* pDstValue);

EXTERN void asn1Free_TSPStream_TSTInfo
   (ASN1CTXT *pctxt, ASN1T_TSPStream_TSTInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  ESYAReqEx                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_TSPStream_ESYAReqEx;

struct EXTERN ASN1T_TSPStream_ESYAReqEx : public ASN1TPDU {
   OSINT32 userid;
   ASN1TDynOctStr salt;
   OSINT32 iterationCount;
   ASN1TDynOctStr encryptedMessageImprint;
   ASN1T_TSPStream_ESYAReqEx ();
   ASN1T_TSPStream_ESYAReqEx (ASN1C_TSPStream_ESYAReqEx& srcData);
   ~ASN1T_TSPStream_ESYAReqEx ();
} ;

class EXTERN ASN1C_TSPStream_ESYAReqEx :
   public ASN1CType
{
protected:
   ASN1T_TSPStream_ESYAReqEx& msgData;
public:
   ASN1C_TSPStream_ESYAReqEx (ASN1T_TSPStream_ESYAReqEx& data);
   ASN1C_TSPStream_ESYAReqEx (
      ASN1MessageBufferIF& msgBuf, ASN1T_TSPStream_ESYAReqEx& data);
   ASN1C_TSPStream_ESYAReqEx (ASN1C_TSPStream_ESYAReqEx& original);

   inline ASN1T_TSPStream_ESYAReqEx& getData () { return msgData; }
   inline const ASN1T_TSPStream_ESYAReqEx& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_TSPStream_ESYAReqEx* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_TSPStream_ESYAReqEx& getCopy (ASN1T_TSPStream_ESYAReqEx* pDstData = 0);
   ASN1T_TSPStream_ESYAReqEx* newCopy ();

   inline ASN1C_TSPStream_ESYAReqEx& operator= (ASN1C_TSPStream_ESYAReqEx& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_TSPStream_ESYAReqEx (ASN1CTXT* pctxt,
   ASN1T_TSPStream_ESYAReqEx *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_TSPStream_ESYAReqEx
   (const char* name, ASN1T_TSPStream_ESYAReqEx* pvalue);

EXTERN int asn1PrtToStrm_TSPStream_ESYAReqEx
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_TSPStream_ESYAReqEx* pvalue);

EXTERN OSBOOL asn1Compare_TSPStream_ESYAReqEx (ASN1ConstCharPtr name, ASN1T_TSPStream_ESYAReqEx* pValue, ASN1T_TSPStream_ESYAReqEx* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_TSPStream_ESYAReqEx (ASN1CTXT *pctxt, ASN1T_TSPStream_ESYAReqEx* pSrcValue, ASN1T_TSPStream_ESYAReqEx* pDstValue);

EXTERN void asn1Free_TSPStream_ESYAReqEx
   (ASN1CTXT *pctxt, ASN1T_TSPStream_ESYAReqEx* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID TSPStream_id_ct_TSTInfo;
extern EXTERN ASN1OBJID TSPStream_id_esya_ts_reqex;
extern EXTERN ASN1OBJID TSPStream_id_ts_policy;

#include "ASN1CSeqOfList.h"

/**************************************************************/
/*                                                            */
/*  OtherHashValue                                            */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_ETSI101733Stream_OtherHashValue;

class EXTERN ASN1C_ETSI101733Stream_OtherHashValue :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OtherHashValue& msgData;
public:
   ASN1C_ETSI101733Stream_OtherHashValue (ASN1T_ETSI101733Stream_OtherHashValue& data);
   ASN1C_ETSI101733Stream_OtherHashValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherHashValue& data);
   ASN1C_ETSI101733Stream_OtherHashValue (ASN1C_ETSI101733Stream_OtherHashValue& original);

   inline ASN1T_ETSI101733Stream_OtherHashValue& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherHashValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherHashValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherHashValue& getCopy (ASN1T_ETSI101733Stream_OtherHashValue* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherHashValue* newCopy ();

   inline ASN1C_ETSI101733Stream_OtherHashValue& operator= (ASN1C_ETSI101733Stream_OtherHashValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherHashValue (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherHashValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherHashValue
   (const char* name, ASN1T_ETSI101733Stream_OtherHashValue* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherHashValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherHashValue* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherHashValue (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherHashValue* pValue, ASN1T_ETSI101733Stream_OtherHashValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherHashValue (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherHashValue* pSrcValue, ASN1T_ETSI101733Stream_OtherHashValue* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherHashValue
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherHashValue* pvalue);

/**************************************************************/
/*                                                            */
/*  SignaturePolicyImplied                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_SignaturePolicyImplied :
   public ASN1CType
{
protected:
public:
   ASN1C_ETSI101733Stream_SignaturePolicyImplied ();
   ASN1C_ETSI101733Stream_SignaturePolicyImplied (
      ASN1MessageBufferIF& msgBuf);
   ASN1C_ETSI101733Stream_SignaturePolicyImplied (ASN1C_ETSI101733Stream_SignaturePolicyImplied& original);

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals ();

   inline ASN1C_ETSI101733Stream_SignaturePolicyImplied& operator= (ASN1C_ETSI101733Stream_SignaturePolicyImplied& srcData) {
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SignaturePolicyImplied (ASN1CTXT* pctxt,
   ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SignaturePolicyImplied_
   (const char* name, void* pvalue);
#define asn1Print_ETSI101733Stream_SignaturePolicyImplied(name) \
asn1Print_ETSI101733Stream_SignaturePolicyImplied_(name, NULL)

EXTERN int asn1PrtToStrm_ETSI101733Stream_SignaturePolicyImplied_
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, void* pvalue);
#define asn1PrtToStrm_ETSI101733Stream_SignaturePolicyImplied(pctxt, name) \
asn1PrtToStrm_ETSI101733Stream_SignaturePolicyImplied_(pctxt, name, NULL)

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SignaturePolicyImplied (ASN1ConstCharPtr name);

EXTERN void asn1Copy_ETSI101733Stream_SignaturePolicyImplied_ (ASN1CTXT *pctxt, void* pSrcValue, void* pDstValue);
#define asn1Copy_ETSI101733Stream_SignaturePolicyImplied(name) \
asn1Copy_ETSI101733Stream_SignaturePolicyImplied_(name, NULL, NULL)

/**************************************************************/
/*                                                            */
/*  SigPolicyId                                               */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_ETSI101733Stream_SigPolicyId;

class EXTERN ASN1C_ETSI101733Stream_SigPolicyId :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_SigPolicyId& msgData;
public:
   ASN1C_ETSI101733Stream_SigPolicyId (ASN1T_ETSI101733Stream_SigPolicyId& data);
   ASN1C_ETSI101733Stream_SigPolicyId (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SigPolicyId& data);
   ASN1C_ETSI101733Stream_SigPolicyId (ASN1C_ETSI101733Stream_SigPolicyId& original);

   inline ASN1T_ETSI101733Stream_SigPolicyId& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SigPolicyId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SigPolicyId* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SigPolicyId& getCopy (ASN1T_ETSI101733Stream_SigPolicyId* pDstData = 0);
   ASN1T_ETSI101733Stream_SigPolicyId* newCopy ();

   inline ASN1C_ETSI101733Stream_SigPolicyId& operator= (ASN1C_ETSI101733Stream_SigPolicyId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SigPolicyId (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SigPolicyId *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SigPolicyId
   (const char* name, ASN1T_ETSI101733Stream_SigPolicyId* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SigPolicyId
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SigPolicyId* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SigPolicyId (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SigPolicyId* pValue, ASN1T_ETSI101733Stream_SigPolicyId* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SigPolicyId (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SigPolicyId* pSrcValue, ASN1T_ETSI101733Stream_SigPolicyId* pDstValue);

/**************************************************************/
/*                                                            */
/*  OtherHashAlgAndValue                                      */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_OtherHashAlgAndValue;

struct EXTERN ASN1T_ETSI101733Stream_OtherHashAlgAndValue : public ASN1TPDU {
   ASN1T_EXPStream_AlgorithmIdentifier hashAlgorithm;
   ASN1T_ETSI101733Stream_OtherHashValue hashValue;
   ASN1T_ETSI101733Stream_OtherHashAlgAndValue ();
   ASN1T_ETSI101733Stream_OtherHashAlgAndValue (ASN1C_ETSI101733Stream_OtherHashAlgAndValue& srcData);
   ~ASN1T_ETSI101733Stream_OtherHashAlgAndValue ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OtherHashAlgAndValue :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OtherHashAlgAndValue& msgData;
public:
   ASN1C_ETSI101733Stream_OtherHashAlgAndValue (ASN1T_ETSI101733Stream_OtherHashAlgAndValue& data);
   ASN1C_ETSI101733Stream_OtherHashAlgAndValue (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherHashAlgAndValue& data);
   ASN1C_ETSI101733Stream_OtherHashAlgAndValue (ASN1C_ETSI101733Stream_OtherHashAlgAndValue& original);

   inline ASN1T_ETSI101733Stream_OtherHashAlgAndValue& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherHashAlgAndValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherHashAlgAndValue& getCopy (ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherHashAlgAndValue* newCopy ();

   inline ASN1C_ETSI101733Stream_OtherHashAlgAndValue& operator= (ASN1C_ETSI101733Stream_OtherHashAlgAndValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherHashAlgAndValue (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherHashAlgAndValue *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherHashAlgAndValue
   (const char* name, ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherHashAlgAndValue
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherHashAlgAndValue (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pValue, ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherHashAlgAndValue (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pSrcValue, ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherHashAlgAndValue
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherHashAlgAndValue* pvalue);

/**************************************************************/
/*                                                            */
/*  SigPolicyHash                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_SigPolicyHash;

typedef ASN1T_ETSI101733Stream_OtherHashAlgAndValue ASN1T_ETSI101733Stream_SigPolicyHash;

class EXTERN ASN1C_ETSI101733Stream_SigPolicyHash :
   public ASN1C_ETSI101733Stream_OtherHashAlgAndValue
{
protected:
public:
   ASN1C_ETSI101733Stream_SigPolicyHash (ASN1T_ETSI101733Stream_SigPolicyHash& data);
   ASN1C_ETSI101733Stream_SigPolicyHash (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SigPolicyHash& data);
   ASN1C_ETSI101733Stream_SigPolicyHash (ASN1C_ETSI101733Stream_SigPolicyHash& original);

   inline ASN1T_ETSI101733Stream_SigPolicyHash& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SigPolicyHash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SigPolicyHash* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SigPolicyHash& getCopy (ASN1T_ETSI101733Stream_SigPolicyHash* pDstData = 0);
   ASN1T_ETSI101733Stream_SigPolicyHash* newCopy ();

   inline ASN1C_ETSI101733Stream_SigPolicyHash& operator= (ASN1C_ETSI101733Stream_SigPolicyHash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SigPolicyHash (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SigPolicyHash *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SigPolicyHash
   (const char* name, ASN1T_ETSI101733Stream_SigPolicyHash* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SigPolicyHash
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SigPolicyHash* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SigPolicyHash (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SigPolicyHash* pValue, ASN1T_ETSI101733Stream_SigPolicyHash* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SigPolicyHash (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SigPolicyHash* pSrcValue, ASN1T_ETSI101733Stream_SigPolicyHash* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SigPolicyHash
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SigPolicyHash* pvalue);

/**************************************************************/
/*                                                            */
/*  SPuri                                                     */
/*                                                            */
/**************************************************************/

typedef ASN1IA5String ASN1T_ETSI101733Stream_SPuri;

class EXTERN ASN1C_ETSI101733Stream_SPuri :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_SPuri& msgData;
public:
   ASN1C_ETSI101733Stream_SPuri (ASN1T_ETSI101733Stream_SPuri& data);
   ASN1C_ETSI101733Stream_SPuri (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SPuri& data);
   ASN1C_ETSI101733Stream_SPuri (ASN1C_ETSI101733Stream_SPuri& original);

   inline ASN1T_ETSI101733Stream_SPuri& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SPuri& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SPuri* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SPuri& getCopy (ASN1T_ETSI101733Stream_SPuri* pDstData = 0);
   ASN1T_ETSI101733Stream_SPuri* newCopy ();

   inline ASN1C_ETSI101733Stream_SPuri& operator= (ASN1C_ETSI101733Stream_SPuri& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SPuri (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SPuri *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SPuri
   (const char* name, ASN1T_ETSI101733Stream_SPuri* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SPuri
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SPuri* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SPuri (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SPuri* pValue, ASN1T_ETSI101733Stream_SPuri* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SPuri (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SPuri* pSrcValue, ASN1T_ETSI101733Stream_SPuri* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SPuri
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SPuri* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentIdentifier                                         */
/*                                                            */
/**************************************************************/

typedef ASN1TDynOctStr ASN1T_ETSI101733Stream_ContentIdentifier;

class EXTERN ASN1C_ETSI101733Stream_ContentIdentifier :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_ContentIdentifier& msgData;
public:
   ASN1C_ETSI101733Stream_ContentIdentifier (ASN1T_ETSI101733Stream_ContentIdentifier& data);
   ASN1C_ETSI101733Stream_ContentIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_ContentIdentifier& data);
   ASN1C_ETSI101733Stream_ContentIdentifier (ASN1C_ETSI101733Stream_ContentIdentifier& original);

   inline ASN1T_ETSI101733Stream_ContentIdentifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_ContentIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_ContentIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_ContentIdentifier& getCopy (ASN1T_ETSI101733Stream_ContentIdentifier* pDstData = 0);
   ASN1T_ETSI101733Stream_ContentIdentifier* newCopy ();

   inline ASN1C_ETSI101733Stream_ContentIdentifier& operator= (ASN1C_ETSI101733Stream_ContentIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_ContentIdentifier (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_ContentIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_ContentIdentifier
   (const char* name, ASN1T_ETSI101733Stream_ContentIdentifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_ContentIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_ContentIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_ContentIdentifier (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_ContentIdentifier* pValue, ASN1T_ETSI101733Stream_ContentIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_ContentIdentifier (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_ContentIdentifier* pSrcValue, ASN1T_ETSI101733Stream_ContentIdentifier* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_ContentIdentifier
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_ContentIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CommitmentTypeIdentifier                                  */
/*                                                            */
/**************************************************************/

typedef ASN1TObjId ASN1T_ETSI101733Stream_CommitmentTypeIdentifier;

class EXTERN ASN1C_ETSI101733Stream_CommitmentTypeIdentifier :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_CommitmentTypeIdentifier& msgData;
public:
   ASN1C_ETSI101733Stream_CommitmentTypeIdentifier (ASN1T_ETSI101733Stream_CommitmentTypeIdentifier& data);
   ASN1C_ETSI101733Stream_CommitmentTypeIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CommitmentTypeIdentifier& data);
   ASN1C_ETSI101733Stream_CommitmentTypeIdentifier (ASN1C_ETSI101733Stream_CommitmentTypeIdentifier& original);

   inline ASN1T_ETSI101733Stream_CommitmentTypeIdentifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CommitmentTypeIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CommitmentTypeIdentifier& getCopy (ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* pDstData = 0);
   ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* newCopy ();

   inline ASN1C_ETSI101733Stream_CommitmentTypeIdentifier& operator= (ASN1C_ETSI101733Stream_CommitmentTypeIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_CommitmentTypeIdentifier (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CommitmentTypeIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CommitmentTypeIdentifier
   (const char* name, ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CommitmentTypeIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CommitmentTypeIdentifier (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* pValue, ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CommitmentTypeIdentifier (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* pSrcValue, ASN1T_ETSI101733Stream_CommitmentTypeIdentifier* pDstValue);

/**************************************************************/
/*                                                            */
/*  CertifiedAttributes                                       */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_CertifiedAttributes;

typedef ASN1T_ATTRCERTStream_AttributeCertificate ASN1T_ETSI101733Stream_CertifiedAttributes;

class EXTERN ASN1C_ETSI101733Stream_CertifiedAttributes :
   public ASN1C_ATTRCERTStream_AttributeCertificate
{
protected:
public:
   ASN1C_ETSI101733Stream_CertifiedAttributes (ASN1T_ETSI101733Stream_CertifiedAttributes& data);
   ASN1C_ETSI101733Stream_CertifiedAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CertifiedAttributes& data);
   ASN1C_ETSI101733Stream_CertifiedAttributes (ASN1C_ETSI101733Stream_CertifiedAttributes& original);

   inline ASN1T_ETSI101733Stream_CertifiedAttributes& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CertifiedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CertifiedAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CertifiedAttributes& getCopy (ASN1T_ETSI101733Stream_CertifiedAttributes* pDstData = 0);
   ASN1T_ETSI101733Stream_CertifiedAttributes* newCopy ();

   inline ASN1C_ETSI101733Stream_CertifiedAttributes& operator= (ASN1C_ETSI101733Stream_CertifiedAttributes& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_CertifiedAttributes (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CertifiedAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CertifiedAttributes
   (const char* name, ASN1T_ETSI101733Stream_CertifiedAttributes* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CertifiedAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CertifiedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CertifiedAttributes (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CertifiedAttributes* pValue, ASN1T_ETSI101733Stream_CertifiedAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CertifiedAttributes (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CertifiedAttributes* pSrcValue, ASN1T_ETSI101733Stream_CertifiedAttributes* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CertifiedAttributes
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CertifiedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherHash                                                 */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ETSI101733Stream_OtherHash_sha1Hash 1
#define T_ETSI101733Stream_OtherHash_otherHash 2

class EXTERN ASN1C_ETSI101733Stream_OtherHash;

struct EXTERN ASN1T_ETSI101733Stream_OtherHash : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_ETSI101733Stream_OtherHashValue *sha1Hash;
      /* t = 2 */
      ASN1T_ETSI101733Stream_OtherHashAlgAndValue *otherHash;
   } u;
   ASN1T_ETSI101733Stream_OtherHash () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ETSI101733Stream_OtherHash (ASN1C_ETSI101733Stream_OtherHash& srcData);
   ~ASN1T_ETSI101733Stream_OtherHash ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OtherHash :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OtherHash& msgData;
public:
   ASN1C_ETSI101733Stream_OtherHash (ASN1T_ETSI101733Stream_OtherHash& data);
   ASN1C_ETSI101733Stream_OtherHash (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherHash& data);
   ASN1C_ETSI101733Stream_OtherHash (ASN1C_ETSI101733Stream_OtherHash& original);

   inline ASN1T_ETSI101733Stream_OtherHash& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherHash& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherHash* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherHash& getCopy (ASN1T_ETSI101733Stream_OtherHash* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherHash* newCopy ();

   inline ASN1C_ETSI101733Stream_OtherHash& operator= (ASN1C_ETSI101733Stream_OtherHash& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherHash (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherHash *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherHash
   (const char* name, ASN1T_ETSI101733Stream_OtherHash* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherHash
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherHash* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherHash (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherHash* pValue, ASN1T_ETSI101733Stream_OtherHash* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherHash (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherHash* pSrcValue, ASN1T_ETSI101733Stream_OtherHash* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherHash
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherHash* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherCertID                                               */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_OtherCertID;

struct EXTERN ASN1T_ETSI101733Stream_OtherCertID : public ASN1TPDU {
   struct {
      unsigned issuerSerialPresent : 1;
   } m;
   ASN1T_ETSI101733Stream_OtherHash otherCertHash;
   ASN1T_ATTRCERTStream_IssuerSerial issuerSerial;
   ASN1T_ETSI101733Stream_OtherCertID ();
   ASN1T_ETSI101733Stream_OtherCertID (ASN1C_ETSI101733Stream_OtherCertID& srcData);
   ~ASN1T_ETSI101733Stream_OtherCertID ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OtherCertID :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OtherCertID& msgData;
public:
   ASN1C_ETSI101733Stream_OtherCertID (ASN1T_ETSI101733Stream_OtherCertID& data);
   ASN1C_ETSI101733Stream_OtherCertID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherCertID& data);
   ASN1C_ETSI101733Stream_OtherCertID (ASN1C_ETSI101733Stream_OtherCertID& original);

   inline ASN1T_ETSI101733Stream_OtherCertID& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherCertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherCertID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherCertID& getCopy (ASN1T_ETSI101733Stream_OtherCertID* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherCertID* newCopy ();

   inline ASN1C_ETSI101733Stream_OtherCertID& operator= (ASN1C_ETSI101733Stream_OtherCertID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherCertID (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherCertID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherCertID
   (const char* name, ASN1T_ETSI101733Stream_OtherCertID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherCertID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherCertID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherCertID (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherCertID* pValue, ASN1T_ETSI101733Stream_OtherCertID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherCertID (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherCertID* pSrcValue, ASN1T_ETSI101733Stream_OtherCertID* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherCertID
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherCertID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733Stream_OtherCertID                        */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_OtherCertID */
typedef struct EXTERN ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID();
} ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID;

class EXTERN ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& msgData;
public:
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& original);

   inline ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& getCopy (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pDstData = 0);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* newCopy ();

   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& operator= (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID& srcData);
   void Append (ASN1T_ETSI101733Stream_OtherCertID *elem);
   ASN1T_ETSI101733Stream_OtherCertID *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID
   (const char* name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pSrcValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pDstValue);

EXTERN void asn1Free_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherSigningCertificate                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_OtherSigningCertificate;

struct EXTERN ASN1T_ETSI101733Stream_OtherSigningCertificate : public ASN1TPDU {
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OtherCertID certs;
   ASN1T_ETSI101733Stream_OtherSigningCertificate ();
   ASN1T_ETSI101733Stream_OtherSigningCertificate (ASN1C_ETSI101733Stream_OtherSigningCertificate& srcData);
   ~ASN1T_ETSI101733Stream_OtherSigningCertificate ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OtherSigningCertificate :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OtherSigningCertificate& msgData;
public:
   ASN1C_ETSI101733Stream_OtherSigningCertificate (ASN1T_ETSI101733Stream_OtherSigningCertificate& data);
   ASN1C_ETSI101733Stream_OtherSigningCertificate (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherSigningCertificate& data);
   ASN1C_ETSI101733Stream_OtherSigningCertificate (ASN1C_ETSI101733Stream_OtherSigningCertificate& original);

   inline ASN1T_ETSI101733Stream_OtherSigningCertificate& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherSigningCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherSigningCertificate* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherSigningCertificate& getCopy (ASN1T_ETSI101733Stream_OtherSigningCertificate* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherSigningCertificate* newCopy ();

   inline ASN1C_ETSI101733Stream_OtherSigningCertificate& operator= (ASN1C_ETSI101733Stream_OtherSigningCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherSigningCertificate (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherSigningCertificate *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherSigningCertificate
   (const char* name, ASN1T_ETSI101733Stream_OtherSigningCertificate* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherSigningCertificate
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherSigningCertificate* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherSigningCertificate (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherSigningCertificate* pValue, ASN1T_ETSI101733Stream_OtherSigningCertificate* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherSigningCertificate (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherSigningCertificate* pSrcValue, ASN1T_ETSI101733Stream_OtherSigningCertificate* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherSigningCertificate
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherSigningCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  SigPolicyQualifierInfo                                    */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_SigPolicyQualifierInfo;

struct EXTERN ASN1T_ETSI101733Stream_SigPolicyQualifierInfo : public ASN1TPDU {
   struct {
      unsigned qualifierPresent : 1;
   } m;
   ASN1TObjId sigPolicyQualifierId;
   ASN1TOpenType qualifier;
   ASN1T_ETSI101733Stream_SigPolicyQualifierInfo ();
   ASN1T_ETSI101733Stream_SigPolicyQualifierInfo (ASN1C_ETSI101733Stream_SigPolicyQualifierInfo& srcData);
   ~ASN1T_ETSI101733Stream_SigPolicyQualifierInfo ();
} ;

class EXTERN ASN1C_ETSI101733Stream_SigPolicyQualifierInfo :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_SigPolicyQualifierInfo& msgData;
public:
   ASN1C_ETSI101733Stream_SigPolicyQualifierInfo (ASN1T_ETSI101733Stream_SigPolicyQualifierInfo& data);
   ASN1C_ETSI101733Stream_SigPolicyQualifierInfo (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SigPolicyQualifierInfo& data);
   ASN1C_ETSI101733Stream_SigPolicyQualifierInfo (ASN1C_ETSI101733Stream_SigPolicyQualifierInfo& original);

   inline ASN1T_ETSI101733Stream_SigPolicyQualifierInfo& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SigPolicyQualifierInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SigPolicyQualifierInfo& getCopy (ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pDstData = 0);
   ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* newCopy ();

   inline ASN1C_ETSI101733Stream_SigPolicyQualifierInfo& operator= (ASN1C_ETSI101733Stream_SigPolicyQualifierInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SigPolicyQualifierInfo (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SigPolicyQualifierInfo *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SigPolicyQualifierInfo
   (const char* name, ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SigPolicyQualifierInfo
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SigPolicyQualifierInfo (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pValue, ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SigPolicyQualifierInfo (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pSrcValue, ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SigPolicyQualifierInfo
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SigPolicyQualifierInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  SignaturePolicyId_sigPolicyQualifiers                     */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_SigPolicyQualifierInfo */
typedef struct EXTERN ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers();
} ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers;

class EXTERN ASN1C_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& msgData;
public:
   ASN1C_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers (ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& data);
   ASN1C_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& data);
   ASN1C_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers (ASN1C_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& original);

   inline ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& getCopy (ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pDstData = 0);
   ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* newCopy ();

   ASN1C_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& operator= (ASN1C_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers& srcData);
   void Append (ASN1T_ETSI101733Stream_SigPolicyQualifierInfo *elem);
   ASN1T_ETSI101733Stream_SigPolicyQualifierInfo *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers
   (const char* name, ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pValue, ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pSrcValue, ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers* pvalue);

/**************************************************************/
/*                                                            */
/*  SignaturePolicyId                                         */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_SignaturePolicyId;

struct EXTERN ASN1T_ETSI101733Stream_SignaturePolicyId : public ASN1TPDU {
   struct {
      unsigned sigPolicyQualifiersPresent : 1;
   } m;
   ASN1T_ETSI101733Stream_SigPolicyId sigPolicyId;
   ASN1T_ETSI101733Stream_SigPolicyHash sigPolicyHash;
   ASN1T_ETSI101733Stream_SignaturePolicyId_sigPolicyQualifiers sigPolicyQualifiers;
   ASN1T_ETSI101733Stream_SignaturePolicyId ();
   ASN1T_ETSI101733Stream_SignaturePolicyId (ASN1C_ETSI101733Stream_SignaturePolicyId& srcData);
   ~ASN1T_ETSI101733Stream_SignaturePolicyId ();
} ;

class EXTERN ASN1C_ETSI101733Stream_SignaturePolicyId :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_SignaturePolicyId& msgData;
public:
   ASN1C_ETSI101733Stream_SignaturePolicyId (ASN1T_ETSI101733Stream_SignaturePolicyId& data);
   ASN1C_ETSI101733Stream_SignaturePolicyId (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SignaturePolicyId& data);
   ASN1C_ETSI101733Stream_SignaturePolicyId (ASN1C_ETSI101733Stream_SignaturePolicyId& original);

   inline ASN1T_ETSI101733Stream_SignaturePolicyId& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SignaturePolicyId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SignaturePolicyId* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SignaturePolicyId& getCopy (ASN1T_ETSI101733Stream_SignaturePolicyId* pDstData = 0);
   ASN1T_ETSI101733Stream_SignaturePolicyId* newCopy ();

   inline ASN1C_ETSI101733Stream_SignaturePolicyId& operator= (ASN1C_ETSI101733Stream_SignaturePolicyId& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SignaturePolicyId (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SignaturePolicyId *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SignaturePolicyId
   (const char* name, ASN1T_ETSI101733Stream_SignaturePolicyId* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SignaturePolicyId
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignaturePolicyId* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SignaturePolicyId (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignaturePolicyId* pValue, ASN1T_ETSI101733Stream_SignaturePolicyId* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SignaturePolicyId (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignaturePolicyId* pSrcValue, ASN1T_ETSI101733Stream_SignaturePolicyId* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SignaturePolicyId
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignaturePolicyId* pvalue);

/**************************************************************/
/*                                                            */
/*  SignaturePolicy                                           */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ETSI101733Stream_SignaturePolicy_signaturePolicyImplied 1
#define T_ETSI101733Stream_SignaturePolicy_signaturePolicyId 2

class EXTERN ASN1C_ETSI101733Stream_SignaturePolicy;

struct EXTERN ASN1T_ETSI101733Stream_SignaturePolicy : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      /* t = 2 */
      ASN1T_ETSI101733Stream_SignaturePolicyId *signaturePolicyId;
   } u;
   ASN1T_ETSI101733Stream_SignaturePolicy () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ETSI101733Stream_SignaturePolicy (ASN1C_ETSI101733Stream_SignaturePolicy& srcData);
   ~ASN1T_ETSI101733Stream_SignaturePolicy ();
} ;

class EXTERN ASN1C_ETSI101733Stream_SignaturePolicy :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_SignaturePolicy& msgData;
public:
   ASN1C_ETSI101733Stream_SignaturePolicy (ASN1T_ETSI101733Stream_SignaturePolicy& data);
   ASN1C_ETSI101733Stream_SignaturePolicy (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SignaturePolicy& data);
   ASN1C_ETSI101733Stream_SignaturePolicy (ASN1C_ETSI101733Stream_SignaturePolicy& original);

   inline ASN1T_ETSI101733Stream_SignaturePolicy& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SignaturePolicy& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SignaturePolicy* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SignaturePolicy& getCopy (ASN1T_ETSI101733Stream_SignaturePolicy* pDstData = 0);
   ASN1T_ETSI101733Stream_SignaturePolicy* newCopy ();

   inline ASN1C_ETSI101733Stream_SignaturePolicy& operator= (ASN1C_ETSI101733Stream_SignaturePolicy& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SignaturePolicy (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SignaturePolicy *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SignaturePolicy
   (const char* name, ASN1T_ETSI101733Stream_SignaturePolicy* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SignaturePolicy
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignaturePolicy* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SignaturePolicy (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignaturePolicy* pValue, ASN1T_ETSI101733Stream_SignaturePolicy* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SignaturePolicy (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignaturePolicy* pSrcValue, ASN1T_ETSI101733Stream_SignaturePolicy* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SignaturePolicy
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignaturePolicy* pvalue);

/**************************************************************/
/*                                                            */
/*  DisplayText                                               */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ETSI101733Stream_DisplayText_utf8String 1
#define T_ETSI101733Stream_DisplayText_visibleString 2
#define T_ETSI101733Stream_DisplayText_bmpString 3

class EXTERN ASN1C_ETSI101733Stream_DisplayText;

struct EXTERN ASN1T_ETSI101733Stream_DisplayText : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1UTF8String utf8String;
      /* t = 2 */
      ASN1VisibleString visibleString;
      /* t = 3 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_ETSI101733Stream_DisplayText () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ETSI101733Stream_DisplayText (ASN1C_ETSI101733Stream_DisplayText& srcData);
   ~ASN1T_ETSI101733Stream_DisplayText ();
} ;

class EXTERN ASN1C_ETSI101733Stream_DisplayText :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_DisplayText& msgData;
public:
   ASN1C_ETSI101733Stream_DisplayText (ASN1T_ETSI101733Stream_DisplayText& data);
   ASN1C_ETSI101733Stream_DisplayText (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_DisplayText& data);
   ASN1C_ETSI101733Stream_DisplayText (ASN1C_ETSI101733Stream_DisplayText& original);

   inline ASN1T_ETSI101733Stream_DisplayText& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_DisplayText& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_DisplayText* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_DisplayText& getCopy (ASN1T_ETSI101733Stream_DisplayText* pDstData = 0);
   ASN1T_ETSI101733Stream_DisplayText* newCopy ();

   inline ASN1C_ETSI101733Stream_DisplayText& operator= (ASN1C_ETSI101733Stream_DisplayText& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_DisplayText (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_DisplayText *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_DisplayText
   (const char* name, ASN1T_ETSI101733Stream_DisplayText* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_DisplayText
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_DisplayText* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_DisplayText (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_DisplayText* pValue, ASN1T_ETSI101733Stream_DisplayText* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_DisplayText (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_DisplayText* pSrcValue, ASN1T_ETSI101733Stream_DisplayText* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_DisplayText
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_DisplayText* pvalue);

/**************************************************************/
/*                                                            */
/*  NoticeReference_noticeNumbers                             */
/*                                                            */
/**************************************************************/

/* List of OSINT32 */
typedef struct EXTERN ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers();
} ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers;

class EXTERN ASN1C_ETSI101733Stream_NoticeReference_noticeNumbers :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers& msgData;
public:
   ASN1C_ETSI101733Stream_NoticeReference_noticeNumbers (ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers& data);
   ASN1C_ETSI101733Stream_NoticeReference_noticeNumbers (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers& data);
   ASN1C_ETSI101733Stream_NoticeReference_noticeNumbers (ASN1C_ETSI101733Stream_NoticeReference_noticeNumbers& original);

   inline ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers& getCopy (ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pDstData = 0);
   ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* newCopy ();

   ASN1C_ETSI101733Stream_NoticeReference_noticeNumbers& operator= (ASN1C_ETSI101733Stream_NoticeReference_noticeNumbers& srcData);
   void Append (OSINT32 *elem);
   OSINT32 *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_NoticeReference_noticeNumbers (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_NoticeReference_noticeNumbers
   (const char* name, ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_NoticeReference_noticeNumbers
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_NoticeReference_noticeNumbers (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pValue, ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_NoticeReference_noticeNumbers (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pSrcValue, ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_NoticeReference_noticeNumbers
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers* pvalue);

/**************************************************************/
/*                                                            */
/*  NoticeReference                                           */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_NoticeReference;

struct EXTERN ASN1T_ETSI101733Stream_NoticeReference : public ASN1TPDU {
   ASN1T_ETSI101733Stream_DisplayText organization;
   ASN1T_ETSI101733Stream_NoticeReference_noticeNumbers noticeNumbers;
   ASN1T_ETSI101733Stream_NoticeReference ();
   ASN1T_ETSI101733Stream_NoticeReference (ASN1C_ETSI101733Stream_NoticeReference& srcData);
   ~ASN1T_ETSI101733Stream_NoticeReference ();
} ;

class EXTERN ASN1C_ETSI101733Stream_NoticeReference :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_NoticeReference& msgData;
public:
   ASN1C_ETSI101733Stream_NoticeReference (ASN1T_ETSI101733Stream_NoticeReference& data);
   ASN1C_ETSI101733Stream_NoticeReference (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_NoticeReference& data);
   ASN1C_ETSI101733Stream_NoticeReference (ASN1C_ETSI101733Stream_NoticeReference& original);

   inline ASN1T_ETSI101733Stream_NoticeReference& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_NoticeReference& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_NoticeReference* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_NoticeReference& getCopy (ASN1T_ETSI101733Stream_NoticeReference* pDstData = 0);
   ASN1T_ETSI101733Stream_NoticeReference* newCopy ();

   inline ASN1C_ETSI101733Stream_NoticeReference& operator= (ASN1C_ETSI101733Stream_NoticeReference& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_NoticeReference (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_NoticeReference *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_NoticeReference
   (const char* name, ASN1T_ETSI101733Stream_NoticeReference* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_NoticeReference
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_NoticeReference* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_NoticeReference (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_NoticeReference* pValue, ASN1T_ETSI101733Stream_NoticeReference* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_NoticeReference (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_NoticeReference* pSrcValue, ASN1T_ETSI101733Stream_NoticeReference* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_NoticeReference
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_NoticeReference* pvalue);

/**************************************************************/
/*                                                            */
/*  SPUserNotice                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_SPUserNotice;

struct EXTERN ASN1T_ETSI101733Stream_SPUserNotice : public ASN1TPDU {
   struct {
      unsigned noticeRefPresent : 1;
      unsigned explicitTextPresent : 1;
   } m;
   ASN1T_ETSI101733Stream_NoticeReference noticeRef;
   ASN1T_ETSI101733Stream_DisplayText explicitText;
   ASN1T_ETSI101733Stream_SPUserNotice ();
   ASN1T_ETSI101733Stream_SPUserNotice (ASN1C_ETSI101733Stream_SPUserNotice& srcData);
   ~ASN1T_ETSI101733Stream_SPUserNotice ();
} ;

class EXTERN ASN1C_ETSI101733Stream_SPUserNotice :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_SPUserNotice& msgData;
public:
   ASN1C_ETSI101733Stream_SPUserNotice (ASN1T_ETSI101733Stream_SPUserNotice& data);
   ASN1C_ETSI101733Stream_SPUserNotice (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SPUserNotice& data);
   ASN1C_ETSI101733Stream_SPUserNotice (ASN1C_ETSI101733Stream_SPUserNotice& original);

   inline ASN1T_ETSI101733Stream_SPUserNotice& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SPUserNotice& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SPUserNotice* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SPUserNotice& getCopy (ASN1T_ETSI101733Stream_SPUserNotice* pDstData = 0);
   ASN1T_ETSI101733Stream_SPUserNotice* newCopy ();

   inline ASN1C_ETSI101733Stream_SPUserNotice& operator= (ASN1C_ETSI101733Stream_SPUserNotice& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SPUserNotice (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SPUserNotice *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SPUserNotice
   (const char* name, ASN1T_ETSI101733Stream_SPUserNotice* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SPUserNotice
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SPUserNotice* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SPUserNotice (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SPUserNotice* pValue, ASN1T_ETSI101733Stream_SPUserNotice* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SPUserNotice (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SPUserNotice* pSrcValue, ASN1T_ETSI101733Stream_SPUserNotice* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SPUserNotice
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SPUserNotice* pvalue);

/**************************************************************/
/*                                                            */
/*  CompleteCertificateRefs                                   */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_OtherCertID */
typedef struct EXTERN ASN1T_ETSI101733Stream_CompleteCertificateRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_CompleteCertificateRefs();
} ASN1T_ETSI101733Stream_CompleteCertificateRefs;

class EXTERN ASN1C_ETSI101733Stream_CompleteCertificateRefs :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_CompleteCertificateRefs& msgData;
public:
   ASN1C_ETSI101733Stream_CompleteCertificateRefs (ASN1T_ETSI101733Stream_CompleteCertificateRefs& data);
   ASN1C_ETSI101733Stream_CompleteCertificateRefs (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CompleteCertificateRefs& data);
   ASN1C_ETSI101733Stream_CompleteCertificateRefs (ASN1C_ETSI101733Stream_CompleteCertificateRefs& original);

   inline ASN1T_ETSI101733Stream_CompleteCertificateRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CompleteCertificateRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CompleteCertificateRefs* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CompleteCertificateRefs& getCopy (ASN1T_ETSI101733Stream_CompleteCertificateRefs* pDstData = 0);
   ASN1T_ETSI101733Stream_CompleteCertificateRefs* newCopy ();

   ASN1C_ETSI101733Stream_CompleteCertificateRefs& operator= (ASN1C_ETSI101733Stream_CompleteCertificateRefs& srcData);
   void Append (ASN1T_ETSI101733Stream_OtherCertID *elem);
   ASN1T_ETSI101733Stream_OtherCertID *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_CompleteCertificateRefs (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CompleteCertificateRefs *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CompleteCertificateRefs
   (const char* name, ASN1T_ETSI101733Stream_CompleteCertificateRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CompleteCertificateRefs
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CompleteCertificateRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CompleteCertificateRefs (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CompleteCertificateRefs* pValue, ASN1T_ETSI101733Stream_CompleteCertificateRefs* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CompleteCertificateRefs (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CompleteCertificateRefs* pSrcValue, ASN1T_ETSI101733Stream_CompleteCertificateRefs* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CompleteCertificateRefs
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CompleteCertificateRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  CrlIdentifier                                             */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_CrlIdentifier;

struct EXTERN ASN1T_ETSI101733Stream_CrlIdentifier : public ASN1TPDU {
   struct {
      unsigned crlNumberPresent : 1;
   } m;
   ASN1T_EXPStream_Name crlissuer;
   ASN1UTCTime crlIssuedTime;
   OSINT32 crlNumber;
   ASN1T_ETSI101733Stream_CrlIdentifier ();
   ASN1T_ETSI101733Stream_CrlIdentifier (ASN1C_ETSI101733Stream_CrlIdentifier& srcData);
   ~ASN1T_ETSI101733Stream_CrlIdentifier ();
} ;

class EXTERN ASN1C_ETSI101733Stream_CrlIdentifier :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_CrlIdentifier& msgData;
public:
   ASN1C_ETSI101733Stream_CrlIdentifier (ASN1T_ETSI101733Stream_CrlIdentifier& data);
   ASN1C_ETSI101733Stream_CrlIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CrlIdentifier& data);
   ASN1C_ETSI101733Stream_CrlIdentifier (ASN1C_ETSI101733Stream_CrlIdentifier& original);

   inline ASN1T_ETSI101733Stream_CrlIdentifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CrlIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CrlIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CrlIdentifier& getCopy (ASN1T_ETSI101733Stream_CrlIdentifier* pDstData = 0);
   ASN1T_ETSI101733Stream_CrlIdentifier* newCopy ();

   inline ASN1C_ETSI101733Stream_CrlIdentifier& operator= (ASN1C_ETSI101733Stream_CrlIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_CrlIdentifier (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CrlIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CrlIdentifier
   (const char* name, ASN1T_ETSI101733Stream_CrlIdentifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CrlIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CrlIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CrlIdentifier (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CrlIdentifier* pValue, ASN1T_ETSI101733Stream_CrlIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CrlIdentifier (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CrlIdentifier* pSrcValue, ASN1T_ETSI101733Stream_CrlIdentifier* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CrlIdentifier
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CrlIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CrlValidatedID                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_CrlValidatedID;

struct EXTERN ASN1T_ETSI101733Stream_CrlValidatedID : public ASN1TPDU {
   struct {
      unsigned crlIdentifierPresent : 1;
   } m;
   ASN1T_ETSI101733Stream_OtherHash crlHash;
   ASN1T_ETSI101733Stream_CrlIdentifier crlIdentifier;
   ASN1T_ETSI101733Stream_CrlValidatedID ();
   ASN1T_ETSI101733Stream_CrlValidatedID (ASN1C_ETSI101733Stream_CrlValidatedID& srcData);
   ~ASN1T_ETSI101733Stream_CrlValidatedID ();
} ;

class EXTERN ASN1C_ETSI101733Stream_CrlValidatedID :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_CrlValidatedID& msgData;
public:
   ASN1C_ETSI101733Stream_CrlValidatedID (ASN1T_ETSI101733Stream_CrlValidatedID& data);
   ASN1C_ETSI101733Stream_CrlValidatedID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CrlValidatedID& data);
   ASN1C_ETSI101733Stream_CrlValidatedID (ASN1C_ETSI101733Stream_CrlValidatedID& original);

   inline ASN1T_ETSI101733Stream_CrlValidatedID& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CrlValidatedID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CrlValidatedID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CrlValidatedID& getCopy (ASN1T_ETSI101733Stream_CrlValidatedID* pDstData = 0);
   ASN1T_ETSI101733Stream_CrlValidatedID* newCopy ();

   inline ASN1C_ETSI101733Stream_CrlValidatedID& operator= (ASN1C_ETSI101733Stream_CrlValidatedID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_CrlValidatedID (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CrlValidatedID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CrlValidatedID
   (const char* name, ASN1T_ETSI101733Stream_CrlValidatedID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CrlValidatedID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CrlValidatedID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CrlValidatedID (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CrlValidatedID* pValue, ASN1T_ETSI101733Stream_CrlValidatedID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CrlValidatedID (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CrlValidatedID* pSrcValue, ASN1T_ETSI101733Stream_CrlValidatedID* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CrlValidatedID
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CrlValidatedID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733Stream_CrlValidatedID                     */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_CrlValidatedID */
typedef struct EXTERN ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID();
} ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID;

class EXTERN ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& msgData;
public:
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& original);

   inline ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& getCopy (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pDstData = 0);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* newCopy ();

   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& operator= (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID& srcData);
   void Append (ASN1T_ETSI101733Stream_CrlValidatedID *elem);
   ASN1T_ETSI101733Stream_CrlValidatedID *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID
   (const char* name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pSrcValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pDstValue);

EXTERN void asn1Free_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID* pvalue);

/**************************************************************/
/*                                                            */
/*  CRLListID                                                 */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_CRLListID;

struct EXTERN ASN1T_ETSI101733Stream_CRLListID : public ASN1TPDU {
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CrlValidatedID crls;
   ASN1T_ETSI101733Stream_CRLListID ();
   ASN1T_ETSI101733Stream_CRLListID (ASN1C_ETSI101733Stream_CRLListID& srcData);
   ~ASN1T_ETSI101733Stream_CRLListID ();
} ;

class EXTERN ASN1C_ETSI101733Stream_CRLListID :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_CRLListID& msgData;
public:
   ASN1C_ETSI101733Stream_CRLListID (ASN1T_ETSI101733Stream_CRLListID& data);
   ASN1C_ETSI101733Stream_CRLListID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CRLListID& data);
   ASN1C_ETSI101733Stream_CRLListID (ASN1C_ETSI101733Stream_CRLListID& original);

   inline ASN1T_ETSI101733Stream_CRLListID& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CRLListID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CRLListID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CRLListID& getCopy (ASN1T_ETSI101733Stream_CRLListID* pDstData = 0);
   ASN1T_ETSI101733Stream_CRLListID* newCopy ();

   inline ASN1C_ETSI101733Stream_CRLListID& operator= (ASN1C_ETSI101733Stream_CRLListID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_CRLListID (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CRLListID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CRLListID
   (const char* name, ASN1T_ETSI101733Stream_CRLListID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CRLListID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CRLListID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CRLListID (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CRLListID* pValue, ASN1T_ETSI101733Stream_CRLListID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CRLListID (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CRLListID* pSrcValue, ASN1T_ETSI101733Stream_CRLListID* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CRLListID
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CRLListID* pvalue);

/**************************************************************/
/*                                                            */
/*  OcspIdentifier                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_OcspIdentifier;

struct EXTERN ASN1T_ETSI101733Stream_OcspIdentifier : public ASN1TPDU {
   ASN1T_OCSPStream_ResponderID ocspResponderID;
   ASN1GeneralizedTime producedAt;
   ASN1T_ETSI101733Stream_OcspIdentifier ();
   ASN1T_ETSI101733Stream_OcspIdentifier (ASN1C_ETSI101733Stream_OcspIdentifier& srcData);
   ~ASN1T_ETSI101733Stream_OcspIdentifier ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OcspIdentifier :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OcspIdentifier& msgData;
public:
   ASN1C_ETSI101733Stream_OcspIdentifier (ASN1T_ETSI101733Stream_OcspIdentifier& data);
   ASN1C_ETSI101733Stream_OcspIdentifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OcspIdentifier& data);
   ASN1C_ETSI101733Stream_OcspIdentifier (ASN1C_ETSI101733Stream_OcspIdentifier& original);

   inline ASN1T_ETSI101733Stream_OcspIdentifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OcspIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OcspIdentifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OcspIdentifier& getCopy (ASN1T_ETSI101733Stream_OcspIdentifier* pDstData = 0);
   ASN1T_ETSI101733Stream_OcspIdentifier* newCopy ();

   inline ASN1C_ETSI101733Stream_OcspIdentifier& operator= (ASN1C_ETSI101733Stream_OcspIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OcspIdentifier (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OcspIdentifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OcspIdentifier
   (const char* name, ASN1T_ETSI101733Stream_OcspIdentifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OcspIdentifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OcspIdentifier* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OcspIdentifier (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OcspIdentifier* pValue, ASN1T_ETSI101733Stream_OcspIdentifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OcspIdentifier (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OcspIdentifier* pSrcValue, ASN1T_ETSI101733Stream_OcspIdentifier* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OcspIdentifier
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OcspIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  OcspResponsesID                                           */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_OcspResponsesID;

struct EXTERN ASN1T_ETSI101733Stream_OcspResponsesID : public ASN1TPDU {
   struct {
      unsigned ocspRepHashPresent : 1;
   } m;
   ASN1T_ETSI101733Stream_OcspIdentifier ocspIdentifier;
   ASN1T_ETSI101733Stream_OtherHash ocspRepHash;
   ASN1T_ETSI101733Stream_OcspResponsesID ();
   ASN1T_ETSI101733Stream_OcspResponsesID (ASN1C_ETSI101733Stream_OcspResponsesID& srcData);
   ~ASN1T_ETSI101733Stream_OcspResponsesID ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OcspResponsesID :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OcspResponsesID& msgData;
public:
   ASN1C_ETSI101733Stream_OcspResponsesID (ASN1T_ETSI101733Stream_OcspResponsesID& data);
   ASN1C_ETSI101733Stream_OcspResponsesID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OcspResponsesID& data);
   ASN1C_ETSI101733Stream_OcspResponsesID (ASN1C_ETSI101733Stream_OcspResponsesID& original);

   inline ASN1T_ETSI101733Stream_OcspResponsesID& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OcspResponsesID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OcspResponsesID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OcspResponsesID& getCopy (ASN1T_ETSI101733Stream_OcspResponsesID* pDstData = 0);
   ASN1T_ETSI101733Stream_OcspResponsesID* newCopy ();

   inline ASN1C_ETSI101733Stream_OcspResponsesID& operator= (ASN1C_ETSI101733Stream_OcspResponsesID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OcspResponsesID (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OcspResponsesID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OcspResponsesID
   (const char* name, ASN1T_ETSI101733Stream_OcspResponsesID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OcspResponsesID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OcspResponsesID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OcspResponsesID (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OcspResponsesID* pValue, ASN1T_ETSI101733Stream_OcspResponsesID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OcspResponsesID (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OcspResponsesID* pSrcValue, ASN1T_ETSI101733Stream_OcspResponsesID* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OcspResponsesID
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OcspResponsesID* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733Stream_OcspResponsesID                    */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_OcspResponsesID */
typedef struct EXTERN ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID();
} ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID;

class EXTERN ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& msgData;
public:
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& original);

   inline ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& getCopy (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pDstData = 0);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* newCopy ();

   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& operator= (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID& srcData);
   void Append (ASN1T_ETSI101733Stream_OcspResponsesID *elem);
   ASN1T_ETSI101733Stream_OcspResponsesID *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID
   (const char* name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pSrcValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pDstValue);

EXTERN void asn1Free_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID* pvalue);

/**************************************************************/
/*                                                            */
/*  OcspListID                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_OcspListID;

struct EXTERN ASN1T_ETSI101733Stream_OcspListID : public ASN1TPDU {
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_OcspResponsesID ocspResponses;
   ASN1T_ETSI101733Stream_OcspListID ();
   ASN1T_ETSI101733Stream_OcspListID (ASN1C_ETSI101733Stream_OcspListID& srcData);
   ~ASN1T_ETSI101733Stream_OcspListID ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OcspListID :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OcspListID& msgData;
public:
   ASN1C_ETSI101733Stream_OcspListID (ASN1T_ETSI101733Stream_OcspListID& data);
   ASN1C_ETSI101733Stream_OcspListID (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OcspListID& data);
   ASN1C_ETSI101733Stream_OcspListID (ASN1C_ETSI101733Stream_OcspListID& original);

   inline ASN1T_ETSI101733Stream_OcspListID& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OcspListID& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OcspListID* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OcspListID& getCopy (ASN1T_ETSI101733Stream_OcspListID* pDstData = 0);
   ASN1T_ETSI101733Stream_OcspListID* newCopy ();

   inline ASN1C_ETSI101733Stream_OcspListID& operator= (ASN1C_ETSI101733Stream_OcspListID& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OcspListID (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OcspListID *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OcspListID
   (const char* name, ASN1T_ETSI101733Stream_OcspListID* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OcspListID
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OcspListID* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OcspListID (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OcspListID* pValue, ASN1T_ETSI101733Stream_OcspListID* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OcspListID (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OcspListID* pSrcValue, ASN1T_ETSI101733Stream_OcspListID* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OcspListID
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OcspListID* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevRefs_otherRevRefs                                 */
/*                                                            */
/**************************************************************/

/* List of ASN1TOpenType */
typedef struct EXTERN ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs();
} ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs;

class EXTERN ASN1C_ETSI101733Stream_OtherRevRefs_otherRevRefs :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs& msgData;
public:
   ASN1C_ETSI101733Stream_OtherRevRefs_otherRevRefs (ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs& data);
   ASN1C_ETSI101733Stream_OtherRevRefs_otherRevRefs (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs& data);
   ASN1C_ETSI101733Stream_OtherRevRefs_otherRevRefs (ASN1C_ETSI101733Stream_OtherRevRefs_otherRevRefs& original);

   inline ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs& getCopy (ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* newCopy ();

   ASN1C_ETSI101733Stream_OtherRevRefs_otherRevRefs& operator= (ASN1C_ETSI101733Stream_OtherRevRefs_otherRevRefs& srcData);
   void Append (ASN1TOpenType *elem);
   ASN1TOpenType *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherRevRefs_otherRevRefs (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherRevRefs_otherRevRefs
   (const char* name, ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherRevRefs_otherRevRefs
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherRevRefs_otherRevRefs (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pValue, ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherRevRefs_otherRevRefs (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pSrcValue, ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherRevRefs_otherRevRefs
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevRefs                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_OtherRevRefs;

struct EXTERN ASN1T_ETSI101733Stream_OtherRevRefs : public ASN1TPDU {
   ASN1TObjId otherRevRefType;
   ASN1T_ETSI101733Stream_OtherRevRefs_otherRevRefs otherRevRefs;
   ASN1T_ETSI101733Stream_OtherRevRefs ();
   ASN1T_ETSI101733Stream_OtherRevRefs (ASN1C_ETSI101733Stream_OtherRevRefs& srcData);
   ~ASN1T_ETSI101733Stream_OtherRevRefs ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OtherRevRefs :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OtherRevRefs& msgData;
public:
   ASN1C_ETSI101733Stream_OtherRevRefs (ASN1T_ETSI101733Stream_OtherRevRefs& data);
   ASN1C_ETSI101733Stream_OtherRevRefs (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherRevRefs& data);
   ASN1C_ETSI101733Stream_OtherRevRefs (ASN1C_ETSI101733Stream_OtherRevRefs& original);

   inline ASN1T_ETSI101733Stream_OtherRevRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherRevRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherRevRefs* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherRevRefs& getCopy (ASN1T_ETSI101733Stream_OtherRevRefs* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherRevRefs* newCopy ();

   inline ASN1C_ETSI101733Stream_OtherRevRefs& operator= (ASN1C_ETSI101733Stream_OtherRevRefs& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherRevRefs (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherRevRefs *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherRevRefs
   (const char* name, ASN1T_ETSI101733Stream_OtherRevRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherRevRefs
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherRevRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherRevRefs (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherRevRefs* pValue, ASN1T_ETSI101733Stream_OtherRevRefs* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherRevRefs (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherRevRefs* pSrcValue, ASN1T_ETSI101733Stream_OtherRevRefs* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherRevRefs
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherRevRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  CrlOcspRef                                                */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_CrlOcspRef;

struct EXTERN ASN1T_ETSI101733Stream_CrlOcspRef : public ASN1TPDU {
   struct {
      unsigned crlidsPresent : 1;
      unsigned ocspidsPresent : 1;
      unsigned otherRevPresent : 1;
   } m;
   ASN1T_ETSI101733Stream_CRLListID crlids;
   ASN1T_ETSI101733Stream_OcspListID ocspids;
   ASN1T_ETSI101733Stream_OtherRevRefs otherRev;
   ASN1T_ETSI101733Stream_CrlOcspRef ();
   ASN1T_ETSI101733Stream_CrlOcspRef (ASN1C_ETSI101733Stream_CrlOcspRef& srcData);
   ~ASN1T_ETSI101733Stream_CrlOcspRef ();
} ;

class EXTERN ASN1C_ETSI101733Stream_CrlOcspRef :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_CrlOcspRef& msgData;
public:
   ASN1C_ETSI101733Stream_CrlOcspRef (ASN1T_ETSI101733Stream_CrlOcspRef& data);
   ASN1C_ETSI101733Stream_CrlOcspRef (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CrlOcspRef& data);
   ASN1C_ETSI101733Stream_CrlOcspRef (ASN1C_ETSI101733Stream_CrlOcspRef& original);

   inline ASN1T_ETSI101733Stream_CrlOcspRef& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CrlOcspRef& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CrlOcspRef* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CrlOcspRef& getCopy (ASN1T_ETSI101733Stream_CrlOcspRef* pDstData = 0);
   ASN1T_ETSI101733Stream_CrlOcspRef* newCopy ();

   inline ASN1C_ETSI101733Stream_CrlOcspRef& operator= (ASN1C_ETSI101733Stream_CrlOcspRef& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_CrlOcspRef (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CrlOcspRef *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CrlOcspRef
   (const char* name, ASN1T_ETSI101733Stream_CrlOcspRef* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CrlOcspRef
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CrlOcspRef* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CrlOcspRef (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CrlOcspRef* pValue, ASN1T_ETSI101733Stream_CrlOcspRef* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CrlOcspRef (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CrlOcspRef* pSrcValue, ASN1T_ETSI101733Stream_CrlOcspRef* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CrlOcspRef
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CrlOcspRef* pvalue);

/**************************************************************/
/*                                                            */
/*  CompleteRevocationRefs                                    */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_CrlOcspRef */
typedef struct EXTERN ASN1T_ETSI101733Stream_CompleteRevocationRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_CompleteRevocationRefs();
} ASN1T_ETSI101733Stream_CompleteRevocationRefs;

class EXTERN ASN1C_ETSI101733Stream_CompleteRevocationRefs :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_CompleteRevocationRefs& msgData;
public:
   ASN1C_ETSI101733Stream_CompleteRevocationRefs (ASN1T_ETSI101733Stream_CompleteRevocationRefs& data);
   ASN1C_ETSI101733Stream_CompleteRevocationRefs (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CompleteRevocationRefs& data);
   ASN1C_ETSI101733Stream_CompleteRevocationRefs (ASN1C_ETSI101733Stream_CompleteRevocationRefs& original);

   inline ASN1T_ETSI101733Stream_CompleteRevocationRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CompleteRevocationRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CompleteRevocationRefs* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CompleteRevocationRefs& getCopy (ASN1T_ETSI101733Stream_CompleteRevocationRefs* pDstData = 0);
   ASN1T_ETSI101733Stream_CompleteRevocationRefs* newCopy ();

   ASN1C_ETSI101733Stream_CompleteRevocationRefs& operator= (ASN1C_ETSI101733Stream_CompleteRevocationRefs& srcData);
   void Append (ASN1T_ETSI101733Stream_CrlOcspRef *elem);
   ASN1T_ETSI101733Stream_CrlOcspRef *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_CompleteRevocationRefs (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CompleteRevocationRefs *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CompleteRevocationRefs
   (const char* name, ASN1T_ETSI101733Stream_CompleteRevocationRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CompleteRevocationRefs
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CompleteRevocationRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CompleteRevocationRefs (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CompleteRevocationRefs* pValue, ASN1T_ETSI101733Stream_CompleteRevocationRefs* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CompleteRevocationRefs (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CompleteRevocationRefs* pSrcValue, ASN1T_ETSI101733Stream_CompleteRevocationRefs* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CompleteRevocationRefs
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CompleteRevocationRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateValues                                         */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Certificate */
typedef struct EXTERN ASN1T_ETSI101733Stream_CertificateValues : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_CertificateValues();
} ASN1T_ETSI101733Stream_CertificateValues;

class EXTERN ASN1C_ETSI101733Stream_CertificateValues :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_CertificateValues& msgData;
public:
   ASN1C_ETSI101733Stream_CertificateValues (ASN1T_ETSI101733Stream_CertificateValues& data);
   ASN1C_ETSI101733Stream_CertificateValues (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CertificateValues& data);
   ASN1C_ETSI101733Stream_CertificateValues (ASN1C_ETSI101733Stream_CertificateValues& original);

   inline ASN1T_ETSI101733Stream_CertificateValues& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CertificateValues& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CertificateValues* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CertificateValues& getCopy (ASN1T_ETSI101733Stream_CertificateValues* pDstData = 0);
   ASN1T_ETSI101733Stream_CertificateValues* newCopy ();

   ASN1C_ETSI101733Stream_CertificateValues& operator= (ASN1C_ETSI101733Stream_CertificateValues& srcData);
   void Append (ASN1T_EXPStream_Certificate *elem);
   ASN1T_EXPStream_Certificate *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_CertificateValues (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CertificateValues *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CertificateValues
   (const char* name, ASN1T_ETSI101733Stream_CertificateValues* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CertificateValues
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CertificateValues* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CertificateValues (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CertificateValues* pValue, ASN1T_ETSI101733Stream_CertificateValues* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CertificateValues (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CertificateValues* pSrcValue, ASN1T_ETSI101733Stream_CertificateValues* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CertificateValues
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CertificateValues* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733Stream_CertificateList                    */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_CertificateList */
typedef struct EXTERN ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList();
} ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList;

class EXTERN ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& msgData;
public:
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& original);

   inline ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& getCopy (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pDstData = 0);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* newCopy ();

   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& operator= (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList& srcData);
   void Append (ASN1T_EXPStream_CertificateList *elem);
   ASN1T_EXPStream_CertificateList *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList
   (const char* name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pSrcValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pDstValue);

EXTERN void asn1Free_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfETSI101733Stream_BasicOCSPResponse                  */
/*                                                            */
/**************************************************************/

/* List of ASN1T_OCSPStream_BasicOCSPResponse */
typedef struct EXTERN ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse();
} ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse;

class EXTERN ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& msgData;
public:
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& data);
   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& original);

   inline ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& getCopy (ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pDstData = 0);
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* newCopy ();

   ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& operator= (ASN1C_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse& srcData);
   void Append (ASN1T_OCSPStream_BasicOCSPResponse *elem);
   ASN1T_OCSPStream_BasicOCSPResponse *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse
   (const char* name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pSrcValue, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pDstValue);

EXTERN void asn1Free_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevVals_otherRevVals                                 */
/*                                                            */
/**************************************************************/

/* List of ASN1TOpenType */
typedef struct EXTERN ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals();
} ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals;

class EXTERN ASN1C_ETSI101733Stream_OtherRevVals_otherRevVals :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals& msgData;
public:
   ASN1C_ETSI101733Stream_OtherRevVals_otherRevVals (ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals& data);
   ASN1C_ETSI101733Stream_OtherRevVals_otherRevVals (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals& data);
   ASN1C_ETSI101733Stream_OtherRevVals_otherRevVals (ASN1C_ETSI101733Stream_OtherRevVals_otherRevVals& original);

   inline ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals& getCopy (ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* newCopy ();

   ASN1C_ETSI101733Stream_OtherRevVals_otherRevVals& operator= (ASN1C_ETSI101733Stream_OtherRevVals_otherRevVals& srcData);
   void Append (ASN1TOpenType *elem);
   ASN1TOpenType *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherRevVals_otherRevVals (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherRevVals_otherRevVals
   (const char* name, ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherRevVals_otherRevVals
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherRevVals_otherRevVals (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pValue, ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherRevVals_otherRevVals (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pSrcValue, ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherRevVals_otherRevVals
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals* pvalue);

/**************************************************************/
/*                                                            */
/*  OtherRevVals                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_OtherRevVals;

struct EXTERN ASN1T_ETSI101733Stream_OtherRevVals : public ASN1TPDU {
   ASN1TObjId otherRevValType;
   ASN1T_ETSI101733Stream_OtherRevVals_otherRevVals otherRevVals;
   ASN1T_ETSI101733Stream_OtherRevVals ();
   ASN1T_ETSI101733Stream_OtherRevVals (ASN1C_ETSI101733Stream_OtherRevVals& srcData);
   ~ASN1T_ETSI101733Stream_OtherRevVals ();
} ;

class EXTERN ASN1C_ETSI101733Stream_OtherRevVals :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_OtherRevVals& msgData;
public:
   ASN1C_ETSI101733Stream_OtherRevVals (ASN1T_ETSI101733Stream_OtherRevVals& data);
   ASN1C_ETSI101733Stream_OtherRevVals (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_OtherRevVals& data);
   ASN1C_ETSI101733Stream_OtherRevVals (ASN1C_ETSI101733Stream_OtherRevVals& original);

   inline ASN1T_ETSI101733Stream_OtherRevVals& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_OtherRevVals& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_OtherRevVals* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_OtherRevVals& getCopy (ASN1T_ETSI101733Stream_OtherRevVals* pDstData = 0);
   ASN1T_ETSI101733Stream_OtherRevVals* newCopy ();

   inline ASN1C_ETSI101733Stream_OtherRevVals& operator= (ASN1C_ETSI101733Stream_OtherRevVals& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_OtherRevVals (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_OtherRevVals *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_OtherRevVals
   (const char* name, ASN1T_ETSI101733Stream_OtherRevVals* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_OtherRevVals
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherRevVals* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_OtherRevVals (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_OtherRevVals* pValue, ASN1T_ETSI101733Stream_OtherRevVals* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_OtherRevVals (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherRevVals* pSrcValue, ASN1T_ETSI101733Stream_OtherRevVals* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_OtherRevVals
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_OtherRevVals* pvalue);

/**************************************************************/
/*                                                            */
/*  RevocationValues                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_RevocationValues;

struct EXTERN ASN1T_ETSI101733Stream_RevocationValues : public ASN1TPDU {
   struct {
      unsigned crlValsPresent : 1;
      unsigned ocspValsPresent : 1;
      unsigned otherRevValsPresent : 1;
   } m;
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_CertificateList crlVals;
   ASN1T_ETSI101733Stream__SeqOfETSI101733Stream_BasicOCSPResponse ocspVals;
   ASN1T_ETSI101733Stream_OtherRevVals otherRevVals;
   ASN1T_ETSI101733Stream_RevocationValues ();
   ASN1T_ETSI101733Stream_RevocationValues (ASN1C_ETSI101733Stream_RevocationValues& srcData);
   ~ASN1T_ETSI101733Stream_RevocationValues ();
} ;

class EXTERN ASN1C_ETSI101733Stream_RevocationValues :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_RevocationValues& msgData;
public:
   ASN1C_ETSI101733Stream_RevocationValues (ASN1T_ETSI101733Stream_RevocationValues& data);
   ASN1C_ETSI101733Stream_RevocationValues (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_RevocationValues& data);
   ASN1C_ETSI101733Stream_RevocationValues (ASN1C_ETSI101733Stream_RevocationValues& original);

   inline ASN1T_ETSI101733Stream_RevocationValues& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_RevocationValues& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_RevocationValues* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_RevocationValues& getCopy (ASN1T_ETSI101733Stream_RevocationValues* pDstData = 0);
   ASN1T_ETSI101733Stream_RevocationValues* newCopy ();

   inline ASN1C_ETSI101733Stream_RevocationValues& operator= (ASN1C_ETSI101733Stream_RevocationValues& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_RevocationValues (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_RevocationValues *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_RevocationValues
   (const char* name, ASN1T_ETSI101733Stream_RevocationValues* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_RevocationValues
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_RevocationValues* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_RevocationValues (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_RevocationValues* pValue, ASN1T_ETSI101733Stream_RevocationValues* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_RevocationValues (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_RevocationValues* pSrcValue, ASN1T_ETSI101733Stream_RevocationValues* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_RevocationValues
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_RevocationValues* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeCertificateRefs                                  */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_OtherCertID */
typedef struct EXTERN ASN1T_ETSI101733Stream_AttributeCertificateRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_AttributeCertificateRefs();
} ASN1T_ETSI101733Stream_AttributeCertificateRefs;

class EXTERN ASN1C_ETSI101733Stream_AttributeCertificateRefs :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_AttributeCertificateRefs& msgData;
public:
   ASN1C_ETSI101733Stream_AttributeCertificateRefs (ASN1T_ETSI101733Stream_AttributeCertificateRefs& data);
   ASN1C_ETSI101733Stream_AttributeCertificateRefs (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_AttributeCertificateRefs& data);
   ASN1C_ETSI101733Stream_AttributeCertificateRefs (ASN1C_ETSI101733Stream_AttributeCertificateRefs& original);

   inline ASN1T_ETSI101733Stream_AttributeCertificateRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_AttributeCertificateRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_AttributeCertificateRefs* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_AttributeCertificateRefs& getCopy (ASN1T_ETSI101733Stream_AttributeCertificateRefs* pDstData = 0);
   ASN1T_ETSI101733Stream_AttributeCertificateRefs* newCopy ();

   ASN1C_ETSI101733Stream_AttributeCertificateRefs& operator= (ASN1C_ETSI101733Stream_AttributeCertificateRefs& srcData);
   void Append (ASN1T_ETSI101733Stream_OtherCertID *elem);
   ASN1T_ETSI101733Stream_OtherCertID *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_AttributeCertificateRefs (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_AttributeCertificateRefs *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_AttributeCertificateRefs
   (const char* name, ASN1T_ETSI101733Stream_AttributeCertificateRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_AttributeCertificateRefs
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_AttributeCertificateRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_AttributeCertificateRefs (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_AttributeCertificateRefs* pValue, ASN1T_ETSI101733Stream_AttributeCertificateRefs* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_AttributeCertificateRefs (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_AttributeCertificateRefs* pSrcValue, ASN1T_ETSI101733Stream_AttributeCertificateRefs* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_AttributeCertificateRefs
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_AttributeCertificateRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeRevocationRefs                                   */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_CrlOcspRef */
typedef struct EXTERN ASN1T_ETSI101733Stream_AttributeRevocationRefs : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_AttributeRevocationRefs();
} ASN1T_ETSI101733Stream_AttributeRevocationRefs;

class EXTERN ASN1C_ETSI101733Stream_AttributeRevocationRefs :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_AttributeRevocationRefs& msgData;
public:
   ASN1C_ETSI101733Stream_AttributeRevocationRefs (ASN1T_ETSI101733Stream_AttributeRevocationRefs& data);
   ASN1C_ETSI101733Stream_AttributeRevocationRefs (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_AttributeRevocationRefs& data);
   ASN1C_ETSI101733Stream_AttributeRevocationRefs (ASN1C_ETSI101733Stream_AttributeRevocationRefs& original);

   inline ASN1T_ETSI101733Stream_AttributeRevocationRefs& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_AttributeRevocationRefs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_AttributeRevocationRefs* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_AttributeRevocationRefs& getCopy (ASN1T_ETSI101733Stream_AttributeRevocationRefs* pDstData = 0);
   ASN1T_ETSI101733Stream_AttributeRevocationRefs* newCopy ();

   ASN1C_ETSI101733Stream_AttributeRevocationRefs& operator= (ASN1C_ETSI101733Stream_AttributeRevocationRefs& srcData);
   void Append (ASN1T_ETSI101733Stream_CrlOcspRef *elem);
   ASN1T_ETSI101733Stream_CrlOcspRef *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_AttributeRevocationRefs (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_AttributeRevocationRefs *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_AttributeRevocationRefs
   (const char* name, ASN1T_ETSI101733Stream_AttributeRevocationRefs* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_AttributeRevocationRefs
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_AttributeRevocationRefs* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_AttributeRevocationRefs (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_AttributeRevocationRefs* pValue, ASN1T_ETSI101733Stream_AttributeRevocationRefs* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_AttributeRevocationRefs (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_AttributeRevocationRefs* pSrcValue, ASN1T_ETSI101733Stream_AttributeRevocationRefs* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_AttributeRevocationRefs
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_AttributeRevocationRefs* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentReference                                          */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_ContentReference;

struct EXTERN ASN1T_ETSI101733Stream_ContentReference : public ASN1TPDU {
   ASN1T_CMSStream_ContentType contentType;
   ASN1T_ETSI101733Stream_ContentIdentifier signedContentIdentifier;
   ASN1TDynOctStr originatorSignatureValue;
   ASN1T_ETSI101733Stream_ContentReference ();
   ASN1T_ETSI101733Stream_ContentReference (ASN1C_ETSI101733Stream_ContentReference& srcData);
   ~ASN1T_ETSI101733Stream_ContentReference ();
} ;

class EXTERN ASN1C_ETSI101733Stream_ContentReference :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_ContentReference& msgData;
public:
   ASN1C_ETSI101733Stream_ContentReference (ASN1T_ETSI101733Stream_ContentReference& data);
   ASN1C_ETSI101733Stream_ContentReference (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_ContentReference& data);
   ASN1C_ETSI101733Stream_ContentReference (ASN1C_ETSI101733Stream_ContentReference& original);

   inline ASN1T_ETSI101733Stream_ContentReference& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_ContentReference& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_ContentReference* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_ContentReference& getCopy (ASN1T_ETSI101733Stream_ContentReference* pDstData = 0);
   ASN1T_ETSI101733Stream_ContentReference* newCopy ();

   inline ASN1C_ETSI101733Stream_ContentReference& operator= (ASN1C_ETSI101733Stream_ContentReference& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_ContentReference (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_ContentReference *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_ContentReference
   (const char* name, ASN1T_ETSI101733Stream_ContentReference* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_ContentReference
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_ContentReference* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_ContentReference (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_ContentReference* pValue, ASN1T_ETSI101733Stream_ContentReference* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_ContentReference (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_ContentReference* pSrcValue, ASN1T_ETSI101733Stream_ContentReference* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_ContentReference
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_ContentReference* pvalue);

/**************************************************************/
/*                                                            */
/*  ContentHints                                              */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_ContentHints;

struct EXTERN ASN1T_ETSI101733Stream_ContentHints : public ASN1TPDU {
   struct {
      unsigned contentDescriptionPresent : 1;
   } m;
   ASN1UTF8String contentDescription;
   ASN1T_CMSStream_ContentType contentType;
   ASN1T_ETSI101733Stream_ContentHints ();
   ASN1T_ETSI101733Stream_ContentHints (ASN1C_ETSI101733Stream_ContentHints& srcData);
   ~ASN1T_ETSI101733Stream_ContentHints ();
} ;

class EXTERN ASN1C_ETSI101733Stream_ContentHints :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_ContentHints& msgData;
public:
   ASN1C_ETSI101733Stream_ContentHints (ASN1T_ETSI101733Stream_ContentHints& data);
   ASN1C_ETSI101733Stream_ContentHints (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_ContentHints& data);
   ASN1C_ETSI101733Stream_ContentHints (ASN1C_ETSI101733Stream_ContentHints& original);

   inline ASN1T_ETSI101733Stream_ContentHints& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_ContentHints& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_ContentHints* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_ContentHints& getCopy (ASN1T_ETSI101733Stream_ContentHints* pDstData = 0);
   ASN1T_ETSI101733Stream_ContentHints* newCopy ();

   inline ASN1C_ETSI101733Stream_ContentHints& operator= (ASN1C_ETSI101733Stream_ContentHints& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_ContentHints (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_ContentHints *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_ContentHints
   (const char* name, ASN1T_ETSI101733Stream_ContentHints* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_ContentHints
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_ContentHints* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_ContentHints (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_ContentHints* pValue, ASN1T_ETSI101733Stream_ContentHints* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_ContentHints (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_ContentHints* pSrcValue, ASN1T_ETSI101733Stream_ContentHints* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_ContentHints
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_ContentHints* pvalue);

/**************************************************************/
/*                                                            */
/*  CommitmentTypeQualifier                                   */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_CommitmentTypeQualifier;

struct EXTERN ASN1T_ETSI101733Stream_CommitmentTypeQualifier : public ASN1TPDU {
   ASN1T_ETSI101733Stream_CommitmentTypeIdentifier commitmentTypeIdentifier;
   ASN1TOpenType qualifier;
   ASN1T_ETSI101733Stream_CommitmentTypeQualifier ();
   ASN1T_ETSI101733Stream_CommitmentTypeQualifier (ASN1C_ETSI101733Stream_CommitmentTypeQualifier& srcData);
   ~ASN1T_ETSI101733Stream_CommitmentTypeQualifier ();
} ;

class EXTERN ASN1C_ETSI101733Stream_CommitmentTypeQualifier :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_CommitmentTypeQualifier& msgData;
public:
   ASN1C_ETSI101733Stream_CommitmentTypeQualifier (ASN1T_ETSI101733Stream_CommitmentTypeQualifier& data);
   ASN1C_ETSI101733Stream_CommitmentTypeQualifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CommitmentTypeQualifier& data);
   ASN1C_ETSI101733Stream_CommitmentTypeQualifier (ASN1C_ETSI101733Stream_CommitmentTypeQualifier& original);

   inline ASN1T_ETSI101733Stream_CommitmentTypeQualifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CommitmentTypeQualifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CommitmentTypeQualifier& getCopy (ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pDstData = 0);
   ASN1T_ETSI101733Stream_CommitmentTypeQualifier* newCopy ();

   inline ASN1C_ETSI101733Stream_CommitmentTypeQualifier& operator= (ASN1C_ETSI101733Stream_CommitmentTypeQualifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_CommitmentTypeQualifier (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CommitmentTypeQualifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CommitmentTypeQualifier
   (const char* name, ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CommitmentTypeQualifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CommitmentTypeQualifier (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pValue, ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CommitmentTypeQualifier (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pSrcValue, ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CommitmentTypeQualifier
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CommitmentTypeQualifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CommitmentTypeIndication_commitmentTypeQualifier          */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_CommitmentTypeQualifier */
typedef struct EXTERN ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier();
} ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier;

class EXTERN ASN1C_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& msgData;
public:
   ASN1C_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier (ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& data);
   ASN1C_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& data);
   ASN1C_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier (ASN1C_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& original);

   inline ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& getCopy (ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pDstData = 0);
   ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* newCopy ();

   ASN1C_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& operator= (ASN1C_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier& srcData);
   void Append (ASN1T_ETSI101733Stream_CommitmentTypeQualifier *elem);
   ASN1T_ETSI101733Stream_CommitmentTypeQualifier *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier
   (const char* name, ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pValue, ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pSrcValue, ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier* pvalue);

/**************************************************************/
/*                                                            */
/*  CommitmentTypeIndication                                  */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_CommitmentTypeIndication;

struct EXTERN ASN1T_ETSI101733Stream_CommitmentTypeIndication : public ASN1TPDU {
   struct {
      unsigned commitmentTypeQualifierPresent : 1;
   } m;
   ASN1T_ETSI101733Stream_CommitmentTypeIdentifier commitmentTypeId;
   ASN1T_ETSI101733Stream_CommitmentTypeIndication_commitmentTypeQualifier commitmentTypeQualifier;
   ASN1T_ETSI101733Stream_CommitmentTypeIndication ();
   ASN1T_ETSI101733Stream_CommitmentTypeIndication (ASN1C_ETSI101733Stream_CommitmentTypeIndication& srcData);
   ~ASN1T_ETSI101733Stream_CommitmentTypeIndication ();
} ;

class EXTERN ASN1C_ETSI101733Stream_CommitmentTypeIndication :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_CommitmentTypeIndication& msgData;
public:
   ASN1C_ETSI101733Stream_CommitmentTypeIndication (ASN1T_ETSI101733Stream_CommitmentTypeIndication& data);
   ASN1C_ETSI101733Stream_CommitmentTypeIndication (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_CommitmentTypeIndication& data);
   ASN1C_ETSI101733Stream_CommitmentTypeIndication (ASN1C_ETSI101733Stream_CommitmentTypeIndication& original);

   inline ASN1T_ETSI101733Stream_CommitmentTypeIndication& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_CommitmentTypeIndication& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_CommitmentTypeIndication* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_CommitmentTypeIndication& getCopy (ASN1T_ETSI101733Stream_CommitmentTypeIndication* pDstData = 0);
   ASN1T_ETSI101733Stream_CommitmentTypeIndication* newCopy ();

   inline ASN1C_ETSI101733Stream_CommitmentTypeIndication& operator= (ASN1C_ETSI101733Stream_CommitmentTypeIndication& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_CommitmentTypeIndication (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_CommitmentTypeIndication *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_CommitmentTypeIndication
   (const char* name, ASN1T_ETSI101733Stream_CommitmentTypeIndication* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_CommitmentTypeIndication
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CommitmentTypeIndication* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_CommitmentTypeIndication (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_CommitmentTypeIndication* pValue, ASN1T_ETSI101733Stream_CommitmentTypeIndication* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_CommitmentTypeIndication (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CommitmentTypeIndication* pSrcValue, ASN1T_ETSI101733Stream_CommitmentTypeIndication* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_CommitmentTypeIndication
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_CommitmentTypeIndication* pvalue);

/**************************************************************/
/*                                                            */
/*  PostalAddress                                             */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_DirectoryString */
typedef struct EXTERN ASN1T_ETSI101733Stream_PostalAddress : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_PostalAddress();
} ASN1T_ETSI101733Stream_PostalAddress;

class EXTERN ASN1C_ETSI101733Stream_PostalAddress :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_PostalAddress& msgData;
public:
   ASN1C_ETSI101733Stream_PostalAddress (ASN1T_ETSI101733Stream_PostalAddress& data);
   ASN1C_ETSI101733Stream_PostalAddress (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_PostalAddress& data);
   ASN1C_ETSI101733Stream_PostalAddress (ASN1C_ETSI101733Stream_PostalAddress& original);

   inline ASN1T_ETSI101733Stream_PostalAddress& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_PostalAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_PostalAddress* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_PostalAddress& getCopy (ASN1T_ETSI101733Stream_PostalAddress* pDstData = 0);
   ASN1T_ETSI101733Stream_PostalAddress* newCopy ();

   ASN1C_ETSI101733Stream_PostalAddress& operator= (ASN1C_ETSI101733Stream_PostalAddress& srcData);
   void Append (ASN1T_EXPStream_DirectoryString *elem);
   ASN1T_EXPStream_DirectoryString *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_PostalAddress (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_PostalAddress *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_PostalAddress
   (const char* name, ASN1T_ETSI101733Stream_PostalAddress* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_PostalAddress
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_PostalAddress* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_PostalAddress (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_PostalAddress* pValue, ASN1T_ETSI101733Stream_PostalAddress* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_PostalAddress (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_PostalAddress* pSrcValue, ASN1T_ETSI101733Stream_PostalAddress* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_PostalAddress
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_PostalAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerLocation                                            */
/*                                                            */
/**************************************************************/

class EXTERN ASN1C_ETSI101733Stream_SignerLocation;

struct EXTERN ASN1T_ETSI101733Stream_SignerLocation : public ASN1TPDU {
   struct {
      unsigned countryNamePresent : 1;
      unsigned localityNamePresent : 1;
      unsigned postalAdddressPresent : 1;
   } m;
   ASN1T_EXPStream_DirectoryString countryName;
   ASN1T_EXPStream_DirectoryString localityName;
   ASN1T_ETSI101733Stream_PostalAddress postalAdddress;
   ASN1T_ETSI101733Stream_SignerLocation ();
   ASN1T_ETSI101733Stream_SignerLocation (ASN1C_ETSI101733Stream_SignerLocation& srcData);
   ~ASN1T_ETSI101733Stream_SignerLocation ();
} ;

class EXTERN ASN1C_ETSI101733Stream_SignerLocation :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_SignerLocation& msgData;
public:
   ASN1C_ETSI101733Stream_SignerLocation (ASN1T_ETSI101733Stream_SignerLocation& data);
   ASN1C_ETSI101733Stream_SignerLocation (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SignerLocation& data);
   ASN1C_ETSI101733Stream_SignerLocation (ASN1C_ETSI101733Stream_SignerLocation& original);

   inline ASN1T_ETSI101733Stream_SignerLocation& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SignerLocation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SignerLocation* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SignerLocation& getCopy (ASN1T_ETSI101733Stream_SignerLocation* pDstData = 0);
   ASN1T_ETSI101733Stream_SignerLocation* newCopy ();

   inline ASN1C_ETSI101733Stream_SignerLocation& operator= (ASN1C_ETSI101733Stream_SignerLocation& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SignerLocation (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SignerLocation *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SignerLocation
   (const char* name, ASN1T_ETSI101733Stream_SignerLocation* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SignerLocation
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignerLocation* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SignerLocation (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignerLocation* pValue, ASN1T_ETSI101733Stream_SignerLocation* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SignerLocation (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignerLocation* pSrcValue, ASN1T_ETSI101733Stream_SignerLocation* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SignerLocation
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignerLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  ClaimedAttributes                                         */
/*                                                            */
/**************************************************************/

/* List of ASN1T_EXPStream_Attribute */
typedef struct EXTERN ASN1T_ETSI101733Stream_ClaimedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_ClaimedAttributes();
} ASN1T_ETSI101733Stream_ClaimedAttributes;

class EXTERN ASN1C_ETSI101733Stream_ClaimedAttributes :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_ClaimedAttributes& msgData;
public:
   ASN1C_ETSI101733Stream_ClaimedAttributes (ASN1T_ETSI101733Stream_ClaimedAttributes& data);
   ASN1C_ETSI101733Stream_ClaimedAttributes (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_ClaimedAttributes& data);
   ASN1C_ETSI101733Stream_ClaimedAttributes (ASN1C_ETSI101733Stream_ClaimedAttributes& original);

   inline ASN1T_ETSI101733Stream_ClaimedAttributes& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_ClaimedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_ClaimedAttributes* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_ClaimedAttributes& getCopy (ASN1T_ETSI101733Stream_ClaimedAttributes* pDstData = 0);
   ASN1T_ETSI101733Stream_ClaimedAttributes* newCopy ();

   ASN1C_ETSI101733Stream_ClaimedAttributes& operator= (ASN1C_ETSI101733Stream_ClaimedAttributes& srcData);
   void Append (ASN1T_EXPStream_Attribute *elem);
   ASN1T_EXPStream_Attribute *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_ClaimedAttributes (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_ClaimedAttributes *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_ClaimedAttributes
   (const char* name, ASN1T_ETSI101733Stream_ClaimedAttributes* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_ClaimedAttributes
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_ClaimedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_ClaimedAttributes (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_ClaimedAttributes* pValue, ASN1T_ETSI101733Stream_ClaimedAttributes* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_ClaimedAttributes (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_ClaimedAttributes* pSrcValue, ASN1T_ETSI101733Stream_ClaimedAttributes* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_ClaimedAttributes
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_ClaimedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerAttribute_element                                   */
/*                                                            */
/**************************************************************/

/* Choice tag constants */

#define T_ETSI101733Stream_SignerAttribute_element_claimedAttributes 1
#define T_ETSI101733Stream_SignerAttribute_element_certifiedAttributes 2

class EXTERN ASN1C_ETSI101733Stream_SignerAttribute_element;

struct EXTERN ASN1T_ETSI101733Stream_SignerAttribute_element : public ASN1TPDU {
   int t;
   union {
      /* t = 1 */
      ASN1T_ETSI101733Stream_ClaimedAttributes *claimedAttributes;
      /* t = 2 */
      ASN1T_ETSI101733Stream_CertifiedAttributes *certifiedAttributes;
   } u;
   ASN1T_ETSI101733Stream_SignerAttribute_element () { t = 0; memset (&u, 0, sizeof(u)); }
   ASN1T_ETSI101733Stream_SignerAttribute_element (ASN1C_ETSI101733Stream_SignerAttribute_element& srcData);
   ~ASN1T_ETSI101733Stream_SignerAttribute_element ();
} ;

class EXTERN ASN1C_ETSI101733Stream_SignerAttribute_element :
   public ASN1CType
{
protected:
   ASN1T_ETSI101733Stream_SignerAttribute_element& msgData;
public:
   ASN1C_ETSI101733Stream_SignerAttribute_element (ASN1T_ETSI101733Stream_SignerAttribute_element& data);
   ASN1C_ETSI101733Stream_SignerAttribute_element (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SignerAttribute_element& data);
   ASN1C_ETSI101733Stream_SignerAttribute_element (ASN1C_ETSI101733Stream_SignerAttribute_element& original);

   inline ASN1T_ETSI101733Stream_SignerAttribute_element& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SignerAttribute_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SignerAttribute_element* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SignerAttribute_element& getCopy (ASN1T_ETSI101733Stream_SignerAttribute_element* pDstData = 0);
   ASN1T_ETSI101733Stream_SignerAttribute_element* newCopy ();

   inline ASN1C_ETSI101733Stream_SignerAttribute_element& operator= (ASN1C_ETSI101733Stream_SignerAttribute_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1BSD_ETSI101733Stream_SignerAttribute_element (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SignerAttribute_element *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SignerAttribute_element
   (const char* name, ASN1T_ETSI101733Stream_SignerAttribute_element* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SignerAttribute_element
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignerAttribute_element* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SignerAttribute_element (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignerAttribute_element* pValue, ASN1T_ETSI101733Stream_SignerAttribute_element* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SignerAttribute_element (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignerAttribute_element* pSrcValue, ASN1T_ETSI101733Stream_SignerAttribute_element* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SignerAttribute_element
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignerAttribute_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignerAttribute                                           */
/*                                                            */
/**************************************************************/

/* List of ASN1T_ETSI101733Stream_SignerAttribute_element */
typedef struct EXTERN ASN1T_ETSI101733Stream_SignerAttribute : public ASN1TPDUSeqOfList {
   ~ASN1T_ETSI101733Stream_SignerAttribute();
} ASN1T_ETSI101733Stream_SignerAttribute;

class EXTERN ASN1C_ETSI101733Stream_SignerAttribute :
   public ASN1CSeqOfList
{
protected:
   ASN1T_ETSI101733Stream_SignerAttribute& msgData;
public:
   ASN1C_ETSI101733Stream_SignerAttribute (ASN1T_ETSI101733Stream_SignerAttribute& data);
   ASN1C_ETSI101733Stream_SignerAttribute (
      ASN1MessageBufferIF& msgBuf, ASN1T_ETSI101733Stream_SignerAttribute& data);
   ASN1C_ETSI101733Stream_SignerAttribute (ASN1C_ETSI101733Stream_SignerAttribute& original);

   inline ASN1T_ETSI101733Stream_SignerAttribute& getData () { return msgData; }
   inline const ASN1T_ETSI101733Stream_SignerAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int DecodeFrom (ASN1MessageBufferIF& msgBuf);

   void Print (const char* name);
   int toStream (const char* name);
   int setPrintStream(rtPrintCallback strmCallback, void * pStrmInfo );
   OSBOOL Equals (ASN1T_ETSI101733Stream_SignerAttribute* pCmpValue,
                  char* errBuff, int errBuffSize);
   ASN1T_ETSI101733Stream_SignerAttribute& getCopy (ASN1T_ETSI101733Stream_SignerAttribute* pDstData = 0);
   ASN1T_ETSI101733Stream_SignerAttribute* newCopy ();

   ASN1C_ETSI101733Stream_SignerAttribute& operator= (ASN1C_ETSI101733Stream_SignerAttribute& srcData);
   void Append (ASN1T_ETSI101733Stream_SignerAttribute_element *elem);
   ASN1T_ETSI101733Stream_SignerAttribute_element *NewElement ();
} ;

EXTERN int asn1BSD_ETSI101733Stream_SignerAttribute (ASN1CTXT* pctxt,
   ASN1T_ETSI101733Stream_SignerAttribute *pvalue, ASN1TagType tagging, int length);
EXTERN void asn1Print_ETSI101733Stream_SignerAttribute
   (const char* name, ASN1T_ETSI101733Stream_SignerAttribute* pvalue);

EXTERN int asn1PrtToStrm_ETSI101733Stream_SignerAttribute
   (ASN1CTXT *pctxt, ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignerAttribute* pvalue);

EXTERN OSBOOL asn1Compare_ETSI101733Stream_SignerAttribute (ASN1ConstCharPtr name, ASN1T_ETSI101733Stream_SignerAttribute* pValue, ASN1T_ETSI101733Stream_SignerAttribute* pCmpValue, char* errBuff, int errBuffSize);

EXTERN void asn1Copy_ETSI101733Stream_SignerAttribute (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignerAttribute* pSrcValue, ASN1T_ETSI101733Stream_SignerAttribute* pDstValue);

EXTERN void asn1Free_ETSI101733Stream_SignerAttribute
   (ASN1CTXT *pctxt, ASN1T_ETSI101733Stream_SignerAttribute* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_otherSigCert;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_sigPolicyId;
extern EXTERN ASN1OBJID ETSI101733Stream_id_spq_ets_uri;
extern EXTERN ASN1OBJID ETSI101733Stream_id_spq_ets_unotice;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_contentTimestamp;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_signatureTimeStampToken;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_certificateRefs;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_revocationRefs;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_certValues;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_revocationValues;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_escTimeStamp;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_certCRLTimestamp;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_archiveTimestamp;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_attrCertificateRefs;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_attrRevocationRefs;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_contentIdentifier;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_contentReference;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_contentHint;
extern EXTERN ASN1OBJID ETSI101733Stream_id_cti_ets_proofOfOrigin;
extern EXTERN ASN1OBJID ETSI101733Stream_id_cti_ets_proofOfReceipt;
extern EXTERN ASN1OBJID ETSI101733Stream_id_cti_ets_proofOfDelivery;
extern EXTERN ASN1OBJID ETSI101733Stream_id_cti_ets_proofOfSender;
extern EXTERN ASN1OBJID ETSI101733Stream_id_cti_ets_proofOfApproval;
extern EXTERN ASN1OBJID ETSI101733Stream_id_cti_ets_proofOfCreation;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_commitmentType;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_signerLocation;
extern EXTERN ASN1OBJID ETSI101733Stream_id_aa_ets_signerAttr;

#endif
