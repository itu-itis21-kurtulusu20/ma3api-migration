/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#ifndef PKIXQUALIFIED_H
#define PKIXQUALIFIED_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CGeneralizedTime.h"
#include "rtsrc/ASN1CSeqOfList.h"
#include "Implicit.h"
#include "Explicit.h"

/**
 * Header file for ASN.1 module PKIXqualified
 */
/**************************************************************/
/*                                                            */
/*  DateOfBirth                                               */
/*                                                            */
/**************************************************************/
/*
DateOfBirth ::= GeneralizedTime
*/
#define TV_PKIXQUAL_DateOfBirth	(TM_UNIV|TM_PRIM|24)

typedef const char* ASN1T_PKIXQUAL_DateOfBirth;

class EXTERN ASN1C_PKIXQUAL_DateOfBirth :
public ASN1CGeneralizedTime
{
protected:
   ASN1T_PKIXQUAL_DateOfBirth& msgData;
public:
   ASN1C_PKIXQUAL_DateOfBirth (ASN1T_PKIXQUAL_DateOfBirth& data);
   ASN1C_PKIXQUAL_DateOfBirth (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_DateOfBirth& data);
   ASN1C_PKIXQUAL_DateOfBirth (OSRTContext &context
      , ASN1T_PKIXQUAL_DateOfBirth& data);
   ASN1C_PKIXQUAL_DateOfBirth (ASN1C_PKIXQUAL_DateOfBirth& original);
   virtual ~ASN1C_PKIXQUAL_DateOfBirth () {}
   inline ASN1T_PKIXQUAL_DateOfBirth& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_DateOfBirth& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DateOfBirth");
   int toStream (const char* name = "DateOfBirth");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_DateOfBirth* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_DateOfBirth& getCopy (ASN1T_PKIXQUAL_DateOfBirth* pDstData = 0);
   ASN1T_PKIXQUAL_DateOfBirth* newCopy ();

   ASN1C_PKIXQUAL_DateOfBirth& operator= (ASN1C_PKIXQUAL_DateOfBirth& srcData);
} ;

EXTERN int asn1E_PKIXQUAL_DateOfBirth (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_DateOfBirth pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_DateOfBirth (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_DateOfBirth* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_DateOfBirth 
   (const char* name, const ASN1T_PKIXQUAL_DateOfBirth pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_DateOfBirth (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_DateOfBirth pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUAL_DateOfBirth (const char* name, 
   ASN1T_PKIXQUAL_DateOfBirth* pValue, ASN1T_PKIXQUAL_DateOfBirth* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_DateOfBirth (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_DateOfBirth pSrcValue, ASN1T_PKIXQUAL_DateOfBirth* pDstValue);

EXTERN void asn1Free_PKIXQUAL_DateOfBirth (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_DateOfBirth pvalue);

/**************************************************************/
/*                                                            */
/*  PlaceOfBirth                                              */
/*                                                            */
/**************************************************************/
/*
PlaceOfBirth ::= DirectoryString
*/
/* Choice context tags */

#define TVC_EXP_PlaceOfBirth_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_PlaceOfBirth_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_PlaceOfBirth_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_PlaceOfBirth_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_PlaceOfBirth_bmpString	(TM_UNIV|TM_PRIM|30)

class EXTERN ASN1C_PKIXQUAL_PlaceOfBirth;

typedef ASN1T_EXP_DirectoryString ASN1T_PKIXQUAL_PlaceOfBirth;

class EXTERN ASN1C_PKIXQUAL_PlaceOfBirth :
   public ASN1C_EXP_DirectoryString
{
protected:
public:
   ASN1C_PKIXQUAL_PlaceOfBirth (ASN1T_PKIXQUAL_PlaceOfBirth& data);
   ASN1C_PKIXQUAL_PlaceOfBirth (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_PlaceOfBirth& data);
   ASN1C_PKIXQUAL_PlaceOfBirth (OSRTContext &context
      , ASN1T_PKIXQUAL_PlaceOfBirth& data);
   ASN1C_PKIXQUAL_PlaceOfBirth (ASN1C_PKIXQUAL_PlaceOfBirth& original);
   virtual ~ASN1C_PKIXQUAL_PlaceOfBirth () {}
   inline ASN1T_PKIXQUAL_PlaceOfBirth& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_PlaceOfBirth& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PlaceOfBirth");
   int toStream (const char* name = "PlaceOfBirth");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_PlaceOfBirth* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_PlaceOfBirth& getCopy (ASN1T_PKIXQUAL_PlaceOfBirth* pDstData = 0);
   ASN1T_PKIXQUAL_PlaceOfBirth* newCopy ();

   inline ASN1C_PKIXQUAL_PlaceOfBirth& operator= (ASN1C_PKIXQUAL_PlaceOfBirth& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKIXQUAL_PlaceOfBirth (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_PlaceOfBirth *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_PlaceOfBirth (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_PlaceOfBirth 
   (const char* name, const ASN1T_PKIXQUAL_PlaceOfBirth* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_PlaceOfBirth (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_PlaceOfBirth* pvalue);

EXTERN ASN1T_PKIXQUAL_PlaceOfBirth* 
   new_ASN1T_PKIXQUAL_PlaceOfBirth (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKIXQUAL_PlaceOfBirth (const char* name, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pValue, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_PlaceOfBirth (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pSrcValue, ASN1T_PKIXQUAL_PlaceOfBirth*
    pDstValue);

EXTERN void asn1Init_PKIXQUAL_PlaceOfBirth (ASN1T_PKIXQUAL_PlaceOfBirth* pvalue);

EXTERN void asn1Free_PKIXQUAL_PlaceOfBirth (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_PlaceOfBirth* pvalue);

/**************************************************************/
/*                                                            */
/*  Gender                                                    */
/*                                                            */
/**************************************************************/
/*
Gender ::= PrintableString (SIZE (1))
*/
#define TV_PKIXQUAL_Gender	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_PKIXQUAL_Gender;

class EXTERN ASN1C_PKIXQUAL_Gender :
public ASN1CType
{
protected:
   ASN1T_PKIXQUAL_Gender& msgData;
public:
   ASN1C_PKIXQUAL_Gender (ASN1T_PKIXQUAL_Gender& data);
   ASN1C_PKIXQUAL_Gender (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_Gender& data);
   ASN1C_PKIXQUAL_Gender (OSRTContext &context, ASN1T_PKIXQUAL_Gender& data);
   ASN1C_PKIXQUAL_Gender (ASN1C_PKIXQUAL_Gender& original);
   virtual ~ASN1C_PKIXQUAL_Gender () {}
   inline ASN1T_PKIXQUAL_Gender& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_Gender& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Gender");
   int toStream (const char* name = "Gender");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_Gender* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_Gender& getCopy (ASN1T_PKIXQUAL_Gender* pDstData = 0);
   ASN1T_PKIXQUAL_Gender* newCopy ();

   inline ASN1C_PKIXQUAL_Gender& operator= (ASN1C_PKIXQUAL_Gender& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKIXQUAL_Gender (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_Gender pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_Gender (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_Gender* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_Gender 
   (const char* name, const ASN1T_PKIXQUAL_Gender pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_Gender (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_Gender pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUAL_Gender (const char* name, 
   ASN1T_PKIXQUAL_Gender* pValue, ASN1T_PKIXQUAL_Gender* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_Gender (OSCTXT* pctxt, ASN1T_PKIXQUAL_Gender pSrcValue, 
   ASN1T_PKIXQUAL_Gender* pDstValue);

EXTERN void asn1Free_PKIXQUAL_Gender (OSCTXT *pctxt, ASN1T_PKIXQUAL_Gender pvalue);

/**************************************************************/
/*                                                            */
/*  CountryOfCitizenship                                      */
/*                                                            */
/**************************************************************/
/*
CountryOfCitizenship ::= PrintableString (SIZE (2))
*/
#define TV_PKIXQUAL_CountryOfCitizenship	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_PKIXQUAL_CountryOfCitizenship;

class EXTERN ASN1C_PKIXQUAL_CountryOfCitizenship :
public ASN1CType
{
protected:
   ASN1T_PKIXQUAL_CountryOfCitizenship& msgData;
public:
   ASN1C_PKIXQUAL_CountryOfCitizenship
       (ASN1T_PKIXQUAL_CountryOfCitizenship& data);
   ASN1C_PKIXQUAL_CountryOfCitizenship (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_CountryOfCitizenship& data);
   ASN1C_PKIXQUAL_CountryOfCitizenship (OSRTContext &context
      , ASN1T_PKIXQUAL_CountryOfCitizenship& data);
   ASN1C_PKIXQUAL_CountryOfCitizenship (ASN1C_PKIXQUAL_CountryOfCitizenship& original);
   virtual ~ASN1C_PKIXQUAL_CountryOfCitizenship () {}
   inline ASN1T_PKIXQUAL_CountryOfCitizenship& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_CountryOfCitizenship& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CountryOfCitizenship");
   int toStream (const char* name = "CountryOfCitizenship");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_CountryOfCitizenship* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_CountryOfCitizenship& getCopy (ASN1T_PKIXQUAL_CountryOfCitizenship* pDstData = 0);
   ASN1T_PKIXQUAL_CountryOfCitizenship* newCopy ();

   inline ASN1C_PKIXQUAL_CountryOfCitizenship& operator= (ASN1C_PKIXQUAL_CountryOfCitizenship& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKIXQUAL_CountryOfCitizenship (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_CountryOfCitizenship pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_CountryOfCitizenship (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_CountryOfCitizenship* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKIXQUAL_CountryOfCitizenship 
   (const char* name, const ASN1T_PKIXQUAL_CountryOfCitizenship pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_CountryOfCitizenship (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_CountryOfCitizenship pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUAL_CountryOfCitizenship (const char* name, 
   ASN1T_PKIXQUAL_CountryOfCitizenship* pValue, 
   ASN1T_PKIXQUAL_CountryOfCitizenship* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_CountryOfCitizenship (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_CountryOfCitizenship pSrcValue, 
   ASN1T_PKIXQUAL_CountryOfCitizenship* pDstValue);

EXTERN void asn1Free_PKIXQUAL_CountryOfCitizenship (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_CountryOfCitizenship pvalue);

/**************************************************************/
/*                                                            */
/*  CountryOfResidence                                        */
/*                                                            */
/**************************************************************/
/*
CountryOfResidence ::= PrintableString (SIZE (2))
*/
#define TV_PKIXQUAL_CountryOfResidence	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_PKIXQUAL_CountryOfResidence;

class EXTERN ASN1C_PKIXQUAL_CountryOfResidence :
public ASN1CType
{
protected:
   ASN1T_PKIXQUAL_CountryOfResidence& msgData;
public:
   ASN1C_PKIXQUAL_CountryOfResidence (ASN1T_PKIXQUAL_CountryOfResidence& data);
   ASN1C_PKIXQUAL_CountryOfResidence (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_CountryOfResidence& data);
   ASN1C_PKIXQUAL_CountryOfResidence (OSRTContext &context
      , ASN1T_PKIXQUAL_CountryOfResidence& data);
   ASN1C_PKIXQUAL_CountryOfResidence (ASN1C_PKIXQUAL_CountryOfResidence& original);
   virtual ~ASN1C_PKIXQUAL_CountryOfResidence () {}
   inline ASN1T_PKIXQUAL_CountryOfResidence& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_CountryOfResidence& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CountryOfResidence");
   int toStream (const char* name = "CountryOfResidence");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_CountryOfResidence* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_CountryOfResidence& getCopy (ASN1T_PKIXQUAL_CountryOfResidence* pDstData = 0);
   ASN1T_PKIXQUAL_CountryOfResidence* newCopy ();

   inline ASN1C_PKIXQUAL_CountryOfResidence& operator= (ASN1C_PKIXQUAL_CountryOfResidence& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKIXQUAL_CountryOfResidence (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_CountryOfResidence pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_CountryOfResidence (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_CountryOfResidence* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_CountryOfResidence 
   (const char* name, const ASN1T_PKIXQUAL_CountryOfResidence pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_CountryOfResidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_CountryOfResidence pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUAL_CountryOfResidence (const char* name, 
   ASN1T_PKIXQUAL_CountryOfResidence* pValue, 
   ASN1T_PKIXQUAL_CountryOfResidence* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_CountryOfResidence (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_CountryOfResidence pSrcValue, 
   ASN1T_PKIXQUAL_CountryOfResidence* pDstValue);

EXTERN void asn1Free_PKIXQUAL_CountryOfResidence (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_CountryOfResidence pvalue);

/**************************************************************/
/*                                                            */
/*  PredefinedBiometricType                                   */
/*                                                            */
/**************************************************************/
/*
PredefinedBiometricType ::= INTEGER { picture(0), handwritten-signature(1) } (picture | handwritten-signature)
*/
#define TV_PKIXQUAL_PredefinedBiometricType	(TM_UNIV|TM_PRIM|2)

struct EXTERN PKIXQUAL_PredefinedBiometricType {
   enum Root {
      picture = 0,
      handwritten_signature = 1
   } ;
} ;

typedef OSUINT8 ASN1T_PKIXQUAL_PredefinedBiometricType;

class EXTERN ASN1C_PKIXQUAL_PredefinedBiometricType :
public ASN1CType
{
protected:
   ASN1T_PKIXQUAL_PredefinedBiometricType& msgData;
public:
   ASN1C_PKIXQUAL_PredefinedBiometricType
       (ASN1T_PKIXQUAL_PredefinedBiometricType& data);
   ASN1C_PKIXQUAL_PredefinedBiometricType (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_PredefinedBiometricType& data);
   ASN1C_PKIXQUAL_PredefinedBiometricType (OSRTContext &context
      , ASN1T_PKIXQUAL_PredefinedBiometricType& data);
   virtual ~ASN1C_PKIXQUAL_PredefinedBiometricType () {}
   inline ASN1T_PKIXQUAL_PredefinedBiometricType& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_PredefinedBiometricType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PredefinedBiometricType");
   int toStream (const char* name = "PredefinedBiometricType");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_PredefinedBiometricType* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_PKIXQUAL_PredefinedBiometricType (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_PredefinedBiometricType *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_PredefinedBiometricType (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_PredefinedBiometricType* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKIXQUAL_PredefinedBiometricType 
   (const char* name, const ASN1T_PKIXQUAL_PredefinedBiometricType* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_PredefinedBiometricType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_PredefinedBiometricType* pvalue);

EXTERN ASN1T_PKIXQUAL_PredefinedBiometricType* 
   new_ASN1T_PKIXQUAL_PredefinedBiometricType (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKIXQUAL_PredefinedBiometricType (const char* name, 
   ASN1T_PKIXQUAL_PredefinedBiometricType* pValue, 
   ASN1T_PKIXQUAL_PredefinedBiometricType* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  TypeOfBiometricData                                       */
/*                                                            */
/**************************************************************/
/*
TypeOfBiometricData ::= CHOICE {
   predefinedBiometricType PredefinedBiometricType,
   biometricDataOid OBJECT IDENTIFIER
}
*/
/* Choice context tags */

#define TVC_PKIXQUAL_TypeOfBiometricData_predefinedBiometricType	(TM_UNIV|TM_PRIM|2)
#define TVC_PKIXQUAL_TypeOfBiometricData_biometricDataOid	(TM_UNIV|TM_PRIM|6)

/* Choice tag constants */

#define T_PKIXQUAL_TypeOfBiometricData_predefinedBiometricType 1
#define T_PKIXQUAL_TypeOfBiometricData_biometricDataOid 2

class EXTERN ASN1C_PKIXQUAL_TypeOfBiometricData;

struct EXTERN ASN1T_PKIXQUAL_TypeOfBiometricData : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_PKIXQUAL_PredefinedBiometricType predefinedBiometricType;
      /* t = 2 */
      ASN1TObjId *biometricDataOid;
   } u;
   ASN1T_PKIXQUAL_TypeOfBiometricData () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_PKIXQUAL_TypeOfBiometricData (ASN1C_PKIXQUAL_TypeOfBiometricData& srcData);
   ~ASN1T_PKIXQUAL_TypeOfBiometricData ();
} ;

class EXTERN ASN1C_PKIXQUAL_TypeOfBiometricData :
public ASN1CType
{
protected:
   ASN1T_PKIXQUAL_TypeOfBiometricData& msgData;
public:
   ASN1C_PKIXQUAL_TypeOfBiometricData
       (ASN1T_PKIXQUAL_TypeOfBiometricData& data);
   ASN1C_PKIXQUAL_TypeOfBiometricData (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_TypeOfBiometricData& data);
   ASN1C_PKIXQUAL_TypeOfBiometricData (OSRTContext &context
      , ASN1T_PKIXQUAL_TypeOfBiometricData& data);
   ASN1C_PKIXQUAL_TypeOfBiometricData (ASN1C_PKIXQUAL_TypeOfBiometricData& original);
   virtual ~ASN1C_PKIXQUAL_TypeOfBiometricData () {}
   inline ASN1T_PKIXQUAL_TypeOfBiometricData& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_TypeOfBiometricData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TypeOfBiometricData");
   int toStream (const char* name = "TypeOfBiometricData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_TypeOfBiometricData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_TypeOfBiometricData& getCopy (ASN1T_PKIXQUAL_TypeOfBiometricData* pDstData = 0);
   ASN1T_PKIXQUAL_TypeOfBiometricData* newCopy ();

   inline ASN1C_PKIXQUAL_TypeOfBiometricData& operator= (ASN1C_PKIXQUAL_TypeOfBiometricData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKIXQUAL_TypeOfBiometricData (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_TypeOfBiometricData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_TypeOfBiometricData (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_TypeOfBiometricData 
   (const char* name, const ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_TypeOfBiometricData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue);

EXTERN ASN1T_PKIXQUAL_TypeOfBiometricData* 
   new_ASN1T_PKIXQUAL_TypeOfBiometricData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKIXQUAL_TypeOfBiometricData (const char* name, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pValue, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_TypeOfBiometricData (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pSrcValue, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pDstValue);

EXTERN void asn1Init_PKIXQUAL_TypeOfBiometricData (
   ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue);

EXTERN void asn1Free_PKIXQUAL_TypeOfBiometricData (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_TypeOfBiometricData* pvalue);

/**************************************************************/
/*                                                            */
/*  BiometricData                                             */
/*                                                            */
/**************************************************************/
/*
BiometricData ::= SEQUENCE {
   typeOfBiometricData TypeOfBiometricData,
   hashAlgorithm AlgorithmIdentifier,
   biometricDataHash OCTET STRING,
   sourceDataUri IA5String OPTIONAL
}
*/
#define TV_PKIXQUAL_BiometricData	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKIXQUAL_BiometricData;

struct EXTERN ASN1T_PKIXQUAL_BiometricData : public ASN1TPDU {
   struct {
      unsigned sourceDataUriPresent : 1;
   } m;
   ASN1T_PKIXQUAL_TypeOfBiometricData typeOfBiometricData;
   ASN1T_EXP_AlgorithmIdentifier hashAlgorithm;
   ASN1TDynOctStr biometricDataHash;
   const char* sourceDataUri;
   ASN1T_PKIXQUAL_BiometricData ();
   ASN1T_PKIXQUAL_BiometricData (ASN1C_PKIXQUAL_BiometricData& srcData);
   ~ASN1T_PKIXQUAL_BiometricData ();
} ;

class EXTERN ASN1C_PKIXQUAL_BiometricData :
public ASN1CType
{
protected:
   ASN1T_PKIXQUAL_BiometricData& msgData;
public:
   ASN1C_PKIXQUAL_BiometricData (ASN1T_PKIXQUAL_BiometricData& data);
   ASN1C_PKIXQUAL_BiometricData (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_BiometricData& data);
   ASN1C_PKIXQUAL_BiometricData (OSRTContext &context
      , ASN1T_PKIXQUAL_BiometricData& data);
   ASN1C_PKIXQUAL_BiometricData (ASN1C_PKIXQUAL_BiometricData& original);
   virtual ~ASN1C_PKIXQUAL_BiometricData () {}
   inline ASN1T_PKIXQUAL_BiometricData& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_BiometricData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BiometricData");
   int toStream (const char* name = "BiometricData");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_BiometricData* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_BiometricData& getCopy (ASN1T_PKIXQUAL_BiometricData* pDstData = 0);
   ASN1T_PKIXQUAL_BiometricData* newCopy ();

   inline ASN1C_PKIXQUAL_BiometricData& operator= (ASN1C_PKIXQUAL_BiometricData& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKIXQUAL_BiometricData (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_BiometricData *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_BiometricData (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_BiometricData* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_BiometricData 
   (const char* name, const ASN1T_PKIXQUAL_BiometricData* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_BiometricData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_BiometricData* pvalue);

EXTERN ASN1T_PKIXQUAL_BiometricData* 
   new_ASN1T_PKIXQUAL_BiometricData (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKIXQUAL_BiometricData (const char* name, 
   ASN1T_PKIXQUAL_BiometricData* pValue, 
   ASN1T_PKIXQUAL_BiometricData* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_BiometricData (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_BiometricData* pSrcValue, ASN1T_PKIXQUAL_BiometricData*
    pDstValue);

EXTERN void asn1Init_PKIXQUAL_BiometricData (ASN1T_PKIXQUAL_BiometricData* pvalue);

EXTERN void asn1Free_PKIXQUAL_BiometricData (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_BiometricData* pvalue);

/**************************************************************/
/*                                                            */
/*  BiometricSyntax                                           */
/*                                                            */
/**************************************************************/
/*
BiometricSyntax ::= SEQUENCE OF BiometricData
*/
#define TV_PKIXQUAL_BiometricSyntax	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKIXQUAL_BiometricSyntax;

/* List of ASN1T_PKIXQUAL_BiometricData */
typedef struct EXTERN ASN1T_PKIXQUAL_BiometricSyntax : public ASN1TPDUSeqOfList {
   ~ASN1T_PKIXQUAL_BiometricSyntax();
} ASN1T_PKIXQUAL_BiometricSyntax;

class EXTERN ASN1C_PKIXQUAL_BiometricSyntax :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKIXQUAL_BiometricSyntax& msgData;
public:
   ASN1C_PKIXQUAL_BiometricSyntax (ASN1T_PKIXQUAL_BiometricSyntax& data);
   ASN1C_PKIXQUAL_BiometricSyntax (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_BiometricSyntax& data);
   ASN1C_PKIXQUAL_BiometricSyntax (ASN1CType& ccobj
      , ASN1T_PKIXQUAL_BiometricSyntax& data);
   ASN1C_PKIXQUAL_BiometricSyntax (OSRTContext &context
      , ASN1T_PKIXQUAL_BiometricSyntax& data);
   ASN1C_PKIXQUAL_BiometricSyntax (ASN1C_PKIXQUAL_BiometricSyntax& original);
   virtual ~ASN1C_PKIXQUAL_BiometricSyntax () {}
   inline ASN1T_PKIXQUAL_BiometricSyntax& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_BiometricSyntax& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BiometricSyntax");
   int toStream (const char* name = "BiometricSyntax");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_BiometricSyntax* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_BiometricSyntax& getCopy (ASN1T_PKIXQUAL_BiometricSyntax* pDstData = 0);
   ASN1T_PKIXQUAL_BiometricSyntax* newCopy ();

   ASN1C_PKIXQUAL_BiometricSyntax& operator= (ASN1C_PKIXQUAL_BiometricSyntax& srcData);
   void Append (ASN1T_PKIXQUAL_BiometricData* elem);
   ASN1T_PKIXQUAL_BiometricData* NewElement ();
   ASN1T_PKIXQUAL_BiometricData* AppendNewElement ();
} ;

EXTERN int asn1E_PKIXQUAL_BiometricSyntax (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_BiometricSyntax *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_BiometricSyntax (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_BiometricSyntax* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_BiometricSyntax 
   (const char* name, const ASN1T_PKIXQUAL_BiometricSyntax* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_BiometricSyntax (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_BiometricSyntax* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUAL_BiometricSyntax (const char* name, 
   ASN1T_PKIXQUAL_BiometricSyntax* pValue, 
   ASN1T_PKIXQUAL_BiometricSyntax* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_BiometricSyntax (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_BiometricSyntax* pSrcValue, ASN1T_PKIXQUAL_BiometricSyntax*
    pDstValue);

EXTERN void asn1Init_PKIXQUAL_BiometricSyntax (ASN1T_PKIXQUAL_BiometricSyntax* pvalue);

EXTERN void asn1Free_PKIXQUAL_BiometricSyntax (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_BiometricSyntax* pvalue);

/**************************************************************/
/*                                                            */
/*  QCStatement                                               */
/*                                                            */
/**************************************************************/
/*
QCStatement ::= SEQUENCE {
   statementId OBJECT IDENTIFIER,
   statementInfo ANY OPTIONAL
}
*/
#define TV_PKIXQUAL_QCStatement	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKIXQUAL_QCStatement;

struct EXTERN ASN1T_PKIXQUAL_QCStatement : public ASN1TPDU {
   struct {
      unsigned statementInfoPresent : 1;
   } m;
   ASN1TObjId statementId;
   ASN1TOpenType statementInfo;
   ASN1T_PKIXQUAL_QCStatement ();
   ASN1T_PKIXQUAL_QCStatement (ASN1C_PKIXQUAL_QCStatement& srcData);
   ~ASN1T_PKIXQUAL_QCStatement ();
} ;

class EXTERN ASN1C_PKIXQUAL_QCStatement :
public ASN1CType
{
protected:
   ASN1T_PKIXQUAL_QCStatement& msgData;
public:
   ASN1C_PKIXQUAL_QCStatement (ASN1T_PKIXQUAL_QCStatement& data);
   ASN1C_PKIXQUAL_QCStatement (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_QCStatement& data);
   ASN1C_PKIXQUAL_QCStatement (OSRTContext &context
      , ASN1T_PKIXQUAL_QCStatement& data);
   ASN1C_PKIXQUAL_QCStatement (ASN1C_PKIXQUAL_QCStatement& original);
   virtual ~ASN1C_PKIXQUAL_QCStatement () {}
   inline ASN1T_PKIXQUAL_QCStatement& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_QCStatement& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "QCStatement");
   int toStream (const char* name = "QCStatement");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_QCStatement* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_QCStatement& getCopy (ASN1T_PKIXQUAL_QCStatement* pDstData = 0);
   ASN1T_PKIXQUAL_QCStatement* newCopy ();

   inline ASN1C_PKIXQUAL_QCStatement& operator= (ASN1C_PKIXQUAL_QCStatement& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKIXQUAL_QCStatement (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_QCStatement *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_QCStatement (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_QCStatement* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_QCStatement 
   (const char* name, const ASN1T_PKIXQUAL_QCStatement* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_QCStatement (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_QCStatement* pvalue);

EXTERN ASN1T_PKIXQUAL_QCStatement* 
   new_ASN1T_PKIXQUAL_QCStatement (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKIXQUAL_QCStatement (const char* name, 
   ASN1T_PKIXQUAL_QCStatement* pValue, ASN1T_PKIXQUAL_QCStatement* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_QCStatement (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_QCStatement* pSrcValue, ASN1T_PKIXQUAL_QCStatement*
    pDstValue);

EXTERN void asn1Init_PKIXQUAL_QCStatement (ASN1T_PKIXQUAL_QCStatement* pvalue);

EXTERN void asn1Free_PKIXQUAL_QCStatement (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_QCStatement* pvalue);

/**************************************************************/
/*                                                            */
/*  QCStatements                                              */
/*                                                            */
/**************************************************************/
/*
QCStatements ::= SEQUENCE OF QCStatement
*/
#define TV_PKIXQUAL_QCStatements	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKIXQUAL_QCStatements;

/* List of ASN1T_PKIXQUAL_QCStatement */
typedef struct EXTERN ASN1T_PKIXQUAL_QCStatements : public ASN1TPDUSeqOfList {
   ~ASN1T_PKIXQUAL_QCStatements();
} ASN1T_PKIXQUAL_QCStatements;

class EXTERN ASN1C_PKIXQUAL_QCStatements :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKIXQUAL_QCStatements& msgData;
public:
   ASN1C_PKIXQUAL_QCStatements (ASN1T_PKIXQUAL_QCStatements& data);
   ASN1C_PKIXQUAL_QCStatements (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_QCStatements& data);
   ASN1C_PKIXQUAL_QCStatements (ASN1CType& ccobj
      , ASN1T_PKIXQUAL_QCStatements& data);
   ASN1C_PKIXQUAL_QCStatements (OSRTContext &context
      , ASN1T_PKIXQUAL_QCStatements& data);
   ASN1C_PKIXQUAL_QCStatements (ASN1C_PKIXQUAL_QCStatements& original);
   virtual ~ASN1C_PKIXQUAL_QCStatements () {}
   inline ASN1T_PKIXQUAL_QCStatements& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_QCStatements& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "QCStatements");
   int toStream (const char* name = "QCStatements");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_QCStatements* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_QCStatements& getCopy (ASN1T_PKIXQUAL_QCStatements* pDstData = 0);
   ASN1T_PKIXQUAL_QCStatements* newCopy ();

   ASN1C_PKIXQUAL_QCStatements& operator= (ASN1C_PKIXQUAL_QCStatements& srcData);
   void Append (ASN1T_PKIXQUAL_QCStatement* elem);
   ASN1T_PKIXQUAL_QCStatement* NewElement ();
   ASN1T_PKIXQUAL_QCStatement* AppendNewElement ();
} ;

EXTERN int asn1E_PKIXQUAL_QCStatements (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_QCStatements *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_QCStatements (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_QCStatements* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKIXQUAL_QCStatements 
   (const char* name, const ASN1T_PKIXQUAL_QCStatements* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_QCStatements (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_QCStatements* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUAL_QCStatements (const char* name, 
   ASN1T_PKIXQUAL_QCStatements* pValue, 
   ASN1T_PKIXQUAL_QCStatements* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_QCStatements (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_QCStatements* pSrcValue, ASN1T_PKIXQUAL_QCStatements*
    pDstValue);

EXTERN void asn1Init_PKIXQUAL_QCStatements (ASN1T_PKIXQUAL_QCStatements* pvalue);

EXTERN void asn1Free_PKIXQUAL_QCStatements (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_QCStatements* pvalue);

/**************************************************************/
/*                                                            */
/*  NameRegistrationAuthorities                               */
/*                                                            */
/**************************************************************/
/*
 At least one field shall be present

NameRegistrationAuthorities ::= SEQUENCE (SIZE (1..MAX)) OF GeneralName
*/
#define TV_PKIXQUAL_NameRegistrationAuthorities	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKIXQUAL_NameRegistrationAuthorities;

/* List of ASN1T_IMP_GeneralName */
typedef struct EXTERN ASN1T_PKIXQUAL_NameRegistrationAuthorities : public ASN1TPDUSeqOfList {
   ~ASN1T_PKIXQUAL_NameRegistrationAuthorities();
} ASN1T_PKIXQUAL_NameRegistrationAuthorities;

class EXTERN ASN1C_PKIXQUAL_NameRegistrationAuthorities :
public ASN1CSeqOfList
{
protected:
   ASN1T_PKIXQUAL_NameRegistrationAuthorities& msgData;
public:
   ASN1C_PKIXQUAL_NameRegistrationAuthorities
       (ASN1T_PKIXQUAL_NameRegistrationAuthorities& data);
   ASN1C_PKIXQUAL_NameRegistrationAuthorities (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_NameRegistrationAuthorities& data);
   ASN1C_PKIXQUAL_NameRegistrationAuthorities (ASN1CType& ccobj
      , ASN1T_PKIXQUAL_NameRegistrationAuthorities& data);
   ASN1C_PKIXQUAL_NameRegistrationAuthorities (OSRTContext &context
      , ASN1T_PKIXQUAL_NameRegistrationAuthorities& data);
   ASN1C_PKIXQUAL_NameRegistrationAuthorities (ASN1C_PKIXQUAL_NameRegistrationAuthorities& original);
   virtual ~ASN1C_PKIXQUAL_NameRegistrationAuthorities () {}
   inline ASN1T_PKIXQUAL_NameRegistrationAuthorities& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_NameRegistrationAuthorities& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NameRegistrationAuthorities");
   int toStream (const char* name = "NameRegistrationAuthorities");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_NameRegistrationAuthorities* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_NameRegistrationAuthorities& getCopy (ASN1T_PKIXQUAL_NameRegistrationAuthorities* pDstData = 0);
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* newCopy ();

   ASN1C_PKIXQUAL_NameRegistrationAuthorities& operator= (ASN1C_PKIXQUAL_NameRegistrationAuthorities& srcData);
   void Append (ASN1T_IMP_GeneralName* elem);
   ASN1T_IMP_GeneralName* NewElement ();
   ASN1T_IMP_GeneralName* AppendNewElement ();
} ;

EXTERN int asn1E_PKIXQUAL_NameRegistrationAuthorities (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_NameRegistrationAuthorities *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_NameRegistrationAuthorities (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKIXQUAL_NameRegistrationAuthorities 
   (const char* name, const ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_NameRegistrationAuthorities (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue);

EXTERN OSBOOL asn1Compare_PKIXQUAL_NameRegistrationAuthorities (const char* name, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pValue, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_NameRegistrationAuthorities (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pSrcValue, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pDstValue);

EXTERN void asn1Init_PKIXQUAL_NameRegistrationAuthorities (
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue);

EXTERN void asn1Free_PKIXQUAL_NameRegistrationAuthorities (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_NameRegistrationAuthorities* pvalue);

/**************************************************************/
/*                                                            */
/*  SemanticsInformation                                      */
/*                                                            */
/**************************************************************/
/*
  This statement identifies conformance with requirements
  defined in this Qualified Certificate profile
  (Version 2). This statement may optionally contain
  additional semantics information as specified below.

SemanticsInformation ::= SEQUENCE {
   semanticsIndentifier OBJECT IDENTIFIER OPTIONAL,
   nameRegistrationAuthorities NameRegistrationAuthorities OPTIONAL
}
*/
#define TV_PKIXQUAL_SemanticsInformation	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKIXQUAL_SemanticsInformation;

struct EXTERN ASN1T_PKIXQUAL_SemanticsInformation : public ASN1TPDU {
   struct {
      unsigned semanticsIndentifierPresent : 1;
      unsigned nameRegistrationAuthoritiesPresent : 1;
   } m;
   ASN1TObjId semanticsIndentifier;
   ASN1T_PKIXQUAL_NameRegistrationAuthorities nameRegistrationAuthorities;
   ASN1T_PKIXQUAL_SemanticsInformation ();
   ASN1T_PKIXQUAL_SemanticsInformation (ASN1C_PKIXQUAL_SemanticsInformation& srcData);
   ~ASN1T_PKIXQUAL_SemanticsInformation ();
} ;

class EXTERN ASN1C_PKIXQUAL_SemanticsInformation :
public ASN1CType
{
protected:
   ASN1T_PKIXQUAL_SemanticsInformation& msgData;
public:
   ASN1C_PKIXQUAL_SemanticsInformation
       (ASN1T_PKIXQUAL_SemanticsInformation& data);
   ASN1C_PKIXQUAL_SemanticsInformation (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKIXQUAL_SemanticsInformation& data);
   ASN1C_PKIXQUAL_SemanticsInformation (OSRTContext &context
      , ASN1T_PKIXQUAL_SemanticsInformation& data);
   ASN1C_PKIXQUAL_SemanticsInformation (ASN1C_PKIXQUAL_SemanticsInformation& original);
   virtual ~ASN1C_PKIXQUAL_SemanticsInformation () {}
   inline ASN1T_PKIXQUAL_SemanticsInformation& getData () { return msgData; }
   inline const ASN1T_PKIXQUAL_SemanticsInformation& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SemanticsInformation");
   int toStream (const char* name = "SemanticsInformation");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKIXQUAL_SemanticsInformation* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKIXQUAL_SemanticsInformation& getCopy (ASN1T_PKIXQUAL_SemanticsInformation* pDstData = 0);
   ASN1T_PKIXQUAL_SemanticsInformation* newCopy ();

   inline ASN1C_PKIXQUAL_SemanticsInformation& operator= (ASN1C_PKIXQUAL_SemanticsInformation& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKIXQUAL_SemanticsInformation (OSCTXT* pctxt,
   ASN1T_PKIXQUAL_SemanticsInformation *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKIXQUAL_SemanticsInformation (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_SemanticsInformation* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKIXQUAL_SemanticsInformation 
   (const char* name, const ASN1T_PKIXQUAL_SemanticsInformation* pvalue);

EXTERN int asn1PrtToStrm_PKIXQUAL_SemanticsInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKIXQUAL_SemanticsInformation* pvalue);

EXTERN ASN1T_PKIXQUAL_SemanticsInformation* 
   new_ASN1T_PKIXQUAL_SemanticsInformation (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKIXQUAL_SemanticsInformation (const char* name, 
   ASN1T_PKIXQUAL_SemanticsInformation* pValue, 
   ASN1T_PKIXQUAL_SemanticsInformation* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKIXQUAL_SemanticsInformation (OSCTXT* pctxt, 
   ASN1T_PKIXQUAL_SemanticsInformation* pSrcValue, 
   ASN1T_PKIXQUAL_SemanticsInformation* pDstValue);

EXTERN void asn1Init_PKIXQUAL_SemanticsInformation (
   ASN1T_PKIXQUAL_SemanticsInformation* pvalue);

EXTERN void asn1Free_PKIXQUAL_SemanticsInformation (OSCTXT *pctxt, 
   ASN1T_PKIXQUAL_SemanticsInformation* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID PKIXQUAL_id_pda;
extern EXTERN ASN1OBJID PKIXQUAL_id_qcs;
extern EXTERN ASN1OBJID PKIXQUAL_id_pda_dateOfBirth;
extern EXTERN ASN1OBJID PKIXQUAL_id_pda_placeOfBirth;
extern EXTERN ASN1OBJID PKIXQUAL_id_pda_gender;
extern EXTERN ASN1OBJID PKIXQUAL_id_pda_countryOfCitizenship;
extern EXTERN ASN1OBJID PKIXQUAL_id_pda_countryOfResidence;
extern EXTERN ASN1OBJID PKIXQUAL_id_pe_biometricInfo;
extern EXTERN ASN1OBJID PKIXQUAL_id_pe_qcStatements;
extern EXTERN ASN1OBJID PKIXQUAL_id_qcs_pkixQCSyntax_v1;
extern EXTERN ASN1OBJID PKIXQUAL_id_qcs_pkixQCSyntax_v2;

#endif
