/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "Explicit.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_EXP_Version (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Version* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 0: rtxStrcat (namebuf, 512, "v1\n");break;
         case 1: rtxStrcat (namebuf, 512, "v2\n");break;
         case 2: rtxStrcat (namebuf, 512, "v3\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_EXP_Version::toStream (const char* name)

{
   asn1PrtToStrm_EXP_Version (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_Version::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_CertificateSerialNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_CertificateSerialNumber* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, *pvalue);
   return 0;
}

int ASN1C_EXP_CertificateSerialNumber::toStream (const char* name)

{
   asn1PrtToStrm_EXP_CertificateSerialNumber (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_CertificateSerialNumber::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_AttributeType (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AttributeType* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, name, (ASN1OBJID*)pvalue);
   return 0;
}

int ASN1C_EXP_AttributeType::toStream (const char* name)

{
   asn1PrtToStrm_EXP_AttributeType (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_AttributeType::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_AttributeValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AttributeValue* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, name,
      pvalue->numocts, pvalue->data);
   return 0;
}

int ASN1C_EXP_AttributeValue::toStream (const char* name)

{
   asn1PrtToStrm_EXP_AttributeValue (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_AttributeValue::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_UniqueIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_UniqueIdentifier* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, name, pvalue->numbits, pvalue->data);
   return 0;
}

int ASN1C_EXP_UniqueIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_EXP_UniqueIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_UniqueIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X121Address (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X121Address pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_X121Address::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X121Address (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_X121Address::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_NetworkAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_NetworkAddress pvalue)
{
   asn1PrtToStrm_EXP_X121Address (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_NetworkAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_NetworkAddress (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_NetworkAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TerminalIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TerminalIdentifier pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_TerminalIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TerminalIdentifier (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_TerminalIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_OrganizationName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_OrganizationName pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_OrganizationName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_OrganizationName (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_OrganizationName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_NumericUserIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_NumericUserIdentifier pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_NumericUserIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_EXP_NumericUserIdentifier (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_NumericUserIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_OrganizationalUnitName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_OrganizationalUnitName pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_OrganizationalUnitName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_OrganizationalUnitName (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_OrganizationalUnitName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_CommonName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_CommonName pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_CommonName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_CommonName (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_CommonName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TeletexCommonName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexCommonName pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_TeletexCommonName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TeletexCommonName (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_TeletexCommonName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TeletexOrganizationName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexOrganizationName pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_TeletexOrganizationName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TeletexOrganizationName (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_TeletexOrganizationName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TeletexOrganizationalUnitName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexOrganizationalUnitName pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_TeletexOrganizationalUnitName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TeletexOrganizationalUnitName (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_TeletexOrganizationalUnitName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PDSName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PDSName pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_PDSName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PDSName (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_PDSName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PDSParameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PDSParameter* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.printable_stringPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "printable_string", pvalue->printable_string);
   }

   if (pvalue->m.teletex_stringPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "teletex_string", pvalue->teletex_string);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_PDSParameter::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PDSParameter (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PDSParameter::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PhysicalDeliveryOfficeName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryOfficeName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PhysicalDeliveryOfficeName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryOfficeName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PhysicalDeliveryOfficeNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryOfficeNumber::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PhysicalDeliveryOfficeNumber (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryOfficeNumber::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_ExtensionORAddressComponents (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtensionORAddressComponents* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_ExtensionORAddressComponents::toStream (const char* name)

{
   asn1PrtToStrm_EXP_ExtensionORAddressComponents (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_ExtensionORAddressComponents::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PhysicalDeliveryPersonalName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryPersonalName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PhysicalDeliveryPersonalName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryPersonalName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PhysicalDeliveryOrganizationName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryOrganizationName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PhysicalDeliveryOrganizationName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryOrganizationName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_ExtensionPhysicalDeliveryAddressComponents (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::toStream (const char* name)

{
   asn1PrtToStrm_EXP_ExtensionPhysicalDeliveryAddressComponents (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_StreetAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_StreetAddress* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_StreetAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_StreetAddress (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_StreetAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PostOfficeBoxAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PostOfficeBoxAddress* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_PostOfficeBoxAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PostOfficeBoxAddress (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PostOfficeBoxAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PosteRestanteAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PosteRestanteAddress* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_PosteRestanteAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PosteRestanteAddress (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PosteRestanteAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_UniquePostalName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_UniquePostalName* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_UniquePostalName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_UniquePostalName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_UniquePostalName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_LocalPostalAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_LocalPostalAttributes* pvalue)
{
   asn1PrtToStrm_EXP_PDSParameter (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_LocalPostalAttributes::toStream (const char* name)

{
   asn1PrtToStrm_EXP_LocalPostalAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_LocalPostalAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TerminalType (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TerminalType* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 3: rtxStrcat (namebuf, 512, "telex\n");break;
         case 4: rtxStrcat (namebuf, 512, "teletex\n");break;
         case 5: rtxStrcat (namebuf, 512, "g3-facsimile\n");break;
         case 6: rtxStrcat (namebuf, 512, "g4-facsimile\n");break;
         case 7: rtxStrcat (namebuf, 512, "ia5-terminal\n");break;
         case 8: rtxStrcat (namebuf, 512, "videotex\n");break;
         default:
            rtPrintToStreamUnsigned (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_EXP_TerminalType::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TerminalType (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_TerminalType::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520countryName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520countryName pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_X520countryName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520countryName (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_X520countryName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520SerialNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520SerialNumber pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_X520SerialNumber::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520SerialNumber (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_X520SerialNumber::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_DomainComponent (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_DomainComponent pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_DomainComponent::toStream (const char* name)

{
   asn1PrtToStrm_EXP_DomainComponent (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_DomainComponent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_EmailAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_EmailAddress pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, name, pvalue);
   return 0;
}

int ASN1C_EXP_EmailAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_EmailAddress (getCtxtPtr(), name, msgData);
   return 0;
}

int ASN1C_EXP_EmailAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_AlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AlgorithmIdentifier* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "algorithm", (ASN1OBJID*)&pvalue->algorithm);

   if (pvalue->m.parametersPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "parameters",
         pvalue->parameters.numocts, pvalue->parameters.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_AlgorithmIdentifier::toStream (const char* name)

{
   asn1PrtToStrm_EXP_AlgorithmIdentifier (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_AlgorithmIdentifier::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_AttributeTypeAndValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AttributeTypeAndValue* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AttributeType (pctxt, "type", &pvalue->type);

   asn1PrtToStrm_EXP_AttributeValue (pctxt, "value", &pvalue->value);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_AttributeTypeAndValue::toStream (const char* name)

{
   asn1PrtToStrm_EXP_AttributeTypeAndValue (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_AttributeTypeAndValue::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_RelativeDistinguishedName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_RelativeDistinguishedName* pvalue)
{
   ASN1T_EXP_AttributeTypeAndValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_AttributeTypeAndValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_AttributeTypeAndValue (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_RelativeDistinguishedName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_RelativeDistinguishedName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_RelativeDistinguishedName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_RDNSequence (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_RDNSequence* pvalue)
{
   ASN1T_EXP_RelativeDistinguishedName* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_RelativeDistinguishedName*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_RelativeDistinguishedName (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_RDNSequence::toStream (const char* name)

{
   asn1PrtToStrm_EXP_RDNSequence (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_RDNSequence::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_Name (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Name* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* rdnSequence */
      case 1:
      {
         asn1PrtToStrm_EXP_RDNSequence (pctxt, "rdnSequence", pvalue->u.rdnSequence);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_Name::toStream (const char* name)

{
   asn1PrtToStrm_EXP_Name (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_Name::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_Time (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Time* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utcTime */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "utcTime", pvalue->u.utcTime);
         break;
      }
      /* generalTime */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "generalTime", pvalue->u.generalTime);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_Time::toStream (const char* name)

{
   asn1PrtToStrm_EXP_Time (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_Time::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_Validity (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Validity* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_Time (pctxt, "notBefore", &pvalue->notBefore);

   asn1PrtToStrm_EXP_Time (pctxt, "notAfter", &pvalue->notAfter);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_Validity::toStream (const char* name)

{
   asn1PrtToStrm_EXP_Validity (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_Validity::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_SubjectPublicKeyInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_SubjectPublicKeyInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "algorithm", &pvalue->algorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, "subjectPublicKey", pvalue->subjectPublicKey.numbits, pvalue->subjectPublicKey.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_SubjectPublicKeyInfo::toStream (const char* name)

{
   asn1PrtToStrm_EXP_SubjectPublicKeyInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_SubjectPublicKeyInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_Extension (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Extension* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "extnID", (ASN1OBJID*)&pvalue->extnID);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBoolean (pctxt, "critical", pvalue->critical);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "extnValue", pvalue->extnValue.numocts, pvalue->extnValue.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_Extension::toStream (const char* name)

{
   asn1PrtToStrm_EXP_Extension (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_Extension::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_Extensions (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Extensions* pvalue)
{
   ASN1T_EXP_Extension* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_Extension*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_Extension (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_Extensions::toStream (const char* name)

{
   asn1PrtToStrm_EXP_Extensions (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_Extensions::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TBSCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TBSCertificate* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_Version (pctxt, "version", &pvalue->version);

   asn1PrtToStrm_EXP_CertificateSerialNumber (pctxt, "serialNumber", &pvalue->serialNumber);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "signature_", &pvalue->signature_);

   asn1PrtToStrm_EXP_Name (pctxt, "issuer", &pvalue->issuer);

   asn1PrtToStrm_EXP_Validity (pctxt, "validity", &pvalue->validity);

   asn1PrtToStrm_EXP_Name (pctxt, "subject", &pvalue->subject);

   asn1PrtToStrm_EXP_SubjectPublicKeyInfo (pctxt, "subjectPublicKeyInfo", &pvalue->subjectPublicKeyInfo);

   if (pvalue->m.issuerUniqueIDPresent) {
      asn1PrtToStrm_EXP_UniqueIdentifier (pctxt, "issuerUniqueID", &pvalue->issuerUniqueID);
   }

   if (pvalue->m.subjectUniqueIDPresent) {
      asn1PrtToStrm_EXP_UniqueIdentifier (pctxt, "subjectUniqueID", &pvalue->subjectUniqueID);
   }

   if (pvalue->m.extensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "extensions", &pvalue->extensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_TBSCertificate::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TBSCertificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_TBSCertificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_Certificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Certificate* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_TBSCertificate (pctxt, "tbsCertificate", &pvalue->tbsCertificate);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "signatureAlgorithm", &pvalue->signatureAlgorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, "signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_Certificate::toStream (const char* name)

{
   asn1PrtToStrm_EXP_Certificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_Certificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP__SetOfEXP_AttributeValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP__SetOfEXP_AttributeValue* pvalue)
{
   ASN1T_EXP_AttributeValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_AttributeValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_AttributeValue (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP__SetOfEXP_AttributeValue::toStream (const char* name)

{
   asn1PrtToStrm_EXP__SetOfEXP_AttributeValue (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP__SetOfEXP_AttributeValue::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_Attribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Attribute* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AttributeType (pctxt, "type", &pvalue->type);

   asn1PrtToStrm_EXP__SetOfEXP_AttributeValue (pctxt, "values", &pvalue->values);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_Attribute::toStream (const char* name)

{
   asn1PrtToStrm_EXP_Attribute (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_Attribute::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TBSCertList_revokedCertificates_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_CertificateSerialNumber (pctxt, "userCertificate", &pvalue->userCertificate);

   asn1PrtToStrm_EXP_Time (pctxt, "revocationDate", &pvalue->revocationDate);

   if (pvalue->m.crlEntryExtensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "crlEntryExtensions", &pvalue->crlEntryExtensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_TBSCertList_revokedCertificates_element::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TBSCertList_revokedCertificates_element (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_TBSCertList_revokedCertificates_element::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue)
{
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_TBSCertList_revokedCertificates_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_TBSCertList_revokedCertificates_element (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::toStream (const char* name)

{
   asn1PrtToStrm_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TBSCertList (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TBSCertList* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.versionPresent) {
      asn1PrtToStrm_EXP_Version (pctxt, "version", &pvalue->version);
   }

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "signature_", &pvalue->signature_);

   asn1PrtToStrm_EXP_Name (pctxt, "issuer", &pvalue->issuer);

   asn1PrtToStrm_EXP_Time (pctxt, "thisUpdate", &pvalue->thisUpdate);

   if (pvalue->m.nextUpdatePresent) {
      asn1PrtToStrm_EXP_Time (pctxt, "nextUpdate", &pvalue->nextUpdate);
   }

   if (pvalue->m.revokedCertificatesPresent) {
      asn1PrtToStrm_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (pctxt, "revokedCertificates", &pvalue->revokedCertificates);
   }

   if (pvalue->m.crlExtensionsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "crlExtensions", &pvalue->crlExtensions);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_TBSCertList::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TBSCertList (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_TBSCertList::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_CertificateList (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_CertificateList* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_TBSCertList (pctxt, "tbsCertList", &pvalue->tbsCertList);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "signatureAlgorithm", &pvalue->signatureAlgorithm);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, "signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_CertificateList::toStream (const char* name)

{
   asn1PrtToStrm_EXP_CertificateList (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_CertificateList::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_CountryName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_CountryName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* x121-dcc-code */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "x121-dcc-code", pvalue->u.x121_dcc_code);
         break;
      }
      /* iso-3166-alpha2-code */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "iso-3166-alpha2-code", pvalue->u.iso_3166_alpha2_code);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_CountryName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_CountryName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_CountryName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_AdministrationDomainName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AdministrationDomainName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* numeric */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "numeric", pvalue->u.numeric);
         break;
      }
      /* printable */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printable", pvalue->u.printable);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_AdministrationDomainName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_AdministrationDomainName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_AdministrationDomainName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PrivateDomainName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PrivateDomainName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* numeric */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "numeric", pvalue->u.numeric);
         break;
      }
      /* printable */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printable", pvalue->u.printable);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_PrivateDomainName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PrivateDomainName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PrivateDomainName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PersonalName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PersonalName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "surname", pvalue->surname);

   if (pvalue->m.given_namePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "given_name", pvalue->given_name);
   }

   if (pvalue->m.initialsPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "initials", pvalue->initials);
   }

   if (pvalue->m.generation_qualifierPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "generation_qualifier", pvalue->generation_qualifier);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_PersonalName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PersonalName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PersonalName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_OrganizationalUnitNames (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_OrganizationalUnitNames* pvalue)
{
   ASN1T_EXP_OrganizationalUnitName pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_OrganizationalUnitName) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_OrganizationalUnitName (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_OrganizationalUnitNames::toStream (const char* name)

{
   asn1PrtToStrm_EXP_OrganizationalUnitNames (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_OrganizationalUnitNames::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_BuiltInStandardAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_BuiltInStandardAttributes* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.country_namePresent) {
      asn1PrtToStrm_EXP_CountryName (pctxt, "country_name", &pvalue->country_name);
   }

   if (pvalue->m.administration_domain_namePresent) {
      asn1PrtToStrm_EXP_AdministrationDomainName (pctxt, "administration_domain_name", &pvalue->administration_domain_name);
   }

   if (pvalue->m.network_addressPresent) {
      asn1PrtToStrm_EXP_NetworkAddress (pctxt, "network_address", pvalue->network_address);
   }

   if (pvalue->m.terminal_identifierPresent) {
      asn1PrtToStrm_EXP_TerminalIdentifier (pctxt, "terminal_identifier", pvalue->terminal_identifier);
   }

   if (pvalue->m.private_domain_namePresent) {
      asn1PrtToStrm_EXP_PrivateDomainName (pctxt, "private_domain_name", &pvalue->private_domain_name);
   }

   if (pvalue->m.organization_namePresent) {
      asn1PrtToStrm_EXP_OrganizationName (pctxt, "organization_name", pvalue->organization_name);
   }

   if (pvalue->m.numeric_user_identifierPresent) {
      asn1PrtToStrm_EXP_NumericUserIdentifier (pctxt, "numeric_user_identifier", pvalue->numeric_user_identifier);
   }

   if (pvalue->m.personal_namePresent) {
      asn1PrtToStrm_EXP_PersonalName (pctxt, "personal_name", &pvalue->personal_name);
   }

   if (pvalue->m.organizational_unit_namesPresent) {
      asn1PrtToStrm_EXP_OrganizationalUnitNames (pctxt, "organizational_unit_names", &pvalue->organizational_unit_names);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_BuiltInStandardAttributes::toStream (const char* name)

{
   asn1PrtToStrm_EXP_BuiltInStandardAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_BuiltInStandardAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_BuiltInDomainDefinedAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "type", pvalue->type);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "value", pvalue->value);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_BuiltInDomainDefinedAttribute::toStream (const char* name)

{
   asn1PrtToStrm_EXP_BuiltInDomainDefinedAttribute (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_BuiltInDomainDefinedAttribute::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_BuiltInDomainDefinedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue)
{
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_BuiltInDomainDefinedAttribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_BuiltInDomainDefinedAttribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_BuiltInDomainDefinedAttributes::toStream (const char* name)

{
   asn1PrtToStrm_EXP_BuiltInDomainDefinedAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_BuiltInDomainDefinedAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_ExtensionAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtensionAttribute* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamUnsigned (pctxt, "extension_attribute_type", pvalue->extension_attribute_type);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "extension_attribute_value",
      pvalue->extension_attribute_value.numocts, pvalue->extension_attribute_value.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_ExtensionAttribute::toStream (const char* name)

{
   asn1PrtToStrm_EXP_ExtensionAttribute (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_ExtensionAttribute::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_ExtensionAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtensionAttributes* pvalue)
{
   ASN1T_EXP_ExtensionAttribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_ExtensionAttribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_ExtensionAttribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_ExtensionAttributes::toStream (const char* name)

{
   asn1PrtToStrm_EXP_ExtensionAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_ExtensionAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_ORAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ORAddress* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_BuiltInStandardAttributes (pctxt, "built_in_standard_attributes", &pvalue->built_in_standard_attributes);

   if (pvalue->m.built_in_domain_defined_attributesPresent) {
      asn1PrtToStrm_EXP_BuiltInDomainDefinedAttributes (pctxt, "built_in_domain_defined_attributes", &pvalue->built_in_domain_defined_attributes);
   }

   if (pvalue->m.extension_attributesPresent) {
      asn1PrtToStrm_EXP_ExtensionAttributes (pctxt, "extension_attributes", &pvalue->extension_attributes);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_ORAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_ORAddress (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_ORAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TeletexPersonalName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexPersonalName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "surname", pvalue->surname);

   if (pvalue->m.given_namePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "given_name", pvalue->given_name);
   }

   if (pvalue->m.initialsPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "initials", pvalue->initials);
   }

   if (pvalue->m.generation_qualifierPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "generation_qualifier", pvalue->generation_qualifier);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_TeletexPersonalName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TeletexPersonalName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_TeletexPersonalName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TeletexOrganizationalUnitNames (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue)
{
   ASN1T_EXP_TeletexOrganizationalUnitName pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_TeletexOrganizationalUnitName) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_TeletexOrganizationalUnitName (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_TeletexOrganizationalUnitNames::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TeletexOrganizationalUnitNames (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_TeletexOrganizationalUnitNames::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PhysicalDeliveryCountryName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryCountryName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* x121-dcc-code */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "x121-dcc-code", pvalue->u.x121_dcc_code);
         break;
      }
      /* iso-3166-alpha2-code */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "iso-3166-alpha2-code", pvalue->u.iso_3166_alpha2_code);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryCountryName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PhysicalDeliveryCountryName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PhysicalDeliveryCountryName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PostalCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PostalCode* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* numeric-code */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "numeric-code", pvalue->u.numeric_code);
         break;
      }
      /* printable-code */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printable-code", pvalue->u.printable_code);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_PostalCode::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PostalCode (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PostalCode::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_UnformattedPostalAddress_printable_address (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue)
{
   const char* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (const char*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_UnformattedPostalAddress_printable_address::toStream (const char* name)

{
   asn1PrtToStrm_EXP_UnformattedPostalAddress_printable_address (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_UnformattedPostalAddress_printable_address::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_UnformattedPostalAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_UnformattedPostalAddress* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.printable_addressPresent) {
      asn1PrtToStrm_EXP_UnformattedPostalAddress_printable_address (pctxt, "printable_address", &pvalue->printable_address);
   }

   if (pvalue->m.teletex_stringPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "teletex_string", pvalue->teletex_string);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_UnformattedPostalAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_UnformattedPostalAddress (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_UnformattedPostalAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "number", pvalue->number);

   if (pvalue->m.sub_addressPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "sub_address", pvalue->sub_address);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::toStream (const char* name)

{
   asn1PrtToStrm_EXP_ExtendedNetworkAddress_e163_4_address (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PresentationAddress_nAddresses (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PresentationAddress_nAddresses* pvalue)
{
   ASN1TDynOctStr* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1TDynOctStr*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, namebuf, pdata0->numocts, pdata0->data);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_PresentationAddress_nAddresses::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PresentationAddress_nAddresses (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PresentationAddress_nAddresses::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_PresentationAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PresentationAddress* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.pSelectorPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "pSelector", pvalue->pSelector.numocts, pvalue->pSelector.data);
   }

   if (pvalue->m.sSelectorPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "sSelector", pvalue->sSelector.numocts, pvalue->sSelector.data);
   }

   if (pvalue->m.tSelectorPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "tSelector", pvalue->tSelector.numocts, pvalue->tSelector.data);
   }

   asn1PrtToStrm_EXP_PresentationAddress_nAddresses (pctxt, "nAddresses", &pvalue->nAddresses);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_PresentationAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_PresentationAddress (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_PresentationAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_ExtendedNetworkAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtendedNetworkAddress* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* e163-4-address */
      case 1:
      {
         asn1PrtToStrm_EXP_ExtendedNetworkAddress_e163_4_address (pctxt, "e163-4-address", pvalue->u.e163_4_address);
         break;
      }
      /* psap-address */
      case 2:
      {
         asn1PrtToStrm_EXP_PresentationAddress (pctxt, "psap-address", pvalue->u.psap_address);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_ExtendedNetworkAddress::toStream (const char* name)

{
   asn1PrtToStrm_EXP_ExtendedNetworkAddress (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_ExtendedNetworkAddress::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TeletexDomainDefinedAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "type", pvalue->type);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "value", pvalue->value);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_TeletexDomainDefinedAttribute::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TeletexDomainDefinedAttribute (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_TeletexDomainDefinedAttribute::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_TeletexDomainDefinedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue)
{
   ASN1T_EXP_TeletexDomainDefinedAttribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_TeletexDomainDefinedAttribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_TeletexDomainDefinedAttribute (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_EXP_TeletexDomainDefinedAttributes::toStream (const char* name)

{
   asn1PrtToStrm_EXP_TeletexDomainDefinedAttributes (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_TeletexDomainDefinedAttributes::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_DirectoryString (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_DirectoryString* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_DirectoryString::toStream (const char* name)

{
   asn1PrtToStrm_EXP_DirectoryString (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_DirectoryString::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520name (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520name* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520name::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520name (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520name::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520CommonName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520CommonName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520CommonName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520CommonName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520CommonName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520LocalityName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520LocalityName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520LocalityName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520LocalityName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520LocalityName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520StateOrProvinceName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520StateOrProvinceName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520StateOrProvinceName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520StateOrProvinceName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520StateOrProvinceName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520OrganizationName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520OrganizationName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520OrganizationName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520OrganizationName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520OrganizationName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520OrganizationalUnitName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520OrganizationalUnitName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520OrganizationalUnitName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520OrganizationalUnitName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520OrganizationalUnitName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520Title (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520Title* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520Title::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520Title (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520Title::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520CountrySerialUTF8liUcubeName::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520CountrySerialUTF8liUcubeName (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520CountrySerialUTF8liUcubeName::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_EXP_X520Pseudonym (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520Pseudonym* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtPrintToStreamIndent (pctxt);
         rtxPrintToStreamUTF8CharStr (pctxt, "utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamCharStr (pctxt, "teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnivCharStr (pctxt, "universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtPrintToStreamIndent (pctxt);
         rtPrintToStreamUnicodeCharStr (pctxt, "bmpString", pvalue->u.bmpString);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_EXP_X520Pseudonym::toStream (const char* name)

{
   asn1PrtToStrm_EXP_X520Pseudonym (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_EXP_X520Pseudonym::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

