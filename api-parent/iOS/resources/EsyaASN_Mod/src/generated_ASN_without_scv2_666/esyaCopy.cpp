/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "esya.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_ESYA_ESYASifreliVeri (OSCTXT* pctxt, 
   ASN1T_ESYA_ESYASifreliVeri* pSrcValue, ASN1T_ESYA_ESYASifreliVeri*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, &pSrcValue->sifreliAnahtar, &pDstValue->
      sifreliAnahtar);

   rtCopyDynOctStr (pctxt, &pSrcValue->sifreliVeri, &pDstValue->sifreliVeri);

}

ASN1C_ESYA_ESYASifreliVeri::ASN1C_ESYA_ESYASifreliVeri (ASN1C_ESYA_ESYASifreliVeri& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ESYA_ESYASifreliVeri::ASN1T_ESYA_ESYASifreliVeri (ASN1C_ESYA_ESYASifreliVeri& original)
{
   original.getCopy (this);
}

ASN1T_ESYA_ESYASifreliVeri& ASN1C_ESYA_ESYASifreliVeri::getCopy (ASN1T_ESYA_ESYASifreliVeri* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ESYA_ESYASifreliVeri);
      new (pDstData) ASN1T_ESYA_ESYASifreliVeri;
   }

   asn1Copy_ESYA_ESYASifreliVeri (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ESYA_ESYASifreliVeri* ASN1C_ESYA_ESYASifreliVeri::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ESYA_ESYASifreliVeri* pDstData = new ASN1T_ESYA_ESYASifreliVeri;

   asn1Copy_ESYA_ESYASifreliVeri (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ESYA_ESYASimetrikAnahtar (OSCTXT* pctxt, 
   ASN1T_ESYA_ESYASimetrikAnahtar* pSrcValue, ASN1T_ESYA_ESYASimetrikAnahtar*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->algorithm, &pDstValue->algorithm);

   rtCopyDynOctStr (pctxt, &pSrcValue->simetrikAnahtar, &pDstValue->
      simetrikAnahtar);

}

ASN1C_ESYA_ESYASimetrikAnahtar::ASN1C_ESYA_ESYASimetrikAnahtar (ASN1C_ESYA_ESYASimetrikAnahtar& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ESYA_ESYASimetrikAnahtar::ASN1T_ESYA_ESYASimetrikAnahtar (ASN1C_ESYA_ESYASimetrikAnahtar& original)
{
   original.getCopy (this);
}

ASN1T_ESYA_ESYASimetrikAnahtar& ASN1C_ESYA_ESYASimetrikAnahtar::getCopy (ASN1T_ESYA_ESYASimetrikAnahtar* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ESYA_ESYASimetrikAnahtar);
      new (pDstData) ASN1T_ESYA_ESYASimetrikAnahtar;
   }

   asn1Copy_ESYA_ESYASimetrikAnahtar (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ESYA_ESYASimetrikAnahtar* ASN1C_ESYA_ESYASimetrikAnahtar::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ESYA_ESYASimetrikAnahtar* pDstData = new ASN1T_ESYA_ESYASimetrikAnahtar;

   asn1Copy_ESYA_ESYASimetrikAnahtar (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ESYA_ESYASimImzAnahtari (OSCTXT* pctxt, 
   ASN1T_ESYA_ESYASimImzAnahtari* pSrcValue, ASN1T_ESYA_ESYASimImzAnahtari*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->anahNo = pSrcValue->anahNo;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->hashAlg, &pDstValue->hashAlg);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->simetrikAlg, &pDstValue->simetrikAlg);

   rtCopyDynOctStr (pctxt, &pSrcValue->anahtarBytes, &pDstValue->anahtarBytes
      );

}

ASN1C_ESYA_ESYASimImzAnahtari::ASN1C_ESYA_ESYASimImzAnahtari (ASN1C_ESYA_ESYASimImzAnahtari& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ESYA_ESYASimImzAnahtari::ASN1T_ESYA_ESYASimImzAnahtari (ASN1C_ESYA_ESYASimImzAnahtari& original)
{
   original.getCopy (this);
}

ASN1T_ESYA_ESYASimImzAnahtari& ASN1C_ESYA_ESYASimImzAnahtari::getCopy (ASN1T_ESYA_ESYASimImzAnahtari* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ESYA_ESYASimImzAnahtari);
      new (pDstData) ASN1T_ESYA_ESYASimImzAnahtari;
   }

   asn1Copy_ESYA_ESYASimImzAnahtari (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ESYA_ESYASimImzAnahtari* ASN1C_ESYA_ESYASimImzAnahtari::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ESYA_ESYASimImzAnahtari* pDstData = new ASN1T_ESYA_ESYASimImzAnahtari;

   asn1Copy_ESYA_ESYASimImzAnahtari (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ESYA_ESYASimImzAnahtarlari (OSCTXT* pctxt, 
   ASN1T_ESYA_ESYASimImzAnahtarlari* pSrcValue, 
   ASN1T_ESYA_ESYASimImzAnahtarlari* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ESYA_ESYASimImzAnahtari* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ESYA_ESYASimImzAnahtari* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ESYA_ESYASimImzAnahtari);
         pSrcData = (ASN1T_ESYA_ESYASimImzAnahtari*) pnode->data;

         asn1Copy_ESYA_ESYASimImzAnahtari (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ESYA_ESYASimImzAnahtarlari::ASN1C_ESYA_ESYASimImzAnahtarlari (ASN1C_ESYA_ESYASimImzAnahtarlari& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ESYA_ESYASimImzAnahtarlari*)pList)
{
}

ASN1C_ESYA_ESYASimImzAnahtarlari& ASN1C_ESYA_ESYASimImzAnahtarlari::operator= (ASN1C_ESYA_ESYASimImzAnahtarlari& srcData)
{
   clear ();
   asn1Copy_ESYA_ESYASimImzAnahtarlari (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ESYA_ESYASimImzAnahtarlari& ASN1C_ESYA_ESYASimImzAnahtarlari::getCopy (ASN1T_ESYA_ESYASimImzAnahtarlari* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ESYA_ESYASimImzAnahtarlari);
      new (pDstData) ASN1T_ESYA_ESYASimImzAnahtarlari;
   }

   asn1Copy_ESYA_ESYASimImzAnahtarlari (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ESYA_ESYASimImzAnahtarlari* ASN1C_ESYA_ESYASimImzAnahtarlari::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ESYA_ESYASimImzAnahtarlari* pDstData = new ASN1T_ESYA_ESYASimImzAnahtarlari;

   asn1Copy_ESYA_ESYASimImzAnahtarlari (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ESYA_ESYAVTImza (OSCTXT* pctxt, 
   ASN1T_ESYA_ESYAVTImza* pSrcValue, ASN1T_ESYA_ESYAVTImza* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->anahNo = pSrcValue->anahNo;

   rtCopyDynOctStr (pctxt, &pSrcValue->imzaliVeri, &pDstValue->imzaliVeri);

}

ASN1C_ESYA_ESYAVTImza::ASN1C_ESYA_ESYAVTImza (ASN1C_ESYA_ESYAVTImza& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ESYA_ESYAVTImza::ASN1T_ESYA_ESYAVTImza (ASN1C_ESYA_ESYAVTImza& original)
{
   original.getCopy (this);
}

ASN1T_ESYA_ESYAVTImza& ASN1C_ESYA_ESYAVTImza::getCopy (ASN1T_ESYA_ESYAVTImza* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ESYA_ESYAVTImza);
      new (pDstData) ASN1T_ESYA_ESYAVTImza;
   }

   asn1Copy_ESYA_ESYAVTImza (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ESYA_ESYAVTImza* ASN1C_ESYA_ESYAVTImza::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ESYA_ESYAVTImza* pDstData = new ASN1T_ESYA_ESYAVTImza;

   asn1Copy_ESYA_ESYAVTImza (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ESYA_ESYAPasswordRecipientInfo (OSCTXT* pctxt, 
   ASN1T_ESYA_ESYAPasswordRecipientInfo* pSrcValue, 
   ASN1T_ESYA_ESYAPasswordRecipientInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   if (pSrcValue->m.keyDerivationAlgorithmPresent) {
      asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->keyDerivationAlgorithm, &pDstValue->keyDerivationAlgorithm);
   }

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->keyEncryptionAlgorithm, &pDstValue->keyEncryptionAlgorithm);

   rtCopyDynOctStr (pctxt, &pSrcValue->encryptedKey, &pDstValue->encryptedKey
      );

   asn1Copy_PKCS7_DigestInfo (pctxt, &pSrcValue->keyHash, &pDstValue->keyHash);

}

ASN1C_ESYA_ESYAPasswordRecipientInfo::ASN1C_ESYA_ESYAPasswordRecipientInfo (ASN1C_ESYA_ESYAPasswordRecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ESYA_ESYAPasswordRecipientInfo::ASN1T_ESYA_ESYAPasswordRecipientInfo (ASN1C_ESYA_ESYAPasswordRecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_ESYA_ESYAPasswordRecipientInfo& ASN1C_ESYA_ESYAPasswordRecipientInfo::getCopy (ASN1T_ESYA_ESYAPasswordRecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ESYA_ESYAPasswordRecipientInfo);
      new (pDstData) ASN1T_ESYA_ESYAPasswordRecipientInfo;
   }

   asn1Copy_ESYA_ESYAPasswordRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ESYA_ESYAPasswordRecipientInfo* ASN1C_ESYA_ESYAPasswordRecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ESYA_ESYAPasswordRecipientInfo* pDstData = new ASN1T_ESYA_ESYAPasswordRecipientInfo;

   asn1Copy_ESYA_ESYAPasswordRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ESYA_EsyaGroupRecipientInfo (OSCTXT* pctxt, 
   ASN1T_ESYA_EsyaGroupRecipientInfo* pSrcValue, 
   ASN1T_ESYA_EsyaGroupRecipientInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->gid = pSrcValue->gid;

   pDstValue->groupIndex = pSrcValue->groupIndex;

   pDstValue->groupSize = pSrcValue->groupSize;

   asn1Copy_CMS_RecipientIdentifier (pctxt, &pSrcValue->rid, &pDstValue->rid);

   asn1Copy_PKCS7_KeyEncryptionAlgorithmIdentifier (pctxt, &pSrcValue->keyEncryptionAlgorithm, &pDstValue->keyEncryptionAlgorithm);

   asn1Copy_PKCS7_EncryptedKey (pctxt, &pSrcValue->encryptedKey, &pDstValue->encryptedKey);

}

ASN1C_ESYA_EsyaGroupRecipientInfo::ASN1C_ESYA_EsyaGroupRecipientInfo (ASN1C_ESYA_EsyaGroupRecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ESYA_EsyaGroupRecipientInfo::ASN1T_ESYA_EsyaGroupRecipientInfo (ASN1C_ESYA_EsyaGroupRecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_ESYA_EsyaGroupRecipientInfo& ASN1C_ESYA_EsyaGroupRecipientInfo::getCopy (ASN1T_ESYA_EsyaGroupRecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ESYA_EsyaGroupRecipientInfo);
      new (pDstData) ASN1T_ESYA_EsyaGroupRecipientInfo;
   }

   asn1Copy_ESYA_EsyaGroupRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ESYA_EsyaGroupRecipientInfo* ASN1C_ESYA_EsyaGroupRecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ESYA_EsyaGroupRecipientInfo* pDstData = new ASN1T_ESYA_EsyaGroupRecipientInfo;

   asn1Copy_ESYA_EsyaGroupRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ESYA_ESYAFileInfoRecipientInfo (OSCTXT* pctxt, 
   ASN1T_ESYA_ESYAFileInfoRecipientInfo* pSrcValue, 
   ASN1T_ESYA_ESYAFileInfoRecipientInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->gizlilikBilgisi = pSrcValue->gizlilikBilgisi;

}

ASN1C_ESYA_ESYAFileInfoRecipientInfo::ASN1C_ESYA_ESYAFileInfoRecipientInfo (ASN1C_ESYA_ESYAFileInfoRecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ESYA_ESYAFileInfoRecipientInfo::ASN1T_ESYA_ESYAFileInfoRecipientInfo (ASN1C_ESYA_ESYAFileInfoRecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_ESYA_ESYAFileInfoRecipientInfo& ASN1C_ESYA_ESYAFileInfoRecipientInfo::getCopy (ASN1T_ESYA_ESYAFileInfoRecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ESYA_ESYAFileInfoRecipientInfo);
      new (pDstData) ASN1T_ESYA_ESYAFileInfoRecipientInfo;
   }

   asn1Copy_ESYA_ESYAFileInfoRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ESYA_ESYAFileInfoRecipientInfo* ASN1C_ESYA_ESYAFileInfoRecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ESYA_ESYAFileInfoRecipientInfo* pDstData = new ASN1T_ESYA_ESYAFileInfoRecipientInfo;

   asn1Copy_ESYA_ESYAFileInfoRecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

