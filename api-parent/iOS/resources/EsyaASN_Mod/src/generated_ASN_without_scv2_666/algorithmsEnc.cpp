/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "algorithms.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_ALGOS_KEA_Parms_Id (OSCTXT* pctxt,
   ASN1T_ALGOS_KEA_Parms_Id *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KEA-Parms-Id");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_Prime_p (OSCTXT* pctxt,
   ASN1T_ALGOS_Prime_p *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Prime-p");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_Trinomial (OSCTXT* pctxt,
   ASN1T_ALGOS_Trinomial *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Trinomial");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_FieldElement (OSCTXT* pctxt,
   ASN1T_ALGOS_FieldElement *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "FieldElement");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_ECPoint (OSCTXT* pctxt,
   ASN1T_ALGOS_ECPoint *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ECPoint");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_HashAlgorithm (OSCTXT* pctxt,
   ASN1T_ALGOS_HashAlgorithm *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "HashAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_SpecifiedECDomainVersion (OSCTXT* pctxt,
   ASN1T_ALGOS_SpecifiedECDomainVersion *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SpecifiedECDomainVersion");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_ECPVer (OSCTXT* pctxt,
   ASN1T_ALGOS_ECPVer *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ECPVer");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_ECPrivateKey_version (OSCTXT* pctxt,
   ASN1T_ALGOS_ECPrivateKey_version *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   if (!(*pvalue == 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)*pvalue);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_uint8 (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   return (ll0);
}

EXTERN int asn1E_ALGOS_Dss_Parms (OSCTXT* pctxt,
   ASN1T_ALGOS_Dss_Parms *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Dss-Parms");

   /* encode g */

   RTXCTXTPUSHELEMNAME (pctxt, "g");

   ll = xe_integer (pctxt, &pvalue->g, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode q */

   RTXCTXTPUSHELEMNAME (pctxt, "q");

   ll = xe_integer (pctxt, &pvalue->q, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode p */

   RTXCTXTPUSHELEMNAME (pctxt, "p");

   ll = xe_integer (pctxt, &pvalue->p, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_DssSigValue (OSCTXT* pctxt,
   ASN1T_ALGOS_DssSigValue *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DssSigValue");

   /* encode s */

   RTXCTXTPUSHELEMNAME (pctxt, "s");

   ll = xe_bigint (pctxt, pvalue->s, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode r */

   RTXCTXTPUSHELEMNAME (pctxt, "r");

   ll = xe_bigint (pctxt, pvalue->r, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_ValidationParms (OSCTXT* pctxt,
   ASN1T_ALGOS_ValidationParms *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ValidationParms");

   /* encode pgenCounter */

   RTXCTXTPUSHELEMNAME (pctxt, "pgenCounter");

   ll = xe_integer (pctxt, &pvalue->pgenCounter, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode seed */

   RTXCTXTPUSHELEMNAME (pctxt, "seed");

   ll = xe_bitstr (pctxt, pvalue->seed.data, pvalue->seed.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_DomainParameters (OSCTXT* pctxt,
   ASN1T_ALGOS_DomainParameters *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DomainParameters");

   /* encode validationParms */

   if (pvalue->m.validationParmsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "validationParms");

      ll = asn1E_ALGOS_ValidationParms (pctxt, &pvalue->validationParms, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode j */

   if (pvalue->m.jPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "j");

      ll = xe_integer (pctxt, &pvalue->j, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode q */

   RTXCTXTPUSHELEMNAME (pctxt, "q");

   ll = xe_integer (pctxt, &pvalue->q, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode g */

   RTXCTXTPUSHELEMNAME (pctxt, "g");

   ll = xe_integer (pctxt, &pvalue->g, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode p */

   RTXCTXTPUSHELEMNAME (pctxt, "p");

   ll = xe_integer (pctxt, &pvalue->p, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_FieldID (OSCTXT* pctxt,
   ASN1T_ALGOS_FieldID *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "FieldID");

   /* encode parameters */

   RTXCTXTPUSHELEMNAME (pctxt, "parameters");

   ll = xe_OpenType (pctxt, pvalue->parameters.data, pvalue->parameters.numocts);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode fieldType */

   RTXCTXTPUSHELEMNAME (pctxt, "fieldType");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->fieldType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_ECDSASigValue (OSCTXT* pctxt,
   ASN1T_ALGOS_ECDSASigValue *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ECDSASigValue");

   /* encode s */

   RTXCTXTPUSHELEMNAME (pctxt, "s");

   ll = xe_bigint (pctxt, pvalue->s, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode r */

   RTXCTXTPUSHELEMNAME (pctxt, "r");

   ll = xe_bigint (pctxt, pvalue->r, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_Characteristic_two (OSCTXT* pctxt,
   ASN1T_ALGOS_Characteristic_two *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Characteristic-two");

   /* encode parameters */

   RTXCTXTPUSHELEMNAME (pctxt, "parameters");

   ll = xe_OpenType (pctxt, pvalue->parameters.data, pvalue->parameters.numocts);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode basis */

   RTXCTXTPUSHELEMNAME (pctxt, "basis");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->basis, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode m_ */

   RTXCTXTPUSHELEMNAME (pctxt, "m");

   ll = xe_integer (pctxt, &pvalue->m_, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_Pentanomial (OSCTXT* pctxt,
   ASN1T_ALGOS_Pentanomial *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Pentanomial");

   /* encode k3 */

   RTXCTXTPUSHELEMNAME (pctxt, "k3");

   ll = xe_integer (pctxt, &pvalue->k3, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode k2 */

   RTXCTXTPUSHELEMNAME (pctxt, "k2");

   ll = xe_integer (pctxt, &pvalue->k2, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode k1 */

   RTXCTXTPUSHELEMNAME (pctxt, "k1");

   ll = xe_integer (pctxt, &pvalue->k1, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_Curve (OSCTXT* pctxt,
   ASN1T_ALGOS_Curve *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Curve");

   /* encode seed */

   if (pvalue->m.seedPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "seed");

      ll = xe_bitstr (pctxt, pvalue->seed.data, pvalue->seed.numbits, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode b */

   RTXCTXTPUSHELEMNAME (pctxt, "b");

   ll = asn1E_ALGOS_FieldElement (pctxt, &pvalue->b, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode a */

   RTXCTXTPUSHELEMNAME (pctxt, "a");

   ll = asn1E_ALGOS_FieldElement (pctxt, &pvalue->a, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_SpecifiedECDomain (OSCTXT* pctxt,
   ASN1T_ALGOS_SpecifiedECDomain *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SpecifiedECDomain");

   /* encode hash */

   if (pvalue->m.hashPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "hash");

      ll = asn1E_ALGOS_HashAlgorithm (pctxt, &pvalue->hash, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode cofactor */

   if (pvalue->m.cofactorPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "cofactor");

      ll = xe_bigint (pctxt, pvalue->cofactor, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode order */

   RTXCTXTPUSHELEMNAME (pctxt, "order");

   ll = xe_bigint (pctxt, pvalue->order, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode base */

   RTXCTXTPUSHELEMNAME (pctxt, "base");

   ll = asn1E_ALGOS_ECPoint (pctxt, &pvalue->base, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode curve */

   RTXCTXTPUSHELEMNAME (pctxt, "curve");

   ll = asn1E_ALGOS_Curve (pctxt, &pvalue->curve, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode fieldID */

   RTXCTXTPUSHELEMNAME (pctxt, "fieldID");

   ll = asn1E_ALGOS_FieldID (pctxt, &pvalue->fieldID, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   if (!((pvalue->version == 1 || pvalue->version == 2 || pvalue->version == 3))) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, pvalue->version);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   ll = xe_integer (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_ECParameters (OSCTXT* pctxt,
   ASN1T_ALGOS_ECParameters *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;
   OS_UNUSED_ARG (pvalue) ;

   RTXCTXTPUSHTYPENAME (pctxt, "ECParameters");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "implicitCurve");

         ll = xe_null (pctxt, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "namedCurve");

         ll = xe_objid (pctxt, (ASN1OBJID*)pvalue->u.namedCurve, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "specifiedCurve");

         ll = asn1E_ALGOS_SpecifiedECDomain (pctxt, pvalue->u.specifiedCurve, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_ECPrivateKey (OSCTXT* pctxt,
   ASN1T_ALGOS_ECPrivateKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ECPrivateKey");

   /* encode publicKey */

   if (pvalue->m.publicKeyPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "publicKey");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         xe_bitstr (pctxt, pvalue->publicKey.data, pvalue->publicKey.numbits, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode parameters */

   if (pvalue->m.parametersPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "parameters");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_ALGOS_ECParameters (pctxt, &pvalue->parameters, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode privateKey */

   RTXCTXTPUSHELEMNAME (pctxt, "privateKey");

   ll = xe_octstr (pctxt, pvalue->privateKey.data, pvalue->privateKey.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_ALGOS_ECPrivateKey_version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_ALGOS_RSASSA_PSS_params (OSCTXT* pctxt,
   ASN1T_ALGOS_RSASSA_PSS_params *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RSASSA-PSS-params");

   /* encode trailerField */

   if (pvalue->trailerField != 1) {
      RTXCTXTPUSHELEMNAME (pctxt, "trailerField");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
         xe_integer (pctxt, &pvalue->trailerField, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode saltLength */

   if (pvalue->saltLength != 20) {
      RTXCTXTPUSHELEMNAME (pctxt, "saltLength");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         xe_integer (pctxt, &pvalue->saltLength, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode maskGenAlgorithm */

   if (pvalue->m.maskGenAlgorithmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "maskGenAlgorithm");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->maskGenAlgorithm, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode hashAlgorithm */

   if (pvalue->m.hashAlgorithmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "hashAlgorithm");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

