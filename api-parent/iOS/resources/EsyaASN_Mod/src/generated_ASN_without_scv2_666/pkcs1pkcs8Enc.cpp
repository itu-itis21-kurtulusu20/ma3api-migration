/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkcs1pkcs8.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_PKCS18_PrivateKey (OSCTXT* pctxt,
   ASN1T_PKCS18_PrivateKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PrivateKey");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS18_EncryptedData (OSCTXT* pctxt,
   ASN1T_PKCS18_EncryptedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncryptedData");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS18_PrivateKeyInfo (OSCTXT* pctxt,
   ASN1T_PKCS18_PrivateKeyInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PrivateKeyInfo");

   /* encode attributes */

   if (pvalue->m.attributesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "attributes");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_PKCS10_Attributes (pctxt, &pvalue->attributes, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode privateKey */

   RTXCTXTPUSHELEMNAME (pctxt, "privateKey");

   ll = asn1E_PKCS18_PrivateKey (pctxt, &pvalue->privateKey, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode privateKeyAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "privateKeyAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->privateKeyAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_EXP_Version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS18_EncryptedPrivateKeyInfo (OSCTXT* pctxt,
   ASN1T_PKCS18_EncryptedPrivateKeyInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncryptedPrivateKeyInfo");

   /* encode encryptedData */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedData");

   ll = asn1E_PKCS18_EncryptedData (pctxt, &pvalue->encryptedData, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode encryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptionAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->encryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS18_RSAPublicKey (OSCTXT* pctxt,
   ASN1T_PKCS18_RSAPublicKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RSAPublicKey");

   /* encode publicExponent */

   RTXCTXTPUSHELEMNAME (pctxt, "publicExponent");

   ll = xe_bigint (pctxt, pvalue->publicExponent, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode modulus */

   RTXCTXTPUSHELEMNAME (pctxt, "modulus");

   ll = xe_bigint (pctxt, pvalue->modulus, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_PKCS18_RSAPrivateKey (OSCTXT* pctxt,
   ASN1T_PKCS18_RSAPrivateKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RSAPrivateKey");

   /* encode coefficient */

   RTXCTXTPUSHELEMNAME (pctxt, "coefficient");

   ll = xe_bigint (pctxt, pvalue->coefficient, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode exponent2 */

   RTXCTXTPUSHELEMNAME (pctxt, "exponent2");

   ll = xe_bigint (pctxt, pvalue->exponent2, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode exponent1 */

   RTXCTXTPUSHELEMNAME (pctxt, "exponent1");

   ll = xe_bigint (pctxt, pvalue->exponent1, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode prime2 */

   RTXCTXTPUSHELEMNAME (pctxt, "prime2");

   ll = xe_bigint (pctxt, pvalue->prime2, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode prime1 */

   RTXCTXTPUSHELEMNAME (pctxt, "prime1");

   ll = xe_bigint (pctxt, pvalue->prime1, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode privateExponent */

   RTXCTXTPUSHELEMNAME (pctxt, "privateExponent");

   ll = xe_bigint (pctxt, pvalue->privateExponent, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode publicExponent */

   RTXCTXTPUSHELEMNAME (pctxt, "publicExponent");

   ll = xe_bigint (pctxt, pvalue->publicExponent, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode modulus */

   RTXCTXTPUSHELEMNAME (pctxt, "modulus");

   ll = xe_bigint (pctxt, pvalue->modulus, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_EXP_Version (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

