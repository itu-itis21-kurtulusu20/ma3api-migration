/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#ifndef EXPLICIT_H
#define EXPLICIT_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "rtsrc/ASN1CBitStr.h"
#include "rtsrc/ASN1CSeqOfList.h"

/**
 * Header file for ASN.1 module Explicit
 */
/**************************************************************/
/*                                                            */
/*  Version                                                   */
/*                                                            */
/**************************************************************/
/*
Version ::= INTEGER { v1(0), v2(1), v3(2) }
*/
#define TV_EXP_Version	(TM_UNIV|TM_PRIM|2)

struct EXTERN EXP_Version {
   enum Root {
      v1 = 0,
      v2 = 1,
      v3 = 2
   } ;
} ;

typedef OSINT32 ASN1T_EXP_Version;

class EXTERN ASN1C_EXP_Version :
public ASN1CType
{
protected:
   ASN1T_EXP_Version& msgData;
public:
   ASN1C_EXP_Version (ASN1T_EXP_Version& data);
   ASN1C_EXP_Version (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_Version& data);
   ASN1C_EXP_Version (OSRTContext &context, ASN1T_EXP_Version& data);
   virtual ~ASN1C_EXP_Version () {}
   inline ASN1T_EXP_Version& getData () { return msgData; }
   inline const ASN1T_EXP_Version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Version");
   int toStream (const char* name = "Version");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_Version* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_EXP_Version (OSCTXT* pctxt,
   ASN1T_EXP_Version *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_Version (OSCTXT* pctxt, ASN1T_EXP_Version* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_Version (const char* name, const ASN1T_EXP_Version* pvalue);

EXTERN int asn1PrtToStrm_EXP_Version (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Version* pvalue);

EXTERN ASN1T_EXP_Version* new_ASN1T_EXP_Version (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_Version (const char* name, ASN1T_EXP_Version* pValue, 
   ASN1T_EXP_Version* pCmpValue, char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  CertificateSerialNumber                                   */
/*                                                            */
/**************************************************************/
/*
CertificateSerialNumber ::= INTEGER
*/
#define TV_EXP_CertificateSerialNumber	(TM_UNIV|TM_PRIM|2)

typedef const char* ASN1T_EXP_CertificateSerialNumber;

class EXTERN ASN1C_EXP_CertificateSerialNumber :
public ASN1CType
{
protected:
   ASN1T_EXP_CertificateSerialNumber& msgData;
public:
   ASN1C_EXP_CertificateSerialNumber (ASN1T_EXP_CertificateSerialNumber& data);
   ASN1C_EXP_CertificateSerialNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_CertificateSerialNumber& data);
   ASN1C_EXP_CertificateSerialNumber (OSRTContext &context
      , ASN1T_EXP_CertificateSerialNumber& data);
   ASN1C_EXP_CertificateSerialNumber (ASN1C_EXP_CertificateSerialNumber& original);
   virtual ~ASN1C_EXP_CertificateSerialNumber () {}
   inline ASN1T_EXP_CertificateSerialNumber& getData () { return msgData; }
   inline const ASN1T_EXP_CertificateSerialNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertificateSerialNumber");
   int toStream (const char* name = "CertificateSerialNumber");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_CertificateSerialNumber* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_CertificateSerialNumber& getCopy (ASN1T_EXP_CertificateSerialNumber* pDstData = 0);
   ASN1T_EXP_CertificateSerialNumber* newCopy ();

   inline ASN1C_EXP_CertificateSerialNumber& operator= (ASN1C_EXP_CertificateSerialNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_CertificateSerialNumber (OSCTXT* pctxt,
   ASN1T_EXP_CertificateSerialNumber *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_CertificateSerialNumber (OSCTXT* pctxt, 
   ASN1T_EXP_CertificateSerialNumber* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_CertificateSerialNumber 
   (const char* name, const ASN1T_EXP_CertificateSerialNumber* pvalue);

EXTERN int asn1PrtToStrm_EXP_CertificateSerialNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_CertificateSerialNumber* pvalue);

EXTERN ASN1T_EXP_CertificateSerialNumber* 
   new_ASN1T_EXP_CertificateSerialNumber (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_CertificateSerialNumber (const char* name, 
   ASN1T_EXP_CertificateSerialNumber* pValue, 
   ASN1T_EXP_CertificateSerialNumber* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_CertificateSerialNumber (OSCTXT* pctxt, 
   ASN1T_EXP_CertificateSerialNumber* pSrcValue, 
   ASN1T_EXP_CertificateSerialNumber* pDstValue);

/**************************************************************/
/*                                                            */
/*  AttributeType                                             */
/*                                                            */
/**************************************************************/
/*
AttributeType ::= OBJECT IDENTIFIER
*/
#define TV_EXP_AttributeType	(TM_UNIV|TM_PRIM|6)

typedef ASN1TObjId ASN1T_EXP_AttributeType;

class EXTERN ASN1C_EXP_AttributeType :
public ASN1CType
{
protected:
   ASN1T_EXP_AttributeType& msgData;
public:
   ASN1C_EXP_AttributeType (ASN1T_EXP_AttributeType& data);
   ASN1C_EXP_AttributeType (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_AttributeType& data);
   ASN1C_EXP_AttributeType (OSRTContext &context, ASN1T_EXP_AttributeType& data
      );
   ASN1C_EXP_AttributeType (ASN1C_EXP_AttributeType& original);
   virtual ~ASN1C_EXP_AttributeType () {}
   inline ASN1T_EXP_AttributeType& getData () { return msgData; }
   inline const ASN1T_EXP_AttributeType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeType");
   int toStream (const char* name = "AttributeType");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_AttributeType* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_AttributeType& getCopy (ASN1T_EXP_AttributeType* pDstData = 0);
   ASN1T_EXP_AttributeType* newCopy ();

   inline ASN1C_EXP_AttributeType& operator= (ASN1C_EXP_AttributeType& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_AttributeType (OSCTXT* pctxt,
   ASN1T_EXP_AttributeType *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_AttributeType (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeType* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_AttributeType 
   (const char* name, const ASN1T_EXP_AttributeType* pvalue);

EXTERN int asn1PrtToStrm_EXP_AttributeType (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AttributeType* pvalue);

EXTERN ASN1T_EXP_AttributeType* new_ASN1T_EXP_AttributeType (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_EXP_AttributeType (const char* name, 
   ASN1T_EXP_AttributeType* pValue, ASN1T_EXP_AttributeType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_AttributeType (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeType* pSrcValue, ASN1T_EXP_AttributeType* pDstValue);

EXTERN void asn1Init_EXP_AttributeType (ASN1T_EXP_AttributeType* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeValue                                            */
/*                                                            */
/**************************************************************/
/*
AttributeValue ::= ANY
*/
typedef ASN1TOpenType ASN1T_EXP_AttributeValue;

class EXTERN ASN1C_EXP_AttributeValue :
public ASN1CType
{
protected:
   ASN1T_EXP_AttributeValue& msgData;
public:
   ASN1C_EXP_AttributeValue (ASN1T_EXP_AttributeValue& data);
   ASN1C_EXP_AttributeValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_AttributeValue& data);
   ASN1C_EXP_AttributeValue (OSRTContext &context
      , ASN1T_EXP_AttributeValue& data);
   ASN1C_EXP_AttributeValue (ASN1C_EXP_AttributeValue& original);
   virtual ~ASN1C_EXP_AttributeValue () {}
   inline ASN1T_EXP_AttributeValue& getData () { return msgData; }
   inline const ASN1T_EXP_AttributeValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeValue");
   int toStream (const char* name = "AttributeValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_AttributeValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_AttributeValue& getCopy (ASN1T_EXP_AttributeValue* pDstData = 0);
   ASN1T_EXP_AttributeValue* newCopy ();

   inline ASN1C_EXP_AttributeValue& operator= (ASN1C_EXP_AttributeValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_AttributeValue (OSCTXT* pctxt,
   ASN1T_EXP_AttributeValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_AttributeValue (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_AttributeValue 
   (const char* name, const ASN1T_EXP_AttributeValue* pvalue);

EXTERN int asn1PrtToStrm_EXP_AttributeValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AttributeValue* pvalue);

EXTERN ASN1T_EXP_AttributeValue* 
   new_ASN1T_EXP_AttributeValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_AttributeValue (const char* name, 
   ASN1T_EXP_AttributeValue* pValue, ASN1T_EXP_AttributeValue* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_AttributeValue (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeValue* pSrcValue, ASN1T_EXP_AttributeValue* pDstValue);

EXTERN void asn1Init_EXP_AttributeValue (ASN1T_EXP_AttributeValue* pvalue);

EXTERN void asn1Free_EXP_AttributeValue (OSCTXT *pctxt, 
   ASN1T_EXP_AttributeValue* pvalue);

/**************************************************************/
/*                                                            */
/*  UniqueIdentifier                                          */
/*                                                            */
/**************************************************************/
/*
UniqueIdentifier ::= BIT STRING 
*/
#define TV_EXP_UniqueIdentifier	(TM_UNIV|TM_PRIM|3)

typedef ASN1TDynBitStr ASN1T_EXP_UniqueIdentifier;

class EXTERN ASN1C_EXP_UniqueIdentifier :
public ASN1CBitStr
{
protected:
   ASN1T_EXP_UniqueIdentifier& msgData;
public:
   ASN1C_EXP_UniqueIdentifier (ASN1T_EXP_UniqueIdentifier& data);
   ASN1C_EXP_UniqueIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_UniqueIdentifier& data);
   ASN1C_EXP_UniqueIdentifier (OSRTContext &context
      , ASN1T_EXP_UniqueIdentifier& data);
   ASN1C_EXP_UniqueIdentifier (ASN1C_EXP_UniqueIdentifier& original);
   virtual ~ASN1C_EXP_UniqueIdentifier () {}
   inline ASN1T_EXP_UniqueIdentifier& getData () { return msgData; }
   inline const ASN1T_EXP_UniqueIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UniqueIdentifier");
   int toStream (const char* name = "UniqueIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_UniqueIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_UniqueIdentifier& getCopy (ASN1T_EXP_UniqueIdentifier* pDstData = 0);
   ASN1T_EXP_UniqueIdentifier* newCopy ();

   ASN1C_EXP_UniqueIdentifier& operator= (ASN1C_EXP_UniqueIdentifier& srcData);
} ;

EXTERN int asn1E_EXP_UniqueIdentifier (OSCTXT* pctxt,
   ASN1T_EXP_UniqueIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_UniqueIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_UniqueIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_UniqueIdentifier 
   (const char* name, const ASN1T_EXP_UniqueIdentifier* pvalue);

EXTERN int asn1PrtToStrm_EXP_UniqueIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_UniqueIdentifier* pvalue);

EXTERN ASN1T_EXP_UniqueIdentifier* 
   new_ASN1T_EXP_UniqueIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_UniqueIdentifier (const char* name, 
   ASN1T_EXP_UniqueIdentifier* pValue, ASN1T_EXP_UniqueIdentifier* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_UniqueIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_UniqueIdentifier* pSrcValue, ASN1T_EXP_UniqueIdentifier*
    pDstValue);

EXTERN void asn1Init_EXP_UniqueIdentifier (ASN1T_EXP_UniqueIdentifier* pvalue);

EXTERN void asn1Free_EXP_UniqueIdentifier (OSCTXT *pctxt, 
   ASN1T_EXP_UniqueIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  X121Address                                               */
/*                                                            */
/**************************************************************/
/*
 see also extended-network-address

X121Address ::= NumericString (SIZE (1..ub-x121-address-length))
*/
#define TV_EXP_X121Address	(TM_UNIV|TM_PRIM|18)

typedef const char* ASN1T_EXP_X121Address;

class EXTERN ASN1C_EXP_X121Address :
public ASN1CType
{
protected:
   ASN1T_EXP_X121Address& msgData;
public:
   ASN1C_EXP_X121Address (ASN1T_EXP_X121Address& data);
   ASN1C_EXP_X121Address (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X121Address& data);
   ASN1C_EXP_X121Address (OSRTContext &context, ASN1T_EXP_X121Address& data);
   ASN1C_EXP_X121Address (ASN1C_EXP_X121Address& original);
   virtual ~ASN1C_EXP_X121Address () {}
   inline ASN1T_EXP_X121Address& getData () { return msgData; }
   inline const ASN1T_EXP_X121Address& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X121Address");
   int toStream (const char* name = "X121Address");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X121Address* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X121Address& getCopy (ASN1T_EXP_X121Address* pDstData = 0);
   ASN1T_EXP_X121Address* newCopy ();

   inline ASN1C_EXP_X121Address& operator= (ASN1C_EXP_X121Address& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X121Address (OSCTXT* pctxt,
   ASN1T_EXP_X121Address pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X121Address (OSCTXT* pctxt, 
   ASN1T_EXP_X121Address* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X121Address 
   (const char* name, const ASN1T_EXP_X121Address pvalue);

EXTERN int asn1PrtToStrm_EXP_X121Address (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X121Address pvalue);

EXTERN OSBOOL asn1Compare_EXP_X121Address (const char* name, 
   ASN1T_EXP_X121Address* pValue, ASN1T_EXP_X121Address* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X121Address (OSCTXT* pctxt, ASN1T_EXP_X121Address pSrcValue, 
   ASN1T_EXP_X121Address* pDstValue);

EXTERN void asn1Free_EXP_X121Address (OSCTXT *pctxt, ASN1T_EXP_X121Address pvalue);

/**************************************************************/
/*                                                            */
/*  NetworkAddress                                            */
/*                                                            */
/**************************************************************/
/*
NetworkAddress ::= X121Address
*/
#define TV_EXP_NetworkAddress	(TM_UNIV|TM_PRIM|18)

typedef ASN1T_EXP_X121Address ASN1T_EXP_NetworkAddress;

class EXTERN ASN1C_EXP_NetworkAddress :
   public ASN1C_EXP_X121Address
{
protected:
public:
   ASN1C_EXP_NetworkAddress (ASN1T_EXP_NetworkAddress& data);
   ASN1C_EXP_NetworkAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_NetworkAddress& data);
   ASN1C_EXP_NetworkAddress (OSRTContext &context
      , ASN1T_EXP_NetworkAddress& data);
   ASN1C_EXP_NetworkAddress (ASN1C_EXP_NetworkAddress& original);
   virtual ~ASN1C_EXP_NetworkAddress () {}
   inline ASN1T_EXP_NetworkAddress& getData () { return msgData; }
   inline const ASN1T_EXP_NetworkAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NetworkAddress");
   int toStream (const char* name = "NetworkAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_NetworkAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_NetworkAddress& getCopy (ASN1T_EXP_NetworkAddress* pDstData = 0);
   ASN1T_EXP_NetworkAddress* newCopy ();

   inline ASN1C_EXP_NetworkAddress& operator= (ASN1C_EXP_NetworkAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_NetworkAddress (OSCTXT* pctxt,
   ASN1T_EXP_NetworkAddress pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_NetworkAddress (OSCTXT* pctxt, 
   ASN1T_EXP_NetworkAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_NetworkAddress 
   (const char* name, const ASN1T_EXP_NetworkAddress pvalue);

EXTERN int asn1PrtToStrm_EXP_NetworkAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_NetworkAddress pvalue);

EXTERN OSBOOL asn1Compare_EXP_NetworkAddress (const char* name, 
   ASN1T_EXP_NetworkAddress* pValue, ASN1T_EXP_NetworkAddress* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_NetworkAddress (OSCTXT* pctxt, 
   ASN1T_EXP_NetworkAddress pSrcValue, ASN1T_EXP_NetworkAddress* pDstValue);

EXTERN void asn1Free_EXP_NetworkAddress (OSCTXT *pctxt, 
   ASN1T_EXP_NetworkAddress pvalue);

/**************************************************************/
/*                                                            */
/*  TerminalIdentifier                                        */
/*                                                            */
/**************************************************************/
/*
TerminalIdentifier ::= PrintableString (SIZE (1..ub-terminal-id-length))
*/
#define TV_EXP_TerminalIdentifier	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_EXP_TerminalIdentifier;

class EXTERN ASN1C_EXP_TerminalIdentifier :
public ASN1CType
{
protected:
   ASN1T_EXP_TerminalIdentifier& msgData;
public:
   ASN1C_EXP_TerminalIdentifier (ASN1T_EXP_TerminalIdentifier& data);
   ASN1C_EXP_TerminalIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TerminalIdentifier& data);
   ASN1C_EXP_TerminalIdentifier (OSRTContext &context
      , ASN1T_EXP_TerminalIdentifier& data);
   ASN1C_EXP_TerminalIdentifier (ASN1C_EXP_TerminalIdentifier& original);
   virtual ~ASN1C_EXP_TerminalIdentifier () {}
   inline ASN1T_EXP_TerminalIdentifier& getData () { return msgData; }
   inline const ASN1T_EXP_TerminalIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TerminalIdentifier");
   int toStream (const char* name = "TerminalIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TerminalIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TerminalIdentifier& getCopy (ASN1T_EXP_TerminalIdentifier* pDstData = 0);
   ASN1T_EXP_TerminalIdentifier* newCopy ();

   inline ASN1C_EXP_TerminalIdentifier& operator= (ASN1C_EXP_TerminalIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TerminalIdentifier (OSCTXT* pctxt,
   ASN1T_EXP_TerminalIdentifier pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TerminalIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_TerminalIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_TerminalIdentifier 
   (const char* name, const ASN1T_EXP_TerminalIdentifier pvalue);

EXTERN int asn1PrtToStrm_EXP_TerminalIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TerminalIdentifier pvalue);

EXTERN OSBOOL asn1Compare_EXP_TerminalIdentifier (const char* name, 
   ASN1T_EXP_TerminalIdentifier* pValue, 
   ASN1T_EXP_TerminalIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TerminalIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_TerminalIdentifier pSrcValue, ASN1T_EXP_TerminalIdentifier*
    pDstValue);

EXTERN void asn1Free_EXP_TerminalIdentifier (OSCTXT *pctxt, 
   ASN1T_EXP_TerminalIdentifier pvalue);

/**************************************************************/
/*                                                            */
/*  OrganizationName                                          */
/*                                                            */
/**************************************************************/
/*
OrganizationName ::= PrintableString (SIZE (1..ub-organization-name-length))
*/
#define TV_EXP_OrganizationName	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_EXP_OrganizationName;

class EXTERN ASN1C_EXP_OrganizationName :
public ASN1CType
{
protected:
   ASN1T_EXP_OrganizationName& msgData;
public:
   ASN1C_EXP_OrganizationName (ASN1T_EXP_OrganizationName& data);
   ASN1C_EXP_OrganizationName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_OrganizationName& data);
   ASN1C_EXP_OrganizationName (OSRTContext &context
      , ASN1T_EXP_OrganizationName& data);
   ASN1C_EXP_OrganizationName (ASN1C_EXP_OrganizationName& original);
   virtual ~ASN1C_EXP_OrganizationName () {}
   inline ASN1T_EXP_OrganizationName& getData () { return msgData; }
   inline const ASN1T_EXP_OrganizationName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OrganizationName");
   int toStream (const char* name = "OrganizationName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_OrganizationName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_OrganizationName& getCopy (ASN1T_EXP_OrganizationName* pDstData = 0);
   ASN1T_EXP_OrganizationName* newCopy ();

   inline ASN1C_EXP_OrganizationName& operator= (ASN1C_EXP_OrganizationName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_OrganizationName (OSCTXT* pctxt,
   ASN1T_EXP_OrganizationName pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_OrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_OrganizationName 
   (const char* name, const ASN1T_EXP_OrganizationName pvalue);

EXTERN int asn1PrtToStrm_EXP_OrganizationName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_OrganizationName pvalue);

EXTERN OSBOOL asn1Compare_EXP_OrganizationName (const char* name, 
   ASN1T_EXP_OrganizationName* pValue, ASN1T_EXP_OrganizationName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_OrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationName pSrcValue, ASN1T_EXP_OrganizationName* pDstValue);

EXTERN void asn1Free_EXP_OrganizationName (OSCTXT *pctxt, 
   ASN1T_EXP_OrganizationName pvalue);

/**************************************************************/
/*                                                            */
/*  NumericUserIdentifier                                     */
/*                                                            */
/**************************************************************/
/*
 see also teletex-organization-name

NumericUserIdentifier ::= NumericString (SIZE (1..ub-numeric-user-id-length))
*/
#define TV_EXP_NumericUserIdentifier	(TM_UNIV|TM_PRIM|18)

typedef const char* ASN1T_EXP_NumericUserIdentifier;

class EXTERN ASN1C_EXP_NumericUserIdentifier :
public ASN1CType
{
protected:
   ASN1T_EXP_NumericUserIdentifier& msgData;
public:
   ASN1C_EXP_NumericUserIdentifier (ASN1T_EXP_NumericUserIdentifier& data);
   ASN1C_EXP_NumericUserIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_NumericUserIdentifier& data);
   ASN1C_EXP_NumericUserIdentifier (OSRTContext &context
      , ASN1T_EXP_NumericUserIdentifier& data);
   ASN1C_EXP_NumericUserIdentifier (ASN1C_EXP_NumericUserIdentifier& original);
   virtual ~ASN1C_EXP_NumericUserIdentifier () {}
   inline ASN1T_EXP_NumericUserIdentifier& getData () { return msgData; }
   inline const ASN1T_EXP_NumericUserIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "NumericUserIdentifier");
   int toStream (const char* name = "NumericUserIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_NumericUserIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_NumericUserIdentifier& getCopy (ASN1T_EXP_NumericUserIdentifier* pDstData = 0);
   ASN1T_EXP_NumericUserIdentifier* newCopy ();

   inline ASN1C_EXP_NumericUserIdentifier& operator= (ASN1C_EXP_NumericUserIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_NumericUserIdentifier (OSCTXT* pctxt,
   ASN1T_EXP_NumericUserIdentifier pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_NumericUserIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_NumericUserIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_NumericUserIdentifier 
   (const char* name, const ASN1T_EXP_NumericUserIdentifier pvalue);

EXTERN int asn1PrtToStrm_EXP_NumericUserIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_NumericUserIdentifier pvalue);

EXTERN OSBOOL asn1Compare_EXP_NumericUserIdentifier (const char* name, 
   ASN1T_EXP_NumericUserIdentifier* pValue, 
   ASN1T_EXP_NumericUserIdentifier* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_NumericUserIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_NumericUserIdentifier pSrcValue, ASN1T_EXP_NumericUserIdentifier*
    pDstValue);

EXTERN void asn1Free_EXP_NumericUserIdentifier (OSCTXT *pctxt, 
   ASN1T_EXP_NumericUserIdentifier pvalue);

/**************************************************************/
/*                                                            */
/*  OrganizationalUnitName                                    */
/*                                                            */
/**************************************************************/
/*
 see also teletex-organizational-unit-names

OrganizationalUnitName ::= PrintableString (SIZE (1..ub-organizational-unit-name-length))
*/
#define TV_EXP_OrganizationalUnitName	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_EXP_OrganizationalUnitName;

class EXTERN ASN1C_EXP_OrganizationalUnitName :
public ASN1CType
{
protected:
   ASN1T_EXP_OrganizationalUnitName& msgData;
public:
   ASN1C_EXP_OrganizationalUnitName (ASN1T_EXP_OrganizationalUnitName& data);
   ASN1C_EXP_OrganizationalUnitName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_OrganizationalUnitName& data);
   ASN1C_EXP_OrganizationalUnitName (OSRTContext &context
      , ASN1T_EXP_OrganizationalUnitName& data);
   ASN1C_EXP_OrganizationalUnitName (ASN1C_EXP_OrganizationalUnitName& original);
   virtual ~ASN1C_EXP_OrganizationalUnitName () {}
   inline ASN1T_EXP_OrganizationalUnitName& getData () { return msgData; }
   inline const ASN1T_EXP_OrganizationalUnitName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OrganizationalUnitName");
   int toStream (const char* name = "OrganizationalUnitName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_OrganizationalUnitName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_OrganizationalUnitName& getCopy (ASN1T_EXP_OrganizationalUnitName* pDstData = 0);
   ASN1T_EXP_OrganizationalUnitName* newCopy ();

   inline ASN1C_EXP_OrganizationalUnitName& operator= (ASN1C_EXP_OrganizationalUnitName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_OrganizationalUnitName (OSCTXT* pctxt,
   ASN1T_EXP_OrganizationalUnitName pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_OrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationalUnitName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_OrganizationalUnitName 
   (const char* name, const ASN1T_EXP_OrganizationalUnitName pvalue);

EXTERN int asn1PrtToStrm_EXP_OrganizationalUnitName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_OrganizationalUnitName pvalue);

EXTERN OSBOOL asn1Compare_EXP_OrganizationalUnitName (const char* name, 
   ASN1T_EXP_OrganizationalUnitName* pValue, 
   ASN1T_EXP_OrganizationalUnitName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_OrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationalUnitName pSrcValue, ASN1T_EXP_OrganizationalUnitName
   * pDstValue);

EXTERN void asn1Free_EXP_OrganizationalUnitName (OSCTXT *pctxt, 
   ASN1T_EXP_OrganizationalUnitName pvalue);

/**************************************************************/
/*                                                            */
/*  CommonName                                                */
/*                                                            */
/**************************************************************/
/*
CommonName ::= PrintableString (SIZE (1..ub-common-name-length))
*/
#define TV_EXP_CommonName	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_EXP_CommonName;

class EXTERN ASN1C_EXP_CommonName :
public ASN1CType
{
protected:
   ASN1T_EXP_CommonName& msgData;
public:
   ASN1C_EXP_CommonName (ASN1T_EXP_CommonName& data);
   ASN1C_EXP_CommonName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_CommonName& data);
   ASN1C_EXP_CommonName (OSRTContext &context, ASN1T_EXP_CommonName& data);
   ASN1C_EXP_CommonName (ASN1C_EXP_CommonName& original);
   virtual ~ASN1C_EXP_CommonName () {}
   inline ASN1T_EXP_CommonName& getData () { return msgData; }
   inline const ASN1T_EXP_CommonName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CommonName");
   int toStream (const char* name = "CommonName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_CommonName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_CommonName& getCopy (ASN1T_EXP_CommonName* pDstData = 0);
   ASN1T_EXP_CommonName* newCopy ();

   inline ASN1C_EXP_CommonName& operator= (ASN1C_EXP_CommonName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_CommonName (OSCTXT* pctxt,
   ASN1T_EXP_CommonName pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_CommonName (OSCTXT* pctxt, ASN1T_EXP_CommonName* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_CommonName 
   (const char* name, const ASN1T_EXP_CommonName pvalue);

EXTERN int asn1PrtToStrm_EXP_CommonName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_CommonName pvalue);

EXTERN OSBOOL asn1Compare_EXP_CommonName (const char* name, 
   ASN1T_EXP_CommonName* pValue, ASN1T_EXP_CommonName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_CommonName (OSCTXT* pctxt, ASN1T_EXP_CommonName pSrcValue, 
   ASN1T_EXP_CommonName* pDstValue);

EXTERN void asn1Free_EXP_CommonName (OSCTXT *pctxt, ASN1T_EXP_CommonName pvalue);

/**************************************************************/
/*                                                            */
/*  TeletexCommonName                                         */
/*                                                            */
/**************************************************************/
/*
TeletexCommonName ::= T61String (SIZE (1..ub-common-name-length))
*/
#define TV_EXP_TeletexCommonName	(TM_UNIV|TM_PRIM|20)

typedef const char* ASN1T_EXP_TeletexCommonName;

class EXTERN ASN1C_EXP_TeletexCommonName :
public ASN1CType
{
protected:
   ASN1T_EXP_TeletexCommonName& msgData;
public:
   ASN1C_EXP_TeletexCommonName (ASN1T_EXP_TeletexCommonName& data);
   ASN1C_EXP_TeletexCommonName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TeletexCommonName& data);
   ASN1C_EXP_TeletexCommonName (OSRTContext &context
      , ASN1T_EXP_TeletexCommonName& data);
   ASN1C_EXP_TeletexCommonName (ASN1C_EXP_TeletexCommonName& original);
   virtual ~ASN1C_EXP_TeletexCommonName () {}
   inline ASN1T_EXP_TeletexCommonName& getData () { return msgData; }
   inline const ASN1T_EXP_TeletexCommonName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TeletexCommonName");
   int toStream (const char* name = "TeletexCommonName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TeletexCommonName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TeletexCommonName& getCopy (ASN1T_EXP_TeletexCommonName* pDstData = 0);
   ASN1T_EXP_TeletexCommonName* newCopy ();

   inline ASN1C_EXP_TeletexCommonName& operator= (ASN1C_EXP_TeletexCommonName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TeletexCommonName (OSCTXT* pctxt,
   ASN1T_EXP_TeletexCommonName pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TeletexCommonName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexCommonName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_TeletexCommonName 
   (const char* name, const ASN1T_EXP_TeletexCommonName pvalue);

EXTERN int asn1PrtToStrm_EXP_TeletexCommonName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexCommonName pvalue);

EXTERN OSBOOL asn1Compare_EXP_TeletexCommonName (const char* name, 
   ASN1T_EXP_TeletexCommonName* pValue, 
   ASN1T_EXP_TeletexCommonName* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TeletexCommonName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexCommonName pSrcValue, ASN1T_EXP_TeletexCommonName*
    pDstValue);

EXTERN void asn1Free_EXP_TeletexCommonName (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexCommonName pvalue);

/**************************************************************/
/*                                                            */
/*  TeletexOrganizationName                                   */
/*                                                            */
/**************************************************************/
/*
TeletexOrganizationName ::= T61String (SIZE (1..ub-organization-name-length))
*/
#define TV_EXP_TeletexOrganizationName	(TM_UNIV|TM_PRIM|20)

typedef const char* ASN1T_EXP_TeletexOrganizationName;

class EXTERN ASN1C_EXP_TeletexOrganizationName :
public ASN1CType
{
protected:
   ASN1T_EXP_TeletexOrganizationName& msgData;
public:
   ASN1C_EXP_TeletexOrganizationName (ASN1T_EXP_TeletexOrganizationName& data);
   ASN1C_EXP_TeletexOrganizationName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TeletexOrganizationName& data);
   ASN1C_EXP_TeletexOrganizationName (OSRTContext &context
      , ASN1T_EXP_TeletexOrganizationName& data);
   ASN1C_EXP_TeletexOrganizationName (ASN1C_EXP_TeletexOrganizationName& original);
   virtual ~ASN1C_EXP_TeletexOrganizationName () {}
   inline ASN1T_EXP_TeletexOrganizationName& getData () { return msgData; }
   inline const ASN1T_EXP_TeletexOrganizationName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TeletexOrganizationName");
   int toStream (const char* name = "TeletexOrganizationName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TeletexOrganizationName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TeletexOrganizationName& getCopy (ASN1T_EXP_TeletexOrganizationName* pDstData = 0);
   ASN1T_EXP_TeletexOrganizationName* newCopy ();

   inline ASN1C_EXP_TeletexOrganizationName& operator= (ASN1C_EXP_TeletexOrganizationName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TeletexOrganizationName (OSCTXT* pctxt,
   ASN1T_EXP_TeletexOrganizationName pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TeletexOrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_TeletexOrganizationName 
   (const char* name, const ASN1T_EXP_TeletexOrganizationName pvalue);

EXTERN int asn1PrtToStrm_EXP_TeletexOrganizationName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexOrganizationName pvalue);

EXTERN OSBOOL asn1Compare_EXP_TeletexOrganizationName (const char* name, 
   ASN1T_EXP_TeletexOrganizationName* pValue, 
   ASN1T_EXP_TeletexOrganizationName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TeletexOrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationName pSrcValue, 
   ASN1T_EXP_TeletexOrganizationName* pDstValue);

EXTERN void asn1Free_EXP_TeletexOrganizationName (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexOrganizationName pvalue);

/**************************************************************/
/*                                                            */
/*  TeletexOrganizationalUnitName                             */
/*                                                            */
/**************************************************************/
/*
TeletexOrganizationalUnitName ::= T61String (SIZE (1..ub-organizational-unit-name-length))
*/
#define TV_EXP_TeletexOrganizationalUnitName	(TM_UNIV|TM_PRIM|20)

typedef const char* ASN1T_EXP_TeletexOrganizationalUnitName;

class EXTERN ASN1C_EXP_TeletexOrganizationalUnitName :
public ASN1CType
{
protected:
   ASN1T_EXP_TeletexOrganizationalUnitName& msgData;
public:
   ASN1C_EXP_TeletexOrganizationalUnitName
       (ASN1T_EXP_TeletexOrganizationalUnitName& data);
   ASN1C_EXP_TeletexOrganizationalUnitName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TeletexOrganizationalUnitName& data);
   ASN1C_EXP_TeletexOrganizationalUnitName (OSRTContext &context
      , ASN1T_EXP_TeletexOrganizationalUnitName& data);
   ASN1C_EXP_TeletexOrganizationalUnitName (ASN1C_EXP_TeletexOrganizationalUnitName& original);
   virtual ~ASN1C_EXP_TeletexOrganizationalUnitName () {}
   inline ASN1T_EXP_TeletexOrganizationalUnitName& getData () { return msgData; }
   inline const ASN1T_EXP_TeletexOrganizationalUnitName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TeletexOrganizationalUnitName");
   int toStream (const char* name = "TeletexOrganizationalUnitName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TeletexOrganizationalUnitName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TeletexOrganizationalUnitName& getCopy (ASN1T_EXP_TeletexOrganizationalUnitName* pDstData = 0);
   ASN1T_EXP_TeletexOrganizationalUnitName* newCopy ();

   inline ASN1C_EXP_TeletexOrganizationalUnitName& operator= (ASN1C_EXP_TeletexOrganizationalUnitName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TeletexOrganizationalUnitName (OSCTXT* pctxt,
   ASN1T_EXP_TeletexOrganizationalUnitName pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TeletexOrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitName* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_TeletexOrganizationalUnitName 
   (const char* name, const ASN1T_EXP_TeletexOrganizationalUnitName pvalue);

EXTERN int asn1PrtToStrm_EXP_TeletexOrganizationalUnitName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexOrganizationalUnitName pvalue);

EXTERN OSBOOL asn1Compare_EXP_TeletexOrganizationalUnitName (const char* name, 
   ASN1T_EXP_TeletexOrganizationalUnitName* pValue, 
   ASN1T_EXP_TeletexOrganizationalUnitName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TeletexOrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitName pSrcValue, 
   ASN1T_EXP_TeletexOrganizationalUnitName* pDstValue);

EXTERN void asn1Free_EXP_TeletexOrganizationalUnitName (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitName pvalue);

/**************************************************************/
/*                                                            */
/*  PDSName                                                   */
/*                                                            */
/**************************************************************/
/*
PDSName ::= PrintableString (SIZE (1..ub-pds-name-length))
*/
#define TV_EXP_PDSName	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_EXP_PDSName;

class EXTERN ASN1C_EXP_PDSName :
public ASN1CType
{
protected:
   ASN1T_EXP_PDSName& msgData;
public:
   ASN1C_EXP_PDSName (ASN1T_EXP_PDSName& data);
   ASN1C_EXP_PDSName (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_PDSName& data);
   ASN1C_EXP_PDSName (OSRTContext &context, ASN1T_EXP_PDSName& data);
   ASN1C_EXP_PDSName (ASN1C_EXP_PDSName& original);
   virtual ~ASN1C_EXP_PDSName () {}
   inline ASN1T_EXP_PDSName& getData () { return msgData; }
   inline const ASN1T_EXP_PDSName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PDSName");
   int toStream (const char* name = "PDSName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PDSName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PDSName& getCopy (ASN1T_EXP_PDSName* pDstData = 0);
   ASN1T_EXP_PDSName* newCopy ();

   inline ASN1C_EXP_PDSName& operator= (ASN1C_EXP_PDSName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PDSName (OSCTXT* pctxt,
   ASN1T_EXP_PDSName pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PDSName (OSCTXT* pctxt, ASN1T_EXP_PDSName* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_PDSName (const char* name, const ASN1T_EXP_PDSName pvalue);

EXTERN int asn1PrtToStrm_EXP_PDSName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PDSName pvalue);

EXTERN OSBOOL asn1Compare_EXP_PDSName (const char* name, ASN1T_EXP_PDSName* pValue, 
   ASN1T_EXP_PDSName* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PDSName (OSCTXT* pctxt, ASN1T_EXP_PDSName pSrcValue, 
   ASN1T_EXP_PDSName* pDstValue);

EXTERN void asn1Free_EXP_PDSName (OSCTXT *pctxt, ASN1T_EXP_PDSName pvalue);

/**************************************************************/
/*                                                            */
/*  PDSParameter                                              */
/*                                                            */
/**************************************************************/
/*
PDSParameter ::= SET {
   printable-string PrintableString (SIZE (1..ub-pds-parameter-length)) OPTIONAL,
   teletex-string T61String (SIZE (1..ub-pds-parameter-length)) OPTIONAL
}
*/
#define TV_EXP_PDSParameter	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_PDSParameter;

struct EXTERN ASN1T_EXP_PDSParameter : public ASN1TPDU {
   struct {
      unsigned printable_stringPresent : 1;
      unsigned teletex_stringPresent : 1;
   } m;
   const char* printable_string;
   const char* teletex_string;
   ASN1T_EXP_PDSParameter ();
   ASN1T_EXP_PDSParameter (ASN1C_EXP_PDSParameter& srcData);
   ~ASN1T_EXP_PDSParameter ();
} ;

class EXTERN ASN1C_EXP_PDSParameter :
public ASN1CType
{
protected:
   ASN1T_EXP_PDSParameter& msgData;
public:
   ASN1C_EXP_PDSParameter (ASN1T_EXP_PDSParameter& data);
   ASN1C_EXP_PDSParameter (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PDSParameter& data);
   ASN1C_EXP_PDSParameter (OSRTContext &context, ASN1T_EXP_PDSParameter& data);
   ASN1C_EXP_PDSParameter (ASN1C_EXP_PDSParameter& original);
   virtual ~ASN1C_EXP_PDSParameter () {}
   inline ASN1T_EXP_PDSParameter& getData () { return msgData; }
   inline const ASN1T_EXP_PDSParameter& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PDSParameter");
   int toStream (const char* name = "PDSParameter");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PDSParameter* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PDSParameter& getCopy (ASN1T_EXP_PDSParameter* pDstData = 0);
   ASN1T_EXP_PDSParameter* newCopy ();

   inline ASN1C_EXP_PDSParameter& operator= (ASN1C_EXP_PDSParameter& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PDSParameter (OSCTXT* pctxt,
   ASN1T_EXP_PDSParameter *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PDSParameter (OSCTXT* pctxt, 
   ASN1T_EXP_PDSParameter* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_PDSParameter 
   (const char* name, const ASN1T_EXP_PDSParameter* pvalue);

EXTERN int asn1PrtToStrm_EXP_PDSParameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PDSParameter* pvalue);

EXTERN ASN1T_EXP_PDSParameter* new_ASN1T_EXP_PDSParameter (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PDSParameter (const char* name, 
   ASN1T_EXP_PDSParameter* pValue, ASN1T_EXP_PDSParameter* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PDSParameter (OSCTXT* pctxt, 
   ASN1T_EXP_PDSParameter* pSrcValue, ASN1T_EXP_PDSParameter* pDstValue);

EXTERN void asn1Init_EXP_PDSParameter (ASN1T_EXP_PDSParameter* pvalue);

EXTERN void asn1Free_EXP_PDSParameter (OSCTXT *pctxt, ASN1T_EXP_PDSParameter* pvalue);

/**************************************************************/
/*                                                            */
/*  PhysicalDeliveryOfficeName                                */
/*                                                            */
/**************************************************************/
/*
PhysicalDeliveryOfficeName ::= PDSParameter
*/
#define TV_EXP_PhysicalDeliveryOfficeName	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_PhysicalDeliveryOfficeName;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_PhysicalDeliveryOfficeName;

class EXTERN ASN1C_EXP_PhysicalDeliveryOfficeName :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_PhysicalDeliveryOfficeName
       (ASN1T_EXP_PhysicalDeliveryOfficeName& data);
   ASN1C_EXP_PhysicalDeliveryOfficeName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PhysicalDeliveryOfficeName& data);
   ASN1C_EXP_PhysicalDeliveryOfficeName (OSRTContext &context
      , ASN1T_EXP_PhysicalDeliveryOfficeName& data);
   ASN1C_EXP_PhysicalDeliveryOfficeName (ASN1C_EXP_PhysicalDeliveryOfficeName& original);
   virtual ~ASN1C_EXP_PhysicalDeliveryOfficeName () {}
   inline ASN1T_EXP_PhysicalDeliveryOfficeName& getData () { return msgData; }
   inline const ASN1T_EXP_PhysicalDeliveryOfficeName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PhysicalDeliveryOfficeName");
   int toStream (const char* name = "PhysicalDeliveryOfficeName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PhysicalDeliveryOfficeName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PhysicalDeliveryOfficeName& getCopy (ASN1T_EXP_PhysicalDeliveryOfficeName* pDstData = 0);
   ASN1T_EXP_PhysicalDeliveryOfficeName* newCopy ();

   inline ASN1C_EXP_PhysicalDeliveryOfficeName& operator= (ASN1C_EXP_PhysicalDeliveryOfficeName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PhysicalDeliveryOfficeName (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryOfficeName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PhysicalDeliveryOfficeName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_PhysicalDeliveryOfficeName 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue);

EXTERN int asn1PrtToStrm_EXP_PhysicalDeliveryOfficeName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue);

EXTERN ASN1T_EXP_PhysicalDeliveryOfficeName* 
   new_ASN1T_EXP_PhysicalDeliveryOfficeName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PhysicalDeliveryOfficeName (const char* name, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pValue, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PhysicalDeliveryOfficeName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pDstValue);

EXTERN void asn1Init_EXP_PhysicalDeliveryOfficeName (
   ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue);

EXTERN void asn1Free_EXP_PhysicalDeliveryOfficeName (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue);

/**************************************************************/
/*                                                            */
/*  PhysicalDeliveryOfficeNumber                              */
/*                                                            */
/**************************************************************/
/*
PhysicalDeliveryOfficeNumber ::= PDSParameter
*/
#define TV_EXP_PhysicalDeliveryOfficeNumber	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_PhysicalDeliveryOfficeNumber;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_PhysicalDeliveryOfficeNumber;

class EXTERN ASN1C_EXP_PhysicalDeliveryOfficeNumber :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_PhysicalDeliveryOfficeNumber
       (ASN1T_EXP_PhysicalDeliveryOfficeNumber& data);
   ASN1C_EXP_PhysicalDeliveryOfficeNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PhysicalDeliveryOfficeNumber& data);
   ASN1C_EXP_PhysicalDeliveryOfficeNumber (OSRTContext &context
      , ASN1T_EXP_PhysicalDeliveryOfficeNumber& data);
   ASN1C_EXP_PhysicalDeliveryOfficeNumber (ASN1C_EXP_PhysicalDeliveryOfficeNumber& original);
   virtual ~ASN1C_EXP_PhysicalDeliveryOfficeNumber () {}
   inline ASN1T_EXP_PhysicalDeliveryOfficeNumber& getData () { return msgData; }
   inline const ASN1T_EXP_PhysicalDeliveryOfficeNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PhysicalDeliveryOfficeNumber");
   int toStream (const char* name = "PhysicalDeliveryOfficeNumber");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PhysicalDeliveryOfficeNumber* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PhysicalDeliveryOfficeNumber& getCopy (ASN1T_EXP_PhysicalDeliveryOfficeNumber* pDstData = 0);
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* newCopy ();

   inline ASN1C_EXP_PhysicalDeliveryOfficeNumber& operator= (ASN1C_EXP_PhysicalDeliveryOfficeNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PhysicalDeliveryOfficeNumber (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryOfficeNumber *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PhysicalDeliveryOfficeNumber (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_PhysicalDeliveryOfficeNumber 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue);

EXTERN int asn1PrtToStrm_EXP_PhysicalDeliveryOfficeNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue);

EXTERN ASN1T_EXP_PhysicalDeliveryOfficeNumber* 
   new_ASN1T_EXP_PhysicalDeliveryOfficeNumber (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PhysicalDeliveryOfficeNumber (const char* name, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pValue, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PhysicalDeliveryOfficeNumber (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pDstValue);

EXTERN void asn1Init_EXP_PhysicalDeliveryOfficeNumber (
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue);

EXTERN void asn1Free_EXP_PhysicalDeliveryOfficeNumber (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtensionORAddressComponents                              */
/*                                                            */
/**************************************************************/
/*
ExtensionORAddressComponents ::= PDSParameter
*/
#define TV_EXP_ExtensionORAddressComponents	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_ExtensionORAddressComponents;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_ExtensionORAddressComponents;

class EXTERN ASN1C_EXP_ExtensionORAddressComponents :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_ExtensionORAddressComponents
       (ASN1T_EXP_ExtensionORAddressComponents& data);
   ASN1C_EXP_ExtensionORAddressComponents (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_ExtensionORAddressComponents& data);
   ASN1C_EXP_ExtensionORAddressComponents (OSRTContext &context
      , ASN1T_EXP_ExtensionORAddressComponents& data);
   ASN1C_EXP_ExtensionORAddressComponents (ASN1C_EXP_ExtensionORAddressComponents& original);
   virtual ~ASN1C_EXP_ExtensionORAddressComponents () {}
   inline ASN1T_EXP_ExtensionORAddressComponents& getData () { return msgData; }
   inline const ASN1T_EXP_ExtensionORAddressComponents& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtensionORAddressComponents");
   int toStream (const char* name = "ExtensionORAddressComponents");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_ExtensionORAddressComponents* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_ExtensionORAddressComponents& getCopy (ASN1T_EXP_ExtensionORAddressComponents* pDstData = 0);
   ASN1T_EXP_ExtensionORAddressComponents* newCopy ();

   inline ASN1C_EXP_ExtensionORAddressComponents& operator= (ASN1C_EXP_ExtensionORAddressComponents& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_ExtensionORAddressComponents (OSCTXT* pctxt,
   ASN1T_EXP_ExtensionORAddressComponents *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_ExtensionORAddressComponents (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionORAddressComponents* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_ExtensionORAddressComponents 
   (const char* name, const ASN1T_EXP_ExtensionORAddressComponents* pvalue);

EXTERN int asn1PrtToStrm_EXP_ExtensionORAddressComponents (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtensionORAddressComponents* pvalue);

EXTERN ASN1T_EXP_ExtensionORAddressComponents* 
   new_ASN1T_EXP_ExtensionORAddressComponents (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_ExtensionORAddressComponents (const char* name, 
   ASN1T_EXP_ExtensionORAddressComponents* pValue, 
   ASN1T_EXP_ExtensionORAddressComponents* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_ExtensionORAddressComponents (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionORAddressComponents* pSrcValue, 
   ASN1T_EXP_ExtensionORAddressComponents* pDstValue);

EXTERN void asn1Init_EXP_ExtensionORAddressComponents (
   ASN1T_EXP_ExtensionORAddressComponents* pvalue);

EXTERN void asn1Free_EXP_ExtensionORAddressComponents (OSCTXT *pctxt, 
   ASN1T_EXP_ExtensionORAddressComponents* pvalue);

/**************************************************************/
/*                                                            */
/*  PhysicalDeliveryPersonalName                              */
/*                                                            */
/**************************************************************/
/*
PhysicalDeliveryPersonalName ::= PDSParameter
*/
#define TV_EXP_PhysicalDeliveryPersonalName	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_PhysicalDeliveryPersonalName;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_PhysicalDeliveryPersonalName;

class EXTERN ASN1C_EXP_PhysicalDeliveryPersonalName :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_PhysicalDeliveryPersonalName
       (ASN1T_EXP_PhysicalDeliveryPersonalName& data);
   ASN1C_EXP_PhysicalDeliveryPersonalName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PhysicalDeliveryPersonalName& data);
   ASN1C_EXP_PhysicalDeliveryPersonalName (OSRTContext &context
      , ASN1T_EXP_PhysicalDeliveryPersonalName& data);
   ASN1C_EXP_PhysicalDeliveryPersonalName (ASN1C_EXP_PhysicalDeliveryPersonalName& original);
   virtual ~ASN1C_EXP_PhysicalDeliveryPersonalName () {}
   inline ASN1T_EXP_PhysicalDeliveryPersonalName& getData () { return msgData; }
   inline const ASN1T_EXP_PhysicalDeliveryPersonalName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PhysicalDeliveryPersonalName");
   int toStream (const char* name = "PhysicalDeliveryPersonalName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PhysicalDeliveryPersonalName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PhysicalDeliveryPersonalName& getCopy (ASN1T_EXP_PhysicalDeliveryPersonalName* pDstData = 0);
   ASN1T_EXP_PhysicalDeliveryPersonalName* newCopy ();

   inline ASN1C_EXP_PhysicalDeliveryPersonalName& operator= (ASN1C_EXP_PhysicalDeliveryPersonalName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PhysicalDeliveryPersonalName (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryPersonalName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PhysicalDeliveryPersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_PhysicalDeliveryPersonalName 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue);

EXTERN int asn1PrtToStrm_EXP_PhysicalDeliveryPersonalName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue);

EXTERN ASN1T_EXP_PhysicalDeliveryPersonalName* 
   new_ASN1T_EXP_PhysicalDeliveryPersonalName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PhysicalDeliveryPersonalName (const char* name, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pValue, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PhysicalDeliveryPersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pDstValue);

EXTERN void asn1Init_EXP_PhysicalDeliveryPersonalName (
   ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue);

EXTERN void asn1Free_EXP_PhysicalDeliveryPersonalName (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue);

/**************************************************************/
/*                                                            */
/*  PhysicalDeliveryOrganizationName                          */
/*                                                            */
/**************************************************************/
/*
PhysicalDeliveryOrganizationName ::= PDSParameter
*/
#define TV_EXP_PhysicalDeliveryOrganizationName	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_PhysicalDeliveryOrganizationName;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_PhysicalDeliveryOrganizationName;

class EXTERN ASN1C_EXP_PhysicalDeliveryOrganizationName :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_PhysicalDeliveryOrganizationName
       (ASN1T_EXP_PhysicalDeliveryOrganizationName& data);
   ASN1C_EXP_PhysicalDeliveryOrganizationName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PhysicalDeliveryOrganizationName& data);
   ASN1C_EXP_PhysicalDeliveryOrganizationName (OSRTContext &context
      , ASN1T_EXP_PhysicalDeliveryOrganizationName& data);
   ASN1C_EXP_PhysicalDeliveryOrganizationName (ASN1C_EXP_PhysicalDeliveryOrganizationName& original);
   virtual ~ASN1C_EXP_PhysicalDeliveryOrganizationName () {}
   inline ASN1T_EXP_PhysicalDeliveryOrganizationName& getData () { return msgData; }
   inline const ASN1T_EXP_PhysicalDeliveryOrganizationName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PhysicalDeliveryOrganizationName");
   int toStream (const char* name = "PhysicalDeliveryOrganizationName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PhysicalDeliveryOrganizationName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PhysicalDeliveryOrganizationName& getCopy (ASN1T_EXP_PhysicalDeliveryOrganizationName* pDstData = 0);
   ASN1T_EXP_PhysicalDeliveryOrganizationName* newCopy ();

   inline ASN1C_EXP_PhysicalDeliveryOrganizationName& operator= (ASN1C_EXP_PhysicalDeliveryOrganizationName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PhysicalDeliveryOrganizationName (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryOrganizationName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PhysicalDeliveryOrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_PhysicalDeliveryOrganizationName 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue);

EXTERN int asn1PrtToStrm_EXP_PhysicalDeliveryOrganizationName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue);

EXTERN ASN1T_EXP_PhysicalDeliveryOrganizationName* 
   new_ASN1T_EXP_PhysicalDeliveryOrganizationName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PhysicalDeliveryOrganizationName (const char* name, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pValue, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PhysicalDeliveryOrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pDstValue);

EXTERN void asn1Init_EXP_PhysicalDeliveryOrganizationName (
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue);

EXTERN void asn1Free_EXP_PhysicalDeliveryOrganizationName (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtensionPhysicalDeliveryAddressComponents                */
/*                                                            */
/**************************************************************/
/*
ExtensionPhysicalDeliveryAddressComponents ::= PDSParameter
*/
#define TV_EXP_ExtensionPhysicalDeliveryAddressComponents	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents;

class EXTERN ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents
       (ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& data);
   ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& data);
   ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents (OSRTContext &context
      , ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& data);
   ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents (ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents& original);
   virtual ~ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents () {}
   inline ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& getData () { return msgData; }
   inline const ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtensionPhysicalDeliveryAddressComponents");
   int toStream (const char* name = "ExtensionPhysicalDeliveryAddressComponents");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents& getCopy (ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pDstData = 0);
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* newCopy ();

   inline ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents& operator= (ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_ExtensionPhysicalDeliveryAddressComponents (OSCTXT* pctxt,
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_ExtensionPhysicalDeliveryAddressComponents (
   OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_ExtensionPhysicalDeliveryAddressComponents 
   (const char* name, const ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue);

EXTERN int asn1PrtToStrm_EXP_ExtensionPhysicalDeliveryAddressComponents (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue);

EXTERN ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* 
   new_ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_EXP_ExtensionPhysicalDeliveryAddressComponents (
   const char* name, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pValue, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_ExtensionPhysicalDeliveryAddressComponents (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pSrcValue, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pDstValue);

EXTERN void asn1Init_EXP_ExtensionPhysicalDeliveryAddressComponents (
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue);

EXTERN void asn1Free_EXP_ExtensionPhysicalDeliveryAddressComponents (OSCTXT *pctxt, 
   ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue);

/**************************************************************/
/*                                                            */
/*  StreetAddress                                             */
/*                                                            */
/**************************************************************/
/*
StreetAddress ::= PDSParameter
*/
#define TV_EXP_StreetAddress	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_StreetAddress;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_StreetAddress;

class EXTERN ASN1C_EXP_StreetAddress :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_StreetAddress (ASN1T_EXP_StreetAddress& data);
   ASN1C_EXP_StreetAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_StreetAddress& data);
   ASN1C_EXP_StreetAddress (OSRTContext &context, ASN1T_EXP_StreetAddress& data
      );
   ASN1C_EXP_StreetAddress (ASN1C_EXP_StreetAddress& original);
   virtual ~ASN1C_EXP_StreetAddress () {}
   inline ASN1T_EXP_StreetAddress& getData () { return msgData; }
   inline const ASN1T_EXP_StreetAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "StreetAddress");
   int toStream (const char* name = "StreetAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_StreetAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_StreetAddress& getCopy (ASN1T_EXP_StreetAddress* pDstData = 0);
   ASN1T_EXP_StreetAddress* newCopy ();

   inline ASN1C_EXP_StreetAddress& operator= (ASN1C_EXP_StreetAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_StreetAddress (OSCTXT* pctxt,
   ASN1T_EXP_StreetAddress *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_StreetAddress (OSCTXT* pctxt, 
   ASN1T_EXP_StreetAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_StreetAddress 
   (const char* name, const ASN1T_EXP_StreetAddress* pvalue);

EXTERN int asn1PrtToStrm_EXP_StreetAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_StreetAddress* pvalue);

EXTERN ASN1T_EXP_StreetAddress* new_ASN1T_EXP_StreetAddress (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_EXP_StreetAddress (const char* name, 
   ASN1T_EXP_StreetAddress* pValue, ASN1T_EXP_StreetAddress* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_StreetAddress (OSCTXT* pctxt, 
   ASN1T_EXP_StreetAddress* pSrcValue, ASN1T_EXP_StreetAddress* pDstValue);

EXTERN void asn1Init_EXP_StreetAddress (ASN1T_EXP_StreetAddress* pvalue);

EXTERN void asn1Free_EXP_StreetAddress (OSCTXT *pctxt, 
   ASN1T_EXP_StreetAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  PostOfficeBoxAddress                                      */
/*                                                            */
/**************************************************************/
/*
PostOfficeBoxAddress ::= PDSParameter
*/
#define TV_EXP_PostOfficeBoxAddress	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_PostOfficeBoxAddress;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_PostOfficeBoxAddress;

class EXTERN ASN1C_EXP_PostOfficeBoxAddress :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_PostOfficeBoxAddress (ASN1T_EXP_PostOfficeBoxAddress& data);
   ASN1C_EXP_PostOfficeBoxAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PostOfficeBoxAddress& data);
   ASN1C_EXP_PostOfficeBoxAddress (OSRTContext &context
      , ASN1T_EXP_PostOfficeBoxAddress& data);
   ASN1C_EXP_PostOfficeBoxAddress (ASN1C_EXP_PostOfficeBoxAddress& original);
   virtual ~ASN1C_EXP_PostOfficeBoxAddress () {}
   inline ASN1T_EXP_PostOfficeBoxAddress& getData () { return msgData; }
   inline const ASN1T_EXP_PostOfficeBoxAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PostOfficeBoxAddress");
   int toStream (const char* name = "PostOfficeBoxAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PostOfficeBoxAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PostOfficeBoxAddress& getCopy (ASN1T_EXP_PostOfficeBoxAddress* pDstData = 0);
   ASN1T_EXP_PostOfficeBoxAddress* newCopy ();

   inline ASN1C_EXP_PostOfficeBoxAddress& operator= (ASN1C_EXP_PostOfficeBoxAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PostOfficeBoxAddress (OSCTXT* pctxt,
   ASN1T_EXP_PostOfficeBoxAddress *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PostOfficeBoxAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PostOfficeBoxAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_PostOfficeBoxAddress 
   (const char* name, const ASN1T_EXP_PostOfficeBoxAddress* pvalue);

EXTERN int asn1PrtToStrm_EXP_PostOfficeBoxAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PostOfficeBoxAddress* pvalue);

EXTERN ASN1T_EXP_PostOfficeBoxAddress* 
   new_ASN1T_EXP_PostOfficeBoxAddress (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PostOfficeBoxAddress (const char* name, 
   ASN1T_EXP_PostOfficeBoxAddress* pValue, 
   ASN1T_EXP_PostOfficeBoxAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PostOfficeBoxAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PostOfficeBoxAddress* pSrcValue, ASN1T_EXP_PostOfficeBoxAddress*
    pDstValue);

EXTERN void asn1Init_EXP_PostOfficeBoxAddress (ASN1T_EXP_PostOfficeBoxAddress* pvalue);

EXTERN void asn1Free_EXP_PostOfficeBoxAddress (OSCTXT *pctxt, 
   ASN1T_EXP_PostOfficeBoxAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  PosteRestanteAddress                                      */
/*                                                            */
/**************************************************************/
/*
PosteRestanteAddress ::= PDSParameter
*/
#define TV_EXP_PosteRestanteAddress	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_PosteRestanteAddress;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_PosteRestanteAddress;

class EXTERN ASN1C_EXP_PosteRestanteAddress :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_PosteRestanteAddress (ASN1T_EXP_PosteRestanteAddress& data);
   ASN1C_EXP_PosteRestanteAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PosteRestanteAddress& data);
   ASN1C_EXP_PosteRestanteAddress (OSRTContext &context
      , ASN1T_EXP_PosteRestanteAddress& data);
   ASN1C_EXP_PosteRestanteAddress (ASN1C_EXP_PosteRestanteAddress& original);
   virtual ~ASN1C_EXP_PosteRestanteAddress () {}
   inline ASN1T_EXP_PosteRestanteAddress& getData () { return msgData; }
   inline const ASN1T_EXP_PosteRestanteAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PosteRestanteAddress");
   int toStream (const char* name = "PosteRestanteAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PosteRestanteAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PosteRestanteAddress& getCopy (ASN1T_EXP_PosteRestanteAddress* pDstData = 0);
   ASN1T_EXP_PosteRestanteAddress* newCopy ();

   inline ASN1C_EXP_PosteRestanteAddress& operator= (ASN1C_EXP_PosteRestanteAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PosteRestanteAddress (OSCTXT* pctxt,
   ASN1T_EXP_PosteRestanteAddress *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PosteRestanteAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PosteRestanteAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_PosteRestanteAddress 
   (const char* name, const ASN1T_EXP_PosteRestanteAddress* pvalue);

EXTERN int asn1PrtToStrm_EXP_PosteRestanteAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PosteRestanteAddress* pvalue);

EXTERN ASN1T_EXP_PosteRestanteAddress* 
   new_ASN1T_EXP_PosteRestanteAddress (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PosteRestanteAddress (const char* name, 
   ASN1T_EXP_PosteRestanteAddress* pValue, 
   ASN1T_EXP_PosteRestanteAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PosteRestanteAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PosteRestanteAddress* pSrcValue, ASN1T_EXP_PosteRestanteAddress*
    pDstValue);

EXTERN void asn1Init_EXP_PosteRestanteAddress (ASN1T_EXP_PosteRestanteAddress* pvalue);

EXTERN void asn1Free_EXP_PosteRestanteAddress (OSCTXT *pctxt, 
   ASN1T_EXP_PosteRestanteAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  UniquePostalName                                          */
/*                                                            */
/**************************************************************/
/*
UniquePostalName ::= PDSParameter
*/
#define TV_EXP_UniquePostalName	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_UniquePostalName;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_UniquePostalName;

class EXTERN ASN1C_EXP_UniquePostalName :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_UniquePostalName (ASN1T_EXP_UniquePostalName& data);
   ASN1C_EXP_UniquePostalName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_UniquePostalName& data);
   ASN1C_EXP_UniquePostalName (OSRTContext &context
      , ASN1T_EXP_UniquePostalName& data);
   ASN1C_EXP_UniquePostalName (ASN1C_EXP_UniquePostalName& original);
   virtual ~ASN1C_EXP_UniquePostalName () {}
   inline ASN1T_EXP_UniquePostalName& getData () { return msgData; }
   inline const ASN1T_EXP_UniquePostalName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UniquePostalName");
   int toStream (const char* name = "UniquePostalName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_UniquePostalName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_UniquePostalName& getCopy (ASN1T_EXP_UniquePostalName* pDstData = 0);
   ASN1T_EXP_UniquePostalName* newCopy ();

   inline ASN1C_EXP_UniquePostalName& operator= (ASN1C_EXP_UniquePostalName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_UniquePostalName (OSCTXT* pctxt,
   ASN1T_EXP_UniquePostalName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_UniquePostalName (OSCTXT* pctxt, 
   ASN1T_EXP_UniquePostalName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_UniquePostalName 
   (const char* name, const ASN1T_EXP_UniquePostalName* pvalue);

EXTERN int asn1PrtToStrm_EXP_UniquePostalName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_UniquePostalName* pvalue);

EXTERN ASN1T_EXP_UniquePostalName* 
   new_ASN1T_EXP_UniquePostalName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_UniquePostalName (const char* name, 
   ASN1T_EXP_UniquePostalName* pValue, ASN1T_EXP_UniquePostalName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_UniquePostalName (OSCTXT* pctxt, 
   ASN1T_EXP_UniquePostalName* pSrcValue, ASN1T_EXP_UniquePostalName*
    pDstValue);

EXTERN void asn1Init_EXP_UniquePostalName (ASN1T_EXP_UniquePostalName* pvalue);

EXTERN void asn1Free_EXP_UniquePostalName (OSCTXT *pctxt, 
   ASN1T_EXP_UniquePostalName* pvalue);

/**************************************************************/
/*                                                            */
/*  LocalPostalAttributes                                     */
/*                                                            */
/**************************************************************/
/*
LocalPostalAttributes ::= PDSParameter
*/
#define TV_EXP_LocalPostalAttributes	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_LocalPostalAttributes;

typedef ASN1T_EXP_PDSParameter ASN1T_EXP_LocalPostalAttributes;

class EXTERN ASN1C_EXP_LocalPostalAttributes :
   public ASN1C_EXP_PDSParameter
{
protected:
public:
   ASN1C_EXP_LocalPostalAttributes (ASN1T_EXP_LocalPostalAttributes& data);
   ASN1C_EXP_LocalPostalAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_LocalPostalAttributes& data);
   ASN1C_EXP_LocalPostalAttributes (OSRTContext &context
      , ASN1T_EXP_LocalPostalAttributes& data);
   ASN1C_EXP_LocalPostalAttributes (ASN1C_EXP_LocalPostalAttributes& original);
   virtual ~ASN1C_EXP_LocalPostalAttributes () {}
   inline ASN1T_EXP_LocalPostalAttributes& getData () { return msgData; }
   inline const ASN1T_EXP_LocalPostalAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "LocalPostalAttributes");
   int toStream (const char* name = "LocalPostalAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_LocalPostalAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_LocalPostalAttributes& getCopy (ASN1T_EXP_LocalPostalAttributes* pDstData = 0);
   ASN1T_EXP_LocalPostalAttributes* newCopy ();

   inline ASN1C_EXP_LocalPostalAttributes& operator= (ASN1C_EXP_LocalPostalAttributes& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_LocalPostalAttributes (OSCTXT* pctxt,
   ASN1T_EXP_LocalPostalAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_LocalPostalAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_LocalPostalAttributes* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_LocalPostalAttributes 
   (const char* name, const ASN1T_EXP_LocalPostalAttributes* pvalue);

EXTERN int asn1PrtToStrm_EXP_LocalPostalAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_LocalPostalAttributes* pvalue);

EXTERN ASN1T_EXP_LocalPostalAttributes* 
   new_ASN1T_EXP_LocalPostalAttributes (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_LocalPostalAttributes (const char* name, 
   ASN1T_EXP_LocalPostalAttributes* pValue, 
   ASN1T_EXP_LocalPostalAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_LocalPostalAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_LocalPostalAttributes* pSrcValue, ASN1T_EXP_LocalPostalAttributes*
    pDstValue);

EXTERN void asn1Init_EXP_LocalPostalAttributes (
   ASN1T_EXP_LocalPostalAttributes* pvalue);

EXTERN void asn1Free_EXP_LocalPostalAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_LocalPostalAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  TerminalType                                              */
/*                                                            */
/**************************************************************/
/*
TerminalType ::= INTEGER { telex(3), teletex(4), g3-facsimile(5), g4-facsimile(6), ia5-terminal(7), videotex(8) } (0..ub-integer-options)
*/
#define TV_EXP_TerminalType	(TM_UNIV|TM_PRIM|2)

struct EXTERN EXP_TerminalType {
   enum Root {
      telex = 3,
      teletex = 4,
      g3_facsimile = 5,
      g4_facsimile = 6,
      ia5_terminal = 7,
      videotex = 8
   } ;
} ;

typedef OSUINT16 ASN1T_EXP_TerminalType;

class EXTERN ASN1C_EXP_TerminalType :
public ASN1CType
{
protected:
   ASN1T_EXP_TerminalType& msgData;
public:
   ASN1C_EXP_TerminalType (ASN1T_EXP_TerminalType& data);
   ASN1C_EXP_TerminalType (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TerminalType& data);
   ASN1C_EXP_TerminalType (OSRTContext &context, ASN1T_EXP_TerminalType& data);
   virtual ~ASN1C_EXP_TerminalType () {}
   inline ASN1T_EXP_TerminalType& getData () { return msgData; }
   inline const ASN1T_EXP_TerminalType& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TerminalType");
   int toStream (const char* name = "TerminalType");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TerminalType* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_EXP_TerminalType (OSCTXT* pctxt,
   ASN1T_EXP_TerminalType *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TerminalType (OSCTXT* pctxt, 
   ASN1T_EXP_TerminalType* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_TerminalType 
   (const char* name, const ASN1T_EXP_TerminalType* pvalue);

EXTERN int asn1PrtToStrm_EXP_TerminalType (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TerminalType* pvalue);

EXTERN ASN1T_EXP_TerminalType* new_ASN1T_EXP_TerminalType (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_TerminalType (const char* name, 
   ASN1T_EXP_TerminalType* pValue, ASN1T_EXP_TerminalType* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  X520countryName                                           */
/*                                                            */
/**************************************************************/
/*
X520countryName ::= PrintableString (SIZE (2))
*/
#define TV_EXP_X520countryName	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_EXP_X520countryName;

class EXTERN ASN1C_EXP_X520countryName :
public ASN1CType
{
protected:
   ASN1T_EXP_X520countryName& msgData;
public:
   ASN1C_EXP_X520countryName (ASN1T_EXP_X520countryName& data);
   ASN1C_EXP_X520countryName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520countryName& data);
   ASN1C_EXP_X520countryName (OSRTContext &context
      , ASN1T_EXP_X520countryName& data);
   ASN1C_EXP_X520countryName (ASN1C_EXP_X520countryName& original);
   virtual ~ASN1C_EXP_X520countryName () {}
   inline ASN1T_EXP_X520countryName& getData () { return msgData; }
   inline const ASN1T_EXP_X520countryName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520countryName");
   int toStream (const char* name = "X520countryName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520countryName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520countryName& getCopy (ASN1T_EXP_X520countryName* pDstData = 0);
   ASN1T_EXP_X520countryName* newCopy ();

   inline ASN1C_EXP_X520countryName& operator= (ASN1C_EXP_X520countryName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520countryName (OSCTXT* pctxt,
   ASN1T_EXP_X520countryName pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520countryName (OSCTXT* pctxt, 
   ASN1T_EXP_X520countryName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520countryName 
   (const char* name, const ASN1T_EXP_X520countryName pvalue);

EXTERN int asn1PrtToStrm_EXP_X520countryName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520countryName pvalue);

EXTERN OSBOOL asn1Compare_EXP_X520countryName (const char* name, 
   ASN1T_EXP_X520countryName* pValue, ASN1T_EXP_X520countryName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520countryName (OSCTXT* pctxt, 
   ASN1T_EXP_X520countryName pSrcValue, ASN1T_EXP_X520countryName* pDstValue);

EXTERN void asn1Free_EXP_X520countryName (OSCTXT *pctxt, 
   ASN1T_EXP_X520countryName pvalue);

/**************************************************************/
/*                                                            */
/*  X520SerialNumber                                          */
/*                                                            */
/**************************************************************/
/*
X520SerialNumber ::= PrintableString (SIZE (1..ub-serial-number))
*/
#define TV_EXP_X520SerialNumber	(TM_UNIV|TM_PRIM|19)

typedef const char* ASN1T_EXP_X520SerialNumber;

class EXTERN ASN1C_EXP_X520SerialNumber :
public ASN1CType
{
protected:
   ASN1T_EXP_X520SerialNumber& msgData;
public:
   ASN1C_EXP_X520SerialNumber (ASN1T_EXP_X520SerialNumber& data);
   ASN1C_EXP_X520SerialNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520SerialNumber& data);
   ASN1C_EXP_X520SerialNumber (OSRTContext &context
      , ASN1T_EXP_X520SerialNumber& data);
   ASN1C_EXP_X520SerialNumber (ASN1C_EXP_X520SerialNumber& original);
   virtual ~ASN1C_EXP_X520SerialNumber () {}
   inline ASN1T_EXP_X520SerialNumber& getData () { return msgData; }
   inline const ASN1T_EXP_X520SerialNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520SerialNumber");
   int toStream (const char* name = "X520SerialNumber");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520SerialNumber* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520SerialNumber& getCopy (ASN1T_EXP_X520SerialNumber* pDstData = 0);
   ASN1T_EXP_X520SerialNumber* newCopy ();

   inline ASN1C_EXP_X520SerialNumber& operator= (ASN1C_EXP_X520SerialNumber& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520SerialNumber (OSCTXT* pctxt,
   ASN1T_EXP_X520SerialNumber pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520SerialNumber (OSCTXT* pctxt, 
   ASN1T_EXP_X520SerialNumber* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520SerialNumber 
   (const char* name, const ASN1T_EXP_X520SerialNumber pvalue);

EXTERN int asn1PrtToStrm_EXP_X520SerialNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520SerialNumber pvalue);

EXTERN OSBOOL asn1Compare_EXP_X520SerialNumber (const char* name, 
   ASN1T_EXP_X520SerialNumber* pValue, ASN1T_EXP_X520SerialNumber* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520SerialNumber (OSCTXT* pctxt, 
   ASN1T_EXP_X520SerialNumber pSrcValue, ASN1T_EXP_X520SerialNumber* pDstValue);

EXTERN void asn1Free_EXP_X520SerialNumber (OSCTXT *pctxt, 
   ASN1T_EXP_X520SerialNumber pvalue);

/**************************************************************/
/*                                                            */
/*  DomainComponent                                           */
/*                                                            */
/**************************************************************/
/*
DomainComponent ::= IA5String
*/
#define TV_EXP_DomainComponent	(TM_UNIV|TM_PRIM|22)

typedef const char* ASN1T_EXP_DomainComponent;

class EXTERN ASN1C_EXP_DomainComponent :
public ASN1CType
{
protected:
   ASN1T_EXP_DomainComponent& msgData;
public:
   ASN1C_EXP_DomainComponent (ASN1T_EXP_DomainComponent& data);
   ASN1C_EXP_DomainComponent (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_DomainComponent& data);
   ASN1C_EXP_DomainComponent (OSRTContext &context
      , ASN1T_EXP_DomainComponent& data);
   ASN1C_EXP_DomainComponent (ASN1C_EXP_DomainComponent& original);
   virtual ~ASN1C_EXP_DomainComponent () {}
   inline ASN1T_EXP_DomainComponent& getData () { return msgData; }
   inline const ASN1T_EXP_DomainComponent& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DomainComponent");
   int toStream (const char* name = "DomainComponent");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_DomainComponent* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_DomainComponent& getCopy (ASN1T_EXP_DomainComponent* pDstData = 0);
   ASN1T_EXP_DomainComponent* newCopy ();

   inline ASN1C_EXP_DomainComponent& operator= (ASN1C_EXP_DomainComponent& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_DomainComponent (OSCTXT* pctxt,
   ASN1T_EXP_DomainComponent pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_DomainComponent (OSCTXT* pctxt, 
   ASN1T_EXP_DomainComponent* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_DomainComponent 
   (const char* name, const ASN1T_EXP_DomainComponent pvalue);

EXTERN int asn1PrtToStrm_EXP_DomainComponent (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_DomainComponent pvalue);

EXTERN OSBOOL asn1Compare_EXP_DomainComponent (const char* name, 
   ASN1T_EXP_DomainComponent* pValue, ASN1T_EXP_DomainComponent* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_DomainComponent (OSCTXT* pctxt, 
   ASN1T_EXP_DomainComponent pSrcValue, ASN1T_EXP_DomainComponent* pDstValue);

EXTERN void asn1Free_EXP_DomainComponent (OSCTXT *pctxt, 
   ASN1T_EXP_DomainComponent pvalue);

/**************************************************************/
/*                                                            */
/*  EmailAddress                                              */
/*                                                            */
/**************************************************************/
/*
EmailAddress ::= IA5String (SIZE (1..ub-emailaddress-length))
*/
#define TV_EXP_EmailAddress	(TM_UNIV|TM_PRIM|22)

typedef const char* ASN1T_EXP_EmailAddress;

class EXTERN ASN1C_EXP_EmailAddress :
public ASN1CType
{
protected:
   ASN1T_EXP_EmailAddress& msgData;
public:
   ASN1C_EXP_EmailAddress (ASN1T_EXP_EmailAddress& data);
   ASN1C_EXP_EmailAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_EmailAddress& data);
   ASN1C_EXP_EmailAddress (OSRTContext &context, ASN1T_EXP_EmailAddress& data);
   ASN1C_EXP_EmailAddress (ASN1C_EXP_EmailAddress& original);
   virtual ~ASN1C_EXP_EmailAddress () {}
   inline ASN1T_EXP_EmailAddress& getData () { return msgData; }
   inline const ASN1T_EXP_EmailAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "EmailAddress");
   int toStream (const char* name = "EmailAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_EmailAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_EmailAddress& getCopy (ASN1T_EXP_EmailAddress* pDstData = 0);
   ASN1T_EXP_EmailAddress* newCopy ();

   inline ASN1C_EXP_EmailAddress& operator= (ASN1C_EXP_EmailAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_EmailAddress (OSCTXT* pctxt,
   ASN1T_EXP_EmailAddress pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_EmailAddress (OSCTXT* pctxt, 
   ASN1T_EXP_EmailAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_EmailAddress 
   (const char* name, const ASN1T_EXP_EmailAddress pvalue);

EXTERN int asn1PrtToStrm_EXP_EmailAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_EmailAddress pvalue);

EXTERN OSBOOL asn1Compare_EXP_EmailAddress (const char* name, 
   ASN1T_EXP_EmailAddress* pValue, ASN1T_EXP_EmailAddress* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_EmailAddress (OSCTXT* pctxt, 
   ASN1T_EXP_EmailAddress pSrcValue, ASN1T_EXP_EmailAddress* pDstValue);

EXTERN void asn1Free_EXP_EmailAddress (OSCTXT *pctxt, ASN1T_EXP_EmailAddress pvalue);

/**************************************************************/
/*                                                            */
/*  AlgorithmIdentifier                                       */
/*                                                            */
/**************************************************************/
/*
AlgorithmIdentifier ::= SEQUENCE {
   algorithm OBJECT IDENTIFIER,
   parameters ANY OPTIONAL
}
*/
#define TV_EXP_AlgorithmIdentifier	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_AlgorithmIdentifier;

struct EXTERN ASN1T_EXP_AlgorithmIdentifier : public ASN1TPDU {
   struct {
      unsigned parametersPresent : 1;
   } m;
   ASN1TObjId algorithm;
   ASN1TOpenType parameters;
   ASN1T_EXP_AlgorithmIdentifier ();
   ASN1T_EXP_AlgorithmIdentifier (ASN1C_EXP_AlgorithmIdentifier& srcData);
   ~ASN1T_EXP_AlgorithmIdentifier ();
} ;

class EXTERN ASN1C_EXP_AlgorithmIdentifier :
public ASN1CType
{
protected:
   ASN1T_EXP_AlgorithmIdentifier& msgData;
public:
   ASN1C_EXP_AlgorithmIdentifier (ASN1T_EXP_AlgorithmIdentifier& data);
   ASN1C_EXP_AlgorithmIdentifier (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_AlgorithmIdentifier& data);
   ASN1C_EXP_AlgorithmIdentifier (OSRTContext &context
      , ASN1T_EXP_AlgorithmIdentifier& data);
   ASN1C_EXP_AlgorithmIdentifier (ASN1C_EXP_AlgorithmIdentifier& original);
   virtual ~ASN1C_EXP_AlgorithmIdentifier () {}
   inline ASN1T_EXP_AlgorithmIdentifier& getData () { return msgData; }
   inline const ASN1T_EXP_AlgorithmIdentifier& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AlgorithmIdentifier");
   int toStream (const char* name = "AlgorithmIdentifier");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_AlgorithmIdentifier* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_AlgorithmIdentifier& getCopy (ASN1T_EXP_AlgorithmIdentifier* pDstData = 0);
   ASN1T_EXP_AlgorithmIdentifier* newCopy ();

   inline ASN1C_EXP_AlgorithmIdentifier& operator= (ASN1C_EXP_AlgorithmIdentifier& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_AlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_EXP_AlgorithmIdentifier *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_AlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_AlgorithmIdentifier* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_AlgorithmIdentifier 
   (const char* name, const ASN1T_EXP_AlgorithmIdentifier* pvalue);

EXTERN int asn1PrtToStrm_EXP_AlgorithmIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AlgorithmIdentifier* pvalue);

EXTERN ASN1T_EXP_AlgorithmIdentifier* 
   new_ASN1T_EXP_AlgorithmIdentifier (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_AlgorithmIdentifier (const char* name, 
   ASN1T_EXP_AlgorithmIdentifier* pValue, 
   ASN1T_EXP_AlgorithmIdentifier* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_AlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_EXP_AlgorithmIdentifier* pSrcValue, ASN1T_EXP_AlgorithmIdentifier*
    pDstValue);

EXTERN void asn1Init_EXP_AlgorithmIdentifier (ASN1T_EXP_AlgorithmIdentifier* pvalue);

EXTERN void asn1Free_EXP_AlgorithmIdentifier (OSCTXT *pctxt, 
   ASN1T_EXP_AlgorithmIdentifier* pvalue);

/**************************************************************/
/*                                                            */
/*  AttributeTypeAndValue                                     */
/*                                                            */
/**************************************************************/
/*
 at least one value is required

AttributeTypeAndValue ::= SEQUENCE {
   type AttributeType,
   value AttributeValue
}
*/
#define TV_EXP_AttributeTypeAndValue	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_AttributeTypeAndValue;

struct EXTERN ASN1T_EXP_AttributeTypeAndValue : public ASN1TPDU {
   ASN1T_EXP_AttributeType type;
   ASN1T_EXP_AttributeValue value;
   ASN1T_EXP_AttributeTypeAndValue ();
   ASN1T_EXP_AttributeTypeAndValue (ASN1C_EXP_AttributeTypeAndValue& srcData);
   ~ASN1T_EXP_AttributeTypeAndValue ();
} ;

class EXTERN ASN1C_EXP_AttributeTypeAndValue :
public ASN1CType
{
protected:
   ASN1T_EXP_AttributeTypeAndValue& msgData;
public:
   ASN1C_EXP_AttributeTypeAndValue (ASN1T_EXP_AttributeTypeAndValue& data);
   ASN1C_EXP_AttributeTypeAndValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_AttributeTypeAndValue& data);
   ASN1C_EXP_AttributeTypeAndValue (OSRTContext &context
      , ASN1T_EXP_AttributeTypeAndValue& data);
   ASN1C_EXP_AttributeTypeAndValue (ASN1C_EXP_AttributeTypeAndValue& original);
   virtual ~ASN1C_EXP_AttributeTypeAndValue () {}
   inline ASN1T_EXP_AttributeTypeAndValue& getData () { return msgData; }
   inline const ASN1T_EXP_AttributeTypeAndValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AttributeTypeAndValue");
   int toStream (const char* name = "AttributeTypeAndValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_AttributeTypeAndValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_AttributeTypeAndValue& getCopy (ASN1T_EXP_AttributeTypeAndValue* pDstData = 0);
   ASN1T_EXP_AttributeTypeAndValue* newCopy ();

   inline ASN1C_EXP_AttributeTypeAndValue& operator= (ASN1C_EXP_AttributeTypeAndValue& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_AttributeTypeAndValue (OSCTXT* pctxt,
   ASN1T_EXP_AttributeTypeAndValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_AttributeTypeAndValue (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeTypeAndValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_AttributeTypeAndValue 
   (const char* name, const ASN1T_EXP_AttributeTypeAndValue* pvalue);

EXTERN int asn1PrtToStrm_EXP_AttributeTypeAndValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AttributeTypeAndValue* pvalue);

EXTERN ASN1T_EXP_AttributeTypeAndValue* 
   new_ASN1T_EXP_AttributeTypeAndValue (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_AttributeTypeAndValue (const char* name, 
   ASN1T_EXP_AttributeTypeAndValue* pValue, 
   ASN1T_EXP_AttributeTypeAndValue* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_AttributeTypeAndValue (OSCTXT* pctxt, 
   ASN1T_EXP_AttributeTypeAndValue* pSrcValue, ASN1T_EXP_AttributeTypeAndValue*
    pDstValue);

EXTERN void asn1Init_EXP_AttributeTypeAndValue (
   ASN1T_EXP_AttributeTypeAndValue* pvalue);

EXTERN void asn1Free_EXP_AttributeTypeAndValue (OSCTXT *pctxt, 
   ASN1T_EXP_AttributeTypeAndValue* pvalue);

/**************************************************************/
/*                                                            */
/*  RelativeDistinguishedName                                 */
/*                                                            */
/**************************************************************/
/*
RelativeDistinguishedName ::= SET (SIZE (1..MAX)) OF AttributeTypeAndValue
*/
#define TV_EXP_RelativeDistinguishedName	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_RelativeDistinguishedName;

/* List of ASN1T_EXP_AttributeTypeAndValue */
typedef struct EXTERN ASN1T_EXP_RelativeDistinguishedName : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_RelativeDistinguishedName();
} ASN1T_EXP_RelativeDistinguishedName;

class EXTERN ASN1C_EXP_RelativeDistinguishedName :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_RelativeDistinguishedName& msgData;
public:
   ASN1C_EXP_RelativeDistinguishedName
       (ASN1T_EXP_RelativeDistinguishedName& data);
   ASN1C_EXP_RelativeDistinguishedName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_RelativeDistinguishedName& data);
   ASN1C_EXP_RelativeDistinguishedName (ASN1CType& ccobj
      , ASN1T_EXP_RelativeDistinguishedName& data);
   ASN1C_EXP_RelativeDistinguishedName (OSRTContext &context
      , ASN1T_EXP_RelativeDistinguishedName& data);
   ASN1C_EXP_RelativeDistinguishedName (ASN1C_EXP_RelativeDistinguishedName& original);
   virtual ~ASN1C_EXP_RelativeDistinguishedName () {}
   inline ASN1T_EXP_RelativeDistinguishedName& getData () { return msgData; }
   inline const ASN1T_EXP_RelativeDistinguishedName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RelativeDistinguishedName");
   int toStream (const char* name = "RelativeDistinguishedName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_RelativeDistinguishedName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_RelativeDistinguishedName& getCopy (ASN1T_EXP_RelativeDistinguishedName* pDstData = 0);
   ASN1T_EXP_RelativeDistinguishedName* newCopy ();

   ASN1C_EXP_RelativeDistinguishedName& operator= (ASN1C_EXP_RelativeDistinguishedName& srcData);
   void Append (ASN1T_EXP_AttributeTypeAndValue* elem);
   ASN1T_EXP_AttributeTypeAndValue* NewElement ();
   ASN1T_EXP_AttributeTypeAndValue* AppendNewElement ();
} ;

EXTERN int asn1E_EXP_RelativeDistinguishedName (OSCTXT* pctxt,
   ASN1T_EXP_RelativeDistinguishedName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_RelativeDistinguishedName (OSCTXT* pctxt, 
   ASN1T_EXP_RelativeDistinguishedName* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_RelativeDistinguishedName 
   (const char* name, const ASN1T_EXP_RelativeDistinguishedName* pvalue);

EXTERN int asn1PrtToStrm_EXP_RelativeDistinguishedName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_RelativeDistinguishedName* pvalue);

EXTERN OSBOOL asn1Compare_EXP_RelativeDistinguishedName (const char* name, 
   ASN1T_EXP_RelativeDistinguishedName* pValue, 
   ASN1T_EXP_RelativeDistinguishedName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_RelativeDistinguishedName (OSCTXT* pctxt, 
   ASN1T_EXP_RelativeDistinguishedName* pSrcValue, 
   ASN1T_EXP_RelativeDistinguishedName* pDstValue);

EXTERN void asn1Init_EXP_RelativeDistinguishedName (
   ASN1T_EXP_RelativeDistinguishedName* pvalue);

EXTERN void asn1Free_EXP_RelativeDistinguishedName (OSCTXT *pctxt, 
   ASN1T_EXP_RelativeDistinguishedName* pvalue);

/**************************************************************/
/*                                                            */
/*  RDNSequence                                               */
/*                                                            */
/**************************************************************/
/*
RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
*/
#define TV_EXP_RDNSequence	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_RDNSequence;

/* List of ASN1T_EXP_RelativeDistinguishedName */
typedef struct EXTERN ASN1T_EXP_RDNSequence : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_RDNSequence();
} ASN1T_EXP_RDNSequence;

class EXTERN ASN1C_EXP_RDNSequence :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_RDNSequence& msgData;
public:
   ASN1C_EXP_RDNSequence (ASN1T_EXP_RDNSequence& data);
   ASN1C_EXP_RDNSequence (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_RDNSequence& data);
   ASN1C_EXP_RDNSequence (ASN1CType& ccobj, ASN1T_EXP_RDNSequence& data);
   ASN1C_EXP_RDNSequence (OSRTContext &context, ASN1T_EXP_RDNSequence& data);
   ASN1C_EXP_RDNSequence (ASN1C_EXP_RDNSequence& original);
   virtual ~ASN1C_EXP_RDNSequence () {}
   inline ASN1T_EXP_RDNSequence& getData () { return msgData; }
   inline const ASN1T_EXP_RDNSequence& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RDNSequence");
   int toStream (const char* name = "RDNSequence");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_RDNSequence* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_RDNSequence& getCopy (ASN1T_EXP_RDNSequence* pDstData = 0);
   ASN1T_EXP_RDNSequence* newCopy ();

   ASN1C_EXP_RDNSequence& operator= (ASN1C_EXP_RDNSequence& srcData);
   void Append (ASN1T_EXP_RelativeDistinguishedName* elem);
   ASN1T_EXP_RelativeDistinguishedName* NewElement ();
   ASN1T_EXP_RelativeDistinguishedName* AppendNewElement ();
} ;

EXTERN int asn1E_EXP_RDNSequence (OSCTXT* pctxt,
   ASN1T_EXP_RDNSequence *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_RDNSequence (OSCTXT* pctxt, 
   ASN1T_EXP_RDNSequence* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_RDNSequence 
   (const char* name, const ASN1T_EXP_RDNSequence* pvalue);

EXTERN int asn1PrtToStrm_EXP_RDNSequence (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_RDNSequence* pvalue);

EXTERN OSBOOL asn1Compare_EXP_RDNSequence (const char* name, 
   ASN1T_EXP_RDNSequence* pValue, ASN1T_EXP_RDNSequence* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_RDNSequence (OSCTXT* pctxt, 
   ASN1T_EXP_RDNSequence* pSrcValue, ASN1T_EXP_RDNSequence* pDstValue);

EXTERN void asn1Init_EXP_RDNSequence (ASN1T_EXP_RDNSequence* pvalue);

EXTERN void asn1Free_EXP_RDNSequence (OSCTXT *pctxt, ASN1T_EXP_RDNSequence* pvalue);

/**************************************************************/
/*                                                            */
/*  Name                                                      */
/*                                                            */
/**************************************************************/
/*
 contains a value of the type
 registered for use with the
 algorithm object identifier value
 X.400 address syntax starts here

Name ::= CHOICE {
   rdnSequence RDNSequence
}
*/
/* Choice context tags */

#define TVC_EXP_Name_rdnSequence	(TM_UNIV|TM_CONS|16)

/* Choice tag constants */

#define T_EXP_Name_rdnSequence          1

class EXTERN ASN1C_EXP_Name;

struct EXTERN ASN1T_EXP_Name : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_EXP_RDNSequence *rdnSequence;
   } u;
   ASN1T_EXP_Name () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_Name (ASN1C_EXP_Name& srcData);
   ~ASN1T_EXP_Name ();
} ;

class EXTERN ASN1C_EXP_Name :
public ASN1CType
{
protected:
   ASN1T_EXP_Name& msgData;
public:
   ASN1C_EXP_Name (ASN1T_EXP_Name& data);
   ASN1C_EXP_Name (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_Name& data);
   ASN1C_EXP_Name (OSRTContext &context, ASN1T_EXP_Name& data);
   ASN1C_EXP_Name (ASN1C_EXP_Name& original);
   virtual ~ASN1C_EXP_Name () {}
   inline ASN1T_EXP_Name& getData () { return msgData; }
   inline const ASN1T_EXP_Name& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Name");
   int toStream (const char* name = "Name");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_Name* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_Name& getCopy (ASN1T_EXP_Name* pDstData = 0);
   ASN1T_EXP_Name* newCopy ();

   inline ASN1C_EXP_Name& operator= (ASN1C_EXP_Name& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_Name (OSCTXT* pctxt,
   ASN1T_EXP_Name *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_Name (OSCTXT* pctxt, ASN1T_EXP_Name* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_Name (const char* name, const ASN1T_EXP_Name* pvalue);

EXTERN int asn1PrtToStrm_EXP_Name (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Name* pvalue);

EXTERN ASN1T_EXP_Name* new_ASN1T_EXP_Name (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_Name (const char* name, ASN1T_EXP_Name* pValue, 
   ASN1T_EXP_Name* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_Name (OSCTXT* pctxt, ASN1T_EXP_Name* pSrcValue, 
   ASN1T_EXP_Name* pDstValue);

EXTERN void asn1Init_EXP_Name (ASN1T_EXP_Name* pvalue);

EXTERN void asn1Free_EXP_Name (OSCTXT *pctxt, ASN1T_EXP_Name* pvalue);

/**************************************************************/
/*                                                            */
/*  Time                                                      */
/*                                                            */
/**************************************************************/
/*
Time ::= CHOICE {
   utcTime UTCTime,
   generalTime GeneralizedTime
}
*/
/* Choice context tags */

#define TVC_EXP_Time_utcTime	(TM_UNIV|TM_PRIM|23)
#define TVC_EXP_Time_generalTime	(TM_UNIV|TM_PRIM|24)

/* Choice tag constants */

#define T_EXP_Time_utcTime              1
#define T_EXP_Time_generalTime          2

class EXTERN ASN1C_EXP_Time;

struct EXTERN ASN1T_EXP_Time : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const char* utcTime;
      /* t = 2 */
      const char* generalTime;
   } u;
   ASN1T_EXP_Time () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_Time (ASN1C_EXP_Time& srcData);
   ~ASN1T_EXP_Time ();
} ;

class EXTERN ASN1C_EXP_Time :
public ASN1CType
{
protected:
   ASN1T_EXP_Time& msgData;
public:
   ASN1C_EXP_Time (ASN1T_EXP_Time& data);
   ASN1C_EXP_Time (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_Time& data);
   ASN1C_EXP_Time (OSRTContext &context, ASN1T_EXP_Time& data);
   ASN1C_EXP_Time (ASN1C_EXP_Time& original);
   virtual ~ASN1C_EXP_Time () {}
   inline ASN1T_EXP_Time& getData () { return msgData; }
   inline const ASN1T_EXP_Time& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Time");
   int toStream (const char* name = "Time");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_Time* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_Time& getCopy (ASN1T_EXP_Time* pDstData = 0);
   ASN1T_EXP_Time* newCopy ();

   inline ASN1C_EXP_Time& operator= (ASN1C_EXP_Time& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_Time (OSCTXT* pctxt,
   ASN1T_EXP_Time *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_Time (OSCTXT* pctxt, ASN1T_EXP_Time* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_Time (const char* name, const ASN1T_EXP_Time* pvalue);

EXTERN int asn1PrtToStrm_EXP_Time (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Time* pvalue);

EXTERN ASN1T_EXP_Time* new_ASN1T_EXP_Time (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_Time (const char* name, ASN1T_EXP_Time* pValue, 
   ASN1T_EXP_Time* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_Time (OSCTXT* pctxt, ASN1T_EXP_Time* pSrcValue, 
   ASN1T_EXP_Time* pDstValue);

EXTERN void asn1Init_EXP_Time (ASN1T_EXP_Time* pvalue);

EXTERN void asn1Free_EXP_Time (OSCTXT *pctxt, ASN1T_EXP_Time* pvalue);

/**************************************************************/
/*                                                            */
/*  Validity                                                  */
/*                                                            */
/**************************************************************/
/*
Validity ::= SEQUENCE {
   notBefore Time,
   notAfter Time
}
*/
#define TV_EXP_Validity	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_Validity;

struct EXTERN ASN1T_EXP_Validity : public ASN1TPDU {
   ASN1T_EXP_Time notBefore;
   ASN1T_EXP_Time notAfter;
   ASN1T_EXP_Validity ();
   ASN1T_EXP_Validity (ASN1C_EXP_Validity& srcData);
   ~ASN1T_EXP_Validity ();
} ;

class EXTERN ASN1C_EXP_Validity :
public ASN1CType
{
protected:
   ASN1T_EXP_Validity& msgData;
public:
   ASN1C_EXP_Validity (ASN1T_EXP_Validity& data);
   ASN1C_EXP_Validity (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_Validity& data);
   ASN1C_EXP_Validity (OSRTContext &context, ASN1T_EXP_Validity& data);
   ASN1C_EXP_Validity (ASN1C_EXP_Validity& original);
   virtual ~ASN1C_EXP_Validity () {}
   inline ASN1T_EXP_Validity& getData () { return msgData; }
   inline const ASN1T_EXP_Validity& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Validity");
   int toStream (const char* name = "Validity");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_Validity* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_Validity& getCopy (ASN1T_EXP_Validity* pDstData = 0);
   ASN1T_EXP_Validity* newCopy ();

   inline ASN1C_EXP_Validity& operator= (ASN1C_EXP_Validity& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_Validity (OSCTXT* pctxt,
   ASN1T_EXP_Validity *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_Validity (OSCTXT* pctxt, ASN1T_EXP_Validity* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_Validity 
   (const char* name, const ASN1T_EXP_Validity* pvalue);

EXTERN int asn1PrtToStrm_EXP_Validity (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Validity* pvalue);

EXTERN ASN1T_EXP_Validity* new_ASN1T_EXP_Validity (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_Validity (const char* name, ASN1T_EXP_Validity* pValue, 
   ASN1T_EXP_Validity* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_Validity (OSCTXT* pctxt, ASN1T_EXP_Validity* pSrcValue, 
   ASN1T_EXP_Validity* pDstValue);

EXTERN void asn1Init_EXP_Validity (ASN1T_EXP_Validity* pvalue);

EXTERN void asn1Free_EXP_Validity (OSCTXT *pctxt, ASN1T_EXP_Validity* pvalue);

/**************************************************************/
/*                                                            */
/*  SubjectPublicKeyInfo                                      */
/*                                                            */
/**************************************************************/
/*
SubjectPublicKeyInfo ::= SEQUENCE {
   algorithm AlgorithmIdentifier,
   subjectPublicKey BIT STRING 
}
*/
#define TV_EXP_SubjectPublicKeyInfo	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_SubjectPublicKeyInfo;

struct EXTERN ASN1T_EXP_SubjectPublicKeyInfo : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier algorithm;
   ASN1TDynBitStr subjectPublicKey;
   ASN1T_EXP_SubjectPublicKeyInfo ();
   ASN1T_EXP_SubjectPublicKeyInfo (ASN1C_EXP_SubjectPublicKeyInfo& srcData);
   ~ASN1T_EXP_SubjectPublicKeyInfo ();
} ;

class EXTERN ASN1C_EXP_SubjectPublicKeyInfo :
public ASN1CType
{
protected:
   ASN1T_EXP_SubjectPublicKeyInfo& msgData;
public:
   ASN1C_EXP_SubjectPublicKeyInfo (ASN1T_EXP_SubjectPublicKeyInfo& data);
   ASN1C_EXP_SubjectPublicKeyInfo (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_SubjectPublicKeyInfo& data);
   ASN1C_EXP_SubjectPublicKeyInfo (OSRTContext &context
      , ASN1T_EXP_SubjectPublicKeyInfo& data);
   ASN1C_EXP_SubjectPublicKeyInfo (ASN1C_EXP_SubjectPublicKeyInfo& original);
   virtual ~ASN1C_EXP_SubjectPublicKeyInfo () {}
   inline ASN1T_EXP_SubjectPublicKeyInfo& getData () { return msgData; }
   inline const ASN1T_EXP_SubjectPublicKeyInfo& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "SubjectPublicKeyInfo");
   int toStream (const char* name = "SubjectPublicKeyInfo");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_SubjectPublicKeyInfo* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_SubjectPublicKeyInfo& getCopy (ASN1T_EXP_SubjectPublicKeyInfo* pDstData = 0);
   ASN1T_EXP_SubjectPublicKeyInfo* newCopy ();

   inline ASN1C_EXP_SubjectPublicKeyInfo& operator= (ASN1C_EXP_SubjectPublicKeyInfo& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_SubjectPublicKeyInfo (OSCTXT* pctxt,
   ASN1T_EXP_SubjectPublicKeyInfo *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_SubjectPublicKeyInfo (OSCTXT* pctxt, 
   ASN1T_EXP_SubjectPublicKeyInfo* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_SubjectPublicKeyInfo 
   (const char* name, const ASN1T_EXP_SubjectPublicKeyInfo* pvalue);

EXTERN int asn1PrtToStrm_EXP_SubjectPublicKeyInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_SubjectPublicKeyInfo* pvalue);

EXTERN ASN1T_EXP_SubjectPublicKeyInfo* 
   new_ASN1T_EXP_SubjectPublicKeyInfo (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_SubjectPublicKeyInfo (const char* name, 
   ASN1T_EXP_SubjectPublicKeyInfo* pValue, 
   ASN1T_EXP_SubjectPublicKeyInfo* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_SubjectPublicKeyInfo (OSCTXT* pctxt, 
   ASN1T_EXP_SubjectPublicKeyInfo* pSrcValue, ASN1T_EXP_SubjectPublicKeyInfo*
    pDstValue);

EXTERN void asn1Init_EXP_SubjectPublicKeyInfo (ASN1T_EXP_SubjectPublicKeyInfo* pvalue);

EXTERN void asn1Free_EXP_SubjectPublicKeyInfo (OSCTXT *pctxt, 
   ASN1T_EXP_SubjectPublicKeyInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  Extension                                                 */
/*                                                            */
/**************************************************************/
/*
Extension ::= SEQUENCE {
   extnID OBJECT IDENTIFIER,
   critical BOOLEAN DEFAULT FALSE,
   extnValue OCTET STRING
}
*/
#define TV_EXP_Extension	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_Extension;

struct EXTERN ASN1T_EXP_Extension : public ASN1TPDU {
   ASN1TObjId extnID;
   OSBOOL critical;
   ASN1TDynOctStr extnValue;
   ASN1T_EXP_Extension ();
   ASN1T_EXP_Extension (ASN1C_EXP_Extension& srcData);
   ~ASN1T_EXP_Extension ();
} ;

class EXTERN ASN1C_EXP_Extension :
public ASN1CType
{
protected:
   ASN1T_EXP_Extension& msgData;
public:
   ASN1C_EXP_Extension (ASN1T_EXP_Extension& data);
   ASN1C_EXP_Extension (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_Extension& data);
   ASN1C_EXP_Extension (OSRTContext &context, ASN1T_EXP_Extension& data);
   ASN1C_EXP_Extension (ASN1C_EXP_Extension& original);
   virtual ~ASN1C_EXP_Extension () {}
   inline ASN1T_EXP_Extension& getData () { return msgData; }
   inline const ASN1T_EXP_Extension& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Extension");
   int toStream (const char* name = "Extension");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_Extension* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_Extension& getCopy (ASN1T_EXP_Extension* pDstData = 0);
   ASN1T_EXP_Extension* newCopy ();

   inline ASN1C_EXP_Extension& operator= (ASN1C_EXP_Extension& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_Extension (OSCTXT* pctxt,
   ASN1T_EXP_Extension *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_Extension (OSCTXT* pctxt, ASN1T_EXP_Extension* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_Extension 
   (const char* name, const ASN1T_EXP_Extension* pvalue);

EXTERN int asn1PrtToStrm_EXP_Extension (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Extension* pvalue);

EXTERN ASN1T_EXP_Extension* new_ASN1T_EXP_Extension (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_Extension (const char* name, 
   ASN1T_EXP_Extension* pValue, ASN1T_EXP_Extension* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_Extension (OSCTXT* pctxt, ASN1T_EXP_Extension* pSrcValue, 
   ASN1T_EXP_Extension* pDstValue);

EXTERN void asn1Init_EXP_Extension (ASN1T_EXP_Extension* pvalue);

EXTERN void asn1Free_EXP_Extension (OSCTXT *pctxt, ASN1T_EXP_Extension* pvalue);

/**************************************************************/
/*                                                            */
/*  Extensions                                                */
/*                                                            */
/**************************************************************/
/*
Extensions ::= SEQUENCE (SIZE (1..MAX)) OF Extension
*/
#define TV_EXP_Extensions	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_Extensions;

/* List of ASN1T_EXP_Extension */
typedef struct EXTERN ASN1T_EXP_Extensions : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_Extensions();
} ASN1T_EXP_Extensions;

class EXTERN ASN1C_EXP_Extensions :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_Extensions& msgData;
public:
   ASN1C_EXP_Extensions (ASN1T_EXP_Extensions& data);
   ASN1C_EXP_Extensions (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_Extensions& data);
   ASN1C_EXP_Extensions (ASN1CType& ccobj, ASN1T_EXP_Extensions& data);
   ASN1C_EXP_Extensions (OSRTContext &context, ASN1T_EXP_Extensions& data);
   ASN1C_EXP_Extensions (ASN1C_EXP_Extensions& original);
   virtual ~ASN1C_EXP_Extensions () {}
   inline ASN1T_EXP_Extensions& getData () { return msgData; }
   inline const ASN1T_EXP_Extensions& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Extensions");
   int toStream (const char* name = "Extensions");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_Extensions* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_Extensions& getCopy (ASN1T_EXP_Extensions* pDstData = 0);
   ASN1T_EXP_Extensions* newCopy ();

   ASN1C_EXP_Extensions& operator= (ASN1C_EXP_Extensions& srcData);
   void Append (ASN1T_EXP_Extension* elem);
   ASN1T_EXP_Extension* NewElement ();
   ASN1T_EXP_Extension* AppendNewElement ();
} ;

EXTERN int asn1E_EXP_Extensions (OSCTXT* pctxt,
   ASN1T_EXP_Extensions *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_Extensions (OSCTXT* pctxt, ASN1T_EXP_Extensions* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_Extensions 
   (const char* name, const ASN1T_EXP_Extensions* pvalue);

EXTERN int asn1PrtToStrm_EXP_Extensions (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Extensions* pvalue);

EXTERN OSBOOL asn1Compare_EXP_Extensions (const char* name, 
   ASN1T_EXP_Extensions* pValue, ASN1T_EXP_Extensions* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_Extensions (OSCTXT* pctxt, ASN1T_EXP_Extensions* pSrcValue, 
   ASN1T_EXP_Extensions* pDstValue);

EXTERN void asn1Init_EXP_Extensions (ASN1T_EXP_Extensions* pvalue);

EXTERN void asn1Free_EXP_Extensions (OSCTXT *pctxt, ASN1T_EXP_Extensions* pvalue);

/**************************************************************/
/*                                                            */
/*  TBSCertificate                                            */
/*                                                            */
/**************************************************************/
/*
TBSCertificate ::= SEQUENCE {
   version [0] Version DEFAULT v1,
   serialNumber CertificateSerialNumber,
   signature AlgorithmIdentifier,
   issuer Name,
   validity Validity,
   subject Name,
   subjectPublicKeyInfo SubjectPublicKeyInfo,
   issuerUniqueID [1] IMPLICIT UniqueIdentifier OPTIONAL,
   subjectUniqueID [2] IMPLICIT UniqueIdentifier OPTIONAL,
   extensions [3] Extensions OPTIONAL
}
*/
#define TV_EXP_TBSCertificate	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_TBSCertificate;

struct EXTERN ASN1T_EXP_TBSCertificate : public ASN1TPDU {
   struct {
      unsigned issuerUniqueIDPresent : 1;
      unsigned subjectUniqueIDPresent : 1;
      unsigned extensionsPresent : 1;
   } m;
   ASN1T_EXP_Version version;
   ASN1T_EXP_CertificateSerialNumber serialNumber;
   ASN1T_EXP_AlgorithmIdentifier signature_;
   ASN1T_EXP_Name issuer;
   ASN1T_EXP_Validity validity;
   ASN1T_EXP_Name subject;
   ASN1T_EXP_SubjectPublicKeyInfo subjectPublicKeyInfo;
   ASN1T_EXP_UniqueIdentifier issuerUniqueID;
   ASN1T_EXP_UniqueIdentifier subjectUniqueID;
   ASN1T_EXP_Extensions extensions;
   ASN1T_EXP_TBSCertificate ();
   ASN1T_EXP_TBSCertificate (ASN1C_EXP_TBSCertificate& srcData);
   ~ASN1T_EXP_TBSCertificate ();
} ;

class EXTERN ASN1C_EXP_TBSCertificate :
public ASN1CType
{
protected:
   ASN1T_EXP_TBSCertificate& msgData;
public:
   ASN1C_EXP_TBSCertificate (ASN1T_EXP_TBSCertificate& data);
   ASN1C_EXP_TBSCertificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TBSCertificate& data);
   ASN1C_EXP_TBSCertificate (OSRTContext &context
      , ASN1T_EXP_TBSCertificate& data);
   ASN1C_EXP_TBSCertificate (ASN1C_EXP_TBSCertificate& original);
   virtual ~ASN1C_EXP_TBSCertificate () {}
   inline ASN1T_EXP_TBSCertificate& getData () { return msgData; }
   inline const ASN1T_EXP_TBSCertificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TBSCertificate");
   int toStream (const char* name = "TBSCertificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TBSCertificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TBSCertificate& getCopy (ASN1T_EXP_TBSCertificate* pDstData = 0);
   ASN1T_EXP_TBSCertificate* newCopy ();

   inline ASN1C_EXP_TBSCertificate& operator= (ASN1C_EXP_TBSCertificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TBSCertificate (OSCTXT* pctxt,
   ASN1T_EXP_TBSCertificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TBSCertificate (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertificate* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_TBSCertificate 
   (const char* name, const ASN1T_EXP_TBSCertificate* pvalue);

EXTERN int asn1PrtToStrm_EXP_TBSCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TBSCertificate* pvalue);

EXTERN ASN1T_EXP_TBSCertificate* 
   new_ASN1T_EXP_TBSCertificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_TBSCertificate (const char* name, 
   ASN1T_EXP_TBSCertificate* pValue, ASN1T_EXP_TBSCertificate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TBSCertificate (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertificate* pSrcValue, ASN1T_EXP_TBSCertificate* pDstValue);

EXTERN void asn1Init_EXP_TBSCertificate (ASN1T_EXP_TBSCertificate* pvalue);

EXTERN void asn1Free_EXP_TBSCertificate (OSCTXT *pctxt, 
   ASN1T_EXP_TBSCertificate* pvalue);

/**************************************************************/
/*                                                            */
/*  Certificate                                               */
/*                                                            */
/**************************************************************/
/*
Certificate ::= SEQUENCE {
   tbsCertificate TBSCertificate,
   signatureAlgorithm AlgorithmIdentifier,
   signature BIT STRING 
}
*/
#define TV_EXP_Certificate	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_Certificate;

struct EXTERN ASN1T_EXP_Certificate : public ASN1TPDU {
   ASN1T_EXP_TBSCertificate tbsCertificate;
   ASN1T_EXP_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature_;
   ASN1T_EXP_Certificate ();
   ASN1T_EXP_Certificate (ASN1C_EXP_Certificate& srcData);
   ~ASN1T_EXP_Certificate ();
} ;

class EXTERN ASN1C_EXP_Certificate :
public ASN1CType
{
protected:
   ASN1T_EXP_Certificate& msgData;
public:
   ASN1C_EXP_Certificate (ASN1T_EXP_Certificate& data);
   ASN1C_EXP_Certificate (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_Certificate& data);
   ASN1C_EXP_Certificate (OSRTContext &context, ASN1T_EXP_Certificate& data);
   ASN1C_EXP_Certificate (ASN1C_EXP_Certificate& original);
   virtual ~ASN1C_EXP_Certificate () {}
   inline ASN1T_EXP_Certificate& getData () { return msgData; }
   inline const ASN1T_EXP_Certificate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Certificate");
   int toStream (const char* name = "Certificate");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_Certificate* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_Certificate& getCopy (ASN1T_EXP_Certificate* pDstData = 0);
   ASN1T_EXP_Certificate* newCopy ();

   inline ASN1C_EXP_Certificate& operator= (ASN1C_EXP_Certificate& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_Certificate (OSCTXT* pctxt,
   ASN1T_EXP_Certificate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_Certificate (OSCTXT* pctxt, 
   ASN1T_EXP_Certificate* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_Certificate 
   (const char* name, const ASN1T_EXP_Certificate* pvalue);

EXTERN int asn1PrtToStrm_EXP_Certificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Certificate* pvalue);

EXTERN ASN1T_EXP_Certificate* new_ASN1T_EXP_Certificate (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_Certificate (const char* name, 
   ASN1T_EXP_Certificate* pValue, ASN1T_EXP_Certificate* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_Certificate (OSCTXT* pctxt, 
   ASN1T_EXP_Certificate* pSrcValue, ASN1T_EXP_Certificate* pDstValue);

EXTERN void asn1Init_EXP_Certificate (ASN1T_EXP_Certificate* pvalue);

EXTERN void asn1Free_EXP_Certificate (OSCTXT *pctxt, ASN1T_EXP_Certificate* pvalue);

/**************************************************************/
/*                                                            */
/*  _SetOfEXP_AttributeValue                                  */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_EXP__SetOfEXP_AttributeValue;

/* List of ASN1T_EXP_AttributeValue */
typedef struct EXTERN ASN1T_EXP__SetOfEXP_AttributeValue : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP__SetOfEXP_AttributeValue();
} ASN1T_EXP__SetOfEXP_AttributeValue;

class EXTERN ASN1C_EXP__SetOfEXP_AttributeValue :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP__SetOfEXP_AttributeValue& msgData;
public:
   ASN1C_EXP__SetOfEXP_AttributeValue
       (ASN1T_EXP__SetOfEXP_AttributeValue& data);
   ASN1C_EXP__SetOfEXP_AttributeValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP__SetOfEXP_AttributeValue& data);
   ASN1C_EXP__SetOfEXP_AttributeValue (ASN1CType& ccobj
      , ASN1T_EXP__SetOfEXP_AttributeValue& data);
   ASN1C_EXP__SetOfEXP_AttributeValue (OSRTContext &context
      , ASN1T_EXP__SetOfEXP_AttributeValue& data);
   ASN1C_EXP__SetOfEXP_AttributeValue (ASN1C_EXP__SetOfEXP_AttributeValue& original);
   virtual ~ASN1C_EXP__SetOfEXP_AttributeValue () {}
   inline ASN1T_EXP__SetOfEXP_AttributeValue& getData () { return msgData; }
   inline const ASN1T_EXP__SetOfEXP_AttributeValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SetOfEXP_AttributeValue");
   int toStream (const char* name = "_SetOfEXP_AttributeValue");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP__SetOfEXP_AttributeValue* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP__SetOfEXP_AttributeValue& getCopy (ASN1T_EXP__SetOfEXP_AttributeValue* pDstData = 0);
   ASN1T_EXP__SetOfEXP_AttributeValue* newCopy ();

   ASN1C_EXP__SetOfEXP_AttributeValue& operator= (ASN1C_EXP__SetOfEXP_AttributeValue& srcData);
   void Append (ASN1T_EXP_AttributeValue* elem);
   ASN1T_EXP_AttributeValue* NewElement ();
   ASN1T_EXP_AttributeValue* AppendNewElement ();
} ;

EXTERN int asn1E_EXP__SetOfEXP_AttributeValue (OSCTXT* pctxt,
   ASN1T_EXP__SetOfEXP_AttributeValue *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP__SetOfEXP_AttributeValue (OSCTXT* pctxt, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP__SetOfEXP_AttributeValue 
   (const char* name, const ASN1T_EXP__SetOfEXP_AttributeValue* pvalue);

EXTERN int asn1PrtToStrm_EXP__SetOfEXP_AttributeValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP__SetOfEXP_AttributeValue* pvalue);

EXTERN OSBOOL asn1Compare_EXP__SetOfEXP_AttributeValue (const char* name, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pValue, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP__SetOfEXP_AttributeValue (OSCTXT* pctxt, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pSrcValue, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pDstValue);

EXTERN void asn1Init_EXP__SetOfEXP_AttributeValue (
   ASN1T_EXP__SetOfEXP_AttributeValue* pvalue);

EXTERN void asn1Free_EXP__SetOfEXP_AttributeValue (OSCTXT *pctxt, 
   ASN1T_EXP__SetOfEXP_AttributeValue* pvalue);

/**************************************************************/
/*                                                            */
/*  Attribute                                                 */
/*                                                            */
/**************************************************************/
/*
Attribute ::= SEQUENCE {
   type AttributeType,
   values SET OF AttributeValue
}
*/
#define TV_EXP_Attribute	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_Attribute;

struct EXTERN ASN1T_EXP_Attribute : public ASN1TPDU {
   ASN1T_EXP_AttributeType type;
   ASN1T_EXP__SetOfEXP_AttributeValue values;
   ASN1T_EXP_Attribute ();
   ASN1T_EXP_Attribute (ASN1C_EXP_Attribute& srcData);
   ~ASN1T_EXP_Attribute ();
} ;

class EXTERN ASN1C_EXP_Attribute :
public ASN1CType
{
protected:
   ASN1T_EXP_Attribute& msgData;
public:
   ASN1C_EXP_Attribute (ASN1T_EXP_Attribute& data);
   ASN1C_EXP_Attribute (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_Attribute& data);
   ASN1C_EXP_Attribute (OSRTContext &context, ASN1T_EXP_Attribute& data);
   ASN1C_EXP_Attribute (ASN1C_EXP_Attribute& original);
   virtual ~ASN1C_EXP_Attribute () {}
   inline ASN1T_EXP_Attribute& getData () { return msgData; }
   inline const ASN1T_EXP_Attribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "Attribute");
   int toStream (const char* name = "Attribute");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_Attribute* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_Attribute& getCopy (ASN1T_EXP_Attribute* pDstData = 0);
   ASN1T_EXP_Attribute* newCopy ();

   inline ASN1C_EXP_Attribute& operator= (ASN1C_EXP_Attribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_Attribute (OSCTXT* pctxt,
   ASN1T_EXP_Attribute *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_Attribute (OSCTXT* pctxt, ASN1T_EXP_Attribute* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_Attribute 
   (const char* name, const ASN1T_EXP_Attribute* pvalue);

EXTERN int asn1PrtToStrm_EXP_Attribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_Attribute* pvalue);

EXTERN ASN1T_EXP_Attribute* new_ASN1T_EXP_Attribute (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_Attribute (const char* name, 
   ASN1T_EXP_Attribute* pValue, ASN1T_EXP_Attribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_Attribute (OSCTXT* pctxt, ASN1T_EXP_Attribute* pSrcValue, 
   ASN1T_EXP_Attribute* pDstValue);

EXTERN void asn1Init_EXP_Attribute (ASN1T_EXP_Attribute* pvalue);

EXTERN void asn1Free_EXP_Attribute (OSCTXT *pctxt, ASN1T_EXP_Attribute* pvalue);

/**************************************************************/
/*                                                            */
/*  TBSCertList_revokedCertificates_element                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TBSCertList'
*/
class EXTERN ASN1C_EXP_TBSCertList_revokedCertificates_element;

struct EXTERN ASN1T_EXP_TBSCertList_revokedCertificates_element : public ASN1TPDU {
   struct {
      unsigned crlEntryExtensionsPresent : 1;
   } m;
   ASN1T_EXP_CertificateSerialNumber userCertificate;
   ASN1T_EXP_Time revocationDate;
   ASN1T_EXP_Extensions crlEntryExtensions;
   ASN1T_EXP_TBSCertList_revokedCertificates_element ();
   ASN1T_EXP_TBSCertList_revokedCertificates_element (ASN1C_EXP_TBSCertList_revokedCertificates_element& srcData);
   ~ASN1T_EXP_TBSCertList_revokedCertificates_element ();
} ;

class EXTERN ASN1C_EXP_TBSCertList_revokedCertificates_element :
public ASN1CType
{
protected:
   ASN1T_EXP_TBSCertList_revokedCertificates_element& msgData;
public:
   ASN1C_EXP_TBSCertList_revokedCertificates_element
       (ASN1T_EXP_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXP_TBSCertList_revokedCertificates_element (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXP_TBSCertList_revokedCertificates_element (OSRTContext &context
      , ASN1T_EXP_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXP_TBSCertList_revokedCertificates_element (ASN1C_EXP_TBSCertList_revokedCertificates_element& original);
   virtual ~ASN1C_EXP_TBSCertList_revokedCertificates_element () {}
   inline ASN1T_EXP_TBSCertList_revokedCertificates_element& getData () { return msgData; }
   inline const ASN1T_EXP_TBSCertList_revokedCertificates_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TBSCertList_revokedCertificates_element");
   int toStream (const char* name = "TBSCertList_revokedCertificates_element");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TBSCertList_revokedCertificates_element* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TBSCertList_revokedCertificates_element& getCopy (ASN1T_EXP_TBSCertList_revokedCertificates_element* pDstData = 0);
   ASN1T_EXP_TBSCertList_revokedCertificates_element* newCopy ();

   inline ASN1C_EXP_TBSCertList_revokedCertificates_element& operator= (ASN1C_EXP_TBSCertList_revokedCertificates_element& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt,
   ASN1T_EXP_TBSCertList_revokedCertificates_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_TBSCertList_revokedCertificates_element 
   (const char* name, const ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue);

EXTERN int asn1PrtToStrm_EXP_TBSCertList_revokedCertificates_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue);

EXTERN ASN1T_EXP_TBSCertList_revokedCertificates_element* 
   new_ASN1T_EXP_TBSCertList_revokedCertificates_element (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_TBSCertList_revokedCertificates_element (
   const char* name, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pValue, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pSrcValue, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pDstValue);

EXTERN void asn1Init_EXP_TBSCertList_revokedCertificates_element (
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue);

EXTERN void asn1Free_EXP_TBSCertList_revokedCertificates_element (OSCTXT *pctxt, 
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue);

/**************************************************************/
/*                                                            */
/*  _SeqOfEXP_TBSCertList_revokedCertificates_element         */
/*                                                            */
/**************************************************************/
class EXTERN ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element;

/* List of ASN1T_EXP_TBSCertList_revokedCertificates_element */
typedef struct EXTERN ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element();
} ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element;

class EXTERN ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& msgData;
public:
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element
       (ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (ASN1CType& ccobj
      , ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
      OSRTContext &context
      , ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& data);
   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& original);
   virtual ~ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element () {}
   inline ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& getData () { return msgData; }
   inline const ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "_SeqOfEXP_TBSCertList_revokedCertificates_element");
   int toStream (const char* name = "_SeqOfEXP_TBSCertList_revokedCertificates_element");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& getCopy (ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pDstData = 0);
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* newCopy ();

   ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& operator= (ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element& srcData);
   void Append (ASN1T_EXP_TBSCertList_revokedCertificates_element* elem);
   ASN1T_EXP_TBSCertList_revokedCertificates_element* NewElement ();
   ASN1T_EXP_TBSCertList_revokedCertificates_element* AppendNewElement ();
} ;

EXTERN int asn1E_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt,
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
   OSCTXT* pctxt, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element 
   (const char* name, const ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue);

EXTERN int asn1PrtToStrm_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue);

EXTERN OSBOOL asn1Compare_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
   const char* name, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pValue, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (OSCTXT* pctxt, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pSrcValue, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pDstValue);

EXTERN void asn1Init_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue);

EXTERN void asn1Free_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (OSCTXT *pctxt, 
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue);

/**************************************************************/
/*                                                            */
/*  TBSCertList                                               */
/*                                                            */
/**************************************************************/
/*
TBSCertList ::= SEQUENCE {
   version Version OPTIONAL,
   signature AlgorithmIdentifier,
   issuer Name,
   thisUpdate Time,
   nextUpdate Time OPTIONAL,
   revokedCertificates SEQUENCE OF SEQUENCE {
      userCertificate CertificateSerialNumber,
      revocationDate Time,
      crlEntryExtensions Extensions OPTIONAL
   } OPTIONAL,
   crlExtensions [0] Extensions OPTIONAL
}
*/
#define TV_EXP_TBSCertList	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_TBSCertList;

struct EXTERN ASN1T_EXP_TBSCertList : public ASN1TPDU {
   struct {
      unsigned versionPresent : 1;
      unsigned nextUpdatePresent : 1;
      unsigned revokedCertificatesPresent : 1;
      unsigned crlExtensionsPresent : 1;
   } m;
   ASN1T_EXP_Version version;
   ASN1T_EXP_AlgorithmIdentifier signature_;
   ASN1T_EXP_Name issuer;
   ASN1T_EXP_Time thisUpdate;
   ASN1T_EXP_Time nextUpdate;
   ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element revokedCertificates;
   ASN1T_EXP_Extensions crlExtensions;
   ASN1T_EXP_TBSCertList ();
   ASN1T_EXP_TBSCertList (ASN1C_EXP_TBSCertList& srcData);
   ~ASN1T_EXP_TBSCertList ();
} ;

class EXTERN ASN1C_EXP_TBSCertList :
public ASN1CType
{
protected:
   ASN1T_EXP_TBSCertList& msgData;
public:
   ASN1C_EXP_TBSCertList (ASN1T_EXP_TBSCertList& data);
   ASN1C_EXP_TBSCertList (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TBSCertList& data);
   ASN1C_EXP_TBSCertList (OSRTContext &context, ASN1T_EXP_TBSCertList& data);
   ASN1C_EXP_TBSCertList (ASN1C_EXP_TBSCertList& original);
   virtual ~ASN1C_EXP_TBSCertList () {}
   inline ASN1T_EXP_TBSCertList& getData () { return msgData; }
   inline const ASN1T_EXP_TBSCertList& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TBSCertList");
   int toStream (const char* name = "TBSCertList");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TBSCertList* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TBSCertList& getCopy (ASN1T_EXP_TBSCertList* pDstData = 0);
   ASN1T_EXP_TBSCertList* newCopy ();

   inline ASN1C_EXP_TBSCertList& operator= (ASN1C_EXP_TBSCertList& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TBSCertList (OSCTXT* pctxt,
   ASN1T_EXP_TBSCertList *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TBSCertList (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertList* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_TBSCertList 
   (const char* name, const ASN1T_EXP_TBSCertList* pvalue);

EXTERN int asn1PrtToStrm_EXP_TBSCertList (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TBSCertList* pvalue);

EXTERN ASN1T_EXP_TBSCertList* new_ASN1T_EXP_TBSCertList (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_TBSCertList (const char* name, 
   ASN1T_EXP_TBSCertList* pValue, ASN1T_EXP_TBSCertList* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TBSCertList (OSCTXT* pctxt, 
   ASN1T_EXP_TBSCertList* pSrcValue, ASN1T_EXP_TBSCertList* pDstValue);

EXTERN void asn1Init_EXP_TBSCertList (ASN1T_EXP_TBSCertList* pvalue);

EXTERN void asn1Free_EXP_TBSCertList (OSCTXT *pctxt, ASN1T_EXP_TBSCertList* pvalue);

/**************************************************************/
/*                                                            */
/*  CertificateList                                           */
/*                                                            */
/**************************************************************/
/*
CertificateList ::= SEQUENCE {
   tbsCertList TBSCertList,
   signatureAlgorithm AlgorithmIdentifier,
   signature BIT STRING 
}
*/
#define TV_EXP_CertificateList	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_CertificateList;

struct EXTERN ASN1T_EXP_CertificateList : public ASN1TPDU {
   ASN1T_EXP_TBSCertList tbsCertList;
   ASN1T_EXP_AlgorithmIdentifier signatureAlgorithm;
   ASN1TDynBitStr signature_;
   ASN1T_EXP_CertificateList ();
   ASN1T_EXP_CertificateList (ASN1C_EXP_CertificateList& srcData);
   ~ASN1T_EXP_CertificateList ();
} ;

class EXTERN ASN1C_EXP_CertificateList :
public ASN1CType
{
protected:
   ASN1T_EXP_CertificateList& msgData;
public:
   ASN1C_EXP_CertificateList (ASN1T_EXP_CertificateList& data);
   ASN1C_EXP_CertificateList (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_CertificateList& data);
   ASN1C_EXP_CertificateList (OSRTContext &context
      , ASN1T_EXP_CertificateList& data);
   ASN1C_EXP_CertificateList (ASN1C_EXP_CertificateList& original);
   virtual ~ASN1C_EXP_CertificateList () {}
   inline ASN1T_EXP_CertificateList& getData () { return msgData; }
   inline const ASN1T_EXP_CertificateList& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CertificateList");
   int toStream (const char* name = "CertificateList");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_CertificateList* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_CertificateList& getCopy (ASN1T_EXP_CertificateList* pDstData = 0);
   ASN1T_EXP_CertificateList* newCopy ();

   inline ASN1C_EXP_CertificateList& operator= (ASN1C_EXP_CertificateList& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_CertificateList (OSCTXT* pctxt,
   ASN1T_EXP_CertificateList *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_CertificateList (OSCTXT* pctxt, 
   ASN1T_EXP_CertificateList* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_CertificateList 
   (const char* name, const ASN1T_EXP_CertificateList* pvalue);

EXTERN int asn1PrtToStrm_EXP_CertificateList (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_CertificateList* pvalue);

EXTERN ASN1T_EXP_CertificateList* 
   new_ASN1T_EXP_CertificateList (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_CertificateList (const char* name, 
   ASN1T_EXP_CertificateList* pValue, ASN1T_EXP_CertificateList* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_CertificateList (OSCTXT* pctxt, 
   ASN1T_EXP_CertificateList* pSrcValue, ASN1T_EXP_CertificateList* pDstValue);

EXTERN void asn1Init_EXP_CertificateList (ASN1T_EXP_CertificateList* pvalue);

EXTERN void asn1Free_EXP_CertificateList (OSCTXT *pctxt, 
   ASN1T_EXP_CertificateList* pvalue);

/**************************************************************/
/*                                                            */
/*  CountryName                                               */
/*                                                            */
/**************************************************************/
/*
 see also teletex-organizational-unit-names

CountryName ::= [APPLICATION 1] CHOICE {
   x121-dcc-code NumericString (SIZE (ub-country-name-numeric-length)),
   iso-3166-alpha2-code PrintableString (SIZE (ub-country-name-alpha-length))
}
*/
/* Choice context tags */

#define TVC_EXP_CountryName_x121_dcc_code	(TM_UNIV|TM_PRIM|18)
#define TVC_EXP_CountryName_iso_3166_alpha2_code	(TM_UNIV|TM_PRIM|19)

/* Choice tag constants */

#define T_EXP_CountryName_x121_dcc_code 1
#define T_EXP_CountryName_iso_3166_alpha2_code 2

class EXTERN ASN1C_EXP_CountryName;

struct EXTERN ASN1T_EXP_CountryName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const char* x121_dcc_code;
      /* t = 2 */
      const char* iso_3166_alpha2_code;
   } u;
   ASN1T_EXP_CountryName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_CountryName (ASN1C_EXP_CountryName& srcData);
   ~ASN1T_EXP_CountryName ();
} ;

class EXTERN ASN1C_EXP_CountryName :
public ASN1CType
{
protected:
   ASN1T_EXP_CountryName& msgData;
public:
   ASN1C_EXP_CountryName (ASN1T_EXP_CountryName& data);
   ASN1C_EXP_CountryName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_CountryName& data);
   ASN1C_EXP_CountryName (OSRTContext &context, ASN1T_EXP_CountryName& data);
   ASN1C_EXP_CountryName (ASN1C_EXP_CountryName& original);
   virtual ~ASN1C_EXP_CountryName () {}
   inline ASN1T_EXP_CountryName& getData () { return msgData; }
   inline const ASN1T_EXP_CountryName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "CountryName");
   int toStream (const char* name = "CountryName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_CountryName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_CountryName& getCopy (ASN1T_EXP_CountryName* pDstData = 0);
   ASN1T_EXP_CountryName* newCopy ();

   inline ASN1C_EXP_CountryName& operator= (ASN1C_EXP_CountryName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_CountryName (OSCTXT* pctxt,
   ASN1T_EXP_CountryName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_CountryName (OSCTXT* pctxt, 
   ASN1T_EXP_CountryName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_CountryName 
   (const char* name, const ASN1T_EXP_CountryName* pvalue);

EXTERN int asn1PrtToStrm_EXP_CountryName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_CountryName* pvalue);

EXTERN ASN1T_EXP_CountryName* new_ASN1T_EXP_CountryName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_CountryName (const char* name, 
   ASN1T_EXP_CountryName* pValue, ASN1T_EXP_CountryName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_CountryName (OSCTXT* pctxt, 
   ASN1T_EXP_CountryName* pSrcValue, ASN1T_EXP_CountryName* pDstValue);

EXTERN void asn1Init_EXP_CountryName (ASN1T_EXP_CountryName* pvalue);

EXTERN void asn1Free_EXP_CountryName (OSCTXT *pctxt, ASN1T_EXP_CountryName* pvalue);

/**************************************************************/
/*                                                            */
/*  AdministrationDomainName                                  */
/*                                                            */
/**************************************************************/
/*
AdministrationDomainName ::= [APPLICATION 2] CHOICE {
   numeric NumericString (SIZE (0..ub-domain-name-length)),
   printable PrintableString (SIZE (0..ub-domain-name-length))
}
*/
/* Choice context tags */

#define TVC_EXP_AdministrationDomainName_numeric	(TM_UNIV|TM_PRIM|18)
#define TVC_EXP_AdministrationDomainName_printable	(TM_UNIV|TM_PRIM|19)

/* Choice tag constants */

#define T_EXP_AdministrationDomainName_numeric 1
#define T_EXP_AdministrationDomainName_printable 2

class EXTERN ASN1C_EXP_AdministrationDomainName;

struct EXTERN ASN1T_EXP_AdministrationDomainName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const char* numeric;
      /* t = 2 */
      const char* printable;
   } u;
   ASN1T_EXP_AdministrationDomainName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_AdministrationDomainName (ASN1C_EXP_AdministrationDomainName& srcData);
   ~ASN1T_EXP_AdministrationDomainName ();
} ;

class EXTERN ASN1C_EXP_AdministrationDomainName :
public ASN1CType
{
protected:
   ASN1T_EXP_AdministrationDomainName& msgData;
public:
   ASN1C_EXP_AdministrationDomainName
       (ASN1T_EXP_AdministrationDomainName& data);
   ASN1C_EXP_AdministrationDomainName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_AdministrationDomainName& data);
   ASN1C_EXP_AdministrationDomainName (OSRTContext &context
      , ASN1T_EXP_AdministrationDomainName& data);
   ASN1C_EXP_AdministrationDomainName (ASN1C_EXP_AdministrationDomainName& original);
   virtual ~ASN1C_EXP_AdministrationDomainName () {}
   inline ASN1T_EXP_AdministrationDomainName& getData () { return msgData; }
   inline const ASN1T_EXP_AdministrationDomainName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "AdministrationDomainName");
   int toStream (const char* name = "AdministrationDomainName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_AdministrationDomainName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_AdministrationDomainName& getCopy (ASN1T_EXP_AdministrationDomainName* pDstData = 0);
   ASN1T_EXP_AdministrationDomainName* newCopy ();

   inline ASN1C_EXP_AdministrationDomainName& operator= (ASN1C_EXP_AdministrationDomainName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_AdministrationDomainName (OSCTXT* pctxt,
   ASN1T_EXP_AdministrationDomainName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_AdministrationDomainName (OSCTXT* pctxt, 
   ASN1T_EXP_AdministrationDomainName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_AdministrationDomainName 
   (const char* name, const ASN1T_EXP_AdministrationDomainName* pvalue);

EXTERN int asn1PrtToStrm_EXP_AdministrationDomainName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_AdministrationDomainName* pvalue);

EXTERN ASN1T_EXP_AdministrationDomainName* 
   new_ASN1T_EXP_AdministrationDomainName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_AdministrationDomainName (const char* name, 
   ASN1T_EXP_AdministrationDomainName* pValue, 
   ASN1T_EXP_AdministrationDomainName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_AdministrationDomainName (OSCTXT* pctxt, 
   ASN1T_EXP_AdministrationDomainName* pSrcValue, 
   ASN1T_EXP_AdministrationDomainName* pDstValue);

EXTERN void asn1Init_EXP_AdministrationDomainName (
   ASN1T_EXP_AdministrationDomainName* pvalue);

EXTERN void asn1Free_EXP_AdministrationDomainName (OSCTXT *pctxt, 
   ASN1T_EXP_AdministrationDomainName* pvalue);

/**************************************************************/
/*                                                            */
/*  PrivateDomainName                                         */
/*                                                            */
/**************************************************************/
/*
PrivateDomainName ::= CHOICE {
   numeric NumericString (SIZE (1..ub-domain-name-length)),
   printable PrintableString (SIZE (1..ub-domain-name-length))
}
*/
/* Choice context tags */

#define TVC_EXP_PrivateDomainName_numeric	(TM_UNIV|TM_PRIM|18)
#define TVC_EXP_PrivateDomainName_printable	(TM_UNIV|TM_PRIM|19)

/* Choice tag constants */

#define T_EXP_PrivateDomainName_numeric 1
#define T_EXP_PrivateDomainName_printable 2

class EXTERN ASN1C_EXP_PrivateDomainName;

struct EXTERN ASN1T_EXP_PrivateDomainName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const char* numeric;
      /* t = 2 */
      const char* printable;
   } u;
   ASN1T_EXP_PrivateDomainName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_PrivateDomainName (ASN1C_EXP_PrivateDomainName& srcData);
   ~ASN1T_EXP_PrivateDomainName ();
} ;

class EXTERN ASN1C_EXP_PrivateDomainName :
public ASN1CType
{
protected:
   ASN1T_EXP_PrivateDomainName& msgData;
public:
   ASN1C_EXP_PrivateDomainName (ASN1T_EXP_PrivateDomainName& data);
   ASN1C_EXP_PrivateDomainName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PrivateDomainName& data);
   ASN1C_EXP_PrivateDomainName (OSRTContext &context
      , ASN1T_EXP_PrivateDomainName& data);
   ASN1C_EXP_PrivateDomainName (ASN1C_EXP_PrivateDomainName& original);
   virtual ~ASN1C_EXP_PrivateDomainName () {}
   inline ASN1T_EXP_PrivateDomainName& getData () { return msgData; }
   inline const ASN1T_EXP_PrivateDomainName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PrivateDomainName");
   int toStream (const char* name = "PrivateDomainName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PrivateDomainName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PrivateDomainName& getCopy (ASN1T_EXP_PrivateDomainName* pDstData = 0);
   ASN1T_EXP_PrivateDomainName* newCopy ();

   inline ASN1C_EXP_PrivateDomainName& operator= (ASN1C_EXP_PrivateDomainName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PrivateDomainName (OSCTXT* pctxt,
   ASN1T_EXP_PrivateDomainName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PrivateDomainName (OSCTXT* pctxt, 
   ASN1T_EXP_PrivateDomainName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_PrivateDomainName 
   (const char* name, const ASN1T_EXP_PrivateDomainName* pvalue);

EXTERN int asn1PrtToStrm_EXP_PrivateDomainName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PrivateDomainName* pvalue);

EXTERN ASN1T_EXP_PrivateDomainName* 
   new_ASN1T_EXP_PrivateDomainName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PrivateDomainName (const char* name, 
   ASN1T_EXP_PrivateDomainName* pValue, 
   ASN1T_EXP_PrivateDomainName* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PrivateDomainName (OSCTXT* pctxt, 
   ASN1T_EXP_PrivateDomainName* pSrcValue, ASN1T_EXP_PrivateDomainName*
    pDstValue);

EXTERN void asn1Init_EXP_PrivateDomainName (ASN1T_EXP_PrivateDomainName* pvalue);

EXTERN void asn1Free_EXP_PrivateDomainName (OSCTXT *pctxt, 
   ASN1T_EXP_PrivateDomainName* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalName                                              */
/*                                                            */
/**************************************************************/
/*
PersonalName ::= SET {
   surname [0] IMPLICIT PrintableString (SIZE (1..ub-surname-length)),
   given-name [1] IMPLICIT PrintableString (SIZE (1..ub-given-name-length)) OPTIONAL,
   initials [2] IMPLICIT PrintableString (SIZE (1..ub-initials-length)) OPTIONAL,
   generation-qualifier [3] IMPLICIT PrintableString (SIZE (1..ub-generation-qualifier-length)) OPTIONAL
}
*/
#define TV_EXP_PersonalName	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_PersonalName;

struct EXTERN ASN1T_EXP_PersonalName : public ASN1TPDU {
   struct {
      unsigned given_namePresent : 1;
      unsigned initialsPresent : 1;
      unsigned generation_qualifierPresent : 1;
   } m;
   const char* surname;
   const char* given_name;
   const char* initials;
   const char* generation_qualifier;
   ASN1T_EXP_PersonalName ();
   ASN1T_EXP_PersonalName (ASN1C_EXP_PersonalName& srcData);
   ~ASN1T_EXP_PersonalName ();
} ;

class EXTERN ASN1C_EXP_PersonalName :
public ASN1CType
{
protected:
   ASN1T_EXP_PersonalName& msgData;
public:
   ASN1C_EXP_PersonalName (ASN1T_EXP_PersonalName& data);
   ASN1C_EXP_PersonalName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PersonalName& data);
   ASN1C_EXP_PersonalName (OSRTContext &context, ASN1T_EXP_PersonalName& data);
   ASN1C_EXP_PersonalName (ASN1C_EXP_PersonalName& original);
   virtual ~ASN1C_EXP_PersonalName () {}
   inline ASN1T_EXP_PersonalName& getData () { return msgData; }
   inline const ASN1T_EXP_PersonalName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PersonalName");
   int toStream (const char* name = "PersonalName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PersonalName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PersonalName& getCopy (ASN1T_EXP_PersonalName* pDstData = 0);
   ASN1T_EXP_PersonalName* newCopy ();

   inline ASN1C_EXP_PersonalName& operator= (ASN1C_EXP_PersonalName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PersonalName (OSCTXT* pctxt,
   ASN1T_EXP_PersonalName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_PersonalName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_PersonalName 
   (const char* name, const ASN1T_EXP_PersonalName* pvalue);

EXTERN int asn1PrtToStrm_EXP_PersonalName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PersonalName* pvalue);

EXTERN ASN1T_EXP_PersonalName* new_ASN1T_EXP_PersonalName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PersonalName (const char* name, 
   ASN1T_EXP_PersonalName* pValue, ASN1T_EXP_PersonalName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_PersonalName* pSrcValue, ASN1T_EXP_PersonalName* pDstValue);

EXTERN void asn1Init_EXP_PersonalName (ASN1T_EXP_PersonalName* pvalue);

EXTERN void asn1Free_EXP_PersonalName (OSCTXT *pctxt, ASN1T_EXP_PersonalName* pvalue);

/**************************************************************/
/*                                                            */
/*  OrganizationalUnitNames                                   */
/*                                                            */
/**************************************************************/
/*
 see also teletex-personal-name

OrganizationalUnitNames ::= SEQUENCE (SIZE (1..ub-organizational-units)) OF OrganizationalUnitName
*/
#define TV_EXP_OrganizationalUnitNames	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_OrganizationalUnitNames;

/* List of ASN1T_EXP_OrganizationalUnitName */
typedef struct EXTERN ASN1T_EXP_OrganizationalUnitNames : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_OrganizationalUnitNames();
} ASN1T_EXP_OrganizationalUnitNames;

class EXTERN ASN1C_EXP_OrganizationalUnitNames :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_OrganizationalUnitNames& msgData;
public:
   ASN1C_EXP_OrganizationalUnitNames (ASN1T_EXP_OrganizationalUnitNames& data);
   ASN1C_EXP_OrganizationalUnitNames (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_OrganizationalUnitNames& data);
   ASN1C_EXP_OrganizationalUnitNames (ASN1CType& ccobj
      , ASN1T_EXP_OrganizationalUnitNames& data);
   ASN1C_EXP_OrganizationalUnitNames (OSRTContext &context
      , ASN1T_EXP_OrganizationalUnitNames& data);
   ASN1C_EXP_OrganizationalUnitNames (ASN1C_EXP_OrganizationalUnitNames& original);
   virtual ~ASN1C_EXP_OrganizationalUnitNames () {}
   inline ASN1T_EXP_OrganizationalUnitNames& getData () { return msgData; }
   inline const ASN1T_EXP_OrganizationalUnitNames& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "OrganizationalUnitNames");
   int toStream (const char* name = "OrganizationalUnitNames");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_OrganizationalUnitNames* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_OrganizationalUnitNames& getCopy (ASN1T_EXP_OrganizationalUnitNames* pDstData = 0);
   ASN1T_EXP_OrganizationalUnitNames* newCopy ();

   ASN1C_EXP_OrganizationalUnitNames& operator= (ASN1C_EXP_OrganizationalUnitNames& srcData);
   void Append (ASN1T_EXP_OrganizationalUnitName elem);
} ;

EXTERN int asn1E_EXP_OrganizationalUnitNames (OSCTXT* pctxt,
   ASN1T_EXP_OrganizationalUnitNames *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_OrganizationalUnitNames (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationalUnitNames* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_OrganizationalUnitNames 
   (const char* name, const ASN1T_EXP_OrganizationalUnitNames* pvalue);

EXTERN int asn1PrtToStrm_EXP_OrganizationalUnitNames (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_OrganizationalUnitNames* pvalue);

EXTERN OSBOOL asn1Compare_EXP_OrganizationalUnitNames (const char* name, 
   ASN1T_EXP_OrganizationalUnitNames* pValue, 
   ASN1T_EXP_OrganizationalUnitNames* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_OrganizationalUnitNames (OSCTXT* pctxt, 
   ASN1T_EXP_OrganizationalUnitNames* pSrcValue, 
   ASN1T_EXP_OrganizationalUnitNames* pDstValue);

EXTERN void asn1Init_EXP_OrganizationalUnitNames (
   ASN1T_EXP_OrganizationalUnitNames* pvalue);

EXTERN void asn1Free_EXP_OrganizationalUnitNames (OSCTXT *pctxt, 
   ASN1T_EXP_OrganizationalUnitNames* pvalue);

/**************************************************************/
/*                                                            */
/*  BuiltInStandardAttributes                                 */
/*                                                            */
/**************************************************************/
/*
 Built-in Standard Attributes

BuiltInStandardAttributes ::= SEQUENCE {
   country-name CountryName OPTIONAL,
   administration-domain-name AdministrationDomainName OPTIONAL,
   network-address [0] IMPLICIT NetworkAddress OPTIONAL,
   terminal-identifier [1] IMPLICIT TerminalIdentifier OPTIONAL,
   private-domain-name [2] PrivateDomainName OPTIONAL,
   organization-name [3] IMPLICIT OrganizationName OPTIONAL,
   numeric-user-identifier [4] IMPLICIT NumericUserIdentifier OPTIONAL,
   personal-name [5] IMPLICIT PersonalName OPTIONAL,
   organizational-unit-names [6] IMPLICIT OrganizationalUnitNames OPTIONAL
}
*/
#define TV_EXP_BuiltInStandardAttributes	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_BuiltInStandardAttributes;

struct EXTERN ASN1T_EXP_BuiltInStandardAttributes : public ASN1TPDU {
   struct {
      unsigned country_namePresent : 1;
      unsigned administration_domain_namePresent : 1;
      unsigned network_addressPresent : 1;
      unsigned terminal_identifierPresent : 1;
      unsigned private_domain_namePresent : 1;
      unsigned organization_namePresent : 1;
      unsigned numeric_user_identifierPresent : 1;
      unsigned personal_namePresent : 1;
      unsigned organizational_unit_namesPresent : 1;
   } m;
   ASN1T_EXP_CountryName country_name;
   ASN1T_EXP_AdministrationDomainName administration_domain_name;
   ASN1T_EXP_NetworkAddress network_address;
   ASN1T_EXP_TerminalIdentifier terminal_identifier;
   ASN1T_EXP_PrivateDomainName private_domain_name;
   ASN1T_EXP_OrganizationName organization_name;
   ASN1T_EXP_NumericUserIdentifier numeric_user_identifier;
   ASN1T_EXP_PersonalName personal_name;
   ASN1T_EXP_OrganizationalUnitNames organizational_unit_names;
   ASN1T_EXP_BuiltInStandardAttributes ();
   ASN1T_EXP_BuiltInStandardAttributes (ASN1C_EXP_BuiltInStandardAttributes& srcData);
   ~ASN1T_EXP_BuiltInStandardAttributes ();
} ;

class EXTERN ASN1C_EXP_BuiltInStandardAttributes :
public ASN1CType
{
protected:
   ASN1T_EXP_BuiltInStandardAttributes& msgData;
public:
   ASN1C_EXP_BuiltInStandardAttributes
       (ASN1T_EXP_BuiltInStandardAttributes& data);
   ASN1C_EXP_BuiltInStandardAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_BuiltInStandardAttributes& data);
   ASN1C_EXP_BuiltInStandardAttributes (OSRTContext &context
      , ASN1T_EXP_BuiltInStandardAttributes& data);
   ASN1C_EXP_BuiltInStandardAttributes (ASN1C_EXP_BuiltInStandardAttributes& original);
   virtual ~ASN1C_EXP_BuiltInStandardAttributes () {}
   inline ASN1T_EXP_BuiltInStandardAttributes& getData () { return msgData; }
   inline const ASN1T_EXP_BuiltInStandardAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BuiltInStandardAttributes");
   int toStream (const char* name = "BuiltInStandardAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_BuiltInStandardAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_BuiltInStandardAttributes& getCopy (ASN1T_EXP_BuiltInStandardAttributes* pDstData = 0);
   ASN1T_EXP_BuiltInStandardAttributes* newCopy ();

   inline ASN1C_EXP_BuiltInStandardAttributes& operator= (ASN1C_EXP_BuiltInStandardAttributes& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_BuiltInStandardAttributes (OSCTXT* pctxt,
   ASN1T_EXP_BuiltInStandardAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_BuiltInStandardAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInStandardAttributes* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_BuiltInStandardAttributes 
   (const char* name, const ASN1T_EXP_BuiltInStandardAttributes* pvalue);

EXTERN int asn1PrtToStrm_EXP_BuiltInStandardAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_BuiltInStandardAttributes* pvalue);

EXTERN ASN1T_EXP_BuiltInStandardAttributes* 
   new_ASN1T_EXP_BuiltInStandardAttributes (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_BuiltInStandardAttributes (const char* name, 
   ASN1T_EXP_BuiltInStandardAttributes* pValue, 
   ASN1T_EXP_BuiltInStandardAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_BuiltInStandardAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInStandardAttributes* pSrcValue, 
   ASN1T_EXP_BuiltInStandardAttributes* pDstValue);

EXTERN void asn1Init_EXP_BuiltInStandardAttributes (
   ASN1T_EXP_BuiltInStandardAttributes* pvalue);

EXTERN void asn1Free_EXP_BuiltInStandardAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_BuiltInStandardAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  BuiltInDomainDefinedAttribute                             */
/*                                                            */
/**************************************************************/
/*
BuiltInDomainDefinedAttribute ::= SEQUENCE {
   type PrintableString (SIZE (1..ub-domain-defined-attribute-type-length)),
   value PrintableString (SIZE (1..ub-domain-defined-attribute-value-length))
}
*/
#define TV_EXP_BuiltInDomainDefinedAttribute	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_BuiltInDomainDefinedAttribute;

struct EXTERN ASN1T_EXP_BuiltInDomainDefinedAttribute : public ASN1TPDU {
   const char* type;
   const char* value;
   ASN1T_EXP_BuiltInDomainDefinedAttribute ();
   ASN1T_EXP_BuiltInDomainDefinedAttribute (ASN1C_EXP_BuiltInDomainDefinedAttribute& srcData);
   ~ASN1T_EXP_BuiltInDomainDefinedAttribute ();
} ;

class EXTERN ASN1C_EXP_BuiltInDomainDefinedAttribute :
public ASN1CType
{
protected:
   ASN1T_EXP_BuiltInDomainDefinedAttribute& msgData;
public:
   ASN1C_EXP_BuiltInDomainDefinedAttribute
       (ASN1T_EXP_BuiltInDomainDefinedAttribute& data);
   ASN1C_EXP_BuiltInDomainDefinedAttribute (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_BuiltInDomainDefinedAttribute& data);
   ASN1C_EXP_BuiltInDomainDefinedAttribute (OSRTContext &context
      , ASN1T_EXP_BuiltInDomainDefinedAttribute& data);
   ASN1C_EXP_BuiltInDomainDefinedAttribute (ASN1C_EXP_BuiltInDomainDefinedAttribute& original);
   virtual ~ASN1C_EXP_BuiltInDomainDefinedAttribute () {}
   inline ASN1T_EXP_BuiltInDomainDefinedAttribute& getData () { return msgData; }
   inline const ASN1T_EXP_BuiltInDomainDefinedAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BuiltInDomainDefinedAttribute");
   int toStream (const char* name = "BuiltInDomainDefinedAttribute");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_BuiltInDomainDefinedAttribute* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_BuiltInDomainDefinedAttribute& getCopy (ASN1T_EXP_BuiltInDomainDefinedAttribute* pDstData = 0);
   ASN1T_EXP_BuiltInDomainDefinedAttribute* newCopy ();

   inline ASN1C_EXP_BuiltInDomainDefinedAttribute& operator= (ASN1C_EXP_BuiltInDomainDefinedAttribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_BuiltInDomainDefinedAttribute (OSCTXT* pctxt,
   ASN1T_EXP_BuiltInDomainDefinedAttribute *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_BuiltInDomainDefinedAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_BuiltInDomainDefinedAttribute 
   (const char* name, const ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue);

EXTERN int asn1PrtToStrm_EXP_BuiltInDomainDefinedAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue);

EXTERN ASN1T_EXP_BuiltInDomainDefinedAttribute* 
   new_ASN1T_EXP_BuiltInDomainDefinedAttribute (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_BuiltInDomainDefinedAttribute (const char* name, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pValue, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_BuiltInDomainDefinedAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pSrcValue, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pDstValue);

EXTERN void asn1Init_EXP_BuiltInDomainDefinedAttribute (
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue);

EXTERN void asn1Free_EXP_BuiltInDomainDefinedAttribute (OSCTXT *pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  BuiltInDomainDefinedAttributes                            */
/*                                                            */
/**************************************************************/
/*
BuiltInDomainDefinedAttributes ::= SEQUENCE (SIZE (1..ub-domain-defined-attributes)) OF BuiltInDomainDefinedAttribute
*/
#define TV_EXP_BuiltInDomainDefinedAttributes	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_BuiltInDomainDefinedAttributes;

/* List of ASN1T_EXP_BuiltInDomainDefinedAttribute */
typedef struct EXTERN ASN1T_EXP_BuiltInDomainDefinedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_BuiltInDomainDefinedAttributes();
} ASN1T_EXP_BuiltInDomainDefinedAttributes;

class EXTERN ASN1C_EXP_BuiltInDomainDefinedAttributes :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_BuiltInDomainDefinedAttributes& msgData;
public:
   ASN1C_EXP_BuiltInDomainDefinedAttributes
       (ASN1T_EXP_BuiltInDomainDefinedAttributes& data);
   ASN1C_EXP_BuiltInDomainDefinedAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_BuiltInDomainDefinedAttributes& data);
   ASN1C_EXP_BuiltInDomainDefinedAttributes (ASN1CType& ccobj
      , ASN1T_EXP_BuiltInDomainDefinedAttributes& data);
   ASN1C_EXP_BuiltInDomainDefinedAttributes (OSRTContext &context
      , ASN1T_EXP_BuiltInDomainDefinedAttributes& data);
   ASN1C_EXP_BuiltInDomainDefinedAttributes (ASN1C_EXP_BuiltInDomainDefinedAttributes& original);
   virtual ~ASN1C_EXP_BuiltInDomainDefinedAttributes () {}
   inline ASN1T_EXP_BuiltInDomainDefinedAttributes& getData () { return msgData; }
   inline const ASN1T_EXP_BuiltInDomainDefinedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "BuiltInDomainDefinedAttributes");
   int toStream (const char* name = "BuiltInDomainDefinedAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_BuiltInDomainDefinedAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_BuiltInDomainDefinedAttributes& getCopy (ASN1T_EXP_BuiltInDomainDefinedAttributes* pDstData = 0);
   ASN1T_EXP_BuiltInDomainDefinedAttributes* newCopy ();

   ASN1C_EXP_BuiltInDomainDefinedAttributes& operator= (ASN1C_EXP_BuiltInDomainDefinedAttributes& srcData);
   void Append (ASN1T_EXP_BuiltInDomainDefinedAttribute* elem);
   ASN1T_EXP_BuiltInDomainDefinedAttribute* NewElement ();
   ASN1T_EXP_BuiltInDomainDefinedAttribute* AppendNewElement ();
} ;

EXTERN int asn1E_EXP_BuiltInDomainDefinedAttributes (OSCTXT* pctxt,
   ASN1T_EXP_BuiltInDomainDefinedAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_BuiltInDomainDefinedAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_BuiltInDomainDefinedAttributes 
   (const char* name, const ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue);

EXTERN int asn1PrtToStrm_EXP_BuiltInDomainDefinedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_EXP_BuiltInDomainDefinedAttributes (const char* name, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pValue, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_BuiltInDomainDefinedAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pSrcValue, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pDstValue);

EXTERN void asn1Init_EXP_BuiltInDomainDefinedAttributes (
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue);

EXTERN void asn1Free_EXP_BuiltInDomainDefinedAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtensionAttribute                                        */
/*                                                            */
/**************************************************************/
/*
ExtensionAttribute ::= SEQUENCE {
   extension-attribute-type [0] IMPLICIT INTEGER (0..ub-extension-attributes),
   extension-attribute-value [1] ANY
}
*/
#define TV_EXP_ExtensionAttribute	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_ExtensionAttribute;

struct EXTERN ASN1T_EXP_ExtensionAttribute : public ASN1TPDU {
   OSUINT16 extension_attribute_type;
   ASN1TOpenType extension_attribute_value;
   ASN1T_EXP_ExtensionAttribute ();
   ASN1T_EXP_ExtensionAttribute (ASN1C_EXP_ExtensionAttribute& srcData);
   ~ASN1T_EXP_ExtensionAttribute ();
} ;

class EXTERN ASN1C_EXP_ExtensionAttribute :
public ASN1CType
{
protected:
   ASN1T_EXP_ExtensionAttribute& msgData;
public:
   ASN1C_EXP_ExtensionAttribute (ASN1T_EXP_ExtensionAttribute& data);
   ASN1C_EXP_ExtensionAttribute (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_ExtensionAttribute& data);
   ASN1C_EXP_ExtensionAttribute (OSRTContext &context
      , ASN1T_EXP_ExtensionAttribute& data);
   ASN1C_EXP_ExtensionAttribute (ASN1C_EXP_ExtensionAttribute& original);
   virtual ~ASN1C_EXP_ExtensionAttribute () {}
   inline ASN1T_EXP_ExtensionAttribute& getData () { return msgData; }
   inline const ASN1T_EXP_ExtensionAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtensionAttribute");
   int toStream (const char* name = "ExtensionAttribute");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_ExtensionAttribute* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_ExtensionAttribute& getCopy (ASN1T_EXP_ExtensionAttribute* pDstData = 0);
   ASN1T_EXP_ExtensionAttribute* newCopy ();

   inline ASN1C_EXP_ExtensionAttribute& operator= (ASN1C_EXP_ExtensionAttribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_ExtensionAttribute (OSCTXT* pctxt,
   ASN1T_EXP_ExtensionAttribute *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_ExtensionAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionAttribute* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_ExtensionAttribute 
   (const char* name, const ASN1T_EXP_ExtensionAttribute* pvalue);

EXTERN int asn1PrtToStrm_EXP_ExtensionAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtensionAttribute* pvalue);

EXTERN ASN1T_EXP_ExtensionAttribute* 
   new_ASN1T_EXP_ExtensionAttribute (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_ExtensionAttribute (const char* name, 
   ASN1T_EXP_ExtensionAttribute* pValue, 
   ASN1T_EXP_ExtensionAttribute* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_ExtensionAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionAttribute* pSrcValue, ASN1T_EXP_ExtensionAttribute*
    pDstValue);

EXTERN void asn1Init_EXP_ExtensionAttribute (ASN1T_EXP_ExtensionAttribute* pvalue);

EXTERN void asn1Free_EXP_ExtensionAttribute (OSCTXT *pctxt, 
   ASN1T_EXP_ExtensionAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtensionAttributes                                       */
/*                                                            */
/**************************************************************/
/*
 Extension Attributes

ExtensionAttributes ::= SET (SIZE (1..ub-extension-attributes)) OF ExtensionAttribute
*/
#define TV_EXP_ExtensionAttributes	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_ExtensionAttributes;

/* List of ASN1T_EXP_ExtensionAttribute */
typedef struct EXTERN ASN1T_EXP_ExtensionAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_ExtensionAttributes();
} ASN1T_EXP_ExtensionAttributes;

class EXTERN ASN1C_EXP_ExtensionAttributes :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_ExtensionAttributes& msgData;
public:
   ASN1C_EXP_ExtensionAttributes (ASN1T_EXP_ExtensionAttributes& data);
   ASN1C_EXP_ExtensionAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_ExtensionAttributes& data);
   ASN1C_EXP_ExtensionAttributes (ASN1CType& ccobj
      , ASN1T_EXP_ExtensionAttributes& data);
   ASN1C_EXP_ExtensionAttributes (OSRTContext &context
      , ASN1T_EXP_ExtensionAttributes& data);
   ASN1C_EXP_ExtensionAttributes (ASN1C_EXP_ExtensionAttributes& original);
   virtual ~ASN1C_EXP_ExtensionAttributes () {}
   inline ASN1T_EXP_ExtensionAttributes& getData () { return msgData; }
   inline const ASN1T_EXP_ExtensionAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtensionAttributes");
   int toStream (const char* name = "ExtensionAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_ExtensionAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_ExtensionAttributes& getCopy (ASN1T_EXP_ExtensionAttributes* pDstData = 0);
   ASN1T_EXP_ExtensionAttributes* newCopy ();

   ASN1C_EXP_ExtensionAttributes& operator= (ASN1C_EXP_ExtensionAttributes& srcData);
   void Append (ASN1T_EXP_ExtensionAttribute* elem);
   ASN1T_EXP_ExtensionAttribute* NewElement ();
   ASN1T_EXP_ExtensionAttribute* AppendNewElement ();
} ;

EXTERN int asn1E_EXP_ExtensionAttributes (OSCTXT* pctxt,
   ASN1T_EXP_ExtensionAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_ExtensionAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionAttributes* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_ExtensionAttributes 
   (const char* name, const ASN1T_EXP_ExtensionAttributes* pvalue);

EXTERN int asn1PrtToStrm_EXP_ExtensionAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtensionAttributes* pvalue);

EXTERN OSBOOL asn1Compare_EXP_ExtensionAttributes (const char* name, 
   ASN1T_EXP_ExtensionAttributes* pValue, 
   ASN1T_EXP_ExtensionAttributes* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_ExtensionAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_ExtensionAttributes* pSrcValue, ASN1T_EXP_ExtensionAttributes*
    pDstValue);

EXTERN void asn1Init_EXP_ExtensionAttributes (ASN1T_EXP_ExtensionAttributes* pvalue);

EXTERN void asn1Free_EXP_ExtensionAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_ExtensionAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  ORAddress                                                 */
/*                                                            */
/**************************************************************/
/*
UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
 The content of this type conforms to RFC 2279.
**************************************

ORAddress ::= SEQUENCE {
   built-in-standard-attributes BuiltInStandardAttributes,
   built-in-domain-defined-attributes BuiltInDomainDefinedAttributes OPTIONAL,
   extension-attributes ExtensionAttributes OPTIONAL
}
*/
#define TV_EXP_ORAddress	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_ORAddress;

struct EXTERN ASN1T_EXP_ORAddress : public ASN1TPDU {
   struct {
      unsigned built_in_domain_defined_attributesPresent : 1;
      unsigned extension_attributesPresent : 1;
   } m;
   ASN1T_EXP_BuiltInStandardAttributes built_in_standard_attributes;
   ASN1T_EXP_BuiltInDomainDefinedAttributes built_in_domain_defined_attributes;
   ASN1T_EXP_ExtensionAttributes extension_attributes;
   ASN1T_EXP_ORAddress ();
   ASN1T_EXP_ORAddress (ASN1C_EXP_ORAddress& srcData);
   ~ASN1T_EXP_ORAddress ();
} ;

class EXTERN ASN1C_EXP_ORAddress :
public ASN1CType
{
protected:
   ASN1T_EXP_ORAddress& msgData;
public:
   ASN1C_EXP_ORAddress (ASN1T_EXP_ORAddress& data);
   ASN1C_EXP_ORAddress (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_ORAddress& data);
   ASN1C_EXP_ORAddress (OSRTContext &context, ASN1T_EXP_ORAddress& data);
   ASN1C_EXP_ORAddress (ASN1C_EXP_ORAddress& original);
   virtual ~ASN1C_EXP_ORAddress () {}
   inline ASN1T_EXP_ORAddress& getData () { return msgData; }
   inline const ASN1T_EXP_ORAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ORAddress");
   int toStream (const char* name = "ORAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_ORAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_ORAddress& getCopy (ASN1T_EXP_ORAddress* pDstData = 0);
   ASN1T_EXP_ORAddress* newCopy ();

   inline ASN1C_EXP_ORAddress& operator= (ASN1C_EXP_ORAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_ORAddress (OSCTXT* pctxt,
   ASN1T_EXP_ORAddress *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_ORAddress (OSCTXT* pctxt, ASN1T_EXP_ORAddress* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_ORAddress 
   (const char* name, const ASN1T_EXP_ORAddress* pvalue);

EXTERN int asn1PrtToStrm_EXP_ORAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ORAddress* pvalue);

EXTERN ASN1T_EXP_ORAddress* new_ASN1T_EXP_ORAddress (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_ORAddress (const char* name, 
   ASN1T_EXP_ORAddress* pValue, ASN1T_EXP_ORAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_ORAddress (OSCTXT* pctxt, ASN1T_EXP_ORAddress* pSrcValue, 
   ASN1T_EXP_ORAddress* pDstValue);

EXTERN void asn1Init_EXP_ORAddress (ASN1T_EXP_ORAddress* pvalue);

EXTERN void asn1Free_EXP_ORAddress (OSCTXT *pctxt, ASN1T_EXP_ORAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  TeletexPersonalName                                       */
/*                                                            */
/**************************************************************/
/*
TeletexPersonalName ::= SET {
   surname [0] IMPLICIT T61String (SIZE (1..ub-surname-length)),
   given-name [1] IMPLICIT T61String (SIZE (1..ub-given-name-length)) OPTIONAL,
   initials [2] IMPLICIT T61String (SIZE (1..ub-initials-length)) OPTIONAL,
   generation-qualifier [3] IMPLICIT T61String (SIZE (1..ub-generation-qualifier-length)) OPTIONAL
}
*/
#define TV_EXP_TeletexPersonalName	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_TeletexPersonalName;

struct EXTERN ASN1T_EXP_TeletexPersonalName : public ASN1TPDU {
   struct {
      unsigned given_namePresent : 1;
      unsigned initialsPresent : 1;
      unsigned generation_qualifierPresent : 1;
   } m;
   const char* surname;
   const char* given_name;
   const char* initials;
   const char* generation_qualifier;
   ASN1T_EXP_TeletexPersonalName ();
   ASN1T_EXP_TeletexPersonalName (ASN1C_EXP_TeletexPersonalName& srcData);
   ~ASN1T_EXP_TeletexPersonalName ();
} ;

class EXTERN ASN1C_EXP_TeletexPersonalName :
public ASN1CType
{
protected:
   ASN1T_EXP_TeletexPersonalName& msgData;
public:
   ASN1C_EXP_TeletexPersonalName (ASN1T_EXP_TeletexPersonalName& data);
   ASN1C_EXP_TeletexPersonalName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TeletexPersonalName& data);
   ASN1C_EXP_TeletexPersonalName (OSRTContext &context
      , ASN1T_EXP_TeletexPersonalName& data);
   ASN1C_EXP_TeletexPersonalName (ASN1C_EXP_TeletexPersonalName& original);
   virtual ~ASN1C_EXP_TeletexPersonalName () {}
   inline ASN1T_EXP_TeletexPersonalName& getData () { return msgData; }
   inline const ASN1T_EXP_TeletexPersonalName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TeletexPersonalName");
   int toStream (const char* name = "TeletexPersonalName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TeletexPersonalName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TeletexPersonalName& getCopy (ASN1T_EXP_TeletexPersonalName* pDstData = 0);
   ASN1T_EXP_TeletexPersonalName* newCopy ();

   inline ASN1C_EXP_TeletexPersonalName& operator= (ASN1C_EXP_TeletexPersonalName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TeletexPersonalName (OSCTXT* pctxt,
   ASN1T_EXP_TeletexPersonalName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TeletexPersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexPersonalName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_TeletexPersonalName 
   (const char* name, const ASN1T_EXP_TeletexPersonalName* pvalue);

EXTERN int asn1PrtToStrm_EXP_TeletexPersonalName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexPersonalName* pvalue);

EXTERN ASN1T_EXP_TeletexPersonalName* 
   new_ASN1T_EXP_TeletexPersonalName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_TeletexPersonalName (const char* name, 
   ASN1T_EXP_TeletexPersonalName* pValue, 
   ASN1T_EXP_TeletexPersonalName* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TeletexPersonalName (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexPersonalName* pSrcValue, ASN1T_EXP_TeletexPersonalName*
    pDstValue);

EXTERN void asn1Init_EXP_TeletexPersonalName (ASN1T_EXP_TeletexPersonalName* pvalue);

EXTERN void asn1Free_EXP_TeletexPersonalName (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexPersonalName* pvalue);

/**************************************************************/
/*                                                            */
/*  TeletexOrganizationalUnitNames                            */
/*                                                            */
/**************************************************************/
/*
TeletexOrganizationalUnitNames ::= SEQUENCE (SIZE (1..ub-organizational-units)) OF TeletexOrganizationalUnitName
*/
#define TV_EXP_TeletexOrganizationalUnitNames	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_TeletexOrganizationalUnitNames;

/* List of ASN1T_EXP_TeletexOrganizationalUnitName */
typedef struct EXTERN ASN1T_EXP_TeletexOrganizationalUnitNames : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_TeletexOrganizationalUnitNames();
} ASN1T_EXP_TeletexOrganizationalUnitNames;

class EXTERN ASN1C_EXP_TeletexOrganizationalUnitNames :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_TeletexOrganizationalUnitNames& msgData;
public:
   ASN1C_EXP_TeletexOrganizationalUnitNames
       (ASN1T_EXP_TeletexOrganizationalUnitNames& data);
   ASN1C_EXP_TeletexOrganizationalUnitNames (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TeletexOrganizationalUnitNames& data);
   ASN1C_EXP_TeletexOrganizationalUnitNames (ASN1CType& ccobj
      , ASN1T_EXP_TeletexOrganizationalUnitNames& data);
   ASN1C_EXP_TeletexOrganizationalUnitNames (OSRTContext &context
      , ASN1T_EXP_TeletexOrganizationalUnitNames& data);
   ASN1C_EXP_TeletexOrganizationalUnitNames (ASN1C_EXP_TeletexOrganizationalUnitNames& original);
   virtual ~ASN1C_EXP_TeletexOrganizationalUnitNames () {}
   inline ASN1T_EXP_TeletexOrganizationalUnitNames& getData () { return msgData; }
   inline const ASN1T_EXP_TeletexOrganizationalUnitNames& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TeletexOrganizationalUnitNames");
   int toStream (const char* name = "TeletexOrganizationalUnitNames");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TeletexOrganizationalUnitNames* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TeletexOrganizationalUnitNames& getCopy (ASN1T_EXP_TeletexOrganizationalUnitNames* pDstData = 0);
   ASN1T_EXP_TeletexOrganizationalUnitNames* newCopy ();

   ASN1C_EXP_TeletexOrganizationalUnitNames& operator= (ASN1C_EXP_TeletexOrganizationalUnitNames& srcData);
   void Append (ASN1T_EXP_TeletexOrganizationalUnitName elem);
} ;

EXTERN int asn1E_EXP_TeletexOrganizationalUnitNames (OSCTXT* pctxt,
   ASN1T_EXP_TeletexOrganizationalUnitNames *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TeletexOrganizationalUnitNames (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_TeletexOrganizationalUnitNames 
   (const char* name, const ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue);

EXTERN int asn1PrtToStrm_EXP_TeletexOrganizationalUnitNames (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue);

EXTERN OSBOOL asn1Compare_EXP_TeletexOrganizationalUnitNames (const char* name, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pValue, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TeletexOrganizationalUnitNames (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pSrcValue, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pDstValue);

EXTERN void asn1Init_EXP_TeletexOrganizationalUnitNames (
   ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue);

EXTERN void asn1Free_EXP_TeletexOrganizationalUnitNames (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue);

/**************************************************************/
/*                                                            */
/*  PhysicalDeliveryCountryName                               */
/*                                                            */
/**************************************************************/
/*
PhysicalDeliveryCountryName ::= CHOICE {
   x121-dcc-code NumericString (SIZE (ub-country-name-numeric-length)),
   iso-3166-alpha2-code PrintableString (SIZE (ub-country-name-alpha-length))
}
*/
/* Choice context tags */

#define TVC_EXP_PhysicalDeliveryCountryName_x121_dcc_code	(TM_UNIV|TM_PRIM|18)
#define TVC_EXP_PhysicalDeliveryCountryName_iso_3166_alpha2_code	(TM_UNIV|TM_PRIM|19)

/* Choice tag constants */

#define T_EXP_PhysicalDeliveryCountryName_x121_dcc_code 1
#define T_EXP_PhysicalDeliveryCountryName_iso_3166_alpha2_code 2

class EXTERN ASN1C_EXP_PhysicalDeliveryCountryName;

struct EXTERN ASN1T_EXP_PhysicalDeliveryCountryName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const char* x121_dcc_code;
      /* t = 2 */
      const char* iso_3166_alpha2_code;
   } u;
   ASN1T_EXP_PhysicalDeliveryCountryName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_PhysicalDeliveryCountryName (ASN1C_EXP_PhysicalDeliveryCountryName& srcData);
   ~ASN1T_EXP_PhysicalDeliveryCountryName ();
} ;

class EXTERN ASN1C_EXP_PhysicalDeliveryCountryName :
public ASN1CType
{
protected:
   ASN1T_EXP_PhysicalDeliveryCountryName& msgData;
public:
   ASN1C_EXP_PhysicalDeliveryCountryName
       (ASN1T_EXP_PhysicalDeliveryCountryName& data);
   ASN1C_EXP_PhysicalDeliveryCountryName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PhysicalDeliveryCountryName& data);
   ASN1C_EXP_PhysicalDeliveryCountryName (OSRTContext &context
      , ASN1T_EXP_PhysicalDeliveryCountryName& data);
   ASN1C_EXP_PhysicalDeliveryCountryName (ASN1C_EXP_PhysicalDeliveryCountryName& original);
   virtual ~ASN1C_EXP_PhysicalDeliveryCountryName () {}
   inline ASN1T_EXP_PhysicalDeliveryCountryName& getData () { return msgData; }
   inline const ASN1T_EXP_PhysicalDeliveryCountryName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PhysicalDeliveryCountryName");
   int toStream (const char* name = "PhysicalDeliveryCountryName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PhysicalDeliveryCountryName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PhysicalDeliveryCountryName& getCopy (ASN1T_EXP_PhysicalDeliveryCountryName* pDstData = 0);
   ASN1T_EXP_PhysicalDeliveryCountryName* newCopy ();

   inline ASN1C_EXP_PhysicalDeliveryCountryName& operator= (ASN1C_EXP_PhysicalDeliveryCountryName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PhysicalDeliveryCountryName (OSCTXT* pctxt,
   ASN1T_EXP_PhysicalDeliveryCountryName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PhysicalDeliveryCountryName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_PhysicalDeliveryCountryName 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryCountryName* pvalue);

EXTERN int asn1PrtToStrm_EXP_PhysicalDeliveryCountryName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PhysicalDeliveryCountryName* pvalue);

EXTERN ASN1T_EXP_PhysicalDeliveryCountryName* 
   new_ASN1T_EXP_PhysicalDeliveryCountryName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PhysicalDeliveryCountryName (const char* name, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pValue, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PhysicalDeliveryCountryName (OSCTXT* pctxt, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pSrcValue, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pDstValue);

EXTERN void asn1Init_EXP_PhysicalDeliveryCountryName (
   ASN1T_EXP_PhysicalDeliveryCountryName* pvalue);

EXTERN void asn1Free_EXP_PhysicalDeliveryCountryName (OSCTXT *pctxt, 
   ASN1T_EXP_PhysicalDeliveryCountryName* pvalue);

/**************************************************************/
/*                                                            */
/*  PostalCode                                                */
/*                                                            */
/**************************************************************/
/*
PostalCode ::= CHOICE {
   numeric-code NumericString (SIZE (1..ub-postal-code-length)),
   printable-code PrintableString (SIZE (1..ub-postal-code-length))
}
*/
/* Choice context tags */

#define TVC_EXP_PostalCode_numeric_code	(TM_UNIV|TM_PRIM|18)
#define TVC_EXP_PostalCode_printable_code	(TM_UNIV|TM_PRIM|19)

/* Choice tag constants */

#define T_EXP_PostalCode_numeric_code   1
#define T_EXP_PostalCode_printable_code 2

class EXTERN ASN1C_EXP_PostalCode;

struct EXTERN ASN1T_EXP_PostalCode : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const char* numeric_code;
      /* t = 2 */
      const char* printable_code;
   } u;
   ASN1T_EXP_PostalCode () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_PostalCode (ASN1C_EXP_PostalCode& srcData);
   ~ASN1T_EXP_PostalCode ();
} ;

class EXTERN ASN1C_EXP_PostalCode :
public ASN1CType
{
protected:
   ASN1T_EXP_PostalCode& msgData;
public:
   ASN1C_EXP_PostalCode (ASN1T_EXP_PostalCode& data);
   ASN1C_EXP_PostalCode (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PostalCode& data);
   ASN1C_EXP_PostalCode (OSRTContext &context, ASN1T_EXP_PostalCode& data);
   ASN1C_EXP_PostalCode (ASN1C_EXP_PostalCode& original);
   virtual ~ASN1C_EXP_PostalCode () {}
   inline ASN1T_EXP_PostalCode& getData () { return msgData; }
   inline const ASN1T_EXP_PostalCode& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PostalCode");
   int toStream (const char* name = "PostalCode");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PostalCode* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PostalCode& getCopy (ASN1T_EXP_PostalCode* pDstData = 0);
   ASN1T_EXP_PostalCode* newCopy ();

   inline ASN1C_EXP_PostalCode& operator= (ASN1C_EXP_PostalCode& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PostalCode (OSCTXT* pctxt,
   ASN1T_EXP_PostalCode *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PostalCode (OSCTXT* pctxt, ASN1T_EXP_PostalCode* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_PostalCode 
   (const char* name, const ASN1T_EXP_PostalCode* pvalue);

EXTERN int asn1PrtToStrm_EXP_PostalCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PostalCode* pvalue);

EXTERN ASN1T_EXP_PostalCode* new_ASN1T_EXP_PostalCode (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PostalCode (const char* name, 
   ASN1T_EXP_PostalCode* pValue, ASN1T_EXP_PostalCode* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PostalCode (OSCTXT* pctxt, ASN1T_EXP_PostalCode* pSrcValue, 
   ASN1T_EXP_PostalCode* pDstValue);

EXTERN void asn1Init_EXP_PostalCode (ASN1T_EXP_PostalCode* pvalue);

EXTERN void asn1Free_EXP_PostalCode (OSCTXT *pctxt, ASN1T_EXP_PostalCode* pvalue);

/**************************************************************/
/*                                                            */
/*  UnformattedPostalAddress_printable_address                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'UnformattedPostalAddress'
*/
class EXTERN ASN1C_EXP_UnformattedPostalAddress_printable_address;

/* List of const char* */
typedef struct EXTERN ASN1T_EXP_UnformattedPostalAddress_printable_address : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_UnformattedPostalAddress_printable_address();
} ASN1T_EXP_UnformattedPostalAddress_printable_address;

class EXTERN ASN1C_EXP_UnformattedPostalAddress_printable_address :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_UnformattedPostalAddress_printable_address& msgData;
public:
   ASN1C_EXP_UnformattedPostalAddress_printable_address
       (ASN1T_EXP_UnformattedPostalAddress_printable_address& data);
   ASN1C_EXP_UnformattedPostalAddress_printable_address (
      OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_UnformattedPostalAddress_printable_address& data);
   ASN1C_EXP_UnformattedPostalAddress_printable_address (ASN1CType& ccobj
      , ASN1T_EXP_UnformattedPostalAddress_printable_address& data);
   ASN1C_EXP_UnformattedPostalAddress_printable_address (OSRTContext &context
      , ASN1T_EXP_UnformattedPostalAddress_printable_address& data);
   ASN1C_EXP_UnformattedPostalAddress_printable_address (ASN1C_EXP_UnformattedPostalAddress_printable_address& original);
   virtual ~ASN1C_EXP_UnformattedPostalAddress_printable_address () {}
   inline ASN1T_EXP_UnformattedPostalAddress_printable_address& getData () { return msgData; }
   inline const ASN1T_EXP_UnformattedPostalAddress_printable_address& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UnformattedPostalAddress_printable_address");
   int toStream (const char* name = "UnformattedPostalAddress_printable_address");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_UnformattedPostalAddress_printable_address* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_UnformattedPostalAddress_printable_address& getCopy (ASN1T_EXP_UnformattedPostalAddress_printable_address* pDstData = 0);
   ASN1T_EXP_UnformattedPostalAddress_printable_address* newCopy ();

   ASN1C_EXP_UnformattedPostalAddress_printable_address& operator= (ASN1C_EXP_UnformattedPostalAddress_printable_address& srcData);
   void Append (const char* elem);
} ;

EXTERN int asn1E_EXP_UnformattedPostalAddress_printable_address (OSCTXT* pctxt,
   ASN1T_EXP_UnformattedPostalAddress_printable_address *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_UnformattedPostalAddress_printable_address (
   OSCTXT* pctxt, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_UnformattedPostalAddress_printable_address 
   (const char* name, const ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue);

EXTERN int asn1PrtToStrm_EXP_UnformattedPostalAddress_printable_address (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue);

EXTERN OSBOOL asn1Compare_EXP_UnformattedPostalAddress_printable_address (
   const char* name, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pValue, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_UnformattedPostalAddress_printable_address (OSCTXT* pctxt, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pSrcValue, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pDstValue);

EXTERN void asn1Init_EXP_UnformattedPostalAddress_printable_address (
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue);

EXTERN void asn1Free_EXP_UnformattedPostalAddress_printable_address (OSCTXT *pctxt, 
   ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue);

/**************************************************************/
/*                                                            */
/*  UnformattedPostalAddress                                  */
/*                                                            */
/**************************************************************/
/*
UnformattedPostalAddress ::= SET {
   printable-address SEQUENCE (SIZE (1..ub-pds-physical-address-lines)) OF PrintableString (SIZE (1..ub-pds-parameter-length)) OPTIONAL,
   teletex-string T61String (SIZE (1..ub-unformatted-address-length)) OPTIONAL
}
*/
#define TV_EXP_UnformattedPostalAddress	(TM_UNIV|TM_CONS|17)

class EXTERN ASN1C_EXP_UnformattedPostalAddress;

struct EXTERN ASN1T_EXP_UnformattedPostalAddress : public ASN1TPDU {
   struct {
      unsigned printable_addressPresent : 1;
      unsigned teletex_stringPresent : 1;
   } m;
   ASN1T_EXP_UnformattedPostalAddress_printable_address printable_address;
   const char* teletex_string;
   ASN1T_EXP_UnformattedPostalAddress ();
   ASN1T_EXP_UnformattedPostalAddress (ASN1C_EXP_UnformattedPostalAddress& srcData);
   ~ASN1T_EXP_UnformattedPostalAddress ();
} ;

class EXTERN ASN1C_EXP_UnformattedPostalAddress :
public ASN1CType
{
protected:
   ASN1T_EXP_UnformattedPostalAddress& msgData;
public:
   ASN1C_EXP_UnformattedPostalAddress
       (ASN1T_EXP_UnformattedPostalAddress& data);
   ASN1C_EXP_UnformattedPostalAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_UnformattedPostalAddress& data);
   ASN1C_EXP_UnformattedPostalAddress (OSRTContext &context
      , ASN1T_EXP_UnformattedPostalAddress& data);
   ASN1C_EXP_UnformattedPostalAddress (ASN1C_EXP_UnformattedPostalAddress& original);
   virtual ~ASN1C_EXP_UnformattedPostalAddress () {}
   inline ASN1T_EXP_UnformattedPostalAddress& getData () { return msgData; }
   inline const ASN1T_EXP_UnformattedPostalAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "UnformattedPostalAddress");
   int toStream (const char* name = "UnformattedPostalAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_UnformattedPostalAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_UnformattedPostalAddress& getCopy (ASN1T_EXP_UnformattedPostalAddress* pDstData = 0);
   ASN1T_EXP_UnformattedPostalAddress* newCopy ();

   inline ASN1C_EXP_UnformattedPostalAddress& operator= (ASN1C_EXP_UnformattedPostalAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_UnformattedPostalAddress (OSCTXT* pctxt,
   ASN1T_EXP_UnformattedPostalAddress *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_UnformattedPostalAddress (OSCTXT* pctxt, 
   ASN1T_EXP_UnformattedPostalAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_UnformattedPostalAddress 
   (const char* name, const ASN1T_EXP_UnformattedPostalAddress* pvalue);

EXTERN int asn1PrtToStrm_EXP_UnformattedPostalAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_UnformattedPostalAddress* pvalue);

EXTERN ASN1T_EXP_UnformattedPostalAddress* 
   new_ASN1T_EXP_UnformattedPostalAddress (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_UnformattedPostalAddress (const char* name, 
   ASN1T_EXP_UnformattedPostalAddress* pValue, 
   ASN1T_EXP_UnformattedPostalAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_UnformattedPostalAddress (OSCTXT* pctxt, 
   ASN1T_EXP_UnformattedPostalAddress* pSrcValue, 
   ASN1T_EXP_UnformattedPostalAddress* pDstValue);

EXTERN void asn1Init_EXP_UnformattedPostalAddress (
   ASN1T_EXP_UnformattedPostalAddress* pvalue);

EXTERN void asn1Free_EXP_UnformattedPostalAddress (OSCTXT *pctxt, 
   ASN1T_EXP_UnformattedPostalAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedNetworkAddress_e163_4_address                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExtendedNetworkAddress'
*/
class EXTERN ASN1C_EXP_ExtendedNetworkAddress_e163_4_address;

struct EXTERN ASN1T_EXP_ExtendedNetworkAddress_e163_4_address : public ASN1TPDU {
   struct {
      unsigned sub_addressPresent : 1;
   } m;
   const char* number;
   const char* sub_address;
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address ();
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address (ASN1C_EXP_ExtendedNetworkAddress_e163_4_address& srcData);
   ~ASN1T_EXP_ExtendedNetworkAddress_e163_4_address ();
} ;

class EXTERN ASN1C_EXP_ExtendedNetworkAddress_e163_4_address :
public ASN1CType
{
protected:
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& msgData;
public:
   ASN1C_EXP_ExtendedNetworkAddress_e163_4_address
       (ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& data);
   ASN1C_EXP_ExtendedNetworkAddress_e163_4_address (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& data);
   ASN1C_EXP_ExtendedNetworkAddress_e163_4_address (OSRTContext &context
      , ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& data);
   ASN1C_EXP_ExtendedNetworkAddress_e163_4_address (ASN1C_EXP_ExtendedNetworkAddress_e163_4_address& original);
   virtual ~ASN1C_EXP_ExtendedNetworkAddress_e163_4_address () {}
   inline ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& getData () { return msgData; }
   inline const ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtendedNetworkAddress_e163_4_address");
   int toStream (const char* name = "ExtendedNetworkAddress_e163_4_address");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address& getCopy (ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pDstData = 0);
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* newCopy ();

   inline ASN1C_EXP_ExtendedNetworkAddress_e163_4_address& operator= (ASN1C_EXP_ExtendedNetworkAddress_e163_4_address& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT* pctxt,
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT* pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_ExtendedNetworkAddress_e163_4_address 
   (const char* name, const ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue);

EXTERN int asn1PrtToStrm_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue);

EXTERN ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* 
   new_ASN1T_EXP_ExtendedNetworkAddress_e163_4_address (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_ExtendedNetworkAddress_e163_4_address (
   const char* name, ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pValue, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT* pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pSrcValue, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pDstValue);

EXTERN void asn1Init_EXP_ExtendedNetworkAddress_e163_4_address (
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue);

EXTERN void asn1Free_EXP_ExtendedNetworkAddress_e163_4_address (OSCTXT *pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue);

/**************************************************************/
/*                                                            */
/*  PresentationAddress_nAddresses                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PresentationAddress'
*/
class EXTERN ASN1C_EXP_PresentationAddress_nAddresses;

/* List of ASN1TDynOctStr */
typedef struct EXTERN ASN1T_EXP_PresentationAddress_nAddresses : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_PresentationAddress_nAddresses();
} ASN1T_EXP_PresentationAddress_nAddresses;

class EXTERN ASN1C_EXP_PresentationAddress_nAddresses :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_PresentationAddress_nAddresses& msgData;
public:
   ASN1C_EXP_PresentationAddress_nAddresses
       (ASN1T_EXP_PresentationAddress_nAddresses& data);
   ASN1C_EXP_PresentationAddress_nAddresses (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PresentationAddress_nAddresses& data);
   ASN1C_EXP_PresentationAddress_nAddresses (ASN1CType& ccobj
      , ASN1T_EXP_PresentationAddress_nAddresses& data);
   ASN1C_EXP_PresentationAddress_nAddresses (OSRTContext &context
      , ASN1T_EXP_PresentationAddress_nAddresses& data);
   ASN1C_EXP_PresentationAddress_nAddresses (ASN1C_EXP_PresentationAddress_nAddresses& original);
   virtual ~ASN1C_EXP_PresentationAddress_nAddresses () {}
   inline ASN1T_EXP_PresentationAddress_nAddresses& getData () { return msgData; }
   inline const ASN1T_EXP_PresentationAddress_nAddresses& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PresentationAddress_nAddresses");
   int toStream (const char* name = "PresentationAddress_nAddresses");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PresentationAddress_nAddresses* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PresentationAddress_nAddresses& getCopy (ASN1T_EXP_PresentationAddress_nAddresses* pDstData = 0);
   ASN1T_EXP_PresentationAddress_nAddresses* newCopy ();

   ASN1C_EXP_PresentationAddress_nAddresses& operator= (ASN1C_EXP_PresentationAddress_nAddresses& srcData);
   void Append (ASN1TDynOctStr* elem);
   ASN1TDynOctStr* NewElement ();
   ASN1TDynOctStr* AppendNewElement ();
} ;

EXTERN int asn1E_EXP_PresentationAddress_nAddresses (OSCTXT* pctxt,
   ASN1T_EXP_PresentationAddress_nAddresses *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PresentationAddress_nAddresses (OSCTXT* pctxt, 
   ASN1T_EXP_PresentationAddress_nAddresses* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_PresentationAddress_nAddresses 
   (const char* name, const ASN1T_EXP_PresentationAddress_nAddresses* pvalue);

EXTERN int asn1PrtToStrm_EXP_PresentationAddress_nAddresses (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PresentationAddress_nAddresses* pvalue);

EXTERN OSBOOL asn1Compare_EXP_PresentationAddress_nAddresses (const char* name, 
   ASN1T_EXP_PresentationAddress_nAddresses* pValue, 
   ASN1T_EXP_PresentationAddress_nAddresses* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PresentationAddress_nAddresses (OSCTXT* pctxt, 
   ASN1T_EXP_PresentationAddress_nAddresses* pSrcValue, 
   ASN1T_EXP_PresentationAddress_nAddresses* pDstValue);

EXTERN void asn1Init_EXP_PresentationAddress_nAddresses (
   ASN1T_EXP_PresentationAddress_nAddresses* pvalue);

EXTERN void asn1Free_EXP_PresentationAddress_nAddresses (OSCTXT *pctxt, 
   ASN1T_EXP_PresentationAddress_nAddresses* pvalue);

/**************************************************************/
/*                                                            */
/*  PresentationAddress                                       */
/*                                                            */
/**************************************************************/
/*
PresentationAddress ::= SEQUENCE {
   pSelector [0] OCTET STRING OPTIONAL,
   sSelector [1] OCTET STRING OPTIONAL,
   tSelector [2] OCTET STRING OPTIONAL,
   nAddresses [3] SET (SIZE (1..MAX)) OF OCTET STRING
}
*/
#define TV_EXP_PresentationAddress	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_PresentationAddress;

struct EXTERN ASN1T_EXP_PresentationAddress : public ASN1TPDU {
   struct {
      unsigned pSelectorPresent : 1;
      unsigned sSelectorPresent : 1;
      unsigned tSelectorPresent : 1;
   } m;
   ASN1TDynOctStr pSelector;
   ASN1TDynOctStr sSelector;
   ASN1TDynOctStr tSelector;
   ASN1T_EXP_PresentationAddress_nAddresses nAddresses;
   ASN1T_EXP_PresentationAddress ();
   ASN1T_EXP_PresentationAddress (ASN1C_EXP_PresentationAddress& srcData);
   ~ASN1T_EXP_PresentationAddress ();
} ;

class EXTERN ASN1C_EXP_PresentationAddress :
public ASN1CType
{
protected:
   ASN1T_EXP_PresentationAddress& msgData;
public:
   ASN1C_EXP_PresentationAddress (ASN1T_EXP_PresentationAddress& data);
   ASN1C_EXP_PresentationAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_PresentationAddress& data);
   ASN1C_EXP_PresentationAddress (OSRTContext &context
      , ASN1T_EXP_PresentationAddress& data);
   ASN1C_EXP_PresentationAddress (ASN1C_EXP_PresentationAddress& original);
   virtual ~ASN1C_EXP_PresentationAddress () {}
   inline ASN1T_EXP_PresentationAddress& getData () { return msgData; }
   inline const ASN1T_EXP_PresentationAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PresentationAddress");
   int toStream (const char* name = "PresentationAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_PresentationAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_PresentationAddress& getCopy (ASN1T_EXP_PresentationAddress* pDstData = 0);
   ASN1T_EXP_PresentationAddress* newCopy ();

   inline ASN1C_EXP_PresentationAddress& operator= (ASN1C_EXP_PresentationAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_PresentationAddress (OSCTXT* pctxt,
   ASN1T_EXP_PresentationAddress *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_PresentationAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PresentationAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_PresentationAddress 
   (const char* name, const ASN1T_EXP_PresentationAddress* pvalue);

EXTERN int asn1PrtToStrm_EXP_PresentationAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_PresentationAddress* pvalue);

EXTERN ASN1T_EXP_PresentationAddress* 
   new_ASN1T_EXP_PresentationAddress (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_PresentationAddress (const char* name, 
   ASN1T_EXP_PresentationAddress* pValue, 
   ASN1T_EXP_PresentationAddress* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_PresentationAddress (OSCTXT* pctxt, 
   ASN1T_EXP_PresentationAddress* pSrcValue, ASN1T_EXP_PresentationAddress*
    pDstValue);

EXTERN void asn1Init_EXP_PresentationAddress (ASN1T_EXP_PresentationAddress* pvalue);

EXTERN void asn1Free_EXP_PresentationAddress (OSCTXT *pctxt, 
   ASN1T_EXP_PresentationAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  ExtendedNetworkAddress                                    */
/*                                                            */
/**************************************************************/
/*
ExtendedNetworkAddress ::= CHOICE {
   e163-4-address SEQUENCE {
      number [0] IMPLICIT NumericString (SIZE (1..ub-e163-4-number-length)),
      sub-address [1] IMPLICIT NumericString (SIZE (1..ub-e163-4-sub-address-length)) OPTIONAL
   },
   psap-address [0] IMPLICIT PresentationAddress
}
*/
/* Choice context tags */

#define TVC_EXP_ExtendedNetworkAddress_e163_4_address	(TM_UNIV|TM_CONS|16)
#define TVC_EXP_ExtendedNetworkAddress_psap_address	(TM_CTXT|TM_CONS|0)

/* Choice tag constants */

#define T_EXP_ExtendedNetworkAddress_e163_4_address 1
#define T_EXP_ExtendedNetworkAddress_psap_address 2

class EXTERN ASN1C_EXP_ExtendedNetworkAddress;

struct EXTERN ASN1T_EXP_ExtendedNetworkAddress : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1T_EXP_ExtendedNetworkAddress_e163_4_address *e163_4_address;
      /* t = 2 */
      ASN1T_EXP_PresentationAddress *psap_address;
   } u;
   ASN1T_EXP_ExtendedNetworkAddress () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_ExtendedNetworkAddress (ASN1C_EXP_ExtendedNetworkAddress& srcData);
   ~ASN1T_EXP_ExtendedNetworkAddress ();
} ;

class EXTERN ASN1C_EXP_ExtendedNetworkAddress :
public ASN1CType
{
protected:
   ASN1T_EXP_ExtendedNetworkAddress& msgData;
public:
   ASN1C_EXP_ExtendedNetworkAddress (ASN1T_EXP_ExtendedNetworkAddress& data);
   ASN1C_EXP_ExtendedNetworkAddress (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_ExtendedNetworkAddress& data);
   ASN1C_EXP_ExtendedNetworkAddress (OSRTContext &context
      , ASN1T_EXP_ExtendedNetworkAddress& data);
   ASN1C_EXP_ExtendedNetworkAddress (ASN1C_EXP_ExtendedNetworkAddress& original);
   virtual ~ASN1C_EXP_ExtendedNetworkAddress () {}
   inline ASN1T_EXP_ExtendedNetworkAddress& getData () { return msgData; }
   inline const ASN1T_EXP_ExtendedNetworkAddress& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "ExtendedNetworkAddress");
   int toStream (const char* name = "ExtendedNetworkAddress");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_ExtendedNetworkAddress* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_ExtendedNetworkAddress& getCopy (ASN1T_EXP_ExtendedNetworkAddress* pDstData = 0);
   ASN1T_EXP_ExtendedNetworkAddress* newCopy ();

   inline ASN1C_EXP_ExtendedNetworkAddress& operator= (ASN1C_EXP_ExtendedNetworkAddress& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_ExtendedNetworkAddress (OSCTXT* pctxt,
   ASN1T_EXP_ExtendedNetworkAddress *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_ExtendedNetworkAddress (OSCTXT* pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_ExtendedNetworkAddress 
   (const char* name, const ASN1T_EXP_ExtendedNetworkAddress* pvalue);

EXTERN int asn1PrtToStrm_EXP_ExtendedNetworkAddress (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_ExtendedNetworkAddress* pvalue);

EXTERN ASN1T_EXP_ExtendedNetworkAddress* 
   new_ASN1T_EXP_ExtendedNetworkAddress (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_ExtendedNetworkAddress (const char* name, 
   ASN1T_EXP_ExtendedNetworkAddress* pValue, 
   ASN1T_EXP_ExtendedNetworkAddress* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_ExtendedNetworkAddress (OSCTXT* pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress* pSrcValue, 
   ASN1T_EXP_ExtendedNetworkAddress* pDstValue);

EXTERN void asn1Init_EXP_ExtendedNetworkAddress (
   ASN1T_EXP_ExtendedNetworkAddress* pvalue);

EXTERN void asn1Free_EXP_ExtendedNetworkAddress (OSCTXT *pctxt, 
   ASN1T_EXP_ExtendedNetworkAddress* pvalue);

/**************************************************************/
/*                                                            */
/*  TeletexDomainDefinedAttribute                             */
/*                                                            */
/**************************************************************/
/*
TeletexDomainDefinedAttribute ::= SEQUENCE {
   type T61String (SIZE (1..ub-domain-defined-attribute-type-length)),
   value T61String (SIZE (1..ub-domain-defined-attribute-value-length))
}
*/
#define TV_EXP_TeletexDomainDefinedAttribute	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_TeletexDomainDefinedAttribute;

struct EXTERN ASN1T_EXP_TeletexDomainDefinedAttribute : public ASN1TPDU {
   const char* type;
   const char* value;
   ASN1T_EXP_TeletexDomainDefinedAttribute ();
   ASN1T_EXP_TeletexDomainDefinedAttribute (ASN1C_EXP_TeletexDomainDefinedAttribute& srcData);
   ~ASN1T_EXP_TeletexDomainDefinedAttribute ();
} ;

class EXTERN ASN1C_EXP_TeletexDomainDefinedAttribute :
public ASN1CType
{
protected:
   ASN1T_EXP_TeletexDomainDefinedAttribute& msgData;
public:
   ASN1C_EXP_TeletexDomainDefinedAttribute
       (ASN1T_EXP_TeletexDomainDefinedAttribute& data);
   ASN1C_EXP_TeletexDomainDefinedAttribute (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TeletexDomainDefinedAttribute& data);
   ASN1C_EXP_TeletexDomainDefinedAttribute (OSRTContext &context
      , ASN1T_EXP_TeletexDomainDefinedAttribute& data);
   ASN1C_EXP_TeletexDomainDefinedAttribute (ASN1C_EXP_TeletexDomainDefinedAttribute& original);
   virtual ~ASN1C_EXP_TeletexDomainDefinedAttribute () {}
   inline ASN1T_EXP_TeletexDomainDefinedAttribute& getData () { return msgData; }
   inline const ASN1T_EXP_TeletexDomainDefinedAttribute& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TeletexDomainDefinedAttribute");
   int toStream (const char* name = "TeletexDomainDefinedAttribute");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TeletexDomainDefinedAttribute* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TeletexDomainDefinedAttribute& getCopy (ASN1T_EXP_TeletexDomainDefinedAttribute* pDstData = 0);
   ASN1T_EXP_TeletexDomainDefinedAttribute* newCopy ();

   inline ASN1C_EXP_TeletexDomainDefinedAttribute& operator= (ASN1C_EXP_TeletexDomainDefinedAttribute& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_TeletexDomainDefinedAttribute (OSCTXT* pctxt,
   ASN1T_EXP_TeletexDomainDefinedAttribute *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TeletexDomainDefinedAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_TeletexDomainDefinedAttribute 
   (const char* name, const ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue);

EXTERN int asn1PrtToStrm_EXP_TeletexDomainDefinedAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue);

EXTERN ASN1T_EXP_TeletexDomainDefinedAttribute* 
   new_ASN1T_EXP_TeletexDomainDefinedAttribute (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_TeletexDomainDefinedAttribute (const char* name, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pValue, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TeletexDomainDefinedAttribute (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pSrcValue, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pDstValue);

EXTERN void asn1Init_EXP_TeletexDomainDefinedAttribute (
   ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue);

EXTERN void asn1Free_EXP_TeletexDomainDefinedAttribute (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  TeletexDomainDefinedAttributes                            */
/*                                                            */
/**************************************************************/
/*
TeletexDomainDefinedAttributes ::= SEQUENCE (SIZE (1..ub-domain-defined-attributes)) OF TeletexDomainDefinedAttribute
*/
#define TV_EXP_TeletexDomainDefinedAttributes	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_EXP_TeletexDomainDefinedAttributes;

/* List of ASN1T_EXP_TeletexDomainDefinedAttribute */
typedef struct EXTERN ASN1T_EXP_TeletexDomainDefinedAttributes : public ASN1TPDUSeqOfList {
   ~ASN1T_EXP_TeletexDomainDefinedAttributes();
} ASN1T_EXP_TeletexDomainDefinedAttributes;

class EXTERN ASN1C_EXP_TeletexDomainDefinedAttributes :
public ASN1CSeqOfList
{
protected:
   ASN1T_EXP_TeletexDomainDefinedAttributes& msgData;
public:
   ASN1C_EXP_TeletexDomainDefinedAttributes
       (ASN1T_EXP_TeletexDomainDefinedAttributes& data);
   ASN1C_EXP_TeletexDomainDefinedAttributes (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_TeletexDomainDefinedAttributes& data);
   ASN1C_EXP_TeletexDomainDefinedAttributes (ASN1CType& ccobj
      , ASN1T_EXP_TeletexDomainDefinedAttributes& data);
   ASN1C_EXP_TeletexDomainDefinedAttributes (OSRTContext &context
      , ASN1T_EXP_TeletexDomainDefinedAttributes& data);
   ASN1C_EXP_TeletexDomainDefinedAttributes (ASN1C_EXP_TeletexDomainDefinedAttributes& original);
   virtual ~ASN1C_EXP_TeletexDomainDefinedAttributes () {}
   inline ASN1T_EXP_TeletexDomainDefinedAttributes& getData () { return msgData; }
   inline const ASN1T_EXP_TeletexDomainDefinedAttributes& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "TeletexDomainDefinedAttributes");
   int toStream (const char* name = "TeletexDomainDefinedAttributes");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_TeletexDomainDefinedAttributes* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_TeletexDomainDefinedAttributes& getCopy (ASN1T_EXP_TeletexDomainDefinedAttributes* pDstData = 0);
   ASN1T_EXP_TeletexDomainDefinedAttributes* newCopy ();

   ASN1C_EXP_TeletexDomainDefinedAttributes& operator= (ASN1C_EXP_TeletexDomainDefinedAttributes& srcData);
   void Append (ASN1T_EXP_TeletexDomainDefinedAttribute* elem);
   ASN1T_EXP_TeletexDomainDefinedAttribute* NewElement ();
   ASN1T_EXP_TeletexDomainDefinedAttribute* AppendNewElement ();
} ;

EXTERN int asn1E_EXP_TeletexDomainDefinedAttributes (OSCTXT* pctxt,
   ASN1T_EXP_TeletexDomainDefinedAttributes *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_TeletexDomainDefinedAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_TeletexDomainDefinedAttributes 
   (const char* name, const ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue);

EXTERN int asn1PrtToStrm_EXP_TeletexDomainDefinedAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue);

EXTERN OSBOOL asn1Compare_EXP_TeletexDomainDefinedAttributes (const char* name, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pValue, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_TeletexDomainDefinedAttributes (OSCTXT* pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pSrcValue, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pDstValue);

EXTERN void asn1Init_EXP_TeletexDomainDefinedAttributes (
   ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue);

EXTERN void asn1Free_EXP_TeletexDomainDefinedAttributes (OSCTXT *pctxt, 
   ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  DirectoryString                                           */
/*                                                            */
/**************************************************************/
/*
*********************************************
 Directory string type 

DirectoryString ::= CHOICE {
   utf8String UTF8String (SIZE (1..MAX)),
   printableString PrintableString (SIZE (1..MAX)),
   teletexString T61String (SIZE (1..MAX)),
   universalString UniversalString (SIZE (1..MAX)),
   bmpString BMPString (SIZE (1..MAX))
}
*/
/* Choice context tags */

#define TVC_EXP_DirectoryString_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_DirectoryString_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_DirectoryString_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_DirectoryString_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_DirectoryString_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_DirectoryString_utf8String 1
#define T_EXP_DirectoryString_printableString 2
#define T_EXP_DirectoryString_teletexString 3
#define T_EXP_DirectoryString_universalString 4
#define T_EXP_DirectoryString_bmpString 5

class EXTERN ASN1C_EXP_DirectoryString;

struct EXTERN ASN1T_EXP_DirectoryString : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_DirectoryString () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_DirectoryString (ASN1C_EXP_DirectoryString& srcData);
   ~ASN1T_EXP_DirectoryString ();
} ;

class EXTERN ASN1C_EXP_DirectoryString :
public ASN1CType
{
protected:
   ASN1T_EXP_DirectoryString& msgData;
public:
   ASN1C_EXP_DirectoryString (ASN1T_EXP_DirectoryString& data);
   ASN1C_EXP_DirectoryString (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_DirectoryString& data);
   ASN1C_EXP_DirectoryString (OSRTContext &context
      , ASN1T_EXP_DirectoryString& data);
   ASN1C_EXP_DirectoryString (ASN1C_EXP_DirectoryString& original);
   virtual ~ASN1C_EXP_DirectoryString () {}
   inline ASN1T_EXP_DirectoryString& getData () { return msgData; }
   inline const ASN1T_EXP_DirectoryString& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "DirectoryString");
   int toStream (const char* name = "DirectoryString");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_DirectoryString* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_DirectoryString& getCopy (ASN1T_EXP_DirectoryString* pDstData = 0);
   ASN1T_EXP_DirectoryString* newCopy ();

   inline ASN1C_EXP_DirectoryString& operator= (ASN1C_EXP_DirectoryString& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_DirectoryString (OSCTXT* pctxt,
   ASN1T_EXP_DirectoryString *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_DirectoryString (OSCTXT* pctxt, 
   ASN1T_EXP_DirectoryString* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_DirectoryString 
   (const char* name, const ASN1T_EXP_DirectoryString* pvalue);

EXTERN int asn1PrtToStrm_EXP_DirectoryString (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_DirectoryString* pvalue);

EXTERN ASN1T_EXP_DirectoryString* 
   new_ASN1T_EXP_DirectoryString (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_DirectoryString (const char* name, 
   ASN1T_EXP_DirectoryString* pValue, ASN1T_EXP_DirectoryString* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_DirectoryString (OSCTXT* pctxt, 
   ASN1T_EXP_DirectoryString* pSrcValue, ASN1T_EXP_DirectoryString* pDstValue);

EXTERN void asn1Init_EXP_DirectoryString (ASN1T_EXP_DirectoryString* pvalue);

EXTERN void asn1Free_EXP_DirectoryString (OSCTXT *pctxt, 
   ASN1T_EXP_DirectoryString* pvalue);

/**************************************************************/
/*                                                            */
/*  X520name                                                  */
/*                                                            */
/**************************************************************/
/*
X520name ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-name)),
   printableString PrintableString (SIZE (1..ub-name)),
   teletexString T61String (SIZE (1..ub-name)),
   universalString UniversalString (SIZE (1..ub-name)),
   bmpString BMPString (SIZE (1..ub-name))
}
*/
/* Choice context tags */

#define TVC_EXP_X520name_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520name_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520name_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520name_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520name_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520name_utf8String       1
#define T_EXP_X520name_printableString  2
#define T_EXP_X520name_teletexString    3
#define T_EXP_X520name_universalString  4
#define T_EXP_X520name_bmpString        5

class EXTERN ASN1C_EXP_X520name;

struct EXTERN ASN1T_EXP_X520name : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520name () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520name (ASN1C_EXP_X520name& srcData);
   ~ASN1T_EXP_X520name ();
} ;

class EXTERN ASN1C_EXP_X520name :
public ASN1CType
{
protected:
   ASN1T_EXP_X520name& msgData;
public:
   ASN1C_EXP_X520name (ASN1T_EXP_X520name& data);
   ASN1C_EXP_X520name (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_X520name& data);
   ASN1C_EXP_X520name (OSRTContext &context, ASN1T_EXP_X520name& data);
   ASN1C_EXP_X520name (ASN1C_EXP_X520name& original);
   virtual ~ASN1C_EXP_X520name () {}
   inline ASN1T_EXP_X520name& getData () { return msgData; }
   inline const ASN1T_EXP_X520name& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520name");
   int toStream (const char* name = "X520name");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520name* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520name& getCopy (ASN1T_EXP_X520name* pDstData = 0);
   ASN1T_EXP_X520name* newCopy ();

   inline ASN1C_EXP_X520name& operator= (ASN1C_EXP_X520name& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520name (OSCTXT* pctxt,
   ASN1T_EXP_X520name *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520name (OSCTXT* pctxt, ASN1T_EXP_X520name* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520name 
   (const char* name, const ASN1T_EXP_X520name* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520name (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520name* pvalue);

EXTERN ASN1T_EXP_X520name* new_ASN1T_EXP_X520name (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_X520name (const char* name, ASN1T_EXP_X520name* pValue, 
   ASN1T_EXP_X520name* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520name (OSCTXT* pctxt, ASN1T_EXP_X520name* pSrcValue, 
   ASN1T_EXP_X520name* pDstValue);

EXTERN void asn1Init_EXP_X520name (ASN1T_EXP_X520name* pvalue);

EXTERN void asn1Free_EXP_X520name (OSCTXT *pctxt, ASN1T_EXP_X520name* pvalue);

/**************************************************************/
/*                                                            */
/*  X520CommonName                                            */
/*                                                            */
/**************************************************************/
/*
X520CommonName ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-common-name)),
   printableString PrintableString (SIZE (1..ub-common-name)),
   teletexString T61String (SIZE (1..ub-common-name)),
   universalString UniversalString (SIZE (1..ub-common-name)),
   bmpString BMPString (SIZE (1..ub-common-name))
}
*/
/* Choice context tags */

#define TVC_EXP_X520CommonName_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520CommonName_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520CommonName_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520CommonName_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520CommonName_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520CommonName_utf8String 1
#define T_EXP_X520CommonName_printableString 2
#define T_EXP_X520CommonName_teletexString 3
#define T_EXP_X520CommonName_universalString 4
#define T_EXP_X520CommonName_bmpString  5

class EXTERN ASN1C_EXP_X520CommonName;

struct EXTERN ASN1T_EXP_X520CommonName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520CommonName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520CommonName (ASN1C_EXP_X520CommonName& srcData);
   ~ASN1T_EXP_X520CommonName ();
} ;

class EXTERN ASN1C_EXP_X520CommonName :
public ASN1CType
{
protected:
   ASN1T_EXP_X520CommonName& msgData;
public:
   ASN1C_EXP_X520CommonName (ASN1T_EXP_X520CommonName& data);
   ASN1C_EXP_X520CommonName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520CommonName& data);
   ASN1C_EXP_X520CommonName (OSRTContext &context
      , ASN1T_EXP_X520CommonName& data);
   ASN1C_EXP_X520CommonName (ASN1C_EXP_X520CommonName& original);
   virtual ~ASN1C_EXP_X520CommonName () {}
   inline ASN1T_EXP_X520CommonName& getData () { return msgData; }
   inline const ASN1T_EXP_X520CommonName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520CommonName");
   int toStream (const char* name = "X520CommonName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520CommonName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520CommonName& getCopy (ASN1T_EXP_X520CommonName* pDstData = 0);
   ASN1T_EXP_X520CommonName* newCopy ();

   inline ASN1C_EXP_X520CommonName& operator= (ASN1C_EXP_X520CommonName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520CommonName (OSCTXT* pctxt,
   ASN1T_EXP_X520CommonName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520CommonName (OSCTXT* pctxt, 
   ASN1T_EXP_X520CommonName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520CommonName 
   (const char* name, const ASN1T_EXP_X520CommonName* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520CommonName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520CommonName* pvalue);

EXTERN ASN1T_EXP_X520CommonName* 
   new_ASN1T_EXP_X520CommonName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_X520CommonName (const char* name, 
   ASN1T_EXP_X520CommonName* pValue, ASN1T_EXP_X520CommonName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520CommonName (OSCTXT* pctxt, 
   ASN1T_EXP_X520CommonName* pSrcValue, ASN1T_EXP_X520CommonName* pDstValue);

EXTERN void asn1Init_EXP_X520CommonName (ASN1T_EXP_X520CommonName* pvalue);

EXTERN void asn1Free_EXP_X520CommonName (OSCTXT *pctxt, 
   ASN1T_EXP_X520CommonName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520LocalityName                                          */
/*                                                            */
/**************************************************************/
/*
X520LocalityName ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-locality-name)),
   printableString PrintableString (SIZE (1..ub-locality-name)),
   teletexString T61String (SIZE (1..ub-locality-name)),
   universalString UniversalString (SIZE (1..ub-locality-name)),
   bmpString BMPString (SIZE (1..ub-locality-name))
}
*/
/* Choice context tags */

#define TVC_EXP_X520LocalityName_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520LocalityName_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520LocalityName_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520LocalityName_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520LocalityName_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520LocalityName_utf8String 1
#define T_EXP_X520LocalityName_printableString 2
#define T_EXP_X520LocalityName_teletexString 3
#define T_EXP_X520LocalityName_universalString 4
#define T_EXP_X520LocalityName_bmpString 5

class EXTERN ASN1C_EXP_X520LocalityName;

struct EXTERN ASN1T_EXP_X520LocalityName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520LocalityName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520LocalityName (ASN1C_EXP_X520LocalityName& srcData);
   ~ASN1T_EXP_X520LocalityName ();
} ;

class EXTERN ASN1C_EXP_X520LocalityName :
public ASN1CType
{
protected:
   ASN1T_EXP_X520LocalityName& msgData;
public:
   ASN1C_EXP_X520LocalityName (ASN1T_EXP_X520LocalityName& data);
   ASN1C_EXP_X520LocalityName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520LocalityName& data);
   ASN1C_EXP_X520LocalityName (OSRTContext &context
      , ASN1T_EXP_X520LocalityName& data);
   ASN1C_EXP_X520LocalityName (ASN1C_EXP_X520LocalityName& original);
   virtual ~ASN1C_EXP_X520LocalityName () {}
   inline ASN1T_EXP_X520LocalityName& getData () { return msgData; }
   inline const ASN1T_EXP_X520LocalityName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520LocalityName");
   int toStream (const char* name = "X520LocalityName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520LocalityName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520LocalityName& getCopy (ASN1T_EXP_X520LocalityName* pDstData = 0);
   ASN1T_EXP_X520LocalityName* newCopy ();

   inline ASN1C_EXP_X520LocalityName& operator= (ASN1C_EXP_X520LocalityName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520LocalityName (OSCTXT* pctxt,
   ASN1T_EXP_X520LocalityName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520LocalityName (OSCTXT* pctxt, 
   ASN1T_EXP_X520LocalityName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520LocalityName 
   (const char* name, const ASN1T_EXP_X520LocalityName* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520LocalityName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520LocalityName* pvalue);

EXTERN ASN1T_EXP_X520LocalityName* 
   new_ASN1T_EXP_X520LocalityName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_X520LocalityName (const char* name, 
   ASN1T_EXP_X520LocalityName* pValue, ASN1T_EXP_X520LocalityName* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520LocalityName (OSCTXT* pctxt, 
   ASN1T_EXP_X520LocalityName* pSrcValue, ASN1T_EXP_X520LocalityName*
    pDstValue);

EXTERN void asn1Init_EXP_X520LocalityName (ASN1T_EXP_X520LocalityName* pvalue);

EXTERN void asn1Free_EXP_X520LocalityName (OSCTXT *pctxt, 
   ASN1T_EXP_X520LocalityName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520StateOrProvinceName                                   */
/*                                                            */
/**************************************************************/
/*
X520StateOrProvinceName ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-state-name)),
   printableString PrintableString (SIZE (1..ub-state-name)),
   teletexString T61String (SIZE (1..ub-state-name)),
   universalString UniversalString (SIZE (1..ub-state-name)),
   bmpString BMPString (SIZE (1..ub-state-name))
}
*/
/* Choice context tags */

#define TVC_EXP_X520StateOrProvinceName_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520StateOrProvinceName_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520StateOrProvinceName_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520StateOrProvinceName_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520StateOrProvinceName_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520StateOrProvinceName_utf8String 1
#define T_EXP_X520StateOrProvinceName_printableString 2
#define T_EXP_X520StateOrProvinceName_teletexString 3
#define T_EXP_X520StateOrProvinceName_universalString 4
#define T_EXP_X520StateOrProvinceName_bmpString 5

class EXTERN ASN1C_EXP_X520StateOrProvinceName;

struct EXTERN ASN1T_EXP_X520StateOrProvinceName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520StateOrProvinceName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520StateOrProvinceName (ASN1C_EXP_X520StateOrProvinceName& srcData);
   ~ASN1T_EXP_X520StateOrProvinceName ();
} ;

class EXTERN ASN1C_EXP_X520StateOrProvinceName :
public ASN1CType
{
protected:
   ASN1T_EXP_X520StateOrProvinceName& msgData;
public:
   ASN1C_EXP_X520StateOrProvinceName (ASN1T_EXP_X520StateOrProvinceName& data);
   ASN1C_EXP_X520StateOrProvinceName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520StateOrProvinceName& data);
   ASN1C_EXP_X520StateOrProvinceName (OSRTContext &context
      , ASN1T_EXP_X520StateOrProvinceName& data);
   ASN1C_EXP_X520StateOrProvinceName (ASN1C_EXP_X520StateOrProvinceName& original);
   virtual ~ASN1C_EXP_X520StateOrProvinceName () {}
   inline ASN1T_EXP_X520StateOrProvinceName& getData () { return msgData; }
   inline const ASN1T_EXP_X520StateOrProvinceName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520StateOrProvinceName");
   int toStream (const char* name = "X520StateOrProvinceName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520StateOrProvinceName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520StateOrProvinceName& getCopy (ASN1T_EXP_X520StateOrProvinceName* pDstData = 0);
   ASN1T_EXP_X520StateOrProvinceName* newCopy ();

   inline ASN1C_EXP_X520StateOrProvinceName& operator= (ASN1C_EXP_X520StateOrProvinceName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520StateOrProvinceName (OSCTXT* pctxt,
   ASN1T_EXP_X520StateOrProvinceName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520StateOrProvinceName (OSCTXT* pctxt, 
   ASN1T_EXP_X520StateOrProvinceName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520StateOrProvinceName 
   (const char* name, const ASN1T_EXP_X520StateOrProvinceName* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520StateOrProvinceName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520StateOrProvinceName* pvalue);

EXTERN ASN1T_EXP_X520StateOrProvinceName* 
   new_ASN1T_EXP_X520StateOrProvinceName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_X520StateOrProvinceName (const char* name, 
   ASN1T_EXP_X520StateOrProvinceName* pValue, 
   ASN1T_EXP_X520StateOrProvinceName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520StateOrProvinceName (OSCTXT* pctxt, 
   ASN1T_EXP_X520StateOrProvinceName* pSrcValue, 
   ASN1T_EXP_X520StateOrProvinceName* pDstValue);

EXTERN void asn1Init_EXP_X520StateOrProvinceName (
   ASN1T_EXP_X520StateOrProvinceName* pvalue);

EXTERN void asn1Free_EXP_X520StateOrProvinceName (OSCTXT *pctxt, 
   ASN1T_EXP_X520StateOrProvinceName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520OrganizationName                                      */
/*                                                            */
/**************************************************************/
/*
X520OrganizationName ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-organization-name)),
   printableString PrintableString (SIZE (1..ub-organization-name)),
   teletexString T61String (SIZE (1..ub-organization-name)),
   universalString UniversalString (SIZE (1..ub-organization-name)),
   bmpString BMPString (SIZE (1..ub-organization-name))
}
*/
/* Choice context tags */

#define TVC_EXP_X520OrganizationName_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520OrganizationName_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520OrganizationName_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520OrganizationName_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520OrganizationName_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520OrganizationName_utf8String 1
#define T_EXP_X520OrganizationName_printableString 2
#define T_EXP_X520OrganizationName_teletexString 3
#define T_EXP_X520OrganizationName_universalString 4
#define T_EXP_X520OrganizationName_bmpString 5

class EXTERN ASN1C_EXP_X520OrganizationName;

struct EXTERN ASN1T_EXP_X520OrganizationName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520OrganizationName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520OrganizationName (ASN1C_EXP_X520OrganizationName& srcData);
   ~ASN1T_EXP_X520OrganizationName ();
} ;

class EXTERN ASN1C_EXP_X520OrganizationName :
public ASN1CType
{
protected:
   ASN1T_EXP_X520OrganizationName& msgData;
public:
   ASN1C_EXP_X520OrganizationName (ASN1T_EXP_X520OrganizationName& data);
   ASN1C_EXP_X520OrganizationName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520OrganizationName& data);
   ASN1C_EXP_X520OrganizationName (OSRTContext &context
      , ASN1T_EXP_X520OrganizationName& data);
   ASN1C_EXP_X520OrganizationName (ASN1C_EXP_X520OrganizationName& original);
   virtual ~ASN1C_EXP_X520OrganizationName () {}
   inline ASN1T_EXP_X520OrganizationName& getData () { return msgData; }
   inline const ASN1T_EXP_X520OrganizationName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520OrganizationName");
   int toStream (const char* name = "X520OrganizationName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520OrganizationName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520OrganizationName& getCopy (ASN1T_EXP_X520OrganizationName* pDstData = 0);
   ASN1T_EXP_X520OrganizationName* newCopy ();

   inline ASN1C_EXP_X520OrganizationName& operator= (ASN1C_EXP_X520OrganizationName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520OrganizationName (OSCTXT* pctxt,
   ASN1T_EXP_X520OrganizationName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520OrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_X520OrganizationName* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520OrganizationName 
   (const char* name, const ASN1T_EXP_X520OrganizationName* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520OrganizationName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520OrganizationName* pvalue);

EXTERN ASN1T_EXP_X520OrganizationName* 
   new_ASN1T_EXP_X520OrganizationName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_X520OrganizationName (const char* name, 
   ASN1T_EXP_X520OrganizationName* pValue, 
   ASN1T_EXP_X520OrganizationName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520OrganizationName (OSCTXT* pctxt, 
   ASN1T_EXP_X520OrganizationName* pSrcValue, ASN1T_EXP_X520OrganizationName*
    pDstValue);

EXTERN void asn1Init_EXP_X520OrganizationName (ASN1T_EXP_X520OrganizationName* pvalue);

EXTERN void asn1Free_EXP_X520OrganizationName (OSCTXT *pctxt, 
   ASN1T_EXP_X520OrganizationName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520OrganizationalUnitName                                */
/*                                                            */
/**************************************************************/
/*
X520OrganizationalUnitName ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-organizational-unit-name)),
   printableString PrintableString (SIZE (1..ub-organizational-unit-name)),
   teletexString T61String (SIZE (1..ub-organizational-unit-name)),
   universalString UniversalString (SIZE (1..ub-organizational-unit-name)),
   bmpString BMPString (SIZE (1..ub-organizational-unit-name))
}
*/
/* Choice context tags */

#define TVC_EXP_X520OrganizationalUnitName_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520OrganizationalUnitName_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520OrganizationalUnitName_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520OrganizationalUnitName_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520OrganizationalUnitName_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520OrganizationalUnitName_utf8String 1
#define T_EXP_X520OrganizationalUnitName_printableString 2
#define T_EXP_X520OrganizationalUnitName_teletexString 3
#define T_EXP_X520OrganizationalUnitName_universalString 4
#define T_EXP_X520OrganizationalUnitName_bmpString 5

class EXTERN ASN1C_EXP_X520OrganizationalUnitName;

struct EXTERN ASN1T_EXP_X520OrganizationalUnitName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520OrganizationalUnitName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520OrganizationalUnitName (ASN1C_EXP_X520OrganizationalUnitName& srcData);
   ~ASN1T_EXP_X520OrganizationalUnitName ();
} ;

class EXTERN ASN1C_EXP_X520OrganizationalUnitName :
public ASN1CType
{
protected:
   ASN1T_EXP_X520OrganizationalUnitName& msgData;
public:
   ASN1C_EXP_X520OrganizationalUnitName
       (ASN1T_EXP_X520OrganizationalUnitName& data);
   ASN1C_EXP_X520OrganizationalUnitName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520OrganizationalUnitName& data);
   ASN1C_EXP_X520OrganizationalUnitName (OSRTContext &context
      , ASN1T_EXP_X520OrganizationalUnitName& data);
   ASN1C_EXP_X520OrganizationalUnitName (ASN1C_EXP_X520OrganizationalUnitName& original);
   virtual ~ASN1C_EXP_X520OrganizationalUnitName () {}
   inline ASN1T_EXP_X520OrganizationalUnitName& getData () { return msgData; }
   inline const ASN1T_EXP_X520OrganizationalUnitName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520OrganizationalUnitName");
   int toStream (const char* name = "X520OrganizationalUnitName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520OrganizationalUnitName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520OrganizationalUnitName& getCopy (ASN1T_EXP_X520OrganizationalUnitName* pDstData = 0);
   ASN1T_EXP_X520OrganizationalUnitName* newCopy ();

   inline ASN1C_EXP_X520OrganizationalUnitName& operator= (ASN1C_EXP_X520OrganizationalUnitName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520OrganizationalUnitName (OSCTXT* pctxt,
   ASN1T_EXP_X520OrganizationalUnitName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520OrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_X520OrganizationalUnitName* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_X520OrganizationalUnitName 
   (const char* name, const ASN1T_EXP_X520OrganizationalUnitName* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520OrganizationalUnitName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520OrganizationalUnitName* pvalue);

EXTERN ASN1T_EXP_X520OrganizationalUnitName* 
   new_ASN1T_EXP_X520OrganizationalUnitName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_X520OrganizationalUnitName (const char* name, 
   ASN1T_EXP_X520OrganizationalUnitName* pValue, 
   ASN1T_EXP_X520OrganizationalUnitName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520OrganizationalUnitName (OSCTXT* pctxt, 
   ASN1T_EXP_X520OrganizationalUnitName* pSrcValue, 
   ASN1T_EXP_X520OrganizationalUnitName* pDstValue);

EXTERN void asn1Init_EXP_X520OrganizationalUnitName (
   ASN1T_EXP_X520OrganizationalUnitName* pvalue);

EXTERN void asn1Free_EXP_X520OrganizationalUnitName (OSCTXT *pctxt, 
   ASN1T_EXP_X520OrganizationalUnitName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520Title                                                 */
/*                                                            */
/**************************************************************/
/*
X520Title ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-title)),
   printableString PrintableString (SIZE (1..ub-title)),
   teletexString T61String (SIZE (1..ub-title)),
   universalString UniversalString (SIZE (1..ub-title)),
   bmpString BMPString (SIZE (1..ub-title))
}
*/
/* Choice context tags */

#define TVC_EXP_X520Title_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520Title_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520Title_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520Title_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520Title_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520Title_utf8String      1
#define T_EXP_X520Title_printableString 2
#define T_EXP_X520Title_teletexString   3
#define T_EXP_X520Title_universalString 4
#define T_EXP_X520Title_bmpString       5

class EXTERN ASN1C_EXP_X520Title;

struct EXTERN ASN1T_EXP_X520Title : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520Title () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520Title (ASN1C_EXP_X520Title& srcData);
   ~ASN1T_EXP_X520Title ();
} ;

class EXTERN ASN1C_EXP_X520Title :
public ASN1CType
{
protected:
   ASN1T_EXP_X520Title& msgData;
public:
   ASN1C_EXP_X520Title (ASN1T_EXP_X520Title& data);
   ASN1C_EXP_X520Title (OSRTMessageBufferIF& msgBuf, ASN1T_EXP_X520Title& data);
   ASN1C_EXP_X520Title (OSRTContext &context, ASN1T_EXP_X520Title& data);
   ASN1C_EXP_X520Title (ASN1C_EXP_X520Title& original);
   virtual ~ASN1C_EXP_X520Title () {}
   inline ASN1T_EXP_X520Title& getData () { return msgData; }
   inline const ASN1T_EXP_X520Title& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520Title");
   int toStream (const char* name = "X520Title");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520Title* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520Title& getCopy (ASN1T_EXP_X520Title* pDstData = 0);
   ASN1T_EXP_X520Title* newCopy ();

   inline ASN1C_EXP_X520Title& operator= (ASN1C_EXP_X520Title& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520Title (OSCTXT* pctxt,
   ASN1T_EXP_X520Title *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520Title (OSCTXT* pctxt, ASN1T_EXP_X520Title* pvalue, 
   ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520Title 
   (const char* name, const ASN1T_EXP_X520Title* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520Title (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520Title* pvalue);

EXTERN ASN1T_EXP_X520Title* new_ASN1T_EXP_X520Title (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_X520Title (const char* name, 
   ASN1T_EXP_X520Title* pValue, ASN1T_EXP_X520Title* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520Title (OSCTXT* pctxt, ASN1T_EXP_X520Title* pSrcValue, 
   ASN1T_EXP_X520Title* pDstValue);

EXTERN void asn1Init_EXP_X520Title (ASN1T_EXP_X520Title* pvalue);

EXTERN void asn1Free_EXP_X520Title (OSCTXT *pctxt, ASN1T_EXP_X520Title* pvalue);

/**************************************************************/
/*                                                            */
/*  X520CountrySerialUTF8liUcubeName                          */
/*                                                            */
/**************************************************************/
/*
X520CountrySerialUTF8liUcubeName ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-ucube-name)),
   printableString PrintableString (SIZE (1..ub-ucube-name)),
   teletexString T61String (SIZE (1..ub-ucube-name)),
   universalString UniversalString (SIZE (1..ub-ucube-name)),
   bmpString BMPString (SIZE (1..ub-ucube-name))
}
*/
/* Choice context tags */

#define TVC_EXP_X520CountrySerialUTF8liUcubeName_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520CountrySerialUTF8liUcubeName_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520CountrySerialUTF8liUcubeName_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520CountrySerialUTF8liUcubeName_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520CountrySerialUTF8liUcubeName_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520CountrySerialUTF8liUcubeName_utf8String 1
#define T_EXP_X520CountrySerialUTF8liUcubeName_printableString 2
#define T_EXP_X520CountrySerialUTF8liUcubeName_teletexString 3
#define T_EXP_X520CountrySerialUTF8liUcubeName_universalString 4
#define T_EXP_X520CountrySerialUTF8liUcubeName_bmpString 5

class EXTERN ASN1C_EXP_X520CountrySerialUTF8liUcubeName;

struct EXTERN ASN1T_EXP_X520CountrySerialUTF8liUcubeName : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName (ASN1C_EXP_X520CountrySerialUTF8liUcubeName& srcData);
   ~ASN1T_EXP_X520CountrySerialUTF8liUcubeName ();
} ;

class EXTERN ASN1C_EXP_X520CountrySerialUTF8liUcubeName :
public ASN1CType
{
protected:
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName& msgData;
public:
   ASN1C_EXP_X520CountrySerialUTF8liUcubeName
       (ASN1T_EXP_X520CountrySerialUTF8liUcubeName& data);
   ASN1C_EXP_X520CountrySerialUTF8liUcubeName (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520CountrySerialUTF8liUcubeName& data);
   ASN1C_EXP_X520CountrySerialUTF8liUcubeName (OSRTContext &context
      , ASN1T_EXP_X520CountrySerialUTF8liUcubeName& data);
   ASN1C_EXP_X520CountrySerialUTF8liUcubeName (ASN1C_EXP_X520CountrySerialUTF8liUcubeName& original);
   virtual ~ASN1C_EXP_X520CountrySerialUTF8liUcubeName () {}
   inline ASN1T_EXP_X520CountrySerialUTF8liUcubeName& getData () { return msgData; }
   inline const ASN1T_EXP_X520CountrySerialUTF8liUcubeName& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520CountrySerialUTF8liUcubeName");
   int toStream (const char* name = "X520CountrySerialUTF8liUcubeName");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName& getCopy (ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pDstData = 0);
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* newCopy ();

   inline ASN1C_EXP_X520CountrySerialUTF8liUcubeName& operator= (ASN1C_EXP_X520CountrySerialUTF8liUcubeName& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT* pctxt,
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT* pctxt, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_EXP_X520CountrySerialUTF8liUcubeName 
   (const char* name, const ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue);

EXTERN ASN1T_EXP_X520CountrySerialUTF8liUcubeName* 
   new_ASN1T_EXP_X520CountrySerialUTF8liUcubeName (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_EXP_X520CountrySerialUTF8liUcubeName (const char* name, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pValue, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT* pctxt, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pSrcValue, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pDstValue);

EXTERN void asn1Init_EXP_X520CountrySerialUTF8liUcubeName (
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue);

EXTERN void asn1Free_EXP_X520CountrySerialUTF8liUcubeName (OSCTXT *pctxt, 
   ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue);

/**************************************************************/
/*                                                            */
/*  X520Pseudonym                                             */
/*                                                            */
/**************************************************************/
/*
X520Pseudonym ::= CHOICE {
   utf8String UTF8String (SIZE (1..ub-pseudonym)),
   printableString PrintableString (SIZE (1..ub-pseudonym)),
   teletexString T61String (SIZE (1..ub-pseudonym)),
   universalString UniversalString (SIZE (1..ub-pseudonym)),
   bmpString BMPString (SIZE (1..ub-pseudonym))
}
*/
/* Choice context tags */

#define TVC_EXP_X520Pseudonym_utf8String	(TM_UNIV|TM_PRIM|12)
#define TVC_EXP_X520Pseudonym_printableString	(TM_UNIV|TM_PRIM|19)
#define TVC_EXP_X520Pseudonym_teletexString	(TM_UNIV|TM_PRIM|20)
#define TVC_EXP_X520Pseudonym_universalString	(TM_UNIV|TM_PRIM|28)
#define TVC_EXP_X520Pseudonym_bmpString	(TM_UNIV|TM_PRIM|30)

/* Choice tag constants */

#define T_EXP_X520Pseudonym_utf8String  1
#define T_EXP_X520Pseudonym_printableString 2
#define T_EXP_X520Pseudonym_teletexString 3
#define T_EXP_X520Pseudonym_universalString 4
#define T_EXP_X520Pseudonym_bmpString   5

class EXTERN ASN1C_EXP_X520Pseudonym;

struct EXTERN ASN1T_EXP_X520Pseudonym : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      const OSUTF8CHAR* utf8String;
      /* t = 2 */
      const char* printableString;
      /* t = 3 */
      const char* teletexString;
      /* t = 4 */
      ASN1TUniversalString *universalString;
      /* t = 5 */
      ASN1TBMPString *bmpString;
   } u;
   ASN1T_EXP_X520Pseudonym () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_EXP_X520Pseudonym (ASN1C_EXP_X520Pseudonym& srcData);
   ~ASN1T_EXP_X520Pseudonym ();
} ;

class EXTERN ASN1C_EXP_X520Pseudonym :
public ASN1CType
{
protected:
   ASN1T_EXP_X520Pseudonym& msgData;
public:
   ASN1C_EXP_X520Pseudonym (ASN1T_EXP_X520Pseudonym& data);
   ASN1C_EXP_X520Pseudonym (OSRTMessageBufferIF& msgBuf
      , ASN1T_EXP_X520Pseudonym& data);
   ASN1C_EXP_X520Pseudonym (OSRTContext &context, ASN1T_EXP_X520Pseudonym& data
      );
   ASN1C_EXP_X520Pseudonym (ASN1C_EXP_X520Pseudonym& original);
   virtual ~ASN1C_EXP_X520Pseudonym () {}
   inline ASN1T_EXP_X520Pseudonym& getData () { return msgData; }
   inline const ASN1T_EXP_X520Pseudonym& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "X520Pseudonym");
   int toStream (const char* name = "X520Pseudonym");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_EXP_X520Pseudonym* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_EXP_X520Pseudonym& getCopy (ASN1T_EXP_X520Pseudonym* pDstData = 0);
   ASN1T_EXP_X520Pseudonym* newCopy ();

   inline ASN1C_EXP_X520Pseudonym& operator= (ASN1C_EXP_X520Pseudonym& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_EXP_X520Pseudonym (OSCTXT* pctxt,
   ASN1T_EXP_X520Pseudonym *pvalue, ASN1TagType tagging);

EXTERN int asn1D_EXP_X520Pseudonym (OSCTXT* pctxt, 
   ASN1T_EXP_X520Pseudonym* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_EXP_X520Pseudonym 
   (const char* name, const ASN1T_EXP_X520Pseudonym* pvalue);

EXTERN int asn1PrtToStrm_EXP_X520Pseudonym (OSCTXT *pctxt, 
   const char* name, const ASN1T_EXP_X520Pseudonym* pvalue);

EXTERN ASN1T_EXP_X520Pseudonym* new_ASN1T_EXP_X520Pseudonym (ASN1CType& ccobj)
   ;

EXTERN OSBOOL asn1Compare_EXP_X520Pseudonym (const char* name, 
   ASN1T_EXP_X520Pseudonym* pValue, ASN1T_EXP_X520Pseudonym* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_EXP_X520Pseudonym (OSCTXT* pctxt, 
   ASN1T_EXP_X520Pseudonym* pSrcValue, ASN1T_EXP_X520Pseudonym* pDstValue);

EXTERN void asn1Init_EXP_X520Pseudonym (ASN1T_EXP_X520Pseudonym* pvalue);

EXTERN void asn1Free_EXP_X520Pseudonym (OSCTXT *pctxt, 
   ASN1T_EXP_X520Pseudonym* pvalue);

/* Value definitions */

#define ASN1V_EXP_common_name 1
#define ASN1V_EXP_teletex_common_name 2
#define ASN1V_EXP_teletex_organization_name 3
#define ASN1V_EXP_teletex_personal_name 4
#define ASN1V_EXP_teletex_organizational_unit_names 5
#define ASN1V_EXP_pds_name 7
#define ASN1V_EXP_physical_delivery_country_name 8
#define ASN1V_EXP_postal_code 9
#define ASN1V_EXP_physical_delivery_office_name 10
#define ASN1V_EXP_physical_delivery_office_number 11
#define ASN1V_EXP_extension_OR_address_components 12
#define ASN1V_EXP_physical_delivery_personal_name 13
#define ASN1V_EXP_physical_delivery_organization_name 14
#define ASN1V_EXP_extension_physical_delivery_address_components 15
#define ASN1V_EXP_unformatted_postal_address 16
#define ASN1V_EXP_street_address 17
#define ASN1V_EXP_post_office_box_address 18
#define ASN1V_EXP_poste_restante_address 19
#define ASN1V_EXP_unique_postal_name 20
#define ASN1V_EXP_local_postal_attributes 21
#define ASN1V_EXP_extended_network_address 22
#define ASN1V_EXP_terminal_type 23
#define ASN1V_EXP_teletex_domain_defined_attributes 6
#define ASN1V_EXP_ub_name 32768
#define ASN1V_EXP_ub_common_name 128
#define ASN1V_EXP_ub_locality_name 128
#define ASN1V_EXP_ub_state_name 128
#define ASN1V_EXP_ub_organization_name 128
#define ASN1V_EXP_ub_organizational_unit_name 128
#define ASN1V_EXP_ub_title 128
#define ASN1V_EXP_ub_serial_number 64
#define ASN1V_EXP_ub_match 128
#define ASN1V_EXP_ub_emailaddress_length 128
#define ASN1V_EXP_ub_common_name_length 128
#define ASN1V_EXP_ub_country_name_alpha_length 2
#define ASN1V_EXP_ub_country_name_numeric_length 3
#define ASN1V_EXP_ub_domain_defined_attributes 4
#define ASN1V_EXP_ub_domain_defined_attribute_type_length 8
#define ASN1V_EXP_ub_domain_defined_attribute_value_length 128
#define ASN1V_EXP_ub_domain_name_length 16
#define ASN1V_EXP_ub_extension_attributes 256
#define ASN1V_EXP_ub_e163_4_number_length 15
#define ASN1V_EXP_ub_e163_4_sub_address_length 40
#define ASN1V_EXP_ub_generation_qualifier_length 3
#define ASN1V_EXP_ub_given_name_length 16
#define ASN1V_EXP_ub_initials_length 5
#define ASN1V_EXP_ub_integer_options 256
#define ASN1V_EXP_ub_numeric_user_id_length 32
#define ASN1V_EXP_ub_organization_name_length 128
#define ASN1V_EXP_ub_organizational_unit_name_length 128
#define ASN1V_EXP_ub_organizational_units 4
#define ASN1V_EXP_ub_pds_name_length 16
#define ASN1V_EXP_ub_pds_parameter_length 30
#define ASN1V_EXP_ub_pds_physical_address_lines 6
#define ASN1V_EXP_ub_postal_code_length 16
#define ASN1V_EXP_ub_pseudonym 128
#define ASN1V_EXP_ub_surname_length 40
#define ASN1V_EXP_ub_terminal_id_length 24
#define ASN1V_EXP_ub_unformatted_address_length 180
#define ASN1V_EXP_ub_x121_address_length 16
extern EXTERN ASN1OBJID EXP_id_pkix;
extern EXTERN ASN1OBJID EXP_id_pe;
extern EXTERN ASN1OBJID EXP_id_qt;
extern EXTERN ASN1OBJID EXP_id_kp;
extern EXTERN ASN1OBJID EXP_id_ad;
extern EXTERN ASN1OBJID EXP_id_ad_ocsp;
extern EXTERN ASN1OBJID EXP_id_ad_caIssuers;
extern EXTERN ASN1OBJID EXP_id_ad_timeStamping;
extern EXTERN ASN1OBJID EXP_id_ad_caRepository;
extern EXTERN ASN1OBJID EXP_id_qt_cps;
extern EXTERN ASN1OBJID EXP_id_qt_unotice;
extern EXTERN ASN1OBJID EXP_id_at_name;
extern EXTERN ASN1OBJID EXP_id_at_surname;
extern EXTERN ASN1OBJID EXP_id_at_givenName;
extern EXTERN ASN1OBJID EXP_id_at_commonName;
extern EXTERN ASN1OBJID EXP_id_at_localityName;
extern EXTERN ASN1OBJID EXP_id_at_stateOrProvinceName;
extern EXTERN ASN1OBJID EXP_id_at_organizationName;
extern EXTERN ASN1OBJID EXP_id_at_organizationalUnitName;
extern EXTERN ASN1OBJID EXP_id_at_title;
extern EXTERN ASN1OBJID EXP_id_at_countryName;
extern EXTERN ASN1OBJID EXP_id_at_serialNumber;
#define ASN1V_EXP_ub_ucube_name 128
extern EXTERN ASN1OBJID EXP_id_at_pseudonym;
extern EXTERN ASN1OBJID EXP_id_domainComponent;
extern EXTERN ASN1OBJID EXP_pkcs_9;
extern EXTERN ASN1OBJID EXP_id_emailAddress;

#endif
