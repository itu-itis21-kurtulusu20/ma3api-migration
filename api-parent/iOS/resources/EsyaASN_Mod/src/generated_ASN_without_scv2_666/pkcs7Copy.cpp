/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "pkcs7.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_PKCS7_ContentType (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentType* pSrcValue, ASN1T_PKCS7_ContentType* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_PKCS7_ContentType::ASN1C_PKCS7_ContentType (ASN1C_PKCS7_ContentType& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_ContentType& ASN1C_PKCS7_ContentType::getCopy (ASN1T_PKCS7_ContentType* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_ContentType);
      new (pDstData) ASN1T_PKCS7_ContentType;
   }

   asn1Copy_PKCS7_ContentType (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS7_ContentType* ASN1C_PKCS7_ContentType::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_ContentType* pDstData = new ASN1T_PKCS7_ContentType;

   asn1Copy_PKCS7_ContentType (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS7_Data (OSCTXT* pctxt, ASN1T_PKCS7_Data* pSrcValue, 
   ASN1T_PKCS7_Data* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_Data::ASN1C_PKCS7_Data (ASN1C_PKCS7_Data& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_Data& ASN1C_PKCS7_Data::getCopy (ASN1T_PKCS7_Data* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_Data);
      new (pDstData) ASN1T_PKCS7_Data;
   }

   asn1Copy_PKCS7_Data (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS7_Data* ASN1C_PKCS7_Data::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_Data* pDstData = new ASN1T_PKCS7_Data;

   asn1Copy_PKCS7_Data (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS7_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier (ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier& ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::getCopy (ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier);
      new (pDstData) ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier;
   }

   asn1Copy_PKCS7_ContentEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* ASN1C_PKCS7_ContentEncryptionAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier* pDstData = new ASN1T_PKCS7_ContentEncryptionAlgorithmIdentifier;

   asn1Copy_PKCS7_ContentEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_DigestAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pSrcValue, 
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_DigestAlgorithmIdentifier::ASN1C_PKCS7_DigestAlgorithmIdentifier (ASN1C_PKCS7_DigestAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_PKCS7_DigestAlgorithmIdentifier& ASN1C_PKCS7_DigestAlgorithmIdentifier::getCopy (ASN1T_PKCS7_DigestAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_DigestAlgorithmIdentifier);
      new (pDstData) ASN1T_PKCS7_DigestAlgorithmIdentifier;
   }

   asn1Copy_PKCS7_DigestAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_DigestAlgorithmIdentifier* ASN1C_PKCS7_DigestAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_DigestAlgorithmIdentifier* pDstData = new ASN1T_PKCS7_DigestAlgorithmIdentifier;

   asn1Copy_PKCS7_DigestAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_DigestEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier (ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier& ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::getCopy (ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier);
      new (pDstData) ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier;
   }

   asn1Copy_PKCS7_DigestEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* ASN1C_PKCS7_DigestEncryptionAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier* pDstData = new ASN1T_PKCS7_DigestEncryptionAlgorithmIdentifier;

   asn1Copy_PKCS7_DigestEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pSrcValue, 
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier (ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier& original) :
   ASN1C_EXP_AlgorithmIdentifier (original)
{
}

ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier& ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::getCopy (ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier);
      new (pDstData) ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier;
   }

   asn1Copy_PKCS7_KeyEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* ASN1C_PKCS7_KeyEncryptionAlgorithmIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier* pDstData = new ASN1T_PKCS7_KeyEncryptionAlgorithmIdentifier;

   asn1Copy_PKCS7_KeyEncryptionAlgorithmIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_EncryptedDigest (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedDigest* pSrcValue, ASN1T_PKCS7_EncryptedDigest*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_EncryptedDigest::ASN1C_PKCS7_EncryptedDigest (ASN1C_PKCS7_EncryptedDigest& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_EncryptedDigest& ASN1C_PKCS7_EncryptedDigest::getCopy (ASN1T_PKCS7_EncryptedDigest* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_EncryptedDigest);
      new (pDstData) ASN1T_PKCS7_EncryptedDigest;
   }

   asn1Copy_PKCS7_EncryptedDigest (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS7_EncryptedDigest* ASN1C_PKCS7_EncryptedDigest::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_EncryptedDigest* pDstData = new ASN1T_PKCS7_EncryptedDigest;

   asn1Copy_PKCS7_EncryptedDigest (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS7_Digest (OSCTXT* pctxt, ASN1T_PKCS7_Digest* pSrcValue, 
   ASN1T_PKCS7_Digest* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_Digest::ASN1C_PKCS7_Digest (ASN1C_PKCS7_Digest& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_Digest& ASN1C_PKCS7_Digest::getCopy (ASN1T_PKCS7_Digest* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_Digest);
      new (pDstData) ASN1T_PKCS7_Digest;
   }

   asn1Copy_PKCS7_Digest (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS7_Digest* ASN1C_PKCS7_Digest::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_Digest* pDstData = new ASN1T_PKCS7_Digest;

   asn1Copy_PKCS7_Digest (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS7_EncryptedContent (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedContent* pSrcValue, ASN1T_PKCS7_EncryptedContent*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_EncryptedContent::ASN1C_PKCS7_EncryptedContent (ASN1C_PKCS7_EncryptedContent& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_EncryptedContent& ASN1C_PKCS7_EncryptedContent::getCopy (ASN1T_PKCS7_EncryptedContent* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_EncryptedContent);
      new (pDstData) ASN1T_PKCS7_EncryptedContent;
   }

   asn1Copy_PKCS7_EncryptedContent (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS7_EncryptedContent* ASN1C_PKCS7_EncryptedContent::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_EncryptedContent* pDstData = new ASN1T_PKCS7_EncryptedContent;

   asn1Copy_PKCS7_EncryptedContent (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS7_EncryptedKey (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedKey* pSrcValue, ASN1T_PKCS7_EncryptedKey* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_EncryptedKey::ASN1C_PKCS7_EncryptedKey (ASN1C_PKCS7_EncryptedKey& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_EncryptedKey& ASN1C_PKCS7_EncryptedKey::getCopy (ASN1T_PKCS7_EncryptedKey* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_EncryptedKey);
      new (pDstData) ASN1T_PKCS7_EncryptedKey;
   }

   asn1Copy_PKCS7_EncryptedKey (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS7_EncryptedKey* ASN1C_PKCS7_EncryptedKey::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_EncryptedKey* pDstData = new ASN1T_PKCS7_EncryptedKey;

   asn1Copy_PKCS7_EncryptedKey (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS7_Hash (OSCTXT* pctxt, ASN1T_PKCS7_Hash* pSrcValue, 
   ASN1T_PKCS7_Hash* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS7_Hash::ASN1C_PKCS7_Hash (ASN1C_PKCS7_Hash& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_Hash& ASN1C_PKCS7_Hash::getCopy (ASN1T_PKCS7_Hash* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_Hash);
      new (pDstData) ASN1T_PKCS7_Hash;
   }

   asn1Copy_PKCS7_Hash (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS7_Hash* ASN1C_PKCS7_Hash::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_Hash* pDstData = new ASN1T_PKCS7_Hash;

   asn1Copy_PKCS7_Hash (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS7_ContentInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_ContentInfo* pSrcValue, ASN1T_PKCS7_ContentInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_PKCS7_ContentType (pctxt, &pSrcValue->contentType, &pDstValue->contentType);

   if (pSrcValue->m.contentPresent) {
      rtCopyOpenType (pctxt, &pSrcValue->content, &pDstValue->content);
   }

}

ASN1C_PKCS7_ContentInfo::ASN1C_PKCS7_ContentInfo (ASN1C_PKCS7_ContentInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_ContentInfo::ASN1T_PKCS7_ContentInfo (ASN1C_PKCS7_ContentInfo& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_ContentInfo& ASN1C_PKCS7_ContentInfo::getCopy (ASN1T_PKCS7_ContentInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_ContentInfo);
      new (pDstData) ASN1T_PKCS7_ContentInfo;
   }

   asn1Copy_PKCS7_ContentInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_ContentInfo* ASN1C_PKCS7_ContentInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_ContentInfo* pDstData = new ASN1T_PKCS7_ContentInfo;

   asn1Copy_PKCS7_ContentInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_CertificateRevocationLists (OSCTXT* pctxt, 
   ASN1T_PKCS7_CertificateRevocationLists* pSrcValue, 
   ASN1T_PKCS7_CertificateRevocationLists* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_CertificateList* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_CertificateList* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_CertificateList);
         pSrcData = (ASN1T_EXP_CertificateList*) pnode->data;

         asn1Copy_EXP_CertificateList (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS7_CertificateRevocationLists::ASN1C_PKCS7_CertificateRevocationLists (ASN1C_PKCS7_CertificateRevocationLists& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS7_CertificateRevocationLists*)pList)
{
}

ASN1C_PKCS7_CertificateRevocationLists& ASN1C_PKCS7_CertificateRevocationLists::operator= (ASN1C_PKCS7_CertificateRevocationLists& srcData)
{
   clear ();
   asn1Copy_PKCS7_CertificateRevocationLists (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS7_CertificateRevocationLists& ASN1C_PKCS7_CertificateRevocationLists::getCopy (ASN1T_PKCS7_CertificateRevocationLists* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_CertificateRevocationLists);
      new (pDstData) ASN1T_PKCS7_CertificateRevocationLists;
   }

   asn1Copy_PKCS7_CertificateRevocationLists (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_CertificateRevocationLists* ASN1C_PKCS7_CertificateRevocationLists::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_CertificateRevocationLists* pDstData = new ASN1T_PKCS7_CertificateRevocationLists;

   asn1Copy_PKCS7_CertificateRevocationLists (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_IssuerAndSerialNumber (OSCTXT* pctxt, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pSrcValue, 
   ASN1T_PKCS7_IssuerAndSerialNumber* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_Name (pctxt, &pSrcValue->issuer, &pDstValue->issuer);

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->serialNumber, &pDstValue->serialNumber);

}

ASN1C_PKCS7_IssuerAndSerialNumber::ASN1C_PKCS7_IssuerAndSerialNumber (ASN1C_PKCS7_IssuerAndSerialNumber& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_IssuerAndSerialNumber::ASN1T_PKCS7_IssuerAndSerialNumber (ASN1C_PKCS7_IssuerAndSerialNumber& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_IssuerAndSerialNumber& ASN1C_PKCS7_IssuerAndSerialNumber::getCopy (ASN1T_PKCS7_IssuerAndSerialNumber* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_IssuerAndSerialNumber);
      new (pDstData) ASN1T_PKCS7_IssuerAndSerialNumber;
   }

   asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_IssuerAndSerialNumber* ASN1C_PKCS7_IssuerAndSerialNumber::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_IssuerAndSerialNumber* pDstData = new ASN1T_PKCS7_IssuerAndSerialNumber;

   asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_ExtendedCertificateOrCertificate (OSCTXT* pctxt, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pSrcValue, 
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* certificate */
      case 1:
         pDstValue->u.certificate = rtxMemAllocType (pctxt, ASN1T_EXP_Certificate);
         new (pDstValue->u.certificate) ASN1T_EXP_Certificate;
         asn1Copy_EXP_Certificate (pctxt, pSrcValue->u.certificate, pDstValue->u.certificate);
         break;

   }
}

ASN1C_PKCS7_ExtendedCertificateOrCertificate::ASN1C_PKCS7_ExtendedCertificateOrCertificate (ASN1C_PKCS7_ExtendedCertificateOrCertificate& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_ExtendedCertificateOrCertificate::ASN1T_PKCS7_ExtendedCertificateOrCertificate (ASN1C_PKCS7_ExtendedCertificateOrCertificate& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_ExtendedCertificateOrCertificate& ASN1C_PKCS7_ExtendedCertificateOrCertificate::getCopy (ASN1T_PKCS7_ExtendedCertificateOrCertificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_ExtendedCertificateOrCertificate);
      new (pDstData) ASN1T_PKCS7_ExtendedCertificateOrCertificate;
   }

   asn1Copy_PKCS7_ExtendedCertificateOrCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_ExtendedCertificateOrCertificate* ASN1C_PKCS7_ExtendedCertificateOrCertificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_ExtendedCertificateOrCertificate* pDstData = new ASN1T_PKCS7_ExtendedCertificateOrCertificate;

   asn1Copy_PKCS7_ExtendedCertificateOrCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_ExtendedCertificatesAndCertificates (OSCTXT* pctxt, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pSrcValue, 
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKCS7_ExtendedCertificateOrCertificate* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKCS7_ExtendedCertificateOrCertificate* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKCS7_ExtendedCertificateOrCertificate);
         pSrcData = (ASN1T_PKCS7_ExtendedCertificateOrCertificate*) pnode->data;

         asn1Copy_PKCS7_ExtendedCertificateOrCertificate (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS7_ExtendedCertificatesAndCertificates::ASN1C_PKCS7_ExtendedCertificatesAndCertificates (ASN1C_PKCS7_ExtendedCertificatesAndCertificates& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS7_ExtendedCertificatesAndCertificates*)pList)
{
}

ASN1C_PKCS7_ExtendedCertificatesAndCertificates& ASN1C_PKCS7_ExtendedCertificatesAndCertificates::operator= (ASN1C_PKCS7_ExtendedCertificatesAndCertificates& srcData)
{
   clear ();
   asn1Copy_PKCS7_ExtendedCertificatesAndCertificates (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS7_ExtendedCertificatesAndCertificates& ASN1C_PKCS7_ExtendedCertificatesAndCertificates::getCopy (ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_ExtendedCertificatesAndCertificates);
      new (pDstData) ASN1T_PKCS7_ExtendedCertificatesAndCertificates;
   }

   asn1Copy_PKCS7_ExtendedCertificatesAndCertificates (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_ExtendedCertificatesAndCertificates* ASN1C_PKCS7_ExtendedCertificatesAndCertificates::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_ExtendedCertificatesAndCertificates* pDstData = new ASN1T_PKCS7_ExtendedCertificatesAndCertificates;

   asn1Copy_PKCS7_ExtendedCertificatesAndCertificates (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_DigestAlgorithmIdentifiers (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pSrcValue, 
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKCS7_DigestAlgorithmIdentifier* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKCS7_DigestAlgorithmIdentifier* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKCS7_DigestAlgorithmIdentifier);
         pSrcData = (ASN1T_PKCS7_DigestAlgorithmIdentifier*) pnode->data;

         asn1Copy_PKCS7_DigestAlgorithmIdentifier (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS7_DigestAlgorithmIdentifiers::ASN1C_PKCS7_DigestAlgorithmIdentifiers (ASN1C_PKCS7_DigestAlgorithmIdentifiers& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS7_DigestAlgorithmIdentifiers*)pList)
{
}

ASN1C_PKCS7_DigestAlgorithmIdentifiers& ASN1C_PKCS7_DigestAlgorithmIdentifiers::operator= (ASN1C_PKCS7_DigestAlgorithmIdentifiers& srcData)
{
   clear ();
   asn1Copy_PKCS7_DigestAlgorithmIdentifiers (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS7_DigestAlgorithmIdentifiers& ASN1C_PKCS7_DigestAlgorithmIdentifiers::getCopy (ASN1T_PKCS7_DigestAlgorithmIdentifiers* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_DigestAlgorithmIdentifiers);
      new (pDstData) ASN1T_PKCS7_DigestAlgorithmIdentifiers;
   }

   asn1Copy_PKCS7_DigestAlgorithmIdentifiers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_DigestAlgorithmIdentifiers* ASN1C_PKCS7_DigestAlgorithmIdentifiers::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_DigestAlgorithmIdentifiers* pDstData = new ASN1T_PKCS7_DigestAlgorithmIdentifiers;

   asn1Copy_PKCS7_DigestAlgorithmIdentifiers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_SignerInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignerInfo* pSrcValue, ASN1T_PKCS7_SignerInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, &pSrcValue->issuerAndSerialNumber, &pDstValue->issuerAndSerialNumber);

   asn1Copy_PKCS7_DigestAlgorithmIdentifier (pctxt, &pSrcValue->digestAlgorithm, &pDstValue->digestAlgorithm);

   if (pSrcValue->m.authenticatedAttributesPresent) {
      asn1Copy_PKCS10_Attributes (pctxt, &pSrcValue->authenticatedAttributes, &pDstValue->authenticatedAttributes);
   }

   asn1Copy_PKCS7_DigestEncryptionAlgorithmIdentifier (pctxt, &pSrcValue->digestEncryptionAlgorithm, &pDstValue->digestEncryptionAlgorithm);

   asn1Copy_PKCS7_EncryptedDigest (pctxt, &pSrcValue->encryptedDigest, &pDstValue->encryptedDigest);

   if (pSrcValue->m.unauthenticatedAttributesPresent) {
      asn1Copy_PKCS10_Attributes (pctxt, &pSrcValue->unauthenticatedAttributes, &pDstValue->unauthenticatedAttributes);
   }

}

ASN1C_PKCS7_SignerInfo::ASN1C_PKCS7_SignerInfo (ASN1C_PKCS7_SignerInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_SignerInfo::ASN1T_PKCS7_SignerInfo (ASN1C_PKCS7_SignerInfo& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_SignerInfo& ASN1C_PKCS7_SignerInfo::getCopy (ASN1T_PKCS7_SignerInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_SignerInfo);
      new (pDstData) ASN1T_PKCS7_SignerInfo;
   }

   asn1Copy_PKCS7_SignerInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_SignerInfo* ASN1C_PKCS7_SignerInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_SignerInfo* pDstData = new ASN1T_PKCS7_SignerInfo;

   asn1Copy_PKCS7_SignerInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_SignerInfos (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignerInfos* pSrcValue, ASN1T_PKCS7_SignerInfos* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKCS7_SignerInfo* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKCS7_SignerInfo* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKCS7_SignerInfo);
         pSrcData = (ASN1T_PKCS7_SignerInfo*) pnode->data;

         asn1Copy_PKCS7_SignerInfo (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS7_SignerInfos::ASN1C_PKCS7_SignerInfos (ASN1C_PKCS7_SignerInfos& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS7_SignerInfos*)pList)
{
}

ASN1C_PKCS7_SignerInfos& ASN1C_PKCS7_SignerInfos::operator= (ASN1C_PKCS7_SignerInfos& srcData)
{
   clear ();
   asn1Copy_PKCS7_SignerInfos (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS7_SignerInfos& ASN1C_PKCS7_SignerInfos::getCopy (ASN1T_PKCS7_SignerInfos* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_SignerInfos);
      new (pDstData) ASN1T_PKCS7_SignerInfos;
   }

   asn1Copy_PKCS7_SignerInfos (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_SignerInfos* ASN1C_PKCS7_SignerInfos::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_SignerInfos* pDstData = new ASN1T_PKCS7_SignerInfos;

   asn1Copy_PKCS7_SignerInfos (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_SignedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignedData* pSrcValue, ASN1T_PKCS7_SignedData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_PKCS7_DigestAlgorithmIdentifiers (pctxt, &pSrcValue->digestAlgorithms, &pDstValue->digestAlgorithms);

   asn1Copy_PKCS7_ContentInfo (pctxt, &pSrcValue->contentInfo, &pDstValue->contentInfo);

   if (pSrcValue->m.certificatesPresent) {
      asn1Copy_PKCS7_ExtendedCertificatesAndCertificates (pctxt, &pSrcValue->certificates, &pDstValue->certificates);
   }

   if (pSrcValue->m.crlsPresent) {
      asn1Copy_PKCS7_CertificateRevocationLists (pctxt, &pSrcValue->crls, &pDstValue->crls);
   }

   asn1Copy_PKCS7_SignerInfos (pctxt, &pSrcValue->signerInfos, &pDstValue->signerInfos);

}

ASN1C_PKCS7_SignedData::ASN1C_PKCS7_SignedData (ASN1C_PKCS7_SignedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_SignedData::ASN1T_PKCS7_SignedData (ASN1C_PKCS7_SignedData& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_SignedData& ASN1C_PKCS7_SignedData::getCopy (ASN1T_PKCS7_SignedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_SignedData);
      new (pDstData) ASN1T_PKCS7_SignedData;
   }

   asn1Copy_PKCS7_SignedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_SignedData* ASN1C_PKCS7_SignedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_SignedData* pDstData = new ASN1T_PKCS7_SignedData;

   asn1Copy_PKCS7_SignedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_DigestInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_DigestInfo* pSrcValue, ASN1T_PKCS7_DigestInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_PKCS7_DigestAlgorithmIdentifier (pctxt, &pSrcValue->digestAlgorithm, &pDstValue->digestAlgorithm);

   asn1Copy_PKCS7_Digest (pctxt, &pSrcValue->digest, &pDstValue->digest);

}

ASN1C_PKCS7_DigestInfo::ASN1C_PKCS7_DigestInfo (ASN1C_PKCS7_DigestInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_DigestInfo::ASN1T_PKCS7_DigestInfo (ASN1C_PKCS7_DigestInfo& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_DigestInfo& ASN1C_PKCS7_DigestInfo::getCopy (ASN1T_PKCS7_DigestInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_DigestInfo);
      new (pDstData) ASN1T_PKCS7_DigestInfo;
   }

   asn1Copy_PKCS7_DigestInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_DigestInfo* ASN1C_PKCS7_DigestInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_DigestInfo* pDstData = new ASN1T_PKCS7_DigestInfo;

   asn1Copy_PKCS7_DigestInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_RecipientInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_RecipientInfo* pSrcValue, ASN1T_PKCS7_RecipientInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->version = pSrcValue->version;

   asn1Copy_PKCS7_IssuerAndSerialNumber (pctxt, &pSrcValue->issuerAndSerialNumber, &pDstValue->issuerAndSerialNumber);

   asn1Copy_PKCS7_KeyEncryptionAlgorithmIdentifier (pctxt, &pSrcValue->keyEncryptionAlgorithm, &pDstValue->keyEncryptionAlgorithm);

   asn1Copy_PKCS7_EncryptedKey (pctxt, &pSrcValue->encryptedKey, &pDstValue->encryptedKey);

}

ASN1C_PKCS7_RecipientInfo::ASN1C_PKCS7_RecipientInfo (ASN1C_PKCS7_RecipientInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_RecipientInfo::ASN1T_PKCS7_RecipientInfo (ASN1C_PKCS7_RecipientInfo& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_RecipientInfo& ASN1C_PKCS7_RecipientInfo::getCopy (ASN1T_PKCS7_RecipientInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_RecipientInfo);
      new (pDstData) ASN1T_PKCS7_RecipientInfo;
   }

   asn1Copy_PKCS7_RecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_RecipientInfo* ASN1C_PKCS7_RecipientInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_RecipientInfo* pDstData = new ASN1T_PKCS7_RecipientInfo;

   asn1Copy_PKCS7_RecipientInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_RecipientInfos (OSCTXT* pctxt, 
   ASN1T_PKCS7_RecipientInfos* pSrcValue, ASN1T_PKCS7_RecipientInfos*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKCS7_RecipientInfo* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKCS7_RecipientInfo* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKCS7_RecipientInfo);
         pSrcData = (ASN1T_PKCS7_RecipientInfo*) pnode->data;

         asn1Copy_PKCS7_RecipientInfo (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS7_RecipientInfos::ASN1C_PKCS7_RecipientInfos (ASN1C_PKCS7_RecipientInfos& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS7_RecipientInfos*)pList)
{
}

ASN1C_PKCS7_RecipientInfos& ASN1C_PKCS7_RecipientInfos::operator= (ASN1C_PKCS7_RecipientInfos& srcData)
{
   clear ();
   asn1Copy_PKCS7_RecipientInfos (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS7_RecipientInfos& ASN1C_PKCS7_RecipientInfos::getCopy (ASN1T_PKCS7_RecipientInfos* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_RecipientInfos);
      new (pDstData) ASN1T_PKCS7_RecipientInfos;
   }

   asn1Copy_PKCS7_RecipientInfos (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_RecipientInfos* ASN1C_PKCS7_RecipientInfos::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_RecipientInfos* pDstData = new ASN1T_PKCS7_RecipientInfos;

   asn1Copy_PKCS7_RecipientInfos (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_EncryptedContentInfo (OSCTXT* pctxt, 
   ASN1T_PKCS7_EncryptedContentInfo* pSrcValue, 
   ASN1T_PKCS7_EncryptedContentInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_PKCS7_ContentType (pctxt, &pSrcValue->contentType, &pDstValue->contentType);

   asn1Copy_PKCS7_ContentEncryptionAlgorithmIdentifier (pctxt, &pSrcValue->contentEncryptionAlgorithm, &pDstValue->contentEncryptionAlgorithm);

   if (pSrcValue->m.encryptedContentPresent) {
      asn1Copy_PKCS7_EncryptedContent (pctxt, &pSrcValue->encryptedContent, &pDstValue->encryptedContent);
   }

}

ASN1C_PKCS7_EncryptedContentInfo::ASN1C_PKCS7_EncryptedContentInfo (ASN1C_PKCS7_EncryptedContentInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_EncryptedContentInfo::ASN1T_PKCS7_EncryptedContentInfo (ASN1C_PKCS7_EncryptedContentInfo& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_EncryptedContentInfo& ASN1C_PKCS7_EncryptedContentInfo::getCopy (ASN1T_PKCS7_EncryptedContentInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_EncryptedContentInfo);
      new (pDstData) ASN1T_PKCS7_EncryptedContentInfo;
   }

   asn1Copy_PKCS7_EncryptedContentInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_EncryptedContentInfo* ASN1C_PKCS7_EncryptedContentInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_EncryptedContentInfo* pDstData = new ASN1T_PKCS7_EncryptedContentInfo;

   asn1Copy_PKCS7_EncryptedContentInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_EnvelopedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_EnvelopedData* pSrcValue, ASN1T_PKCS7_EnvelopedData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->version = pSrcValue->version;

   asn1Copy_PKCS7_RecipientInfos (pctxt, &pSrcValue->recipientInfos, &pDstValue->recipientInfos);

   asn1Copy_PKCS7_EncryptedContentInfo (pctxt, &pSrcValue->encryptedContentInfo, &pDstValue->encryptedContentInfo);

}

ASN1C_PKCS7_EnvelopedData::ASN1C_PKCS7_EnvelopedData (ASN1C_PKCS7_EnvelopedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_EnvelopedData::ASN1T_PKCS7_EnvelopedData (ASN1C_PKCS7_EnvelopedData& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_EnvelopedData& ASN1C_PKCS7_EnvelopedData::getCopy (ASN1T_PKCS7_EnvelopedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_EnvelopedData);
      new (pDstData) ASN1T_PKCS7_EnvelopedData;
   }

   asn1Copy_PKCS7_EnvelopedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_EnvelopedData* ASN1C_PKCS7_EnvelopedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_EnvelopedData* pDstData = new ASN1T_PKCS7_EnvelopedData;

   asn1Copy_PKCS7_EnvelopedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_SignedAndEnvelopedData (OSCTXT* pctxt, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pSrcValue, 
   ASN1T_PKCS7_SignedAndEnvelopedData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_PKCS7_RecipientInfos (pctxt, &pSrcValue->recipientInfos, &pDstValue->recipientInfos);

   asn1Copy_PKCS7_DigestAlgorithmIdentifiers (pctxt, &pSrcValue->digestAlgorithms, &pDstValue->digestAlgorithms);

   asn1Copy_PKCS7_EncryptedContentInfo (pctxt, &pSrcValue->encryptedContentInfo, &pDstValue->encryptedContentInfo);

   if (pSrcValue->m.certificatesPresent) {
      asn1Copy_PKCS7_ExtendedCertificatesAndCertificates (pctxt, &pSrcValue->certificates, &pDstValue->certificates);
   }

   if (pSrcValue->m.crlsPresent) {
      asn1Copy_PKCS7_CertificateRevocationLists (pctxt, &pSrcValue->crls, &pDstValue->crls);
   }

   asn1Copy_PKCS7_SignerInfos (pctxt, &pSrcValue->signerInfos, &pDstValue->signerInfos);

}

ASN1C_PKCS7_SignedAndEnvelopedData::ASN1C_PKCS7_SignedAndEnvelopedData (ASN1C_PKCS7_SignedAndEnvelopedData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_SignedAndEnvelopedData::ASN1T_PKCS7_SignedAndEnvelopedData (ASN1C_PKCS7_SignedAndEnvelopedData& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_SignedAndEnvelopedData& ASN1C_PKCS7_SignedAndEnvelopedData::getCopy (ASN1T_PKCS7_SignedAndEnvelopedData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_SignedAndEnvelopedData);
      new (pDstData) ASN1T_PKCS7_SignedAndEnvelopedData;
   }

   asn1Copy_PKCS7_SignedAndEnvelopedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_SignedAndEnvelopedData* ASN1C_PKCS7_SignedAndEnvelopedData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_SignedAndEnvelopedData* pDstData = new ASN1T_PKCS7_SignedAndEnvelopedData;

   asn1Copy_PKCS7_SignedAndEnvelopedData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_IssuerSerial (OSCTXT* pctxt, 
   ASN1T_PKCS7_IssuerSerial* pSrcValue, ASN1T_PKCS7_IssuerSerial* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->issuer, &pDstValue->issuer);

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->serialNumber, &pDstValue->serialNumber);

}

ASN1C_PKCS7_IssuerSerial::ASN1C_PKCS7_IssuerSerial (ASN1C_PKCS7_IssuerSerial& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_IssuerSerial::ASN1T_PKCS7_IssuerSerial (ASN1C_PKCS7_IssuerSerial& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_IssuerSerial& ASN1C_PKCS7_IssuerSerial::getCopy (ASN1T_PKCS7_IssuerSerial* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_IssuerSerial);
      new (pDstData) ASN1T_PKCS7_IssuerSerial;
   }

   asn1Copy_PKCS7_IssuerSerial (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_IssuerSerial* ASN1C_PKCS7_IssuerSerial::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_IssuerSerial* pDstData = new ASN1T_PKCS7_IssuerSerial;

   asn1Copy_PKCS7_IssuerSerial (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_ESSCertID (OSCTXT* pctxt, 
   ASN1T_PKCS7_ESSCertID* pSrcValue, ASN1T_PKCS7_ESSCertID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_PKCS7_Hash (pctxt, &pSrcValue->certHash, &pDstValue->certHash);

   if (pSrcValue->m.issuerSerialPresent) {
      asn1Copy_PKCS7_IssuerSerial (pctxt, &pSrcValue->issuerSerial, &pDstValue->issuerSerial);
   }

}

ASN1C_PKCS7_ESSCertID::ASN1C_PKCS7_ESSCertID (ASN1C_PKCS7_ESSCertID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_ESSCertID::ASN1T_PKCS7_ESSCertID (ASN1C_PKCS7_ESSCertID& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_ESSCertID& ASN1C_PKCS7_ESSCertID::getCopy (ASN1T_PKCS7_ESSCertID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_ESSCertID);
      new (pDstData) ASN1T_PKCS7_ESSCertID;
   }

   asn1Copy_PKCS7_ESSCertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_ESSCertID* ASN1C_PKCS7_ESSCertID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_ESSCertID* pDstData = new ASN1T_PKCS7_ESSCertID;

   asn1Copy_PKCS7_ESSCertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7__SeqOfPKCS7_ESSCertID (OSCTXT* pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pSrcValue, 
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKCS7_ESSCertID* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKCS7_ESSCertID* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKCS7_ESSCertID);
         pSrcData = (ASN1T_PKCS7_ESSCertID*) pnode->data;

         asn1Copy_PKCS7_ESSCertID (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::ASN1C_PKCS7__SeqOfPKCS7_ESSCertID (ASN1C_PKCS7__SeqOfPKCS7_ESSCertID& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS7__SeqOfPKCS7_ESSCertID*)pList)
{
}

ASN1C_PKCS7__SeqOfPKCS7_ESSCertID& ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::operator= (ASN1C_PKCS7__SeqOfPKCS7_ESSCertID& srcData)
{
   clear ();
   asn1Copy_PKCS7__SeqOfPKCS7_ESSCertID (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS7__SeqOfPKCS7_ESSCertID& ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::getCopy (ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7__SeqOfPKCS7_ESSCertID);
      new (pDstData) ASN1T_PKCS7__SeqOfPKCS7_ESSCertID;
   }

   asn1Copy_PKCS7__SeqOfPKCS7_ESSCertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* ASN1C_PKCS7__SeqOfPKCS7_ESSCertID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7__SeqOfPKCS7_ESSCertID* pDstData = new ASN1T_PKCS7__SeqOfPKCS7_ESSCertID;

   asn1Copy_PKCS7__SeqOfPKCS7_ESSCertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7__SeqOfPKCS7_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pSrcValue, 
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_PolicyInformation* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_PolicyInformation* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_PolicyInformation);
         pSrcData = (ASN1T_IMP_PolicyInformation*) pnode->data;

         asn1Copy_IMP_PolicyInformation (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation (ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation*)pList)
{
}

ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation& ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::operator= (ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation& srcData)
{
   clear ();
   asn1Copy_PKCS7__SeqOfPKCS7_PolicyInformation (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation& ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::getCopy (ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation);
      new (pDstData) ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation;
   }

   asn1Copy_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* ASN1C_PKCS7__SeqOfPKCS7_PolicyInformation::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation* pDstData = new ASN1T_PKCS7__SeqOfPKCS7_PolicyInformation;

   asn1Copy_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS7_SigningCertificate (OSCTXT* pctxt, 
   ASN1T_PKCS7_SigningCertificate* pSrcValue, ASN1T_PKCS7_SigningCertificate*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_PKCS7__SeqOfPKCS7_ESSCertID (pctxt, &pSrcValue->certs, &pDstValue->certs);

   if (pSrcValue->m.policiesPresent) {
      asn1Copy_PKCS7__SeqOfPKCS7_PolicyInformation (pctxt, &pSrcValue->policies, &pDstValue->policies);
   }

}

ASN1C_PKCS7_SigningCertificate::ASN1C_PKCS7_SigningCertificate (ASN1C_PKCS7_SigningCertificate& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS7_SigningCertificate::ASN1T_PKCS7_SigningCertificate (ASN1C_PKCS7_SigningCertificate& original)
{
   original.getCopy (this);
}

ASN1T_PKCS7_SigningCertificate& ASN1C_PKCS7_SigningCertificate::getCopy (ASN1T_PKCS7_SigningCertificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS7_SigningCertificate);
      new (pDstData) ASN1T_PKCS7_SigningCertificate;
   }

   asn1Copy_PKCS7_SigningCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS7_SigningCertificate* ASN1C_PKCS7_SigningCertificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS7_SigningCertificate* pDstData = new ASN1T_PKCS7_SigningCertificate;

   asn1Copy_PKCS7_SigningCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

