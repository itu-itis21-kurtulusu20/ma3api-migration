/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "cms.h"
#include "rtxsrc/rtxCommon.h"

EXTERN int asn1E_CMS_ContentType (OSCTXT* pctxt,
   ASN1T_CMS_ContentType *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentType");

   ll = xe_objid (pctxt, (ASN1OBJID*)pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_EncryptedKey (OSCTXT* pctxt,
   ASN1T_CMS_EncryptedKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncryptedKey");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SubjectKeyIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_SubjectKeyIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SubjectKeyIdentifier");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_Digest (OSCTXT* pctxt,
   ASN1T_CMS_Digest *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Digest");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_MessageAuthenticationCode (OSCTXT* pctxt,
   ASN1T_CMS_MessageAuthenticationCode *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "MessageAuthenticationCode");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_DigestAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_DigestAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DigestAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SignatureAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_SignatureAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignatureAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_KeyEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_KeyEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyEncryptionAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_ContentEncryptionAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_ContentEncryptionAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentEncryptionAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_MessageAuthenticationCodeAlgorithm (OSCTXT* pctxt,
   ASN1T_CMS_MessageAuthenticationCodeAlgorithm *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "MessageAuthenticationCodeAlgorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_KeyDerivationAlgorithmIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_KeyDerivationAlgorithmIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyDerivationAlgorithmIdentifier");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_AttributeCertificateV2 (OSCTXT* pctxt,
   ASN1T_CMS_AttributeCertificateV2 *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AttributeCertificateV2");

   ll = asn1E_ATTRCERT_AttributeCertificate (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_CMSVersion (OSCTXT* pctxt,
   ASN1T_CMS_CMSVersion *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CMSVersion");

   ll = xe_integer (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_UserKeyingMaterial (OSCTXT* pctxt,
   ASN1T_CMS_UserKeyingMaterial *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "UserKeyingMaterial");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_MessageDigest (OSCTXT* pctxt,
   ASN1T_CMS_MessageDigest *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "MessageDigest");

   ll = xe_octstr (pctxt, pvalue->data, pvalue->numocts, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SignerIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_SignerIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignerIdentifier");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "issuerAndSerialNumber");

         ll = asn1E_PKCS7_IssuerAndSerialNumber (pctxt, pvalue->u.issuerAndSerialNumber, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "subjectKeyIdentifier");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
            asn1E_CMS_SubjectKeyIdentifier (pctxt, pvalue->u.subjectKeyIdentifier, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_UnsignedAttributes (OSCTXT* pctxt,
   ASN1T_CMS_UnsignedAttributes *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "UnsignedAttributes");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Attribute", xx1);

      ll = asn1E_EXP_Attribute (pctxt, ((ASN1T_EXP_Attribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SignerInfo (OSCTXT* pctxt,
   ASN1T_CMS_SignerInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignerInfo");

   /* encode unsignedAttrs */

   if (pvalue->m.unsignedAttrsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "unsignedAttrs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CMS_UnsignedAttributes (pctxt, &pvalue->unsignedAttrs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = asn1E_DERCMS_SignatureValue (pctxt, &pvalue->signature_, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signatureAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "signatureAlgorithm");

   ll = asn1E_CMS_SignatureAlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signedAttrs */

   if (pvalue->m.signedAttrsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "signedAttrs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_DERCMS_SignedAttributes (pctxt, &pvalue->signedAttrs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode digestAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "digestAlgorithm");

   ll = asn1E_CMS_DigestAlgorithmIdentifier (pctxt, &pvalue->digestAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode sid */

   RTXCTXTPUSHELEMNAME (pctxt, "sid");

   ll = asn1E_CMS_SignerIdentifier (pctxt, &pvalue->sid, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_Countersignature (OSCTXT* pctxt,
   ASN1T_CMS_Countersignature *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Countersignature");

   ll = asn1E_CMS_SignerInfo (pctxt, pvalue, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_Signature (OSCTXT* pctxt,
   ASN1T_CMS_Signature *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "Signature");

   ll = xe_bitstr (pctxt, pvalue->data, pvalue->numbits, tagging);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll0 += ll;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_ContentInfo (OSCTXT* pctxt,
   ASN1T_CMS_ContentInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ContentInfo");

   /* encode content */

   RTXCTXTPUSHELEMNAME (pctxt, "content");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
      xe_OpenType (pctxt, pvalue->content.data, pvalue->content.numocts));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode contentType */

   RTXCTXTPUSHELEMNAME (pctxt, "contentType");

   ll = asn1E_CMS_ContentType (pctxt, &pvalue->contentType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_EncapsulatedContentInfo (OSCTXT* pctxt,
   ASN1T_CMS_EncapsulatedContentInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncapsulatedContentInfo");

   /* encode eContent */

   if (pvalue->m.eContentPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "eContent");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         xe_octstr (pctxt, pvalue->eContent.data, pvalue->eContent.numocts, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode eContentType */

   RTXCTXTPUSHELEMNAME (pctxt, "eContentType");

   ll = asn1E_CMS_ContentType (pctxt, &pvalue->eContentType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_UnauthAttributes (OSCTXT* pctxt,
   ASN1T_CMS_UnauthAttributes *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "UnauthAttributes");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Attribute", xx1);

      ll = asn1E_EXP_Attribute (pctxt, ((ASN1T_EXP_Attribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_ExtendedCertificateInfo (OSCTXT* pctxt,
   ASN1T_CMS_ExtendedCertificateInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtendedCertificateInfo");

   /* encode attributes */

   RTXCTXTPUSHELEMNAME (pctxt, "attributes");

   ll = asn1E_CMS_UnauthAttributes (pctxt, &pvalue->attributes, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode certificate */

   RTXCTXTPUSHELEMNAME (pctxt, "certificate");

   ll = asn1E_EXP_Certificate (pctxt, &pvalue->certificate, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_ExtendedCertificate (OSCTXT* pctxt,
   ASN1T_CMS_ExtendedCertificate *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtendedCertificate");

   /* encode signature_ */

   RTXCTXTPUSHELEMNAME (pctxt, "signature");

   ll = asn1E_CMS_Signature (pctxt, &pvalue->signature_, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode signatureAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "signatureAlgorithm");

   ll = asn1E_CMS_SignatureAlgorithmIdentifier (pctxt, &pvalue->signatureAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode extendedCertificateInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "extendedCertificateInfo");

   ll = asn1E_CMS_ExtendedCertificateInfo (pctxt, &pvalue->extendedCertificateInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_OtherCertificateFormat (OSCTXT* pctxt,
   ASN1T_CMS_OtherCertificateFormat *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherCertificateFormat");

   /* encode otherCert */

   RTXCTXTPUSHELEMNAME (pctxt, "otherCert");

   ll = xe_OpenType (pctxt, pvalue->otherCert.data, pvalue->otherCert.numocts);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode otherCertFormat */

   RTXCTXTPUSHELEMNAME (pctxt, "otherCertFormat");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->otherCertFormat, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_CertificateChoices (OSCTXT* pctxt,
   ASN1T_CMS_CertificateChoices *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertificateChoices");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "certificate");

         ll = asn1E_EXP_Certificate (pctxt, pvalue->u.certificate, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "extendedCertificate");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_CMS_ExtendedCertificate (pctxt, pvalue->u.extendedCertificate, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "v1AttrCert");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_ATTRCERT_AttributeCertificateV1 (pctxt, pvalue->u.v1AttrCert, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "v2AttrCert");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
            asn1E_CMS_AttributeCertificateV2 (pctxt, pvalue->u.v2AttrCert, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "other");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
            asn1E_CMS_OtherCertificateFormat (pctxt, pvalue->u.other, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_CertificateSet (OSCTXT* pctxt,
   ASN1T_CMS_CertificateSet *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "CertificateSet");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "CertificateChoices", xx1);

      ll = asn1E_CMS_CertificateChoices (pctxt, ((ASN1T_CMS_CertificateChoices*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_OtherRevocationInfoFormat (OSCTXT* pctxt,
   ASN1T_CMS_OtherRevocationInfoFormat *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherRevocationInfoFormat");

   /* encode otherRevInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "otherRevInfo");

   ll = xe_OpenType (pctxt, pvalue->otherRevInfo.data, pvalue->otherRevInfo.numocts);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode otherRevInfoFormat */

   RTXCTXTPUSHELEMNAME (pctxt, "otherRevInfoFormat");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->otherRevInfoFormat, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_RevocationInfoChoice (OSCTXT* pctxt,
   ASN1T_CMS_RevocationInfoChoice *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RevocationInfoChoice");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "crl");

         ll = asn1E_EXP_CertificateList (pctxt, pvalue->u.crl, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "other");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_CMS_OtherRevocationInfoFormat (pctxt, pvalue->u.other, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_RevocationInfoChoices (OSCTXT* pctxt,
   ASN1T_CMS_RevocationInfoChoices *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RevocationInfoChoices");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "RevocationInfoChoice", xx1);

      ll = asn1E_CMS_RevocationInfoChoice (pctxt, ((ASN1T_CMS_RevocationInfoChoice*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SignerInfos (OSCTXT* pctxt,
   ASN1T_CMS_SignerInfos *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignerInfos");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SignerInfo", xx1);

      ll = asn1E_CMS_SignerInfo (pctxt, ((ASN1T_CMS_SignerInfo*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SignedData (OSCTXT* pctxt,
   ASN1T_CMS_SignedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SignedData");

   /* encode signerInfos */

   RTXCTXTPUSHELEMNAME (pctxt, "signerInfos");

   ll = asn1E_CMS_SignerInfos (pctxt, &pvalue->signerInfos, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode crls */

   if (pvalue->m.crlsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crls");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CMS_RevocationInfoChoices (pctxt, &pvalue->crls, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certificates */

   if (pvalue->m.certificatesPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "certificates");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMS_CertificateSet (pctxt, &pvalue->certificates, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode encapContentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "encapContentInfo");

   ll = asn1E_CMS_EncapsulatedContentInfo (pctxt, &pvalue->encapContentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode digestAlgorithms */

   RTXCTXTPUSHELEMNAME (pctxt, "digestAlgorithms");

   ll = asn1E_PKCS7_DigestAlgorithmIdentifiers (pctxt, &pvalue->digestAlgorithms, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_OriginatorInfo (OSCTXT* pctxt,
   ASN1T_CMS_OriginatorInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OriginatorInfo");

   /* encode crls */

   if (pvalue->m.crlsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "crls");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CMS_RevocationInfoChoices (pctxt, &pvalue->crls, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certs */

   if (pvalue->m.certsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "certs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMS_CertificateSet (pctxt, &pvalue->certs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_RecipientIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_RecipientIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RecipientIdentifier");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "issuerAndSerialNumber");

         ll = asn1E_PKCS7_IssuerAndSerialNumber (pctxt, pvalue->u.issuerAndSerialNumber, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "subjectKeyIdentifier");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
            asn1E_CMS_SubjectKeyIdentifier (pctxt, pvalue->u.subjectKeyIdentifier, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_KeyTransRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_KeyTransRecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyTransRecipientInfo");

   /* encode encryptedKey */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedKey");

   ll = asn1E_CMS_EncryptedKey (pctxt, &pvalue->encryptedKey, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "keyEncryptionAlgorithm");

   ll = asn1E_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &pvalue->keyEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode rid */

   RTXCTXTPUSHELEMNAME (pctxt, "rid");

   ll = asn1E_CMS_RecipientIdentifier (pctxt, &pvalue->rid, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_OriginatorPublicKey (OSCTXT* pctxt,
   ASN1T_CMS_OriginatorPublicKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OriginatorPublicKey");

   /* encode publicKey */

   RTXCTXTPUSHELEMNAME (pctxt, "publicKey");

   ll = xe_bitstr (pctxt, pvalue->publicKey.data, pvalue->publicKey.numbits, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode algorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "algorithm");

   ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->algorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_OriginatorIdentifierOrKey (OSCTXT* pctxt,
   ASN1T_CMS_OriginatorIdentifierOrKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OriginatorIdentifierOrKey");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "issuerAndSerialNumber");

         ll = asn1E_PKCS7_IssuerAndSerialNumber (pctxt, pvalue->u.issuerAndSerialNumber, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "subjectKeyIdentifier");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|0,
            asn1E_CMS_SubjectKeyIdentifier (pctxt, pvalue->u.subjectKeyIdentifier, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "originatorKey");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_CMS_OriginatorPublicKey (pctxt, pvalue->u.originatorKey, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_OtherKeyAttribute (OSCTXT* pctxt,
   ASN1T_CMS_OtherKeyAttribute *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherKeyAttribute");

   /* encode keyAttr */

   if (pvalue->m.keyAttrPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "keyAttr");

      ll = xe_OpenType (pctxt, pvalue->keyAttr.data, pvalue->keyAttr.numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode keyAttrId */

   RTXCTXTPUSHELEMNAME (pctxt, "keyAttrId");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->keyAttrId, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_RecipientKeyIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_RecipientKeyIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RecipientKeyIdentifier");

   /* encode other */

   if (pvalue->m.otherPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "other");

      ll = asn1E_CMS_OtherKeyAttribute (pctxt, &pvalue->other, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode date */

   if (pvalue->m.datePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "date");

      ll = xe_charstr (pctxt, pvalue->date, ASN1EXPL, TM_UNIV|TM_PRIM|24);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode subjectKeyIdentifier */

   RTXCTXTPUSHELEMNAME (pctxt, "subjectKeyIdentifier");

   ll = asn1E_CMS_SubjectKeyIdentifier (pctxt, &pvalue->subjectKeyIdentifier, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_KeyAgreeRecipientIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_KeyAgreeRecipientIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyAgreeRecipientIdentifier");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "issuerAndSerialNumber");

         ll = asn1E_PKCS7_IssuerAndSerialNumber (pctxt, pvalue->u.issuerAndSerialNumber, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "rKeyId");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_CMS_RecipientKeyIdentifier (pctxt, pvalue->u.rKeyId, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_RecipientEncryptedKey (OSCTXT* pctxt,
   ASN1T_CMS_RecipientEncryptedKey *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RecipientEncryptedKey");

   /* encode encryptedKey */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedKey");

   ll = asn1E_CMS_EncryptedKey (pctxt, &pvalue->encryptedKey, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode rid */

   RTXCTXTPUSHELEMNAME (pctxt, "rid");

   ll = asn1E_CMS_KeyAgreeRecipientIdentifier (pctxt, &pvalue->rid, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_RecipientEncryptedKeys (OSCTXT* pctxt,
   ASN1T_CMS_RecipientEncryptedKeys *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RecipientEncryptedKeys");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "RecipientEncryptedKey", xx1);

      ll = asn1E_CMS_RecipientEncryptedKey (pctxt, ((ASN1T_CMS_RecipientEncryptedKey*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_KeyAgreeRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_KeyAgreeRecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KeyAgreeRecipientInfo");

   /* encode recipientEncryptedKeys */

   RTXCTXTPUSHELEMNAME (pctxt, "recipientEncryptedKeys");

   ll = asn1E_CMS_RecipientEncryptedKeys (pctxt, &pvalue->recipientEncryptedKeys, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "keyEncryptionAlgorithm");

   ll = asn1E_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &pvalue->keyEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode ukm */

   if (pvalue->m.ukmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "ukm");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CMS_UserKeyingMaterial (pctxt, &pvalue->ukm, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode originator */

   RTXCTXTPUSHELEMNAME (pctxt, "originator");

   ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
      asn1E_CMS_OriginatorIdentifierOrKey (pctxt, &pvalue->originator, ASN1EXPL));
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_KEKIdentifier (OSCTXT* pctxt,
   ASN1T_CMS_KEKIdentifier *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KEKIdentifier");

   /* encode other */

   if (pvalue->m.otherPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "other");

      ll = asn1E_CMS_OtherKeyAttribute (pctxt, &pvalue->other, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode date */

   if (pvalue->m.datePresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "date");

      ll = xe_charstr (pctxt, pvalue->date, ASN1EXPL, TM_UNIV|TM_PRIM|24);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode keyIdentifier */

   RTXCTXTPUSHELEMNAME (pctxt, "keyIdentifier");

   ll = xe_octstr (pctxt, pvalue->keyIdentifier.data, pvalue->keyIdentifier.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_KEKRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_KEKRecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "KEKRecipientInfo");

   /* encode encryptedKey */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedKey");

   ll = asn1E_CMS_EncryptedKey (pctxt, &pvalue->encryptedKey, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "keyEncryptionAlgorithm");

   ll = asn1E_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &pvalue->keyEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode kekid */

   RTXCTXTPUSHELEMNAME (pctxt, "kekid");

   ll = asn1E_CMS_KEKIdentifier (pctxt, &pvalue->kekid, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_PasswordRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_PasswordRecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "PasswordRecipientInfo");

   /* encode encryptedKey */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedKey");

   ll = asn1E_CMS_EncryptedKey (pctxt, &pvalue->encryptedKey, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyEncryptionAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "keyEncryptionAlgorithm");

   ll = asn1E_CMS_KeyEncryptionAlgorithmIdentifier (pctxt, &pvalue->keyEncryptionAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode keyDerivationAlgorithm */

   if (pvalue->m.keyDerivationAlgorithmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "keyDerivationAlgorithm");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMS_KeyDerivationAlgorithmIdentifier (pctxt, &pvalue->keyDerivationAlgorithm, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_OtherRecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_OtherRecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "OtherRecipientInfo");

   /* encode oriValue */

   RTXCTXTPUSHELEMNAME (pctxt, "oriValue");

   ll = xe_OpenType (pctxt, pvalue->oriValue.data, pvalue->oriValue.numocts);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode oriType */

   RTXCTXTPUSHELEMNAME (pctxt, "oriType");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->oriType, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_RecipientInfo (OSCTXT* pctxt,
   ASN1T_CMS_RecipientInfo *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RecipientInfo");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "ktri");

         ll = asn1E_CMS_KeyTransRecipientInfo (pctxt, pvalue->u.ktri, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "kari");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_CMS_KeyAgreeRecipientInfo (pctxt, pvalue->u.kari, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "kekri");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
            asn1E_CMS_KEKRecipientInfo (pctxt, pvalue->u.kekri, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 4:
         RTXCTXTPUSHELEMNAME (pctxt, "pwri");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
            asn1E_CMS_PasswordRecipientInfo (pctxt, pvalue->u.pwri, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 5:
         RTXCTXTPUSHELEMNAME (pctxt, "ori");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|4,
            asn1E_CMS_OtherRecipientInfo (pctxt, pvalue->u.ori, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_RecipientInfos (OSCTXT* pctxt,
   ASN1T_CMS_RecipientInfos *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "RecipientInfos");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "RecipientInfo", xx1);

      ll = asn1E_CMS_RecipientInfo (pctxt, ((ASN1T_CMS_RecipientInfo*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_UnprotectedAttributes (OSCTXT* pctxt,
   ASN1T_CMS_UnprotectedAttributes *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "UnprotectedAttributes");

   if (!(pvalue->count >= 1)) {
      rtxErrAddElemNameParm (pctxt);
      rtxErrAddIntParm (pctxt, (int)pvalue->count);
      return LOG_RTERR (pctxt, RTERR_CONSVIO);
   }

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "Attribute", xx1);

      ll = asn1E_EXP_Attribute (pctxt, ((ASN1T_EXP_Attribute*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|17, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_EnvelopedData (OSCTXT* pctxt,
   ASN1T_CMS_EnvelopedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EnvelopedData");

   /* encode unprotectedAttrs */

   if (pvalue->m.unprotectedAttrsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "unprotectedAttrs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CMS_UnprotectedAttributes (pctxt, &pvalue->unprotectedAttrs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode encryptedContentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedContentInfo");

   ll = asn1E_PKCS7_EncryptedContentInfo (pctxt, &pvalue->encryptedContentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode recipientInfos */

   RTXCTXTPUSHELEMNAME (pctxt, "recipientInfos");

   ll = asn1E_CMS_RecipientInfos (pctxt, &pvalue->recipientInfos, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode originatorInfo */

   if (pvalue->m.originatorInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "originatorInfo");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMS_OriginatorInfo (pctxt, &pvalue->originatorInfo, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_DigestedData (OSCTXT* pctxt,
   ASN1T_CMS_DigestedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "DigestedData");

   /* encode digest */

   RTXCTXTPUSHELEMNAME (pctxt, "digest");

   ll = asn1E_CMS_Digest (pctxt, &pvalue->digest, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode encapContentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "encapContentInfo");

   ll = asn1E_CMS_EncapsulatedContentInfo (pctxt, &pvalue->encapContentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode digestAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "digestAlgorithm");

   ll = asn1E_CMS_DigestAlgorithmIdentifier (pctxt, &pvalue->digestAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_EncryptedData (OSCTXT* pctxt,
   ASN1T_CMS_EncryptedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "EncryptedData");

   /* encode unprotectedAttrs */

   if (pvalue->m.unprotectedAttrsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "unprotectedAttrs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CMS_UnprotectedAttributes (pctxt, &pvalue->unprotectedAttrs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode encryptedContentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "encryptedContentInfo");

   ll = asn1E_PKCS7_EncryptedContentInfo (pctxt, &pvalue->encryptedContentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_AuthenticatedData (OSCTXT* pctxt,
   ASN1T_CMS_AuthenticatedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AuthenticatedData");

   /* encode unauthAttrs */

   if (pvalue->m.unauthAttrsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "unauthAttrs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|3,
         asn1E_CMS_UnauthAttributes (pctxt, &pvalue->unauthAttrs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode mac */

   RTXCTXTPUSHELEMNAME (pctxt, "mac");

   ll = asn1E_CMS_MessageAuthenticationCode (pctxt, &pvalue->mac, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode authAttrs */

   if (pvalue->m.authAttrsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "authAttrs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         asn1E_DERCMS_AuthAttributes (pctxt, &pvalue->authAttrs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode encapContentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "encapContentInfo");

   ll = asn1E_CMS_EncapsulatedContentInfo (pctxt, &pvalue->encapContentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode digestAlgorithm */

   if (pvalue->m.digestAlgorithmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "digestAlgorithm");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_CMS_DigestAlgorithmIdentifier (pctxt, &pvalue->digestAlgorithm, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode macAlgorithm */

   RTXCTXTPUSHELEMNAME (pctxt, "macAlgorithm");

   ll = asn1E_CMS_MessageAuthenticationCodeAlgorithm (pctxt, &pvalue->macAlgorithm, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode recipientInfos */

   RTXCTXTPUSHELEMNAME (pctxt, "recipientInfos");

   ll = asn1E_CMS_RecipientInfos (pctxt, &pvalue->recipientInfos, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode originatorInfo */

   if (pvalue->m.originatorInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "originatorInfo");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMS_OriginatorInfo (pctxt, &pvalue->originatorInfo, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_ExtendedCertificateOrCertificate (OSCTXT* pctxt,
   ASN1T_CMS_ExtendedCertificateOrCertificate *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ExtendedCertificateOrCertificate");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "certificate");

         ll = asn1E_EXP_Certificate (pctxt, pvalue->u.certificate, ASN1EXPL);
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "extendedCertificate");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_CMS_ExtendedCertificate (pctxt, pvalue->u.extendedCertificate, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SMIMECapability (OSCTXT* pctxt,
   ASN1T_CMS_SMIMECapability *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SMIMECapability");

   /* encode parameters */

   if (pvalue->m.parametersPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "parameters");

      ll = xe_OpenType (pctxt, pvalue->parameters.data, pvalue->parameters.numocts);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode capabilityID */

   RTXCTXTPUSHELEMNAME (pctxt, "capabilityID");

   ll = xe_objid (pctxt, (ASN1OBJID*)&pvalue->capabilityID, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SMIMECapabilities (OSCTXT* pctxt,
   ASN1T_CMS_SMIMECapabilities *pvalue, ASN1TagType tagging)
{
   OSRTDListNode* pnode;
   int xx1;
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SMIMECapabilities");

   xx1 = (int)pvalue->count;
   pnode = pvalue->tail;
   while (0 != pnode) {
      RTXCTXTPUSHARRAYELEMNAME (pctxt, "SMIMECapability", xx1);

      ll = asn1E_CMS_SMIMECapability (pctxt, ((ASN1T_CMS_SMIMECapability*)pnode->data), ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPARRAYELEMNAME (pctxt);
      xx1--;

      pnode = pnode->prev;
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_SMIMEEncryptionKeyPreference (OSCTXT* pctxt,
   ASN1T_CMS_SMIMEEncryptionKeyPreference *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "SMIMEEncryptionKeyPreference");

   ll0 = 0;
   switch (pvalue->t)
   {
      case 1:
         RTXCTXTPUSHELEMNAME (pctxt, "issuerAndSerialNumber");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
            asn1E_PKCS7_IssuerAndSerialNumber (pctxt, pvalue->u.issuerAndSerialNumber, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 2:
         RTXCTXTPUSHELEMNAME (pctxt, "receipentKeyId");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
            asn1E_CMS_RecipientKeyIdentifier (pctxt, pvalue->u.receipentKeyId, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      case 3:
         RTXCTXTPUSHELEMNAME (pctxt, "subjectAltKeyIdentifier");

         ll = xe_tag_len (pctxt, TM_CTXT|TM_PRIM|2,
            asn1E_CMS_SubjectKeyIdentifier (pctxt, pvalue->u.subjectAltKeyIdentifier, ASN1IMPL));
         if (ll < 0) return LOG_RTERR (pctxt, ll);
         ll1 += ll;

         RTXCTXTPOPELEMNAME (pctxt);
         break;

      default:
         rtxErrAddIntParm (pctxt, pvalue->t);
         return LOG_RTERR (pctxt, RTERR_INVOPT);
   }
   ll0 += ll1;

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_MQVuserKeyingMaterial (OSCTXT* pctxt,
   ASN1T_CMS_MQVuserKeyingMaterial *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "MQVuserKeyingMaterial");

   /* encode addedukm */

   if (pvalue->m.addedukmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "addedukm");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMS_UserKeyingMaterial (pctxt, &pvalue->addedukm, ASN1EXPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode ephemeralPublicKey */

   RTXCTXTPUSHELEMNAME (pctxt, "ephemeralPublicKey");

   ll = asn1E_CMS_OriginatorPublicKey (pctxt, &pvalue->ephemeralPublicKey, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_ESSCertIDv2 (OSCTXT* pctxt,
   ASN1T_CMS_ESSCertIDv2 *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "ESSCertIDv2");

   /* encode issuerSerial */

   if (pvalue->m.issuerSerialPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "issuerSerial");

      ll = asn1E_PKCS7_IssuerAndSerialNumber (pctxt, &pvalue->issuerSerial, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode certHash */

   RTXCTXTPUSHELEMNAME (pctxt, "certHash");

   ll = xe_octstr (pctxt, pvalue->certHash.data, pvalue->certHash.numocts, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode hashAlgorithm */

   if (pvalue->m.hashAlgorithmPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "hashAlgorithm");

      ll = asn1E_EXP_AlgorithmIdentifier (pctxt, &pvalue->hashAlgorithm, ASN1EXPL);
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

EXTERN int asn1E_CMS_AuthEnvelopedData (OSCTXT* pctxt,
   ASN1T_CMS_AuthEnvelopedData *pvalue, ASN1TagType tagging)
{
   int ll;
   int ll0 = 0;
   int ll1 = 0;

   RTXCTXTPUSHTYPENAME (pctxt, "AuthEnvelopedData");

   /* encode unauthAttrs */

   if (pvalue->m.unauthAttrsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "unauthAttrs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|2,
         asn1E_CMS_UnauthAttributes (pctxt, &pvalue->unauthAttrs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode mac */

   RTXCTXTPUSHELEMNAME (pctxt, "mac");

   ll = asn1E_CMS_MessageAuthenticationCode (pctxt, &pvalue->mac, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode authAttrs */

   if (pvalue->m.authAttrsPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "authAttrs");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|1,
         asn1E_DERCMS_AuthAttributes (pctxt, &pvalue->authAttrs, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode authEncryptedContentInfo */

   RTXCTXTPUSHELEMNAME (pctxt, "authEncryptedContentInfo");

   ll = asn1E_PKCS7_EncryptedContentInfo (pctxt, &pvalue->authEncryptedContentInfo, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode recipientInfos */

   RTXCTXTPUSHELEMNAME (pctxt, "recipientInfos");

   ll = asn1E_CMS_RecipientInfos (pctxt, &pvalue->recipientInfos, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   /* encode originatorInfo */

   if (pvalue->m.originatorInfoPresent) {
      RTXCTXTPUSHELEMNAME (pctxt, "originatorInfo");

      ll = xe_tag_len (pctxt, TM_CTXT|TM_CONS|0,
         asn1E_CMS_OriginatorInfo (pctxt, &pvalue->originatorInfo, ASN1IMPL));
      if (ll < 0) return LOG_RTERR (pctxt, ll);
      ll1 += ll;

      RTXCTXTPOPELEMNAME (pctxt);
   }
   /* encode version */

   RTXCTXTPUSHELEMNAME (pctxt, "version");

   ll = asn1E_CMS_CMSVersion (pctxt, &pvalue->version, ASN1EXPL);
   if (ll < 0) return LOG_RTERR (pctxt, ll);
   ll1 += ll;

   RTXCTXTPOPELEMNAME (pctxt);

   ll0 += ll1;

   if (tagging == ASN1EXPL)
      ll0 = xe_tag_len (pctxt, TM_UNIV|TM_CONS|16, ll0);

   RTXCTXTPOPTYPENAME (pctxt);

   return (ll0);
}

