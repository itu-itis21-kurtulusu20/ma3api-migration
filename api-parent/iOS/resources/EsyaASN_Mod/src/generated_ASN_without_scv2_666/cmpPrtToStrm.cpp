/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "cmp.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtxsrc/rtxCommon.h"

int asn1PrtToStrm_CMP_PKIProtection (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIProtection* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, name, pvalue->numbits, pvalue->data);
   return 0;
}

int ASN1C_CMP_PKIProtection::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIProtection (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIProtection::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIHeader_pvno (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIHeader_pvno* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 1: rtxStrcat (namebuf, 512, "cmp1999\n");break;
         case 2: rtxStrcat (namebuf, 512, "cmp2000\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_CMP_PKIHeader_pvno::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIHeader_pvno (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIHeader_pvno::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIFreeText (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIFreeText* pvalue)
{
   const OSUTF8CHAR* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (const OSUTF8CHAR*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtxPrintToStreamUTF8CharStr (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_PKIFreeText::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIFreeText (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIFreeText::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_InfoTypeAndValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_InfoTypeAndValue* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamOID (pctxt, "infoType", (ASN1OBJID*)&pvalue->infoType);

   if (pvalue->m.infoValuePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "infoValue",
         pvalue->infoValue.numocts, pvalue->infoValue.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_InfoTypeAndValue::toStream (const char* name)

{
   asn1PrtToStrm_CMP_InfoTypeAndValue (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_InfoTypeAndValue::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIHeader_generalInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIHeader_generalInfo* pvalue)
{
   ASN1T_CMP_InfoTypeAndValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_InfoTypeAndValue (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_PKIHeader_generalInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIHeader_generalInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIHeader_generalInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIHeader (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIHeader* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_PKIHeader_pvno (pctxt, "pvno", &pvalue->pvno);

   asn1PrtToStrm_IMP_GeneralName (pctxt, "sender", &pvalue->sender);

   asn1PrtToStrm_IMP_GeneralName (pctxt, "recipient", &pvalue->recipient);

   if (pvalue->m.messageTimePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamCharStr (pctxt, "messageTime", pvalue->messageTime);
   }

   if (pvalue->m.protectionAlgPresent) {
      asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "protectionAlg", &pvalue->protectionAlg);
   }

   if (pvalue->m.senderKIDPresent) {
      asn1PrtToStrm_IMP_KeyIdentifier (pctxt, "senderKID", &pvalue->senderKID);
   }

   if (pvalue->m.recipKIDPresent) {
      asn1PrtToStrm_IMP_KeyIdentifier (pctxt, "recipKID", &pvalue->recipKID);
   }

   if (pvalue->m.transactionIDPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "transactionID", pvalue->transactionID.numocts, pvalue->transactionID.data);
   }

   if (pvalue->m.senderNoncePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "senderNonce", pvalue->senderNonce.numocts, pvalue->senderNonce.data);
   }

   if (pvalue->m.recipNoncePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "recipNonce", pvalue->recipNonce.numocts, pvalue->recipNonce.data);
   }

   if (pvalue->m.freeTextPresent) {
      asn1PrtToStrm_CMP_PKIFreeText (pctxt, "freeText", &pvalue->freeText);
   }

   if (pvalue->m.generalInfoPresent) {
      asn1PrtToStrm_CMP_PKIHeader_generalInfo (pctxt, "generalInfo", &pvalue->generalInfo);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_PKIHeader::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIHeader (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIHeader::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CMPCertificate (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CMPCertificate* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* x509v3PKCert */
      case 1:
      {
         asn1PrtToStrm_EXP_Certificate (pctxt, "x509v3PKCert", pvalue->u.x509v3PKCert);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_CMPCertificate::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CMPCertificate (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CMPCertificate::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CertRepMessage_caPubs (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertRepMessage_caPubs* pvalue)
{
   ASN1T_CMP_CMPCertificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_CMPCertificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_CMPCertificate (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_CertRepMessage_caPubs::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CertRepMessage_caPubs (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CertRepMessage_caPubs::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIStatus* pvalue)
{
   {
      char namebuf[512];
      OSBOOL printNamebuf = TRUE;

      rtPrintToStreamIndent (pctxt);
      rtxStrcpy (namebuf, 512, name);
      rtxStrcat (namebuf, 512, " = ");
      switch (*pvalue) {
         case 0: rtxStrcat (namebuf, 512, "accepted\n");break;
         case 1: rtxStrcat (namebuf, 512, "grantedWithMods\n");break;
         case 2: rtxStrcat (namebuf, 512, "rejection\n");break;
         case 3: rtxStrcat (namebuf, 512, "waiting\n");break;
         case 4: rtxStrcat (namebuf, 512, "revocationWarning\n");break;
         case 5: rtxStrcat (namebuf, 512, "revocationNotification\n");break;
         case 6: rtxStrcat (namebuf, 512, "keyUpdateWarning\n");break;
         default:
            rtPrintToStreamInteger (pctxt, name, *pvalue);
            printNamebuf = FALSE;
      }

      if (printNamebuf) rtxPrintToStream (pctxt, namebuf);
   }
   return 0;
}

int ASN1C_CMP_PKIStatus::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIStatus (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIStatus::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIFailureInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIFailureInfo* pvalue)
{
   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, name, pvalue->numbits, pvalue->data);
   return 0;
}

int ASN1C_CMP_PKIFailureInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIFailureInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIFailureInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIStatusInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIStatusInfo* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_PKIStatus (pctxt, "status", &pvalue->status);

   if (pvalue->m.statusStringPresent) {
      asn1PrtToStrm_CMP_PKIFreeText (pctxt, "statusString", &pvalue->statusString);
   }

   if (pvalue->m.failInfoPresent) {
      asn1PrtToStrm_CMP_PKIFailureInfo (pctxt, "failInfo", &pvalue->failInfo);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_PKIStatusInfo::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIStatusInfo (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIStatusInfo::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CertOrEncCert (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertOrEncCert* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* certificate */
      case 1:
      {
         asn1PrtToStrm_CMP_CMPCertificate (pctxt, "certificate", pvalue->u.certificate);
         break;
      }
      /* encryptedCert */
      case 2:
      {
         asn1PrtToStrm_CRMF_EncryptedValue (pctxt, "encryptedCert", pvalue->u.encryptedCert);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_CertOrEncCert::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CertOrEncCert (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CertOrEncCert::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CertifiedKeyPair (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertifiedKeyPair* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_CertOrEncCert (pctxt, "certOrEncCert", &pvalue->certOrEncCert);

   if (pvalue->m.privateKeyPresent) {
      asn1PrtToStrm_CRMF_EncryptedValue (pctxt, "privateKey", &pvalue->privateKey);
   }

   if (pvalue->m.publicationInfoPresent) {
      asn1PrtToStrm_CRMF_PKIPublicationInfo (pctxt, "publicationInfo", &pvalue->publicationInfo);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_CertifiedKeyPair::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CertifiedKeyPair (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CertifiedKeyPair::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CertResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertResponse* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "certReqId", pvalue->certReqId);

   asn1PrtToStrm_CMP_PKIStatusInfo (pctxt, "status", &pvalue->status);

   if (pvalue->m.certifiedKeyPairPresent) {
      asn1PrtToStrm_CMP_CertifiedKeyPair (pctxt, "certifiedKeyPair", &pvalue->certifiedKeyPair);
   }

   if (pvalue->m.rspInfoPresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamHexStr (pctxt, "rspInfo", pvalue->rspInfo.numocts, pvalue->rspInfo.data);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_CertResponse::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CertResponse (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CertResponse::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP__SeqOfCMP_CertResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP__SeqOfCMP_CertResponse* pvalue)
{
   ASN1T_CMP_CertResponse* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_CertResponse*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_CertResponse (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP__SeqOfCMP_CertResponse::toStream (const char* name)

{
   asn1PrtToStrm_CMP__SeqOfCMP_CertResponse (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP__SeqOfCMP_CertResponse::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CertRepMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertRepMessage* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.caPubsPresent) {
      asn1PrtToStrm_CMP_CertRepMessage_caPubs (pctxt, "caPubs", &pvalue->caPubs);
   }

   asn1PrtToStrm_CMP__SeqOfCMP_CertResponse (pctxt, "response", &pvalue->response);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_CertRepMessage::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CertRepMessage (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CertRepMessage::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_Challenge (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_Challenge* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.owfPresent) {
      asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "owf", &pvalue->owf);
   }

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "witness", pvalue->witness.numocts, pvalue->witness.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "challenge", pvalue->challenge.numocts, pvalue->challenge.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_Challenge::toStream (const char* name)

{
   asn1PrtToStrm_CMP_Challenge (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_Challenge::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_POPODecKeyChallContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_POPODecKeyChallContent* pvalue)
{
   ASN1T_CMP_Challenge* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_Challenge*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_Challenge (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_POPODecKeyChallContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_POPODecKeyChallContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_POPODecKeyChallContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_POPODecKeyRespContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_POPODecKeyRespContent* pvalue)
{
   OSINT32* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (OSINT32*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamInteger (pctxt, namebuf, *pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_POPODecKeyRespContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_POPODecKeyRespContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_POPODecKeyRespContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_KeyRecRepContent_caCerts (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_KeyRecRepContent_caCerts* pvalue)
{
   ASN1T_CMP_CMPCertificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_CMPCertificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_CMPCertificate (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_KeyRecRepContent_caCerts::toStream (const char* name)

{
   asn1PrtToStrm_CMP_KeyRecRepContent_caCerts (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_KeyRecRepContent_caCerts::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_KeyRecRepContent_keyPairHist (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_KeyRecRepContent_keyPairHist* pvalue)
{
   ASN1T_CMP_CertifiedKeyPair* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_CertifiedKeyPair*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_CertifiedKeyPair (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_KeyRecRepContent_keyPairHist::toStream (const char* name)

{
   asn1PrtToStrm_CMP_KeyRecRepContent_keyPairHist (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_KeyRecRepContent_keyPairHist::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_KeyRecRepContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_KeyRecRepContent* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_PKIStatusInfo (pctxt, "status", &pvalue->status);

   if (pvalue->m.newSigCertPresent) {
      asn1PrtToStrm_CMP_CMPCertificate (pctxt, "newSigCert", &pvalue->newSigCert);
   }

   if (pvalue->m.caCertsPresent) {
      asn1PrtToStrm_CMP_KeyRecRepContent_caCerts (pctxt, "caCerts", &pvalue->caCerts);
   }

   if (pvalue->m.keyPairHistPresent) {
      asn1PrtToStrm_CMP_KeyRecRepContent_keyPairHist (pctxt, "keyPairHist", &pvalue->keyPairHist);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_KeyRecRepContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_KeyRecRepContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_KeyRecRepContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_RevDetails (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevDetails* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CRMF_CertTemplate (pctxt, "certDetails", &pvalue->certDetails);

   if (pvalue->m.crlEntryDetailsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "crlEntryDetails", &pvalue->crlEntryDetails);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_RevDetails::toStream (const char* name)

{
   asn1PrtToStrm_CMP_RevDetails (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_RevDetails::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_RevReqContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevReqContent* pvalue)
{
   ASN1T_CMP_RevDetails* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_RevDetails*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_RevDetails (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_RevReqContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_RevReqContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_RevReqContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_RevRepContent_status (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevRepContent_status* pvalue)
{
   ASN1T_CMP_PKIStatusInfo* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_PKIStatusInfo*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_PKIStatusInfo (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_RevRepContent_status::toStream (const char* name)

{
   asn1PrtToStrm_CMP_RevRepContent_status (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_RevRepContent_status::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_RevRepContent_revCerts (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevRepContent_revCerts* pvalue)
{
   ASN1T_CRMF_CertId* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CRMF_CertId*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CRMF_CertId (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_RevRepContent_revCerts::toStream (const char* name)

{
   asn1PrtToStrm_CMP_RevRepContent_revCerts (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_RevRepContent_revCerts::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_RevRepContent_crls (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevRepContent_crls* pvalue)
{
   ASN1T_EXP_CertificateList* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_CertificateList*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_CertificateList (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_RevRepContent_crls::toStream (const char* name)

{
   asn1PrtToStrm_CMP_RevRepContent_crls (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_RevRepContent_crls::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_RevRepContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevRepContent* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_RevRepContent_status (pctxt, "status", &pvalue->status);

   if (pvalue->m.revCertsPresent) {
      asn1PrtToStrm_CMP_RevRepContent_revCerts (pctxt, "revCerts", &pvalue->revCerts);
   }

   if (pvalue->m.crlsPresent) {
      asn1PrtToStrm_CMP_RevRepContent_crls (pctxt, "crls", &pvalue->crls);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_RevRepContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_RevRepContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_RevRepContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CAKeyUpdAnnContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CAKeyUpdAnnContent* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_CMPCertificate (pctxt, "oldWithNew", &pvalue->oldWithNew);

   asn1PrtToStrm_CMP_CMPCertificate (pctxt, "newWithOld", &pvalue->newWithOld);

   asn1PrtToStrm_CMP_CMPCertificate (pctxt, "newWithNew", &pvalue->newWithNew);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_CAKeyUpdAnnContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CAKeyUpdAnnContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CAKeyUpdAnnContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CertAnnContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertAnnContent* pvalue)
{
   asn1PrtToStrm_CMP_CMPCertificate (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMP_CertAnnContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CertAnnContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CertAnnContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_RevAnnContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_RevAnnContent* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_PKIStatus (pctxt, "status", &pvalue->status);

   asn1PrtToStrm_CRMF_CertId (pctxt, "certId", &pvalue->certId);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "willBeRevokedAt", pvalue->willBeRevokedAt);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamCharStr (pctxt, "badSinceDate", pvalue->badSinceDate);

   if (pvalue->m.crlDetailsPresent) {
      asn1PrtToStrm_EXP_Extensions (pctxt, "crlDetails", &pvalue->crlDetails);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_RevAnnContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_RevAnnContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_RevAnnContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CRLAnnContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CRLAnnContent* pvalue)
{
   ASN1T_EXP_CertificateList* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_EXP_CertificateList*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_EXP_CertificateList (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_CRLAnnContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CRLAnnContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CRLAnnContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIConfirmContent_ (OSCTXT *pctxt, 
   const char* name, const void* pvalue)
{
   OS_UNUSED_ARG (pvalue);
   rtPrintToStreamIndent (pctxt);
   rtxPrintToStreamNull (pctxt, name);
   return 0;
}

int ASN1C_CMP_PKIConfirmContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIConfirmContent (getCtxtPtr(), name);
   return 0;
}

int ASN1C_CMP_PKIConfirmContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_GenMsgContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_GenMsgContent* pvalue)
{
   ASN1T_CMP_InfoTypeAndValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_InfoTypeAndValue (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_GenMsgContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_GenMsgContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_GenMsgContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_GenRepContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_GenRepContent* pvalue)
{
   ASN1T_CMP_InfoTypeAndValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_InfoTypeAndValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_InfoTypeAndValue (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_GenRepContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_GenRepContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_GenRepContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_ErrorMsgContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_ErrorMsgContent* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_PKIStatusInfo (pctxt, "pKIStatusInfo", &pvalue->pKIStatusInfo);

   if (pvalue->m.errorCodePresent) {
      rtPrintToStreamIndent (pctxt);
      rtPrintToStreamInteger (pctxt, "errorCode", pvalue->errorCode);
   }

   if (pvalue->m.errorDetailsPresent) {
      asn1PrtToStrm_CMP_PKIFreeText (pctxt, "errorDetails", &pvalue->errorDetails);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_ErrorMsgContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_ErrorMsgContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_ErrorMsgContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CertStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertStatus* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "certHash", pvalue->certHash.numocts, pvalue->certHash.data);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "certReqId", pvalue->certReqId);

   if (pvalue->m.statusInfoPresent) {
      asn1PrtToStrm_CMP_PKIStatusInfo (pctxt, "statusInfo", &pvalue->statusInfo);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_CertStatus::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CertStatus (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CertStatus::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_CertConfirmContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_CertConfirmContent* pvalue)
{
   ASN1T_CMP_CertStatus* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_CertStatus*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_CertStatus (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_CertConfirmContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_CertConfirmContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_CertConfirmContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PollReqContent_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PollReqContent_element* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "certReqId", pvalue->certReqId);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_PollReqContent_element::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PollReqContent_element (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PollReqContent_element::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PollReqContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PollReqContent* pvalue)
{
   ASN1T_CMP_PollReqContent_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_PollReqContent_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_PollReqContent_element (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_PollReqContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PollReqContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PollReqContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PollRepContent_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PollRepContent_element* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "certReqId", pvalue->certReqId);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "checkAfter", pvalue->checkAfter);

   if (pvalue->m.reasonPresent) {
      asn1PrtToStrm_CMP_PKIFreeText (pctxt, "reason", &pvalue->reason);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_PollRepContent_element::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PollRepContent_element (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PollRepContent_element::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PollRepContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PollRepContent* pvalue)
{
   ASN1T_CMP_PollRepContent_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_PollRepContent_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_PollRepContent_element (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_PollRepContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PollRepContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PollRepContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIBody (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIBody* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   switch (pvalue->t)
   {
      /* ir */
      case 1:
      {
         asn1PrtToStrm_CRMF_CertReqMessages (pctxt, "ir", pvalue->u.ir);
         break;
      }
      /* ip */
      case 2:
      {
         asn1PrtToStrm_CMP_CertRepMessage (pctxt, "ip", pvalue->u.ip);
         break;
      }
      /* cr */
      case 3:
      {
         asn1PrtToStrm_CRMF_CertReqMessages (pctxt, "cr", pvalue->u.cr);
         break;
      }
      /* cp */
      case 4:
      {
         asn1PrtToStrm_CMP_CertRepMessage (pctxt, "cp", pvalue->u.cp);
         break;
      }
      /* p10cr */
      case 5:
      {
         asn1PrtToStrm_PKCS10_CertificationRequest (pctxt, "p10cr", pvalue->u.p10cr);
         break;
      }
      /* popdecc */
      case 6:
      {
         asn1PrtToStrm_CMP_POPODecKeyChallContent (pctxt, "popdecc", pvalue->u.popdecc);
         break;
      }
      /* popdecr */
      case 7:
      {
         asn1PrtToStrm_CMP_POPODecKeyRespContent (pctxt, "popdecr", pvalue->u.popdecr);
         break;
      }
      /* kur */
      case 8:
      {
         asn1PrtToStrm_CRMF_CertReqMessages (pctxt, "kur", pvalue->u.kur);
         break;
      }
      /* kup */
      case 9:
      {
         asn1PrtToStrm_CMP_CertRepMessage (pctxt, "kup", pvalue->u.kup);
         break;
      }
      /* krr */
      case 10:
      {
         asn1PrtToStrm_CRMF_CertReqMessages (pctxt, "krr", pvalue->u.krr);
         break;
      }
      /* krp */
      case 11:
      {
         asn1PrtToStrm_CMP_KeyRecRepContent (pctxt, "krp", pvalue->u.krp);
         break;
      }
      /* rr */
      case 12:
      {
         asn1PrtToStrm_CMP_RevReqContent (pctxt, "rr", pvalue->u.rr);
         break;
      }
      /* rp */
      case 13:
      {
         asn1PrtToStrm_CMP_RevRepContent (pctxt, "rp", pvalue->u.rp);
         break;
      }
      /* ccr */
      case 14:
      {
         asn1PrtToStrm_CRMF_CertReqMessages (pctxt, "ccr", pvalue->u.ccr);
         break;
      }
      /* ccp */
      case 15:
      {
         asn1PrtToStrm_CMP_CertRepMessage (pctxt, "ccp", pvalue->u.ccp);
         break;
      }
      /* ckuann */
      case 16:
      {
         asn1PrtToStrm_CMP_CAKeyUpdAnnContent (pctxt, "ckuann", pvalue->u.ckuann);
         break;
      }
      /* cann */
      case 17:
      {
         asn1PrtToStrm_CMP_CertAnnContent (pctxt, "cann", pvalue->u.cann);
         break;
      }
      /* rann */
      case 18:
      {
         asn1PrtToStrm_CMP_RevAnnContent (pctxt, "rann", pvalue->u.rann);
         break;
      }
      /* crlann */
      case 19:
      {
         asn1PrtToStrm_CMP_CRLAnnContent (pctxt, "crlann", pvalue->u.crlann);
         break;
      }
      /* pkiconf */
      case 20:
      {
         break;
      }
      /* nested */
      case 21:
      {
         asn1PrtToStrm_CMP_NestedMessageContent (pctxt, "nested", (ASN1T_CMP_NestedMessageContent*)pvalue->u.nested);
         break;
      }
      /* genm */
      case 22:
      {
         asn1PrtToStrm_CMP_GenMsgContent (pctxt, "genm", pvalue->u.genm);
         break;
      }
      /* genp */
      case 23:
      {
         asn1PrtToStrm_CMP_GenRepContent (pctxt, "genp", pvalue->u.genp);
         break;
      }
      /* error */
      case 24:
      {
         asn1PrtToStrm_CMP_ErrorMsgContent (pctxt, "error", pvalue->u.error);
         break;
      }
      /* certConf */
      case 25:
      {
         asn1PrtToStrm_CMP_CertConfirmContent (pctxt, "certConf", pvalue->u.certConf);
         break;
      }
      /* pollReq */
      case 26:
      {
         asn1PrtToStrm_CMP_PollReqContent (pctxt, "pollReq", pvalue->u.pollReq);
         break;
      }
      /* pollRep */
      case 27:
      {
         asn1PrtToStrm_CMP_PollRepContent (pctxt, "pollRep", pvalue->u.pollRep);
         break;
      }
      /* bcr */
      case 28:
      {
         asn1PrtToStrm_CRMF_CertReqMessages (pctxt, "bcr", pvalue->u.bcr);
         break;
      }
      default:;
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_PKIBody::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIBody (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIBody::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIMessage_extraCerts (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIMessage_extraCerts* pvalue)
{
   ASN1T_CMP_CMPCertificate* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_CMPCertificate*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_CMPCertificate (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_PKIMessage_extraCerts::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIMessage_extraCerts (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIMessage_extraCerts::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIMessage* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_PKIHeader (pctxt, "header", &pvalue->header);

   asn1PrtToStrm_CMP_PKIBody (pctxt, "body", &pvalue->body);

   if (pvalue->m.protectionPresent) {
      asn1PrtToStrm_CMP_PKIProtection (pctxt, "protection", &pvalue->protection);
   }

   if (pvalue->m.extraCertsPresent) {
      asn1PrtToStrm_CMP_PKIMessage_extraCerts (pctxt, "extraCerts", &pvalue->extraCerts);
   }

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_PKIMessage::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIMessage (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIMessage::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PKIMessages (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PKIMessages* pvalue)
{
   ASN1T_CMP_PKIMessage* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512], numbuf[32];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      pdata0 = (ASN1T_CMP_PKIMessage*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1PrtToStrm_CMP_PKIMessage (pctxt, namebuf, pdata0);
      pnode = pnode->next;
   }
   return 0;
}

int ASN1C_CMP_PKIMessages::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PKIMessages (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PKIMessages::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_NestedMessageContent (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_NestedMessageContent* pvalue)
{
   asn1PrtToStrm_CMP_PKIMessages (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMP_NestedMessageContent::toStream (const char* name)

{
   asn1PrtToStrm_CMP_NestedMessageContent (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_NestedMessageContent::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_OOBCert (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_OOBCert* pvalue)
{
   asn1PrtToStrm_CMP_CMPCertificate (pctxt, name, pvalue);
   return 0;
}

int ASN1C_CMP_OOBCert::toStream (const char* name)

{
   asn1PrtToStrm_CMP_OOBCert (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_OOBCert::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_ProtectedPart (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_ProtectedPart* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_CMP_PKIHeader (pctxt, "header", &pvalue->header);

   asn1PrtToStrm_CMP_PKIBody (pctxt, "body", &pvalue->body);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_ProtectedPart::toStream (const char* name)

{
   asn1PrtToStrm_CMP_ProtectedPart (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_ProtectedPart::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_PBMParameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_PBMParameter* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamHexStr (pctxt, "salt", pvalue->salt.numocts, pvalue->salt.data);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "owf", &pvalue->owf);

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamInteger (pctxt, "iterationCount", pvalue->iterationCount);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "mac", &pvalue->mac);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_PBMParameter::toStream (const char* name)

{
   asn1PrtToStrm_CMP_PBMParameter (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_PBMParameter::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_DHBMParameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_DHBMParameter* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "owf", &pvalue->owf);

   asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "mac", &pvalue->mac);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_DHBMParameter::toStream (const char* name)

{
   asn1PrtToStrm_CMP_DHBMParameter (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_DHBMParameter::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

int asn1PrtToStrm_CMP_OOBCertHash (OSCTXT *pctxt, 
   const char* name, const ASN1T_CMP_OOBCertHash* pvalue)
{
   rtPrintToStreamOpenBrace (pctxt, name);

   if (pvalue->m.hashAlgPresent) {
      asn1PrtToStrm_EXP_AlgorithmIdentifier (pctxt, "hashAlg", &pvalue->hashAlg);
   }

   if (pvalue->m.certIdPresent) {
      asn1PrtToStrm_CRMF_CertId (pctxt, "certId", &pvalue->certId);
   }

   rtPrintToStreamIndent (pctxt);
   rtPrintToStreamBitStrBraceText (pctxt, "hashVal", pvalue->hashVal.numbits, pvalue->hashVal.data);

   rtPrintToStreamCloseBrace (pctxt);
   return 0;
}

int ASN1C_CMP_OOBCertHash::toStream (const char* name)

{
   asn1PrtToStrm_CMP_OOBCertHash (getCtxtPtr(), name, &msgData);
   return 0;
}

int ASN1C_CMP_OOBCertHash::setPrintStream
(rtxPrintCallback strmCallback, void * pStrmInfo)

{
   return rtxSetPrintStream (getCtxtPtr(), strmCallback, pStrmInfo);
}

