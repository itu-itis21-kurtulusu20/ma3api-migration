/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "pkixtsp.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_TSP_BIGINTEGER 
   (const char* name, const ASN1T_TSP_BIGINTEGER* pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, *pvalue);
}

void ASN1C_TSP_BIGINTEGER::Print (const char* name)
{
   asn1Print_TSP_BIGINTEGER (name, &msgData);
}

void asn1Print_TSP_TSAPolicyId 
   (const char* name, const ASN1T_TSP_TSAPolicyId* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_TSP_TSAPolicyId::Print (const char* name)
{
   asn1Print_TSP_TSAPolicyId (name, &msgData);
}

void asn1Print_TSP_PKIStatus 
   (const char* name, const ASN1T_TSP_PKIStatus* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 0: printf ("%s = granted\n", name); break;
      case 1: printf ("%s = grantedWithMods\n", name); break;
      case 2: printf ("%s = rejection\n", name); break;
      case 3: printf ("%s = waiting\n", name); break;
      case 4: printf ("%s = revocationWarning\n", name); break;
      case 5: printf ("%s = revocationNotification\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_TSP_PKIStatus::Print (const char* name)
{
   asn1Print_TSP_PKIStatus (name, &msgData);
}

void asn1Print_TSP_PKIFailureInfo 
   (const char* name, const ASN1T_TSP_PKIFailureInfo* pvalue)
{
   rtxPrintIndent ();
   rtPrintBitStrBraceText (name, pvalue->numbits, pvalue->data);
}

void ASN1C_TSP_PKIFailureInfo::Print (const char* name)
{
   asn1Print_TSP_PKIFailureInfo (name, &msgData);
}

void asn1Print_TSP_TimeStampToken 
   (const char* name, const ASN1T_TSP_TimeStampToken* pvalue)
{
   asn1Print_CMS_ContentInfo (name, pvalue);
}

void ASN1C_TSP_TimeStampToken::Print (const char* name)
{
   asn1Print_TSP_TimeStampToken (name, &msgData);
}

void asn1Print_TSP_TimeStampReq_version 
   (const char* name, const ASN1T_TSP_TimeStampReq_version* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 1: printf ("%s = v1\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_TSP_TimeStampReq_version::Print (const char* name)
{
   asn1Print_TSP_TimeStampReq_version (name, &msgData);
}

void asn1Print_TSP_TSTInfo_version 
   (const char* name, const ASN1T_TSP_TSTInfo_version* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 1: printf ("%s = v1\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_TSP_TSTInfo_version::Print (const char* name)
{
   asn1Print_TSP_TSTInfo_version (name, &msgData);
}

void asn1Print_TSP_MessageImprint 
   (const char* name, const ASN1T_TSP_MessageImprint* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("hashAlgorithm", &pvalue->hashAlgorithm
      );

   rtxPrintIndent ();
   rtxPrintHexStr ("hashedMessage", pvalue->hashedMessage.numocts, pvalue->hashedMessage.data);

   rtxPrintCloseBrace ();
}

void ASN1C_TSP_MessageImprint::Print (const char* name)
{
   asn1Print_TSP_MessageImprint (name, &msgData);
}

void asn1Print_TSP_TimeStampReq 
   (const char* name, const ASN1T_TSP_TimeStampReq* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_TSP_TimeStampReq_version ("version", &pvalue->version);

   asn1Print_TSP_MessageImprint ("messageImprint", &pvalue->messageImprint);

   if (pvalue->m.reqPolicyPresent) {
      asn1Print_TSP_TSAPolicyId ("reqPolicy", &pvalue->reqPolicy);
   }

   if (pvalue->m.noncePresent) {
      asn1Print_TSP_BIGINTEGER ("nonce", &pvalue->nonce);
   }

   rtxPrintIndent ();
   rtxPrintBoolean ("certReq", pvalue->certReq);

   if (pvalue->m.extensionsPresent) {
      asn1Print_EXP_Extensions ("extensions", &pvalue->extensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_TSP_TimeStampReq::Print (const char* name)
{
   asn1Print_TSP_TimeStampReq (name, &msgData);
}

void asn1Print_TSP_PKIStatusInfo 
   (const char* name, const ASN1T_TSP_PKIStatusInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_TSP_PKIStatus ("status", &pvalue->status);

   if (pvalue->m.statusStringPresent) {
      asn1Print_CMP_PKIFreeText ("statusString", &pvalue->statusString);
   }

   if (pvalue->m.failInfoPresent) {
      asn1Print_TSP_PKIFailureInfo ("failInfo", &pvalue->failInfo);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_TSP_PKIStatusInfo::Print (const char* name)
{
   asn1Print_TSP_PKIStatusInfo (name, &msgData);
}

void asn1Print_TSP_TimeStampResp 
   (const char* name, const ASN1T_TSP_TimeStampResp* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_TSP_PKIStatusInfo ("status", &pvalue->status);

   if (pvalue->m.timeStampTokenPresent) {
      asn1Print_TSP_TimeStampToken ("timeStampToken", &pvalue->timeStampToken
         );
   }

   rtxPrintCloseBrace ();
}

void ASN1C_TSP_TimeStampResp::Print (const char* name)
{
   asn1Print_TSP_TimeStampResp (name, &msgData);
}

void asn1Print_TSP_Accuracy 
   (const char* name, const ASN1T_TSP_Accuracy* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.secondsPresent) {
      rtxPrintIndent ();
      rtxPrintInteger ("seconds", pvalue->seconds);
   }

   if (pvalue->m.millisPresent) {
      rtxPrintIndent ();
      rtxPrintUnsigned ("millis", pvalue->millis);
   }

   if (pvalue->m.microsPresent) {
      rtxPrintIndent ();
      rtxPrintUnsigned ("micros", pvalue->micros);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_TSP_Accuracy::Print (const char* name)
{
   asn1Print_TSP_Accuracy (name, &msgData);
}

void asn1Print_TSP_TSTInfo (const char* name, const ASN1T_TSP_TSTInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_TSP_TSTInfo_version ("version", &pvalue->version);

   asn1Print_TSP_TSAPolicyId ("policy", &pvalue->policy);

   asn1Print_TSP_MessageImprint ("messageImprint", &pvalue->messageImprint);

   asn1Print_TSP_BIGINTEGER ("serialNumber", &pvalue->serialNumber);

   rtxPrintIndent ();
   rtxPrintCharStr ("genTime", pvalue->genTime);

   if (pvalue->m.accuracyPresent) {
      asn1Print_TSP_Accuracy ("accuracy", &pvalue->accuracy);
   }

   rtxPrintIndent ();
   rtxPrintBoolean ("ordering", pvalue->ordering);

   if (pvalue->m.noncePresent) {
      asn1Print_TSP_BIGINTEGER ("nonce", &pvalue->nonce);
   }

   if (pvalue->m.tsaPresent) {
      asn1Print_IMP_GeneralName ("tsa", &pvalue->tsa);
   }

   if (pvalue->m.extensionsPresent) {
      asn1Print_EXP_Extensions ("extensions", &pvalue->extensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_TSP_TSTInfo::Print (const char* name)
{
   asn1Print_TSP_TSTInfo (name, &msgData);
}

void asn1Print_TSP_ESYAReqEx 
   (const char* name, const ASN1T_TSP_ESYAReqEx* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintInteger ("userid", pvalue->userid);

   rtxPrintIndent ();
   rtxPrintHexStr ("salt", pvalue->salt.numocts, pvalue->salt.data);

   rtxPrintIndent ();
   rtxPrintInteger ("iterationCount", pvalue->iterationCount);

   rtxPrintIndent ();
   rtxPrintHexStr ("iv", pvalue->iv.numocts, pvalue->iv.data);

   rtxPrintIndent ();
   rtxPrintHexStr ("encryptedMessageImprint", pvalue->encryptedMessageImprint.numocts, pvalue->encryptedMessageImprint.data);

   rtxPrintCloseBrace ();
}

void ASN1C_TSP_ESYAReqEx::Print (const char* name)
{
   asn1Print_TSP_ESYAReqEx (name, &msgData);
}

