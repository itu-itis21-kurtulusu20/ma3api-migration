/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "attrcert.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_ATTRCERT_ClassList (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ClassList* pSrcValue, ASN1T_ATTRCERT_ClassList* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->numbits = pSrcValue->numbits;
   if (pSrcValue->numbits > 0) {
      OSCRTLMEMCPY (pDstValue->data, pSrcValue->data, (pSrcValue->
         numbits+7)/8);
   }
}

ASN1C_ATTRCERT_ClassList::ASN1C_ATTRCERT_ClassList (ASN1C_ATTRCERT_ClassList& original) :
   ASN1CBitStr (original), msgData (original.getCopy ())
{
   ASN1CBitStr::init (msgData.data, msgData.numbits, 8);
}

ASN1T_ATTRCERT_ClassList::ASN1T_ATTRCERT_ClassList (ASN1C_ATTRCERT_ClassList& original)
{
   original.getCopy (this);
}

ASN1C_ATTRCERT_ClassList& ASN1C_ATTRCERT_ClassList::operator= (ASN1C_ATTRCERT_ClassList& srcData)
{
   srcData.getCopy (&msgData);
   return *this;
}

ASN1T_ATTRCERT_ClassList& ASN1C_ATTRCERT_ClassList::getCopy (ASN1T_ATTRCERT_ClassList* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_ClassList);
      new (pDstData) ASN1T_ATTRCERT_ClassList;
   }

   asn1Copy_ATTRCERT_ClassList (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_ATTRCERT_ClassList* ASN1C_ATTRCERT_ClassList::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_ClassList* pDstData = new ASN1T_ATTRCERT_ClassList;

   asn1Copy_ATTRCERT_ClassList (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_ATTRCERT_IssuerSerial (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IssuerSerial* pSrcValue, ASN1T_ATTRCERT_IssuerSerial*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->issuer, &pDstValue->issuer);

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->serial, &pDstValue->serial);

   if (pSrcValue->m.issuerUIDPresent) {
      asn1Copy_EXP_UniqueIdentifier (pctxt, &pSrcValue->issuerUID, &pDstValue->issuerUID);
   }

}

ASN1C_ATTRCERT_IssuerSerial::ASN1C_ATTRCERT_IssuerSerial (ASN1C_ATTRCERT_IssuerSerial& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_IssuerSerial::ASN1T_ATTRCERT_IssuerSerial (ASN1C_ATTRCERT_IssuerSerial& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_IssuerSerial& ASN1C_ATTRCERT_IssuerSerial::getCopy (ASN1T_ATTRCERT_IssuerSerial* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_IssuerSerial);
      new (pDstData) ASN1T_ATTRCERT_IssuerSerial;
   }

   asn1Copy_ATTRCERT_IssuerSerial (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_IssuerSerial* ASN1C_ATTRCERT_IssuerSerial::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_IssuerSerial* pDstData = new ASN1T_ATTRCERT_IssuerSerial;

   asn1Copy_ATTRCERT_IssuerSerial (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_ObjectDigestInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ObjectDigestInfo* pSrcValue, ASN1T_ATTRCERT_ObjectDigestInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->digestedObjectType = pSrcValue->digestedObjectType;

   if (pSrcValue->m.otherObjectTypeIDPresent) {
      rtCopyOID ((ASN1OBJID*)&pSrcValue->otherObjectTypeID, (ASN1OBJID*)&pDstValue->otherObjectTypeID);
   }

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->digestAlgorithm, &pDstValue->digestAlgorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->objectDigest, &pDstValue->objectDigest
      );

}

ASN1C_ATTRCERT_ObjectDigestInfo::ASN1C_ATTRCERT_ObjectDigestInfo (ASN1C_ATTRCERT_ObjectDigestInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_ObjectDigestInfo::ASN1T_ATTRCERT_ObjectDigestInfo (ASN1C_ATTRCERT_ObjectDigestInfo& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_ObjectDigestInfo& ASN1C_ATTRCERT_ObjectDigestInfo::getCopy (ASN1T_ATTRCERT_ObjectDigestInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_ObjectDigestInfo);
      new (pDstData) ASN1T_ATTRCERT_ObjectDigestInfo;
   }

   asn1Copy_ATTRCERT_ObjectDigestInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_ObjectDigestInfo* ASN1C_ATTRCERT_ObjectDigestInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_ObjectDigestInfo* pDstData = new ASN1T_ATTRCERT_ObjectDigestInfo;

   asn1Copy_ATTRCERT_ObjectDigestInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_Holder (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Holder* pSrcValue, ASN1T_ATTRCERT_Holder* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.baseCertificateIDPresent) {
      asn1Copy_ATTRCERT_IssuerSerial (pctxt, &pSrcValue->baseCertificateID, &pDstValue->baseCertificateID);
   }

   if (pSrcValue->m.entityNamePresent) {
      asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->entityName, &pDstValue->entityName);
   }

   if (pSrcValue->m.objectDigestInfoPresent) {
      asn1Copy_ATTRCERT_ObjectDigestInfo (pctxt, &pSrcValue->objectDigestInfo, &pDstValue->objectDigestInfo);
   }

}

ASN1C_ATTRCERT_Holder::ASN1C_ATTRCERT_Holder (ASN1C_ATTRCERT_Holder& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_Holder::ASN1T_ATTRCERT_Holder (ASN1C_ATTRCERT_Holder& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_Holder& ASN1C_ATTRCERT_Holder::getCopy (ASN1T_ATTRCERT_Holder* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_Holder);
      new (pDstData) ASN1T_ATTRCERT_Holder;
   }

   asn1Copy_ATTRCERT_Holder (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_Holder* ASN1C_ATTRCERT_Holder::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_Holder* pDstData = new ASN1T_ATTRCERT_Holder;

   asn1Copy_ATTRCERT_Holder (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_V2Form (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_V2Form* pSrcValue, ASN1T_ATTRCERT_V2Form* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.issuerNamePresent) {
      asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->issuerName, &pDstValue->issuerName);
   }

   if (pSrcValue->m.baseCertificateIDPresent) {
      asn1Copy_ATTRCERT_IssuerSerial (pctxt, &pSrcValue->baseCertificateID, &pDstValue->baseCertificateID);
   }

   if (pSrcValue->m.objectDigestInfoPresent) {
      asn1Copy_ATTRCERT_ObjectDigestInfo (pctxt, &pSrcValue->objectDigestInfo, &pDstValue->objectDigestInfo);
   }

}

ASN1C_ATTRCERT_V2Form::ASN1C_ATTRCERT_V2Form (ASN1C_ATTRCERT_V2Form& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_V2Form::ASN1T_ATTRCERT_V2Form (ASN1C_ATTRCERT_V2Form& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_V2Form& ASN1C_ATTRCERT_V2Form::getCopy (ASN1T_ATTRCERT_V2Form* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_V2Form);
      new (pDstData) ASN1T_ATTRCERT_V2Form;
   }

   asn1Copy_ATTRCERT_V2Form (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_V2Form* ASN1C_ATTRCERT_V2Form::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_V2Form* pDstData = new ASN1T_ATTRCERT_V2Form;

   asn1Copy_ATTRCERT_V2Form (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AttCertIssuer (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttCertIssuer* pSrcValue, ASN1T_ATTRCERT_AttCertIssuer*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* v1Form */
      case 1:
         pDstValue->u.v1Form = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralNames);
         new (pDstValue->u.v1Form) ASN1T_IMP_GeneralNames;
         asn1Copy_IMP_GeneralNames (pctxt, pSrcValue->u.v1Form, pDstValue->u.v1Form);
         break;

      /* v2Form */
      case 2:
         pDstValue->u.v2Form = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_V2Form);
         new (pDstValue->u.v2Form) ASN1T_ATTRCERT_V2Form;
         asn1Copy_ATTRCERT_V2Form (pctxt, pSrcValue->u.v2Form, pDstValue->u.v2Form);
         break;

   }
}

ASN1C_ATTRCERT_AttCertIssuer::ASN1C_ATTRCERT_AttCertIssuer (ASN1C_ATTRCERT_AttCertIssuer& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_AttCertIssuer::ASN1T_ATTRCERT_AttCertIssuer (ASN1C_ATTRCERT_AttCertIssuer& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_AttCertIssuer& ASN1C_ATTRCERT_AttCertIssuer::getCopy (ASN1T_ATTRCERT_AttCertIssuer* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttCertIssuer);
      new (pDstData) ASN1T_ATTRCERT_AttCertIssuer;
   }

   asn1Copy_ATTRCERT_AttCertIssuer (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AttCertIssuer* ASN1C_ATTRCERT_AttCertIssuer::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AttCertIssuer* pDstData = new ASN1T_ATTRCERT_AttCertIssuer;

   asn1Copy_ATTRCERT_AttCertIssuer (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AttCertValidityPeriod (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pSrcValue, 
   ASN1T_ATTRCERT_AttCertValidityPeriod* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->notBeforeTime, (char **)&pDstValue->notBeforeTime);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->notAfterTime, (char **)&pDstValue->notAfterTime);

}

ASN1C_ATTRCERT_AttCertValidityPeriod::ASN1C_ATTRCERT_AttCertValidityPeriod (ASN1C_ATTRCERT_AttCertValidityPeriod& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_AttCertValidityPeriod::ASN1T_ATTRCERT_AttCertValidityPeriod (ASN1C_ATTRCERT_AttCertValidityPeriod& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_AttCertValidityPeriod& ASN1C_ATTRCERT_AttCertValidityPeriod::getCopy (ASN1T_ATTRCERT_AttCertValidityPeriod* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttCertValidityPeriod);
      new (pDstData) ASN1T_ATTRCERT_AttCertValidityPeriod;
   }

   asn1Copy_ATTRCERT_AttCertValidityPeriod (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AttCertValidityPeriod* ASN1C_ATTRCERT_AttCertValidityPeriod::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AttCertValidityPeriod* pDstData = new ASN1T_ATTRCERT_AttCertValidityPeriod;

   asn1Copy_ATTRCERT_AttCertValidityPeriod (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT__SeqOfATTRCERT_Attribute (OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pSrcValue, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Attribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Attribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Attribute);
         pSrcData = (ASN1T_EXP_Attribute*) pnode->data;

         asn1Copy_EXP_Attribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute::ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute (ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute*)pList)
{
}

ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute& ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute::operator= (ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute& srcData)
{
   clear ();
   asn1Copy_ATTRCERT__SeqOfATTRCERT_Attribute (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute& ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute::getCopy (ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute);
      new (pDstData) ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute;
   }

   asn1Copy_ATTRCERT__SeqOfATTRCERT_Attribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* ASN1C_ATTRCERT__SeqOfATTRCERT_Attribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute* pDstData = new ASN1T_ATTRCERT__SeqOfATTRCERT_Attribute;

   asn1Copy_ATTRCERT__SeqOfATTRCERT_Attribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AttributeCertificateInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_ATTRCERT_Holder (pctxt, &pSrcValue->holder, &pDstValue->holder);

   asn1Copy_ATTRCERT_AttCertIssuer (pctxt, &pSrcValue->issuer, &pDstValue->issuer);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->serialNumber, &pDstValue->serialNumber);

   asn1Copy_ATTRCERT_AttCertValidityPeriod (pctxt, &pSrcValue->attrCertValidityPeriod, &pDstValue->attrCertValidityPeriod);

   asn1Copy_ATTRCERT__SeqOfATTRCERT_Attribute (pctxt, &pSrcValue->attributes, &pDstValue->attributes);

   if (pSrcValue->m.issuerUniqueIDPresent) {
      asn1Copy_EXP_UniqueIdentifier (pctxt, &pSrcValue->issuerUniqueID, &pDstValue->issuerUniqueID);
   }

   if (pSrcValue->m.extensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->extensions, &pDstValue->extensions);
   }

}

ASN1C_ATTRCERT_AttributeCertificateInfo::ASN1C_ATTRCERT_AttributeCertificateInfo (ASN1C_ATTRCERT_AttributeCertificateInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_AttributeCertificateInfo::ASN1T_ATTRCERT_AttributeCertificateInfo (ASN1C_ATTRCERT_AttributeCertificateInfo& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_AttributeCertificateInfo& ASN1C_ATTRCERT_AttributeCertificateInfo::getCopy (ASN1T_ATTRCERT_AttributeCertificateInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttributeCertificateInfo);
      new (pDstData) ASN1T_ATTRCERT_AttributeCertificateInfo;
   }

   asn1Copy_ATTRCERT_AttributeCertificateInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AttributeCertificateInfo* ASN1C_ATTRCERT_AttributeCertificateInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AttributeCertificateInfo* pDstData = new ASN1T_ATTRCERT_AttributeCertificateInfo;

   asn1Copy_ATTRCERT_AttributeCertificateInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AttributeCertificate (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificate* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificate* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ATTRCERT_AttributeCertificateInfo (pctxt, &pSrcValue->acinfo, &pDstValue->acinfo);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->signatureValue, &pDstValue->
      signatureValue);

}

ASN1C_ATTRCERT_AttributeCertificate::ASN1C_ATTRCERT_AttributeCertificate (ASN1C_ATTRCERT_AttributeCertificate& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_AttributeCertificate::ASN1T_ATTRCERT_AttributeCertificate (ASN1C_ATTRCERT_AttributeCertificate& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_AttributeCertificate& ASN1C_ATTRCERT_AttributeCertificate::getCopy (ASN1T_ATTRCERT_AttributeCertificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttributeCertificate);
      new (pDstData) ASN1T_ATTRCERT_AttributeCertificate;
   }

   asn1Copy_ATTRCERT_AttributeCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AttributeCertificate* ASN1C_ATTRCERT_AttributeCertificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AttributeCertificate* pDstData = new ASN1T_ATTRCERT_AttributeCertificate;

   asn1Copy_ATTRCERT_AttributeCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_TargetCert (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_TargetCert* pSrcValue, ASN1T_ATTRCERT_TargetCert* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_ATTRCERT_IssuerSerial (pctxt, &pSrcValue->targetCertificate, &pDstValue->targetCertificate);

   if (pSrcValue->m.targetNamePresent) {
      asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->targetName, &pDstValue->targetName);
   }

   if (pSrcValue->m.certDigestInfoPresent) {
      asn1Copy_ATTRCERT_ObjectDigestInfo (pctxt, &pSrcValue->certDigestInfo, &pDstValue->certDigestInfo);
   }

}

ASN1C_ATTRCERT_TargetCert::ASN1C_ATTRCERT_TargetCert (ASN1C_ATTRCERT_TargetCert& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_TargetCert::ASN1T_ATTRCERT_TargetCert (ASN1C_ATTRCERT_TargetCert& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_TargetCert& ASN1C_ATTRCERT_TargetCert::getCopy (ASN1T_ATTRCERT_TargetCert* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_TargetCert);
      new (pDstData) ASN1T_ATTRCERT_TargetCert;
   }

   asn1Copy_ATTRCERT_TargetCert (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_TargetCert* ASN1C_ATTRCERT_TargetCert::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_TargetCert* pDstData = new ASN1T_ATTRCERT_TargetCert;

   asn1Copy_ATTRCERT_TargetCert (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_Target (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Target* pSrcValue, ASN1T_ATTRCERT_Target* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* targetName */
      case 1:
         pDstValue->u.targetName = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralName);
         new (pDstValue->u.targetName) ASN1T_IMP_GeneralName;
         asn1Copy_IMP_GeneralName (pctxt, pSrcValue->u.targetName, pDstValue->u.targetName);
         break;

      /* targetGroup */
      case 2:
         pDstValue->u.targetGroup = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralName);
         new (pDstValue->u.targetGroup) ASN1T_IMP_GeneralName;
         asn1Copy_IMP_GeneralName (pctxt, pSrcValue->u.targetGroup, pDstValue->u.targetGroup);
         break;

      /* targetCert */
      case 3:
         pDstValue->u.targetCert = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_TargetCert);
         new (pDstValue->u.targetCert) ASN1T_ATTRCERT_TargetCert;
         asn1Copy_ATTRCERT_TargetCert (pctxt, pSrcValue->u.targetCert, pDstValue->u.targetCert);
         break;

   }
}

ASN1C_ATTRCERT_Target::ASN1C_ATTRCERT_Target (ASN1C_ATTRCERT_Target& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_Target::ASN1T_ATTRCERT_Target (ASN1C_ATTRCERT_Target& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_Target& ASN1C_ATTRCERT_Target::getCopy (ASN1T_ATTRCERT_Target* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_Target);
      new (pDstData) ASN1T_ATTRCERT_Target;
   }

   asn1Copy_ATTRCERT_Target (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_Target* ASN1C_ATTRCERT_Target::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_Target* pDstData = new ASN1T_ATTRCERT_Target;

   asn1Copy_ATTRCERT_Target (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_Targets (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Targets* pSrcValue, ASN1T_ATTRCERT_Targets* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ATTRCERT_Target* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ATTRCERT_Target* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ATTRCERT_Target);
         pSrcData = (ASN1T_ATTRCERT_Target*) pnode->data;

         asn1Copy_ATTRCERT_Target (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ATTRCERT_Targets::ASN1C_ATTRCERT_Targets (ASN1C_ATTRCERT_Targets& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ATTRCERT_Targets*)pList)
{
}

ASN1C_ATTRCERT_Targets& ASN1C_ATTRCERT_Targets::operator= (ASN1C_ATTRCERT_Targets& srcData)
{
   clear ();
   asn1Copy_ATTRCERT_Targets (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ATTRCERT_Targets& ASN1C_ATTRCERT_Targets::getCopy (ASN1T_ATTRCERT_Targets* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_Targets);
      new (pDstData) ASN1T_ATTRCERT_Targets;
   }

   asn1Copy_ATTRCERT_Targets (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_Targets* ASN1C_ATTRCERT_Targets::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_Targets* pDstData = new ASN1T_ATTRCERT_Targets;

   asn1Copy_ATTRCERT_Targets (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_IetfAttrSyntax_values_element (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pSrcValue, 
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* octets */
      case 1:
         pDstValue->u.octets = rtxMemAllocType (pctxt, ASN1TDynOctStr);
         new (pDstValue->u.octets) ASN1TDynOctStr;
         rtCopyDynOctStr (pctxt, pSrcValue->u.octets, pDstValue->u.octets);
         break;

      /* oid */
      case 2:
         pDstValue->u.oid = rtxMemAllocType (pctxt, ASN1TObjId);
         new (pDstValue->u.oid) ASN1TObjId;
         rtCopyOID ((ASN1OBJID*)pSrcValue->u.oid, (ASN1OBJID*)pDstValue->u.oid);
         break;

      /* string */
      case 3:
         pDstValue->u.string = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.string);
         break;

   }
}

ASN1C_ATTRCERT_IetfAttrSyntax_values_element::ASN1C_ATTRCERT_IetfAttrSyntax_values_element (ASN1C_ATTRCERT_IetfAttrSyntax_values_element& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_IetfAttrSyntax_values_element::ASN1T_ATTRCERT_IetfAttrSyntax_values_element (ASN1C_ATTRCERT_IetfAttrSyntax_values_element& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_IetfAttrSyntax_values_element& ASN1C_ATTRCERT_IetfAttrSyntax_values_element::getCopy (ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_IetfAttrSyntax_values_element);
      new (pDstData) ASN1T_ATTRCERT_IetfAttrSyntax_values_element;
   }

   asn1Copy_ATTRCERT_IetfAttrSyntax_values_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_IetfAttrSyntax_values_element* ASN1C_ATTRCERT_IetfAttrSyntax_values_element::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pDstData = new ASN1T_ATTRCERT_IetfAttrSyntax_values_element;

   asn1Copy_ATTRCERT_IetfAttrSyntax_values_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pSrcValue, 
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ATTRCERT_IetfAttrSyntax_values_element* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ATTRCERT_IetfAttrSyntax_values_element);
         pSrcData = (ASN1T_ATTRCERT_IetfAttrSyntax_values_element*) pnode->data;

         asn1Copy_ATTRCERT_IetfAttrSyntax_values_element (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element::ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element*)pList)
{
}

ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element::operator= (ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& srcData)
{
   clear ();
   asn1Copy_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element& ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element::getCopy (ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element);
      new (pDstData) ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element;
   }

   asn1Copy_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* ASN1C_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element* pDstData = new ASN1T_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element;

   asn1Copy_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_IetfAttrSyntax (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_IetfAttrSyntax* pSrcValue, ASN1T_ATTRCERT_IetfAttrSyntax*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.policyAuthorityPresent) {
      asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->policyAuthority, &pDstValue->policyAuthority);
   }

   asn1Copy_ATTRCERT__SeqOfATTRCERT_IetfAttrSyntax_values_element (pctxt, &pSrcValue->values, &pDstValue->values);

}

ASN1C_ATTRCERT_IetfAttrSyntax::ASN1C_ATTRCERT_IetfAttrSyntax (ASN1C_ATTRCERT_IetfAttrSyntax& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_IetfAttrSyntax::ASN1T_ATTRCERT_IetfAttrSyntax (ASN1C_ATTRCERT_IetfAttrSyntax& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_IetfAttrSyntax& ASN1C_ATTRCERT_IetfAttrSyntax::getCopy (ASN1T_ATTRCERT_IetfAttrSyntax* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_IetfAttrSyntax);
      new (pDstData) ASN1T_ATTRCERT_IetfAttrSyntax;
   }

   asn1Copy_ATTRCERT_IetfAttrSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_IetfAttrSyntax* ASN1C_ATTRCERT_IetfAttrSyntax::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_IetfAttrSyntax* pDstData = new ASN1T_ATTRCERT_IetfAttrSyntax;

   asn1Copy_ATTRCERT_IetfAttrSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_SvceAuthInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_SvceAuthInfo* pSrcValue, ASN1T_ATTRCERT_SvceAuthInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->service, &pDstValue->service);

   asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->ident, &pDstValue->ident);

   if (pSrcValue->m.authInfoPresent) {
      rtCopyDynOctStr (pctxt, &pSrcValue->authInfo, &pDstValue->authInfo);
   }

}

ASN1C_ATTRCERT_SvceAuthInfo::ASN1C_ATTRCERT_SvceAuthInfo (ASN1C_ATTRCERT_SvceAuthInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_SvceAuthInfo::ASN1T_ATTRCERT_SvceAuthInfo (ASN1C_ATTRCERT_SvceAuthInfo& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_SvceAuthInfo& ASN1C_ATTRCERT_SvceAuthInfo::getCopy (ASN1T_ATTRCERT_SvceAuthInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_SvceAuthInfo);
      new (pDstData) ASN1T_ATTRCERT_SvceAuthInfo;
   }

   asn1Copy_ATTRCERT_SvceAuthInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_SvceAuthInfo* ASN1C_ATTRCERT_SvceAuthInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_SvceAuthInfo* pDstData = new ASN1T_ATTRCERT_SvceAuthInfo;

   asn1Copy_ATTRCERT_SvceAuthInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_RoleSyntax (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_RoleSyntax* pSrcValue, ASN1T_ATTRCERT_RoleSyntax* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.roleAuthorityPresent) {
      asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->roleAuthority, &pDstValue->roleAuthority);
   }

   asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->roleName, &pDstValue->roleName);

}

ASN1C_ATTRCERT_RoleSyntax::ASN1C_ATTRCERT_RoleSyntax (ASN1C_ATTRCERT_RoleSyntax& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_RoleSyntax::ASN1T_ATTRCERT_RoleSyntax (ASN1C_ATTRCERT_RoleSyntax& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_RoleSyntax& ASN1C_ATTRCERT_RoleSyntax::getCopy (ASN1T_ATTRCERT_RoleSyntax* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_RoleSyntax);
      new (pDstData) ASN1T_ATTRCERT_RoleSyntax;
   }

   asn1Copy_ATTRCERT_RoleSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_RoleSyntax* ASN1C_ATTRCERT_RoleSyntax::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_RoleSyntax* pDstData = new ASN1T_ATTRCERT_RoleSyntax;

   asn1Copy_ATTRCERT_RoleSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_SecurityCategory (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_SecurityCategory* pSrcValue, ASN1T_ATTRCERT_SecurityCategory*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->type, (ASN1OBJID*)&pDstValue->type);

   rtCopyOpenType (pctxt, &pSrcValue->value, &pDstValue->value);

}

ASN1C_ATTRCERT_SecurityCategory::ASN1C_ATTRCERT_SecurityCategory (ASN1C_ATTRCERT_SecurityCategory& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_SecurityCategory::ASN1T_ATTRCERT_SecurityCategory (ASN1C_ATTRCERT_SecurityCategory& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_SecurityCategory& ASN1C_ATTRCERT_SecurityCategory::getCopy (ASN1T_ATTRCERT_SecurityCategory* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_SecurityCategory);
      new (pDstData) ASN1T_ATTRCERT_SecurityCategory;
   }

   asn1Copy_ATTRCERT_SecurityCategory (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_SecurityCategory* ASN1C_ATTRCERT_SecurityCategory::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_SecurityCategory* pDstData = new ASN1T_ATTRCERT_SecurityCategory;

   asn1Copy_ATTRCERT_SecurityCategory (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT__SetOfATTRCERT_SecurityCategory (OSCTXT* pctxt, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pSrcValue, 
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ATTRCERT_SecurityCategory* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ATTRCERT_SecurityCategory* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ATTRCERT_SecurityCategory);
         pSrcData = (ASN1T_ATTRCERT_SecurityCategory*) pnode->data;

         asn1Copy_ATTRCERT_SecurityCategory (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory::ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory (ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory*)pList)
{
}

ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory& ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory::operator= (ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory& srcData)
{
   clear ();
   asn1Copy_ATTRCERT__SetOfATTRCERT_SecurityCategory (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory& ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory::getCopy (ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory);
      new (pDstData) ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory;
   }

   asn1Copy_ATTRCERT__SetOfATTRCERT_SecurityCategory (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* ASN1C_ATTRCERT__SetOfATTRCERT_SecurityCategory::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory* pDstData = new ASN1T_ATTRCERT__SetOfATTRCERT_SecurityCategory;

   asn1Copy_ATTRCERT__SetOfATTRCERT_SecurityCategory (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_Clearance (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_Clearance* pSrcValue, ASN1T_ATTRCERT_Clearance* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   rtCopyOID ((ASN1OBJID*)&pSrcValue->policyId, (ASN1OBJID*)&pDstValue->policyId);

   if (pSrcValue->m.classListPresent) {
      asn1Copy_ATTRCERT_ClassList (pctxt, &pSrcValue->classList, &pDstValue->classList);
   }

   if (pSrcValue->m.securityCategoriesPresent) {
      asn1Copy_ATTRCERT__SetOfATTRCERT_SecurityCategory (pctxt, &pSrcValue->securityCategories, &pDstValue->securityCategories);
   }

}

ASN1C_ATTRCERT_Clearance::ASN1C_ATTRCERT_Clearance (ASN1C_ATTRCERT_Clearance& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_Clearance::ASN1T_ATTRCERT_Clearance (ASN1C_ATTRCERT_Clearance& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_Clearance& ASN1C_ATTRCERT_Clearance::getCopy (ASN1T_ATTRCERT_Clearance* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_Clearance);
      new (pDstData) ASN1T_ATTRCERT_Clearance;
   }

   asn1Copy_ATTRCERT_Clearance (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_Clearance* ASN1C_ATTRCERT_Clearance::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_Clearance* pDstData = new ASN1T_ATTRCERT_Clearance;

   asn1Copy_ATTRCERT_Clearance (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AttrSpec (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttrSpec* pSrcValue, ASN1T_ATTRCERT_AttrSpec* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1TObjId* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1TObjId* pDstData = rtxMemAllocTypeZ (pctxt, ASN1TObjId);
         pSrcData = (ASN1TObjId*) pnode->data;

         rtCopyOID ((ASN1OBJID*)pSrcData, (ASN1OBJID*)pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ATTRCERT_AttrSpec::ASN1C_ATTRCERT_AttrSpec (ASN1C_ATTRCERT_AttrSpec& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ATTRCERT_AttrSpec*)pList)
{
}

ASN1C_ATTRCERT_AttrSpec& ASN1C_ATTRCERT_AttrSpec::operator= (ASN1C_ATTRCERT_AttrSpec& srcData)
{
   clear ();
   asn1Copy_ATTRCERT_AttrSpec (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ATTRCERT_AttrSpec& ASN1C_ATTRCERT_AttrSpec::getCopy (ASN1T_ATTRCERT_AttrSpec* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttrSpec);
      new (pDstData) ASN1T_ATTRCERT_AttrSpec;
   }

   asn1Copy_ATTRCERT_AttrSpec (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AttrSpec* ASN1C_ATTRCERT_AttrSpec::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AttrSpec* pDstData = new ASN1T_ATTRCERT_AttrSpec;

   asn1Copy_ATTRCERT_AttrSpec (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AAControls (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AAControls* pSrcValue, ASN1T_ATTRCERT_AAControls* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.pathLenConstraintPresent) {
      pDstValue->pathLenConstraint = pSrcValue->pathLenConstraint;
   }

   if (pSrcValue->m.permittedAttrsPresent) {
      asn1Copy_ATTRCERT_AttrSpec (pctxt, &pSrcValue->permittedAttrs, &pDstValue->permittedAttrs);
   }

   if (pSrcValue->m.excludedAttrsPresent) {
      asn1Copy_ATTRCERT_AttrSpec (pctxt, &pSrcValue->excludedAttrs, &pDstValue->excludedAttrs);
   }

   pDstValue->permitUnSpecified = pSrcValue->permitUnSpecified;

}

ASN1C_ATTRCERT_AAControls::ASN1C_ATTRCERT_AAControls (ASN1C_ATTRCERT_AAControls& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_AAControls::ASN1T_ATTRCERT_AAControls (ASN1C_ATTRCERT_AAControls& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_AAControls& ASN1C_ATTRCERT_AAControls::getCopy (ASN1T_ATTRCERT_AAControls* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AAControls);
      new (pDstData) ASN1T_ATTRCERT_AAControls;
   }

   asn1Copy_ATTRCERT_AAControls (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AAControls* ASN1C_ATTRCERT_AAControls::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AAControls* pDstData = new ASN1T_ATTRCERT_AAControls;

   asn1Copy_ATTRCERT_AAControls (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_ACClearAttrs (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ACClearAttrs* pSrcValue, ASN1T_ATTRCERT_ACClearAttrs*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->acIssuer, &pDstValue->acIssuer);

   pDstValue->acSerial = pSrcValue->acSerial;

   asn1Copy_ATTRCERT__SeqOfATTRCERT_Attribute (pctxt, &pSrcValue->attrs, &pDstValue->attrs);

}

ASN1C_ATTRCERT_ACClearAttrs::ASN1C_ATTRCERT_ACClearAttrs (ASN1C_ATTRCERT_ACClearAttrs& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_ACClearAttrs::ASN1T_ATTRCERT_ACClearAttrs (ASN1C_ATTRCERT_ACClearAttrs& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_ACClearAttrs& ASN1C_ATTRCERT_ACClearAttrs::getCopy (ASN1T_ATTRCERT_ACClearAttrs* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_ACClearAttrs);
      new (pDstData) ASN1T_ATTRCERT_ACClearAttrs;
   }

   asn1Copy_ATTRCERT_ACClearAttrs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_ACClearAttrs* ASN1C_ATTRCERT_ACClearAttrs::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_ACClearAttrs* pDstData = new ASN1T_ATTRCERT_ACClearAttrs;

   asn1Copy_ATTRCERT_ACClearAttrs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_ProxyInfo (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_ProxyInfo* pSrcValue, ASN1T_ATTRCERT_ProxyInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ATTRCERT_Targets* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ATTRCERT_Targets* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ATTRCERT_Targets);
         pSrcData = (ASN1T_ATTRCERT_Targets*) pnode->data;

         asn1Copy_ATTRCERT_Targets (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ATTRCERT_ProxyInfo::ASN1C_ATTRCERT_ProxyInfo (ASN1C_ATTRCERT_ProxyInfo& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ATTRCERT_ProxyInfo*)pList)
{
}

ASN1C_ATTRCERT_ProxyInfo& ASN1C_ATTRCERT_ProxyInfo::operator= (ASN1C_ATTRCERT_ProxyInfo& srcData)
{
   clear ();
   asn1Copy_ATTRCERT_ProxyInfo (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ATTRCERT_ProxyInfo& ASN1C_ATTRCERT_ProxyInfo::getCopy (ASN1T_ATTRCERT_ProxyInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_ProxyInfo);
      new (pDstData) ASN1T_ATTRCERT_ProxyInfo;
   }

   asn1Copy_ATTRCERT_ProxyInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_ProxyInfo* ASN1C_ATTRCERT_ProxyInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_ProxyInfo* pDstData = new ASN1T_ATTRCERT_ProxyInfo;

   asn1Copy_ATTRCERT_ProxyInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AttributeCertificateInfoV1_subject (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* baseCertificateID */
      case 1:
         pDstValue->u.baseCertificateID = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_IssuerSerial);
         new (pDstValue->u.baseCertificateID) ASN1T_ATTRCERT_IssuerSerial;
         asn1Copy_ATTRCERT_IssuerSerial (pctxt, pSrcValue->u.baseCertificateID, pDstValue->u.baseCertificateID);
         break;

      /* subjectName */
      case 2:
         pDstValue->u.subjectName = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralNames);
         new (pDstValue->u.subjectName) ASN1T_IMP_GeneralNames;
         asn1Copy_IMP_GeneralNames (pctxt, pSrcValue->u.subjectName, pDstValue->u.subjectName);
         break;

   }
}

ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject::ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject (ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject::ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject (ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject& ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject::getCopy (ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject);
      new (pDstData) ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject;
   }

   asn1Copy_ATTRCERT_AttributeCertificateInfoV1_subject (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* ASN1C_ATTRCERT_AttributeCertificateInfoV1_subject::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject* pDstData = new ASN1T_ATTRCERT_AttributeCertificateInfoV1_subject;

   asn1Copy_ATTRCERT_AttributeCertificateInfoV1_subject (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AttributeCertificateInfoV1 (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_ATTRCERT_AttributeCertificateInfoV1_subject (pctxt, &pSrcValue->subject, &pDstValue->subject);

   asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->issuer, &pDstValue->issuer);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

   asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->serialNumber, &pDstValue->serialNumber);

   asn1Copy_ATTRCERT_AttCertValidityPeriod (pctxt, &pSrcValue->attCertValidityPeriod, &pDstValue->attCertValidityPeriod);

   asn1Copy_ATTRCERT__SeqOfATTRCERT_Attribute (pctxt, &pSrcValue->attributes, &pDstValue->attributes);

   if (pSrcValue->m.issuerUniqueIDPresent) {
      asn1Copy_EXP_UniqueIdentifier (pctxt, &pSrcValue->issuerUniqueID, &pDstValue->issuerUniqueID);
   }

   if (pSrcValue->m.extensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->extensions, &pDstValue->extensions);
   }

}

ASN1C_ATTRCERT_AttributeCertificateInfoV1::ASN1C_ATTRCERT_AttributeCertificateInfoV1 (ASN1C_ATTRCERT_AttributeCertificateInfoV1& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_AttributeCertificateInfoV1::ASN1T_ATTRCERT_AttributeCertificateInfoV1 (ASN1C_ATTRCERT_AttributeCertificateInfoV1& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_AttributeCertificateInfoV1& ASN1C_ATTRCERT_AttributeCertificateInfoV1::getCopy (ASN1T_ATTRCERT_AttributeCertificateInfoV1* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttributeCertificateInfoV1);
      new (pDstData) ASN1T_ATTRCERT_AttributeCertificateInfoV1;
   }

   asn1Copy_ATTRCERT_AttributeCertificateInfoV1 (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AttributeCertificateInfoV1* ASN1C_ATTRCERT_AttributeCertificateInfoV1::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AttributeCertificateInfoV1* pDstData = new ASN1T_ATTRCERT_AttributeCertificateInfoV1;

   asn1Copy_ATTRCERT_AttributeCertificateInfoV1 (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ATTRCERT_AttributeCertificateV1 (OSCTXT* pctxt, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pSrcValue, 
   ASN1T_ATTRCERT_AttributeCertificateV1* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ATTRCERT_AttributeCertificateInfoV1 (pctxt, &pSrcValue->acInfo, &pDstValue->acInfo);

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->signatureAlgorithm, &pDstValue->signatureAlgorithm);

   rtCopyDynBitStr (pctxt, &pSrcValue->signature_, &pDstValue->signature_);

}

ASN1C_ATTRCERT_AttributeCertificateV1::ASN1C_ATTRCERT_AttributeCertificateV1 (ASN1C_ATTRCERT_AttributeCertificateV1& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ATTRCERT_AttributeCertificateV1::ASN1T_ATTRCERT_AttributeCertificateV1 (ASN1C_ATTRCERT_AttributeCertificateV1& original)
{
   original.getCopy (this);
}

ASN1T_ATTRCERT_AttributeCertificateV1& ASN1C_ATTRCERT_AttributeCertificateV1::getCopy (ASN1T_ATTRCERT_AttributeCertificateV1* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ATTRCERT_AttributeCertificateV1);
      new (pDstData) ASN1T_ATTRCERT_AttributeCertificateV1;
   }

   asn1Copy_ATTRCERT_AttributeCertificateV1 (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ATTRCERT_AttributeCertificateV1* ASN1C_ATTRCERT_AttributeCertificateV1::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ATTRCERT_AttributeCertificateV1* pDstData = new ASN1T_ATTRCERT_AttributeCertificateV1;

   asn1Copy_ATTRCERT_AttributeCertificateV1 (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

