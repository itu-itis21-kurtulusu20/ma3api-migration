/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "Implicit.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_IMP_AnotherName (OSCTXT* pctxt, 
   ASN1T_IMP_AnotherName* pSrcValue, ASN1T_IMP_AnotherName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->type_id, (ASN1OBJID*)&pDstValue->type_id);

   rtCopyOpenType (pctxt, &pSrcValue->value, &pDstValue->value);

}

ASN1C_IMP_AnotherName::ASN1C_IMP_AnotherName (ASN1C_IMP_AnotherName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_AnotherName::ASN1T_IMP_AnotherName (ASN1C_IMP_AnotherName& original)
{
   original.getCopy (this);
}

ASN1T_IMP_AnotherName& ASN1C_IMP_AnotherName::getCopy (ASN1T_IMP_AnotherName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_AnotherName);
      new (pDstData) ASN1T_IMP_AnotherName;
   }

   asn1Copy_IMP_AnotherName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_AnotherName* ASN1C_IMP_AnotherName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_AnotherName* pDstData = new ASN1T_IMP_AnotherName;

   asn1Copy_IMP_AnotherName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_EDIPartyName (OSCTXT* pctxt, 
   ASN1T_IMP_EDIPartyName* pSrcValue, ASN1T_IMP_EDIPartyName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.nameAssignerPresent) {
      asn1Copy_EXP_DirectoryString (pctxt, &pSrcValue->nameAssigner, &pDstValue->nameAssigner);
   }

   asn1Copy_EXP_DirectoryString (pctxt, &pSrcValue->partyName, &pDstValue->partyName);

}

ASN1C_IMP_EDIPartyName::ASN1C_IMP_EDIPartyName (ASN1C_IMP_EDIPartyName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_EDIPartyName::ASN1T_IMP_EDIPartyName (ASN1C_IMP_EDIPartyName& original)
{
   original.getCopy (this);
}

ASN1T_IMP_EDIPartyName& ASN1C_IMP_EDIPartyName::getCopy (ASN1T_IMP_EDIPartyName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_EDIPartyName);
      new (pDstData) ASN1T_IMP_EDIPartyName;
   }

   asn1Copy_IMP_EDIPartyName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_EDIPartyName* ASN1C_IMP_EDIPartyName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_EDIPartyName* pDstData = new ASN1T_IMP_EDIPartyName;

   asn1Copy_IMP_EDIPartyName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_GeneralName (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralName* pSrcValue, ASN1T_IMP_GeneralName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* otherName */
      case 1:
         pDstValue->u.otherName = rtxMemAllocType (pctxt, ASN1T_IMP_AnotherName);
         new (pDstValue->u.otherName) ASN1T_IMP_AnotherName;
         asn1Copy_IMP_AnotherName (pctxt, pSrcValue->u.otherName, pDstValue->u.otherName);
         break;

      /* rfc822Name */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.rfc822Name, (char **)&pDstValue->u.rfc822Name);
         break;

      /* dNSName */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.dNSName, (char **)&pDstValue->u.dNSName);
         break;

      /* x400Address */
      case 4:
         pDstValue->u.x400Address = rtxMemAllocType (pctxt, ASN1T_EXP_ORAddress);
         new (pDstValue->u.x400Address) ASN1T_EXP_ORAddress;
         asn1Copy_EXP_ORAddress (pctxt, pSrcValue->u.x400Address, pDstValue->u.x400Address);
         break;

      /* directoryName */
      case 5:
         pDstValue->u.directoryName = rtxMemAllocType (pctxt, ASN1T_EXP_Name);
         new (pDstValue->u.directoryName) ASN1T_EXP_Name;
         asn1Copy_EXP_Name (pctxt, pSrcValue->u.directoryName, pDstValue->u.directoryName);
         break;

      /* ediPartyName */
      case 6:
         pDstValue->u.ediPartyName = rtxMemAllocType (pctxt, ASN1T_IMP_EDIPartyName);
         new (pDstValue->u.ediPartyName) ASN1T_IMP_EDIPartyName;
         asn1Copy_IMP_EDIPartyName (pctxt, pSrcValue->u.ediPartyName, pDstValue->u.ediPartyName);
         break;

      /* uniformResourceIdentifier */
      case 7:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.uniformResourceIdentifier, (char **)&pDstValue->u.uniformResourceIdentifier);
         break;

      /* iPAddress */
      case 8:
         pDstValue->u.iPAddress = rtxMemAllocType (pctxt, ASN1TDynOctStr);
         new (pDstValue->u.iPAddress) ASN1TDynOctStr;
         rtCopyDynOctStr (pctxt, pSrcValue->u.iPAddress, pDstValue->u.iPAddress
            );
         break;

      /* registeredID */
      case 9:
         pDstValue->u.registeredID = rtxMemAllocType (pctxt, ASN1TObjId);
         new (pDstValue->u.registeredID) ASN1TObjId;
         rtCopyOID ((ASN1OBJID*)pSrcValue->u.registeredID, (ASN1OBJID*)pDstValue->u.registeredID);
         break;

   }
}

ASN1C_IMP_GeneralName::ASN1C_IMP_GeneralName (ASN1C_IMP_GeneralName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_GeneralName::ASN1T_IMP_GeneralName (ASN1C_IMP_GeneralName& original)
{
   original.getCopy (this);
}

ASN1T_IMP_GeneralName& ASN1C_IMP_GeneralName::getCopy (ASN1T_IMP_GeneralName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralName);
      new (pDstData) ASN1T_IMP_GeneralName;
   }

   asn1Copy_IMP_GeneralName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_GeneralName* ASN1C_IMP_GeneralName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_GeneralName* pDstData = new ASN1T_IMP_GeneralName;

   asn1Copy_IMP_GeneralName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_GeneralNames (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralNames* pSrcValue, ASN1T_IMP_GeneralNames* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_GeneralName* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_GeneralName* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_GeneralName);
         pSrcData = (ASN1T_IMP_GeneralName*) pnode->data;

         asn1Copy_IMP_GeneralName (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_GeneralNames::ASN1C_IMP_GeneralNames (ASN1C_IMP_GeneralNames& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_GeneralNames*)pList)
{
}

ASN1C_IMP_GeneralNames& ASN1C_IMP_GeneralNames::operator= (ASN1C_IMP_GeneralNames& srcData)
{
   clear ();
   asn1Copy_IMP_GeneralNames (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_GeneralNames& ASN1C_IMP_GeneralNames::getCopy (ASN1T_IMP_GeneralNames* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralNames);
      new (pDstData) ASN1T_IMP_GeneralNames;
   }

   asn1Copy_IMP_GeneralNames (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_GeneralNames* ASN1C_IMP_GeneralNames::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_GeneralNames* pDstData = new ASN1T_IMP_GeneralNames;

   asn1Copy_IMP_GeneralNames (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_SubjectAltName (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectAltName* pSrcValue, ASN1T_IMP_SubjectAltName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_GeneralNames (pctxt, pSrcValue, pDstValue);
}

ASN1C_IMP_SubjectAltName::ASN1C_IMP_SubjectAltName (ASN1C_IMP_SubjectAltName& original) :
   ASN1C_IMP_GeneralNames (original)
{
}

ASN1T_IMP_SubjectAltName& ASN1C_IMP_SubjectAltName::getCopy (ASN1T_IMP_SubjectAltName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_SubjectAltName);
      new (pDstData) ASN1T_IMP_SubjectAltName;
   }

   asn1Copy_IMP_SubjectAltName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_SubjectAltName* ASN1C_IMP_SubjectAltName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_SubjectAltName* pDstData = new ASN1T_IMP_SubjectAltName;

   asn1Copy_IMP_SubjectAltName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_KeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_KeyIdentifier* pSrcValue, ASN1T_IMP_KeyIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_IMP_KeyIdentifier::ASN1C_IMP_KeyIdentifier (ASN1C_IMP_KeyIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_KeyIdentifier& ASN1C_IMP_KeyIdentifier::getCopy (ASN1T_IMP_KeyIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_KeyIdentifier);
      new (pDstData) ASN1T_IMP_KeyIdentifier;
   }

   asn1Copy_IMP_KeyIdentifier (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_KeyIdentifier* ASN1C_IMP_KeyIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_KeyIdentifier* pDstData = new ASN1T_IMP_KeyIdentifier;

   asn1Copy_IMP_KeyIdentifier (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_SubjectKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectKeyIdentifier* pSrcValue, ASN1T_IMP_SubjectKeyIdentifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_IMP_SubjectKeyIdentifier::ASN1C_IMP_SubjectKeyIdentifier (ASN1C_IMP_SubjectKeyIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_SubjectKeyIdentifier& ASN1C_IMP_SubjectKeyIdentifier::getCopy (ASN1T_IMP_SubjectKeyIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_SubjectKeyIdentifier);
      new (pDstData) ASN1T_IMP_SubjectKeyIdentifier;
   }

   asn1Copy_IMP_SubjectKeyIdentifier (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_SubjectKeyIdentifier* ASN1C_IMP_SubjectKeyIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_SubjectKeyIdentifier* pDstData = new ASN1T_IMP_SubjectKeyIdentifier;

   asn1Copy_IMP_SubjectKeyIdentifier (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_KeyUsage (OSCTXT* pctxt, ASN1T_IMP_KeyUsage* pSrcValue, 
   ASN1T_IMP_KeyUsage* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->numbits = pSrcValue->numbits;
   if (pSrcValue->numbits > 0) {
      OSCRTLMEMCPY (pDstValue->data, pSrcValue->data, (pSrcValue->
         numbits+7)/8);
   }
}

ASN1C_IMP_KeyUsage::ASN1C_IMP_KeyUsage (ASN1C_IMP_KeyUsage& original) :
   ASN1CBitStr (original), msgData (original.getCopy ())
{
   ASN1CBitStr::init (msgData.data, msgData.numbits, 16);
}

ASN1T_IMP_KeyUsage::ASN1T_IMP_KeyUsage (ASN1C_IMP_KeyUsage& original)
{
   original.getCopy (this);
}

ASN1C_IMP_KeyUsage& ASN1C_IMP_KeyUsage::operator= (ASN1C_IMP_KeyUsage& srcData)
{
   srcData.getCopy (&msgData);
   return *this;
}

ASN1T_IMP_KeyUsage& ASN1C_IMP_KeyUsage::getCopy (ASN1T_IMP_KeyUsage* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_KeyUsage);
      new (pDstData) ASN1T_IMP_KeyUsage;
   }

   asn1Copy_IMP_KeyUsage (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_KeyUsage* ASN1C_IMP_KeyUsage::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_KeyUsage* pDstData = new ASN1T_IMP_KeyUsage;

   asn1Copy_IMP_KeyUsage (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_CertPolicyId (OSCTXT* pctxt, 
   ASN1T_IMP_CertPolicyId* pSrcValue, ASN1T_IMP_CertPolicyId* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_IMP_CertPolicyId::ASN1C_IMP_CertPolicyId (ASN1C_IMP_CertPolicyId& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_CertPolicyId& ASN1C_IMP_CertPolicyId::getCopy (ASN1T_IMP_CertPolicyId* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_CertPolicyId);
      new (pDstData) ASN1T_IMP_CertPolicyId;
   }

   asn1Copy_IMP_CertPolicyId (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_CertPolicyId* ASN1C_IMP_CertPolicyId::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_CertPolicyId* pDstData = new ASN1T_IMP_CertPolicyId;

   asn1Copy_IMP_CertPolicyId (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_PolicyQualifierId (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyQualifierId* pSrcValue, ASN1T_IMP_PolicyQualifierId*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_IMP_PolicyQualifierId::ASN1C_IMP_PolicyQualifierId (ASN1C_IMP_PolicyQualifierId& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_PolicyQualifierId& ASN1C_IMP_PolicyQualifierId::getCopy (ASN1T_IMP_PolicyQualifierId* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_PolicyQualifierId);
      new (pDstData) ASN1T_IMP_PolicyQualifierId;
   }

   asn1Copy_IMP_PolicyQualifierId (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_PolicyQualifierId* ASN1C_IMP_PolicyQualifierId::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_PolicyQualifierId* pDstData = new ASN1T_IMP_PolicyQualifierId;

   asn1Copy_IMP_PolicyQualifierId (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_CPSuri (OSCTXT* pctxt, ASN1T_IMP_CPSuri pSrcValue, 
   ASN1T_IMP_CPSuri* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_IMP_CPSuri::ASN1C_IMP_CPSuri (ASN1C_IMP_CPSuri& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_CPSuri& ASN1C_IMP_CPSuri::getCopy (ASN1T_IMP_CPSuri* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_CPSuri);
      new (pDstData) ASN1T_IMP_CPSuri;
   }

   asn1Copy_IMP_CPSuri (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_CPSuri* ASN1C_IMP_CPSuri::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_CPSuri* pDstData = new ASN1T_IMP_CPSuri;

   asn1Copy_IMP_CPSuri (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_KeyPurposeId (OSCTXT* pctxt, 
   ASN1T_IMP_KeyPurposeId* pSrcValue, ASN1T_IMP_KeyPurposeId* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_IMP_KeyPurposeId::ASN1C_IMP_KeyPurposeId (ASN1C_IMP_KeyPurposeId& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_KeyPurposeId& ASN1C_IMP_KeyPurposeId::getCopy (ASN1T_IMP_KeyPurposeId* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_KeyPurposeId);
      new (pDstData) ASN1T_IMP_KeyPurposeId;
   }

   asn1Copy_IMP_KeyPurposeId (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_KeyPurposeId* ASN1C_IMP_KeyPurposeId::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_KeyPurposeId* pDstData = new ASN1T_IMP_KeyPurposeId;

   asn1Copy_IMP_KeyPurposeId (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_ReasonFlags (OSCTXT* pctxt, 
   ASN1T_IMP_ReasonFlags* pSrcValue, ASN1T_IMP_ReasonFlags* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->numbits = pSrcValue->numbits;
   if (pSrcValue->numbits > 0) {
      OSCRTLMEMCPY (pDstValue->data, pSrcValue->data, (pSrcValue->
         numbits+7)/8);
   }
}

ASN1C_IMP_ReasonFlags::ASN1C_IMP_ReasonFlags (ASN1C_IMP_ReasonFlags& original) :
   ASN1CBitStr (original), msgData (original.getCopy ())
{
   ASN1CBitStr::init (msgData.data, msgData.numbits, 16);
}

ASN1T_IMP_ReasonFlags::ASN1T_IMP_ReasonFlags (ASN1C_IMP_ReasonFlags& original)
{
   original.getCopy (this);
}

ASN1C_IMP_ReasonFlags& ASN1C_IMP_ReasonFlags::operator= (ASN1C_IMP_ReasonFlags& srcData)
{
   srcData.getCopy (&msgData);
   return *this;
}

ASN1T_IMP_ReasonFlags& ASN1C_IMP_ReasonFlags::getCopy (ASN1T_IMP_ReasonFlags* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_ReasonFlags);
      new (pDstData) ASN1T_IMP_ReasonFlags;
   }

   asn1Copy_IMP_ReasonFlags (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_ReasonFlags* ASN1C_IMP_ReasonFlags::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_ReasonFlags* pDstData = new ASN1T_IMP_ReasonFlags;

   asn1Copy_IMP_ReasonFlags (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_CRLNumber (OSCTXT* pctxt, ASN1T_IMP_CRLNumber* pSrcValue, 
   ASN1T_IMP_CRLNumber* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)*pSrcValue, (char **)pDstValue);
}

ASN1C_IMP_CRLNumber::ASN1C_IMP_CRLNumber (ASN1C_IMP_CRLNumber& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_CRLNumber& ASN1C_IMP_CRLNumber::getCopy (ASN1T_IMP_CRLNumber* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_CRLNumber);
      new (pDstData) ASN1T_IMP_CRLNumber;
   }

   asn1Copy_IMP_CRLNumber (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_CRLNumber* ASN1C_IMP_CRLNumber::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_CRLNumber* pDstData = new ASN1T_IMP_CRLNumber;

   asn1Copy_IMP_CRLNumber (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_DistributionPointName (OSCTXT* pctxt, 
   ASN1T_IMP_DistributionPointName* pSrcValue, ASN1T_IMP_DistributionPointName*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* fullName */
      case 1:
         pDstValue->u.fullName = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralNames);
         new (pDstValue->u.fullName) ASN1T_IMP_GeneralNames;
         asn1Copy_IMP_GeneralNames (pctxt, pSrcValue->u.fullName, pDstValue->u.fullName);
         break;

      /* nameRelativeToCRLIssuer */
      case 2:
         pDstValue->u.nameRelativeToCRLIssuer = rtxMemAllocType (pctxt, ASN1T_EXP_RelativeDistinguishedName);
         new (pDstValue->u.nameRelativeToCRLIssuer) ASN1T_EXP_RelativeDistinguishedName;
         asn1Copy_EXP_RelativeDistinguishedName (pctxt, pSrcValue->u.nameRelativeToCRLIssuer, pDstValue->u.nameRelativeToCRLIssuer);
         break;

   }
}

ASN1C_IMP_DistributionPointName::ASN1C_IMP_DistributionPointName (ASN1C_IMP_DistributionPointName& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_DistributionPointName::ASN1T_IMP_DistributionPointName (ASN1C_IMP_DistributionPointName& original)
{
   original.getCopy (this);
}

ASN1T_IMP_DistributionPointName& ASN1C_IMP_DistributionPointName::getCopy (ASN1T_IMP_DistributionPointName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_DistributionPointName);
      new (pDstData) ASN1T_IMP_DistributionPointName;
   }

   asn1Copy_IMP_DistributionPointName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_DistributionPointName* ASN1C_IMP_DistributionPointName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_DistributionPointName* pDstData = new ASN1T_IMP_DistributionPointName;

   asn1Copy_IMP_DistributionPointName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_DistributionPoint (OSCTXT* pctxt, 
   ASN1T_IMP_DistributionPoint* pSrcValue, ASN1T_IMP_DistributionPoint*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.distributionPointPresent) {
      asn1Copy_IMP_DistributionPointName (pctxt, &pSrcValue->distributionPoint, &pDstValue->distributionPoint);
   }

   if (pSrcValue->m.reasonsPresent) {
      asn1Copy_IMP_ReasonFlags (pctxt, &pSrcValue->reasons, &pDstValue->reasons);
   }

   if (pSrcValue->m.cRLIssuerPresent) {
      asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->cRLIssuer, &pDstValue->cRLIssuer);
   }

}

ASN1C_IMP_DistributionPoint::ASN1C_IMP_DistributionPoint (ASN1C_IMP_DistributionPoint& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_DistributionPoint::ASN1T_IMP_DistributionPoint (ASN1C_IMP_DistributionPoint& original)
{
   original.getCopy (this);
}

ASN1T_IMP_DistributionPoint& ASN1C_IMP_DistributionPoint::getCopy (ASN1T_IMP_DistributionPoint* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_DistributionPoint);
      new (pDstData) ASN1T_IMP_DistributionPoint;
   }

   asn1Copy_IMP_DistributionPoint (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_DistributionPoint* ASN1C_IMP_DistributionPoint::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_DistributionPoint* pDstData = new ASN1T_IMP_DistributionPoint;

   asn1Copy_IMP_DistributionPoint (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_CRLDistributionPoints (OSCTXT* pctxt, 
   ASN1T_IMP_CRLDistributionPoints* pSrcValue, ASN1T_IMP_CRLDistributionPoints*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_DistributionPoint* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_DistributionPoint* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_DistributionPoint);
         pSrcData = (ASN1T_IMP_DistributionPoint*) pnode->data;

         asn1Copy_IMP_DistributionPoint (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_CRLDistributionPoints::ASN1C_IMP_CRLDistributionPoints (ASN1C_IMP_CRLDistributionPoints& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_CRLDistributionPoints*)pList)
{
}

ASN1C_IMP_CRLDistributionPoints& ASN1C_IMP_CRLDistributionPoints::operator= (ASN1C_IMP_CRLDistributionPoints& srcData)
{
   clear ();
   asn1Copy_IMP_CRLDistributionPoints (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_CRLDistributionPoints& ASN1C_IMP_CRLDistributionPoints::getCopy (ASN1T_IMP_CRLDistributionPoints* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_CRLDistributionPoints);
      new (pDstData) ASN1T_IMP_CRLDistributionPoints;
   }

   asn1Copy_IMP_CRLDistributionPoints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_CRLDistributionPoints* ASN1C_IMP_CRLDistributionPoints::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_CRLDistributionPoints* pDstData = new ASN1T_IMP_CRLDistributionPoints;

   asn1Copy_IMP_CRLDistributionPoints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_FreshestCRL (OSCTXT* pctxt, 
   ASN1T_IMP_FreshestCRL* pSrcValue, ASN1T_IMP_FreshestCRL* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_CRLDistributionPoints (pctxt, pSrcValue, pDstValue);
}

ASN1C_IMP_FreshestCRL::ASN1C_IMP_FreshestCRL (ASN1C_IMP_FreshestCRL& original) :
   ASN1C_IMP_CRLDistributionPoints (original)
{
}

ASN1T_IMP_FreshestCRL& ASN1C_IMP_FreshestCRL::getCopy (ASN1T_IMP_FreshestCRL* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_FreshestCRL);
      new (pDstData) ASN1T_IMP_FreshestCRL;
   }

   asn1Copy_IMP_FreshestCRL (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_FreshestCRL* ASN1C_IMP_FreshestCRL::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_FreshestCRL* pDstData = new ASN1T_IMP_FreshestCRL;

   asn1Copy_IMP_FreshestCRL (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_BaseCRLNumber (OSCTXT* pctxt, 
   ASN1T_IMP_BaseCRLNumber* pSrcValue, ASN1T_IMP_BaseCRLNumber* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_CRLNumber (pctxt, pSrcValue, pDstValue);
}

ASN1C_IMP_BaseCRLNumber::ASN1C_IMP_BaseCRLNumber (ASN1C_IMP_BaseCRLNumber& original) :
   ASN1C_IMP_CRLNumber (original)
{
}

ASN1T_IMP_BaseCRLNumber& ASN1C_IMP_BaseCRLNumber::getCopy (ASN1T_IMP_BaseCRLNumber* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_BaseCRLNumber);
      new (pDstData) ASN1T_IMP_BaseCRLNumber;
   }

   asn1Copy_IMP_BaseCRLNumber (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_BaseCRLNumber* ASN1C_IMP_BaseCRLNumber::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_BaseCRLNumber* pDstData = new ASN1T_IMP_BaseCRLNumber;

   asn1Copy_IMP_BaseCRLNumber (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_IssuerAltName (OSCTXT* pctxt, 
   ASN1T_IMP_IssuerAltName* pSrcValue, ASN1T_IMP_IssuerAltName* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_GeneralNames (pctxt, pSrcValue, pDstValue);
}

ASN1C_IMP_IssuerAltName::ASN1C_IMP_IssuerAltName (ASN1C_IMP_IssuerAltName& original) :
   ASN1C_IMP_GeneralNames (original)
{
}

ASN1T_IMP_IssuerAltName& ASN1C_IMP_IssuerAltName::getCopy (ASN1T_IMP_IssuerAltName* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_IssuerAltName);
      new (pDstData) ASN1T_IMP_IssuerAltName;
   }

   asn1Copy_IMP_IssuerAltName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_IssuerAltName* ASN1C_IMP_IssuerAltName::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_IssuerAltName* pDstData = new ASN1T_IMP_IssuerAltName;

   asn1Copy_IMP_IssuerAltName (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_HoldInstructionCode (OSCTXT* pctxt, 
   ASN1T_IMP_HoldInstructionCode* pSrcValue, ASN1T_IMP_HoldInstructionCode*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_IMP_HoldInstructionCode::ASN1C_IMP_HoldInstructionCode (ASN1C_IMP_HoldInstructionCode& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_HoldInstructionCode& ASN1C_IMP_HoldInstructionCode::getCopy (ASN1T_IMP_HoldInstructionCode* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_HoldInstructionCode);
      new (pDstData) ASN1T_IMP_HoldInstructionCode;
   }

   asn1Copy_IMP_HoldInstructionCode (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_HoldInstructionCode* ASN1C_IMP_HoldInstructionCode::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_HoldInstructionCode* pDstData = new ASN1T_IMP_HoldInstructionCode;

   asn1Copy_IMP_HoldInstructionCode (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_InvalidityDate (OSCTXT* pctxt, 
   ASN1T_IMP_InvalidityDate pSrcValue, ASN1T_IMP_InvalidityDate* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_IMP_InvalidityDate::ASN1C_IMP_InvalidityDate (ASN1C_IMP_InvalidityDate& original) :
   ASN1CGeneralizedTime (original), msgData (original.getCopy())
{
}

ASN1C_IMP_InvalidityDate& ASN1C_IMP_InvalidityDate::operator= (ASN1C_IMP_InvalidityDate& srcData)
{
   ASN1CGeneralizedTime::operator= (srcData);
   return *this;
}

ASN1T_IMP_InvalidityDate& ASN1C_IMP_InvalidityDate::getCopy (ASN1T_IMP_InvalidityDate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_InvalidityDate);
      new (pDstData) ASN1T_IMP_InvalidityDate;
   }

   asn1Copy_IMP_InvalidityDate (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_IMP_InvalidityDate* ASN1C_IMP_InvalidityDate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_InvalidityDate* pDstData = new ASN1T_IMP_InvalidityDate;

   asn1Copy_IMP_InvalidityDate (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_IMP_CertificateIssuer (OSCTXT* pctxt, 
   ASN1T_IMP_CertificateIssuer* pSrcValue, ASN1T_IMP_CertificateIssuer*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_GeneralNames (pctxt, pSrcValue, pDstValue);
}

ASN1C_IMP_CertificateIssuer::ASN1C_IMP_CertificateIssuer (ASN1C_IMP_CertificateIssuer& original) :
   ASN1C_IMP_GeneralNames (original)
{
}

ASN1T_IMP_CertificateIssuer& ASN1C_IMP_CertificateIssuer::getCopy (ASN1T_IMP_CertificateIssuer* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_CertificateIssuer);
      new (pDstData) ASN1T_IMP_CertificateIssuer;
   }

   asn1Copy_IMP_CertificateIssuer (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_CertificateIssuer* ASN1C_IMP_CertificateIssuer::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_CertificateIssuer* pDstData = new ASN1T_IMP_CertificateIssuer;

   asn1Copy_IMP_CertificateIssuer (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_AuthorityKeyIdentifier (OSCTXT* pctxt, 
   ASN1T_IMP_AuthorityKeyIdentifier* pSrcValue, 
   ASN1T_IMP_AuthorityKeyIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.keyIdentifierPresent) {
      asn1Copy_IMP_KeyIdentifier (pctxt, &pSrcValue->keyIdentifier, &pDstValue->keyIdentifier);
   }

   if (pSrcValue->m.authorityCertIssuerPresent) {
      asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->authorityCertIssuer, &pDstValue->authorityCertIssuer);
   }

   if (pSrcValue->m.authorityCertSerialNumberPresent) {
      asn1Copy_EXP_CertificateSerialNumber (pctxt, &pSrcValue->authorityCertSerialNumber, &pDstValue->authorityCertSerialNumber);
   }

}

ASN1C_IMP_AuthorityKeyIdentifier::ASN1C_IMP_AuthorityKeyIdentifier (ASN1C_IMP_AuthorityKeyIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_AuthorityKeyIdentifier::ASN1T_IMP_AuthorityKeyIdentifier (ASN1C_IMP_AuthorityKeyIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_IMP_AuthorityKeyIdentifier& ASN1C_IMP_AuthorityKeyIdentifier::getCopy (ASN1T_IMP_AuthorityKeyIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_AuthorityKeyIdentifier);
      new (pDstData) ASN1T_IMP_AuthorityKeyIdentifier;
   }

   asn1Copy_IMP_AuthorityKeyIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_AuthorityKeyIdentifier* ASN1C_IMP_AuthorityKeyIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_AuthorityKeyIdentifier* pDstData = new ASN1T_IMP_AuthorityKeyIdentifier;

   asn1Copy_IMP_AuthorityKeyIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_PolicyQualifierInfo (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyQualifierInfo* pSrcValue, ASN1T_IMP_PolicyQualifierInfo*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_PolicyQualifierId (pctxt, &pSrcValue->policyQualifierId, &pDstValue->policyQualifierId);

   rtCopyOpenType (pctxt, &pSrcValue->qualifier, &pDstValue->qualifier);

}

ASN1C_IMP_PolicyQualifierInfo::ASN1C_IMP_PolicyQualifierInfo (ASN1C_IMP_PolicyQualifierInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_PolicyQualifierInfo::ASN1T_IMP_PolicyQualifierInfo (ASN1C_IMP_PolicyQualifierInfo& original)
{
   original.getCopy (this);
}

ASN1T_IMP_PolicyQualifierInfo& ASN1C_IMP_PolicyQualifierInfo::getCopy (ASN1T_IMP_PolicyQualifierInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_PolicyQualifierInfo);
      new (pDstData) ASN1T_IMP_PolicyQualifierInfo;
   }

   asn1Copy_IMP_PolicyQualifierInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_PolicyQualifierInfo* ASN1C_IMP_PolicyQualifierInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_PolicyQualifierInfo* pDstData = new ASN1T_IMP_PolicyQualifierInfo;

   asn1Copy_IMP_PolicyQualifierInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_PolicyInformation_policyQualifiers (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pSrcValue, 
   ASN1T_IMP_PolicyInformation_policyQualifiers* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_PolicyQualifierInfo* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_PolicyQualifierInfo* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_PolicyQualifierInfo);
         pSrcData = (ASN1T_IMP_PolicyQualifierInfo*) pnode->data;

         asn1Copy_IMP_PolicyQualifierInfo (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_PolicyInformation_policyQualifiers::ASN1C_IMP_PolicyInformation_policyQualifiers (ASN1C_IMP_PolicyInformation_policyQualifiers& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_PolicyInformation_policyQualifiers*)pList)
{
}

ASN1C_IMP_PolicyInformation_policyQualifiers& ASN1C_IMP_PolicyInformation_policyQualifiers::operator= (ASN1C_IMP_PolicyInformation_policyQualifiers& srcData)
{
   clear ();
   asn1Copy_IMP_PolicyInformation_policyQualifiers (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_PolicyInformation_policyQualifiers& ASN1C_IMP_PolicyInformation_policyQualifiers::getCopy (ASN1T_IMP_PolicyInformation_policyQualifiers* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_PolicyInformation_policyQualifiers);
      new (pDstData) ASN1T_IMP_PolicyInformation_policyQualifiers;
   }

   asn1Copy_IMP_PolicyInformation_policyQualifiers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_PolicyInformation_policyQualifiers* ASN1C_IMP_PolicyInformation_policyQualifiers::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_PolicyInformation_policyQualifiers* pDstData = new ASN1T_IMP_PolicyInformation_policyQualifiers;

   asn1Copy_IMP_PolicyInformation_policyQualifiers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyInformation* pSrcValue, ASN1T_IMP_PolicyInformation*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_IMP_CertPolicyId (pctxt, &pSrcValue->policyIdentifier, &pDstValue->policyIdentifier);

   if (pSrcValue->m.policyQualifiersPresent) {
      asn1Copy_IMP_PolicyInformation_policyQualifiers (pctxt, &pSrcValue->policyQualifiers, &pDstValue->policyQualifiers);
   }

}

ASN1C_IMP_PolicyInformation::ASN1C_IMP_PolicyInformation (ASN1C_IMP_PolicyInformation& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_PolicyInformation::ASN1T_IMP_PolicyInformation (ASN1C_IMP_PolicyInformation& original)
{
   original.getCopy (this);
}

ASN1T_IMP_PolicyInformation& ASN1C_IMP_PolicyInformation::getCopy (ASN1T_IMP_PolicyInformation* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_PolicyInformation);
      new (pDstData) ASN1T_IMP_PolicyInformation;
   }

   asn1Copy_IMP_PolicyInformation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_PolicyInformation* ASN1C_IMP_PolicyInformation::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_PolicyInformation* pDstData = new ASN1T_IMP_PolicyInformation;

   asn1Copy_IMP_PolicyInformation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_CertificatePolicies (OSCTXT* pctxt, 
   ASN1T_IMP_CertificatePolicies* pSrcValue, ASN1T_IMP_CertificatePolicies*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_PolicyInformation* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_PolicyInformation* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_PolicyInformation);
         pSrcData = (ASN1T_IMP_PolicyInformation*) pnode->data;

         asn1Copy_IMP_PolicyInformation (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_CertificatePolicies::ASN1C_IMP_CertificatePolicies (ASN1C_IMP_CertificatePolicies& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_CertificatePolicies*)pList)
{
}

ASN1C_IMP_CertificatePolicies& ASN1C_IMP_CertificatePolicies::operator= (ASN1C_IMP_CertificatePolicies& srcData)
{
   clear ();
   asn1Copy_IMP_CertificatePolicies (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_CertificatePolicies& ASN1C_IMP_CertificatePolicies::getCopy (ASN1T_IMP_CertificatePolicies* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_CertificatePolicies);
      new (pDstData) ASN1T_IMP_CertificatePolicies;
   }

   asn1Copy_IMP_CertificatePolicies (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_CertificatePolicies* ASN1C_IMP_CertificatePolicies::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_CertificatePolicies* pDstData = new ASN1T_IMP_CertificatePolicies;

   asn1Copy_IMP_CertificatePolicies (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_DisplayText (OSCTXT* pctxt, 
   ASN1T_IMP_DisplayText* pSrcValue, ASN1T_IMP_DisplayText* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* ia5String */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.ia5String, (char **)&pDstValue->u.ia5String);
         break;

      /* visibleString */
      case 3:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.visibleString, (char **)&pDstValue->u.visibleString);
         break;

      /* bmpString */
      case 4:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_IMP_DisplayText::ASN1C_IMP_DisplayText (ASN1C_IMP_DisplayText& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_DisplayText::ASN1T_IMP_DisplayText (ASN1C_IMP_DisplayText& original)
{
   original.getCopy (this);
}

ASN1T_IMP_DisplayText& ASN1C_IMP_DisplayText::getCopy (ASN1T_IMP_DisplayText* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_DisplayText);
      new (pDstData) ASN1T_IMP_DisplayText;
   }

   asn1Copy_IMP_DisplayText (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_DisplayText* ASN1C_IMP_DisplayText::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_DisplayText* pDstData = new ASN1T_IMP_DisplayText;

   asn1Copy_IMP_DisplayText (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_NoticeReference_noticeNumbers (OSCTXT* pctxt, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pSrcValue, 
   ASN1T_IMP_NoticeReference_noticeNumbers* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      OSINT32* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         OSINT32* pDstData = rtxMemAllocTypeZ (pctxt, OSINT32);
         pSrcData = (OSINT32*) pnode->data;

         *pDstData = *pSrcData;

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_NoticeReference_noticeNumbers::ASN1C_IMP_NoticeReference_noticeNumbers (ASN1C_IMP_NoticeReference_noticeNumbers& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_NoticeReference_noticeNumbers*)pList)
{
}

ASN1C_IMP_NoticeReference_noticeNumbers& ASN1C_IMP_NoticeReference_noticeNumbers::operator= (ASN1C_IMP_NoticeReference_noticeNumbers& srcData)
{
   clear ();
   asn1Copy_IMP_NoticeReference_noticeNumbers (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_NoticeReference_noticeNumbers& ASN1C_IMP_NoticeReference_noticeNumbers::getCopy (ASN1T_IMP_NoticeReference_noticeNumbers* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_NoticeReference_noticeNumbers);
      new (pDstData) ASN1T_IMP_NoticeReference_noticeNumbers;
   }

   asn1Copy_IMP_NoticeReference_noticeNumbers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_NoticeReference_noticeNumbers* ASN1C_IMP_NoticeReference_noticeNumbers::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_NoticeReference_noticeNumbers* pDstData = new ASN1T_IMP_NoticeReference_noticeNumbers;

   asn1Copy_IMP_NoticeReference_noticeNumbers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_NoticeReference (OSCTXT* pctxt, 
   ASN1T_IMP_NoticeReference* pSrcValue, ASN1T_IMP_NoticeReference* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_DisplayText (pctxt, &pSrcValue->organization, &pDstValue->organization);

   asn1Copy_IMP_NoticeReference_noticeNumbers (pctxt, &pSrcValue->noticeNumbers, &pDstValue->noticeNumbers);

}

ASN1C_IMP_NoticeReference::ASN1C_IMP_NoticeReference (ASN1C_IMP_NoticeReference& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_NoticeReference::ASN1T_IMP_NoticeReference (ASN1C_IMP_NoticeReference& original)
{
   original.getCopy (this);
}

ASN1T_IMP_NoticeReference& ASN1C_IMP_NoticeReference::getCopy (ASN1T_IMP_NoticeReference* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_NoticeReference);
      new (pDstData) ASN1T_IMP_NoticeReference;
   }

   asn1Copy_IMP_NoticeReference (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_NoticeReference* ASN1C_IMP_NoticeReference::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_NoticeReference* pDstData = new ASN1T_IMP_NoticeReference;

   asn1Copy_IMP_NoticeReference (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_UserNotice (OSCTXT* pctxt, ASN1T_IMP_UserNotice* pSrcValue, 
   ASN1T_IMP_UserNotice* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.noticeRefPresent) {
      asn1Copy_IMP_NoticeReference (pctxt, &pSrcValue->noticeRef, &pDstValue->noticeRef);
   }

   if (pSrcValue->m.explicitTextPresent) {
      asn1Copy_IMP_DisplayText (pctxt, &pSrcValue->explicitText, &pDstValue->explicitText);
   }

}

ASN1C_IMP_UserNotice::ASN1C_IMP_UserNotice (ASN1C_IMP_UserNotice& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_UserNotice::ASN1T_IMP_UserNotice (ASN1C_IMP_UserNotice& original)
{
   original.getCopy (this);
}

ASN1T_IMP_UserNotice& ASN1C_IMP_UserNotice::getCopy (ASN1T_IMP_UserNotice* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_UserNotice);
      new (pDstData) ASN1T_IMP_UserNotice;
   }

   asn1Copy_IMP_UserNotice (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_UserNotice* ASN1C_IMP_UserNotice::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_UserNotice* pDstData = new ASN1T_IMP_UserNotice;

   asn1Copy_IMP_UserNotice (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_Qualifier (OSCTXT* pctxt, ASN1T_IMP_Qualifier* pSrcValue, 
   ASN1T_IMP_Qualifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* userNotice */
      case 1:
         pDstValue->u.userNotice = rtxMemAllocType (pctxt, ASN1T_IMP_UserNotice);
         new (pDstValue->u.userNotice) ASN1T_IMP_UserNotice;
         asn1Copy_IMP_UserNotice (pctxt, pSrcValue->u.userNotice, pDstValue->u.userNotice);
         break;

      /* cPSuri */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.cPSuri, (char **)&pDstValue->u.cPSuri);
         break;

   }
}

ASN1C_IMP_Qualifier::ASN1C_IMP_Qualifier (ASN1C_IMP_Qualifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_Qualifier::ASN1T_IMP_Qualifier (ASN1C_IMP_Qualifier& original)
{
   original.getCopy (this);
}

ASN1T_IMP_Qualifier& ASN1C_IMP_Qualifier::getCopy (ASN1T_IMP_Qualifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_Qualifier);
      new (pDstData) ASN1T_IMP_Qualifier;
   }

   asn1Copy_IMP_Qualifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_Qualifier* ASN1C_IMP_Qualifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_Qualifier* pDstData = new ASN1T_IMP_Qualifier;

   asn1Copy_IMP_Qualifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_PolicyMappings_element (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyMappings_element* pSrcValue, 
   ASN1T_IMP_PolicyMappings_element* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_IMP_CertPolicyId (pctxt, &pSrcValue->issuerDomainPolicy, &pDstValue->issuerDomainPolicy);

   asn1Copy_IMP_CertPolicyId (pctxt, &pSrcValue->subjectDomainPolicy, &pDstValue->subjectDomainPolicy);

}

ASN1C_IMP_PolicyMappings_element::ASN1C_IMP_PolicyMappings_element (ASN1C_IMP_PolicyMappings_element& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_PolicyMappings_element::ASN1T_IMP_PolicyMappings_element (ASN1C_IMP_PolicyMappings_element& original)
{
   original.getCopy (this);
}

ASN1T_IMP_PolicyMappings_element& ASN1C_IMP_PolicyMappings_element::getCopy (ASN1T_IMP_PolicyMappings_element* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_PolicyMappings_element);
      new (pDstData) ASN1T_IMP_PolicyMappings_element;
   }

   asn1Copy_IMP_PolicyMappings_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_PolicyMappings_element* ASN1C_IMP_PolicyMappings_element::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_PolicyMappings_element* pDstData = new ASN1T_IMP_PolicyMappings_element;

   asn1Copy_IMP_PolicyMappings_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_PolicyMappings (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyMappings* pSrcValue, ASN1T_IMP_PolicyMappings* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_PolicyMappings_element* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_PolicyMappings_element* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_PolicyMappings_element);
         pSrcData = (ASN1T_IMP_PolicyMappings_element*) pnode->data;

         asn1Copy_IMP_PolicyMappings_element (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_PolicyMappings::ASN1C_IMP_PolicyMappings (ASN1C_IMP_PolicyMappings& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_PolicyMappings*)pList)
{
}

ASN1C_IMP_PolicyMappings& ASN1C_IMP_PolicyMappings::operator= (ASN1C_IMP_PolicyMappings& srcData)
{
   clear ();
   asn1Copy_IMP_PolicyMappings (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_PolicyMappings& ASN1C_IMP_PolicyMappings::getCopy (ASN1T_IMP_PolicyMappings* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_PolicyMappings);
      new (pDstData) ASN1T_IMP_PolicyMappings;
   }

   asn1Copy_IMP_PolicyMappings (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_PolicyMappings* ASN1C_IMP_PolicyMappings::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_PolicyMappings* pDstData = new ASN1T_IMP_PolicyMappings;

   asn1Copy_IMP_PolicyMappings (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_BasicConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_BasicConstraints* pSrcValue, ASN1T_IMP_BasicConstraints*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->cA = pSrcValue->cA;

   if (pSrcValue->m.pathLenConstraintPresent) {
      pDstValue->pathLenConstraint = pSrcValue->pathLenConstraint;
   }

}

ASN1C_IMP_BasicConstraints::ASN1C_IMP_BasicConstraints (ASN1C_IMP_BasicConstraints& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_BasicConstraints::ASN1T_IMP_BasicConstraints (ASN1C_IMP_BasicConstraints& original)
{
   original.getCopy (this);
}

ASN1T_IMP_BasicConstraints& ASN1C_IMP_BasicConstraints::getCopy (ASN1T_IMP_BasicConstraints* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_BasicConstraints);
      new (pDstData) ASN1T_IMP_BasicConstraints;
   }

   asn1Copy_IMP_BasicConstraints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_BasicConstraints* ASN1C_IMP_BasicConstraints::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_BasicConstraints* pDstData = new ASN1T_IMP_BasicConstraints;

   asn1Copy_IMP_BasicConstraints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_ExtKeyUsageSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_ExtKeyUsageSyntax* pSrcValue, ASN1T_IMP_ExtKeyUsageSyntax*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_KeyPurposeId* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_KeyPurposeId* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_KeyPurposeId);
         pSrcData = (ASN1T_IMP_KeyPurposeId*) pnode->data;

         asn1Copy_IMP_KeyPurposeId (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_ExtKeyUsageSyntax::ASN1C_IMP_ExtKeyUsageSyntax (ASN1C_IMP_ExtKeyUsageSyntax& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_ExtKeyUsageSyntax*)pList)
{
}

ASN1C_IMP_ExtKeyUsageSyntax& ASN1C_IMP_ExtKeyUsageSyntax::operator= (ASN1C_IMP_ExtKeyUsageSyntax& srcData)
{
   clear ();
   asn1Copy_IMP_ExtKeyUsageSyntax (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_ExtKeyUsageSyntax& ASN1C_IMP_ExtKeyUsageSyntax::getCopy (ASN1T_IMP_ExtKeyUsageSyntax* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_ExtKeyUsageSyntax);
      new (pDstData) ASN1T_IMP_ExtKeyUsageSyntax;
   }

   asn1Copy_IMP_ExtKeyUsageSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_ExtKeyUsageSyntax* ASN1C_IMP_ExtKeyUsageSyntax::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_ExtKeyUsageSyntax* pDstData = new ASN1T_IMP_ExtKeyUsageSyntax;

   asn1Copy_IMP_ExtKeyUsageSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_AccessDescription (OSCTXT* pctxt, 
   ASN1T_IMP_AccessDescription* pSrcValue, ASN1T_IMP_AccessDescription*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->accessMethod, (ASN1OBJID*)&pDstValue->accessMethod);

   asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->accessLocation, &pDstValue->accessLocation);

}

ASN1C_IMP_AccessDescription::ASN1C_IMP_AccessDescription (ASN1C_IMP_AccessDescription& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_AccessDescription::ASN1T_IMP_AccessDescription (ASN1C_IMP_AccessDescription& original)
{
   original.getCopy (this);
}

ASN1T_IMP_AccessDescription& ASN1C_IMP_AccessDescription::getCopy (ASN1T_IMP_AccessDescription* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_AccessDescription);
      new (pDstData) ASN1T_IMP_AccessDescription;
   }

   asn1Copy_IMP_AccessDescription (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_AccessDescription* ASN1C_IMP_AccessDescription::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_AccessDescription* pDstData = new ASN1T_IMP_AccessDescription;

   asn1Copy_IMP_AccessDescription (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_AuthorityInfoAccessSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pSrcValue, 
   ASN1T_IMP_AuthorityInfoAccessSyntax* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_AccessDescription* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_AccessDescription* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_AccessDescription);
         pSrcData = (ASN1T_IMP_AccessDescription*) pnode->data;

         asn1Copy_IMP_AccessDescription (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_AuthorityInfoAccessSyntax::ASN1C_IMP_AuthorityInfoAccessSyntax (ASN1C_IMP_AuthorityInfoAccessSyntax& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_AuthorityInfoAccessSyntax*)pList)
{
}

ASN1C_IMP_AuthorityInfoAccessSyntax& ASN1C_IMP_AuthorityInfoAccessSyntax::operator= (ASN1C_IMP_AuthorityInfoAccessSyntax& srcData)
{
   clear ();
   asn1Copy_IMP_AuthorityInfoAccessSyntax (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_AuthorityInfoAccessSyntax& ASN1C_IMP_AuthorityInfoAccessSyntax::getCopy (ASN1T_IMP_AuthorityInfoAccessSyntax* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_AuthorityInfoAccessSyntax);
      new (pDstData) ASN1T_IMP_AuthorityInfoAccessSyntax;
   }

   asn1Copy_IMP_AuthorityInfoAccessSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_AuthorityInfoAccessSyntax* ASN1C_IMP_AuthorityInfoAccessSyntax::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_AuthorityInfoAccessSyntax* pDstData = new ASN1T_IMP_AuthorityInfoAccessSyntax;

   asn1Copy_IMP_AuthorityInfoAccessSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_SubjectInfoAccessSyntax (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pSrcValue, 
   ASN1T_IMP_SubjectInfoAccessSyntax* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_AccessDescription* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_AccessDescription* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_AccessDescription);
         pSrcData = (ASN1T_IMP_AccessDescription*) pnode->data;

         asn1Copy_IMP_AccessDescription (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_SubjectInfoAccessSyntax::ASN1C_IMP_SubjectInfoAccessSyntax (ASN1C_IMP_SubjectInfoAccessSyntax& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_SubjectInfoAccessSyntax*)pList)
{
}

ASN1C_IMP_SubjectInfoAccessSyntax& ASN1C_IMP_SubjectInfoAccessSyntax::operator= (ASN1C_IMP_SubjectInfoAccessSyntax& srcData)
{
   clear ();
   asn1Copy_IMP_SubjectInfoAccessSyntax (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_SubjectInfoAccessSyntax& ASN1C_IMP_SubjectInfoAccessSyntax::getCopy (ASN1T_IMP_SubjectInfoAccessSyntax* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_SubjectInfoAccessSyntax);
      new (pDstData) ASN1T_IMP_SubjectInfoAccessSyntax;
   }

   asn1Copy_IMP_SubjectInfoAccessSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_SubjectInfoAccessSyntax* ASN1C_IMP_SubjectInfoAccessSyntax::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_SubjectInfoAccessSyntax* pDstData = new ASN1T_IMP_SubjectInfoAccessSyntax;

   asn1Copy_IMP_SubjectInfoAccessSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_SubjectDirectoryAttributes (OSCTXT* pctxt, 
   ASN1T_IMP_SubjectDirectoryAttributes* pSrcValue, 
   ASN1T_IMP_SubjectDirectoryAttributes* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Attribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Attribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Attribute);
         pSrcData = (ASN1T_EXP_Attribute*) pnode->data;

         asn1Copy_EXP_Attribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_SubjectDirectoryAttributes::ASN1C_IMP_SubjectDirectoryAttributes (ASN1C_IMP_SubjectDirectoryAttributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_SubjectDirectoryAttributes*)pList)
{
}

ASN1C_IMP_SubjectDirectoryAttributes& ASN1C_IMP_SubjectDirectoryAttributes::operator= (ASN1C_IMP_SubjectDirectoryAttributes& srcData)
{
   clear ();
   asn1Copy_IMP_SubjectDirectoryAttributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_SubjectDirectoryAttributes& ASN1C_IMP_SubjectDirectoryAttributes::getCopy (ASN1T_IMP_SubjectDirectoryAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_SubjectDirectoryAttributes);
      new (pDstData) ASN1T_IMP_SubjectDirectoryAttributes;
   }

   asn1Copy_IMP_SubjectDirectoryAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_SubjectDirectoryAttributes* ASN1C_IMP_SubjectDirectoryAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_SubjectDirectoryAttributes* pDstData = new ASN1T_IMP_SubjectDirectoryAttributes;

   asn1Copy_IMP_SubjectDirectoryAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_RoleSyntax (OSCTXT* pctxt, ASN1T_IMP_RoleSyntax* pSrcValue, 
   ASN1T_IMP_RoleSyntax* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.roleAuthorityPresent) {
      asn1Copy_IMP_GeneralNames (pctxt, &pSrcValue->roleAuthority, &pDstValue->roleAuthority);
   }

   asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->roleName, &pDstValue->roleName);

}

ASN1C_IMP_RoleSyntax::ASN1C_IMP_RoleSyntax (ASN1C_IMP_RoleSyntax& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_RoleSyntax::ASN1T_IMP_RoleSyntax (ASN1C_IMP_RoleSyntax& original)
{
   original.getCopy (this);
}

ASN1T_IMP_RoleSyntax& ASN1C_IMP_RoleSyntax::getCopy (ASN1T_IMP_RoleSyntax* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_RoleSyntax);
      new (pDstData) ASN1T_IMP_RoleSyntax;
   }

   asn1Copy_IMP_RoleSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_RoleSyntax* ASN1C_IMP_RoleSyntax::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_RoleSyntax* pDstData = new ASN1T_IMP_RoleSyntax;

   asn1Copy_IMP_RoleSyntax (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_GeneralSubtree (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralSubtree* pSrcValue, ASN1T_IMP_GeneralSubtree* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->base, &pDstValue->base);

   pDstValue->minimum = pSrcValue->minimum;

   if (pSrcValue->m.maximumPresent) {
      pDstValue->maximum = pSrcValue->maximum;
   }

}

ASN1C_IMP_GeneralSubtree::ASN1C_IMP_GeneralSubtree (ASN1C_IMP_GeneralSubtree& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_GeneralSubtree::ASN1T_IMP_GeneralSubtree (ASN1C_IMP_GeneralSubtree& original)
{
   original.getCopy (this);
}

ASN1T_IMP_GeneralSubtree& ASN1C_IMP_GeneralSubtree::getCopy (ASN1T_IMP_GeneralSubtree* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralSubtree);
      new (pDstData) ASN1T_IMP_GeneralSubtree;
   }

   asn1Copy_IMP_GeneralSubtree (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_GeneralSubtree* ASN1C_IMP_GeneralSubtree::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_GeneralSubtree* pDstData = new ASN1T_IMP_GeneralSubtree;

   asn1Copy_IMP_GeneralSubtree (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_GeneralSubtrees (OSCTXT* pctxt, 
   ASN1T_IMP_GeneralSubtrees* pSrcValue, ASN1T_IMP_GeneralSubtrees* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_GeneralSubtree* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_GeneralSubtree* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_GeneralSubtree);
         pSrcData = (ASN1T_IMP_GeneralSubtree*) pnode->data;

         asn1Copy_IMP_GeneralSubtree (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_IMP_GeneralSubtrees::ASN1C_IMP_GeneralSubtrees (ASN1C_IMP_GeneralSubtrees& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_IMP_GeneralSubtrees*)pList)
{
}

ASN1C_IMP_GeneralSubtrees& ASN1C_IMP_GeneralSubtrees::operator= (ASN1C_IMP_GeneralSubtrees& srcData)
{
   clear ();
   asn1Copy_IMP_GeneralSubtrees (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_IMP_GeneralSubtrees& ASN1C_IMP_GeneralSubtrees::getCopy (ASN1T_IMP_GeneralSubtrees* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_GeneralSubtrees);
      new (pDstData) ASN1T_IMP_GeneralSubtrees;
   }

   asn1Copy_IMP_GeneralSubtrees (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_GeneralSubtrees* ASN1C_IMP_GeneralSubtrees::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_GeneralSubtrees* pDstData = new ASN1T_IMP_GeneralSubtrees;

   asn1Copy_IMP_GeneralSubtrees (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_NameConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_NameConstraints* pSrcValue, ASN1T_IMP_NameConstraints* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.permittedSubtreesPresent) {
      asn1Copy_IMP_GeneralSubtrees (pctxt, &pSrcValue->permittedSubtrees, &pDstValue->permittedSubtrees);
   }

   if (pSrcValue->m.excludedSubtreesPresent) {
      asn1Copy_IMP_GeneralSubtrees (pctxt, &pSrcValue->excludedSubtrees, &pDstValue->excludedSubtrees);
   }

}

ASN1C_IMP_NameConstraints::ASN1C_IMP_NameConstraints (ASN1C_IMP_NameConstraints& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_NameConstraints::ASN1T_IMP_NameConstraints (ASN1C_IMP_NameConstraints& original)
{
   original.getCopy (this);
}

ASN1T_IMP_NameConstraints& ASN1C_IMP_NameConstraints::getCopy (ASN1T_IMP_NameConstraints* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_NameConstraints);
      new (pDstData) ASN1T_IMP_NameConstraints;
   }

   asn1Copy_IMP_NameConstraints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_NameConstraints* ASN1C_IMP_NameConstraints::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_NameConstraints* pDstData = new ASN1T_IMP_NameConstraints;

   asn1Copy_IMP_NameConstraints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_PolicyConstraints (OSCTXT* pctxt, 
   ASN1T_IMP_PolicyConstraints* pSrcValue, ASN1T_IMP_PolicyConstraints*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.requireExplicitPolicyPresent) {
      pDstValue->requireExplicitPolicy = pSrcValue->requireExplicitPolicy;
   }

   if (pSrcValue->m.inhibitPolicyMappingPresent) {
      pDstValue->inhibitPolicyMapping = pSrcValue->inhibitPolicyMapping;
   }

}

ASN1C_IMP_PolicyConstraints::ASN1C_IMP_PolicyConstraints (ASN1C_IMP_PolicyConstraints& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_PolicyConstraints::ASN1T_IMP_PolicyConstraints (ASN1C_IMP_PolicyConstraints& original)
{
   original.getCopy (this);
}

ASN1T_IMP_PolicyConstraints& ASN1C_IMP_PolicyConstraints::getCopy (ASN1T_IMP_PolicyConstraints* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_PolicyConstraints);
      new (pDstData) ASN1T_IMP_PolicyConstraints;
   }

   asn1Copy_IMP_PolicyConstraints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_PolicyConstraints* ASN1C_IMP_PolicyConstraints::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_PolicyConstraints* pDstData = new ASN1T_IMP_PolicyConstraints;

   asn1Copy_IMP_PolicyConstraints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_IMP_IssuingDistributionPoint (OSCTXT* pctxt, 
   ASN1T_IMP_IssuingDistributionPoint* pSrcValue, 
   ASN1T_IMP_IssuingDistributionPoint* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.distributionPointPresent) {
      asn1Copy_IMP_DistributionPointName (pctxt, &pSrcValue->distributionPoint, &pDstValue->distributionPoint);
   }

   pDstValue->onlyContainsUserCerts = pSrcValue->onlyContainsUserCerts;

   pDstValue->onlyContainsCACerts = pSrcValue->onlyContainsCACerts;

   if (pSrcValue->m.onlySomeReasonsPresent) {
      asn1Copy_IMP_ReasonFlags (pctxt, &pSrcValue->onlySomeReasons, &pDstValue->onlySomeReasons);
   }

   pDstValue->indirectCRL = pSrcValue->indirectCRL;

   pDstValue->onlyContainsAttributeCerts = pSrcValue->onlyContainsAttributeCerts;

}

ASN1C_IMP_IssuingDistributionPoint::ASN1C_IMP_IssuingDistributionPoint (ASN1C_IMP_IssuingDistributionPoint& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_IMP_IssuingDistributionPoint::ASN1T_IMP_IssuingDistributionPoint (ASN1C_IMP_IssuingDistributionPoint& original)
{
   original.getCopy (this);
}

ASN1T_IMP_IssuingDistributionPoint& ASN1C_IMP_IssuingDistributionPoint::getCopy (ASN1T_IMP_IssuingDistributionPoint* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_IMP_IssuingDistributionPoint);
      new (pDstData) ASN1T_IMP_IssuingDistributionPoint;
   }

   asn1Copy_IMP_IssuingDistributionPoint (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_IMP_IssuingDistributionPoint* ASN1C_IMP_IssuingDistributionPoint::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_IMP_IssuingDistributionPoint* pDstData = new ASN1T_IMP_IssuingDistributionPoint;

   asn1Copy_IMP_IssuingDistributionPoint (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

