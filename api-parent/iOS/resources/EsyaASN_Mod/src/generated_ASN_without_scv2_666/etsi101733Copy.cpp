/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "etsi101733.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_ETSI101733_OtherHashValue (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHashValue* pSrcValue, ASN1T_ETSI101733_OtherHashValue*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_OtherHashValue::ASN1C_ETSI101733_OtherHashValue (ASN1C_ETSI101733_OtherHashValue& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OtherHashValue& ASN1C_ETSI101733_OtherHashValue::getCopy (ASN1T_ETSI101733_OtherHashValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherHashValue);
      new (pDstData) ASN1T_ETSI101733_OtherHashValue;
   }

   asn1Copy_ETSI101733_OtherHashValue (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_ETSI101733_OtherHashValue* ASN1C_ETSI101733_OtherHashValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherHashValue* pDstData = new ASN1T_ETSI101733_OtherHashValue;

   asn1Copy_ETSI101733_OtherHashValue (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_ETSI101733_SigPolicyId (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyId* pSrcValue, ASN1T_ETSI101733_SigPolicyId*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_ETSI101733_SigPolicyId::ASN1C_ETSI101733_SigPolicyId (ASN1C_ETSI101733_SigPolicyId& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_SigPolicyId& ASN1C_ETSI101733_SigPolicyId::getCopy (ASN1T_ETSI101733_SigPolicyId* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SigPolicyId);
      new (pDstData) ASN1T_ETSI101733_SigPolicyId;
   }

   asn1Copy_ETSI101733_SigPolicyId (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_ETSI101733_SigPolicyId* ASN1C_ETSI101733_SigPolicyId::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SigPolicyId* pDstData = new ASN1T_ETSI101733_SigPolicyId;

   asn1Copy_ETSI101733_SigPolicyId (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_ETSI101733_OtherHashAlgAndValue (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pSrcValue, 
   ASN1T_ETSI101733_OtherHashAlgAndValue* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->hashAlgorithm, &pDstValue->hashAlgorithm);

   asn1Copy_ETSI101733_OtherHashValue (pctxt, &pSrcValue->hashValue, &pDstValue->hashValue);

}

ASN1C_ETSI101733_OtherHashAlgAndValue::ASN1C_ETSI101733_OtherHashAlgAndValue (ASN1C_ETSI101733_OtherHashAlgAndValue& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OtherHashAlgAndValue::ASN1T_ETSI101733_OtherHashAlgAndValue (ASN1C_ETSI101733_OtherHashAlgAndValue& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OtherHashAlgAndValue& ASN1C_ETSI101733_OtherHashAlgAndValue::getCopy (ASN1T_ETSI101733_OtherHashAlgAndValue* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherHashAlgAndValue);
      new (pDstData) ASN1T_ETSI101733_OtherHashAlgAndValue;
   }

   asn1Copy_ETSI101733_OtherHashAlgAndValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OtherHashAlgAndValue* ASN1C_ETSI101733_OtherHashAlgAndValue::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherHashAlgAndValue* pDstData = new ASN1T_ETSI101733_OtherHashAlgAndValue;

   asn1Copy_ETSI101733_OtherHashAlgAndValue (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SigPolicyHash (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyHash* pSrcValue, ASN1T_ETSI101733_SigPolicyHash*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ETSI101733_OtherHashAlgAndValue (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_SigPolicyHash::ASN1C_ETSI101733_SigPolicyHash (ASN1C_ETSI101733_SigPolicyHash& original) :
   ASN1C_ETSI101733_OtherHashAlgAndValue (original)
{
}

ASN1T_ETSI101733_SigPolicyHash& ASN1C_ETSI101733_SigPolicyHash::getCopy (ASN1T_ETSI101733_SigPolicyHash* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SigPolicyHash);
      new (pDstData) ASN1T_ETSI101733_SigPolicyHash;
   }

   asn1Copy_ETSI101733_SigPolicyHash (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SigPolicyHash* ASN1C_ETSI101733_SigPolicyHash::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SigPolicyHash* pDstData = new ASN1T_ETSI101733_SigPolicyHash;

   asn1Copy_ETSI101733_SigPolicyHash (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SPuri (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SPuri pSrcValue, ASN1T_ETSI101733_SPuri* pDstValue)
{
   RTCOPYCHARSTR (pctxt, (char *)pSrcValue, (char **)pDstValue);
}

ASN1C_ETSI101733_SPuri::ASN1C_ETSI101733_SPuri (ASN1C_ETSI101733_SPuri& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_SPuri& ASN1C_ETSI101733_SPuri::getCopy (ASN1T_ETSI101733_SPuri* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SPuri);
      new (pDstData) ASN1T_ETSI101733_SPuri;
   }

   asn1Copy_ETSI101733_SPuri (pctxt, msgData, pDstData);

   return *pDstData;
}

ASN1T_ETSI101733_SPuri* ASN1C_ETSI101733_SPuri::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SPuri* pDstData = new ASN1T_ETSI101733_SPuri;

   asn1Copy_ETSI101733_SPuri (pctxt, msgData, pDstData);

   return pDstData;
}

void asn1Copy_ETSI101733_ContentTimestamp (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentTimestamp* pSrcValue, 
   ASN1T_ETSI101733_ContentTimestamp* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_TSP_TimeStampToken (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_ContentTimestamp::ASN1C_ETSI101733_ContentTimestamp (ASN1C_ETSI101733_ContentTimestamp& original) :
   ASN1C_TSP_TimeStampToken (original)
{
}

ASN1T_ETSI101733_ContentTimestamp& ASN1C_ETSI101733_ContentTimestamp::getCopy (ASN1T_ETSI101733_ContentTimestamp* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_ContentTimestamp);
      new (pDstData) ASN1T_ETSI101733_ContentTimestamp;
   }

   asn1Copy_ETSI101733_ContentTimestamp (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_ContentTimestamp* ASN1C_ETSI101733_ContentTimestamp::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_ContentTimestamp* pDstData = new ASN1T_ETSI101733_ContentTimestamp;

   asn1Copy_ETSI101733_ContentTimestamp (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SignatureTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pSrcValue, 
   ASN1T_ETSI101733_SignatureTimeStampToken* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_TSP_TimeStampToken (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_SignatureTimeStampToken::ASN1C_ETSI101733_SignatureTimeStampToken (ASN1C_ETSI101733_SignatureTimeStampToken& original) :
   ASN1C_TSP_TimeStampToken (original)
{
}

ASN1T_ETSI101733_SignatureTimeStampToken& ASN1C_ETSI101733_SignatureTimeStampToken::getCopy (ASN1T_ETSI101733_SignatureTimeStampToken* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SignatureTimeStampToken);
      new (pDstData) ASN1T_ETSI101733_SignatureTimeStampToken;
   }

   asn1Copy_ETSI101733_SignatureTimeStampToken (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SignatureTimeStampToken* ASN1C_ETSI101733_SignatureTimeStampToken::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SignatureTimeStampToken* pDstData = new ASN1T_ETSI101733_SignatureTimeStampToken;

   asn1Copy_ETSI101733_SignatureTimeStampToken (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_ESCTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ESCTimeStampToken* pSrcValue, 
   ASN1T_ETSI101733_ESCTimeStampToken* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_TSP_TimeStampToken (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_ESCTimeStampToken::ASN1C_ETSI101733_ESCTimeStampToken (ASN1C_ETSI101733_ESCTimeStampToken& original) :
   ASN1C_TSP_TimeStampToken (original)
{
}

ASN1T_ETSI101733_ESCTimeStampToken& ASN1C_ETSI101733_ESCTimeStampToken::getCopy (ASN1T_ETSI101733_ESCTimeStampToken* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_ESCTimeStampToken);
      new (pDstData) ASN1T_ETSI101733_ESCTimeStampToken;
   }

   asn1Copy_ETSI101733_ESCTimeStampToken (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_ESCTimeStampToken* ASN1C_ETSI101733_ESCTimeStampToken::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_ESCTimeStampToken* pDstData = new ASN1T_ETSI101733_ESCTimeStampToken;

   asn1Copy_ETSI101733_ESCTimeStampToken (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_TimestampedCertsCRLs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pSrcValue, 
   ASN1T_ETSI101733_TimestampedCertsCRLs* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_TSP_TimeStampToken (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_TimestampedCertsCRLs::ASN1C_ETSI101733_TimestampedCertsCRLs (ASN1C_ETSI101733_TimestampedCertsCRLs& original) :
   ASN1C_TSP_TimeStampToken (original)
{
}

ASN1T_ETSI101733_TimestampedCertsCRLs& ASN1C_ETSI101733_TimestampedCertsCRLs::getCopy (ASN1T_ETSI101733_TimestampedCertsCRLs* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_TimestampedCertsCRLs);
      new (pDstData) ASN1T_ETSI101733_TimestampedCertsCRLs;
   }

   asn1Copy_ETSI101733_TimestampedCertsCRLs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_TimestampedCertsCRLs* ASN1C_ETSI101733_TimestampedCertsCRLs::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_TimestampedCertsCRLs* pDstData = new ASN1T_ETSI101733_TimestampedCertsCRLs;

   asn1Copy_ETSI101733_TimestampedCertsCRLs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_ArchiveTimeStampToken (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pSrcValue, 
   ASN1T_ETSI101733_ArchiveTimeStampToken* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_TSP_TimeStampToken (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_ArchiveTimeStampToken::ASN1C_ETSI101733_ArchiveTimeStampToken (ASN1C_ETSI101733_ArchiveTimeStampToken& original) :
   ASN1C_TSP_TimeStampToken (original)
{
}

ASN1T_ETSI101733_ArchiveTimeStampToken& ASN1C_ETSI101733_ArchiveTimeStampToken::getCopy (ASN1T_ETSI101733_ArchiveTimeStampToken* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_ArchiveTimeStampToken);
      new (pDstData) ASN1T_ETSI101733_ArchiveTimeStampToken;
   }

   asn1Copy_ETSI101733_ArchiveTimeStampToken (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_ArchiveTimeStampToken* ASN1C_ETSI101733_ArchiveTimeStampToken::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_ArchiveTimeStampToken* pDstData = new ASN1T_ETSI101733_ArchiveTimeStampToken;

   asn1Copy_ETSI101733_ArchiveTimeStampToken (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_ContentIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentIdentifier* pSrcValue, 
   ASN1T_ETSI101733_ContentIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_ContentIdentifier::ASN1C_ETSI101733_ContentIdentifier (ASN1C_ETSI101733_ContentIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_ContentIdentifier& ASN1C_ETSI101733_ContentIdentifier::getCopy (ASN1T_ETSI101733_ContentIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_ContentIdentifier);
      new (pDstData) ASN1T_ETSI101733_ContentIdentifier;
   }

   asn1Copy_ETSI101733_ContentIdentifier (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_ETSI101733_ContentIdentifier* ASN1C_ETSI101733_ContentIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_ContentIdentifier* pDstData = new ASN1T_ETSI101733_ContentIdentifier;

   asn1Copy_ETSI101733_ContentIdentifier (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_ETSI101733_CommitmentTypeIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pSrcValue, 
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_ETSI101733_CommitmentTypeIdentifier::ASN1C_ETSI101733_CommitmentTypeIdentifier (ASN1C_ETSI101733_CommitmentTypeIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_CommitmentTypeIdentifier& ASN1C_ETSI101733_CommitmentTypeIdentifier::getCopy (ASN1T_ETSI101733_CommitmentTypeIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CommitmentTypeIdentifier);
      new (pDstData) ASN1T_ETSI101733_CommitmentTypeIdentifier;
   }

   asn1Copy_ETSI101733_CommitmentTypeIdentifier (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_ETSI101733_CommitmentTypeIdentifier* ASN1C_ETSI101733_CommitmentTypeIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CommitmentTypeIdentifier* pDstData = new ASN1T_ETSI101733_CommitmentTypeIdentifier;

   asn1Copy_ETSI101733_CommitmentTypeIdentifier (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_ETSI101733_CertifiedAttributes (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CertifiedAttributes* pSrcValue, 
   ASN1T_ETSI101733_CertifiedAttributes* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ATTRCERT_AttributeCertificate (pctxt, pSrcValue, pDstValue);
}

ASN1C_ETSI101733_CertifiedAttributes::ASN1C_ETSI101733_CertifiedAttributes (ASN1C_ETSI101733_CertifiedAttributes& original) :
   ASN1C_ATTRCERT_AttributeCertificate (original)
{
}

ASN1T_ETSI101733_CertifiedAttributes& ASN1C_ETSI101733_CertifiedAttributes::getCopy (ASN1T_ETSI101733_CertifiedAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CertifiedAttributes);
      new (pDstData) ASN1T_ETSI101733_CertifiedAttributes;
   }

   asn1Copy_ETSI101733_CertifiedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CertifiedAttributes* ASN1C_ETSI101733_CertifiedAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CertifiedAttributes* pDstData = new ASN1T_ETSI101733_CertifiedAttributes;

   asn1Copy_ETSI101733_CertifiedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OtherHash (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherHash* pSrcValue, ASN1T_ETSI101733_OtherHash*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* sha1Hash */
      case 1:
         pDstValue->u.sha1Hash = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherHashValue);
         new (pDstValue->u.sha1Hash) ASN1T_ETSI101733_OtherHashValue;
         asn1Copy_ETSI101733_OtherHashValue (pctxt, pSrcValue->u.sha1Hash, pDstValue->u.sha1Hash);
         break;

      /* otherHash */
      case 2:
         pDstValue->u.otherHash = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherHashAlgAndValue);
         new (pDstValue->u.otherHash) ASN1T_ETSI101733_OtherHashAlgAndValue;
         asn1Copy_ETSI101733_OtherHashAlgAndValue (pctxt, pSrcValue->u.otherHash, pDstValue->u.otherHash);
         break;

   }
}

ASN1C_ETSI101733_OtherHash::ASN1C_ETSI101733_OtherHash (ASN1C_ETSI101733_OtherHash& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OtherHash::ASN1T_ETSI101733_OtherHash (ASN1C_ETSI101733_OtherHash& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OtherHash& ASN1C_ETSI101733_OtherHash::getCopy (ASN1T_ETSI101733_OtherHash* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherHash);
      new (pDstData) ASN1T_ETSI101733_OtherHash;
   }

   asn1Copy_ETSI101733_OtherHash (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OtherHash* ASN1C_ETSI101733_OtherHash::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherHash* pDstData = new ASN1T_ETSI101733_OtherHash;

   asn1Copy_ETSI101733_OtherHash (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OtherCertID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherCertID* pSrcValue, ASN1T_ETSI101733_OtherCertID*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_ETSI101733_OtherHash (pctxt, &pSrcValue->otherCertHash, &pDstValue->otherCertHash);

   if (pSrcValue->m.issuerSerialPresent) {
      asn1Copy_ATTRCERT_IssuerSerial (pctxt, &pSrcValue->issuerSerial, &pDstValue->issuerSerial);
   }

}

ASN1C_ETSI101733_OtherCertID::ASN1C_ETSI101733_OtherCertID (ASN1C_ETSI101733_OtherCertID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OtherCertID::ASN1T_ETSI101733_OtherCertID (ASN1C_ETSI101733_OtherCertID& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OtherCertID& ASN1C_ETSI101733_OtherCertID::getCopy (ASN1T_ETSI101733_OtherCertID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherCertID);
      new (pDstData) ASN1T_ETSI101733_OtherCertID;
   }

   asn1Copy_ETSI101733_OtherCertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OtherCertID* ASN1C_ETSI101733_OtherCertID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherCertID* pDstData = new ASN1T_ETSI101733_OtherCertID;

   asn1Copy_ETSI101733_OtherCertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733__SeqOfETSI101733_OtherCertID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_OtherCertID* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_OtherCertID* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_OtherCertID);
         pSrcData = (ASN1T_ETSI101733_OtherCertID*) pnode->data;

         asn1Copy_ETSI101733_OtherCertID (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID (ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID*)pList)
{
}

ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID& ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::operator= (ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID& srcData)
{
   clear ();
   asn1Copy_ETSI101733__SeqOfETSI101733_OtherCertID (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID& ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::getCopy (ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID);
      new (pDstData) ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID;
   }

   asn1Copy_ETSI101733__SeqOfETSI101733_OtherCertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* ASN1C_ETSI101733__SeqOfETSI101733_OtherCertID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID* pDstData = new ASN1T_ETSI101733__SeqOfETSI101733_OtherCertID;

   asn1Copy_ETSI101733__SeqOfETSI101733_OtherCertID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733__SeqOfETSI101733_PolicyInformation (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_IMP_PolicyInformation* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_IMP_PolicyInformation* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_IMP_PolicyInformation);
         pSrcData = (ASN1T_IMP_PolicyInformation*) pnode->data;

         asn1Copy_IMP_PolicyInformation (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation (ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation*)pList)
{
}

ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation& ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::operator= (ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation& srcData)
{
   clear ();
   asn1Copy_ETSI101733__SeqOfETSI101733_PolicyInformation (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation& ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::getCopy (ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation);
      new (pDstData) ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation;
   }

   asn1Copy_ETSI101733__SeqOfETSI101733_PolicyInformation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* ASN1C_ETSI101733__SeqOfETSI101733_PolicyInformation::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation* pDstData = new ASN1T_ETSI101733__SeqOfETSI101733_PolicyInformation;

   asn1Copy_ETSI101733__SeqOfETSI101733_PolicyInformation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OtherSigningCertificate (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherSigningCertificate* pSrcValue, 
   ASN1T_ETSI101733_OtherSigningCertificate* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_ETSI101733__SeqOfETSI101733_OtherCertID (pctxt, &pSrcValue->certs, &pDstValue->certs);

   if (pSrcValue->m.policiesPresent) {
      asn1Copy_ETSI101733__SeqOfETSI101733_PolicyInformation (pctxt, &pSrcValue->policies, &pDstValue->policies);
   }

}

ASN1C_ETSI101733_OtherSigningCertificate::ASN1C_ETSI101733_OtherSigningCertificate (ASN1C_ETSI101733_OtherSigningCertificate& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OtherSigningCertificate::ASN1T_ETSI101733_OtherSigningCertificate (ASN1C_ETSI101733_OtherSigningCertificate& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OtherSigningCertificate& ASN1C_ETSI101733_OtherSigningCertificate::getCopy (ASN1T_ETSI101733_OtherSigningCertificate* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherSigningCertificate);
      new (pDstData) ASN1T_ETSI101733_OtherSigningCertificate;
   }

   asn1Copy_ETSI101733_OtherSigningCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OtherSigningCertificate* ASN1C_ETSI101733_OtherSigningCertificate::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherSigningCertificate* pDstData = new ASN1T_ETSI101733_OtherSigningCertificate;

   asn1Copy_ETSI101733_OtherSigningCertificate (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SigPolicyQualifierInfo (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pSrcValue, 
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   rtCopyOID ((ASN1OBJID*)&pSrcValue->sigPolicyQualifierId, (ASN1OBJID*)&pDstValue->sigPolicyQualifierId);

   if (pSrcValue->m.qualifierPresent) {
      rtCopyOpenType (pctxt, &pSrcValue->qualifier, &pDstValue->qualifier);
   }

}

ASN1C_ETSI101733_SigPolicyQualifierInfo::ASN1C_ETSI101733_SigPolicyQualifierInfo (ASN1C_ETSI101733_SigPolicyQualifierInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_SigPolicyQualifierInfo::ASN1T_ETSI101733_SigPolicyQualifierInfo (ASN1C_ETSI101733_SigPolicyQualifierInfo& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_SigPolicyQualifierInfo& ASN1C_ETSI101733_SigPolicyQualifierInfo::getCopy (ASN1T_ETSI101733_SigPolicyQualifierInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SigPolicyQualifierInfo);
      new (pDstData) ASN1T_ETSI101733_SigPolicyQualifierInfo;
   }

   asn1Copy_ETSI101733_SigPolicyQualifierInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SigPolicyQualifierInfo* ASN1C_ETSI101733_SigPolicyQualifierInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SigPolicyQualifierInfo* pDstData = new ASN1T_ETSI101733_SigPolicyQualifierInfo;

   asn1Copy_ETSI101733_SigPolicyQualifierInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pSrcValue, 
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_SigPolicyQualifierInfo* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_SigPolicyQualifierInfo* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_SigPolicyQualifierInfo);
         pSrcData = (ASN1T_ETSI101733_SigPolicyQualifierInfo*) pnode->data;

         asn1Copy_ETSI101733_SigPolicyQualifierInfo (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers*)pList)
{
}

ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::operator= (ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& srcData)
{
   clear ();
   asn1Copy_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers& ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::getCopy (ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers);
      new (pDstData) ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers;
   }

   asn1Copy_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* ASN1C_ETSI101733_SignaturePolicyId_sigPolicyQualifiers::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers* pDstData = new ASN1T_ETSI101733_SignaturePolicyId_sigPolicyQualifiers;

   asn1Copy_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SignaturePolicyId (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicyId* pSrcValue, 
   ASN1T_ETSI101733_SignaturePolicyId* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_ETSI101733_SigPolicyId (pctxt, &pSrcValue->sigPolicyId, &pDstValue->sigPolicyId);

   asn1Copy_ETSI101733_SigPolicyHash (pctxt, &pSrcValue->sigPolicyHash, &pDstValue->sigPolicyHash);

   if (pSrcValue->m.sigPolicyQualifiersPresent) {
      asn1Copy_ETSI101733_SignaturePolicyId_sigPolicyQualifiers (pctxt, &pSrcValue->sigPolicyQualifiers, &pDstValue->sigPolicyQualifiers);
   }

}

ASN1C_ETSI101733_SignaturePolicyId::ASN1C_ETSI101733_SignaturePolicyId (ASN1C_ETSI101733_SignaturePolicyId& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_SignaturePolicyId::ASN1T_ETSI101733_SignaturePolicyId (ASN1C_ETSI101733_SignaturePolicyId& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_SignaturePolicyId& ASN1C_ETSI101733_SignaturePolicyId::getCopy (ASN1T_ETSI101733_SignaturePolicyId* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SignaturePolicyId);
      new (pDstData) ASN1T_ETSI101733_SignaturePolicyId;
   }

   asn1Copy_ETSI101733_SignaturePolicyId (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SignaturePolicyId* ASN1C_ETSI101733_SignaturePolicyId::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SignaturePolicyId* pDstData = new ASN1T_ETSI101733_SignaturePolicyId;

   asn1Copy_ETSI101733_SignaturePolicyId (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SignaturePolicy (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignaturePolicy* pSrcValue, 
   ASN1T_ETSI101733_SignaturePolicy* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* signaturePolicyImplied */
      case 1:
         break;

      /* signaturePolicyId */
      case 2:
         pDstValue->u.signaturePolicyId = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SignaturePolicyId);
         new (pDstValue->u.signaturePolicyId) ASN1T_ETSI101733_SignaturePolicyId;
         asn1Copy_ETSI101733_SignaturePolicyId (pctxt, pSrcValue->u.signaturePolicyId, pDstValue->u.signaturePolicyId);
         break;

   }
}

ASN1C_ETSI101733_SignaturePolicy::ASN1C_ETSI101733_SignaturePolicy (ASN1C_ETSI101733_SignaturePolicy& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_SignaturePolicy::ASN1T_ETSI101733_SignaturePolicy (ASN1C_ETSI101733_SignaturePolicy& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_SignaturePolicy& ASN1C_ETSI101733_SignaturePolicy::getCopy (ASN1T_ETSI101733_SignaturePolicy* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SignaturePolicy);
      new (pDstData) ASN1T_ETSI101733_SignaturePolicy;
   }

   asn1Copy_ETSI101733_SignaturePolicy (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SignaturePolicy* ASN1C_ETSI101733_SignaturePolicy::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SignaturePolicy* pDstData = new ASN1T_ETSI101733_SignaturePolicy;

   asn1Copy_ETSI101733_SignaturePolicy (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_DisplayText (OSCTXT* pctxt, 
   ASN1T_ETSI101733_DisplayText* pSrcValue, ASN1T_ETSI101733_DisplayText*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* utf8String */
      case 1:
         pDstValue->u.utf8String = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->u.utf8String);
         break;

      /* visibleString */
      case 2:
         RTCOPYCHARSTR (pctxt, (char *)pSrcValue->u.visibleString, (char **)&pDstValue->u.visibleString);
         break;

      /* bmpString */
      case 3:
         pDstValue->u.bmpString = rtxMemAllocType (pctxt, ASN1TBMPString);
         new (pDstValue->u.bmpString) ASN1TBMPString;
         rtCopy16BitCharStr (pctxt, pSrcValue->u.bmpString, pDstValue->u.bmpString);
         break;

   }
}

ASN1C_ETSI101733_DisplayText::ASN1C_ETSI101733_DisplayText (ASN1C_ETSI101733_DisplayText& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_DisplayText::ASN1T_ETSI101733_DisplayText (ASN1C_ETSI101733_DisplayText& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_DisplayText& ASN1C_ETSI101733_DisplayText::getCopy (ASN1T_ETSI101733_DisplayText* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_DisplayText);
      new (pDstData) ASN1T_ETSI101733_DisplayText;
   }

   asn1Copy_ETSI101733_DisplayText (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_DisplayText* ASN1C_ETSI101733_DisplayText::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_DisplayText* pDstData = new ASN1T_ETSI101733_DisplayText;

   asn1Copy_ETSI101733_DisplayText (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_NoticeReference_noticeNumbers (OSCTXT* pctxt, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pSrcValue, 
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      OSINT32* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         OSINT32* pDstData = rtxMemAllocTypeZ (pctxt, OSINT32);
         pSrcData = (OSINT32*) pnode->data;

         *pDstData = *pSrcData;

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_NoticeReference_noticeNumbers::ASN1C_ETSI101733_NoticeReference_noticeNumbers (ASN1C_ETSI101733_NoticeReference_noticeNumbers& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_NoticeReference_noticeNumbers*)pList)
{
}

ASN1C_ETSI101733_NoticeReference_noticeNumbers& ASN1C_ETSI101733_NoticeReference_noticeNumbers::operator= (ASN1C_ETSI101733_NoticeReference_noticeNumbers& srcData)
{
   clear ();
   asn1Copy_ETSI101733_NoticeReference_noticeNumbers (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_NoticeReference_noticeNumbers& ASN1C_ETSI101733_NoticeReference_noticeNumbers::getCopy (ASN1T_ETSI101733_NoticeReference_noticeNumbers* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_NoticeReference_noticeNumbers);
      new (pDstData) ASN1T_ETSI101733_NoticeReference_noticeNumbers;
   }

   asn1Copy_ETSI101733_NoticeReference_noticeNumbers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_NoticeReference_noticeNumbers* ASN1C_ETSI101733_NoticeReference_noticeNumbers::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_NoticeReference_noticeNumbers* pDstData = new ASN1T_ETSI101733_NoticeReference_noticeNumbers;

   asn1Copy_ETSI101733_NoticeReference_noticeNumbers (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_NoticeReference (OSCTXT* pctxt, 
   ASN1T_ETSI101733_NoticeReference* pSrcValue, 
   ASN1T_ETSI101733_NoticeReference* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ETSI101733_DisplayText (pctxt, &pSrcValue->organization, &pDstValue->organization);

   asn1Copy_ETSI101733_NoticeReference_noticeNumbers (pctxt, &pSrcValue->noticeNumbers, &pDstValue->noticeNumbers);

}

ASN1C_ETSI101733_NoticeReference::ASN1C_ETSI101733_NoticeReference (ASN1C_ETSI101733_NoticeReference& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_NoticeReference::ASN1T_ETSI101733_NoticeReference (ASN1C_ETSI101733_NoticeReference& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_NoticeReference& ASN1C_ETSI101733_NoticeReference::getCopy (ASN1T_ETSI101733_NoticeReference* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_NoticeReference);
      new (pDstData) ASN1T_ETSI101733_NoticeReference;
   }

   asn1Copy_ETSI101733_NoticeReference (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_NoticeReference* ASN1C_ETSI101733_NoticeReference::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_NoticeReference* pDstData = new ASN1T_ETSI101733_NoticeReference;

   asn1Copy_ETSI101733_NoticeReference (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SPUserNotice (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SPUserNotice* pSrcValue, ASN1T_ETSI101733_SPUserNotice*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.noticeRefPresent) {
      asn1Copy_ETSI101733_NoticeReference (pctxt, &pSrcValue->noticeRef, &pDstValue->noticeRef);
   }

   if (pSrcValue->m.explicitTextPresent) {
      asn1Copy_ETSI101733_DisplayText (pctxt, &pSrcValue->explicitText, &pDstValue->explicitText);
   }

}

ASN1C_ETSI101733_SPUserNotice::ASN1C_ETSI101733_SPUserNotice (ASN1C_ETSI101733_SPUserNotice& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_SPUserNotice::ASN1T_ETSI101733_SPUserNotice (ASN1C_ETSI101733_SPUserNotice& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_SPUserNotice& ASN1C_ETSI101733_SPUserNotice::getCopy (ASN1T_ETSI101733_SPUserNotice* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SPUserNotice);
      new (pDstData) ASN1T_ETSI101733_SPUserNotice;
   }

   asn1Copy_ETSI101733_SPUserNotice (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SPUserNotice* ASN1C_ETSI101733_SPUserNotice::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SPUserNotice* pDstData = new ASN1T_ETSI101733_SPUserNotice;

   asn1Copy_ETSI101733_SPUserNotice (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CompleteCertificateRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pSrcValue, 
   ASN1T_ETSI101733_CompleteCertificateRefs* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_OtherCertID* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_OtherCertID* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_OtherCertID);
         pSrcData = (ASN1T_ETSI101733_OtherCertID*) pnode->data;

         asn1Copy_ETSI101733_OtherCertID (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_CompleteCertificateRefs::ASN1C_ETSI101733_CompleteCertificateRefs (ASN1C_ETSI101733_CompleteCertificateRefs& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_CompleteCertificateRefs*)pList)
{
}

ASN1C_ETSI101733_CompleteCertificateRefs& ASN1C_ETSI101733_CompleteCertificateRefs::operator= (ASN1C_ETSI101733_CompleteCertificateRefs& srcData)
{
   clear ();
   asn1Copy_ETSI101733_CompleteCertificateRefs (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_CompleteCertificateRefs& ASN1C_ETSI101733_CompleteCertificateRefs::getCopy (ASN1T_ETSI101733_CompleteCertificateRefs* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CompleteCertificateRefs);
      new (pDstData) ASN1T_ETSI101733_CompleteCertificateRefs;
   }

   asn1Copy_ETSI101733_CompleteCertificateRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CompleteCertificateRefs* ASN1C_ETSI101733_CompleteCertificateRefs::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CompleteCertificateRefs* pDstData = new ASN1T_ETSI101733_CompleteCertificateRefs;

   asn1Copy_ETSI101733_CompleteCertificateRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CrlIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlIdentifier* pSrcValue, ASN1T_ETSI101733_CrlIdentifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_EXP_Name (pctxt, &pSrcValue->crlissuer, &pDstValue->crlissuer);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->crlIssuedTime, (char **)&pDstValue->crlIssuedTime);

   if (pSrcValue->m.crlNumberPresent) {
      asn1Copy_IMP_CRLNumber (pctxt, &pSrcValue->crlNumber, &pDstValue->crlNumber);
   }

}

ASN1C_ETSI101733_CrlIdentifier::ASN1C_ETSI101733_CrlIdentifier (ASN1C_ETSI101733_CrlIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_CrlIdentifier::ASN1T_ETSI101733_CrlIdentifier (ASN1C_ETSI101733_CrlIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_CrlIdentifier& ASN1C_ETSI101733_CrlIdentifier::getCopy (ASN1T_ETSI101733_CrlIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CrlIdentifier);
      new (pDstData) ASN1T_ETSI101733_CrlIdentifier;
   }

   asn1Copy_ETSI101733_CrlIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CrlIdentifier* ASN1C_ETSI101733_CrlIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CrlIdentifier* pDstData = new ASN1T_ETSI101733_CrlIdentifier;

   asn1Copy_ETSI101733_CrlIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CrlValidatedID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlValidatedID* pSrcValue, ASN1T_ETSI101733_CrlValidatedID*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_ETSI101733_OtherHash (pctxt, &pSrcValue->crlHash, &pDstValue->crlHash);

   if (pSrcValue->m.crlIdentifierPresent) {
      asn1Copy_ETSI101733_CrlIdentifier (pctxt, &pSrcValue->crlIdentifier, &pDstValue->crlIdentifier);
   }

}

ASN1C_ETSI101733_CrlValidatedID::ASN1C_ETSI101733_CrlValidatedID (ASN1C_ETSI101733_CrlValidatedID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_CrlValidatedID::ASN1T_ETSI101733_CrlValidatedID (ASN1C_ETSI101733_CrlValidatedID& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_CrlValidatedID& ASN1C_ETSI101733_CrlValidatedID::getCopy (ASN1T_ETSI101733_CrlValidatedID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CrlValidatedID);
      new (pDstData) ASN1T_ETSI101733_CrlValidatedID;
   }

   asn1Copy_ETSI101733_CrlValidatedID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CrlValidatedID* ASN1C_ETSI101733_CrlValidatedID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CrlValidatedID* pDstData = new ASN1T_ETSI101733_CrlValidatedID;

   asn1Copy_ETSI101733_CrlValidatedID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733__SeqOfETSI101733_CrlValidatedID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_CrlValidatedID* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_CrlValidatedID* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_CrlValidatedID);
         pSrcData = (ASN1T_ETSI101733_CrlValidatedID*) pnode->data;

         asn1Copy_ETSI101733_CrlValidatedID (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID (ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID*)pList)
{
}

ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID& ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::operator= (ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID& srcData)
{
   clear ();
   asn1Copy_ETSI101733__SeqOfETSI101733_CrlValidatedID (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID& ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::getCopy (ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID);
      new (pDstData) ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID;
   }

   asn1Copy_ETSI101733__SeqOfETSI101733_CrlValidatedID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* ASN1C_ETSI101733__SeqOfETSI101733_CrlValidatedID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID* pDstData = new ASN1T_ETSI101733__SeqOfETSI101733_CrlValidatedID;

   asn1Copy_ETSI101733__SeqOfETSI101733_CrlValidatedID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CRLListID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CRLListID* pSrcValue, ASN1T_ETSI101733_CRLListID*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ETSI101733__SeqOfETSI101733_CrlValidatedID (pctxt, &pSrcValue->crls, &pDstValue->crls);

}

ASN1C_ETSI101733_CRLListID::ASN1C_ETSI101733_CRLListID (ASN1C_ETSI101733_CRLListID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_CRLListID::ASN1T_ETSI101733_CRLListID (ASN1C_ETSI101733_CRLListID& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_CRLListID& ASN1C_ETSI101733_CRLListID::getCopy (ASN1T_ETSI101733_CRLListID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CRLListID);
      new (pDstData) ASN1T_ETSI101733_CRLListID;
   }

   asn1Copy_ETSI101733_CRLListID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CRLListID* ASN1C_ETSI101733_CRLListID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CRLListID* pDstData = new ASN1T_ETSI101733_CRLListID;

   asn1Copy_ETSI101733_CRLListID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OcspIdentifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspIdentifier* pSrcValue, ASN1T_ETSI101733_OcspIdentifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_OCSP_ResponderID (pctxt, &pSrcValue->ocspResponderID, &pDstValue->ocspResponderID);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->producedAt, (char **)&pDstValue->producedAt);

}

ASN1C_ETSI101733_OcspIdentifier::ASN1C_ETSI101733_OcspIdentifier (ASN1C_ETSI101733_OcspIdentifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OcspIdentifier::ASN1T_ETSI101733_OcspIdentifier (ASN1C_ETSI101733_OcspIdentifier& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OcspIdentifier& ASN1C_ETSI101733_OcspIdentifier::getCopy (ASN1T_ETSI101733_OcspIdentifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OcspIdentifier);
      new (pDstData) ASN1T_ETSI101733_OcspIdentifier;
   }

   asn1Copy_ETSI101733_OcspIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OcspIdentifier* ASN1C_ETSI101733_OcspIdentifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OcspIdentifier* pDstData = new ASN1T_ETSI101733_OcspIdentifier;

   asn1Copy_ETSI101733_OcspIdentifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OcspResponsesID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspResponsesID* pSrcValue, 
   ASN1T_ETSI101733_OcspResponsesID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_ETSI101733_OcspIdentifier (pctxt, &pSrcValue->ocspIdentifier, &pDstValue->ocspIdentifier);

   if (pSrcValue->m.ocspRepHashPresent) {
      asn1Copy_ETSI101733_OtherHash (pctxt, &pSrcValue->ocspRepHash, &pDstValue->ocspRepHash);
   }

}

ASN1C_ETSI101733_OcspResponsesID::ASN1C_ETSI101733_OcspResponsesID (ASN1C_ETSI101733_OcspResponsesID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OcspResponsesID::ASN1T_ETSI101733_OcspResponsesID (ASN1C_ETSI101733_OcspResponsesID& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OcspResponsesID& ASN1C_ETSI101733_OcspResponsesID::getCopy (ASN1T_ETSI101733_OcspResponsesID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OcspResponsesID);
      new (pDstData) ASN1T_ETSI101733_OcspResponsesID;
   }

   asn1Copy_ETSI101733_OcspResponsesID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OcspResponsesID* ASN1C_ETSI101733_OcspResponsesID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OcspResponsesID* pDstData = new ASN1T_ETSI101733_OcspResponsesID;

   asn1Copy_ETSI101733_OcspResponsesID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733__SeqOfETSI101733_OcspResponsesID (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_OcspResponsesID* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_OcspResponsesID* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_OcspResponsesID);
         pSrcData = (ASN1T_ETSI101733_OcspResponsesID*) pnode->data;

         asn1Copy_ETSI101733_OcspResponsesID (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID (ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID*)pList)
{
}

ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID& ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::operator= (ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID& srcData)
{
   clear ();
   asn1Copy_ETSI101733__SeqOfETSI101733_OcspResponsesID (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID& ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::getCopy (ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID);
      new (pDstData) ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID;
   }

   asn1Copy_ETSI101733__SeqOfETSI101733_OcspResponsesID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* ASN1C_ETSI101733__SeqOfETSI101733_OcspResponsesID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID* pDstData = new ASN1T_ETSI101733__SeqOfETSI101733_OcspResponsesID;

   asn1Copy_ETSI101733__SeqOfETSI101733_OcspResponsesID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OcspListID (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OcspListID* pSrcValue, ASN1T_ETSI101733_OcspListID*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ETSI101733__SeqOfETSI101733_OcspResponsesID (pctxt, &pSrcValue->ocspResponses, &pDstValue->ocspResponses);

}

ASN1C_ETSI101733_OcspListID::ASN1C_ETSI101733_OcspListID (ASN1C_ETSI101733_OcspListID& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OcspListID::ASN1T_ETSI101733_OcspListID (ASN1C_ETSI101733_OcspListID& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OcspListID& ASN1C_ETSI101733_OcspListID::getCopy (ASN1T_ETSI101733_OcspListID* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OcspListID);
      new (pDstData) ASN1T_ETSI101733_OcspListID;
   }

   asn1Copy_ETSI101733_OcspListID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OcspListID* ASN1C_ETSI101733_OcspListID::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OcspListID* pDstData = new ASN1T_ETSI101733_OcspListID;

   asn1Copy_ETSI101733_OcspListID (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OtherRevRefs_otherRevRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pSrcValue, 
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1TOpenType* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1TOpenType* pDstData = rtxMemAllocTypeZ (pctxt, ASN1TOpenType);
         pSrcData = (ASN1TOpenType*) pnode->data;

         rtCopyOpenType (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::ASN1C_ETSI101733_OtherRevRefs_otherRevRefs (ASN1C_ETSI101733_OtherRevRefs_otherRevRefs& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_OtherRevRefs_otherRevRefs*)pList)
{
}

ASN1C_ETSI101733_OtherRevRefs_otherRevRefs& ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::operator= (ASN1C_ETSI101733_OtherRevRefs_otherRevRefs& srcData)
{
   clear ();
   asn1Copy_ETSI101733_OtherRevRefs_otherRevRefs (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_OtherRevRefs_otherRevRefs& ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::getCopy (ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherRevRefs_otherRevRefs);
      new (pDstData) ASN1T_ETSI101733_OtherRevRefs_otherRevRefs;
   }

   asn1Copy_ETSI101733_OtherRevRefs_otherRevRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* ASN1C_ETSI101733_OtherRevRefs_otherRevRefs::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherRevRefs_otherRevRefs* pDstData = new ASN1T_ETSI101733_OtherRevRefs_otherRevRefs;

   asn1Copy_ETSI101733_OtherRevRefs_otherRevRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OtherRevRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevRefs* pSrcValue, ASN1T_ETSI101733_OtherRevRefs*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->otherRevRefType, (ASN1OBJID*)&pDstValue->otherRevRefType);

   asn1Copy_ETSI101733_OtherRevRefs_otherRevRefs (pctxt, &pSrcValue->otherRevRefs, &pDstValue->otherRevRefs);

}

ASN1C_ETSI101733_OtherRevRefs::ASN1C_ETSI101733_OtherRevRefs (ASN1C_ETSI101733_OtherRevRefs& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OtherRevRefs::ASN1T_ETSI101733_OtherRevRefs (ASN1C_ETSI101733_OtherRevRefs& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OtherRevRefs& ASN1C_ETSI101733_OtherRevRefs::getCopy (ASN1T_ETSI101733_OtherRevRefs* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherRevRefs);
      new (pDstData) ASN1T_ETSI101733_OtherRevRefs;
   }

   asn1Copy_ETSI101733_OtherRevRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OtherRevRefs* ASN1C_ETSI101733_OtherRevRefs::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherRevRefs* pDstData = new ASN1T_ETSI101733_OtherRevRefs;

   asn1Copy_ETSI101733_OtherRevRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CrlOcspRef (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CrlOcspRef* pSrcValue, ASN1T_ETSI101733_CrlOcspRef*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.crlidsPresent) {
      asn1Copy_ETSI101733_CRLListID (pctxt, &pSrcValue->crlids, &pDstValue->crlids);
   }

   if (pSrcValue->m.ocspidsPresent) {
      asn1Copy_ETSI101733_OcspListID (pctxt, &pSrcValue->ocspids, &pDstValue->ocspids);
   }

   if (pSrcValue->m.otherRevPresent) {
      asn1Copy_ETSI101733_OtherRevRefs (pctxt, &pSrcValue->otherRev, &pDstValue->otherRev);
   }

}

ASN1C_ETSI101733_CrlOcspRef::ASN1C_ETSI101733_CrlOcspRef (ASN1C_ETSI101733_CrlOcspRef& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_CrlOcspRef::ASN1T_ETSI101733_CrlOcspRef (ASN1C_ETSI101733_CrlOcspRef& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_CrlOcspRef& ASN1C_ETSI101733_CrlOcspRef::getCopy (ASN1T_ETSI101733_CrlOcspRef* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CrlOcspRef);
      new (pDstData) ASN1T_ETSI101733_CrlOcspRef;
   }

   asn1Copy_ETSI101733_CrlOcspRef (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CrlOcspRef* ASN1C_ETSI101733_CrlOcspRef::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CrlOcspRef* pDstData = new ASN1T_ETSI101733_CrlOcspRef;

   asn1Copy_ETSI101733_CrlOcspRef (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CompleteRevocationRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pSrcValue, 
   ASN1T_ETSI101733_CompleteRevocationRefs* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_CrlOcspRef* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_CrlOcspRef* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_CrlOcspRef);
         pSrcData = (ASN1T_ETSI101733_CrlOcspRef*) pnode->data;

         asn1Copy_ETSI101733_CrlOcspRef (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_CompleteRevocationRefs::ASN1C_ETSI101733_CompleteRevocationRefs (ASN1C_ETSI101733_CompleteRevocationRefs& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_CompleteRevocationRefs*)pList)
{
}

ASN1C_ETSI101733_CompleteRevocationRefs& ASN1C_ETSI101733_CompleteRevocationRefs::operator= (ASN1C_ETSI101733_CompleteRevocationRefs& srcData)
{
   clear ();
   asn1Copy_ETSI101733_CompleteRevocationRefs (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_CompleteRevocationRefs& ASN1C_ETSI101733_CompleteRevocationRefs::getCopy (ASN1T_ETSI101733_CompleteRevocationRefs* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CompleteRevocationRefs);
      new (pDstData) ASN1T_ETSI101733_CompleteRevocationRefs;
   }

   asn1Copy_ETSI101733_CompleteRevocationRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CompleteRevocationRefs* ASN1C_ETSI101733_CompleteRevocationRefs::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CompleteRevocationRefs* pDstData = new ASN1T_ETSI101733_CompleteRevocationRefs;

   asn1Copy_ETSI101733_CompleteRevocationRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CertificateValues (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CertificateValues* pSrcValue, 
   ASN1T_ETSI101733_CertificateValues* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Certificate* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Certificate* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Certificate);
         pSrcData = (ASN1T_EXP_Certificate*) pnode->data;

         asn1Copy_EXP_Certificate (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_CertificateValues::ASN1C_ETSI101733_CertificateValues (ASN1C_ETSI101733_CertificateValues& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_CertificateValues*)pList)
{
}

ASN1C_ETSI101733_CertificateValues& ASN1C_ETSI101733_CertificateValues::operator= (ASN1C_ETSI101733_CertificateValues& srcData)
{
   clear ();
   asn1Copy_ETSI101733_CertificateValues (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_CertificateValues& ASN1C_ETSI101733_CertificateValues::getCopy (ASN1T_ETSI101733_CertificateValues* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CertificateValues);
      new (pDstData) ASN1T_ETSI101733_CertificateValues;
   }

   asn1Copy_ETSI101733_CertificateValues (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CertificateValues* ASN1C_ETSI101733_CertificateValues::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CertificateValues* pDstData = new ASN1T_ETSI101733_CertificateValues;

   asn1Copy_ETSI101733_CertificateValues (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733__SeqOfETSI101733_CertificateList (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_CertificateList* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_CertificateList* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_CertificateList);
         pSrcData = (ASN1T_EXP_CertificateList*) pnode->data;

         asn1Copy_EXP_CertificateList (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::ASN1C_ETSI101733__SeqOfETSI101733_CertificateList (ASN1C_ETSI101733__SeqOfETSI101733_CertificateList& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733__SeqOfETSI101733_CertificateList*)pList)
{
}

ASN1C_ETSI101733__SeqOfETSI101733_CertificateList& ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::operator= (ASN1C_ETSI101733__SeqOfETSI101733_CertificateList& srcData)
{
   clear ();
   asn1Copy_ETSI101733__SeqOfETSI101733_CertificateList (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733__SeqOfETSI101733_CertificateList& ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::getCopy (ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733__SeqOfETSI101733_CertificateList);
      new (pDstData) ASN1T_ETSI101733__SeqOfETSI101733_CertificateList;
   }

   asn1Copy_ETSI101733__SeqOfETSI101733_CertificateList (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* ASN1C_ETSI101733__SeqOfETSI101733_CertificateList::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733__SeqOfETSI101733_CertificateList* pDstData = new ASN1T_ETSI101733__SeqOfETSI101733_CertificateList;

   asn1Copy_ETSI101733__SeqOfETSI101733_CertificateList (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (OSCTXT* pctxt, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pSrcValue, 
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_OCSP_BasicOCSPResponse* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_OCSP_BasicOCSPResponse* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_OCSP_BasicOCSPResponse);
         pSrcData = (ASN1T_OCSP_BasicOCSPResponse*) pnode->data;

         asn1Copy_OCSP_BasicOCSPResponse (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse*)pList)
{
}

ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::operator= (ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& srcData)
{
   clear ();
   asn1Copy_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse& ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::getCopy (ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse);
      new (pDstData) ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse;
   }

   asn1Copy_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* ASN1C_ETSI101733__SeqOfETSI101733_BasicOCSPResponse::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse* pDstData = new ASN1T_ETSI101733__SeqOfETSI101733_BasicOCSPResponse;

   asn1Copy_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OtherRevVals_otherRevVals (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pSrcValue, 
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1TOpenType* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1TOpenType* pDstData = rtxMemAllocTypeZ (pctxt, ASN1TOpenType);
         pSrcData = (ASN1TOpenType*) pnode->data;

         rtCopyOpenType (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_OtherRevVals_otherRevVals::ASN1C_ETSI101733_OtherRevVals_otherRevVals (ASN1C_ETSI101733_OtherRevVals_otherRevVals& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_OtherRevVals_otherRevVals*)pList)
{
}

ASN1C_ETSI101733_OtherRevVals_otherRevVals& ASN1C_ETSI101733_OtherRevVals_otherRevVals::operator= (ASN1C_ETSI101733_OtherRevVals_otherRevVals& srcData)
{
   clear ();
   asn1Copy_ETSI101733_OtherRevVals_otherRevVals (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_OtherRevVals_otherRevVals& ASN1C_ETSI101733_OtherRevVals_otherRevVals::getCopy (ASN1T_ETSI101733_OtherRevVals_otherRevVals* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherRevVals_otherRevVals);
      new (pDstData) ASN1T_ETSI101733_OtherRevVals_otherRevVals;
   }

   asn1Copy_ETSI101733_OtherRevVals_otherRevVals (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OtherRevVals_otherRevVals* ASN1C_ETSI101733_OtherRevVals_otherRevVals::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherRevVals_otherRevVals* pDstData = new ASN1T_ETSI101733_OtherRevVals_otherRevVals;

   asn1Copy_ETSI101733_OtherRevVals_otherRevVals (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_OtherRevVals (OSCTXT* pctxt, 
   ASN1T_ETSI101733_OtherRevVals* pSrcValue, ASN1T_ETSI101733_OtherRevVals*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->otherRevValType, (ASN1OBJID*)&pDstValue->otherRevValType);

   asn1Copy_ETSI101733_OtherRevVals_otherRevVals (pctxt, &pSrcValue->otherRevVals, &pDstValue->otherRevVals);

}

ASN1C_ETSI101733_OtherRevVals::ASN1C_ETSI101733_OtherRevVals (ASN1C_ETSI101733_OtherRevVals& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_OtherRevVals::ASN1T_ETSI101733_OtherRevVals (ASN1C_ETSI101733_OtherRevVals& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_OtherRevVals& ASN1C_ETSI101733_OtherRevVals::getCopy (ASN1T_ETSI101733_OtherRevVals* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_OtherRevVals);
      new (pDstData) ASN1T_ETSI101733_OtherRevVals;
   }

   asn1Copy_ETSI101733_OtherRevVals (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_OtherRevVals* ASN1C_ETSI101733_OtherRevVals::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_OtherRevVals* pDstData = new ASN1T_ETSI101733_OtherRevVals;

   asn1Copy_ETSI101733_OtherRevVals (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_RevocationValues (OSCTXT* pctxt, 
   ASN1T_ETSI101733_RevocationValues* pSrcValue, 
   ASN1T_ETSI101733_RevocationValues* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.crlValsPresent) {
      asn1Copy_ETSI101733__SeqOfETSI101733_CertificateList (pctxt, &pSrcValue->crlVals, &pDstValue->crlVals);
   }

   if (pSrcValue->m.ocspValsPresent) {
      asn1Copy_ETSI101733__SeqOfETSI101733_BasicOCSPResponse (pctxt, &pSrcValue->ocspVals, &pDstValue->ocspVals);
   }

   if (pSrcValue->m.otherRevValsPresent) {
      asn1Copy_ETSI101733_OtherRevVals (pctxt, &pSrcValue->otherRevVals, &pDstValue->otherRevVals);
   }

}

ASN1C_ETSI101733_RevocationValues::ASN1C_ETSI101733_RevocationValues (ASN1C_ETSI101733_RevocationValues& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_RevocationValues::ASN1T_ETSI101733_RevocationValues (ASN1C_ETSI101733_RevocationValues& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_RevocationValues& ASN1C_ETSI101733_RevocationValues::getCopy (ASN1T_ETSI101733_RevocationValues* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_RevocationValues);
      new (pDstData) ASN1T_ETSI101733_RevocationValues;
   }

   asn1Copy_ETSI101733_RevocationValues (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_RevocationValues* ASN1C_ETSI101733_RevocationValues::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_RevocationValues* pDstData = new ASN1T_ETSI101733_RevocationValues;

   asn1Copy_ETSI101733_RevocationValues (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_AttributeCertificateRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pSrcValue, 
   ASN1T_ETSI101733_AttributeCertificateRefs* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_OtherCertID* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_OtherCertID* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_OtherCertID);
         pSrcData = (ASN1T_ETSI101733_OtherCertID*) pnode->data;

         asn1Copy_ETSI101733_OtherCertID (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_AttributeCertificateRefs::ASN1C_ETSI101733_AttributeCertificateRefs (ASN1C_ETSI101733_AttributeCertificateRefs& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_AttributeCertificateRefs*)pList)
{
}

ASN1C_ETSI101733_AttributeCertificateRefs& ASN1C_ETSI101733_AttributeCertificateRefs::operator= (ASN1C_ETSI101733_AttributeCertificateRefs& srcData)
{
   clear ();
   asn1Copy_ETSI101733_AttributeCertificateRefs (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_AttributeCertificateRefs& ASN1C_ETSI101733_AttributeCertificateRefs::getCopy (ASN1T_ETSI101733_AttributeCertificateRefs* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_AttributeCertificateRefs);
      new (pDstData) ASN1T_ETSI101733_AttributeCertificateRefs;
   }

   asn1Copy_ETSI101733_AttributeCertificateRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_AttributeCertificateRefs* ASN1C_ETSI101733_AttributeCertificateRefs::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_AttributeCertificateRefs* pDstData = new ASN1T_ETSI101733_AttributeCertificateRefs;

   asn1Copy_ETSI101733_AttributeCertificateRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_AttributeRevocationRefs (OSCTXT* pctxt, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pSrcValue, 
   ASN1T_ETSI101733_AttributeRevocationRefs* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_CrlOcspRef* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_CrlOcspRef* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_CrlOcspRef);
         pSrcData = (ASN1T_ETSI101733_CrlOcspRef*) pnode->data;

         asn1Copy_ETSI101733_CrlOcspRef (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_AttributeRevocationRefs::ASN1C_ETSI101733_AttributeRevocationRefs (ASN1C_ETSI101733_AttributeRevocationRefs& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_AttributeRevocationRefs*)pList)
{
}

ASN1C_ETSI101733_AttributeRevocationRefs& ASN1C_ETSI101733_AttributeRevocationRefs::operator= (ASN1C_ETSI101733_AttributeRevocationRefs& srcData)
{
   clear ();
   asn1Copy_ETSI101733_AttributeRevocationRefs (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_AttributeRevocationRefs& ASN1C_ETSI101733_AttributeRevocationRefs::getCopy (ASN1T_ETSI101733_AttributeRevocationRefs* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_AttributeRevocationRefs);
      new (pDstData) ASN1T_ETSI101733_AttributeRevocationRefs;
   }

   asn1Copy_ETSI101733_AttributeRevocationRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_AttributeRevocationRefs* ASN1C_ETSI101733_AttributeRevocationRefs::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_AttributeRevocationRefs* pDstData = new ASN1T_ETSI101733_AttributeRevocationRefs;

   asn1Copy_ETSI101733_AttributeRevocationRefs (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_ContentReference (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentReference* pSrcValue, 
   ASN1T_ETSI101733_ContentReference* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_CMS_ContentType (pctxt, &pSrcValue->contentType, &pDstValue->contentType);

   asn1Copy_ETSI101733_ContentIdentifier (pctxt, &pSrcValue->signedContentIdentifier, &pDstValue->signedContentIdentifier);

   rtCopyDynOctStr (pctxt, &pSrcValue->originatorSignatureValue, &pDstValue->
      originatorSignatureValue);

}

ASN1C_ETSI101733_ContentReference::ASN1C_ETSI101733_ContentReference (ASN1C_ETSI101733_ContentReference& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_ContentReference::ASN1T_ETSI101733_ContentReference (ASN1C_ETSI101733_ContentReference& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_ContentReference& ASN1C_ETSI101733_ContentReference::getCopy (ASN1T_ETSI101733_ContentReference* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_ContentReference);
      new (pDstData) ASN1T_ETSI101733_ContentReference;
   }

   asn1Copy_ETSI101733_ContentReference (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_ContentReference* ASN1C_ETSI101733_ContentReference::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_ContentReference* pDstData = new ASN1T_ETSI101733_ContentReference;

   asn1Copy_ETSI101733_ContentReference (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_ContentHints (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ContentHints* pSrcValue, ASN1T_ETSI101733_ContentHints*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.contentDescriptionPresent) {
      pDstValue->contentDescription = (const unsigned char *)rtxUTF8Strdup (pctxt, pSrcValue->contentDescription);
   }

   asn1Copy_CMS_ContentType (pctxt, &pSrcValue->contentType, &pDstValue->contentType);

}

ASN1C_ETSI101733_ContentHints::ASN1C_ETSI101733_ContentHints (ASN1C_ETSI101733_ContentHints& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_ContentHints::ASN1T_ETSI101733_ContentHints (ASN1C_ETSI101733_ContentHints& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_ContentHints& ASN1C_ETSI101733_ContentHints::getCopy (ASN1T_ETSI101733_ContentHints* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_ContentHints);
      new (pDstData) ASN1T_ETSI101733_ContentHints;
   }

   asn1Copy_ETSI101733_ContentHints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_ContentHints* ASN1C_ETSI101733_ContentHints::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_ContentHints* pDstData = new ASN1T_ETSI101733_ContentHints;

   asn1Copy_ETSI101733_ContentHints (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CommitmentTypeQualifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pSrcValue, 
   ASN1T_ETSI101733_CommitmentTypeQualifier* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_ETSI101733_CommitmentTypeIdentifier (pctxt, &pSrcValue->commitmentTypeIdentifier, &pDstValue->commitmentTypeIdentifier);

   rtCopyOpenType (pctxt, &pSrcValue->qualifier, &pDstValue->qualifier);

}

ASN1C_ETSI101733_CommitmentTypeQualifier::ASN1C_ETSI101733_CommitmentTypeQualifier (ASN1C_ETSI101733_CommitmentTypeQualifier& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_CommitmentTypeQualifier::ASN1T_ETSI101733_CommitmentTypeQualifier (ASN1C_ETSI101733_CommitmentTypeQualifier& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_CommitmentTypeQualifier& ASN1C_ETSI101733_CommitmentTypeQualifier::getCopy (ASN1T_ETSI101733_CommitmentTypeQualifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CommitmentTypeQualifier);
      new (pDstData) ASN1T_ETSI101733_CommitmentTypeQualifier;
   }

   asn1Copy_ETSI101733_CommitmentTypeQualifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CommitmentTypeQualifier* ASN1C_ETSI101733_CommitmentTypeQualifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CommitmentTypeQualifier* pDstData = new ASN1T_ETSI101733_CommitmentTypeQualifier;

   asn1Copy_ETSI101733_CommitmentTypeQualifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pSrcValue, 
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_CommitmentTypeQualifier* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_CommitmentTypeQualifier* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_CommitmentTypeQualifier);
         pSrcData = (ASN1T_ETSI101733_CommitmentTypeQualifier*) pnode->data;

         asn1Copy_ETSI101733_CommitmentTypeQualifier (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier*)pList)
{
}

ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::operator= (ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& srcData)
{
   clear ();
   asn1Copy_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier& ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::getCopy (ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier);
      new (pDstData) ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier;
   }

   asn1Copy_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* ASN1C_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier* pDstData = new ASN1T_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier;

   asn1Copy_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_CommitmentTypeIndication (OSCTXT* pctxt, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pSrcValue, 
   ASN1T_ETSI101733_CommitmentTypeIndication* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_ETSI101733_CommitmentTypeIdentifier (pctxt, &pSrcValue->commitmentTypeId, &pDstValue->commitmentTypeId);

   if (pSrcValue->m.commitmentTypeQualifierPresent) {
      asn1Copy_ETSI101733_CommitmentTypeIndication_commitmentTypeQualifier (pctxt, &pSrcValue->commitmentTypeQualifier, &pDstValue->commitmentTypeQualifier);
   }

}

ASN1C_ETSI101733_CommitmentTypeIndication::ASN1C_ETSI101733_CommitmentTypeIndication (ASN1C_ETSI101733_CommitmentTypeIndication& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_CommitmentTypeIndication::ASN1T_ETSI101733_CommitmentTypeIndication (ASN1C_ETSI101733_CommitmentTypeIndication& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_CommitmentTypeIndication& ASN1C_ETSI101733_CommitmentTypeIndication::getCopy (ASN1T_ETSI101733_CommitmentTypeIndication* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CommitmentTypeIndication);
      new (pDstData) ASN1T_ETSI101733_CommitmentTypeIndication;
   }

   asn1Copy_ETSI101733_CommitmentTypeIndication (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_CommitmentTypeIndication* ASN1C_ETSI101733_CommitmentTypeIndication::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_CommitmentTypeIndication* pDstData = new ASN1T_ETSI101733_CommitmentTypeIndication;

   asn1Copy_ETSI101733_CommitmentTypeIndication (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_PostalAddress (OSCTXT* pctxt, 
   ASN1T_ETSI101733_PostalAddress* pSrcValue, ASN1T_ETSI101733_PostalAddress*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_DirectoryString* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_DirectoryString* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_DirectoryString);
         pSrcData = (ASN1T_EXP_DirectoryString*) pnode->data;

         asn1Copy_EXP_DirectoryString (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_PostalAddress::ASN1C_ETSI101733_PostalAddress (ASN1C_ETSI101733_PostalAddress& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_PostalAddress*)pList)
{
}

ASN1C_ETSI101733_PostalAddress& ASN1C_ETSI101733_PostalAddress::operator= (ASN1C_ETSI101733_PostalAddress& srcData)
{
   clear ();
   asn1Copy_ETSI101733_PostalAddress (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_PostalAddress& ASN1C_ETSI101733_PostalAddress::getCopy (ASN1T_ETSI101733_PostalAddress* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_PostalAddress);
      new (pDstData) ASN1T_ETSI101733_PostalAddress;
   }

   asn1Copy_ETSI101733_PostalAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_PostalAddress* ASN1C_ETSI101733_PostalAddress::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_PostalAddress* pDstData = new ASN1T_ETSI101733_PostalAddress;

   asn1Copy_ETSI101733_PostalAddress (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SignerLocation (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerLocation* pSrcValue, ASN1T_ETSI101733_SignerLocation*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.countryNamePresent) {
      asn1Copy_EXP_DirectoryString (pctxt, &pSrcValue->countryName, &pDstValue->countryName);
   }

   if (pSrcValue->m.localityNamePresent) {
      asn1Copy_EXP_DirectoryString (pctxt, &pSrcValue->localityName, &pDstValue->localityName);
   }

   if (pSrcValue->m.postalAdddressPresent) {
      asn1Copy_ETSI101733_PostalAddress (pctxt, &pSrcValue->postalAdddress, &pDstValue->postalAdddress);
   }

}

ASN1C_ETSI101733_SignerLocation::ASN1C_ETSI101733_SignerLocation (ASN1C_ETSI101733_SignerLocation& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_SignerLocation::ASN1T_ETSI101733_SignerLocation (ASN1C_ETSI101733_SignerLocation& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_SignerLocation& ASN1C_ETSI101733_SignerLocation::getCopy (ASN1T_ETSI101733_SignerLocation* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SignerLocation);
      new (pDstData) ASN1T_ETSI101733_SignerLocation;
   }

   asn1Copy_ETSI101733_SignerLocation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SignerLocation* ASN1C_ETSI101733_SignerLocation::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SignerLocation* pDstData = new ASN1T_ETSI101733_SignerLocation;

   asn1Copy_ETSI101733_SignerLocation (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_ClaimedAttributes (OSCTXT* pctxt, 
   ASN1T_ETSI101733_ClaimedAttributes* pSrcValue, 
   ASN1T_ETSI101733_ClaimedAttributes* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_EXP_Attribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_EXP_Attribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_EXP_Attribute);
         pSrcData = (ASN1T_EXP_Attribute*) pnode->data;

         asn1Copy_EXP_Attribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_ClaimedAttributes::ASN1C_ETSI101733_ClaimedAttributes (ASN1C_ETSI101733_ClaimedAttributes& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_ClaimedAttributes*)pList)
{
}

ASN1C_ETSI101733_ClaimedAttributes& ASN1C_ETSI101733_ClaimedAttributes::operator= (ASN1C_ETSI101733_ClaimedAttributes& srcData)
{
   clear ();
   asn1Copy_ETSI101733_ClaimedAttributes (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_ClaimedAttributes& ASN1C_ETSI101733_ClaimedAttributes::getCopy (ASN1T_ETSI101733_ClaimedAttributes* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_ClaimedAttributes);
      new (pDstData) ASN1T_ETSI101733_ClaimedAttributes;
   }

   asn1Copy_ETSI101733_ClaimedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_ClaimedAttributes* ASN1C_ETSI101733_ClaimedAttributes::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_ClaimedAttributes* pDstData = new ASN1T_ETSI101733_ClaimedAttributes;

   asn1Copy_ETSI101733_ClaimedAttributes (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SignerAttribute_element (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerAttribute_element* pSrcValue, 
   ASN1T_ETSI101733_SignerAttribute_element* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->t = pSrcValue->t;
   switch (pSrcValue->t)
   {
      /* claimedAttributes */
      case 1:
         pDstValue->u.claimedAttributes = rtxMemAllocType (pctxt, ASN1T_ETSI101733_ClaimedAttributes);
         new (pDstValue->u.claimedAttributes) ASN1T_ETSI101733_ClaimedAttributes;
         asn1Copy_ETSI101733_ClaimedAttributes (pctxt, pSrcValue->u.claimedAttributes, pDstValue->u.claimedAttributes);
         break;

      /* certifiedAttributes */
      case 2:
         pDstValue->u.certifiedAttributes = rtxMemAllocType (pctxt, ASN1T_ETSI101733_CertifiedAttributes);
         new (pDstValue->u.certifiedAttributes) ASN1T_ETSI101733_CertifiedAttributes;
         asn1Copy_ETSI101733_CertifiedAttributes (pctxt, pSrcValue->u.certifiedAttributes, pDstValue->u.certifiedAttributes);
         break;

   }
}

ASN1C_ETSI101733_SignerAttribute_element::ASN1C_ETSI101733_SignerAttribute_element (ASN1C_ETSI101733_SignerAttribute_element& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_ETSI101733_SignerAttribute_element::ASN1T_ETSI101733_SignerAttribute_element (ASN1C_ETSI101733_SignerAttribute_element& original)
{
   original.getCopy (this);
}

ASN1T_ETSI101733_SignerAttribute_element& ASN1C_ETSI101733_SignerAttribute_element::getCopy (ASN1T_ETSI101733_SignerAttribute_element* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SignerAttribute_element);
      new (pDstData) ASN1T_ETSI101733_SignerAttribute_element;
   }

   asn1Copy_ETSI101733_SignerAttribute_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SignerAttribute_element* ASN1C_ETSI101733_SignerAttribute_element::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SignerAttribute_element* pDstData = new ASN1T_ETSI101733_SignerAttribute_element;

   asn1Copy_ETSI101733_SignerAttribute_element (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_ETSI101733_SignerAttribute (OSCTXT* pctxt, 
   ASN1T_ETSI101733_SignerAttribute* pSrcValue, 
   ASN1T_ETSI101733_SignerAttribute* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_ETSI101733_SignerAttribute_element* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_ETSI101733_SignerAttribute_element* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_ETSI101733_SignerAttribute_element);
         pSrcData = (ASN1T_ETSI101733_SignerAttribute_element*) pnode->data;

         asn1Copy_ETSI101733_SignerAttribute_element (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_ETSI101733_SignerAttribute::ASN1C_ETSI101733_SignerAttribute (ASN1C_ETSI101733_SignerAttribute& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_ETSI101733_SignerAttribute*)pList)
{
}

ASN1C_ETSI101733_SignerAttribute& ASN1C_ETSI101733_SignerAttribute::operator= (ASN1C_ETSI101733_SignerAttribute& srcData)
{
   clear ();
   asn1Copy_ETSI101733_SignerAttribute (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_ETSI101733_SignerAttribute& ASN1C_ETSI101733_SignerAttribute::getCopy (ASN1T_ETSI101733_SignerAttribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_ETSI101733_SignerAttribute);
      new (pDstData) ASN1T_ETSI101733_SignerAttribute;
   }

   asn1Copy_ETSI101733_SignerAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_ETSI101733_SignerAttribute* ASN1C_ETSI101733_SignerAttribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_ETSI101733_SignerAttribute* pDstData = new ASN1T_ETSI101733_SignerAttribute;

   asn1Copy_ETSI101733_SignerAttribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

