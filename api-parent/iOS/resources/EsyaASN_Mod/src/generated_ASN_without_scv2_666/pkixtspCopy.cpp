/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "pkixtsp.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_TSP_BIGINTEGER (OSCTXT* pctxt, ASN1T_TSP_BIGINTEGER* pSrcValue, 
   ASN1T_TSP_BIGINTEGER* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   RTCOPYCHARSTR (pctxt, (char *)*pSrcValue, (char **)pDstValue);
}

ASN1C_TSP_BIGINTEGER::ASN1C_TSP_BIGINTEGER (ASN1C_TSP_BIGINTEGER& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_BIGINTEGER& ASN1C_TSP_BIGINTEGER::getCopy (ASN1T_TSP_BIGINTEGER* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_BIGINTEGER);
      new (pDstData) ASN1T_TSP_BIGINTEGER;
   }

   asn1Copy_TSP_BIGINTEGER (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_TSP_BIGINTEGER* ASN1C_TSP_BIGINTEGER::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_BIGINTEGER* pDstData = new ASN1T_TSP_BIGINTEGER;

   asn1Copy_TSP_BIGINTEGER (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_TSP_TSAPolicyId (OSCTXT* pctxt, 
   ASN1T_TSP_TSAPolicyId* pSrcValue, ASN1T_TSP_TSAPolicyId* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)pSrcValue, (ASN1OBJID*)pDstValue);
}

ASN1C_TSP_TSAPolicyId::ASN1C_TSP_TSAPolicyId (ASN1C_TSP_TSAPolicyId& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_TSAPolicyId& ASN1C_TSP_TSAPolicyId::getCopy (ASN1T_TSP_TSAPolicyId* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_TSAPolicyId);
      new (pDstData) ASN1T_TSP_TSAPolicyId;
   }

   asn1Copy_TSP_TSAPolicyId (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_TSP_TSAPolicyId* ASN1C_TSP_TSAPolicyId::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_TSAPolicyId* pDstData = new ASN1T_TSP_TSAPolicyId;

   asn1Copy_TSP_TSAPolicyId (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_TSP_PKIFailureInfo (OSCTXT* pctxt, 
   ASN1T_TSP_PKIFailureInfo* pSrcValue, ASN1T_TSP_PKIFailureInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->numbits = pSrcValue->numbits;
   if (pSrcValue->numbits > 0) {
      OSCRTLMEMCPY (pDstValue->data, pSrcValue->data, (pSrcValue->
         numbits+7)/8);
   }
}

ASN1C_TSP_PKIFailureInfo::ASN1C_TSP_PKIFailureInfo (ASN1C_TSP_PKIFailureInfo& original) :
   ASN1CBitStr (original), msgData (original.getCopy ())
{
   ASN1CBitStr::init (msgData.data, msgData.numbits, 32);
}

ASN1T_TSP_PKIFailureInfo::ASN1T_TSP_PKIFailureInfo (ASN1C_TSP_PKIFailureInfo& original)
{
   original.getCopy (this);
}

ASN1C_TSP_PKIFailureInfo& ASN1C_TSP_PKIFailureInfo::operator= (ASN1C_TSP_PKIFailureInfo& srcData)
{
   srcData.getCopy (&msgData);
   return *this;
}

ASN1T_TSP_PKIFailureInfo& ASN1C_TSP_PKIFailureInfo::getCopy (ASN1T_TSP_PKIFailureInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_PKIFailureInfo);
      new (pDstData) ASN1T_TSP_PKIFailureInfo;
   }

   asn1Copy_TSP_PKIFailureInfo (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_TSP_PKIFailureInfo* ASN1C_TSP_PKIFailureInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_PKIFailureInfo* pDstData = new ASN1T_TSP_PKIFailureInfo;

   asn1Copy_TSP_PKIFailureInfo (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_TSP_TimeStampToken (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampToken* pSrcValue, ASN1T_TSP_TimeStampToken* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_CMS_ContentInfo (pctxt, pSrcValue, pDstValue);
}

ASN1C_TSP_TimeStampToken::ASN1C_TSP_TimeStampToken (ASN1C_TSP_TimeStampToken& original) :
   ASN1C_CMS_ContentInfo (original)
{
}

ASN1T_TSP_TimeStampToken& ASN1C_TSP_TimeStampToken::getCopy (ASN1T_TSP_TimeStampToken* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_TimeStampToken);
      new (pDstData) ASN1T_TSP_TimeStampToken;
   }

   asn1Copy_TSP_TimeStampToken (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_TSP_TimeStampToken* ASN1C_TSP_TimeStampToken::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_TimeStampToken* pDstData = new ASN1T_TSP_TimeStampToken;

   asn1Copy_TSP_TimeStampToken (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_TSP_MessageImprint (OSCTXT* pctxt, 
   ASN1T_TSP_MessageImprint* pSrcValue, ASN1T_TSP_MessageImprint* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_EXP_AlgorithmIdentifier (pctxt, &pSrcValue->hashAlgorithm, &pDstValue->hashAlgorithm);

   rtCopyDynOctStr (pctxt, &pSrcValue->hashedMessage, &pDstValue->hashedMessage
      );

}

ASN1C_TSP_MessageImprint::ASN1C_TSP_MessageImprint (ASN1C_TSP_MessageImprint& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_MessageImprint::ASN1T_TSP_MessageImprint (ASN1C_TSP_MessageImprint& original)
{
   original.getCopy (this);
}

ASN1T_TSP_MessageImprint& ASN1C_TSP_MessageImprint::getCopy (ASN1T_TSP_MessageImprint* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_MessageImprint);
      new (pDstData) ASN1T_TSP_MessageImprint;
   }

   asn1Copy_TSP_MessageImprint (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_TSP_MessageImprint* ASN1C_TSP_MessageImprint::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_MessageImprint* pDstData = new ASN1T_TSP_MessageImprint;

   asn1Copy_TSP_MessageImprint (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_TSP_TimeStampReq (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampReq* pSrcValue, ASN1T_TSP_TimeStampReq* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_TSP_MessageImprint (pctxt, &pSrcValue->messageImprint, &pDstValue->messageImprint);

   if (pSrcValue->m.reqPolicyPresent) {
      asn1Copy_TSP_TSAPolicyId (pctxt, &pSrcValue->reqPolicy, &pDstValue->reqPolicy);
   }

   if (pSrcValue->m.noncePresent) {
      asn1Copy_TSP_BIGINTEGER (pctxt, &pSrcValue->nonce, &pDstValue->nonce);
   }

   pDstValue->certReq = pSrcValue->certReq;

   if (pSrcValue->m.extensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->extensions, &pDstValue->extensions);
   }

}

ASN1C_TSP_TimeStampReq::ASN1C_TSP_TimeStampReq (ASN1C_TSP_TimeStampReq& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_TimeStampReq::ASN1T_TSP_TimeStampReq (ASN1C_TSP_TimeStampReq& original)
{
   original.getCopy (this);
}

ASN1T_TSP_TimeStampReq& ASN1C_TSP_TimeStampReq::getCopy (ASN1T_TSP_TimeStampReq* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_TimeStampReq);
      new (pDstData) ASN1T_TSP_TimeStampReq;
   }

   asn1Copy_TSP_TimeStampReq (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_TSP_TimeStampReq* ASN1C_TSP_TimeStampReq::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_TimeStampReq* pDstData = new ASN1T_TSP_TimeStampReq;

   asn1Copy_TSP_TimeStampReq (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_TSP_PKIStatusInfo (OSCTXT* pctxt, 
   ASN1T_TSP_PKIStatusInfo* pSrcValue, ASN1T_TSP_PKIStatusInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->status = pSrcValue->status;

   if (pSrcValue->m.statusStringPresent) {
      asn1Copy_CMP_PKIFreeText (pctxt, &pSrcValue->statusString, &pDstValue->statusString);
   }

   if (pSrcValue->m.failInfoPresent) {
      asn1Copy_TSP_PKIFailureInfo (pctxt, &pSrcValue->failInfo, &pDstValue->failInfo);
   }

}

ASN1C_TSP_PKIStatusInfo::ASN1C_TSP_PKIStatusInfo (ASN1C_TSP_PKIStatusInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_PKIStatusInfo::ASN1T_TSP_PKIStatusInfo (ASN1C_TSP_PKIStatusInfo& original)
{
   original.getCopy (this);
}

ASN1T_TSP_PKIStatusInfo& ASN1C_TSP_PKIStatusInfo::getCopy (ASN1T_TSP_PKIStatusInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_PKIStatusInfo);
      new (pDstData) ASN1T_TSP_PKIStatusInfo;
   }

   asn1Copy_TSP_PKIStatusInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_TSP_PKIStatusInfo* ASN1C_TSP_PKIStatusInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_PKIStatusInfo* pDstData = new ASN1T_TSP_PKIStatusInfo;

   asn1Copy_TSP_PKIStatusInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_TSP_TimeStampResp (OSCTXT* pctxt, 
   ASN1T_TSP_TimeStampResp* pSrcValue, ASN1T_TSP_TimeStampResp* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   asn1Copy_TSP_PKIStatusInfo (pctxt, &pSrcValue->status, &pDstValue->status);

   if (pSrcValue->m.timeStampTokenPresent) {
      asn1Copy_TSP_TimeStampToken (pctxt, &pSrcValue->timeStampToken, &pDstValue->timeStampToken);
   }

}

ASN1C_TSP_TimeStampResp::ASN1C_TSP_TimeStampResp (ASN1C_TSP_TimeStampResp& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_TimeStampResp::ASN1T_TSP_TimeStampResp (ASN1C_TSP_TimeStampResp& original)
{
   original.getCopy (this);
}

ASN1T_TSP_TimeStampResp& ASN1C_TSP_TimeStampResp::getCopy (ASN1T_TSP_TimeStampResp* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_TimeStampResp);
      new (pDstData) ASN1T_TSP_TimeStampResp;
   }

   asn1Copy_TSP_TimeStampResp (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_TSP_TimeStampResp* ASN1C_TSP_TimeStampResp::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_TimeStampResp* pDstData = new ASN1T_TSP_TimeStampResp;

   asn1Copy_TSP_TimeStampResp (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_TSP_Accuracy (OSCTXT* pctxt, ASN1T_TSP_Accuracy* pSrcValue, 
   ASN1T_TSP_Accuracy* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   if (pSrcValue->m.secondsPresent) {
      pDstValue->seconds = pSrcValue->seconds;
   }

   if (pSrcValue->m.millisPresent) {
      pDstValue->millis = pSrcValue->millis;
   }

   if (pSrcValue->m.microsPresent) {
      pDstValue->micros = pSrcValue->micros;
   }

}

ASN1C_TSP_Accuracy::ASN1C_TSP_Accuracy (ASN1C_TSP_Accuracy& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_Accuracy::ASN1T_TSP_Accuracy (ASN1C_TSP_Accuracy& original)
{
   original.getCopy (this);
}

ASN1T_TSP_Accuracy& ASN1C_TSP_Accuracy::getCopy (ASN1T_TSP_Accuracy* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_Accuracy);
      new (pDstData) ASN1T_TSP_Accuracy;
   }

   asn1Copy_TSP_Accuracy (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_TSP_Accuracy* ASN1C_TSP_Accuracy::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_Accuracy* pDstData = new ASN1T_TSP_Accuracy;

   asn1Copy_TSP_Accuracy (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_TSP_TSTInfo (OSCTXT* pctxt, ASN1T_TSP_TSTInfo* pSrcValue, 
   ASN1T_TSP_TSTInfo* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_TSP_TSAPolicyId (pctxt, &pSrcValue->policy, &pDstValue->policy);

   asn1Copy_TSP_MessageImprint (pctxt, &pSrcValue->messageImprint, &pDstValue->messageImprint);

   asn1Copy_TSP_BIGINTEGER (pctxt, &pSrcValue->serialNumber, &pDstValue->serialNumber);

   RTCOPYCHARSTR (pctxt, (char *)pSrcValue->genTime, (char **)&pDstValue->genTime);

   if (pSrcValue->m.accuracyPresent) {
      asn1Copy_TSP_Accuracy (pctxt, &pSrcValue->accuracy, &pDstValue->accuracy);
   }

   pDstValue->ordering = pSrcValue->ordering;

   if (pSrcValue->m.noncePresent) {
      asn1Copy_TSP_BIGINTEGER (pctxt, &pSrcValue->nonce, &pDstValue->nonce);
   }

   if (pSrcValue->m.tsaPresent) {
      asn1Copy_IMP_GeneralName (pctxt, &pSrcValue->tsa, &pDstValue->tsa);
   }

   if (pSrcValue->m.extensionsPresent) {
      asn1Copy_EXP_Extensions (pctxt, &pSrcValue->extensions, &pDstValue->extensions);
   }

}

ASN1C_TSP_TSTInfo::ASN1C_TSP_TSTInfo (ASN1C_TSP_TSTInfo& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_TSTInfo::ASN1T_TSP_TSTInfo (ASN1C_TSP_TSTInfo& original)
{
   original.getCopy (this);
}

ASN1T_TSP_TSTInfo& ASN1C_TSP_TSTInfo::getCopy (ASN1T_TSP_TSTInfo* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_TSTInfo);
      new (pDstData) ASN1T_TSP_TSTInfo;
   }

   asn1Copy_TSP_TSTInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_TSP_TSTInfo* ASN1C_TSP_TSTInfo::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_TSTInfo* pDstData = new ASN1T_TSP_TSTInfo;

   asn1Copy_TSP_TSTInfo (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_TSP_ESYAReqEx (OSCTXT* pctxt, ASN1T_TSP_ESYAReqEx* pSrcValue, 
   ASN1T_TSP_ESYAReqEx* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   pDstValue->userid = pSrcValue->userid;

   rtCopyDynOctStr (pctxt, &pSrcValue->salt, &pDstValue->salt);

   pDstValue->iterationCount = pSrcValue->iterationCount;

   rtCopyDynOctStr (pctxt, &pSrcValue->iv, &pDstValue->iv);

   rtCopyDynOctStr (pctxt, &pSrcValue->encryptedMessageImprint, &pDstValue->
      encryptedMessageImprint);

}

ASN1C_TSP_ESYAReqEx::ASN1C_TSP_ESYAReqEx (ASN1C_TSP_ESYAReqEx& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_TSP_ESYAReqEx::ASN1T_TSP_ESYAReqEx (ASN1C_TSP_ESYAReqEx& original)
{
   original.getCopy (this);
}

ASN1T_TSP_ESYAReqEx& ASN1C_TSP_ESYAReqEx::getCopy (ASN1T_TSP_ESYAReqEx* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_TSP_ESYAReqEx);
      new (pDstData) ASN1T_TSP_ESYAReqEx;
   }

   asn1Copy_TSP_ESYAReqEx (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_TSP_ESYAReqEx* ASN1C_TSP_ESYAReqEx::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_TSP_ESYAReqEx* pDstData = new ASN1T_TSP_ESYAReqEx;

   asn1Copy_TSP_ESYAReqEx (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

