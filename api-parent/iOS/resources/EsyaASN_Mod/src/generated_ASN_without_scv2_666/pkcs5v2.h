/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#ifndef PKCS5V2_H
#define PKCS5V2_H

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1BerCppTypes.h"
#include "rtsrc/rtPrintToStream.h"

#include "Explicit.h"

/**
 * Header file for ASN.1 module pkcs5v2
 */
/**************************************************************/
/*                                                            */
/*  PBEParameter_salt                                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PBEParameter'
*/
class EXTERN ASN1C_PKCS5_PBEParameter_salt;

struct EXTERN ASN1T_PKCS5_PBEParameter_salt {
   OSUINT32 numocts;
   OSOCTET data[8];
   // ctors
   ASN1T_PKCS5_PBEParameter_salt () : numocts(0) {}
   ASN1T_PKCS5_PBEParameter_salt (OSUINT32 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLMEMCPY (data, _data, (OSUINT32) (OSRTMIN (numocts, sizeof(data))));
   }
   ASN1T_PKCS5_PBEParameter_salt (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT32) (OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLMEMCPY (data, cstring, numocts);
      }
      else numocts = 0;
   }
   ASN1T_PKCS5_PBEParameter_salt (ASN1C_PKCS5_PBEParameter_salt& srcData);
   // assignment operators
   ASN1T_PKCS5_PBEParameter_salt& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT32) (OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLMEMCPY (data, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

class EXTERN ASN1C_PKCS5_PBEParameter_salt :
public ASN1CType
{
protected:
   ASN1T_PKCS5_PBEParameter_salt& msgData;
public:
   ASN1C_PKCS5_PBEParameter_salt (ASN1T_PKCS5_PBEParameter_salt& data);
   ASN1C_PKCS5_PBEParameter_salt (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_PBEParameter_salt& data);
   ASN1C_PKCS5_PBEParameter_salt (OSRTContext &context
      , ASN1T_PKCS5_PBEParameter_salt& data);
   ASN1C_PKCS5_PBEParameter_salt (ASN1C_PKCS5_PBEParameter_salt& original);
   virtual ~ASN1C_PKCS5_PBEParameter_salt () {}
   inline ASN1T_PKCS5_PBEParameter_salt& getData () { return msgData; }
   inline const ASN1T_PKCS5_PBEParameter_salt& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PBEParameter_salt");
   int toStream (const char* name = "PBEParameter_salt");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_PBEParameter_salt* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_PBEParameter_salt& getCopy (ASN1T_PKCS5_PBEParameter_salt* pDstData = 0);
   ASN1T_PKCS5_PBEParameter_salt* newCopy ();

   inline ASN1C_PKCS5_PBEParameter_salt& operator= (ASN1C_PKCS5_PBEParameter_salt& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_PBEParameter_salt (OSCTXT* pctxt,
   ASN1T_PKCS5_PBEParameter_salt *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_PBEParameter_salt (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBEParameter_salt* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_PBEParameter_salt 
   (const char* name, const ASN1T_PKCS5_PBEParameter_salt* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_PBEParameter_salt (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBEParameter_salt* pvalue);

EXTERN ASN1T_PKCS5_PBEParameter_salt* 
   new_ASN1T_PKCS5_PBEParameter_salt (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_PBEParameter_salt (const char* name, 
   ASN1T_PKCS5_PBEParameter_salt* pValue, 
   ASN1T_PKCS5_PBEParameter_salt* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_PBEParameter_salt (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBEParameter_salt* pSrcValue, ASN1T_PKCS5_PBEParameter_salt*
    pDstValue);

EXTERN void asn1Init_PKCS5_PBEParameter_salt (ASN1T_PKCS5_PBEParameter_salt* pvalue);

/**************************************************************/
/*                                                            */
/*  RC2_CBC_Parameter_iv                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RC2-CBC-Parameter'
*/
class EXTERN ASN1C_PKCS5_RC2_CBC_Parameter_iv;

struct EXTERN ASN1T_PKCS5_RC2_CBC_Parameter_iv {
   OSUINT32 numocts;
   OSOCTET data[8];
   // ctors
   ASN1T_PKCS5_RC2_CBC_Parameter_iv () : numocts(0) {}
   ASN1T_PKCS5_RC2_CBC_Parameter_iv (OSUINT32 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLMEMCPY (data, _data, (OSUINT32) (OSRTMIN (numocts, sizeof(data))));
   }
   ASN1T_PKCS5_RC2_CBC_Parameter_iv (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT32) (OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLMEMCPY (data, cstring, numocts);
      }
      else numocts = 0;
   }
   ASN1T_PKCS5_RC2_CBC_Parameter_iv (ASN1C_PKCS5_RC2_CBC_Parameter_iv& srcData);
   // assignment operators
   ASN1T_PKCS5_RC2_CBC_Parameter_iv& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT32) (OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLMEMCPY (data, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

class EXTERN ASN1C_PKCS5_RC2_CBC_Parameter_iv :
public ASN1CType
{
protected:
   ASN1T_PKCS5_RC2_CBC_Parameter_iv& msgData;
public:
   ASN1C_PKCS5_RC2_CBC_Parameter_iv (ASN1T_PKCS5_RC2_CBC_Parameter_iv& data);
   ASN1C_PKCS5_RC2_CBC_Parameter_iv (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_RC2_CBC_Parameter_iv& data);
   ASN1C_PKCS5_RC2_CBC_Parameter_iv (OSRTContext &context
      , ASN1T_PKCS5_RC2_CBC_Parameter_iv& data);
   ASN1C_PKCS5_RC2_CBC_Parameter_iv (ASN1C_PKCS5_RC2_CBC_Parameter_iv& original);
   virtual ~ASN1C_PKCS5_RC2_CBC_Parameter_iv () {}
   inline ASN1T_PKCS5_RC2_CBC_Parameter_iv& getData () { return msgData; }
   inline const ASN1T_PKCS5_RC2_CBC_Parameter_iv& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RC2_CBC_Parameter_iv");
   int toStream (const char* name = "RC2_CBC_Parameter_iv");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_RC2_CBC_Parameter_iv* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_RC2_CBC_Parameter_iv& getCopy (ASN1T_PKCS5_RC2_CBC_Parameter_iv* pDstData = 0);
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* newCopy ();

   inline ASN1C_PKCS5_RC2_CBC_Parameter_iv& operator= (ASN1C_PKCS5_RC2_CBC_Parameter_iv& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_RC2_CBC_Parameter_iv (OSCTXT* pctxt,
   ASN1T_PKCS5_RC2_CBC_Parameter_iv *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_RC2_CBC_Parameter_iv (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_RC2_CBC_Parameter_iv 
   (const char* name, const ASN1T_PKCS5_RC2_CBC_Parameter_iv* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_RC2_CBC_Parameter_iv (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_RC2_CBC_Parameter_iv* pvalue);

EXTERN ASN1T_PKCS5_RC2_CBC_Parameter_iv* 
   new_ASN1T_PKCS5_RC2_CBC_Parameter_iv (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_RC2_CBC_Parameter_iv (const char* name, 
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pValue, 
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_RC2_CBC_Parameter_iv (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pSrcValue, 
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pDstValue);

EXTERN void asn1Init_PKCS5_RC2_CBC_Parameter_iv (
   ASN1T_PKCS5_RC2_CBC_Parameter_iv* pvalue);

/**************************************************************/
/*                                                            */
/*  RC5_CBC_Parameters_version                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RC5-CBC-Parameters'
*/
struct EXTERN PKCS5_RC5_CBC_Parameters_version {
   enum Root {
      v1_0 = 16
   } ;
} ;

typedef OSUINT8 ASN1T_PKCS5_RC5_CBC_Parameters_version;

class EXTERN ASN1C_PKCS5_RC5_CBC_Parameters_version :
public ASN1CType
{
protected:
   ASN1T_PKCS5_RC5_CBC_Parameters_version& msgData;
public:
   ASN1C_PKCS5_RC5_CBC_Parameters_version
       (ASN1T_PKCS5_RC5_CBC_Parameters_version& data);
   ASN1C_PKCS5_RC5_CBC_Parameters_version (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_RC5_CBC_Parameters_version& data);
   ASN1C_PKCS5_RC5_CBC_Parameters_version (OSRTContext &context
      , ASN1T_PKCS5_RC5_CBC_Parameters_version& data);
   virtual ~ASN1C_PKCS5_RC5_CBC_Parameters_version () {}
   inline ASN1T_PKCS5_RC5_CBC_Parameters_version& getData () { return msgData; }
   inline const ASN1T_PKCS5_RC5_CBC_Parameters_version& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RC5_CBC_Parameters_version");
   int toStream (const char* name = "RC5_CBC_Parameters_version");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_RC5_CBC_Parameters_version* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
} ;

EXTERN int asn1E_PKCS5_RC5_CBC_Parameters_version (OSCTXT* pctxt,
   ASN1T_PKCS5_RC5_CBC_Parameters_version *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_RC5_CBC_Parameters_version (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC5_CBC_Parameters_version* pvalue, ASN1TagType tagging, 
   int length);

EXTERN void asn1Print_PKCS5_RC5_CBC_Parameters_version 
   (const char* name, const ASN1T_PKCS5_RC5_CBC_Parameters_version* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_RC5_CBC_Parameters_version (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_RC5_CBC_Parameters_version* pvalue);

EXTERN ASN1T_PKCS5_RC5_CBC_Parameters_version* 
   new_ASN1T_PKCS5_RC5_CBC_Parameters_version (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_RC5_CBC_Parameters_version (const char* name, 
   ASN1T_PKCS5_RC5_CBC_Parameters_version* pValue, 
   ASN1T_PKCS5_RC5_CBC_Parameters_version* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

/**************************************************************/
/*                                                            */
/*  PBKDF2_params_salt                                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PBKDF2-params'
*/
/* Choice context tags */

#define TVC_PKCS5_PBKDF2_params_salt_specified	(TM_UNIV|TM_PRIM|4)
#define TVC_PKCS5_PBKDF2_params_salt_otherSource	(TM_UNIV|TM_CONS|16)

/* Choice tag constants */

#define T_PKCS5_PBKDF2_params_salt_specified 1
#define T_PKCS5_PBKDF2_params_salt_otherSource 2

class EXTERN ASN1C_PKCS5_PBKDF2_params_salt;

struct EXTERN ASN1T_PKCS5_PBKDF2_params_salt : public ASN1TPDU {
   OSUINT32 t;
   union {
      /* t = 1 */
      ASN1TDynOctStr *specified;
      /* t = 2 */
      ASN1T_EXP_AlgorithmIdentifier *otherSource;
   } u;
   ASN1T_PKCS5_PBKDF2_params_salt () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ASN1T_PKCS5_PBKDF2_params_salt (ASN1C_PKCS5_PBKDF2_params_salt& srcData);
   ~ASN1T_PKCS5_PBKDF2_params_salt ();
} ;

class EXTERN ASN1C_PKCS5_PBKDF2_params_salt :
public ASN1CType
{
protected:
   ASN1T_PKCS5_PBKDF2_params_salt& msgData;
public:
   ASN1C_PKCS5_PBKDF2_params_salt (ASN1T_PKCS5_PBKDF2_params_salt& data);
   ASN1C_PKCS5_PBKDF2_params_salt (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_PBKDF2_params_salt& data);
   ASN1C_PKCS5_PBKDF2_params_salt (OSRTContext &context
      , ASN1T_PKCS5_PBKDF2_params_salt& data);
   ASN1C_PKCS5_PBKDF2_params_salt (ASN1C_PKCS5_PBKDF2_params_salt& original);
   virtual ~ASN1C_PKCS5_PBKDF2_params_salt () {}
   inline ASN1T_PKCS5_PBKDF2_params_salt& getData () { return msgData; }
   inline const ASN1T_PKCS5_PBKDF2_params_salt& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PBKDF2_params_salt");
   int toStream (const char* name = "PBKDF2_params_salt");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_PBKDF2_params_salt* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_PBKDF2_params_salt& getCopy (ASN1T_PKCS5_PBKDF2_params_salt* pDstData = 0);
   ASN1T_PKCS5_PBKDF2_params_salt* newCopy ();

   inline ASN1C_PKCS5_PBKDF2_params_salt& operator= (ASN1C_PKCS5_PBKDF2_params_salt& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_PBKDF2_params_salt (OSCTXT* pctxt,
   ASN1T_PKCS5_PBKDF2_params_salt *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_PBKDF2_params_salt (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBKDF2_params_salt* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_PBKDF2_params_salt 
   (const char* name, const ASN1T_PKCS5_PBKDF2_params_salt* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_PBKDF2_params_salt (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBKDF2_params_salt* pvalue);

EXTERN ASN1T_PKCS5_PBKDF2_params_salt* 
   new_ASN1T_PKCS5_PBKDF2_params_salt (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_PBKDF2_params_salt (const char* name, 
   ASN1T_PKCS5_PBKDF2_params_salt* pValue, 
   ASN1T_PKCS5_PBKDF2_params_salt* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_PBKDF2_params_salt (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBKDF2_params_salt* pSrcValue, ASN1T_PKCS5_PBKDF2_params_salt*
    pDstValue);

EXTERN void asn1Init_PKCS5_PBKDF2_params_salt (ASN1T_PKCS5_PBKDF2_params_salt* pvalue);

EXTERN void asn1Free_PKCS5_PBKDF2_params_salt (OSCTXT *pctxt, 
   ASN1T_PKCS5_PBKDF2_params_salt* pvalue);

/**************************************************************/
/*                                                            */
/*  PBKDF2_params                                             */
/*                                                            */
/**************************************************************/
/*
PBKDF2-params ::= SEQUENCE {
   salt CHOICE {
      specified OCTET STRING,
      otherSource AlgorithmIdentifier
   },
   iterationCount INTEGER (1..MAX),
   keyLength INTEGER (1..MAX) OPTIONAL,
   prf AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
}
*/
#define TV_PKCS5_PBKDF2_params	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS5_PBKDF2_params;

struct EXTERN ASN1T_PKCS5_PBKDF2_params : public ASN1TPDU {
   struct {
      unsigned keyLengthPresent : 1;
      unsigned prfPresent : 1;
   } m;
   ASN1T_PKCS5_PBKDF2_params_salt salt;
   OSUINT32 iterationCount;
   OSUINT32 keyLength;
   ASN1T_EXP_AlgorithmIdentifier prf;
   ASN1T_PKCS5_PBKDF2_params ();
   ASN1T_PKCS5_PBKDF2_params (ASN1C_PKCS5_PBKDF2_params& srcData);
   ~ASN1T_PKCS5_PBKDF2_params ();
} ;

class EXTERN ASN1C_PKCS5_PBKDF2_params :
public ASN1CType
{
protected:
   ASN1T_PKCS5_PBKDF2_params& msgData;
public:
   ASN1C_PKCS5_PBKDF2_params (ASN1T_PKCS5_PBKDF2_params& data);
   ASN1C_PKCS5_PBKDF2_params (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_PBKDF2_params& data);
   ASN1C_PKCS5_PBKDF2_params (OSRTContext &context
      , ASN1T_PKCS5_PBKDF2_params& data);
   ASN1C_PKCS5_PBKDF2_params (ASN1C_PKCS5_PBKDF2_params& original);
   virtual ~ASN1C_PKCS5_PBKDF2_params () {}
   inline ASN1T_PKCS5_PBKDF2_params& getData () { return msgData; }
   inline const ASN1T_PKCS5_PBKDF2_params& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PBKDF2_params");
   int toStream (const char* name = "PBKDF2_params");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_PBKDF2_params* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_PBKDF2_params& getCopy (ASN1T_PKCS5_PBKDF2_params* pDstData = 0);
   ASN1T_PKCS5_PBKDF2_params* newCopy ();

   inline ASN1C_PKCS5_PBKDF2_params& operator= (ASN1C_PKCS5_PBKDF2_params& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_PBKDF2_params (OSCTXT* pctxt,
   ASN1T_PKCS5_PBKDF2_params *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_PBKDF2_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBKDF2_params* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_PBKDF2_params 
   (const char* name, const ASN1T_PKCS5_PBKDF2_params* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_PBKDF2_params (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBKDF2_params* pvalue);

EXTERN ASN1T_PKCS5_PBKDF2_params* 
   new_ASN1T_PKCS5_PBKDF2_params (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_PBKDF2_params (const char* name, 
   ASN1T_PKCS5_PBKDF2_params* pValue, ASN1T_PKCS5_PBKDF2_params* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_PBKDF2_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBKDF2_params* pSrcValue, ASN1T_PKCS5_PBKDF2_params* pDstValue);

EXTERN void asn1Init_PKCS5_PBKDF2_params (ASN1T_PKCS5_PBKDF2_params* pvalue);

EXTERN void asn1Free_PKCS5_PBKDF2_params (OSCTXT *pctxt, 
   ASN1T_PKCS5_PBKDF2_params* pvalue);

/**************************************************************/
/*                                                            */
/*  PBEParameter                                              */
/*                                                            */
/**************************************************************/
/*
PBEParameter ::= SEQUENCE {
   salt OCTET STRING (SIZE (8)),
   iterationCount INTEGER
}
*/
#define TV_PKCS5_PBEParameter	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS5_PBEParameter;

struct EXTERN ASN1T_PKCS5_PBEParameter : public ASN1TPDU {
   ASN1T_PKCS5_PBEParameter_salt salt;
   OSINT32 iterationCount;
   ASN1T_PKCS5_PBEParameter ();
   ASN1T_PKCS5_PBEParameter (ASN1C_PKCS5_PBEParameter& srcData);
} ;

class EXTERN ASN1C_PKCS5_PBEParameter :
public ASN1CType
{
protected:
   ASN1T_PKCS5_PBEParameter& msgData;
public:
   ASN1C_PKCS5_PBEParameter (ASN1T_PKCS5_PBEParameter& data);
   ASN1C_PKCS5_PBEParameter (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_PBEParameter& data);
   ASN1C_PKCS5_PBEParameter (OSRTContext &context
      , ASN1T_PKCS5_PBEParameter& data);
   ASN1C_PKCS5_PBEParameter (ASN1C_PKCS5_PBEParameter& original);
   virtual ~ASN1C_PKCS5_PBEParameter () {}
   inline ASN1T_PKCS5_PBEParameter& getData () { return msgData; }
   inline const ASN1T_PKCS5_PBEParameter& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PBEParameter");
   int toStream (const char* name = "PBEParameter");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_PBEParameter* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_PBEParameter& getCopy (ASN1T_PKCS5_PBEParameter* pDstData = 0);
   ASN1T_PKCS5_PBEParameter* newCopy ();

   inline ASN1C_PKCS5_PBEParameter& operator= (ASN1C_PKCS5_PBEParameter& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_PBEParameter (OSCTXT* pctxt,
   ASN1T_PKCS5_PBEParameter *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_PBEParameter (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBEParameter* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_PBEParameter 
   (const char* name, const ASN1T_PKCS5_PBEParameter* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_PBEParameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBEParameter* pvalue);

EXTERN ASN1T_PKCS5_PBEParameter* 
   new_ASN1T_PKCS5_PBEParameter (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_PBEParameter (const char* name, 
   ASN1T_PKCS5_PBEParameter* pValue, ASN1T_PKCS5_PBEParameter* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_PBEParameter (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBEParameter* pSrcValue, ASN1T_PKCS5_PBEParameter* pDstValue);

EXTERN void asn1Init_PKCS5_PBEParameter (ASN1T_PKCS5_PBEParameter* pvalue);

/**************************************************************/
/*                                                            */
/*  PBES2_params                                              */
/*                                                            */
/**************************************************************/
/*
PBES2-params ::= SEQUENCE {
   keyDerivationFunc AlgorithmIdentifier,
   encryptionScheme AlgorithmIdentifier
}
*/
#define TV_PKCS5_PBES2_params	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS5_PBES2_params;

struct EXTERN ASN1T_PKCS5_PBES2_params : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier keyDerivationFunc;
   ASN1T_EXP_AlgorithmIdentifier encryptionScheme;
   ASN1T_PKCS5_PBES2_params ();
   ASN1T_PKCS5_PBES2_params (ASN1C_PKCS5_PBES2_params& srcData);
   ~ASN1T_PKCS5_PBES2_params ();
} ;

class EXTERN ASN1C_PKCS5_PBES2_params :
public ASN1CType
{
protected:
   ASN1T_PKCS5_PBES2_params& msgData;
public:
   ASN1C_PKCS5_PBES2_params (ASN1T_PKCS5_PBES2_params& data);
   ASN1C_PKCS5_PBES2_params (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_PBES2_params& data);
   ASN1C_PKCS5_PBES2_params (OSRTContext &context
      , ASN1T_PKCS5_PBES2_params& data);
   ASN1C_PKCS5_PBES2_params (ASN1C_PKCS5_PBES2_params& original);
   virtual ~ASN1C_PKCS5_PBES2_params () {}
   inline ASN1T_PKCS5_PBES2_params& getData () { return msgData; }
   inline const ASN1T_PKCS5_PBES2_params& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PBES2_params");
   int toStream (const char* name = "PBES2_params");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_PBES2_params* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_PBES2_params& getCopy (ASN1T_PKCS5_PBES2_params* pDstData = 0);
   ASN1T_PKCS5_PBES2_params* newCopy ();

   inline ASN1C_PKCS5_PBES2_params& operator= (ASN1C_PKCS5_PBES2_params& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_PBES2_params (OSCTXT* pctxt,
   ASN1T_PKCS5_PBES2_params *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_PBES2_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBES2_params* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_PBES2_params 
   (const char* name, const ASN1T_PKCS5_PBES2_params* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_PBES2_params (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBES2_params* pvalue);

EXTERN ASN1T_PKCS5_PBES2_params* 
   new_ASN1T_PKCS5_PBES2_params (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_PBES2_params (const char* name, 
   ASN1T_PKCS5_PBES2_params* pValue, ASN1T_PKCS5_PBES2_params* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_PBES2_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBES2_params* pSrcValue, ASN1T_PKCS5_PBES2_params* pDstValue);

EXTERN void asn1Init_PKCS5_PBES2_params (ASN1T_PKCS5_PBES2_params* pvalue);

EXTERN void asn1Free_PKCS5_PBES2_params (OSCTXT *pctxt, 
   ASN1T_PKCS5_PBES2_params* pvalue);

/**************************************************************/
/*                                                            */
/*  PBMAC1_params                                             */
/*                                                            */
/**************************************************************/
/*
PBMAC1-params ::= SEQUENCE {
   keyDerivationFunc AlgorithmIdentifier,
   messageAuthScheme AlgorithmIdentifier
}
*/
#define TV_PKCS5_PBMAC1_params	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS5_PBMAC1_params;

struct EXTERN ASN1T_PKCS5_PBMAC1_params : public ASN1TPDU {
   ASN1T_EXP_AlgorithmIdentifier keyDerivationFunc;
   ASN1T_EXP_AlgorithmIdentifier messageAuthScheme;
   ASN1T_PKCS5_PBMAC1_params ();
   ASN1T_PKCS5_PBMAC1_params (ASN1C_PKCS5_PBMAC1_params& srcData);
   ~ASN1T_PKCS5_PBMAC1_params ();
} ;

class EXTERN ASN1C_PKCS5_PBMAC1_params :
public ASN1CType
{
protected:
   ASN1T_PKCS5_PBMAC1_params& msgData;
public:
   ASN1C_PKCS5_PBMAC1_params (ASN1T_PKCS5_PBMAC1_params& data);
   ASN1C_PKCS5_PBMAC1_params (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_PBMAC1_params& data);
   ASN1C_PKCS5_PBMAC1_params (OSRTContext &context
      , ASN1T_PKCS5_PBMAC1_params& data);
   ASN1C_PKCS5_PBMAC1_params (ASN1C_PKCS5_PBMAC1_params& original);
   virtual ~ASN1C_PKCS5_PBMAC1_params () {}
   inline ASN1T_PKCS5_PBMAC1_params& getData () { return msgData; }
   inline const ASN1T_PKCS5_PBMAC1_params& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "PBMAC1_params");
   int toStream (const char* name = "PBMAC1_params");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_PBMAC1_params* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_PBMAC1_params& getCopy (ASN1T_PKCS5_PBMAC1_params* pDstData = 0);
   ASN1T_PKCS5_PBMAC1_params* newCopy ();

   inline ASN1C_PKCS5_PBMAC1_params& operator= (ASN1C_PKCS5_PBMAC1_params& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_PBMAC1_params (OSCTXT* pctxt,
   ASN1T_PKCS5_PBMAC1_params *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_PBMAC1_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBMAC1_params* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_PBMAC1_params 
   (const char* name, const ASN1T_PKCS5_PBMAC1_params* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_PBMAC1_params (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_PBMAC1_params* pvalue);

EXTERN ASN1T_PKCS5_PBMAC1_params* 
   new_ASN1T_PKCS5_PBMAC1_params (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_PBMAC1_params (const char* name, 
   ASN1T_PKCS5_PBMAC1_params* pValue, ASN1T_PKCS5_PBMAC1_params* pCmpValue, 
   char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_PBMAC1_params (OSCTXT* pctxt, 
   ASN1T_PKCS5_PBMAC1_params* pSrcValue, ASN1T_PKCS5_PBMAC1_params* pDstValue);

EXTERN void asn1Init_PKCS5_PBMAC1_params (ASN1T_PKCS5_PBMAC1_params* pvalue);

EXTERN void asn1Free_PKCS5_PBMAC1_params (OSCTXT *pctxt, 
   ASN1T_PKCS5_PBMAC1_params* pvalue);

/**************************************************************/
/*                                                            */
/*  RC2_CBC_Parameter                                         */
/*                                                            */
/**************************************************************/
/*
RC2-CBC-Parameter ::= SEQUENCE {
   rc2ParameterVersion INTEGER OPTIONAL,
   iv OCTET STRING (SIZE (8))
}
*/
#define TV_PKCS5_RC2_CBC_Parameter	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS5_RC2_CBC_Parameter;

struct EXTERN ASN1T_PKCS5_RC2_CBC_Parameter : public ASN1TPDU {
   struct {
      unsigned rc2ParameterVersionPresent : 1;
   } m;
   OSINT32 rc2ParameterVersion;
   ASN1T_PKCS5_RC2_CBC_Parameter_iv iv;
   ASN1T_PKCS5_RC2_CBC_Parameter ();
   ASN1T_PKCS5_RC2_CBC_Parameter (ASN1C_PKCS5_RC2_CBC_Parameter& srcData);
} ;

class EXTERN ASN1C_PKCS5_RC2_CBC_Parameter :
public ASN1CType
{
protected:
   ASN1T_PKCS5_RC2_CBC_Parameter& msgData;
public:
   ASN1C_PKCS5_RC2_CBC_Parameter (ASN1T_PKCS5_RC2_CBC_Parameter& data);
   ASN1C_PKCS5_RC2_CBC_Parameter (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_RC2_CBC_Parameter& data);
   ASN1C_PKCS5_RC2_CBC_Parameter (OSRTContext &context
      , ASN1T_PKCS5_RC2_CBC_Parameter& data);
   ASN1C_PKCS5_RC2_CBC_Parameter (ASN1C_PKCS5_RC2_CBC_Parameter& original);
   virtual ~ASN1C_PKCS5_RC2_CBC_Parameter () {}
   inline ASN1T_PKCS5_RC2_CBC_Parameter& getData () { return msgData; }
   inline const ASN1T_PKCS5_RC2_CBC_Parameter& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RC2_CBC_Parameter");
   int toStream (const char* name = "RC2_CBC_Parameter");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_RC2_CBC_Parameter* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_RC2_CBC_Parameter& getCopy (ASN1T_PKCS5_RC2_CBC_Parameter* pDstData = 0);
   ASN1T_PKCS5_RC2_CBC_Parameter* newCopy ();

   inline ASN1C_PKCS5_RC2_CBC_Parameter& operator= (ASN1C_PKCS5_RC2_CBC_Parameter& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_RC2_CBC_Parameter (OSCTXT* pctxt,
   ASN1T_PKCS5_RC2_CBC_Parameter *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_RC2_CBC_Parameter (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC2_CBC_Parameter* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_RC2_CBC_Parameter 
   (const char* name, const ASN1T_PKCS5_RC2_CBC_Parameter* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_RC2_CBC_Parameter (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_RC2_CBC_Parameter* pvalue);

EXTERN ASN1T_PKCS5_RC2_CBC_Parameter* 
   new_ASN1T_PKCS5_RC2_CBC_Parameter (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_RC2_CBC_Parameter (const char* name, 
   ASN1T_PKCS5_RC2_CBC_Parameter* pValue, 
   ASN1T_PKCS5_RC2_CBC_Parameter* pCmpValue, char* errBuff, OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_RC2_CBC_Parameter (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC2_CBC_Parameter* pSrcValue, ASN1T_PKCS5_RC2_CBC_Parameter*
    pDstValue);

EXTERN void asn1Init_PKCS5_RC2_CBC_Parameter (ASN1T_PKCS5_RC2_CBC_Parameter* pvalue);

/**************************************************************/
/*                                                            */
/*  RC5_CBC_Parameters                                        */
/*                                                            */
/**************************************************************/
/*
RC5-CBC-Parameters ::= SEQUENCE {
   version INTEGER { v1-0(16) } (v1-0),
   rounds INTEGER (8..127),
   blockSizeInBits INTEGER (64 | 128),
   iv OCTET STRING OPTIONAL
}
*/
#define TV_PKCS5_RC5_CBC_Parameters	(TM_UNIV|TM_CONS|16)

class EXTERN ASN1C_PKCS5_RC5_CBC_Parameters;

struct EXTERN ASN1T_PKCS5_RC5_CBC_Parameters : public ASN1TPDU {
   struct {
      unsigned ivPresent : 1;
   } m;
   ASN1T_PKCS5_RC5_CBC_Parameters_version version;
   OSUINT8 rounds;
   OSUINT8 blockSizeInBits;
   ASN1TDynOctStr iv;
   ASN1T_PKCS5_RC5_CBC_Parameters ();
   ASN1T_PKCS5_RC5_CBC_Parameters (ASN1C_PKCS5_RC5_CBC_Parameters& srcData);
   ~ASN1T_PKCS5_RC5_CBC_Parameters ();
} ;

class EXTERN ASN1C_PKCS5_RC5_CBC_Parameters :
public ASN1CType
{
protected:
   ASN1T_PKCS5_RC5_CBC_Parameters& msgData;
public:
   ASN1C_PKCS5_RC5_CBC_Parameters (ASN1T_PKCS5_RC5_CBC_Parameters& data);
   ASN1C_PKCS5_RC5_CBC_Parameters (OSRTMessageBufferIF& msgBuf
      , ASN1T_PKCS5_RC5_CBC_Parameters& data);
   ASN1C_PKCS5_RC5_CBC_Parameters (OSRTContext &context
      , ASN1T_PKCS5_RC5_CBC_Parameters& data);
   ASN1C_PKCS5_RC5_CBC_Parameters (ASN1C_PKCS5_RC5_CBC_Parameters& original);
   virtual ~ASN1C_PKCS5_RC5_CBC_Parameters () {}
   inline ASN1T_PKCS5_RC5_CBC_Parameters& getData () { return msgData; }
   inline const ASN1T_PKCS5_RC5_CBC_Parameters& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   int EncodeTo (OSRTMessageBufferIF& msgBuf);
   int DecodeFrom (OSRTMessageBufferIF& msgBuf);

   void MemFree ();
   void Print (const char* name = "RC5_CBC_Parameters");
   int toStream (const char* name = "RC5_CBC_Parameters");
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   OSBOOL Equals (ASN1T_PKCS5_RC5_CBC_Parameters* pCmpValue, 
      char* errBuff, OSSIZE errBuffSize);
   ASN1T_PKCS5_RC5_CBC_Parameters& getCopy (ASN1T_PKCS5_RC5_CBC_Parameters* pDstData = 0);
   ASN1T_PKCS5_RC5_CBC_Parameters* newCopy ();

   inline ASN1C_PKCS5_RC5_CBC_Parameters& operator= (ASN1C_PKCS5_RC5_CBC_Parameters& srcData) {
      srcData.getCopy (&msgData);
      return *this;
   }
} ;

EXTERN int asn1E_PKCS5_RC5_CBC_Parameters (OSCTXT* pctxt,
   ASN1T_PKCS5_RC5_CBC_Parameters *pvalue, ASN1TagType tagging);

EXTERN int asn1D_PKCS5_RC5_CBC_Parameters (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC5_CBC_Parameters* pvalue, ASN1TagType tagging, int length);

EXTERN void asn1Print_PKCS5_RC5_CBC_Parameters 
   (const char* name, const ASN1T_PKCS5_RC5_CBC_Parameters* pvalue);

EXTERN int asn1PrtToStrm_PKCS5_RC5_CBC_Parameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_PKCS5_RC5_CBC_Parameters* pvalue);

EXTERN ASN1T_PKCS5_RC5_CBC_Parameters* 
   new_ASN1T_PKCS5_RC5_CBC_Parameters (ASN1CType& ccobj);

EXTERN OSBOOL asn1Compare_PKCS5_RC5_CBC_Parameters (const char* name, 
   ASN1T_PKCS5_RC5_CBC_Parameters* pValue, 
   ASN1T_PKCS5_RC5_CBC_Parameters* pCmpValue, char* errBuff, 
   OSSIZE errBuffSize);

EXTERN void asn1Copy_PKCS5_RC5_CBC_Parameters (OSCTXT* pctxt, 
   ASN1T_PKCS5_RC5_CBC_Parameters* pSrcValue, ASN1T_PKCS5_RC5_CBC_Parameters*
    pDstValue);

EXTERN void asn1Init_PKCS5_RC5_CBC_Parameters (ASN1T_PKCS5_RC5_CBC_Parameters* pvalue);

EXTERN void asn1Free_PKCS5_RC5_CBC_Parameters (OSCTXT *pctxt, 
   ASN1T_PKCS5_RC5_CBC_Parameters* pvalue);

/* Value definitions */

extern EXTERN ASN1OBJID PKCS5_rsadsi;
extern EXTERN ASN1OBJID PKCS5_pkcs;
extern EXTERN ASN1OBJID PKCS5_pkcs_5;
extern EXTERN ASN1OBJID PKCS5_id_PBKDF2;
extern EXTERN ASN1OBJID PKCS5_pbeWithMD2AndDES_CBC;
extern EXTERN ASN1OBJID PKCS5_pbeWithMD2AndRC2_CBC;
extern EXTERN ASN1OBJID PKCS5_pbeWithMD5AndDES_CBC;
extern EXTERN ASN1OBJID PKCS5_pbeWithMD5AndRC2_CBC;
extern EXTERN ASN1OBJID PKCS5_pbeWithSHA1AndDES_CBC;
extern EXTERN ASN1OBJID PKCS5_pbeWithSHA1AndRC2_CBC;
extern EXTERN ASN1OBJID PKCS5_id_PBES2;
extern EXTERN ASN1OBJID PKCS5_id_PBMAC1;
extern EXTERN ASN1OBJID PKCS5_digestAlgorithm;
extern EXTERN ASN1OBJID PKCS5_encryptionAlgorithm;
extern EXTERN ASN1OBJID PKCS5_id_hmacWithSHA1;
extern EXTERN ASN1OBJID PKCS5_id_hmacWithSHA224;
extern EXTERN ASN1OBJID PKCS5_id_hmacWithSHA256;
extern EXTERN ASN1OBJID PKCS5_id_hmacWithSHA384;
extern EXTERN ASN1OBJID PKCS5_id_hmacWithSHA512;
extern EXTERN ASN1OBJID PKCS5_rc2CBC;
extern EXTERN ASN1OBJID PKCS5_rc5_CBC_PAD;

#endif
