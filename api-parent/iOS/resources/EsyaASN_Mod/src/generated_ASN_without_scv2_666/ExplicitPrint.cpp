/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include "Explicit.h"
#include "UsefulDefinitions.h"
#include "rtsrc/rtPrint.h"
#include "rtxsrc/rtxCommon.h"

void asn1Print_EXP_Version (const char* name, const ASN1T_EXP_Version* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 0: printf ("%s = v1\n", name); break;
      case 1: printf ("%s = v2\n", name); break;
      case 2: printf ("%s = v3\n", name); break;
      default: rtxPrintInteger (name, *pvalue);
   }
}

void ASN1C_EXP_Version::Print (const char* name)
{
   asn1Print_EXP_Version (name, &msgData);
}

void asn1Print_EXP_CertificateSerialNumber 
   (const char* name, const ASN1T_EXP_CertificateSerialNumber* pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, *pvalue);
}

void ASN1C_EXP_CertificateSerialNumber::Print (const char* name)
{
   asn1Print_EXP_CertificateSerialNumber (name, &msgData);
}

void asn1Print_EXP_AttributeType 
   (const char* name, const ASN1T_EXP_AttributeType* pvalue)
{
   rtxPrintIndent ();
   rtPrintOID (name, (ASN1OBJID*)pvalue);
}

void ASN1C_EXP_AttributeType::Print (const char* name)
{
   asn1Print_EXP_AttributeType (name, &msgData);
}

void asn1Print_EXP_AttributeValue 
   (const char* name, const ASN1T_EXP_AttributeValue* pvalue)
{
   rtxPrintIndent ();
   rtxPrintHexStr (name, pvalue->numocts,
   pvalue->data);
}

void ASN1C_EXP_AttributeValue::Print (const char* name)
{
   asn1Print_EXP_AttributeValue (name, &msgData);
}

void asn1Print_EXP_UniqueIdentifier 
   (const char* name, const ASN1T_EXP_UniqueIdentifier* pvalue)
{
   rtxPrintIndent ();
   rtPrintBitStrBraceText (name, pvalue->numbits, pvalue->data);
}

void ASN1C_EXP_UniqueIdentifier::Print (const char* name)
{
   asn1Print_EXP_UniqueIdentifier (name, &msgData);
}

void asn1Print_EXP_X121Address 
   (const char* name, const ASN1T_EXP_X121Address pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_X121Address::Print (const char* name)
{
   asn1Print_EXP_X121Address (name, msgData);
}

void asn1Print_EXP_NetworkAddress 
   (const char* name, const ASN1T_EXP_NetworkAddress pvalue)
{
   asn1Print_EXP_X121Address (name, pvalue);
}

void ASN1C_EXP_NetworkAddress::Print (const char* name)
{
   asn1Print_EXP_NetworkAddress (name, msgData);
}

void asn1Print_EXP_TerminalIdentifier 
   (const char* name, const ASN1T_EXP_TerminalIdentifier pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_TerminalIdentifier::Print (const char* name)
{
   asn1Print_EXP_TerminalIdentifier (name, msgData);
}

void asn1Print_EXP_OrganizationName 
   (const char* name, const ASN1T_EXP_OrganizationName pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_OrganizationName::Print (const char* name)
{
   asn1Print_EXP_OrganizationName (name, msgData);
}

void asn1Print_EXP_NumericUserIdentifier 
   (const char* name, const ASN1T_EXP_NumericUserIdentifier pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_NumericUserIdentifier::Print (const char* name)
{
   asn1Print_EXP_NumericUserIdentifier (name, msgData);
}

void asn1Print_EXP_OrganizationalUnitName 
   (const char* name, const ASN1T_EXP_OrganizationalUnitName pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_OrganizationalUnitName::Print (const char* name)
{
   asn1Print_EXP_OrganizationalUnitName (name, msgData);
}

void asn1Print_EXP_CommonName 
   (const char* name, const ASN1T_EXP_CommonName pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_CommonName::Print (const char* name)
{
   asn1Print_EXP_CommonName (name, msgData);
}

void asn1Print_EXP_TeletexCommonName 
   (const char* name, const ASN1T_EXP_TeletexCommonName pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_TeletexCommonName::Print (const char* name)
{
   asn1Print_EXP_TeletexCommonName (name, msgData);
}

void asn1Print_EXP_TeletexOrganizationName 
   (const char* name, const ASN1T_EXP_TeletexOrganizationName pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_TeletexOrganizationName::Print (const char* name)
{
   asn1Print_EXP_TeletexOrganizationName (name, msgData);
}

void asn1Print_EXP_TeletexOrganizationalUnitName 
   (const char* name, const ASN1T_EXP_TeletexOrganizationalUnitName pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_TeletexOrganizationalUnitName::Print (const char* name)
{
   asn1Print_EXP_TeletexOrganizationalUnitName (name, msgData);
}

void asn1Print_EXP_PDSName (const char* name, const ASN1T_EXP_PDSName pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_PDSName::Print (const char* name)
{
   asn1Print_EXP_PDSName (name, msgData);
}

void asn1Print_EXP_PDSParameter 
   (const char* name, const ASN1T_EXP_PDSParameter* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.printable_stringPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("printable_string", pvalue->printable_string);
   }

   if (pvalue->m.teletex_stringPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("teletex_string", pvalue->teletex_string);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_PDSParameter::Print (const char* name)
{
   asn1Print_EXP_PDSParameter (name, &msgData);
}

void asn1Print_EXP_PhysicalDeliveryOfficeName 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryOfficeName* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_PhysicalDeliveryOfficeName::Print (const char* name)
{
   asn1Print_EXP_PhysicalDeliveryOfficeName (name, &msgData);
}

void asn1Print_EXP_PhysicalDeliveryOfficeNumber 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryOfficeNumber* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_PhysicalDeliveryOfficeNumber::Print (const char* name)
{
   asn1Print_EXP_PhysicalDeliveryOfficeNumber (name, &msgData);
}

void asn1Print_EXP_ExtensionORAddressComponents 
   (const char* name, const ASN1T_EXP_ExtensionORAddressComponents* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_ExtensionORAddressComponents::Print (const char* name)
{
   asn1Print_EXP_ExtensionORAddressComponents (name, &msgData);
}

void asn1Print_EXP_PhysicalDeliveryPersonalName 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryPersonalName* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_PhysicalDeliveryPersonalName::Print (const char* name)
{
   asn1Print_EXP_PhysicalDeliveryPersonalName (name, &msgData);
}

void asn1Print_EXP_PhysicalDeliveryOrganizationName 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryOrganizationName* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_PhysicalDeliveryOrganizationName::Print (const char* name)
{
   asn1Print_EXP_PhysicalDeliveryOrganizationName (name, &msgData);
}

void asn1Print_EXP_ExtensionPhysicalDeliveryAddressComponents 
   (const char* name, const ASN1T_EXP_ExtensionPhysicalDeliveryAddressComponents* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_ExtensionPhysicalDeliveryAddressComponents::Print (const char* name)
{
   asn1Print_EXP_ExtensionPhysicalDeliveryAddressComponents (name, &msgData);
}

void asn1Print_EXP_StreetAddress 
   (const char* name, const ASN1T_EXP_StreetAddress* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_StreetAddress::Print (const char* name)
{
   asn1Print_EXP_StreetAddress (name, &msgData);
}

void asn1Print_EXP_PostOfficeBoxAddress 
   (const char* name, const ASN1T_EXP_PostOfficeBoxAddress* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_PostOfficeBoxAddress::Print (const char* name)
{
   asn1Print_EXP_PostOfficeBoxAddress (name, &msgData);
}

void asn1Print_EXP_PosteRestanteAddress 
   (const char* name, const ASN1T_EXP_PosteRestanteAddress* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_PosteRestanteAddress::Print (const char* name)
{
   asn1Print_EXP_PosteRestanteAddress (name, &msgData);
}

void asn1Print_EXP_UniquePostalName 
   (const char* name, const ASN1T_EXP_UniquePostalName* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_UniquePostalName::Print (const char* name)
{
   asn1Print_EXP_UniquePostalName (name, &msgData);
}

void asn1Print_EXP_LocalPostalAttributes 
   (const char* name, const ASN1T_EXP_LocalPostalAttributes* pvalue)
{
   asn1Print_EXP_PDSParameter (name, pvalue);
}

void ASN1C_EXP_LocalPostalAttributes::Print (const char* name)
{
   asn1Print_EXP_LocalPostalAttributes (name, &msgData);
}

void asn1Print_EXP_TerminalType 
   (const char* name, const ASN1T_EXP_TerminalType* pvalue)
{
   rtxPrintIndent ();
   switch (*pvalue) {
      case 3: printf ("%s = telex\n", name); break;
      case 4: printf ("%s = teletex\n", name); break;
      case 5: printf ("%s = g3_facsimile\n", name); break;
      case 6: printf ("%s = g4_facsimile\n", name); break;
      case 7: printf ("%s = ia5_terminal\n", name); break;
      case 8: printf ("%s = videotex\n", name); break;
      default: rtxPrintUnsigned (name, *pvalue);
   }
}

void ASN1C_EXP_TerminalType::Print (const char* name)
{
   asn1Print_EXP_TerminalType (name, &msgData);
}

void asn1Print_EXP_X520countryName 
   (const char* name, const ASN1T_EXP_X520countryName pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_X520countryName::Print (const char* name)
{
   asn1Print_EXP_X520countryName (name, msgData);
}

void asn1Print_EXP_X520SerialNumber 
   (const char* name, const ASN1T_EXP_X520SerialNumber pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_X520SerialNumber::Print (const char* name)
{
   asn1Print_EXP_X520SerialNumber (name, msgData);
}

void asn1Print_EXP_DomainComponent 
   (const char* name, const ASN1T_EXP_DomainComponent pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_DomainComponent::Print (const char* name)
{
   asn1Print_EXP_DomainComponent (name, msgData);
}

void asn1Print_EXP_EmailAddress 
   (const char* name, const ASN1T_EXP_EmailAddress pvalue)
{
   rtxPrintIndent ();
   rtxPrintCharStr (name, pvalue);
}

void ASN1C_EXP_EmailAddress::Print (const char* name)
{
   asn1Print_EXP_EmailAddress (name, msgData);
}

void asn1Print_EXP_AlgorithmIdentifier 
   (const char* name, const ASN1T_EXP_AlgorithmIdentifier* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("algorithm", (ASN1OBJID*)&pvalue->algorithm);

   if (pvalue->m.parametersPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("parameters", pvalue->parameters.numocts,
      pvalue->parameters.data);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_AlgorithmIdentifier::Print (const char* name)
{
   asn1Print_EXP_AlgorithmIdentifier (name, &msgData);
}

void asn1Print_EXP_AttributeTypeAndValue 
   (const char* name, const ASN1T_EXP_AttributeTypeAndValue* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AttributeType ("type", &pvalue->type);

   asn1Print_EXP_AttributeValue ("value", &pvalue->value);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_AttributeTypeAndValue::Print (const char* name)
{
   asn1Print_EXP_AttributeTypeAndValue (name, &msgData);
}

void asn1Print_EXP_RelativeDistinguishedName 
   (const char* name, const ASN1T_EXP_RelativeDistinguishedName* pvalue)
{
   ASN1T_EXP_AttributeTypeAndValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_AttributeTypeAndValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_AttributeTypeAndValue (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_RelativeDistinguishedName::Print (const char* name)
{
   asn1Print_EXP_RelativeDistinguishedName (name, &msgData);
}

void asn1Print_EXP_RDNSequence 
   (const char* name, const ASN1T_EXP_RDNSequence* pvalue)
{
   ASN1T_EXP_RelativeDistinguishedName* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_RelativeDistinguishedName*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_RelativeDistinguishedName (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_RDNSequence::Print (const char* name)
{
   asn1Print_EXP_RDNSequence (name, &msgData);
}

void asn1Print_EXP_Name (const char* name, const ASN1T_EXP_Name* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* rdnSequence */
      case 1:
      {
         asn1Print_EXP_RDNSequence ("rdnSequence", pvalue->u.rdnSequence);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_Name::Print (const char* name)
{
   asn1Print_EXP_Name (name, &msgData);
}

void asn1Print_EXP_Time (const char* name, const ASN1T_EXP_Time* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utcTime */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("utcTime", pvalue->u.utcTime);
         break;
      }
      /* generalTime */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("generalTime", pvalue->u.generalTime);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_Time::Print (const char* name)
{
   asn1Print_EXP_Time (name, &msgData);
}

void asn1Print_EXP_Validity 
   (const char* name, const ASN1T_EXP_Validity* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_Time ("notBefore", &pvalue->notBefore);

   asn1Print_EXP_Time ("notAfter", &pvalue->notAfter);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_Validity::Print (const char* name)
{
   asn1Print_EXP_Validity (name, &msgData);
}

void asn1Print_EXP_SubjectPublicKeyInfo 
   (const char* name, const ASN1T_EXP_SubjectPublicKeyInfo* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AlgorithmIdentifier ("algorithm", &pvalue->algorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("subjectPublicKey", pvalue->subjectPublicKey.numbits, pvalue->subjectPublicKey.data);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_SubjectPublicKeyInfo::Print (const char* name)
{
   asn1Print_EXP_SubjectPublicKeyInfo (name, &msgData);
}

void asn1Print_EXP_Extension 
   (const char* name, const ASN1T_EXP_Extension* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtPrintOID ("extnID", (ASN1OBJID*)&pvalue->extnID);

   rtxPrintIndent ();
   rtxPrintBoolean ("critical", pvalue->critical);

   rtxPrintIndent ();
   rtxPrintHexStr ("extnValue", pvalue->extnValue.numocts, pvalue->extnValue.data);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_Extension::Print (const char* name)
{
   asn1Print_EXP_Extension (name, &msgData);
}

void asn1Print_EXP_Extensions 
   (const char* name, const ASN1T_EXP_Extensions* pvalue)
{
   ASN1T_EXP_Extension* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_Extension*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_Extension (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_Extensions::Print (const char* name)
{
   asn1Print_EXP_Extensions (name, &msgData);
}

void asn1Print_EXP_TBSCertificate 
   (const char* name, const ASN1T_EXP_TBSCertificate* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_Version ("version", &pvalue->version);

   asn1Print_EXP_CertificateSerialNumber ("serialNumber", &pvalue->serialNumber
      );

   asn1Print_EXP_AlgorithmIdentifier ("signature_", &pvalue->signature_);

   asn1Print_EXP_Name ("issuer", &pvalue->issuer);

   asn1Print_EXP_Validity ("validity", &pvalue->validity);

   asn1Print_EXP_Name ("subject", &pvalue->subject);

   asn1Print_EXP_SubjectPublicKeyInfo ("subjectPublicKeyInfo", &pvalue->
      subjectPublicKeyInfo);

   if (pvalue->m.issuerUniqueIDPresent) {
      asn1Print_EXP_UniqueIdentifier ("issuerUniqueID", &pvalue->issuerUniqueID
         );
   }

   if (pvalue->m.subjectUniqueIDPresent) {
      asn1Print_EXP_UniqueIdentifier ("subjectUniqueID", &pvalue->
         subjectUniqueID);
   }

   if (pvalue->m.extensionsPresent) {
      asn1Print_EXP_Extensions ("extensions", &pvalue->extensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_TBSCertificate::Print (const char* name)
{
   asn1Print_EXP_TBSCertificate (name, &msgData);
}

void asn1Print_EXP_Certificate 
   (const char* name, const ASN1T_EXP_Certificate* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_TBSCertificate ("tbsCertificate", &pvalue->tbsCertificate);

   asn1Print_EXP_AlgorithmIdentifier ("signatureAlgorithm", &pvalue->
      signatureAlgorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_Certificate::Print (const char* name)
{
   asn1Print_EXP_Certificate (name, &msgData);
}

void asn1Print_EXP__SetOfEXP_AttributeValue 
   (const char* name, const ASN1T_EXP__SetOfEXP_AttributeValue* pvalue)
{
   ASN1T_EXP_AttributeValue* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_AttributeValue*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_AttributeValue (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP__SetOfEXP_AttributeValue::Print (const char* name)
{
   asn1Print_EXP__SetOfEXP_AttributeValue (name, &msgData);
}

void asn1Print_EXP_Attribute 
   (const char* name, const ASN1T_EXP_Attribute* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_AttributeType ("type", &pvalue->type);

   asn1Print_EXP__SetOfEXP_AttributeValue ("values", &pvalue->values);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_Attribute::Print (const char* name)
{
   asn1Print_EXP_Attribute (name, &msgData);
}

void asn1Print_EXP_TBSCertList_revokedCertificates_element 
   (const char* name, const ASN1T_EXP_TBSCertList_revokedCertificates_element* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_CertificateSerialNumber ("userCertificate", &pvalue->
      userCertificate);

   asn1Print_EXP_Time ("revocationDate", &pvalue->revocationDate);

   if (pvalue->m.crlEntryExtensionsPresent) {
      asn1Print_EXP_Extensions ("crlEntryExtensions", &pvalue->
         crlEntryExtensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_TBSCertList_revokedCertificates_element::Print (const char* name)
{
   asn1Print_EXP_TBSCertList_revokedCertificates_element (name, &msgData);
}

void asn1Print_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element 
   (const char* name, const ASN1T_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element* pvalue)
{
   ASN1T_EXP_TBSCertList_revokedCertificates_element* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_TBSCertList_revokedCertificates_element*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_TBSCertList_revokedCertificates_element (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element::Print (const char* name)
{
   asn1Print_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (name, &msgData);
}

void asn1Print_EXP_TBSCertList 
   (const char* name, const ASN1T_EXP_TBSCertList* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.versionPresent) {
      asn1Print_EXP_Version ("version", &pvalue->version);
   }

   asn1Print_EXP_AlgorithmIdentifier ("signature_", &pvalue->signature_);

   asn1Print_EXP_Name ("issuer", &pvalue->issuer);

   asn1Print_EXP_Time ("thisUpdate", &pvalue->thisUpdate);

   if (pvalue->m.nextUpdatePresent) {
      asn1Print_EXP_Time ("nextUpdate", &pvalue->nextUpdate);
   }

   if (pvalue->m.revokedCertificatesPresent) {
      asn1Print_EXP__SeqOfEXP_TBSCertList_revokedCertificates_element (
         "revokedCertificates", &pvalue->revokedCertificates);
   }

   if (pvalue->m.crlExtensionsPresent) {
      asn1Print_EXP_Extensions ("crlExtensions", &pvalue->crlExtensions);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_TBSCertList::Print (const char* name)
{
   asn1Print_EXP_TBSCertList (name, &msgData);
}

void asn1Print_EXP_CertificateList 
   (const char* name, const ASN1T_EXP_CertificateList* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_TBSCertList ("tbsCertList", &pvalue->tbsCertList);

   asn1Print_EXP_AlgorithmIdentifier ("signatureAlgorithm", &pvalue->
      signatureAlgorithm);

   rtxPrintIndent ();
   rtPrintBitStrBraceText ("signature_", pvalue->signature_.numbits, pvalue->signature_.data);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_CertificateList::Print (const char* name)
{
   asn1Print_EXP_CertificateList (name, &msgData);
}

void asn1Print_EXP_CountryName 
   (const char* name, const ASN1T_EXP_CountryName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* x121-dcc-code */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("x121-dcc-code", pvalue->u.x121_dcc_code);
         break;
      }
      /* iso-3166-alpha2-code */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("iso-3166-alpha2-code", pvalue->u.iso_3166_alpha2_code);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_CountryName::Print (const char* name)
{
   asn1Print_EXP_CountryName (name, &msgData);
}

void asn1Print_EXP_AdministrationDomainName 
   (const char* name, const ASN1T_EXP_AdministrationDomainName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* numeric */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("numeric", pvalue->u.numeric);
         break;
      }
      /* printable */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printable", pvalue->u.printable);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_AdministrationDomainName::Print (const char* name)
{
   asn1Print_EXP_AdministrationDomainName (name, &msgData);
}

void asn1Print_EXP_PrivateDomainName 
   (const char* name, const ASN1T_EXP_PrivateDomainName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* numeric */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("numeric", pvalue->u.numeric);
         break;
      }
      /* printable */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printable", pvalue->u.printable);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_PrivateDomainName::Print (const char* name)
{
   asn1Print_EXP_PrivateDomainName (name, &msgData);
}

void asn1Print_EXP_PersonalName 
   (const char* name, const ASN1T_EXP_PersonalName* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("surname", pvalue->surname);

   if (pvalue->m.given_namePresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("given_name", pvalue->given_name);
   }

   if (pvalue->m.initialsPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("initials", pvalue->initials);
   }

   if (pvalue->m.generation_qualifierPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("generation_qualifier", pvalue->generation_qualifier);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_PersonalName::Print (const char* name)
{
   asn1Print_EXP_PersonalName (name, &msgData);
}

void asn1Print_EXP_OrganizationalUnitNames 
   (const char* name, const ASN1T_EXP_OrganizationalUnitNames* pvalue)
{
   ASN1T_EXP_OrganizationalUnitName pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_OrganizationalUnitName) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_OrganizationalUnitName (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_OrganizationalUnitNames::Print (const char* name)
{
   asn1Print_EXP_OrganizationalUnitNames (name, &msgData);
}

void asn1Print_EXP_BuiltInStandardAttributes 
   (const char* name, const ASN1T_EXP_BuiltInStandardAttributes* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.country_namePresent) {
      asn1Print_EXP_CountryName ("country_name", &pvalue->country_name);
   }

   if (pvalue->m.administration_domain_namePresent) {
      asn1Print_EXP_AdministrationDomainName ("administration_domain_name", &
         pvalue->administration_domain_name);
   }

   if (pvalue->m.network_addressPresent) {
      asn1Print_EXP_NetworkAddress ("network_address", pvalue->network_address
         );
   }

   if (pvalue->m.terminal_identifierPresent) {
      asn1Print_EXP_TerminalIdentifier ("terminal_identifier", pvalue->
         terminal_identifier);
   }

   if (pvalue->m.private_domain_namePresent) {
      asn1Print_EXP_PrivateDomainName ("private_domain_name", &pvalue->
         private_domain_name);
   }

   if (pvalue->m.organization_namePresent) {
      asn1Print_EXP_OrganizationName ("organization_name", pvalue->
         organization_name);
   }

   if (pvalue->m.numeric_user_identifierPresent) {
      asn1Print_EXP_NumericUserIdentifier ("numeric_user_identifier", pvalue->
         numeric_user_identifier);
   }

   if (pvalue->m.personal_namePresent) {
      asn1Print_EXP_PersonalName ("personal_name", &pvalue->personal_name);
   }

   if (pvalue->m.organizational_unit_namesPresent) {
      asn1Print_EXP_OrganizationalUnitNames ("organizational_unit_names", &
         pvalue->organizational_unit_names);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_BuiltInStandardAttributes::Print (const char* name)
{
   asn1Print_EXP_BuiltInStandardAttributes (name, &msgData);
}

void asn1Print_EXP_BuiltInDomainDefinedAttribute 
   (const char* name, const ASN1T_EXP_BuiltInDomainDefinedAttribute* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("type", pvalue->type);

   rtxPrintIndent ();
   rtxPrintCharStr ("value", pvalue->value);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_BuiltInDomainDefinedAttribute::Print (const char* name)
{
   asn1Print_EXP_BuiltInDomainDefinedAttribute (name, &msgData);
}

void asn1Print_EXP_BuiltInDomainDefinedAttributes 
   (const char* name, const ASN1T_EXP_BuiltInDomainDefinedAttributes* pvalue)
{
   ASN1T_EXP_BuiltInDomainDefinedAttribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_BuiltInDomainDefinedAttribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_BuiltInDomainDefinedAttribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_BuiltInDomainDefinedAttributes::Print (const char* name)
{
   asn1Print_EXP_BuiltInDomainDefinedAttributes (name, &msgData);
}

void asn1Print_EXP_ExtensionAttribute 
   (const char* name, const ASN1T_EXP_ExtensionAttribute* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintUnsigned ("extension_attribute_type", pvalue->extension_attribute_type);

   rtxPrintIndent ();
   rtxPrintHexStr ("extension_attribute_value", pvalue->extension_attribute_value.numocts,
   pvalue->extension_attribute_value.data);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_ExtensionAttribute::Print (const char* name)
{
   asn1Print_EXP_ExtensionAttribute (name, &msgData);
}

void asn1Print_EXP_ExtensionAttributes 
   (const char* name, const ASN1T_EXP_ExtensionAttributes* pvalue)
{
   ASN1T_EXP_ExtensionAttribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_ExtensionAttribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_ExtensionAttribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_ExtensionAttributes::Print (const char* name)
{
   asn1Print_EXP_ExtensionAttributes (name, &msgData);
}

void asn1Print_EXP_ORAddress 
   (const char* name, const ASN1T_EXP_ORAddress* pvalue)
{
   rtxPrintOpenBrace (name);

   asn1Print_EXP_BuiltInStandardAttributes ("built_in_standard_attributes", &
      pvalue->built_in_standard_attributes);

   if (pvalue->m.built_in_domain_defined_attributesPresent) {
      asn1Print_EXP_BuiltInDomainDefinedAttributes (
         "built_in_domain_defined_attributes", &pvalue->
         built_in_domain_defined_attributes);
   }

   if (pvalue->m.extension_attributesPresent) {
      asn1Print_EXP_ExtensionAttributes ("extension_attributes", &pvalue->
         extension_attributes);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_ORAddress::Print (const char* name)
{
   asn1Print_EXP_ORAddress (name, &msgData);
}

void asn1Print_EXP_TeletexPersonalName 
   (const char* name, const ASN1T_EXP_TeletexPersonalName* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("surname", pvalue->surname);

   if (pvalue->m.given_namePresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("given_name", pvalue->given_name);
   }

   if (pvalue->m.initialsPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("initials", pvalue->initials);
   }

   if (pvalue->m.generation_qualifierPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("generation_qualifier", pvalue->generation_qualifier);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_TeletexPersonalName::Print (const char* name)
{
   asn1Print_EXP_TeletexPersonalName (name, &msgData);
}

void asn1Print_EXP_TeletexOrganizationalUnitNames 
   (const char* name, const ASN1T_EXP_TeletexOrganizationalUnitNames* pvalue)
{
   ASN1T_EXP_TeletexOrganizationalUnitName pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_TeletexOrganizationalUnitName) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_TeletexOrganizationalUnitName (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_TeletexOrganizationalUnitNames::Print (const char* name)
{
   asn1Print_EXP_TeletexOrganizationalUnitNames (name, &msgData);
}

void asn1Print_EXP_PhysicalDeliveryCountryName 
   (const char* name, const ASN1T_EXP_PhysicalDeliveryCountryName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* x121-dcc-code */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("x121-dcc-code", pvalue->u.x121_dcc_code);
         break;
      }
      /* iso-3166-alpha2-code */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("iso-3166-alpha2-code", pvalue->u.iso_3166_alpha2_code);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_PhysicalDeliveryCountryName::Print (const char* name)
{
   asn1Print_EXP_PhysicalDeliveryCountryName (name, &msgData);
}

void asn1Print_EXP_PostalCode 
   (const char* name, const ASN1T_EXP_PostalCode* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* numeric-code */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("numeric-code", pvalue->u.numeric_code);
         break;
      }
      /* printable-code */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printable-code", pvalue->u.printable_code);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_PostalCode::Print (const char* name)
{
   asn1Print_EXP_PostalCode (name, &msgData);
}

void asn1Print_EXP_UnformattedPostalAddress_printable_address 
   (const char* name, const ASN1T_EXP_UnformattedPostalAddress_printable_address* pvalue)
{
   const char* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (const char*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintCharStr (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_UnformattedPostalAddress_printable_address::Print (const char* name)
{
   asn1Print_EXP_UnformattedPostalAddress_printable_address (name, &msgData);
}

void asn1Print_EXP_UnformattedPostalAddress 
   (const char* name, const ASN1T_EXP_UnformattedPostalAddress* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.printable_addressPresent) {
      asn1Print_EXP_UnformattedPostalAddress_printable_address (
         "printable_address", &pvalue->printable_address);
   }

   if (pvalue->m.teletex_stringPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("teletex_string", pvalue->teletex_string);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_UnformattedPostalAddress::Print (const char* name)
{
   asn1Print_EXP_UnformattedPostalAddress (name, &msgData);
}

void asn1Print_EXP_ExtendedNetworkAddress_e163_4_address 
   (const char* name, const ASN1T_EXP_ExtendedNetworkAddress_e163_4_address* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("number", pvalue->number);

   if (pvalue->m.sub_addressPresent) {
      rtxPrintIndent ();
      rtxPrintCharStr ("sub_address", pvalue->sub_address);
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_ExtendedNetworkAddress_e163_4_address::Print (const char* name)
{
   asn1Print_EXP_ExtendedNetworkAddress_e163_4_address (name, &msgData);
}

void asn1Print_EXP_PresentationAddress_nAddresses 
   (const char* name, const ASN1T_EXP_PresentationAddress_nAddresses* pvalue)
{
   ASN1TDynOctStr* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1TDynOctStr*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      rtxPrintIndent ();
      rtxPrintHexStr (namebuf, pdata0->numocts, pdata0->data);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_PresentationAddress_nAddresses::Print (const char* name)
{
   asn1Print_EXP_PresentationAddress_nAddresses (name, &msgData);
}

void asn1Print_EXP_PresentationAddress 
   (const char* name, const ASN1T_EXP_PresentationAddress* pvalue)
{
   rtxPrintOpenBrace (name);

   if (pvalue->m.pSelectorPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("pSelector", pvalue->pSelector.numocts, pvalue->pSelector.data);
   }

   if (pvalue->m.sSelectorPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("sSelector", pvalue->sSelector.numocts, pvalue->sSelector.data);
   }

   if (pvalue->m.tSelectorPresent) {
      rtxPrintIndent ();
      rtxPrintHexStr ("tSelector", pvalue->tSelector.numocts, pvalue->tSelector.data);
   }

   asn1Print_EXP_PresentationAddress_nAddresses ("nAddresses", &pvalue->
      nAddresses);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_PresentationAddress::Print (const char* name)
{
   asn1Print_EXP_PresentationAddress (name, &msgData);
}

void asn1Print_EXP_ExtendedNetworkAddress 
   (const char* name, const ASN1T_EXP_ExtendedNetworkAddress* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* e163-4-address */
      case 1:
      {
         asn1Print_EXP_ExtendedNetworkAddress_e163_4_address (
            "e163-4-address", pvalue->u.e163_4_address);
         break;
      }
      /* psap-address */
      case 2:
      {
         asn1Print_EXP_PresentationAddress ("psap-address", pvalue->
            u.psap_address);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_ExtendedNetworkAddress::Print (const char* name)
{
   asn1Print_EXP_ExtendedNetworkAddress (name, &msgData);
}

void asn1Print_EXP_TeletexDomainDefinedAttribute 
   (const char* name, const ASN1T_EXP_TeletexDomainDefinedAttribute* pvalue)
{
   rtxPrintOpenBrace (name);

   rtxPrintIndent ();
   rtxPrintCharStr ("type", pvalue->type);

   rtxPrintIndent ();
   rtxPrintCharStr ("value", pvalue->value);

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_TeletexDomainDefinedAttribute::Print (const char* name)
{
   asn1Print_EXP_TeletexDomainDefinedAttribute (name, &msgData);
}

void asn1Print_EXP_TeletexDomainDefinedAttributes 
   (const char* name, const ASN1T_EXP_TeletexDomainDefinedAttributes* pvalue)
{
   ASN1T_EXP_TeletexDomainDefinedAttribute* pdata0;
   OSRTDListNode* pnode;
   char namebuf[512];
   OSUINT32 xx1;

   pnode = pvalue->head;
   for (xx1 = 0; xx1 < pvalue->count; xx1++) {
      char numbuf[32];
      pdata0 = (ASN1T_EXP_TeletexDomainDefinedAttribute*) pnode->data;
      rtxUIntToCharStr (xx1, numbuf, sizeof(numbuf), 0);
      rtxStrJoin (namebuf, sizeof(namebuf), name, "[", numbuf, "]", 0);
      asn1Print_EXP_TeletexDomainDefinedAttribute (namebuf, pdata0);
      pnode = pnode->next;
   }
}

void ASN1C_EXP_TeletexDomainDefinedAttributes::Print (const char* name)
{
   asn1Print_EXP_TeletexDomainDefinedAttributes (name, &msgData);
}

void asn1Print_EXP_DirectoryString 
   (const char* name, const ASN1T_EXP_DirectoryString* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_DirectoryString::Print (const char* name)
{
   asn1Print_EXP_DirectoryString (name, &msgData);
}

void asn1Print_EXP_X520name 
   (const char* name, const ASN1T_EXP_X520name* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520name::Print (const char* name)
{
   asn1Print_EXP_X520name (name, &msgData);
}

void asn1Print_EXP_X520CommonName 
   (const char* name, const ASN1T_EXP_X520CommonName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520CommonName::Print (const char* name)
{
   asn1Print_EXP_X520CommonName (name, &msgData);
}

void asn1Print_EXP_X520LocalityName 
   (const char* name, const ASN1T_EXP_X520LocalityName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520LocalityName::Print (const char* name)
{
   asn1Print_EXP_X520LocalityName (name, &msgData);
}

void asn1Print_EXP_X520StateOrProvinceName 
   (const char* name, const ASN1T_EXP_X520StateOrProvinceName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520StateOrProvinceName::Print (const char* name)
{
   asn1Print_EXP_X520StateOrProvinceName (name, &msgData);
}

void asn1Print_EXP_X520OrganizationName 
   (const char* name, const ASN1T_EXP_X520OrganizationName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520OrganizationName::Print (const char* name)
{
   asn1Print_EXP_X520OrganizationName (name, &msgData);
}

void asn1Print_EXP_X520OrganizationalUnitName 
   (const char* name, const ASN1T_EXP_X520OrganizationalUnitName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520OrganizationalUnitName::Print (const char* name)
{
   asn1Print_EXP_X520OrganizationalUnitName (name, &msgData);
}

void asn1Print_EXP_X520Title 
   (const char* name, const ASN1T_EXP_X520Title* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520Title::Print (const char* name)
{
   asn1Print_EXP_X520Title (name, &msgData);
}

void asn1Print_EXP_X520CountrySerialUTF8liUcubeName 
   (const char* name, const ASN1T_EXP_X520CountrySerialUTF8liUcubeName* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520CountrySerialUTF8liUcubeName::Print (const char* name)
{
   asn1Print_EXP_X520CountrySerialUTF8liUcubeName (name, &msgData);
}

void asn1Print_EXP_X520Pseudonym 
   (const char* name, const ASN1T_EXP_X520Pseudonym* pvalue)
{
   rtxPrintOpenBrace (name);

   switch (pvalue->t)
   {
      /* utf8String */
      case 1:
      {
         rtxPrintIndent ();
         rtxPrintUTF8CharStr ("utf8String", pvalue->u.utf8String);
         break;
      }
      /* printableString */
      case 2:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("printableString", pvalue->u.printableString);
         break;
      }
      /* teletexString */
      case 3:
      {
         rtxPrintIndent ();
         rtxPrintCharStr ("teletexString", pvalue->u.teletexString);
         break;
      }
      /* universalString */
      case 4:
      {
         rtxPrintIndent ();
         rtPrintUnivCharStr ("universalString", pvalue->u.universalString);
         break;
      }
      /* bmpString */
      case 5:
      {
         rtxPrintIndent ();
         rtxPrintUnicodeCharStr ("bmpString", pvalue->u.bmpString->data, (int)pvalue->u.bmpString->nchars);
         break;
      }
      default:;
   }

   rtxPrintCloseBrace ();
}

void ASN1C_EXP_X520Pseudonym::Print (const char* name)
{
   asn1Print_EXP_X520Pseudonym (name, &msgData);
}

