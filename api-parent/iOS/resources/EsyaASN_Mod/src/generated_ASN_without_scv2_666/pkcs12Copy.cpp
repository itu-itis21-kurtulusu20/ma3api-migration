/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.6, Date: 20-Feb-2014.
 */
#include <new>
#include "pkcs12.h"
#include "rtsrc/rtCopy.h"
#include "rtxsrc/rtxCommon.h"

void asn1Copy_PKCS12_KeyBag (OSCTXT* pctxt, ASN1T_PKCS12_KeyBag* pSrcValue, 
   ASN1T_PKCS12_KeyBag* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_PKCS18_PrivateKeyInfo (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS12_KeyBag::ASN1C_PKCS12_KeyBag (ASN1C_PKCS12_KeyBag& original) :
   ASN1C_PKCS18_PrivateKeyInfo (original)
{
}

ASN1T_PKCS12_KeyBag& ASN1C_PKCS12_KeyBag::getCopy (ASN1T_PKCS12_KeyBag* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_KeyBag);
      new (pDstData) ASN1T_PKCS12_KeyBag;
   }

   asn1Copy_PKCS12_KeyBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_KeyBag* ASN1C_PKCS12_KeyBag::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_KeyBag* pDstData = new ASN1T_PKCS12_KeyBag;

   asn1Copy_PKCS12_KeyBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_PKCS8ShroudedKeyBag (OSCTXT* pctxt, 
   ASN1T_PKCS12_PKCS8ShroudedKeyBag* pSrcValue, 
   ASN1T_PKCS12_PKCS8ShroudedKeyBag* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_PKCS18_EncryptedPrivateKeyInfo (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS12_PKCS8ShroudedKeyBag::ASN1C_PKCS12_PKCS8ShroudedKeyBag (ASN1C_PKCS12_PKCS8ShroudedKeyBag& original) :
   ASN1C_PKCS18_EncryptedPrivateKeyInfo (original)
{
}

ASN1T_PKCS12_PKCS8ShroudedKeyBag& ASN1C_PKCS12_PKCS8ShroudedKeyBag::getCopy (ASN1T_PKCS12_PKCS8ShroudedKeyBag* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_PKCS8ShroudedKeyBag);
      new (pDstData) ASN1T_PKCS12_PKCS8ShroudedKeyBag;
   }

   asn1Copy_PKCS12_PKCS8ShroudedKeyBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_PKCS8ShroudedKeyBag* ASN1C_PKCS12_PKCS8ShroudedKeyBag::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_PKCS8ShroudedKeyBag* pDstData = new ASN1T_PKCS12_PKCS8ShroudedKeyBag;

   asn1Copy_PKCS12_PKCS8ShroudedKeyBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12__x509Certificate_Type (OSCTXT* pctxt, 
   ASN1T_PKCS12__x509Certificate_Type* pSrcValue, 
   ASN1T_PKCS12__x509Certificate_Type* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS12__x509Certificate_Type::ASN1C_PKCS12__x509Certificate_Type (ASN1C_PKCS12__x509Certificate_Type& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12__x509Certificate_Type& ASN1C_PKCS12__x509Certificate_Type::getCopy (ASN1T_PKCS12__x509Certificate_Type* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12__x509Certificate_Type);
      new (pDstData) ASN1T_PKCS12__x509Certificate_Type;
   }

   asn1Copy_PKCS12__x509Certificate_Type (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS12__x509Certificate_Type* ASN1C_PKCS12__x509Certificate_Type::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12__x509Certificate_Type* pDstData = new ASN1T_PKCS12__x509Certificate_Type;

   asn1Copy_PKCS12__x509Certificate_Type (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS12__x509CRL_Type (OSCTXT* pctxt, 
   ASN1T_PKCS12__x509CRL_Type* pSrcValue, ASN1T_PKCS12__x509CRL_Type*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, pSrcValue, pDstValue);
}

ASN1C_PKCS12__x509CRL_Type::ASN1C_PKCS12__x509CRL_Type (ASN1C_PKCS12__x509CRL_Type& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12__x509CRL_Type& ASN1C_PKCS12__x509CRL_Type::getCopy (ASN1T_PKCS12__x509CRL_Type* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12__x509CRL_Type);
      new (pDstData) ASN1T_PKCS12__x509CRL_Type;
   }

   asn1Copy_PKCS12__x509CRL_Type (pctxt, &msgData, pDstData);

   return *pDstData;
}

ASN1T_PKCS12__x509CRL_Type* ASN1C_PKCS12__x509CRL_Type::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12__x509CRL_Type* pDstData = new ASN1T_PKCS12__x509CRL_Type;

   asn1Copy_PKCS12__x509CRL_Type (pctxt, &msgData, pDstData);

   return pDstData;
}

void asn1Copy_PKCS12_MacData (OSCTXT* pctxt, ASN1T_PKCS12_MacData* pSrcValue, 
   ASN1T_PKCS12_MacData* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   asn1Copy_PKCS7_DigestInfo (pctxt, &pSrcValue->mac, &pDstValue->mac);

   rtCopyDynOctStr (pctxt, &pSrcValue->macSalt, &pDstValue->macSalt);

   pDstValue->iterations = pSrcValue->iterations;

}

ASN1C_PKCS12_MacData::ASN1C_PKCS12_MacData (ASN1C_PKCS12_MacData& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12_MacData::ASN1T_PKCS12_MacData (ASN1C_PKCS12_MacData& original)
{
   original.getCopy (this);
}

ASN1T_PKCS12_MacData& ASN1C_PKCS12_MacData::getCopy (ASN1T_PKCS12_MacData* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_MacData);
      new (pDstData) ASN1T_PKCS12_MacData;
   }

   asn1Copy_PKCS12_MacData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_MacData* ASN1C_PKCS12_MacData::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_MacData* pDstData = new ASN1T_PKCS12_MacData;

   asn1Copy_PKCS12_MacData (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_PFX (OSCTXT* pctxt, ASN1T_PKCS12_PFX* pSrcValue, 
   ASN1T_PKCS12_PFX* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   pDstValue->version = pSrcValue->version;

   asn1Copy_PKCS7_ContentInfo (pctxt, &pSrcValue->authSafe, &pDstValue->authSafe);

   if (pSrcValue->m.macDataPresent) {
      asn1Copy_PKCS12_MacData (pctxt, &pSrcValue->macData, &pDstValue->macData);
   }

}

ASN1C_PKCS12_PFX::ASN1C_PKCS12_PFX (ASN1C_PKCS12_PFX& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12_PFX::ASN1T_PKCS12_PFX (ASN1C_PKCS12_PFX& original)
{
   original.getCopy (this);
}

ASN1T_PKCS12_PFX& ASN1C_PKCS12_PFX::getCopy (ASN1T_PKCS12_PFX* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_PFX);
      new (pDstData) ASN1T_PKCS12_PFX;
   }

   asn1Copy_PKCS12_PFX (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_PFX* ASN1C_PKCS12_PFX::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_PFX* pDstData = new ASN1T_PKCS12_PFX;

   asn1Copy_PKCS12_PFX (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_AuthenticatedSafe (OSCTXT* pctxt, 
   ASN1T_PKCS12_AuthenticatedSafe* pSrcValue, ASN1T_PKCS12_AuthenticatedSafe*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKCS7_ContentInfo* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKCS7_ContentInfo* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKCS7_ContentInfo);
         pSrcData = (ASN1T_PKCS7_ContentInfo*) pnode->data;

         asn1Copy_PKCS7_ContentInfo (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS12_AuthenticatedSafe::ASN1C_PKCS12_AuthenticatedSafe (ASN1C_PKCS12_AuthenticatedSafe& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS12_AuthenticatedSafe*)pList)
{
}

ASN1C_PKCS12_AuthenticatedSafe& ASN1C_PKCS12_AuthenticatedSafe::operator= (ASN1C_PKCS12_AuthenticatedSafe& srcData)
{
   clear ();
   asn1Copy_PKCS12_AuthenticatedSafe (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS12_AuthenticatedSafe& ASN1C_PKCS12_AuthenticatedSafe::getCopy (ASN1T_PKCS12_AuthenticatedSafe* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_AuthenticatedSafe);
      new (pDstData) ASN1T_PKCS12_AuthenticatedSafe;
   }

   asn1Copy_PKCS12_AuthenticatedSafe (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_AuthenticatedSafe* ASN1C_PKCS12_AuthenticatedSafe::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_AuthenticatedSafe* pDstData = new ASN1T_PKCS12_AuthenticatedSafe;

   asn1Copy_PKCS12_AuthenticatedSafe (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_PKCS12Attribute_attrValues (OSCTXT* pctxt, 
   ASN1T_PKCS12_PKCS12Attribute_attrValues* pSrcValue, 
   ASN1T_PKCS12_PKCS12Attribute_attrValues* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1TOpenType* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1TOpenType* pDstData = rtxMemAllocTypeZ (pctxt, ASN1TOpenType);
         pSrcData = (ASN1TOpenType*) pnode->data;

         rtCopyOpenType (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS12_PKCS12Attribute_attrValues::ASN1C_PKCS12_PKCS12Attribute_attrValues (ASN1C_PKCS12_PKCS12Attribute_attrValues& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS12_PKCS12Attribute_attrValues*)pList)
{
}

ASN1C_PKCS12_PKCS12Attribute_attrValues& ASN1C_PKCS12_PKCS12Attribute_attrValues::operator= (ASN1C_PKCS12_PKCS12Attribute_attrValues& srcData)
{
   clear ();
   asn1Copy_PKCS12_PKCS12Attribute_attrValues (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS12_PKCS12Attribute_attrValues& ASN1C_PKCS12_PKCS12Attribute_attrValues::getCopy (ASN1T_PKCS12_PKCS12Attribute_attrValues* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_PKCS12Attribute_attrValues);
      new (pDstData) ASN1T_PKCS12_PKCS12Attribute_attrValues;
   }

   asn1Copy_PKCS12_PKCS12Attribute_attrValues (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_PKCS12Attribute_attrValues* ASN1C_PKCS12_PKCS12Attribute_attrValues::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_PKCS12Attribute_attrValues* pDstData = new ASN1T_PKCS12_PKCS12Attribute_attrValues;

   asn1Copy_PKCS12_PKCS12Attribute_attrValues (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_PKCS12Attribute (OSCTXT* pctxt, 
   ASN1T_PKCS12_PKCS12Attribute* pSrcValue, ASN1T_PKCS12_PKCS12Attribute*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->attrId, (ASN1OBJID*)&pDstValue->attrId);

   asn1Copy_PKCS12_PKCS12Attribute_attrValues (pctxt, &pSrcValue->attrValues, &pDstValue->attrValues);

}

ASN1C_PKCS12_PKCS12Attribute::ASN1C_PKCS12_PKCS12Attribute (ASN1C_PKCS12_PKCS12Attribute& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12_PKCS12Attribute::ASN1T_PKCS12_PKCS12Attribute (ASN1C_PKCS12_PKCS12Attribute& original)
{
   original.getCopy (this);
}

ASN1T_PKCS12_PKCS12Attribute& ASN1C_PKCS12_PKCS12Attribute::getCopy (ASN1T_PKCS12_PKCS12Attribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_PKCS12Attribute);
      new (pDstData) ASN1T_PKCS12_PKCS12Attribute;
   }

   asn1Copy_PKCS12_PKCS12Attribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_PKCS12Attribute* ASN1C_PKCS12_PKCS12Attribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_PKCS12Attribute* pDstData = new ASN1T_PKCS12_PKCS12Attribute;

   asn1Copy_PKCS12_PKCS12Attribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12__SetOfPKCS12_PKCS12Attribute (OSCTXT* pctxt, 
   ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pSrcValue, 
   ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKCS12_PKCS12Attribute* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKCS12_PKCS12Attribute* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKCS12_PKCS12Attribute);
         pSrcData = (ASN1T_PKCS12_PKCS12Attribute*) pnode->data;

         asn1Copy_PKCS12_PKCS12Attribute (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute::ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute (ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute*)pList)
{
}

ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute& ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute::operator= (ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute& srcData)
{
   clear ();
   asn1Copy_PKCS12__SetOfPKCS12_PKCS12Attribute (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute& ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute::getCopy (ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute);
      new (pDstData) ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute;
   }

   asn1Copy_PKCS12__SetOfPKCS12_PKCS12Attribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* ASN1C_PKCS12__SetOfPKCS12_PKCS12Attribute::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute* pDstData = new ASN1T_PKCS12__SetOfPKCS12_PKCS12Attribute;

   asn1Copy_PKCS12__SetOfPKCS12_PKCS12Attribute (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_SafeBag (OSCTXT* pctxt, ASN1T_PKCS12_SafeBag* pSrcValue, 
   ASN1T_PKCS12_SafeBag* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   OSCRTLMEMCPY (&pDstValue->m, &pSrcValue->m, sizeof (pDstValue->m));
   rtCopyOID ((ASN1OBJID*)&pSrcValue->bagId, (ASN1OBJID*)&pDstValue->bagId);

   rtCopyOpenType (pctxt, &pSrcValue->bagValue, &pDstValue->bagValue);

   if (pSrcValue->m.bagAttributesPresent) {
      asn1Copy_PKCS12__SetOfPKCS12_PKCS12Attribute (pctxt, &pSrcValue->bagAttributes, &pDstValue->bagAttributes);
   }

}

ASN1C_PKCS12_SafeBag::ASN1C_PKCS12_SafeBag (ASN1C_PKCS12_SafeBag& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12_SafeBag::ASN1T_PKCS12_SafeBag (ASN1C_PKCS12_SafeBag& original)
{
   original.getCopy (this);
}

ASN1T_PKCS12_SafeBag& ASN1C_PKCS12_SafeBag::getCopy (ASN1T_PKCS12_SafeBag* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_SafeBag);
      new (pDstData) ASN1T_PKCS12_SafeBag;
   }

   asn1Copy_PKCS12_SafeBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_SafeBag* ASN1C_PKCS12_SafeBag::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_SafeBag* pDstData = new ASN1T_PKCS12_SafeBag;

   asn1Copy_PKCS12_SafeBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_SafeContents (OSCTXT* pctxt, 
   ASN1T_PKCS12_SafeContents* pSrcValue, ASN1T_PKCS12_SafeContents* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   {
      OSUINT32 xx1;
      ASN1T_PKCS12_SafeBag* pSrcData;
      OSRTDListNode* pnode;

      rtxDListInit (pDstValue);
      pnode = pSrcValue->head;
      for (xx1 = 0; xx1 < pSrcValue->count; xx1++) {
         ASN1T_PKCS12_SafeBag* pDstData = rtxMemAllocTypeZ (pctxt, ASN1T_PKCS12_SafeBag);
         pSrcData = (ASN1T_PKCS12_SafeBag*) pnode->data;

         asn1Copy_PKCS12_SafeBag (pctxt, pSrcData, pDstData);

         rtxDListAppend (pctxt, pDstValue, (void*)pDstData);
         pnode = pnode->next;
      }
   }
}

ASN1C_PKCS12_SafeContents::ASN1C_PKCS12_SafeContents (ASN1C_PKCS12_SafeContents& original) :
   ASN1CSeqOfList(*original.mpContext, original.getCopy()), msgData (*(ASN1T_PKCS12_SafeContents*)pList)
{
}

ASN1C_PKCS12_SafeContents& ASN1C_PKCS12_SafeContents::operator= (ASN1C_PKCS12_SafeContents& srcData)
{
   clear ();
   asn1Copy_PKCS12_SafeContents (getCtxtPtr(), &srcData.msgData, &msgData);
   return *this;
}

ASN1T_PKCS12_SafeContents& ASN1C_PKCS12_SafeContents::getCopy (ASN1T_PKCS12_SafeContents* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_SafeContents);
      new (pDstData) ASN1T_PKCS12_SafeContents;
   }

   asn1Copy_PKCS12_SafeContents (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_SafeContents* ASN1C_PKCS12_SafeContents::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_SafeContents* pDstData = new ASN1T_PKCS12_SafeContents;

   asn1Copy_PKCS12_SafeContents (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_CertBag (OSCTXT* pctxt, ASN1T_PKCS12_CertBag* pSrcValue, 
   ASN1T_PKCS12_CertBag* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->certId, (ASN1OBJID*)&pDstValue->certId);

   rtCopyOpenType (pctxt, &pSrcValue->certValue, &pDstValue->certValue);

}

ASN1C_PKCS12_CertBag::ASN1C_PKCS12_CertBag (ASN1C_PKCS12_CertBag& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12_CertBag::ASN1T_PKCS12_CertBag (ASN1C_PKCS12_CertBag& original)
{
   original.getCopy (this);
}

ASN1T_PKCS12_CertBag& ASN1C_PKCS12_CertBag::getCopy (ASN1T_PKCS12_CertBag* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_CertBag);
      new (pDstData) ASN1T_PKCS12_CertBag;
   }

   asn1Copy_PKCS12_CertBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_CertBag* ASN1C_PKCS12_CertBag::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_CertBag* pDstData = new ASN1T_PKCS12_CertBag;

   asn1Copy_PKCS12_CertBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_CRLBag (OSCTXT* pctxt, ASN1T_PKCS12_CRLBag* pSrcValue, 
   ASN1T_PKCS12_CRLBag* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->crlId, (ASN1OBJID*)&pDstValue->crlId);

   rtCopyOpenType (pctxt, &pSrcValue->crltValue, &pDstValue->crltValue);

}

ASN1C_PKCS12_CRLBag::ASN1C_PKCS12_CRLBag (ASN1C_PKCS12_CRLBag& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12_CRLBag::ASN1T_PKCS12_CRLBag (ASN1C_PKCS12_CRLBag& original)
{
   original.getCopy (this);
}

ASN1T_PKCS12_CRLBag& ASN1C_PKCS12_CRLBag::getCopy (ASN1T_PKCS12_CRLBag* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_CRLBag);
      new (pDstData) ASN1T_PKCS12_CRLBag;
   }

   asn1Copy_PKCS12_CRLBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_CRLBag* ASN1C_PKCS12_CRLBag::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_CRLBag* pDstData = new ASN1T_PKCS12_CRLBag;

   asn1Copy_PKCS12_CRLBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_SecretBag (OSCTXT* pctxt, 
   ASN1T_PKCS12_SecretBag* pSrcValue, ASN1T_PKCS12_SecretBag* pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyOID ((ASN1OBJID*)&pSrcValue->secretTypeId, (ASN1OBJID*)&pDstValue->secretTypeId);

   rtCopyOpenType (pctxt, &pSrcValue->secretValue, &pDstValue->secretValue);

}

ASN1C_PKCS12_SecretBag::ASN1C_PKCS12_SecretBag (ASN1C_PKCS12_SecretBag& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12_SecretBag::ASN1T_PKCS12_SecretBag (ASN1C_PKCS12_SecretBag& original)
{
   original.getCopy (this);
}

ASN1T_PKCS12_SecretBag& ASN1C_PKCS12_SecretBag::getCopy (ASN1T_PKCS12_SecretBag* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_SecretBag);
      new (pDstData) ASN1T_PKCS12_SecretBag;
   }

   asn1Copy_PKCS12_SecretBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_SecretBag* ASN1C_PKCS12_SecretBag::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_SecretBag* pDstData = new ASN1T_PKCS12_SecretBag;

   asn1Copy_PKCS12_SecretBag (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

void asn1Copy_PKCS12_PKCS12PbeParams (OSCTXT* pctxt, 
   ASN1T_PKCS12_PKCS12PbeParams* pSrcValue, ASN1T_PKCS12_PKCS12PbeParams*
    pDstValue)
{
   if (pSrcValue == pDstValue) return;

   rtCopyDynOctStr (pctxt, &pSrcValue->salt, &pDstValue->salt);

   pDstValue->iterations = pSrcValue->iterations;

}

ASN1C_PKCS12_PKCS12PbeParams::ASN1C_PKCS12_PKCS12PbeParams (ASN1C_PKCS12_PKCS12PbeParams& original) :
   ASN1CType(original), msgData(original.getCopy())
{
}

ASN1T_PKCS12_PKCS12PbeParams::ASN1T_PKCS12_PKCS12PbeParams (ASN1C_PKCS12_PKCS12PbeParams& original)
{
   original.getCopy (this);
}

ASN1T_PKCS12_PKCS12PbeParams& ASN1C_PKCS12_PKCS12PbeParams::getCopy (ASN1T_PKCS12_PKCS12PbeParams* pDstData)
{
   if (&msgData == pDstData) return *pDstData;

   OSCTXT* pctxt = getCtxtPtr();

   if (pDstData == 0) {
      pDstData = rtxMemAllocType (pctxt, ASN1T_PKCS12_PKCS12PbeParams);
      new (pDstData) ASN1T_PKCS12_PKCS12PbeParams;
   }

   asn1Copy_PKCS12_PKCS12PbeParams (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return *pDstData;
}

ASN1T_PKCS12_PKCS12PbeParams* ASN1C_PKCS12_PKCS12PbeParams::newCopy ()
{
   OSCTXT* pctxt = getCtxtPtr();
   ASN1T_PKCS12_PKCS12PbeParams* pDstData = new ASN1T_PKCS12_PKCS12PbeParams;

   asn1Copy_PKCS12_PKCS12PbeParams (pctxt, &msgData, pDstData);

   pDstData->setContext (mpContext);

   return pDstData;
}

