package dev.esya.api.smartcard.dirak.elgamal;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import sun.security.pkcs11.wrapper.CK_ATTRIBUTE;
import sun.security.pkcs11.wrapper.CK_MECHANISM;
import sun.security.pkcs11.wrapper.PKCS11Constants;
import sun.security.pkcs11.wrapper.PKCS11Exception;
import tr.gov.tubitak.uekae.esya.api.common.ESYAException;
import tr.gov.tubitak.uekae.esya.api.common.util.StringUtil;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.CardType;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.SmartCard;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.card.template.DirakHSMTemplate;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.elgamal.ElGamalEncryptedData;
import tr.gov.tubitak.uekae.esya.api.smartcard.pkcs11.elgamal.ElGamalPlainData;

import java.io.IOException;
import java.math.BigInteger;
import java.security.spec.ECPoint;

public class ElGamalEncryptionDecryptionTest {

    static final String[] publicKeys = {
        "0441049FF7D6465666F15EA54E4E4161F4668F17CF1E54397F19606084411ED1326356CFF055562BAF9DF9079882ABB001470DBB28C6F64ABFCFEE6411C584710B3AF3", // A
        "044104A6C1FF98A2CAEE447F4DDC33F9D96D08DCE91486BB14C23CD92A3EBCA0C73560F572122CBCB680D76DE0F19830DAC72D99F8EA6F4BCC1C822269D8F7128DA16B", // B
        "044104FB99ED53566508A97B8BF018011DD466C975996107D1D01E4E1D052E243FC7BEF5ABF89C238C99A3B57115D083123C54325FF6E7EB70EF9A41DB89683C3E98EB", // C
        "044104FB99ED53566508A97B8BF018011DD466C975996107D1D01E4E1D052E243FC7BEF5ABF89C238C99A3B57115D083123C54325FF6E7EB70EF9A41DB89683C3E98EB", // C
        "044104FB99ED53566508A97B8BF018011DD466C975996107D1D01E4E1D052E243FC7BEF5ABF89C238C99A3B57115D083123C54325FF6E7EB70EF9A41DB89683C3E98EB", // C
        "0441049FF7D6465666F15EA54E4E4161F4668F17CF1E54397F19606084411ED1326356CFF055562BAF9DF9079882ABB001470DBB28C6F64ABFCFEE6411C584710B3AF3", // A
        "044104A6C1FF98A2CAEE447F4DDC33F9D96D08DCE91486BB14C23CD92A3EBCA0C73560F572122CBCB680D76DE0F19830DAC72D99F8EA6F4BCC1C822269D8F7128DA16B", // B
        "044104A6C1FF98A2CAEE447F4DDC33F9D96D08DCE91486BB14C23CD92A3EBCA0C73560F572122CBCB680D76DE0F19830DAC72D99F8EA6F4BCC1C822269D8F7128DA16B", // B
        "0441049FF7D6465666F15EA54E4E4161F4668F17CF1E54397F19606084411ED1326356CFF055562BAF9DF9079882ABB001470DBB28C6F64ABFCFEE6411C584710B3AF3"  // A
    };

    static final String[] privateKeys = {
        "DD5BD367E0B00E274F1733BB2273DD4E75E3FAB43A09C17C64645B2B47B30BB1", // A
        "6922F2E27B84EBBFBDC935F70F3F072B598C444727041CA02A50AD6D966A2D04", // B
        "BA292FD8E927E879E05DF06663523BDBEDE6F636511BE197E60D67019CC1A35B", // C
        "BA292FD8E927E879E05DF06663523BDBEDE6F636511BE197E60D67019CC1A35B", // C
        "BA292FD8E927E879E05DF06663523BDBEDE6F636511BE197E60D67019CC1A35B", // C
        "DD5BD367E0B00E274F1733BB2273DD4E75E3FAB43A09C17C64645B2B47B30BB1", // A
        "6922F2E27B84EBBFBDC935F70F3F072B598C444727041CA02A50AD6D966A2D04", // B
        "6922F2E27B84EBBFBDC935F70F3F072B598C444727041CA02A50AD6D966A2D04", // B
        "DD5BD367E0B00E274F1733BB2273DD4E75E3FAB43A09C17C64645B2B47B30BB1"  // A
    };

    static final String[] pTexts = {
        /*Sifrelenecek 1 mesaj var*/ "30430441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C62601",
        /*Sifrelenecek 1 mesaj var*/ "30430441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C62601",
        /*Sifrelenecek 1 mesaj var*/ "3043044104ED3BACE23C5E17652E174C835FB72BF53EE306B3406A26890221B4CEF7500F88E57A6F571288CCFFDCDA5E8A7A1F87BF97BD17BE084895D0FCE17AD5E335286E",
        /*Sifrelenecek 1 mesaj var*/ "3043044104ED3BACE23C5E17652E174C835FB72BF53EE306B3406A26890221B4CEF7500F88E57A6F571288CCFFDCDA5E8A7A1F87BF97BD17BE084895D0FCE17AD5E335286E",
        /*Sifrelenecek 4 mesaj var
        /*Sifrelenecek 9 mesaj var
        /*Sifrelenecek 16 mesaj var
        /*Sifrelenecek 17 mesaj var (Hata donmeli)*/ "308204730441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C62601",
        /*Sifrelenecek 35 mesaj var (Hata donmeli)*/ "308209290441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C626010441044A5169F673AA632F538AAA128B6348536DB2B637FD89073D49B6A23879CDB3ADBAF1E702EB2A8BADAE14BA09A26A8CA7CB1127B64B2C39A1C7BA61F4A3C62601"
    };

    static final boolean[] expectedResults = {
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        false,
        false
    };

    static final ECPoint plainPoint = new ECPoint(
            new BigInteger("f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", 16),
            new BigInteger("388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672", 16)
    );

    static SmartCard sc;
    static long session;

    static final String pubKeyLabel = "keyPub_" + System.currentTimeMillis();
    static final String priKeyLabel = "keyPri_" + System.currentTimeMillis();

    static long[] pubKeyIDs;
    static long[] privKeyIDs;

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
        sc = new SmartCard(CardType.DIRAKHSM);
        long slot = sc.getSlotList()[0];
        session = sc.openSession(slot);
        sc.login(session, "12345678");

        createKey();
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
        sc.logout(session);
        sc.closeSession(session);
    }

    private static void createKey() throws PKCS11Exception {
        final byte[] ecParamsByte = new byte[]{(byte) 0x06, (byte) 0x05, (byte) 0x2B, (byte) 0x81, (byte) 0x04, (byte) 0x00, (byte) 0x0A};

        pubKeyIDs = new long[publicKeys.length];
        privKeyIDs = new long[publicKeys.length];

        for (int i = 0; i < publicKeys.length; i++) {
            CK_ATTRIBUTE[] ECTemplatePub = new CK_ATTRIBUTE[]{
                new CK_ATTRIBUTE(PKCS11Constants.CKA_KEY_TYPE, PKCS11Constants.CKK_EC),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_EC_POINT, StringUtil.hexToByte(publicKeys[i])),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_CLASS, PKCS11Constants.CKO_PUBLIC_KEY),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_LABEL, pubKeyLabel),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_TOKEN, false),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_EC_PARAMS, ecParamsByte),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_PRIVATE, false),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_VERIFY, true)
            };

            CK_ATTRIBUTE[] ECTemplatePriv = new CK_ATTRIBUTE[]{
                new CK_ATTRIBUTE(PKCS11Constants.CKA_KEY_TYPE, PKCS11Constants.CKK_EC),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_EC_PARAMS, ecParamsByte),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_VALUE, StringUtil.hexToByte(privateKeys[i])),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_CLASS, PKCS11Constants.CKO_PRIVATE_KEY),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_LABEL, priKeyLabel),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_TOKEN, false),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_PRIVATE, true),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_EXTRACTABLE, true),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_SENSITIVE, true),
                new CK_ATTRIBUTE(PKCS11Constants.CKA_SIGN, true)
            };

            pubKeyIDs[i] = sc.getPKCS11().C_CreateObject(session, ECTemplatePub);
            privKeyIDs[i] = sc.getPKCS11().C_CreateObject(session, ECTemplatePriv);
        }
    }

    @Test
    public void elGamalPlainPointTest() throws Exception {
        ElGamalPlainData plaintext;
        ElGamalEncryptedData returnedCiphertext;
        ElGamalPlainData returnedPlainText;

        plaintext = new ElGamalPlainData(plainPoint);
        returnedCiphertext = encrypt(plaintext, pubKeyIDs[0]);
        returnedPlainText = decrypt(returnedCiphertext, privKeyIDs[0]);

        Assert.assertNotNull(returnedCiphertext);
        Assert.assertNotNull(returnedPlainText);

        ECPoint plainTextPoint = plaintext.getPoint(0);
        ECPoint returnedPlainTextPoint = returnedPlainText.getPoint(0);

        Assert.assertEquals(plainTextPoint, returnedPlainTextPoint);
    }

    @Test
    public void elGamalMultipleTest() throws Exception {
        for (int i = 0; i < pTexts.length; i++) {
            ElGamalPlainData plaintext;
            ElGamalEncryptedData returnedCiphertext;
            ElGamalPlainData returnedPlainText;

            try {
                plaintext = new ElGamalPlainData(StringUtil.hexToByte(pTexts[i]));
                returnedCiphertext = encrypt(plaintext, pubKeyIDs[i]);
                returnedPlainText = decrypt(returnedCiphertext, privKeyIDs[i]);

            } catch (Exception ex) { // HSM encrypt/decrypt sırasında hata dönerse exceptiona mı düşüyoruz, ben öyle oluyor diye anladım
                Assert.assertFalse(expectedResults[i]);
                continue;
            }

            Assert.assertTrue(expectedResults[i]);

            Assert.assertNotNull(returnedCiphertext);
            Assert.assertNotNull(returnedPlainText);

            ECPoint[] plainTextPoints = plaintext.getPoints();
            ECPoint[] returnedPlainTextPoints = returnedPlainText.getPoints();

            Assert.assertEquals(plainTextPoints.length, returnedPlainTextPoints.length);

            for (int j = 0; j < plainTextPoints.length; j++) {
                Assert.assertEquals(plainTextPoints[j], returnedPlainTextPoints[j]);
            }
        }
    }

    private ElGamalEncryptedData encrypt(ElGamalPlainData input, long pubKeyID) throws IOException, PKCS11Exception, ESYAException {
        CK_MECHANISM mech = new CK_MECHANISM(DirakHSMTemplate.CKM_ELGAMAL_EC);

        byte[] plaintext = input.getEncoded();
        byte[] ciphertext = sc.encryptData(session, pubKeyID, plaintext, mech);
        return new ElGamalEncryptedData(ciphertext);
    }

    private ElGamalPlainData decrypt(ElGamalEncryptedData input, long privKeyID) throws IOException, PKCS11Exception, ESYAException {
        CK_MECHANISM mech = new CK_MECHANISM(DirakHSMTemplate.CKM_ELGAMAL_EC);

        byte[] ciphertext = input.getEncoded();
        byte[] plaintext = sc.decryptData(session, privKeyID, ciphertext, mech);
        return new ElGamalPlainData(plaintext);
    }
}
